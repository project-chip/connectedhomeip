# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

javac_runner = "//gn/chip/java/javac_runner.py"
jar_runner = "//gn/chip/java/jar_runner.py"


# Declare a java library target
#
#   sources: List of .java files included in this library.
#
#   output_name: File name for the output .jar (not including extension).
#     Defaults to the input .jar file name.
#
template("java_library") {
  # Figure out the output name
  _jar_name = target_name
  if (defined(invoker.output_name)) {
    _jar_name = invoker.output_name
  } else {
    _jar_name += ".jar"
  }

  # What files will be compiled
  _java_files = invoker.sources


  # Generates a .java file containing all sources to be compiled
  _java_sources_file = "$target_gen_dir/$target_name.sources"
  if (defined(invoker.java_sources_file)) {
    _java_sources_file = invoker.java_sources_file
  }
  write_file(_java_sources_file, rebase_path(_java_files, root_build_dir))

  # FIXME: implement
  _javac_target_name = target_name + "__javac"
  _class_dir = rebase_path(target_gen_dir, root_build_dir) + "/classes"
  _class_list_file = "$target_gen_dir/$target_name.classlist"
  action(_javac_target_name) {
    sources = rebase_path(_java_files, root_build_dir)

    outputs = [
      _class_list_file
    ]

    script = javac_runner

    args = [
      _class_dir, rebase_path(_class_list_file, root_build_dir),
      "-d", _class_dir,
      "@" + rebase_path(_java_sources_file, root_build_dir),
    ]
  }

  action(target_name) {
    deps = [
      ":$_javac_target_name",
    ]

    outputs = [
      "$target_gen_dir/$_jar_name",
    ]

    script = jar_runner

    args = [
      "cf",
      rebase_path("$target_gen_dir/$_jar_name", root_build_dir),
      "-C", _class_dir, "."
    ]
  }
}