# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/toolchain/gcc_toolchain.gni")

template("android_clang_toolchain") {
  _invoker_toolchain_args = invoker.toolchain_args

  if (_invoker_toolchain_args.current_cpu == "arm") {
    _tool_name_root = "armv7a-linux-androideabi${invoker.api_level}-"
    _toolchain_args = {
      arm_arch = "armv7-a"
      arm_fpu = "vfpv3-d16"
      arm_float_abi = "softfp"
    }
  } else if (_invoker_toolchain_args.current_cpu == "arm64") {
    _tool_name_root = "aarch64-linux-android${invoker.api_level}-"
    _toolchain_args = {
      arm_arch = "armv8-a"
      arm_fpu = "vfpv3-d16"
      arm_float_abi = "softfp"
    }
  } else if (_invoker_toolchain_args.current_cpu == "x86_64") {
    _tool_name_root = "x86_64-linux-android${invoker.api_level}-"
    _toolchain_args = {
      x86_arch = "x86-64"
      x86_tune = "intel"
    }
  } else if (_invoker_toolchain_args.current_cpu == "x86") {
    _tool_name_root = "i686-linux-android${invoker.api_level}-"
    _toolchain_args = {
      x86_arch = "i686"
      x86_tune = "intel"
    }
  } else {
    assert(
        false,
        "Unknown/invalid current_cpu value in toolchain_args::current_cpu for android_clang_toolchain")
  }

  _android_toolchain_args = {
    current_os = "android"
    is_clang = true

    forward_variables_from(_toolchain_args, "*")
    forward_variables_from(_invoker_toolchain_args, "*")
  }

  gcc_toolchain(target_name) {
    toolchain_args = _android_toolchain_args
    ar = "llvm-ar"
    cc = _tool_name_root + "clang"
    cxx = _tool_name_root + "clang++"
  }
}
