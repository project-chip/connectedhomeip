# Copyright (c) 2022 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")

import("${chip_root}/build/chip/buildconfig_header.gni")
import("${chip_root}/src/platform/device.gni")

assert(chip_device_platform == "openiotsdk")

declare_args() {
  # Add Trusted Firmware-M (TF-M) support
  chip_openiotsdk_use_tfm = false

  # By default use flash block device storage
  chip_openiotsdk_use_psa_ps = false
}

buildconfig_header("openiotsdk_buildconfig") {
  header = "OpenIoTSDKConfig.h"
  header_dir = "ois"

  if (chip_openiotsdk_use_psa_ps) {
    _chip_openiotsdk_kv_store_config_include =
        "<platform/" + chip_device_platform + "/KVPsaPsStore.h>"
    _chip_openiotsdk_persisted_storage_key_type = "uint64_t"
  } else {
    _chip_openiotsdk_kv_store_config_include =
        "<platform/" + chip_device_platform + "/KVBlockDeviceStore.h>"
    _chip_openiotsdk_persisted_storage_key_type = "const char *"
  }

  defines = [
    "CHIP_OPEN_IOT_SDK_KV_STORE_CONFIG_INCLUDE=${_chip_openiotsdk_kv_store_config_include}",
    "CHIP_CONFIG_PERSISTED_STORAGE_KEY_TYPE=${_chip_openiotsdk_persisted_storage_key_type}",
  ]

  if (chip_openiotsdk_use_tfm) {
    defines += [ "CHIP_OPEN_IOT_SDK_USE_TFM=1" ]
  }
}

static_library("openiotsdk") {
  sources = [
    "../SingletonConfigurationManager.cpp",
    "BlePlatformConfig.h",
    "CHIPDevicePlatformConfig.h",
    "CHIPDevicePlatformEvent.h",
    "CHIPPlatformConfig.h",
    "ConfigurationManagerImpl.cpp",
    "ConfigurationManagerImpl.h",
    "ConnectivityManagerImpl.cpp",
    "ConnectivityManagerImpl.h",
    "DiagnosticDataProviderImpl.cpp",
    "DiagnosticDataProviderImpl.h",
    "InetPlatformConfig.h",
    "KeyValueStoreManagerImpl.cpp",
    "KeyValueStoreManagerImpl.h",
    "Logging.cpp",
    "NetworkCommissioningDriver.h",
    "NetworkCommissioningEthernetDriver.cpp",
    "OpenIoTSDKArchUtils.c",
    "OpenIoTSDKArchUtils.h",
    "OpenIoTSDKPort.h",
    "PlatformManagerImpl.cpp",
    "PlatformManagerImpl.h",
    "SystemPlatformConfig.h",
    "SystemTimeSupport.cpp",
  ]

  public_deps = [
    ":openiotsdk_buildconfig",
    "${chip_root}/src/platform:platform_base",
  ]

  if (chip_openiotsdk_use_psa_ps) {
    sources += [
      "KVPsaPsStore.cpp",
      "KVPsaPsStore.h",
    ]
  } else {
    sources += [
      "KVBlockDeviceStore.cpp",
      "KVBlockDeviceStore.h",
    ]
  }

  cflags = [ "-Wconversion" ]
}
