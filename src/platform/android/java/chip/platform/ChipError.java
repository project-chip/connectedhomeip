/*
 *   Copyright (c) 2024 Project CHIP Authors
 *   All rights reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
package chip.platform;

public enum ChipError {

    /**
     * SDK Core errors
     *
     * These errors are defined in src/lib/core/CHIPError.h
     */
    CHIP_NO_ERROR(0),
    CHIP_ERROR_SENDING_BLOCKED(1),
    CHIP_ERROR_CONNECTION_ABORTED(2),
    CHIP_ERROR_INCORRECT_STATE(3),
    CHIP_ERROR_MESSAGE_TOO_LONG(4),
    CHIP_ERROR_RECURSION_DEPTH_LIMIT(5),
    CHIP_ERROR_TOO_MANY_UNSOLICITED_MESSAGE_HANDLERS(6),
    CHIP_ERROR_NO_UNSOLICITED_MESSAGE_HANDLER(7),
    CHIP_ERROR_NO_CONNECTION_HANDLER(8),
    CHIP_ERROR_TOO_MANY_PEER_NODES(9),
    CHIP_ERROR_SENTINEL(10),
    CHIP_ERROR_NO_MEMORY(11),
    CHIP_ERROR_NO_MESSAGE_HANDLER(12),
    CHIP_ERROR_MESSAGE_INCOMPLETE(13),
    CHIP_ERROR_DATA_NOT_ALIGNED(14),
    CHIP_ERROR_UNKNOWN_KEY_TYPE(15),
    CHIP_ERROR_KEY_NOT_FOUND(16),
    CHIP_ERROR_WRONG_ENCRYPTION_TYPE(17),
    CHIP_ERROR_INVALID_UTF8(18),
    CHIP_ERROR_INTEGRITY_CHECK_FAILED(19),
    CHIP_ERROR_INVALID_SIGNATURE(20),
    CHIP_ERROR_INVALID_TLV_CHAR_STRING(21),
    CHIP_ERROR_LIT_SUBSCRIBE_INACTIVE_TIMEOUT(22),
    CHIP_ERROR_UNSUPPORTED_SIGNATURE_TYPE(23),
    CHIP_ERROR_INVALID_MESSAGE_LENGTH(24),
    CHIP_ERROR_BUFFER_TOO_SMALL(25),
    CHIP_ERROR_DUPLICATE_KEY_ID(26),
    CHIP_ERROR_WRONG_KEY_TYPE(27),
    CHIP_ERROR_UNINITIALIZED(28),
    CHIP_ERROR_INVALID_IPK(29),
    CHIP_ERROR_INVALID_STRING_LENGTH(30),
    CHIP_ERROR_INVALID_LIST_LENGTH(31),
    CHIP_ERROR_FAILED_DEVICE_ATTESTATION(32),
    CHIP_ERROR_END_OF_TLV(33),
    CHIP_ERROR_TLV_UNDERRUN(34),
    CHIP_ERROR_INVALID_TLV_ELEMENT(35),
    CHIP_ERROR_INVALID_TLV_TAG(36),
    CHIP_ERROR_UNKNOWN_IMPLICIT_TLV_TAG(37),
    CHIP_ERROR_WRONG_TLV_TYPE(38),
    CHIP_ERROR_TLV_CONTAINER_OPEN(39),
    CHIP_ERROR_INVALID_MESSAGE_TYPE(42),
    CHIP_ERROR_UNEXPECTED_TLV_ELEMENT(43),
    CHIP_ERROR_NOT_IMPLEMENTED(45),
    CHIP_ERROR_INVALID_ADDRESS(46),
    CHIP_ERROR_INVALID_ARGUMENT(47),
    CHIP_ERROR_INVALID_PATH_LIST(48),
    CHIP_ERROR_INVALID_DATA_LIST(49),
    CHIP_ERROR_TIMEOUT(50),
    CHIP_ERROR_INVALID_DEVICE_DESCRIPTOR(51),
    CHIP_ERROR_INVALID_PASE_PARAMETER(56),
    CHIP_ERROR_INVALID_USE_OF_SESSION_KEY(59),
    CHIP_ERROR_CONNECTION_CLOSED_UNEXPECTEDLY(60),
    CHIP_ERROR_MISSING_TLV_ELEMENT(61),
    CHIP_ERROR_RANDOM_DATA_UNAVAILABLE(62),
    CHIP_ERROR_HOST_PORT_LIST_EMPTY(65),
    CHIP_ERROR_FORCED_RESET(69),
    CHIP_ERROR_NO_ENDPOINT(70),
    CHIP_ERROR_INVALID_DESTINATION_NODE_ID(71),
    CHIP_ERROR_NOT_CONNECTED(72),
    CHIP_ERROR_CA_CERT_NOT_FOUND(74),
    CHIP_ERROR_CERT_PATH_LEN_CONSTRAINT_EXCEEDED(75),
    CHIP_ERROR_CERT_PATH_TOO_LONG(76),
    CHIP_ERROR_CERT_USAGE_NOT_ALLOWED(77),
    CHIP_ERROR_CERT_EXPIRED(78),
    CHIP_ERROR_CERT_NOT_VALID_YET(79),
    CHIP_ERROR_UNSUPPORTED_CERT_FORMAT(80),
    CHIP_ERROR_UNSUPPORTED_ELLIPTIC_CURVE(81),
    CHIP_ERROR_CERT_NOT_FOUND(83),
    CHIP_ERROR_INVALID_CASE_PARAMETER(84),
    CHIP_ERROR_CERT_LOAD_FAILED(86),
    CHIP_ERROR_CERT_NOT_TRUSTED(87),
    CHIP_ERROR_WRONG_CERT_DN(89),
    CHIP_ERROR_WRONG_NODE_ID(92),
    CHIP_ERROR_RETRANS_TABLE_FULL(100),
    CHIP_ERROR_TRANSACTION_CANCELED(104),
    CHIP_ERROR_INVALID_SUBSCRIPTION(107),
    CHIP_ERROR_UNSUPPORTED_CHIP_FEATURE(108),
    CHIP_ERROR_UNSOLICITED_MSG_NO_ORIGINATOR(112),
    CHIP_ERROR_INVALID_FABRIC_INDEX(113),
    CHIP_ERROR_TOO_MANY_CONNECTIONS(114),
    CHIP_ERROR_SHUT_DOWN(115),
    CHIP_ERROR_CANCELLED(116),
    CHIP_ERROR_TLV_TAG_NOT_FOUND(118),
    CHIP_ERROR_MISSING_SECURE_SESSION(119),
    CHIP_ERROR_INVALID_ADMIN_SUBJECT(120),
    CHIP_ERROR_INSUFFICIENT_PRIVILEGE(121),
    CHIP_ERROR_MESSAGE_COUNTER_EXHAUSTED(125),
    CHIP_ERROR_FABRIC_EXISTS(126),
    CHIP_ERROR_ENDPOINT_EXISTS(127),
    CHIP_ERROR_WRONG_ENCRYPTION_TYPE_FROM_PEER(128),
    CHIP_ERROR_INVALID_KEY_ID(133),
    CHIP_ERROR_INVALID_TIME(134),
    CHIP_ERROR_SCHEMA_MISMATCH(142),
    CHIP_ERROR_INVALID_INTEGER_VALUE(143),
    CHIP_ERROR_BAD_REQUEST(146),
    CHIP_ERROR_WRONG_CERT_TYPE(157),
    CHIP_ERROR_PERSISTED_STORAGE_FAILED(159),
    CHIP_ERROR_PERSISTED_STORAGE_VALUE_NOT_FOUND(160),
    CHIP_ERROR_IM_FABRIC_DELETED(161),
    CHIP_ERROR_IN_PROGRESS(164),
    CHIP_ERROR_ACCESS_DENIED(165),
    CHIP_ERROR_UNKNOWN_RESOURCE_ID(166),
    CHIP_ERROR_VERSION_MISMATCH(167),
    CHIP_ERROR_EVENT_ID_FOUND(171),
    CHIP_ERROR_INTERNAL(172),
    CHIP_ERROR_OPEN_FAILED(173),
    CHIP_ERROR_READ_FAILED(174),
    CHIP_ERROR_WRITE_FAILED(175),
    CHIP_ERROR_DECODE_FAILED(176),
    CHIP_ERROR_DNS_SD_UNAUTHORIZED(179),
    CHIP_ERROR_MDNS_COLLISION(180),
    CHIP_ERROR_IM_MALFORMED_ATTRIBUTE_PATH_IB(181),
    CHIP_ERROR_IM_MALFORMED_EVENT_PATH_IB(182),
    CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_IB(185),
    CHIP_ERROR_IM_MALFORMED_EVENT_DATA_IB(186),
    CHIP_ERROR_MAXIMUM_PATHS_PER_INVOKE_EXCEEDED(187),
    CHIP_ERROR_PEER_NODE_NOT_FOUND(188),
    CHIP_ERROR_HSM(189),
    CHIP_ERROR_REAL_TIME_NOT_SYNCED(191),
    CHIP_ERROR_UNEXPECTED_EVENT(192),
    CHIP_ERROR_ENDPOINT_POOL_FULL(193),
    CHIP_ERROR_INBOUND_MESSAGE_TOO_BIG(194),
    CHIP_ERROR_OUTBOUND_MESSAGE_TOO_BIG(195),
    CHIP_ERROR_DUPLICATE_MESSAGE_RECEIVED(196),
    CHIP_ERROR_INVALID_PUBLIC_KEY(197),
    CHIP_ERROR_FABRIC_MISMATCH_ON_ICA(198),
    CHIP_ERROR_NO_SHARED_TRUSTED_ROOT(201),
    CHIP_ERROR_IM_STATUS_CODE_RECEIVED(202),
    CHIP_ERROR_IM_MALFORMED_DATA_VERSION_FILTER_IB(215),
    CHIP_ERROR_NOT_FOUND(216),
    CHIP_ERROR_INVALID_FILE_IDENTIFIER(218),
    CHIP_ERROR_BUSY(219),
    CHIP_ERROR_MAX_RETRY_EXCEEDED(220),
    CHIP_ERROR_PROVIDER_LIST_EXHAUSTED(221),
    CHIP_ERROR_INVALID_SCHEME_PREFIX(223),
    CHIP_ERROR_MISSING_URI_SEPARATOR(224),
    CHIP_ERROR_HANDLER_NOT_SET(225),

    /**
     * SDK Inet Layer errors
     *
     * These errors are defined in src/inet/InetError.h
     */
    INET_ERROR_WRONG_ADDRESS_TYPE(257),
    INET_ERROR_PEER_DISCONNECTED(258),
    INET_ERROR_HOST_NOT_FOUND(265),
    INET_ERROR_DNS_TRY_AGAIN(266),
    INET_ERROR_DNS_NO_RECOVERY(267),
    INET_ERROR_WRONG_PROTOCOL_TYPE(269),
    INET_ERROR_UNKNOWN_INTERFACE(270),
    INET_ERROR_ADDRESS_NOT_FOUND(272),
    INET_ERROR_HOST_NAME_TOO_LONG(273),
    INET_ERROR_INVALID_HOST_NAME(274),
    INET_ERROR_IDLE_TIMEOUT(277),
    INET_ERROR_INVALID_IPV6_PKT(279),
    INET_ERROR_INTERFACE_INIT_FAILURE(280),
    INET_ERROR_TCP_USER_TIMEOUT(281),
    INET_ERROR_TCP_CONNECT_TIMEOUT(282),
    INET_ERROR_INCOMPATIBLE_IP_ADDRESS_TYPE(283),

    /**
     * SDK Device Layer errors
     *
     * These errors are defined in src/include/platform/CHIPDeviceError.h
     */
    CHIP_DEVICE_ERROR_CONFIG_NOT_FOUND(513),
    CHIP_DEVICE_ERROR_NOT_SERVICE_PROVISIONED(514),
    CHIP_DEVICE_ERROR_SOFTWARE_UPDATE_ABORTED(515),
    CHIP_DEVICE_ERROR_SOFTWARE_UPDATE_IGNORED(516),

    /**
     * ASN1 Layer errors
     *
     * These errors are defined in src/lib/asn1/ASN1Error.h
     */
    ASN1_END(768),
    ASN1_ERROR_UNDERRUN(769),
    ASN1_ERROR_OVERFLOW(770),
    ASN1_ERROR_INVALID_STATE(771),
    ASN1_ERROR_MAX_DEPTH_EXCEEDED(772),
    ASN1_ERROR_INVALID_ENCODING(773),
    ASN1_ERROR_UNSUPPORTED_ENCODING(774),
    ASN1_ERROR_TAG_OVERFLOW(775),
    ASN1_ERROR_LENGTH_OVERFLOW(776),
    ASN1_ERROR_VALUE_OVERFLOW(777),
    ASN1_ERROR_UNKNOWN_OBJECT_ID(778),

    /**
     * BLE Layer errors
     *
     * These errors are defined in src/ble/BleError.h
     */
    BLE_ERROR_ADAPTER_UNAVAILABLE(1025),
    BLE_ERROR_NO_CONNECTION_RECEIVED_CALLBACK(1027),
    BLE_ERROR_CENTRAL_UNSUBSCRIBED(1028),
    BLE_ERROR_GATT_SUBSCRIBE_FAILED(1029),
    BLE_ERROR_GATT_UNSUBSCRIBE_FAILED(1030),
    BLE_ERROR_GATT_WRITE_FAILED(1031),
    BLE_ERROR_GATT_INDICATE_FAILED(1032),
    BLE_ERROR_CHIPOBLE_PROTOCOL_ABORT(1035),
    BLE_ERROR_REMOTE_DEVICE_DISCONNECTED(1036),
    BLE_ERROR_APP_CLOSED_CONNECTION(1037),
    BLE_ERROR_NOT_CHIP_DEVICE(1039),
    BLE_ERROR_INCOMPATIBLE_PROTOCOL_VERSIONS(1040),
    BLE_ERROR_INVALID_FRAGMENT_SIZE(1043),
    BLE_ERROR_START_TIMER_FAILED(1044),
    BLE_ERROR_CONNECT_TIMED_OUT(1045),
    BLE_ERROR_RECEIVE_TIMED_OUT(1046),
    BLE_ERROR_INVALID_MESSAGE(1047),
    BLE_ERROR_FRAGMENT_ACK_TIMED_OUT(1048),
    BLE_ERROR_KEEP_ALIVE_TIMED_OUT(1049),
    BLE_ERROR_NO_CONNECT_COMPLETE_CALLBACK(1050),
    BLE_ERROR_INVALID_ACK(1051),
    BLE_ERROR_REASSEMBLER_MISSING_DATA(1052),
    BLE_ERROR_INVALID_BTP_HEADER_FLAGS(1053),
    BLE_ERROR_INVALID_BTP_SEQUENCE_NUMBER(1054),
    BLE_ERROR_REASSEMBLER_INCORRECT_STATE(1055),

    /**
     * IM Global errors
     *
     * These errors are defined in src/protocols/interaction_model/StatusCodeList.h
     */
    SUCCESS(1280),
    FAILURE(1281),
    INVALID_SUBSCRIPTION(1405),
    UNSUPPORTED_ACCESS(1406),
    UNSUPPORTED_ENDPOINT(1407),
    INVALID_ACTION(1408),
    UNSUPPORTED_COMMAND(1409),
    INVALID_COMMAND(1413),
    UNSUPPORTED_ATTRIBUTE(1414),
    CONSTRAINT_ERROR(1415),
    UNSUPPORTED_WRITE(1416),
    RESOURCE_EXHAUSTED(1417),
    NOT_FOUND(1419),
    UNREPORTABLE_ATTRIBUTE(1420),
    INVALID_DATA_TYPE(1421),
    UNSUPPORTED_READ(1423),
    DATA_VERSION_MISMATCH(1426),
    TIMEOUT(1428),
    BUSY(1436),
    UNSUPPORTED_CLUSTER(1475),
    NO_UPSTREAM_SUBSCRIPTION(1477),
    NEEDS_TIMED_INTERACTION(1478),
    UNSUPPORTED_EVENT(1479),
    PATHS_EXHAUSTED(1480),
    TIMED_REQUEST_MISMATCH(1481),
    FAILSAFE_REQUIRED(1482),
    INVALID_IN_STATE(1483),
    NO_COMMAND_RESPONSE(1484),
    WRITE_IGNORED(1520);

    private final long value;

    public ChipError(long value) {
        this.value = value;
    }

    public long getValue() {
        return value;
    }

    public static ChipError value(long value) {
        for (ChipError error : values()) {
            if (error.value == value) {
                return error;
            }
        }
        throw new IllegalArgumentException("Invalid value: " + value);
    }

    public String toString() {
        return toString(value);
    }

    public static native String toString(long errorCode);
}
