/*
 * Generated by gdbus-codegen 2.56.4. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __DBUSWPA_H__
#define __DBUSWPA_H__

#include <gio/gio.h>

G_BEGIN_DECLS

/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1 */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1 (wpa_fi_w1_wpa_supplicant1_get_type())
#define WPA_FI_W1_WPA_SUPPLICANT1(o) (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1, WpaFiW1Wpa_supplicant1))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1))
#define WPA_FI_W1_WPA_SUPPLICANT1_GET_IFACE(o)                                                                                     \
    (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1, WpaFiW1Wpa_supplicant1Iface))

struct _WpaFiW1Wpa_supplicant1;
typedef struct _WpaFiW1Wpa_supplicant1 WpaFiW1Wpa_supplicant1;
typedef struct _WpaFiW1Wpa_supplicant1Iface WpaFiW1Wpa_supplicant1Iface;

struct _WpaFiW1Wpa_supplicant1Iface
{
    GTypeInterface parent_iface;

    gboolean (*handle_create_interface)(WpaFiW1Wpa_supplicant1 * object, GDBusMethodInvocation * invocation, GVariant * arg_args);

    gboolean (*handle_expect_disconnect)(WpaFiW1Wpa_supplicant1 * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_get_interface)(WpaFiW1Wpa_supplicant1 * object, GDBusMethodInvocation * invocation, const gchar * arg_ifname);

    gboolean (*handle_remove_interface)(WpaFiW1Wpa_supplicant1 * object, GDBusMethodInvocation * invocation,
                                        const gchar * arg_path);

    const gchar * const * (*get_capabilities)(WpaFiW1Wpa_supplicant1 * object);

    const gchar * (*get_debug_level)(WpaFiW1Wpa_supplicant1 * object);

    gboolean (*get_debug_show_keys)(WpaFiW1Wpa_supplicant1 * object);

    gboolean (*get_debug_timestamp)(WpaFiW1Wpa_supplicant1 * object);

    const gchar * const * (*get_eap_methods)(WpaFiW1Wpa_supplicant1 * object);

    const gchar * const * (*get_interfaces)(WpaFiW1Wpa_supplicant1 * object);

    const gchar * (*get_wfdies)(WpaFiW1Wpa_supplicant1 * object);

    void (*interface_added)(WpaFiW1Wpa_supplicant1 * object, const gchar * arg_path, GVariant * arg_properties);

    void (*interface_removed)(WpaFiW1Wpa_supplicant1 * object, const gchar * arg_path);

    void (*properties_changed)(WpaFiW1Wpa_supplicant1 * object, GVariant * arg_properties);
};

GType wpa_fi_w1_wpa_supplicant1_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo * wpa_fi_w1_wpa_supplicant1_interface_info(void);
guint wpa_fi_w1_wpa_supplicant1_override_properties(GObjectClass * klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void wpa_fi_w1_wpa_supplicant1_complete_create_interface(WpaFiW1Wpa_supplicant1 * object, GDBusMethodInvocation * invocation,
                                                         const gchar * path);

void wpa_fi_w1_wpa_supplicant1_complete_remove_interface(WpaFiW1Wpa_supplicant1 * object, GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_complete_get_interface(WpaFiW1Wpa_supplicant1 * object, GDBusMethodInvocation * invocation,
                                                      const gchar * path);

void wpa_fi_w1_wpa_supplicant1_complete_expect_disconnect(WpaFiW1Wpa_supplicant1 * object, GDBusMethodInvocation * invocation);

/* D-Bus signal emissions functions: */
void wpa_fi_w1_wpa_supplicant1_emit_interface_added(WpaFiW1Wpa_supplicant1 * object, const gchar * arg_path,
                                                    GVariant * arg_properties);

void wpa_fi_w1_wpa_supplicant1_emit_interface_removed(WpaFiW1Wpa_supplicant1 * object, const gchar * arg_path);

void wpa_fi_w1_wpa_supplicant1_emit_properties_changed(WpaFiW1Wpa_supplicant1 * object, GVariant * arg_properties);

/* D-Bus method calls: */
void wpa_fi_w1_wpa_supplicant1_call_create_interface(WpaFiW1Wpa_supplicant1 * proxy, GVariant * arg_args,
                                                     GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_call_create_interface_finish(WpaFiW1Wpa_supplicant1 * proxy, gchar ** out_path,
                                                                GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_call_create_interface_sync(WpaFiW1Wpa_supplicant1 * proxy, GVariant * arg_args,
                                                              gchar ** out_path, GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_call_remove_interface(WpaFiW1Wpa_supplicant1 * proxy, const gchar * arg_path,
                                                     GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_call_remove_interface_finish(WpaFiW1Wpa_supplicant1 * proxy, GAsyncResult * res,
                                                                GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_call_remove_interface_sync(WpaFiW1Wpa_supplicant1 * proxy, const gchar * arg_path,
                                                              GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_call_get_interface(WpaFiW1Wpa_supplicant1 * proxy, const gchar * arg_ifname,
                                                  GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_call_get_interface_finish(WpaFiW1Wpa_supplicant1 * proxy, gchar ** out_path, GAsyncResult * res,
                                                             GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_call_get_interface_sync(WpaFiW1Wpa_supplicant1 * proxy, const gchar * arg_ifname,
                                                           gchar ** out_path, GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_call_expect_disconnect(WpaFiW1Wpa_supplicant1 * proxy, GCancellable * cancellable,
                                                      GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_call_expect_disconnect_finish(WpaFiW1Wpa_supplicant1 * proxy, GAsyncResult * res,
                                                                 GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_call_expect_disconnect_sync(WpaFiW1Wpa_supplicant1 * proxy, GCancellable * cancellable,
                                                               GError ** error);

/* D-Bus property accessors: */
const gchar * wpa_fi_w1_wpa_supplicant1_get_debug_level(WpaFiW1Wpa_supplicant1 * object);
gchar * wpa_fi_w1_wpa_supplicant1_dup_debug_level(WpaFiW1Wpa_supplicant1 * object);
void wpa_fi_w1_wpa_supplicant1_set_debug_level(WpaFiW1Wpa_supplicant1 * object, const gchar * value);

gboolean wpa_fi_w1_wpa_supplicant1_get_debug_timestamp(WpaFiW1Wpa_supplicant1 * object);
void wpa_fi_w1_wpa_supplicant1_set_debug_timestamp(WpaFiW1Wpa_supplicant1 * object, gboolean value);

gboolean wpa_fi_w1_wpa_supplicant1_get_debug_show_keys(WpaFiW1Wpa_supplicant1 * object);
void wpa_fi_w1_wpa_supplicant1_set_debug_show_keys(WpaFiW1Wpa_supplicant1 * object, gboolean value);

const gchar * const * wpa_fi_w1_wpa_supplicant1_get_interfaces(WpaFiW1Wpa_supplicant1 * object);
gchar ** wpa_fi_w1_wpa_supplicant1_dup_interfaces(WpaFiW1Wpa_supplicant1 * object);
void wpa_fi_w1_wpa_supplicant1_set_interfaces(WpaFiW1Wpa_supplicant1 * object, const gchar * const * value);

const gchar * const * wpa_fi_w1_wpa_supplicant1_get_eap_methods(WpaFiW1Wpa_supplicant1 * object);
gchar ** wpa_fi_w1_wpa_supplicant1_dup_eap_methods(WpaFiW1Wpa_supplicant1 * object);
void wpa_fi_w1_wpa_supplicant1_set_eap_methods(WpaFiW1Wpa_supplicant1 * object, const gchar * const * value);

const gchar * const * wpa_fi_w1_wpa_supplicant1_get_capabilities(WpaFiW1Wpa_supplicant1 * object);
gchar ** wpa_fi_w1_wpa_supplicant1_dup_capabilities(WpaFiW1Wpa_supplicant1 * object);
void wpa_fi_w1_wpa_supplicant1_set_capabilities(WpaFiW1Wpa_supplicant1 * object, const gchar * const * value);

const gchar * wpa_fi_w1_wpa_supplicant1_get_wfdies(WpaFiW1Wpa_supplicant1 * object);
gchar * wpa_fi_w1_wpa_supplicant1_dup_wfdies(WpaFiW1Wpa_supplicant1 * object);
void wpa_fi_w1_wpa_supplicant1_set_wfdies(WpaFiW1Wpa_supplicant1 * object, const gchar * value);

/* ---- */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1_PROXY (wpa_fi_w1_wpa_supplicant1_proxy_get_type())
#define WPA_FI_W1_WPA_SUPPLICANT1_PROXY(o)                                                                                         \
    (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_PROXY, WpaFiW1Wpa_supplicant1Proxy))
#define WPA_FI_W1_WPA_SUPPLICANT1_PROXY_CLASS(k)                                                                                   \
    (G_TYPE_CHECK_CLASS_CAST((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_PROXY, WpaFiW1Wpa_supplicant1ProxyClass))
#define WPA_FI_W1_WPA_SUPPLICANT1_PROXY_GET_CLASS(o)                                                                               \
    (G_TYPE_INSTANCE_GET_CLASS((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_PROXY, WpaFiW1Wpa_supplicant1ProxyClass))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_PROXY))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_PROXY))

typedef struct _WpaFiW1Wpa_supplicant1Proxy WpaFiW1Wpa_supplicant1Proxy;
typedef struct _WpaFiW1Wpa_supplicant1ProxyClass WpaFiW1Wpa_supplicant1ProxyClass;
typedef struct _WpaFiW1Wpa_supplicant1ProxyPrivate WpaFiW1Wpa_supplicant1ProxyPrivate;

struct _WpaFiW1Wpa_supplicant1Proxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    WpaFiW1Wpa_supplicant1ProxyPrivate * priv;
};

struct _WpaFiW1Wpa_supplicant1ProxyClass
{
    GDBusProxyClass parent_class;
};

GType wpa_fi_w1_wpa_supplicant1_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaFiW1Wpa_supplicant1Proxy, g_object_unref)
#endif

void wpa_fi_w1_wpa_supplicant1_proxy_new(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                         const gchar * object_path, GCancellable * cancellable, GAsyncReadyCallback callback,
                                         gpointer user_data);
WpaFiW1Wpa_supplicant1 * wpa_fi_w1_wpa_supplicant1_proxy_new_finish(GAsyncResult * res, GError ** error);
WpaFiW1Wpa_supplicant1 * wpa_fi_w1_wpa_supplicant1_proxy_new_sync(GDBusConnection * connection, GDBusProxyFlags flags,
                                                                  const gchar * name, const gchar * object_path,
                                                                  GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                 const gchar * object_path, GCancellable * cancellable,
                                                 GAsyncReadyCallback callback, gpointer user_data);
WpaFiW1Wpa_supplicant1 * wpa_fi_w1_wpa_supplicant1_proxy_new_for_bus_finish(GAsyncResult * res, GError ** error);
WpaFiW1Wpa_supplicant1 * wpa_fi_w1_wpa_supplicant1_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags,
                                                                          const gchar * name, const gchar * object_path,
                                                                          GCancellable * cancellable, GError ** error);

/* ---- */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1_SKELETON (wpa_fi_w1_wpa_supplicant1_skeleton_get_type())
#define WPA_FI_W1_WPA_SUPPLICANT1_SKELETON(o)                                                                                      \
    (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_SKELETON, WpaFiW1Wpa_supplicant1Skeleton))
#define WPA_FI_W1_WPA_SUPPLICANT1_SKELETON_CLASS(k)                                                                                \
    (G_TYPE_CHECK_CLASS_CAST((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_SKELETON, WpaFiW1Wpa_supplicant1SkeletonClass))
#define WPA_FI_W1_WPA_SUPPLICANT1_SKELETON_GET_CLASS(o)                                                                            \
    (G_TYPE_INSTANCE_GET_CLASS((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_SKELETON, WpaFiW1Wpa_supplicant1SkeletonClass))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_SKELETON))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_SKELETON))

typedef struct _WpaFiW1Wpa_supplicant1Skeleton WpaFiW1Wpa_supplicant1Skeleton;
typedef struct _WpaFiW1Wpa_supplicant1SkeletonClass WpaFiW1Wpa_supplicant1SkeletonClass;
typedef struct _WpaFiW1Wpa_supplicant1SkeletonPrivate WpaFiW1Wpa_supplicant1SkeletonPrivate;

struct _WpaFiW1Wpa_supplicant1Skeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    WpaFiW1Wpa_supplicant1SkeletonPrivate * priv;
};

struct _WpaFiW1Wpa_supplicant1SkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType wpa_fi_w1_wpa_supplicant1_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaFiW1Wpa_supplicant1Skeleton, g_object_unref)
#endif

WpaFiW1Wpa_supplicant1 * wpa_fi_w1_wpa_supplicant1_skeleton_new(void);

G_END_DECLS

#endif /* __DBUSWPA_H__ */
