/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __DBUSBLUEZ_H__
#define __DBUSBLUEZ_H__

#include <gio/gio.h>

G_BEGIN_DECLS

/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Adapter1 */

#define BLUEZ_TYPE_ADAPTER1 (bluez_adapter1_get_type())
#define BLUEZ_ADAPTER1(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_ADAPTER1, BluezAdapter1))
#define BLUEZ_IS_ADAPTER1(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_ADAPTER1))
#define BLUEZ_ADAPTER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), BLUEZ_TYPE_ADAPTER1, BluezAdapter1Iface))

struct _BluezAdapter1;
typedef struct _BluezAdapter1 BluezAdapter1;
typedef struct _BluezAdapter1Iface BluezAdapter1Iface;

struct _BluezAdapter1Iface
{
    GTypeInterface parent_iface;

    gboolean (*handle_connect_device)(BluezAdapter1 * object, GDBusMethodInvocation * invocation, GVariant * arg_properties);

    gboolean (*handle_get_discovery_filters)(BluezAdapter1 * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_remove_device)(BluezAdapter1 * object, GDBusMethodInvocation * invocation, const gchar * arg_device);

    gboolean (*handle_set_discovery_filter)(BluezAdapter1 * object, GDBusMethodInvocation * invocation, GVariant * arg_properties);

    gboolean (*handle_start_discovery)(BluezAdapter1 * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_stop_discovery)(BluezAdapter1 * object, GDBusMethodInvocation * invocation);

    const gchar * (*get_address)(BluezAdapter1 * object);

    const gchar * (*get_address_type)(BluezAdapter1 * object);

    const gchar * (*get_alias)(BluezAdapter1 * object);

    guint (*get_class)(BluezAdapter1 * object);

    gboolean (*get_discoverable)(BluezAdapter1 * object);

    guint (*get_discoverable_timeout)(BluezAdapter1 * object);

    gboolean (*get_discovering)(BluezAdapter1 * object);

    const gchar * (*get_modalias)(BluezAdapter1 * object);

    const gchar * (*get_name)(BluezAdapter1 * object);

    gboolean (*get_pairable)(BluezAdapter1 * object);

    guint (*get_pairable_timeout)(BluezAdapter1 * object);

    gboolean (*get_powered)(BluezAdapter1 * object);

    const gchar * const * (*get_roles)(BluezAdapter1 * object);

    const gchar * const * (*get_uuids)(BluezAdapter1 * object);
};

GType bluez_adapter1_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo * bluez_adapter1_interface_info(void);
guint bluez_adapter1_override_properties(GObjectClass * klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void bluez_adapter1_complete_start_discovery(BluezAdapter1 * object, GDBusMethodInvocation * invocation);

void bluez_adapter1_complete_set_discovery_filter(BluezAdapter1 * object, GDBusMethodInvocation * invocation);

void bluez_adapter1_complete_stop_discovery(BluezAdapter1 * object, GDBusMethodInvocation * invocation);

void bluez_adapter1_complete_remove_device(BluezAdapter1 * object, GDBusMethodInvocation * invocation);

void bluez_adapter1_complete_get_discovery_filters(BluezAdapter1 * object, GDBusMethodInvocation * invocation,
                                                   const gchar * const * filters);

void bluez_adapter1_complete_connect_device(BluezAdapter1 * object, GDBusMethodInvocation * invocation);

/* D-Bus method calls: */
void bluez_adapter1_call_start_discovery(BluezAdapter1 * proxy, GCancellable * cancellable, GAsyncReadyCallback callback,
                                         gpointer user_data);

gboolean bluez_adapter1_call_start_discovery_finish(BluezAdapter1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_adapter1_call_start_discovery_sync(BluezAdapter1 * proxy, GCancellable * cancellable, GError ** error);

void bluez_adapter1_call_set_discovery_filter(BluezAdapter1 * proxy, GVariant * arg_properties, GCancellable * cancellable,
                                              GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_adapter1_call_set_discovery_filter_finish(BluezAdapter1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_adapter1_call_set_discovery_filter_sync(BluezAdapter1 * proxy, GVariant * arg_properties, GCancellable * cancellable,
                                                       GError ** error);

void bluez_adapter1_call_stop_discovery(BluezAdapter1 * proxy, GCancellable * cancellable, GAsyncReadyCallback callback,
                                        gpointer user_data);

gboolean bluez_adapter1_call_stop_discovery_finish(BluezAdapter1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_adapter1_call_stop_discovery_sync(BluezAdapter1 * proxy, GCancellable * cancellable, GError ** error);

void bluez_adapter1_call_remove_device(BluezAdapter1 * proxy, const gchar * arg_device, GCancellable * cancellable,
                                       GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_adapter1_call_remove_device_finish(BluezAdapter1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_adapter1_call_remove_device_sync(BluezAdapter1 * proxy, const gchar * arg_device, GCancellable * cancellable,
                                                GError ** error);

void bluez_adapter1_call_get_discovery_filters(BluezAdapter1 * proxy, GCancellable * cancellable, GAsyncReadyCallback callback,
                                               gpointer user_data);

gboolean bluez_adapter1_call_get_discovery_filters_finish(BluezAdapter1 * proxy, gchar *** out_filters, GAsyncResult * res,
                                                          GError ** error);

gboolean bluez_adapter1_call_get_discovery_filters_sync(BluezAdapter1 * proxy, gchar *** out_filters, GCancellable * cancellable,
                                                        GError ** error);

void bluez_adapter1_call_connect_device(BluezAdapter1 * proxy, GVariant * arg_properties, GCancellable * cancellable,
                                        GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_adapter1_call_connect_device_finish(BluezAdapter1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_adapter1_call_connect_device_sync(BluezAdapter1 * proxy, GVariant * arg_properties, GCancellable * cancellable,
                                                 GError ** error);

/* D-Bus property accessors: */
const gchar * bluez_adapter1_get_address(BluezAdapter1 * object);
gchar * bluez_adapter1_dup_address(BluezAdapter1 * object);
void bluez_adapter1_set_address(BluezAdapter1 * object, const gchar * value);

const gchar * bluez_adapter1_get_address_type(BluezAdapter1 * object);
gchar * bluez_adapter1_dup_address_type(BluezAdapter1 * object);
void bluez_adapter1_set_address_type(BluezAdapter1 * object, const gchar * value);

const gchar * bluez_adapter1_get_name(BluezAdapter1 * object);
gchar * bluez_adapter1_dup_name(BluezAdapter1 * object);
void bluez_adapter1_set_name(BluezAdapter1 * object, const gchar * value);

const gchar * bluez_adapter1_get_alias(BluezAdapter1 * object);
gchar * bluez_adapter1_dup_alias(BluezAdapter1 * object);
void bluez_adapter1_set_alias(BluezAdapter1 * object, const gchar * value);

guint bluez_adapter1_get_class(BluezAdapter1 * object);
void bluez_adapter1_set_class(BluezAdapter1 * object, guint value);

gboolean bluez_adapter1_get_powered(BluezAdapter1 * object);
void bluez_adapter1_set_powered(BluezAdapter1 * object, gboolean value);

gboolean bluez_adapter1_get_discoverable(BluezAdapter1 * object);
void bluez_adapter1_set_discoverable(BluezAdapter1 * object, gboolean value);

guint bluez_adapter1_get_discoverable_timeout(BluezAdapter1 * object);
void bluez_adapter1_set_discoverable_timeout(BluezAdapter1 * object, guint value);

gboolean bluez_adapter1_get_pairable(BluezAdapter1 * object);
void bluez_adapter1_set_pairable(BluezAdapter1 * object, gboolean value);

guint bluez_adapter1_get_pairable_timeout(BluezAdapter1 * object);
void bluez_adapter1_set_pairable_timeout(BluezAdapter1 * object, guint value);

gboolean bluez_adapter1_get_discovering(BluezAdapter1 * object);
void bluez_adapter1_set_discovering(BluezAdapter1 * object, gboolean value);

const gchar * const * bluez_adapter1_get_uuids(BluezAdapter1 * object);
gchar ** bluez_adapter1_dup_uuids(BluezAdapter1 * object);
void bluez_adapter1_set_uuids(BluezAdapter1 * object, const gchar * const * value);

const gchar * bluez_adapter1_get_modalias(BluezAdapter1 * object);
gchar * bluez_adapter1_dup_modalias(BluezAdapter1 * object);
void bluez_adapter1_set_modalias(BluezAdapter1 * object, const gchar * value);

const gchar * const * bluez_adapter1_get_roles(BluezAdapter1 * object);
gchar ** bluez_adapter1_dup_roles(BluezAdapter1 * object);
void bluez_adapter1_set_roles(BluezAdapter1 * object, const gchar * const * value);

/* ---- */

#define BLUEZ_TYPE_ADAPTER1_PROXY (bluez_adapter1_proxy_get_type())
#define BLUEZ_ADAPTER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_ADAPTER1_PROXY, BluezAdapter1Proxy))
#define BLUEZ_ADAPTER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_ADAPTER1_PROXY, BluezAdapter1ProxyClass))
#define BLUEZ_ADAPTER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_ADAPTER1_PROXY, BluezAdapter1ProxyClass))
#define BLUEZ_IS_ADAPTER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_ADAPTER1_PROXY))
#define BLUEZ_IS_ADAPTER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_ADAPTER1_PROXY))

typedef struct _BluezAdapter1Proxy BluezAdapter1Proxy;
typedef struct _BluezAdapter1ProxyClass BluezAdapter1ProxyClass;
typedef struct _BluezAdapter1ProxyPrivate BluezAdapter1ProxyPrivate;

struct _BluezAdapter1Proxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    BluezAdapter1ProxyPrivate * priv;
};

struct _BluezAdapter1ProxyClass
{
    GDBusProxyClass parent_class;
};

GType bluez_adapter1_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezAdapter1Proxy, g_object_unref)
#endif

void bluez_adapter1_proxy_new(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name, const gchar * object_path,
                              GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
BluezAdapter1 * bluez_adapter1_proxy_new_finish(GAsyncResult * res, GError ** error);
BluezAdapter1 * bluez_adapter1_proxy_new_sync(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                              const gchar * object_path, GCancellable * cancellable, GError ** error);

void bluez_adapter1_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar * name, const gchar * object_path,
                                      GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
BluezAdapter1 * bluez_adapter1_proxy_new_for_bus_finish(GAsyncResult * res, GError ** error);
BluezAdapter1 * bluez_adapter1_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                      const gchar * object_path, GCancellable * cancellable, GError ** error);

/* ---- */

#define BLUEZ_TYPE_ADAPTER1_SKELETON (bluez_adapter1_skeleton_get_type())
#define BLUEZ_ADAPTER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_ADAPTER1_SKELETON, BluezAdapter1Skeleton))
#define BLUEZ_ADAPTER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_ADAPTER1_SKELETON, BluezAdapter1SkeletonClass))
#define BLUEZ_ADAPTER1_SKELETON_GET_CLASS(o)                                                                                       \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_ADAPTER1_SKELETON, BluezAdapter1SkeletonClass))
#define BLUEZ_IS_ADAPTER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_ADAPTER1_SKELETON))
#define BLUEZ_IS_ADAPTER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_ADAPTER1_SKELETON))

typedef struct _BluezAdapter1Skeleton BluezAdapter1Skeleton;
typedef struct _BluezAdapter1SkeletonClass BluezAdapter1SkeletonClass;
typedef struct _BluezAdapter1SkeletonPrivate BluezAdapter1SkeletonPrivate;

struct _BluezAdapter1Skeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    BluezAdapter1SkeletonPrivate * priv;
};

struct _BluezAdapter1SkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_adapter1_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezAdapter1Skeleton, g_object_unref)
#endif

BluezAdapter1 * bluez_adapter1_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Device1 */

#define BLUEZ_TYPE_DEVICE1 (bluez_device1_get_type())
#define BLUEZ_DEVICE1(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_DEVICE1, BluezDevice1))
#define BLUEZ_IS_DEVICE1(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_DEVICE1))
#define BLUEZ_DEVICE1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), BLUEZ_TYPE_DEVICE1, BluezDevice1Iface))

struct _BluezDevice1;
typedef struct _BluezDevice1 BluezDevice1;
typedef struct _BluezDevice1Iface BluezDevice1Iface;

struct _BluezDevice1Iface
{
    GTypeInterface parent_iface;

    gboolean (*handle_cancel_pairing)(BluezDevice1 * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_connect)(BluezDevice1 * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_connect_profile)(BluezDevice1 * object, GDBusMethodInvocation * invocation, const gchar * arg_UUID);

    gboolean (*handle_disconnect)(BluezDevice1 * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_disconnect_profile)(BluezDevice1 * object, GDBusMethodInvocation * invocation, const gchar * arg_UUID);

    gboolean (*handle_pair)(BluezDevice1 * object, GDBusMethodInvocation * invocation);

    const gchar * (*get_adapter)(BluezDevice1 * object);

    const gchar * (*get_address)(BluezDevice1 * object);

    const gchar * (*get_address_type)(BluezDevice1 * object);

    GVariant * (*get_advertising_data)(BluezDevice1 * object);

    const gchar * (*get_advertising_flags)(BluezDevice1 * object);

    const gchar * (*get_alias)(BluezDevice1 * object);

    guint16 (*get_appearance)(BluezDevice1 * object);

    gboolean (*get_blocked)(BluezDevice1 * object);

    guint (*get_class)(BluezDevice1 * object);

    gboolean (*get_connected)(BluezDevice1 * object);

    const gchar * (*get_icon)(BluezDevice1 * object);

    gboolean (*get_legacy_pairing)(BluezDevice1 * object);

    GVariant * (*get_manufacturer_data)(BluezDevice1 * object);

    const gchar * (*get_modalias)(BluezDevice1 * object);

    const gchar * (*get_name)(BluezDevice1 * object);

    gboolean (*get_paired)(BluezDevice1 * object);

    gint16 (*get_rssi)(BluezDevice1 * object);

    GVariant * (*get_service_data)(BluezDevice1 * object);

    gboolean (*get_services_resolved)(BluezDevice1 * object);

    gboolean (*get_trusted)(BluezDevice1 * object);

    gint16 (*get_tx_power)(BluezDevice1 * object);

    const gchar * const * (*get_uuids)(BluezDevice1 * object);

    gboolean (*get_wake_allowed)(BluezDevice1 * object);
};

GType bluez_device1_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo * bluez_device1_interface_info(void);
guint bluez_device1_override_properties(GObjectClass * klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void bluez_device1_complete_disconnect(BluezDevice1 * object, GDBusMethodInvocation * invocation);

void bluez_device1_complete_connect(BluezDevice1 * object, GDBusMethodInvocation * invocation);

void bluez_device1_complete_connect_profile(BluezDevice1 * object, GDBusMethodInvocation * invocation);

void bluez_device1_complete_disconnect_profile(BluezDevice1 * object, GDBusMethodInvocation * invocation);

void bluez_device1_complete_pair(BluezDevice1 * object, GDBusMethodInvocation * invocation);

void bluez_device1_complete_cancel_pairing(BluezDevice1 * object, GDBusMethodInvocation * invocation);

/* D-Bus method calls: */
void bluez_device1_call_disconnect(BluezDevice1 * proxy, GCancellable * cancellable, GAsyncReadyCallback callback,
                                   gpointer user_data);

gboolean bluez_device1_call_disconnect_finish(BluezDevice1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_device1_call_disconnect_sync(BluezDevice1 * proxy, GCancellable * cancellable, GError ** error);

void bluez_device1_call_connect(BluezDevice1 * proxy, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_device1_call_connect_finish(BluezDevice1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_device1_call_connect_sync(BluezDevice1 * proxy, GCancellable * cancellable, GError ** error);

void bluez_device1_call_connect_profile(BluezDevice1 * proxy, const gchar * arg_UUID, GCancellable * cancellable,
                                        GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_device1_call_connect_profile_finish(BluezDevice1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_device1_call_connect_profile_sync(BluezDevice1 * proxy, const gchar * arg_UUID, GCancellable * cancellable,
                                                 GError ** error);

void bluez_device1_call_disconnect_profile(BluezDevice1 * proxy, const gchar * arg_UUID, GCancellable * cancellable,
                                           GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_device1_call_disconnect_profile_finish(BluezDevice1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_device1_call_disconnect_profile_sync(BluezDevice1 * proxy, const gchar * arg_UUID, GCancellable * cancellable,
                                                    GError ** error);

void bluez_device1_call_pair(BluezDevice1 * proxy, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_device1_call_pair_finish(BluezDevice1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_device1_call_pair_sync(BluezDevice1 * proxy, GCancellable * cancellable, GError ** error);

void bluez_device1_call_cancel_pairing(BluezDevice1 * proxy, GCancellable * cancellable, GAsyncReadyCallback callback,
                                       gpointer user_data);

gboolean bluez_device1_call_cancel_pairing_finish(BluezDevice1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_device1_call_cancel_pairing_sync(BluezDevice1 * proxy, GCancellable * cancellable, GError ** error);

/* D-Bus property accessors: */
const gchar * bluez_device1_get_address(BluezDevice1 * object);
gchar * bluez_device1_dup_address(BluezDevice1 * object);
void bluez_device1_set_address(BluezDevice1 * object, const gchar * value);

const gchar * bluez_device1_get_address_type(BluezDevice1 * object);
gchar * bluez_device1_dup_address_type(BluezDevice1 * object);
void bluez_device1_set_address_type(BluezDevice1 * object, const gchar * value);

const gchar * bluez_device1_get_name(BluezDevice1 * object);
gchar * bluez_device1_dup_name(BluezDevice1 * object);
void bluez_device1_set_name(BluezDevice1 * object, const gchar * value);

const gchar * bluez_device1_get_alias(BluezDevice1 * object);
gchar * bluez_device1_dup_alias(BluezDevice1 * object);
void bluez_device1_set_alias(BluezDevice1 * object, const gchar * value);

guint bluez_device1_get_class(BluezDevice1 * object);
void bluez_device1_set_class(BluezDevice1 * object, guint value);

guint16 bluez_device1_get_appearance(BluezDevice1 * object);
void bluez_device1_set_appearance(BluezDevice1 * object, guint16 value);

const gchar * bluez_device1_get_icon(BluezDevice1 * object);
gchar * bluez_device1_dup_icon(BluezDevice1 * object);
void bluez_device1_set_icon(BluezDevice1 * object, const gchar * value);

gboolean bluez_device1_get_paired(BluezDevice1 * object);
void bluez_device1_set_paired(BluezDevice1 * object, gboolean value);

gboolean bluez_device1_get_trusted(BluezDevice1 * object);
void bluez_device1_set_trusted(BluezDevice1 * object, gboolean value);

gboolean bluez_device1_get_blocked(BluezDevice1 * object);
void bluez_device1_set_blocked(BluezDevice1 * object, gboolean value);

gboolean bluez_device1_get_legacy_pairing(BluezDevice1 * object);
void bluez_device1_set_legacy_pairing(BluezDevice1 * object, gboolean value);

gint16 bluez_device1_get_rssi(BluezDevice1 * object);
void bluez_device1_set_rssi(BluezDevice1 * object, gint16 value);

gboolean bluez_device1_get_connected(BluezDevice1 * object);
void bluez_device1_set_connected(BluezDevice1 * object, gboolean value);

const gchar * const * bluez_device1_get_uuids(BluezDevice1 * object);
gchar ** bluez_device1_dup_uuids(BluezDevice1 * object);
void bluez_device1_set_uuids(BluezDevice1 * object, const gchar * const * value);

const gchar * bluez_device1_get_modalias(BluezDevice1 * object);
gchar * bluez_device1_dup_modalias(BluezDevice1 * object);
void bluez_device1_set_modalias(BluezDevice1 * object, const gchar * value);

const gchar * bluez_device1_get_adapter(BluezDevice1 * object);
gchar * bluez_device1_dup_adapter(BluezDevice1 * object);
void bluez_device1_set_adapter(BluezDevice1 * object, const gchar * value);

GVariant * bluez_device1_get_manufacturer_data(BluezDevice1 * object);
GVariant * bluez_device1_dup_manufacturer_data(BluezDevice1 * object);
void bluez_device1_set_manufacturer_data(BluezDevice1 * object, GVariant * value);

GVariant * bluez_device1_get_service_data(BluezDevice1 * object);
GVariant * bluez_device1_dup_service_data(BluezDevice1 * object);
void bluez_device1_set_service_data(BluezDevice1 * object, GVariant * value);

gint16 bluez_device1_get_tx_power(BluezDevice1 * object);
void bluez_device1_set_tx_power(BluezDevice1 * object, gint16 value);

gboolean bluez_device1_get_services_resolved(BluezDevice1 * object);
void bluez_device1_set_services_resolved(BluezDevice1 * object, gboolean value);

const gchar * bluez_device1_get_advertising_flags(BluezDevice1 * object);
gchar * bluez_device1_dup_advertising_flags(BluezDevice1 * object);
void bluez_device1_set_advertising_flags(BluezDevice1 * object, const gchar * value);

GVariant * bluez_device1_get_advertising_data(BluezDevice1 * object);
GVariant * bluez_device1_dup_advertising_data(BluezDevice1 * object);
void bluez_device1_set_advertising_data(BluezDevice1 * object, GVariant * value);

gboolean bluez_device1_get_wake_allowed(BluezDevice1 * object);
void bluez_device1_set_wake_allowed(BluezDevice1 * object, gboolean value);

/* ---- */

#define BLUEZ_TYPE_DEVICE1_PROXY (bluez_device1_proxy_get_type())
#define BLUEZ_DEVICE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_DEVICE1_PROXY, BluezDevice1Proxy))
#define BLUEZ_DEVICE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_DEVICE1_PROXY, BluezDevice1ProxyClass))
#define BLUEZ_DEVICE1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_DEVICE1_PROXY, BluezDevice1ProxyClass))
#define BLUEZ_IS_DEVICE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_DEVICE1_PROXY))
#define BLUEZ_IS_DEVICE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_DEVICE1_PROXY))

typedef struct _BluezDevice1Proxy BluezDevice1Proxy;
typedef struct _BluezDevice1ProxyClass BluezDevice1ProxyClass;
typedef struct _BluezDevice1ProxyPrivate BluezDevice1ProxyPrivate;

struct _BluezDevice1Proxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    BluezDevice1ProxyPrivate * priv;
};

struct _BluezDevice1ProxyClass
{
    GDBusProxyClass parent_class;
};

GType bluez_device1_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezDevice1Proxy, g_object_unref)
#endif

void bluez_device1_proxy_new(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name, const gchar * object_path,
                             GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
BluezDevice1 * bluez_device1_proxy_new_finish(GAsyncResult * res, GError ** error);
BluezDevice1 * bluez_device1_proxy_new_sync(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                            const gchar * object_path, GCancellable * cancellable, GError ** error);

void bluez_device1_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar * name, const gchar * object_path,
                                     GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
BluezDevice1 * bluez_device1_proxy_new_for_bus_finish(GAsyncResult * res, GError ** error);
BluezDevice1 * bluez_device1_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                    const gchar * object_path, GCancellable * cancellable, GError ** error);

/* ---- */

#define BLUEZ_TYPE_DEVICE1_SKELETON (bluez_device1_skeleton_get_type())
#define BLUEZ_DEVICE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_DEVICE1_SKELETON, BluezDevice1Skeleton))
#define BLUEZ_DEVICE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_DEVICE1_SKELETON, BluezDevice1SkeletonClass))
#define BLUEZ_DEVICE1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_DEVICE1_SKELETON, BluezDevice1SkeletonClass))
#define BLUEZ_IS_DEVICE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_DEVICE1_SKELETON))
#define BLUEZ_IS_DEVICE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_DEVICE1_SKELETON))

typedef struct _BluezDevice1Skeleton BluezDevice1Skeleton;
typedef struct _BluezDevice1SkeletonClass BluezDevice1SkeletonClass;
typedef struct _BluezDevice1SkeletonPrivate BluezDevice1SkeletonPrivate;

struct _BluezDevice1Skeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    BluezDevice1SkeletonPrivate * priv;
};

struct _BluezDevice1SkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_device1_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezDevice1Skeleton, g_object_unref)
#endif

BluezDevice1 * bluez_device1_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.GattManager1 */

#define BLUEZ_TYPE_GATT_MANAGER1 (bluez_gatt_manager1_get_type())
#define BLUEZ_GATT_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_GATT_MANAGER1, BluezGattManager1))
#define BLUEZ_IS_GATT_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_GATT_MANAGER1))
#define BLUEZ_GATT_MANAGER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), BLUEZ_TYPE_GATT_MANAGER1, BluezGattManager1Iface))

struct _BluezGattManager1;
typedef struct _BluezGattManager1 BluezGattManager1;
typedef struct _BluezGattManager1Iface BluezGattManager1Iface;

struct _BluezGattManager1Iface
{
    GTypeInterface parent_iface;

    gboolean (*handle_register_application)(BluezGattManager1 * object, GDBusMethodInvocation * invocation,
                                            const gchar * arg_application, GVariant * arg_options);

    gboolean (*handle_unregister_application)(BluezGattManager1 * object, GDBusMethodInvocation * invocation,
                                              const gchar * arg_application);
};

GType bluez_gatt_manager1_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo * bluez_gatt_manager1_interface_info(void);
guint bluez_gatt_manager1_override_properties(GObjectClass * klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void bluez_gatt_manager1_complete_register_application(BluezGattManager1 * object, GDBusMethodInvocation * invocation);

void bluez_gatt_manager1_complete_unregister_application(BluezGattManager1 * object, GDBusMethodInvocation * invocation);

/* D-Bus method calls: */
void bluez_gatt_manager1_call_register_application(BluezGattManager1 * proxy, const gchar * arg_application, GVariant * arg_options,
                                                   GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_gatt_manager1_call_register_application_finish(BluezGattManager1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_gatt_manager1_call_register_application_sync(BluezGattManager1 * proxy, const gchar * arg_application,
                                                            GVariant * arg_options, GCancellable * cancellable, GError ** error);

void bluez_gatt_manager1_call_unregister_application(BluezGattManager1 * proxy, const gchar * arg_application,
                                                     GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_gatt_manager1_call_unregister_application_finish(BluezGattManager1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_gatt_manager1_call_unregister_application_sync(BluezGattManager1 * proxy, const gchar * arg_application,
                                                              GCancellable * cancellable, GError ** error);

/* ---- */

#define BLUEZ_TYPE_GATT_MANAGER1_PROXY (bluez_gatt_manager1_proxy_get_type())
#define BLUEZ_GATT_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_GATT_MANAGER1_PROXY, BluezGattManager1Proxy))
#define BLUEZ_GATT_MANAGER1_PROXY_CLASS(k)                                                                                         \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_GATT_MANAGER1_PROXY, BluezGattManager1ProxyClass))
#define BLUEZ_GATT_MANAGER1_PROXY_GET_CLASS(o)                                                                                     \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_GATT_MANAGER1_PROXY, BluezGattManager1ProxyClass))
#define BLUEZ_IS_GATT_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_GATT_MANAGER1_PROXY))
#define BLUEZ_IS_GATT_MANAGER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_GATT_MANAGER1_PROXY))

typedef struct _BluezGattManager1Proxy BluezGattManager1Proxy;
typedef struct _BluezGattManager1ProxyClass BluezGattManager1ProxyClass;
typedef struct _BluezGattManager1ProxyPrivate BluezGattManager1ProxyPrivate;

struct _BluezGattManager1Proxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    BluezGattManager1ProxyPrivate * priv;
};

struct _BluezGattManager1ProxyClass
{
    GDBusProxyClass parent_class;
};

GType bluez_gatt_manager1_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezGattManager1Proxy, g_object_unref)
#endif

void bluez_gatt_manager1_proxy_new(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                   const gchar * object_path, GCancellable * cancellable, GAsyncReadyCallback callback,
                                   gpointer user_data);
BluezGattManager1 * bluez_gatt_manager1_proxy_new_finish(GAsyncResult * res, GError ** error);
BluezGattManager1 * bluez_gatt_manager1_proxy_new_sync(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                                       const gchar * object_path, GCancellable * cancellable, GError ** error);

void bluez_gatt_manager1_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar * name, const gchar * object_path,
                                           GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
BluezGattManager1 * bluez_gatt_manager1_proxy_new_for_bus_finish(GAsyncResult * res, GError ** error);
BluezGattManager1 * bluez_gatt_manager1_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                               const gchar * object_path, GCancellable * cancellable,
                                                               GError ** error);

/* ---- */

#define BLUEZ_TYPE_GATT_MANAGER1_SKELETON (bluez_gatt_manager1_skeleton_get_type())
#define BLUEZ_GATT_MANAGER1_SKELETON(o)                                                                                            \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_GATT_MANAGER1_SKELETON, BluezGattManager1Skeleton))
#define BLUEZ_GATT_MANAGER1_SKELETON_CLASS(k)                                                                                      \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_GATT_MANAGER1_SKELETON, BluezGattManager1SkeletonClass))
#define BLUEZ_GATT_MANAGER1_SKELETON_GET_CLASS(o)                                                                                  \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_GATT_MANAGER1_SKELETON, BluezGattManager1SkeletonClass))
#define BLUEZ_IS_GATT_MANAGER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_GATT_MANAGER1_SKELETON))
#define BLUEZ_IS_GATT_MANAGER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_GATT_MANAGER1_SKELETON))

typedef struct _BluezGattManager1Skeleton BluezGattManager1Skeleton;
typedef struct _BluezGattManager1SkeletonClass BluezGattManager1SkeletonClass;
typedef struct _BluezGattManager1SkeletonPrivate BluezGattManager1SkeletonPrivate;

struct _BluezGattManager1Skeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    BluezGattManager1SkeletonPrivate * priv;
};

struct _BluezGattManager1SkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_gatt_manager1_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezGattManager1Skeleton, g_object_unref)
#endif

BluezGattManager1 * bluez_gatt_manager1_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.GattService1 */

#define BLUEZ_TYPE_GATT_SERVICE1 (bluez_gatt_service1_get_type())
#define BLUEZ_GATT_SERVICE1(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_GATT_SERVICE1, BluezGattService1))
#define BLUEZ_IS_GATT_SERVICE1(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_GATT_SERVICE1))
#define BLUEZ_GATT_SERVICE1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), BLUEZ_TYPE_GATT_SERVICE1, BluezGattService1Iface))

struct _BluezGattService1;
typedef struct _BluezGattService1 BluezGattService1;
typedef struct _BluezGattService1Iface BluezGattService1Iface;

struct _BluezGattService1Iface
{
    GTypeInterface parent_iface;

    const gchar * (*get_device)(BluezGattService1 * object);

    gboolean (*get_primary)(BluezGattService1 * object);

    const gchar * (*get_uuid)(BluezGattService1 * object);
};

GType bluez_gatt_service1_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo * bluez_gatt_service1_interface_info(void);
guint bluez_gatt_service1_override_properties(GObjectClass * klass, guint property_id_begin);

/* D-Bus property accessors: */
const gchar * bluez_gatt_service1_get_uuid(BluezGattService1 * object);
gchar * bluez_gatt_service1_dup_uuid(BluezGattService1 * object);
void bluez_gatt_service1_set_uuid(BluezGattService1 * object, const gchar * value);

const gchar * bluez_gatt_service1_get_device(BluezGattService1 * object);
gchar * bluez_gatt_service1_dup_device(BluezGattService1 * object);
void bluez_gatt_service1_set_device(BluezGattService1 * object, const gchar * value);

gboolean bluez_gatt_service1_get_primary(BluezGattService1 * object);
void bluez_gatt_service1_set_primary(BluezGattService1 * object, gboolean value);

/* ---- */

#define BLUEZ_TYPE_GATT_SERVICE1_PROXY (bluez_gatt_service1_proxy_get_type())
#define BLUEZ_GATT_SERVICE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_GATT_SERVICE1_PROXY, BluezGattService1Proxy))
#define BLUEZ_GATT_SERVICE1_PROXY_CLASS(k)                                                                                         \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_GATT_SERVICE1_PROXY, BluezGattService1ProxyClass))
#define BLUEZ_GATT_SERVICE1_PROXY_GET_CLASS(o)                                                                                     \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_GATT_SERVICE1_PROXY, BluezGattService1ProxyClass))
#define BLUEZ_IS_GATT_SERVICE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_GATT_SERVICE1_PROXY))
#define BLUEZ_IS_GATT_SERVICE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_GATT_SERVICE1_PROXY))

typedef struct _BluezGattService1Proxy BluezGattService1Proxy;
typedef struct _BluezGattService1ProxyClass BluezGattService1ProxyClass;
typedef struct _BluezGattService1ProxyPrivate BluezGattService1ProxyPrivate;

struct _BluezGattService1Proxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    BluezGattService1ProxyPrivate * priv;
};

struct _BluezGattService1ProxyClass
{
    GDBusProxyClass parent_class;
};

GType bluez_gatt_service1_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezGattService1Proxy, g_object_unref)
#endif

void bluez_gatt_service1_proxy_new(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                   const gchar * object_path, GCancellable * cancellable, GAsyncReadyCallback callback,
                                   gpointer user_data);
BluezGattService1 * bluez_gatt_service1_proxy_new_finish(GAsyncResult * res, GError ** error);
BluezGattService1 * bluez_gatt_service1_proxy_new_sync(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                                       const gchar * object_path, GCancellable * cancellable, GError ** error);

void bluez_gatt_service1_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar * name, const gchar * object_path,
                                           GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
BluezGattService1 * bluez_gatt_service1_proxy_new_for_bus_finish(GAsyncResult * res, GError ** error);
BluezGattService1 * bluez_gatt_service1_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                               const gchar * object_path, GCancellable * cancellable,
                                                               GError ** error);

/* ---- */

#define BLUEZ_TYPE_GATT_SERVICE1_SKELETON (bluez_gatt_service1_skeleton_get_type())
#define BLUEZ_GATT_SERVICE1_SKELETON(o)                                                                                            \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_GATT_SERVICE1_SKELETON, BluezGattService1Skeleton))
#define BLUEZ_GATT_SERVICE1_SKELETON_CLASS(k)                                                                                      \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_GATT_SERVICE1_SKELETON, BluezGattService1SkeletonClass))
#define BLUEZ_GATT_SERVICE1_SKELETON_GET_CLASS(o)                                                                                  \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_GATT_SERVICE1_SKELETON, BluezGattService1SkeletonClass))
#define BLUEZ_IS_GATT_SERVICE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_GATT_SERVICE1_SKELETON))
#define BLUEZ_IS_GATT_SERVICE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_GATT_SERVICE1_SKELETON))

typedef struct _BluezGattService1Skeleton BluezGattService1Skeleton;
typedef struct _BluezGattService1SkeletonClass BluezGattService1SkeletonClass;
typedef struct _BluezGattService1SkeletonPrivate BluezGattService1SkeletonPrivate;

struct _BluezGattService1Skeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    BluezGattService1SkeletonPrivate * priv;
};

struct _BluezGattService1SkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_gatt_service1_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezGattService1Skeleton, g_object_unref)
#endif

BluezGattService1 * bluez_gatt_service1_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.GattCharacteristic1 */

#define BLUEZ_TYPE_GATT_CHARACTERISTIC1 (bluez_gatt_characteristic1_get_type())
#define BLUEZ_GATT_CHARACTERISTIC1(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_GATT_CHARACTERISTIC1, BluezGattCharacteristic1))
#define BLUEZ_IS_GATT_CHARACTERISTIC1(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_GATT_CHARACTERISTIC1))
#define BLUEZ_GATT_CHARACTERISTIC1_GET_IFACE(o)                                                                                    \
    (G_TYPE_INSTANCE_GET_INTERFACE((o), BLUEZ_TYPE_GATT_CHARACTERISTIC1, BluezGattCharacteristic1Iface))

struct _BluezGattCharacteristic1;
typedef struct _BluezGattCharacteristic1 BluezGattCharacteristic1;
typedef struct _BluezGattCharacteristic1Iface BluezGattCharacteristic1Iface;

struct _BluezGattCharacteristic1Iface
{
    GTypeInterface parent_iface;

    gboolean (*handle_acquire_notify)(BluezGattCharacteristic1 * object, GDBusMethodInvocation * invocation,
                                      GVariant * arg_options);

    gboolean (*handle_acquire_write)(BluezGattCharacteristic1 * object, GDBusMethodInvocation * invocation, GVariant * arg_options);

    gboolean (*handle_confirm)(BluezGattCharacteristic1 * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_read_value)(BluezGattCharacteristic1 * object, GDBusMethodInvocation * invocation, GVariant * arg_options);

    gboolean (*handle_start_notify)(BluezGattCharacteristic1 * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_stop_notify)(BluezGattCharacteristic1 * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_write_value)(BluezGattCharacteristic1 * object, GDBusMethodInvocation * invocation, GVariant * arg_value,
                                   GVariant * arg_options);

    const gchar * const * (*get_flags)(BluezGattCharacteristic1 * object);

    gboolean (*get_notify_acquired)(BluezGattCharacteristic1 * object);

    gboolean (*get_notifying)(BluezGattCharacteristic1 * object);

    const gchar * (*get_service)(BluezGattCharacteristic1 * object);

    const gchar * (*get_uuid)(BluezGattCharacteristic1 * object);

    GVariant * (*get_value)(BluezGattCharacteristic1 * object);

    gboolean (*get_write_acquired)(BluezGattCharacteristic1 * object);
};

GType bluez_gatt_characteristic1_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo * bluez_gatt_characteristic1_interface_info(void);
guint bluez_gatt_characteristic1_override_properties(GObjectClass * klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void bluez_gatt_characteristic1_complete_read_value(BluezGattCharacteristic1 * object, GDBusMethodInvocation * invocation,
                                                    GVariant * value);

void bluez_gatt_characteristic1_complete_write_value(BluezGattCharacteristic1 * object, GDBusMethodInvocation * invocation);

void bluez_gatt_characteristic1_complete_acquire_write(BluezGattCharacteristic1 * object, GDBusMethodInvocation * invocation,
                                                       GVariant * fd, guint16 mtu);

void bluez_gatt_characteristic1_complete_acquire_notify(BluezGattCharacteristic1 * object, GDBusMethodInvocation * invocation,
                                                        GVariant * fd, guint16 mtu);

void bluez_gatt_characteristic1_complete_start_notify(BluezGattCharacteristic1 * object, GDBusMethodInvocation * invocation);

void bluez_gatt_characteristic1_complete_stop_notify(BluezGattCharacteristic1 * object, GDBusMethodInvocation * invocation);

void bluez_gatt_characteristic1_complete_confirm(BluezGattCharacteristic1 * object, GDBusMethodInvocation * invocation);

/* D-Bus method calls: */
void bluez_gatt_characteristic1_call_read_value(BluezGattCharacteristic1 * proxy, GVariant * arg_options,
                                                GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_gatt_characteristic1_call_read_value_finish(BluezGattCharacteristic1 * proxy, GVariant ** out_value,
                                                           GAsyncResult * res, GError ** error);

gboolean bluez_gatt_characteristic1_call_read_value_sync(BluezGattCharacteristic1 * proxy, GVariant * arg_options,
                                                         GVariant ** out_value, GCancellable * cancellable, GError ** error);

void bluez_gatt_characteristic1_call_write_value(BluezGattCharacteristic1 * proxy, GVariant * arg_value, GVariant * arg_options,
                                                 GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_gatt_characteristic1_call_write_value_finish(BluezGattCharacteristic1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_gatt_characteristic1_call_write_value_sync(BluezGattCharacteristic1 * proxy, GVariant * arg_value,
                                                          GVariant * arg_options, GCancellable * cancellable, GError ** error);

void bluez_gatt_characteristic1_call_acquire_write(BluezGattCharacteristic1 * proxy, GVariant * arg_options,
                                                   GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_gatt_characteristic1_call_acquire_write_finish(BluezGattCharacteristic1 * proxy, GVariant ** out_fd,
                                                              guint16 * out_mtu, GAsyncResult * res, GError ** error);

gboolean bluez_gatt_characteristic1_call_acquire_write_sync(BluezGattCharacteristic1 * proxy, GVariant * arg_options,
                                                            GVariant ** out_fd, guint16 * out_mtu, GCancellable * cancellable,
                                                            GError ** error);

void bluez_gatt_characteristic1_call_acquire_notify(BluezGattCharacteristic1 * proxy, GVariant * arg_options,
                                                    GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_gatt_characteristic1_call_acquire_notify_finish(BluezGattCharacteristic1 * proxy, GVariant ** out_fd,
                                                               guint16 * out_mtu, GAsyncResult * res, GError ** error);

gboolean bluez_gatt_characteristic1_call_acquire_notify_sync(BluezGattCharacteristic1 * proxy, GVariant * arg_options,
                                                             GVariant ** out_fd, guint16 * out_mtu, GCancellable * cancellable,
                                                             GError ** error);

void bluez_gatt_characteristic1_call_start_notify(BluezGattCharacteristic1 * proxy, GCancellable * cancellable,
                                                  GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_gatt_characteristic1_call_start_notify_finish(BluezGattCharacteristic1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_gatt_characteristic1_call_start_notify_sync(BluezGattCharacteristic1 * proxy, GCancellable * cancellable,
                                                           GError ** error);

void bluez_gatt_characteristic1_call_stop_notify(BluezGattCharacteristic1 * proxy, GCancellable * cancellable,
                                                 GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_gatt_characteristic1_call_stop_notify_finish(BluezGattCharacteristic1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_gatt_characteristic1_call_stop_notify_sync(BluezGattCharacteristic1 * proxy, GCancellable * cancellable,
                                                          GError ** error);

void bluez_gatt_characteristic1_call_confirm(BluezGattCharacteristic1 * proxy, GCancellable * cancellable,
                                             GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_gatt_characteristic1_call_confirm_finish(BluezGattCharacteristic1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_gatt_characteristic1_call_confirm_sync(BluezGattCharacteristic1 * proxy, GCancellable * cancellable,
                                                      GError ** error);

/* D-Bus property accessors: */
const gchar * bluez_gatt_characteristic1_get_uuid(BluezGattCharacteristic1 * object);
gchar * bluez_gatt_characteristic1_dup_uuid(BluezGattCharacteristic1 * object);
void bluez_gatt_characteristic1_set_uuid(BluezGattCharacteristic1 * object, const gchar * value);

const gchar * bluez_gatt_characteristic1_get_service(BluezGattCharacteristic1 * object);
gchar * bluez_gatt_characteristic1_dup_service(BluezGattCharacteristic1 * object);
void bluez_gatt_characteristic1_set_service(BluezGattCharacteristic1 * object, const gchar * value);

GVariant * bluez_gatt_characteristic1_get_value(BluezGattCharacteristic1 * object);
GVariant * bluez_gatt_characteristic1_dup_value(BluezGattCharacteristic1 * object);
void bluez_gatt_characteristic1_set_value(BluezGattCharacteristic1 * object, GVariant * value);

gboolean bluez_gatt_characteristic1_get_notifying(BluezGattCharacteristic1 * object);
void bluez_gatt_characteristic1_set_notifying(BluezGattCharacteristic1 * object, gboolean value);

const gchar * const * bluez_gatt_characteristic1_get_flags(BluezGattCharacteristic1 * object);
gchar ** bluez_gatt_characteristic1_dup_flags(BluezGattCharacteristic1 * object);
void bluez_gatt_characteristic1_set_flags(BluezGattCharacteristic1 * object, const gchar * const * value);

gboolean bluez_gatt_characteristic1_get_write_acquired(BluezGattCharacteristic1 * object);
void bluez_gatt_characteristic1_set_write_acquired(BluezGattCharacteristic1 * object, gboolean value);

gboolean bluez_gatt_characteristic1_get_notify_acquired(BluezGattCharacteristic1 * object);
void bluez_gatt_characteristic1_set_notify_acquired(BluezGattCharacteristic1 * object, gboolean value);

/* ---- */

#define BLUEZ_TYPE_GATT_CHARACTERISTIC1_PROXY (bluez_gatt_characteristic1_proxy_get_type())
#define BLUEZ_GATT_CHARACTERISTIC1_PROXY(o)                                                                                        \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_GATT_CHARACTERISTIC1_PROXY, BluezGattCharacteristic1Proxy))
#define BLUEZ_GATT_CHARACTERISTIC1_PROXY_CLASS(k)                                                                                  \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_GATT_CHARACTERISTIC1_PROXY, BluezGattCharacteristic1ProxyClass))
#define BLUEZ_GATT_CHARACTERISTIC1_PROXY_GET_CLASS(o)                                                                              \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_GATT_CHARACTERISTIC1_PROXY, BluezGattCharacteristic1ProxyClass))
#define BLUEZ_IS_GATT_CHARACTERISTIC1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_GATT_CHARACTERISTIC1_PROXY))
#define BLUEZ_IS_GATT_CHARACTERISTIC1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_GATT_CHARACTERISTIC1_PROXY))

typedef struct _BluezGattCharacteristic1Proxy BluezGattCharacteristic1Proxy;
typedef struct _BluezGattCharacteristic1ProxyClass BluezGattCharacteristic1ProxyClass;
typedef struct _BluezGattCharacteristic1ProxyPrivate BluezGattCharacteristic1ProxyPrivate;

struct _BluezGattCharacteristic1Proxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    BluezGattCharacteristic1ProxyPrivate * priv;
};

struct _BluezGattCharacteristic1ProxyClass
{
    GDBusProxyClass parent_class;
};

GType bluez_gatt_characteristic1_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezGattCharacteristic1Proxy, g_object_unref)
#endif

void bluez_gatt_characteristic1_proxy_new(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                          const gchar * object_path, GCancellable * cancellable, GAsyncReadyCallback callback,
                                          gpointer user_data);
BluezGattCharacteristic1 * bluez_gatt_characteristic1_proxy_new_finish(GAsyncResult * res, GError ** error);
BluezGattCharacteristic1 * bluez_gatt_characteristic1_proxy_new_sync(GDBusConnection * connection, GDBusProxyFlags flags,
                                                                     const gchar * name, const gchar * object_path,
                                                                     GCancellable * cancellable, GError ** error);

void bluez_gatt_characteristic1_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                  const gchar * object_path, GCancellable * cancellable,
                                                  GAsyncReadyCallback callback, gpointer user_data);
BluezGattCharacteristic1 * bluez_gatt_characteristic1_proxy_new_for_bus_finish(GAsyncResult * res, GError ** error);
BluezGattCharacteristic1 * bluez_gatt_characteristic1_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags,
                                                                             const gchar * name, const gchar * object_path,
                                                                             GCancellable * cancellable, GError ** error);

/* ---- */

#define BLUEZ_TYPE_GATT_CHARACTERISTIC1_SKELETON (bluez_gatt_characteristic1_skeleton_get_type())
#define BLUEZ_GATT_CHARACTERISTIC1_SKELETON(o)                                                                                     \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_GATT_CHARACTERISTIC1_SKELETON, BluezGattCharacteristic1Skeleton))
#define BLUEZ_GATT_CHARACTERISTIC1_SKELETON_CLASS(k)                                                                               \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_GATT_CHARACTERISTIC1_SKELETON, BluezGattCharacteristic1SkeletonClass))
#define BLUEZ_GATT_CHARACTERISTIC1_SKELETON_GET_CLASS(o)                                                                           \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_GATT_CHARACTERISTIC1_SKELETON, BluezGattCharacteristic1SkeletonClass))
#define BLUEZ_IS_GATT_CHARACTERISTIC1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_GATT_CHARACTERISTIC1_SKELETON))
#define BLUEZ_IS_GATT_CHARACTERISTIC1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_GATT_CHARACTERISTIC1_SKELETON))

typedef struct _BluezGattCharacteristic1Skeleton BluezGattCharacteristic1Skeleton;
typedef struct _BluezGattCharacteristic1SkeletonClass BluezGattCharacteristic1SkeletonClass;
typedef struct _BluezGattCharacteristic1SkeletonPrivate BluezGattCharacteristic1SkeletonPrivate;

struct _BluezGattCharacteristic1Skeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    BluezGattCharacteristic1SkeletonPrivate * priv;
};

struct _BluezGattCharacteristic1SkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_gatt_characteristic1_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezGattCharacteristic1Skeleton, g_object_unref)
#endif

BluezGattCharacteristic1 * bluez_gatt_characteristic1_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.GattDescriptor1 */

#define BLUEZ_TYPE_GATT_DESCRIPTOR1 (bluez_gatt_descriptor1_get_type())
#define BLUEZ_GATT_DESCRIPTOR1(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_GATT_DESCRIPTOR1, BluezGattDescriptor1))
#define BLUEZ_IS_GATT_DESCRIPTOR1(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_GATT_DESCRIPTOR1))
#define BLUEZ_GATT_DESCRIPTOR1_GET_IFACE(o)                                                                                        \
    (G_TYPE_INSTANCE_GET_INTERFACE((o), BLUEZ_TYPE_GATT_DESCRIPTOR1, BluezGattDescriptor1Iface))

struct _BluezGattDescriptor1;
typedef struct _BluezGattDescriptor1 BluezGattDescriptor1;
typedef struct _BluezGattDescriptor1Iface BluezGattDescriptor1Iface;

struct _BluezGattDescriptor1Iface
{
    GTypeInterface parent_iface;

    gboolean (*handle_read_value)(BluezGattDescriptor1 * object, GDBusMethodInvocation * invocation, GVariant * arg_options);

    gboolean (*handle_write_value)(BluezGattDescriptor1 * object, GDBusMethodInvocation * invocation, GVariant * arg_value,
                                   GVariant * arg_options);

    const gchar * (*get_characteristic)(BluezGattDescriptor1 * object);

    const gchar * (*get_uuid)(BluezGattDescriptor1 * object);

    GVariant * (*get_value)(BluezGattDescriptor1 * object);
};

GType bluez_gatt_descriptor1_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo * bluez_gatt_descriptor1_interface_info(void);
guint bluez_gatt_descriptor1_override_properties(GObjectClass * klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void bluez_gatt_descriptor1_complete_read_value(BluezGattDescriptor1 * object, GDBusMethodInvocation * invocation,
                                                GVariant * value);

void bluez_gatt_descriptor1_complete_write_value(BluezGattDescriptor1 * object, GDBusMethodInvocation * invocation);

/* D-Bus method calls: */
void bluez_gatt_descriptor1_call_read_value(BluezGattDescriptor1 * proxy, GVariant * arg_options, GCancellable * cancellable,
                                            GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_gatt_descriptor1_call_read_value_finish(BluezGattDescriptor1 * proxy, GVariant ** out_value, GAsyncResult * res,
                                                       GError ** error);

gboolean bluez_gatt_descriptor1_call_read_value_sync(BluezGattDescriptor1 * proxy, GVariant * arg_options, GVariant ** out_value,
                                                     GCancellable * cancellable, GError ** error);

void bluez_gatt_descriptor1_call_write_value(BluezGattDescriptor1 * proxy, GVariant * arg_value, GVariant * arg_options,
                                             GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_gatt_descriptor1_call_write_value_finish(BluezGattDescriptor1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_gatt_descriptor1_call_write_value_sync(BluezGattDescriptor1 * proxy, GVariant * arg_value, GVariant * arg_options,
                                                      GCancellable * cancellable, GError ** error);

/* D-Bus property accessors: */
const gchar * bluez_gatt_descriptor1_get_uuid(BluezGattDescriptor1 * object);
gchar * bluez_gatt_descriptor1_dup_uuid(BluezGattDescriptor1 * object);
void bluez_gatt_descriptor1_set_uuid(BluezGattDescriptor1 * object, const gchar * value);

const gchar * bluez_gatt_descriptor1_get_characteristic(BluezGattDescriptor1 * object);
gchar * bluez_gatt_descriptor1_dup_characteristic(BluezGattDescriptor1 * object);
void bluez_gatt_descriptor1_set_characteristic(BluezGattDescriptor1 * object, const gchar * value);

GVariant * bluez_gatt_descriptor1_get_value(BluezGattDescriptor1 * object);
GVariant * bluez_gatt_descriptor1_dup_value(BluezGattDescriptor1 * object);
void bluez_gatt_descriptor1_set_value(BluezGattDescriptor1 * object, GVariant * value);

/* ---- */

#define BLUEZ_TYPE_GATT_DESCRIPTOR1_PROXY (bluez_gatt_descriptor1_proxy_get_type())
#define BLUEZ_GATT_DESCRIPTOR1_PROXY(o)                                                                                            \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_GATT_DESCRIPTOR1_PROXY, BluezGattDescriptor1Proxy))
#define BLUEZ_GATT_DESCRIPTOR1_PROXY_CLASS(k)                                                                                      \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_GATT_DESCRIPTOR1_PROXY, BluezGattDescriptor1ProxyClass))
#define BLUEZ_GATT_DESCRIPTOR1_PROXY_GET_CLASS(o)                                                                                  \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_GATT_DESCRIPTOR1_PROXY, BluezGattDescriptor1ProxyClass))
#define BLUEZ_IS_GATT_DESCRIPTOR1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_GATT_DESCRIPTOR1_PROXY))
#define BLUEZ_IS_GATT_DESCRIPTOR1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_GATT_DESCRIPTOR1_PROXY))

typedef struct _BluezGattDescriptor1Proxy BluezGattDescriptor1Proxy;
typedef struct _BluezGattDescriptor1ProxyClass BluezGattDescriptor1ProxyClass;
typedef struct _BluezGattDescriptor1ProxyPrivate BluezGattDescriptor1ProxyPrivate;

struct _BluezGattDescriptor1Proxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    BluezGattDescriptor1ProxyPrivate * priv;
};

struct _BluezGattDescriptor1ProxyClass
{
    GDBusProxyClass parent_class;
};

GType bluez_gatt_descriptor1_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezGattDescriptor1Proxy, g_object_unref)
#endif

void bluez_gatt_descriptor1_proxy_new(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                      const gchar * object_path, GCancellable * cancellable, GAsyncReadyCallback callback,
                                      gpointer user_data);
BluezGattDescriptor1 * bluez_gatt_descriptor1_proxy_new_finish(GAsyncResult * res, GError ** error);
BluezGattDescriptor1 * bluez_gatt_descriptor1_proxy_new_sync(GDBusConnection * connection, GDBusProxyFlags flags,
                                                             const gchar * name, const gchar * object_path,
                                                             GCancellable * cancellable, GError ** error);

void bluez_gatt_descriptor1_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                              const gchar * object_path, GCancellable * cancellable, GAsyncReadyCallback callback,
                                              gpointer user_data);
BluezGattDescriptor1 * bluez_gatt_descriptor1_proxy_new_for_bus_finish(GAsyncResult * res, GError ** error);
BluezGattDescriptor1 * bluez_gatt_descriptor1_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                                     const gchar * object_path, GCancellable * cancellable,
                                                                     GError ** error);

/* ---- */

#define BLUEZ_TYPE_GATT_DESCRIPTOR1_SKELETON (bluez_gatt_descriptor1_skeleton_get_type())
#define BLUEZ_GATT_DESCRIPTOR1_SKELETON(o)                                                                                         \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_GATT_DESCRIPTOR1_SKELETON, BluezGattDescriptor1Skeleton))
#define BLUEZ_GATT_DESCRIPTOR1_SKELETON_CLASS(k)                                                                                   \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_GATT_DESCRIPTOR1_SKELETON, BluezGattDescriptor1SkeletonClass))
#define BLUEZ_GATT_DESCRIPTOR1_SKELETON_GET_CLASS(o)                                                                               \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_GATT_DESCRIPTOR1_SKELETON, BluezGattDescriptor1SkeletonClass))
#define BLUEZ_IS_GATT_DESCRIPTOR1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_GATT_DESCRIPTOR1_SKELETON))
#define BLUEZ_IS_GATT_DESCRIPTOR1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_GATT_DESCRIPTOR1_SKELETON))

typedef struct _BluezGattDescriptor1Skeleton BluezGattDescriptor1Skeleton;
typedef struct _BluezGattDescriptor1SkeletonClass BluezGattDescriptor1SkeletonClass;
typedef struct _BluezGattDescriptor1SkeletonPrivate BluezGattDescriptor1SkeletonPrivate;

struct _BluezGattDescriptor1Skeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    BluezGattDescriptor1SkeletonPrivate * priv;
};

struct _BluezGattDescriptor1SkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_gatt_descriptor1_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezGattDescriptor1Skeleton, g_object_unref)
#endif

BluezGattDescriptor1 * bluez_gatt_descriptor1_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.LEAdvertisement1 */

#define BLUEZ_TYPE_LEADVERTISEMENT1 (bluez_leadvertisement1_get_type())
#define BLUEZ_LEADVERTISEMENT1(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_LEADVERTISEMENT1, BluezLEAdvertisement1))
#define BLUEZ_IS_LEADVERTISEMENT1(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_LEADVERTISEMENT1))
#define BLUEZ_LEADVERTISEMENT1_GET_IFACE(o)                                                                                        \
    (G_TYPE_INSTANCE_GET_INTERFACE((o), BLUEZ_TYPE_LEADVERTISEMENT1, BluezLEAdvertisement1Iface))

struct _BluezLEAdvertisement1;
typedef struct _BluezLEAdvertisement1 BluezLEAdvertisement1;
typedef struct _BluezLEAdvertisement1Iface BluezLEAdvertisement1Iface;

struct _BluezLEAdvertisement1Iface
{
    GTypeInterface parent_iface;

    gboolean (*handle_release)(BluezLEAdvertisement1 * object, GDBusMethodInvocation * invocation);

    guint16 (*get_appearance)(BluezLEAdvertisement1 * object);

    GVariant * (*get_data)(BluezLEAdvertisement1 * object);

    gboolean (*get_discoverable)(BluezLEAdvertisement1 * object);

    guint16 (*get_discoverable_timeout)(BluezLEAdvertisement1 * object);

    guint16 (*get_duration)(BluezLEAdvertisement1 * object);

    const gchar * const * (*get_includes)(BluezLEAdvertisement1 * object);

    const gchar * (*get_local_name)(BluezLEAdvertisement1 * object);

    GVariant * (*get_manufacturer_data)(BluezLEAdvertisement1 * object);

    GVariant * (*get_service_data)(BluezLEAdvertisement1 * object);

    const gchar * const * (*get_service_uuids)(BluezLEAdvertisement1 * object);

    const gchar * const * (*get_solicit_uuids)(BluezLEAdvertisement1 * object);

    guint16 (*get_timeout)(BluezLEAdvertisement1 * object);

    const gchar * (*get_type_)(BluezLEAdvertisement1 * object);
};

GType bluez_leadvertisement1_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo * bluez_leadvertisement1_interface_info(void);
guint bluez_leadvertisement1_override_properties(GObjectClass * klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void bluez_leadvertisement1_complete_release(BluezLEAdvertisement1 * object, GDBusMethodInvocation * invocation);

/* D-Bus method calls: */
void bluez_leadvertisement1_call_release(BluezLEAdvertisement1 * proxy, GCancellable * cancellable, GAsyncReadyCallback callback,
                                         gpointer user_data);

gboolean bluez_leadvertisement1_call_release_finish(BluezLEAdvertisement1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_leadvertisement1_call_release_sync(BluezLEAdvertisement1 * proxy, GCancellable * cancellable, GError ** error);

/* D-Bus property accessors: */
const gchar * bluez_leadvertisement1_get_type_(BluezLEAdvertisement1 * object);
gchar * bluez_leadvertisement1_dup_type_(BluezLEAdvertisement1 * object);
void bluez_leadvertisement1_set_type_(BluezLEAdvertisement1 * object, const gchar * value);

const gchar * const * bluez_leadvertisement1_get_service_uuids(BluezLEAdvertisement1 * object);
gchar ** bluez_leadvertisement1_dup_service_uuids(BluezLEAdvertisement1 * object);
void bluez_leadvertisement1_set_service_uuids(BluezLEAdvertisement1 * object, const gchar * const * value);

GVariant * bluez_leadvertisement1_get_manufacturer_data(BluezLEAdvertisement1 * object);
GVariant * bluez_leadvertisement1_dup_manufacturer_data(BluezLEAdvertisement1 * object);
void bluez_leadvertisement1_set_manufacturer_data(BluezLEAdvertisement1 * object, GVariant * value);

const gchar * const * bluez_leadvertisement1_get_solicit_uuids(BluezLEAdvertisement1 * object);
gchar ** bluez_leadvertisement1_dup_solicit_uuids(BluezLEAdvertisement1 * object);
void bluez_leadvertisement1_set_solicit_uuids(BluezLEAdvertisement1 * object, const gchar * const * value);

GVariant * bluez_leadvertisement1_get_service_data(BluezLEAdvertisement1 * object);
GVariant * bluez_leadvertisement1_dup_service_data(BluezLEAdvertisement1 * object);
void bluez_leadvertisement1_set_service_data(BluezLEAdvertisement1 * object, GVariant * value);

GVariant * bluez_leadvertisement1_get_data(BluezLEAdvertisement1 * object);
GVariant * bluez_leadvertisement1_dup_data(BluezLEAdvertisement1 * object);
void bluez_leadvertisement1_set_data(BluezLEAdvertisement1 * object, GVariant * value);

gboolean bluez_leadvertisement1_get_discoverable(BluezLEAdvertisement1 * object);
void bluez_leadvertisement1_set_discoverable(BluezLEAdvertisement1 * object, gboolean value);

guint16 bluez_leadvertisement1_get_discoverable_timeout(BluezLEAdvertisement1 * object);
void bluez_leadvertisement1_set_discoverable_timeout(BluezLEAdvertisement1 * object, guint16 value);

const gchar * const * bluez_leadvertisement1_get_includes(BluezLEAdvertisement1 * object);
gchar ** bluez_leadvertisement1_dup_includes(BluezLEAdvertisement1 * object);
void bluez_leadvertisement1_set_includes(BluezLEAdvertisement1 * object, const gchar * const * value);

const gchar * bluez_leadvertisement1_get_local_name(BluezLEAdvertisement1 * object);
gchar * bluez_leadvertisement1_dup_local_name(BluezLEAdvertisement1 * object);
void bluez_leadvertisement1_set_local_name(BluezLEAdvertisement1 * object, const gchar * value);

guint16 bluez_leadvertisement1_get_appearance(BluezLEAdvertisement1 * object);
void bluez_leadvertisement1_set_appearance(BluezLEAdvertisement1 * object, guint16 value);

guint16 bluez_leadvertisement1_get_duration(BluezLEAdvertisement1 * object);
void bluez_leadvertisement1_set_duration(BluezLEAdvertisement1 * object, guint16 value);

guint16 bluez_leadvertisement1_get_timeout(BluezLEAdvertisement1 * object);
void bluez_leadvertisement1_set_timeout(BluezLEAdvertisement1 * object, guint16 value);

/* ---- */

#define BLUEZ_TYPE_LEADVERTISEMENT1_PROXY (bluez_leadvertisement1_proxy_get_type())
#define BLUEZ_LEADVERTISEMENT1_PROXY(o)                                                                                            \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_LEADVERTISEMENT1_PROXY, BluezLEAdvertisement1Proxy))
#define BLUEZ_LEADVERTISEMENT1_PROXY_CLASS(k)                                                                                      \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_LEADVERTISEMENT1_PROXY, BluezLEAdvertisement1ProxyClass))
#define BLUEZ_LEADVERTISEMENT1_PROXY_GET_CLASS(o)                                                                                  \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_LEADVERTISEMENT1_PROXY, BluezLEAdvertisement1ProxyClass))
#define BLUEZ_IS_LEADVERTISEMENT1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_LEADVERTISEMENT1_PROXY))
#define BLUEZ_IS_LEADVERTISEMENT1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_LEADVERTISEMENT1_PROXY))

typedef struct _BluezLEAdvertisement1Proxy BluezLEAdvertisement1Proxy;
typedef struct _BluezLEAdvertisement1ProxyClass BluezLEAdvertisement1ProxyClass;
typedef struct _BluezLEAdvertisement1ProxyPrivate BluezLEAdvertisement1ProxyPrivate;

struct _BluezLEAdvertisement1Proxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    BluezLEAdvertisement1ProxyPrivate * priv;
};

struct _BluezLEAdvertisement1ProxyClass
{
    GDBusProxyClass parent_class;
};

GType bluez_leadvertisement1_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezLEAdvertisement1Proxy, g_object_unref)
#endif

void bluez_leadvertisement1_proxy_new(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                      const gchar * object_path, GCancellable * cancellable, GAsyncReadyCallback callback,
                                      gpointer user_data);
BluezLEAdvertisement1 * bluez_leadvertisement1_proxy_new_finish(GAsyncResult * res, GError ** error);
BluezLEAdvertisement1 * bluez_leadvertisement1_proxy_new_sync(GDBusConnection * connection, GDBusProxyFlags flags,
                                                              const gchar * name, const gchar * object_path,
                                                              GCancellable * cancellable, GError ** error);

void bluez_leadvertisement1_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                              const gchar * object_path, GCancellable * cancellable, GAsyncReadyCallback callback,
                                              gpointer user_data);
BluezLEAdvertisement1 * bluez_leadvertisement1_proxy_new_for_bus_finish(GAsyncResult * res, GError ** error);
BluezLEAdvertisement1 * bluez_leadvertisement1_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                                      const gchar * object_path, GCancellable * cancellable,
                                                                      GError ** error);

/* ---- */

#define BLUEZ_TYPE_LEADVERTISEMENT1_SKELETON (bluez_leadvertisement1_skeleton_get_type())
#define BLUEZ_LEADVERTISEMENT1_SKELETON(o)                                                                                         \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_LEADVERTISEMENT1_SKELETON, BluezLEAdvertisement1Skeleton))
#define BLUEZ_LEADVERTISEMENT1_SKELETON_CLASS(k)                                                                                   \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_LEADVERTISEMENT1_SKELETON, BluezLEAdvertisement1SkeletonClass))
#define BLUEZ_LEADVERTISEMENT1_SKELETON_GET_CLASS(o)                                                                               \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_LEADVERTISEMENT1_SKELETON, BluezLEAdvertisement1SkeletonClass))
#define BLUEZ_IS_LEADVERTISEMENT1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_LEADVERTISEMENT1_SKELETON))
#define BLUEZ_IS_LEADVERTISEMENT1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_LEADVERTISEMENT1_SKELETON))

typedef struct _BluezLEAdvertisement1Skeleton BluezLEAdvertisement1Skeleton;
typedef struct _BluezLEAdvertisement1SkeletonClass BluezLEAdvertisement1SkeletonClass;
typedef struct _BluezLEAdvertisement1SkeletonPrivate BluezLEAdvertisement1SkeletonPrivate;

struct _BluezLEAdvertisement1Skeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    BluezLEAdvertisement1SkeletonPrivate * priv;
};

struct _BluezLEAdvertisement1SkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_leadvertisement1_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezLEAdvertisement1Skeleton, g_object_unref)
#endif

BluezLEAdvertisement1 * bluez_leadvertisement1_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.LEAdvertisingManager1 */

#define BLUEZ_TYPE_LEADVERTISING_MANAGER1 (bluez_leadvertising_manager1_get_type())
#define BLUEZ_LEADVERTISING_MANAGER1(o)                                                                                            \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_LEADVERTISING_MANAGER1, BluezLEAdvertisingManager1))
#define BLUEZ_IS_LEADVERTISING_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_LEADVERTISING_MANAGER1))
#define BLUEZ_LEADVERTISING_MANAGER1_GET_IFACE(o)                                                                                  \
    (G_TYPE_INSTANCE_GET_INTERFACE((o), BLUEZ_TYPE_LEADVERTISING_MANAGER1, BluezLEAdvertisingManager1Iface))

struct _BluezLEAdvertisingManager1;
typedef struct _BluezLEAdvertisingManager1 BluezLEAdvertisingManager1;
typedef struct _BluezLEAdvertisingManager1Iface BluezLEAdvertisingManager1Iface;

struct _BluezLEAdvertisingManager1Iface
{
    GTypeInterface parent_iface;

    gboolean (*handle_register_advertisement)(BluezLEAdvertisingManager1 * object, GDBusMethodInvocation * invocation,
                                              const gchar * arg_advertisement, GVariant * arg_options);

    gboolean (*handle_unregister_advertisement)(BluezLEAdvertisingManager1 * object, GDBusMethodInvocation * invocation,
                                                const gchar * arg_service);

    guchar (*get_active_instances)(BluezLEAdvertisingManager1 * object);

    const gchar * const * (*get_supported_includes)(BluezLEAdvertisingManager1 * object);

    guchar (*get_supported_instances)(BluezLEAdvertisingManager1 * object);

    const gchar * const * (*get_supported_secondary_channels)(BluezLEAdvertisingManager1 * object);
};

GType bluez_leadvertising_manager1_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo * bluez_leadvertising_manager1_interface_info(void);
guint bluez_leadvertising_manager1_override_properties(GObjectClass * klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void bluez_leadvertising_manager1_complete_register_advertisement(BluezLEAdvertisingManager1 * object,
                                                                  GDBusMethodInvocation * invocation);

void bluez_leadvertising_manager1_complete_unregister_advertisement(BluezLEAdvertisingManager1 * object,
                                                                    GDBusMethodInvocation * invocation);

/* D-Bus method calls: */
void bluez_leadvertising_manager1_call_register_advertisement(BluezLEAdvertisingManager1 * proxy, const gchar * arg_advertisement,
                                                              GVariant * arg_options, GCancellable * cancellable,
                                                              GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_leadvertising_manager1_call_register_advertisement_finish(BluezLEAdvertisingManager1 * proxy, GAsyncResult * res,
                                                                         GError ** error);

gboolean bluez_leadvertising_manager1_call_register_advertisement_sync(BluezLEAdvertisingManager1 * proxy,
                                                                       const gchar * arg_advertisement, GVariant * arg_options,
                                                                       GCancellable * cancellable, GError ** error);

void bluez_leadvertising_manager1_call_unregister_advertisement(BluezLEAdvertisingManager1 * proxy, const gchar * arg_service,
                                                                GCancellable * cancellable, GAsyncReadyCallback callback,
                                                                gpointer user_data);

gboolean bluez_leadvertising_manager1_call_unregister_advertisement_finish(BluezLEAdvertisingManager1 * proxy, GAsyncResult * res,
                                                                           GError ** error);

gboolean bluez_leadvertising_manager1_call_unregister_advertisement_sync(BluezLEAdvertisingManager1 * proxy,
                                                                         const gchar * arg_service, GCancellable * cancellable,
                                                                         GError ** error);

/* D-Bus property accessors: */
guchar bluez_leadvertising_manager1_get_active_instances(BluezLEAdvertisingManager1 * object);
void bluez_leadvertising_manager1_set_active_instances(BluezLEAdvertisingManager1 * object, guchar value);

guchar bluez_leadvertising_manager1_get_supported_instances(BluezLEAdvertisingManager1 * object);
void bluez_leadvertising_manager1_set_supported_instances(BluezLEAdvertisingManager1 * object, guchar value);

const gchar * const * bluez_leadvertising_manager1_get_supported_includes(BluezLEAdvertisingManager1 * object);
gchar ** bluez_leadvertising_manager1_dup_supported_includes(BluezLEAdvertisingManager1 * object);
void bluez_leadvertising_manager1_set_supported_includes(BluezLEAdvertisingManager1 * object, const gchar * const * value);

const gchar * const * bluez_leadvertising_manager1_get_supported_secondary_channels(BluezLEAdvertisingManager1 * object);
gchar ** bluez_leadvertising_manager1_dup_supported_secondary_channels(BluezLEAdvertisingManager1 * object);
void bluez_leadvertising_manager1_set_supported_secondary_channels(BluezLEAdvertisingManager1 * object,
                                                                   const gchar * const * value);

/* ---- */

#define BLUEZ_TYPE_LEADVERTISING_MANAGER1_PROXY (bluez_leadvertising_manager1_proxy_get_type())
#define BLUEZ_LEADVERTISING_MANAGER1_PROXY(o)                                                                                      \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_LEADVERTISING_MANAGER1_PROXY, BluezLEAdvertisingManager1Proxy))
#define BLUEZ_LEADVERTISING_MANAGER1_PROXY_CLASS(k)                                                                                \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_LEADVERTISING_MANAGER1_PROXY, BluezLEAdvertisingManager1ProxyClass))
#define BLUEZ_LEADVERTISING_MANAGER1_PROXY_GET_CLASS(o)                                                                            \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_LEADVERTISING_MANAGER1_PROXY, BluezLEAdvertisingManager1ProxyClass))
#define BLUEZ_IS_LEADVERTISING_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_LEADVERTISING_MANAGER1_PROXY))
#define BLUEZ_IS_LEADVERTISING_MANAGER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_LEADVERTISING_MANAGER1_PROXY))

typedef struct _BluezLEAdvertisingManager1Proxy BluezLEAdvertisingManager1Proxy;
typedef struct _BluezLEAdvertisingManager1ProxyClass BluezLEAdvertisingManager1ProxyClass;
typedef struct _BluezLEAdvertisingManager1ProxyPrivate BluezLEAdvertisingManager1ProxyPrivate;

struct _BluezLEAdvertisingManager1Proxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    BluezLEAdvertisingManager1ProxyPrivate * priv;
};

struct _BluezLEAdvertisingManager1ProxyClass
{
    GDBusProxyClass parent_class;
};

GType bluez_leadvertising_manager1_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezLEAdvertisingManager1Proxy, g_object_unref)
#endif

void bluez_leadvertising_manager1_proxy_new(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                            const gchar * object_path, GCancellable * cancellable, GAsyncReadyCallback callback,
                                            gpointer user_data);
BluezLEAdvertisingManager1 * bluez_leadvertising_manager1_proxy_new_finish(GAsyncResult * res, GError ** error);
BluezLEAdvertisingManager1 * bluez_leadvertising_manager1_proxy_new_sync(GDBusConnection * connection, GDBusProxyFlags flags,
                                                                         const gchar * name, const gchar * object_path,
                                                                         GCancellable * cancellable, GError ** error);

void bluez_leadvertising_manager1_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                    const gchar * object_path, GCancellable * cancellable,
                                                    GAsyncReadyCallback callback, gpointer user_data);
BluezLEAdvertisingManager1 * bluez_leadvertising_manager1_proxy_new_for_bus_finish(GAsyncResult * res, GError ** error);
BluezLEAdvertisingManager1 * bluez_leadvertising_manager1_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags,
                                                                                 const gchar * name, const gchar * object_path,
                                                                                 GCancellable * cancellable, GError ** error);

/* ---- */

#define BLUEZ_TYPE_LEADVERTISING_MANAGER1_SKELETON (bluez_leadvertising_manager1_skeleton_get_type())
#define BLUEZ_LEADVERTISING_MANAGER1_SKELETON(o)                                                                                   \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_LEADVERTISING_MANAGER1_SKELETON, BluezLEAdvertisingManager1Skeleton))
#define BLUEZ_LEADVERTISING_MANAGER1_SKELETON_CLASS(k)                                                                             \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_LEADVERTISING_MANAGER1_SKELETON, BluezLEAdvertisingManager1SkeletonClass))
#define BLUEZ_LEADVERTISING_MANAGER1_SKELETON_GET_CLASS(o)                                                                         \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_LEADVERTISING_MANAGER1_SKELETON, BluezLEAdvertisingManager1SkeletonClass))
#define BLUEZ_IS_LEADVERTISING_MANAGER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_LEADVERTISING_MANAGER1_SKELETON))
#define BLUEZ_IS_LEADVERTISING_MANAGER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_LEADVERTISING_MANAGER1_SKELETON))

typedef struct _BluezLEAdvertisingManager1Skeleton BluezLEAdvertisingManager1Skeleton;
typedef struct _BluezLEAdvertisingManager1SkeletonClass BluezLEAdvertisingManager1SkeletonClass;
typedef struct _BluezLEAdvertisingManager1SkeletonPrivate BluezLEAdvertisingManager1SkeletonPrivate;

struct _BluezLEAdvertisingManager1Skeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    BluezLEAdvertisingManager1SkeletonPrivate * priv;
};

struct _BluezLEAdvertisingManager1SkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_leadvertising_manager1_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezLEAdvertisingManager1Skeleton, g_object_unref)
#endif

BluezLEAdvertisingManager1 * bluez_leadvertising_manager1_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES (bluez_org_freedesktop_dbus_properties_get_type())
#define BLUEZ_ORG_FREEDESKTOP_DBUS_PROPERTIES(o)                                                                                   \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, BluezOrgFreedesktopDBusProperties))
#define BLUEZ_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define BLUEZ_ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o)                                                                         \
    (G_TYPE_INSTANCE_GET_INTERFACE((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, BluezOrgFreedesktopDBusPropertiesIface))

struct _BluezOrgFreedesktopDBusProperties;
typedef struct _BluezOrgFreedesktopDBusProperties BluezOrgFreedesktopDBusProperties;
typedef struct _BluezOrgFreedesktopDBusPropertiesIface BluezOrgFreedesktopDBusPropertiesIface;

struct _BluezOrgFreedesktopDBusPropertiesIface
{
    GTypeInterface parent_iface;

    gboolean (*handle_get)(BluezOrgFreedesktopDBusProperties * object, GDBusMethodInvocation * invocation,
                           const gchar * arg_interface, const gchar * arg_name);

    gboolean (*handle_get_all)(BluezOrgFreedesktopDBusProperties * object, GDBusMethodInvocation * invocation,
                               const gchar * arg_interface);

    gboolean (*handle_set)(BluezOrgFreedesktopDBusProperties * object, GDBusMethodInvocation * invocation,
                           const gchar * arg_interface, const gchar * arg_name, GVariant * arg_value);

    void (*properties_changed)(BluezOrgFreedesktopDBusProperties * object, const gchar * arg_interface,
                               GVariant * arg_changed_properties, const gchar * const * arg_invalidated_properties);
};

GType bluez_org_freedesktop_dbus_properties_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo * bluez_org_freedesktop_dbus_properties_interface_info(void);
guint bluez_org_freedesktop_dbus_properties_override_properties(GObjectClass * klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void bluez_org_freedesktop_dbus_properties_complete_get(BluezOrgFreedesktopDBusProperties * object,
                                                        GDBusMethodInvocation * invocation, GVariant * value);

void bluez_org_freedesktop_dbus_properties_complete_set(BluezOrgFreedesktopDBusProperties * object,
                                                        GDBusMethodInvocation * invocation);

void bluez_org_freedesktop_dbus_properties_complete_get_all(BluezOrgFreedesktopDBusProperties * object,
                                                            GDBusMethodInvocation * invocation, GVariant * properties);

/* D-Bus signal emissions functions: */
void bluez_org_freedesktop_dbus_properties_emit_properties_changed(BluezOrgFreedesktopDBusProperties * object,
                                                                   const gchar * arg_interface, GVariant * arg_changed_properties,
                                                                   const gchar * const * arg_invalidated_properties);

/* D-Bus method calls: */
void bluez_org_freedesktop_dbus_properties_call_get(BluezOrgFreedesktopDBusProperties * proxy, const gchar * arg_interface,
                                                    const gchar * arg_name, GCancellable * cancellable,
                                                    GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_org_freedesktop_dbus_properties_call_get_finish(BluezOrgFreedesktopDBusProperties * proxy, GVariant ** out_value,
                                                               GAsyncResult * res, GError ** error);

gboolean bluez_org_freedesktop_dbus_properties_call_get_sync(BluezOrgFreedesktopDBusProperties * proxy, const gchar * arg_interface,
                                                             const gchar * arg_name, GVariant ** out_value,
                                                             GCancellable * cancellable, GError ** error);

void bluez_org_freedesktop_dbus_properties_call_set(BluezOrgFreedesktopDBusProperties * proxy, const gchar * arg_interface,
                                                    const gchar * arg_name, GVariant * arg_value, GCancellable * cancellable,
                                                    GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_org_freedesktop_dbus_properties_call_set_finish(BluezOrgFreedesktopDBusProperties * proxy, GAsyncResult * res,
                                                               GError ** error);

gboolean bluez_org_freedesktop_dbus_properties_call_set_sync(BluezOrgFreedesktopDBusProperties * proxy, const gchar * arg_interface,
                                                             const gchar * arg_name, GVariant * arg_value,
                                                             GCancellable * cancellable, GError ** error);

void bluez_org_freedesktop_dbus_properties_call_get_all(BluezOrgFreedesktopDBusProperties * proxy, const gchar * arg_interface,
                                                        GCancellable * cancellable, GAsyncReadyCallback callback,
                                                        gpointer user_data);

gboolean bluez_org_freedesktop_dbus_properties_call_get_all_finish(BluezOrgFreedesktopDBusProperties * proxy,
                                                                   GVariant ** out_properties, GAsyncResult * res, GError ** error);

gboolean bluez_org_freedesktop_dbus_properties_call_get_all_sync(BluezOrgFreedesktopDBusProperties * proxy,
                                                                 const gchar * arg_interface, GVariant ** out_properties,
                                                                 GCancellable * cancellable, GError ** error);

/* ---- */

#define BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (bluez_org_freedesktop_dbus_properties_proxy_get_type())
#define BLUEZ_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o)                                                                             \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, BluezOrgFreedesktopDBusPropertiesProxy))
#define BLUEZ_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k)                                                                       \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, BluezOrgFreedesktopDBusPropertiesProxyClass))
#define BLUEZ_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o)                                                                   \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, BluezOrgFreedesktopDBusPropertiesProxyClass))
#define BLUEZ_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o)                                                                          \
    (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define BLUEZ_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k)                                                                    \
    (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _BluezOrgFreedesktopDBusPropertiesProxy BluezOrgFreedesktopDBusPropertiesProxy;
typedef struct _BluezOrgFreedesktopDBusPropertiesProxyClass BluezOrgFreedesktopDBusPropertiesProxyClass;
typedef struct _BluezOrgFreedesktopDBusPropertiesProxyPrivate BluezOrgFreedesktopDBusPropertiesProxyPrivate;

struct _BluezOrgFreedesktopDBusPropertiesProxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    BluezOrgFreedesktopDBusPropertiesProxyPrivate * priv;
};

struct _BluezOrgFreedesktopDBusPropertiesProxyClass
{
    GDBusProxyClass parent_class;
};

GType bluez_org_freedesktop_dbus_properties_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezOrgFreedesktopDBusPropertiesProxy, g_object_unref)
#endif

void bluez_org_freedesktop_dbus_properties_proxy_new(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                                     const gchar * object_path, GCancellable * cancellable,
                                                     GAsyncReadyCallback callback, gpointer user_data);
BluezOrgFreedesktopDBusProperties * bluez_org_freedesktop_dbus_properties_proxy_new_finish(GAsyncResult * res, GError ** error);
BluezOrgFreedesktopDBusProperties *
bluez_org_freedesktop_dbus_properties_proxy_new_sync(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                                     const gchar * object_path, GCancellable * cancellable, GError ** error);

void bluez_org_freedesktop_dbus_properties_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                             const gchar * object_path, GCancellable * cancellable,
                                                             GAsyncReadyCallback callback, gpointer user_data);
BluezOrgFreedesktopDBusProperties * bluez_org_freedesktop_dbus_properties_proxy_new_for_bus_finish(GAsyncResult * res,
                                                                                                   GError ** error);
BluezOrgFreedesktopDBusProperties *
bluez_org_freedesktop_dbus_properties_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                             const gchar * object_path, GCancellable * cancellable,
                                                             GError ** error);

/* ---- */

#define BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (bluez_org_freedesktop_dbus_properties_skeleton_get_type())
#define BLUEZ_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o)                                                                          \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON,                                          \
                                BluezOrgFreedesktopDBusPropertiesSkeleton))
#define BLUEZ_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k)                                                                    \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON,                                             \
                             BluezOrgFreedesktopDBusPropertiesSkeletonClass))
#define BLUEZ_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o)                                                                \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON,                                           \
                               BluezOrgFreedesktopDBusPropertiesSkeletonClass))
#define BLUEZ_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o)                                                                       \
    (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define BLUEZ_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k)                                                                 \
    (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _BluezOrgFreedesktopDBusPropertiesSkeleton BluezOrgFreedesktopDBusPropertiesSkeleton;
typedef struct _BluezOrgFreedesktopDBusPropertiesSkeletonClass BluezOrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _BluezOrgFreedesktopDBusPropertiesSkeletonPrivate BluezOrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _BluezOrgFreedesktopDBusPropertiesSkeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    BluezOrgFreedesktopDBusPropertiesSkeletonPrivate * priv;
};

struct _BluezOrgFreedesktopDBusPropertiesSkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_org_freedesktop_dbus_properties_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezOrgFreedesktopDBusPropertiesSkeleton, g_object_unref)
#endif

BluezOrgFreedesktopDBusProperties * bluez_org_freedesktop_dbus_properties_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.ProfileManager1 */

#define BLUEZ_TYPE_PROFILE_MANAGER1 (bluez_profile_manager1_get_type())
#define BLUEZ_PROFILE_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_PROFILE_MANAGER1, BluezProfileManager1))
#define BLUEZ_IS_PROFILE_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_PROFILE_MANAGER1))
#define BLUEZ_PROFILE_MANAGER1_GET_IFACE(o)                                                                                        \
    (G_TYPE_INSTANCE_GET_INTERFACE((o), BLUEZ_TYPE_PROFILE_MANAGER1, BluezProfileManager1Iface))

struct _BluezProfileManager1;
typedef struct _BluezProfileManager1 BluezProfileManager1;
typedef struct _BluezProfileManager1Iface BluezProfileManager1Iface;

struct _BluezProfileManager1Iface
{
    GTypeInterface parent_iface;

    gboolean (*handle_register_profile)(BluezProfileManager1 * object, GDBusMethodInvocation * invocation,
                                        const gchar * arg_profile, const gchar * arg_UUID, GVariant * arg_options);

    gboolean (*handle_unregister_profile)(BluezProfileManager1 * object, GDBusMethodInvocation * invocation,
                                          const gchar * arg_profile);
};

GType bluez_profile_manager1_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo * bluez_profile_manager1_interface_info(void);
guint bluez_profile_manager1_override_properties(GObjectClass * klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void bluez_profile_manager1_complete_register_profile(BluezProfileManager1 * object, GDBusMethodInvocation * invocation);

void bluez_profile_manager1_complete_unregister_profile(BluezProfileManager1 * object, GDBusMethodInvocation * invocation);

/* D-Bus method calls: */
void bluez_profile_manager1_call_register_profile(BluezProfileManager1 * proxy, const gchar * arg_profile, const gchar * arg_UUID,
                                                  GVariant * arg_options, GCancellable * cancellable, GAsyncReadyCallback callback,
                                                  gpointer user_data);

gboolean bluez_profile_manager1_call_register_profile_finish(BluezProfileManager1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_profile_manager1_call_register_profile_sync(BluezProfileManager1 * proxy, const gchar * arg_profile,
                                                           const gchar * arg_UUID, GVariant * arg_options,
                                                           GCancellable * cancellable, GError ** error);

void bluez_profile_manager1_call_unregister_profile(BluezProfileManager1 * proxy, const gchar * arg_profile,
                                                    GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean bluez_profile_manager1_call_unregister_profile_finish(BluezProfileManager1 * proxy, GAsyncResult * res, GError ** error);

gboolean bluez_profile_manager1_call_unregister_profile_sync(BluezProfileManager1 * proxy, const gchar * arg_profile,
                                                             GCancellable * cancellable, GError ** error);

/* ---- */

#define BLUEZ_TYPE_PROFILE_MANAGER1_PROXY (bluez_profile_manager1_proxy_get_type())
#define BLUEZ_PROFILE_MANAGER1_PROXY(o)                                                                                            \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_PROFILE_MANAGER1_PROXY, BluezProfileManager1Proxy))
#define BLUEZ_PROFILE_MANAGER1_PROXY_CLASS(k)                                                                                      \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_PROFILE_MANAGER1_PROXY, BluezProfileManager1ProxyClass))
#define BLUEZ_PROFILE_MANAGER1_PROXY_GET_CLASS(o)                                                                                  \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_PROFILE_MANAGER1_PROXY, BluezProfileManager1ProxyClass))
#define BLUEZ_IS_PROFILE_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_PROFILE_MANAGER1_PROXY))
#define BLUEZ_IS_PROFILE_MANAGER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_PROFILE_MANAGER1_PROXY))

typedef struct _BluezProfileManager1Proxy BluezProfileManager1Proxy;
typedef struct _BluezProfileManager1ProxyClass BluezProfileManager1ProxyClass;
typedef struct _BluezProfileManager1ProxyPrivate BluezProfileManager1ProxyPrivate;

struct _BluezProfileManager1Proxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    BluezProfileManager1ProxyPrivate * priv;
};

struct _BluezProfileManager1ProxyClass
{
    GDBusProxyClass parent_class;
};

GType bluez_profile_manager1_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezProfileManager1Proxy, g_object_unref)
#endif

void bluez_profile_manager1_proxy_new(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                      const gchar * object_path, GCancellable * cancellable, GAsyncReadyCallback callback,
                                      gpointer user_data);
BluezProfileManager1 * bluez_profile_manager1_proxy_new_finish(GAsyncResult * res, GError ** error);
BluezProfileManager1 * bluez_profile_manager1_proxy_new_sync(GDBusConnection * connection, GDBusProxyFlags flags,
                                                             const gchar * name, const gchar * object_path,
                                                             GCancellable * cancellable, GError ** error);

void bluez_profile_manager1_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                              const gchar * object_path, GCancellable * cancellable, GAsyncReadyCallback callback,
                                              gpointer user_data);
BluezProfileManager1 * bluez_profile_manager1_proxy_new_for_bus_finish(GAsyncResult * res, GError ** error);
BluezProfileManager1 * bluez_profile_manager1_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                                     const gchar * object_path, GCancellable * cancellable,
                                                                     GError ** error);

/* ---- */

#define BLUEZ_TYPE_PROFILE_MANAGER1_SKELETON (bluez_profile_manager1_skeleton_get_type())
#define BLUEZ_PROFILE_MANAGER1_SKELETON(o)                                                                                         \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_PROFILE_MANAGER1_SKELETON, BluezProfileManager1Skeleton))
#define BLUEZ_PROFILE_MANAGER1_SKELETON_CLASS(k)                                                                                   \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_PROFILE_MANAGER1_SKELETON, BluezProfileManager1SkeletonClass))
#define BLUEZ_PROFILE_MANAGER1_SKELETON_GET_CLASS(o)                                                                               \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_PROFILE_MANAGER1_SKELETON, BluezProfileManager1SkeletonClass))
#define BLUEZ_IS_PROFILE_MANAGER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_PROFILE_MANAGER1_SKELETON))
#define BLUEZ_IS_PROFILE_MANAGER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_PROFILE_MANAGER1_SKELETON))

typedef struct _BluezProfileManager1Skeleton BluezProfileManager1Skeleton;
typedef struct _BluezProfileManager1SkeletonClass BluezProfileManager1SkeletonClass;
typedef struct _BluezProfileManager1SkeletonPrivate BluezProfileManager1SkeletonPrivate;

struct _BluezProfileManager1Skeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    BluezProfileManager1SkeletonPrivate * priv;
};

struct _BluezProfileManager1SkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_profile_manager1_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezProfileManager1Skeleton, g_object_unref)
#endif

BluezProfileManager1 * bluez_profile_manager1_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.ObjectManager */

#define BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER (bluez_org_freedesktop_dbus_object_manager_get_type())
#define BLUEZ_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER(o)                                                                               \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER, BluezOrgFreedesktopDBusObjectManager))
#define BLUEZ_IS_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER(o)                                                                            \
    (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER))
#define BLUEZ_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_GET_IFACE(o)                                                                     \
    (G_TYPE_INSTANCE_GET_INTERFACE((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER, BluezOrgFreedesktopDBusObjectManagerIface))

struct _BluezOrgFreedesktopDBusObjectManager;
typedef struct _BluezOrgFreedesktopDBusObjectManager BluezOrgFreedesktopDBusObjectManager;
typedef struct _BluezOrgFreedesktopDBusObjectManagerIface BluezOrgFreedesktopDBusObjectManagerIface;

struct _BluezOrgFreedesktopDBusObjectManagerIface
{
    GTypeInterface parent_iface;

    gboolean (*handle_get_managed_objects)(BluezOrgFreedesktopDBusObjectManager * object, GDBusMethodInvocation * invocation);

    void (*interfaces_added)(BluezOrgFreedesktopDBusObjectManager * object, const gchar * arg_object, GVariant * arg_interfaces);

    void (*interfaces_removed)(BluezOrgFreedesktopDBusObjectManager * object, const gchar * arg_object,
                               const gchar * const * arg_interfaces);
};

GType bluez_org_freedesktop_dbus_object_manager_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo * bluez_org_freedesktop_dbus_object_manager_interface_info(void);
guint bluez_org_freedesktop_dbus_object_manager_override_properties(GObjectClass * klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void bluez_org_freedesktop_dbus_object_manager_complete_get_managed_objects(BluezOrgFreedesktopDBusObjectManager * object,
                                                                            GDBusMethodInvocation * invocation, GVariant * objects);

/* D-Bus signal emissions functions: */
void bluez_org_freedesktop_dbus_object_manager_emit_interfaces_added(BluezOrgFreedesktopDBusObjectManager * object,
                                                                     const gchar * arg_object, GVariant * arg_interfaces);

void bluez_org_freedesktop_dbus_object_manager_emit_interfaces_removed(BluezOrgFreedesktopDBusObjectManager * object,
                                                                       const gchar * arg_object,
                                                                       const gchar * const * arg_interfaces);

/* D-Bus method calls: */
void bluez_org_freedesktop_dbus_object_manager_call_get_managed_objects(BluezOrgFreedesktopDBusObjectManager * proxy,
                                                                        GCancellable * cancellable, GAsyncReadyCallback callback,
                                                                        gpointer user_data);

gboolean bluez_org_freedesktop_dbus_object_manager_call_get_managed_objects_finish(BluezOrgFreedesktopDBusObjectManager * proxy,
                                                                                   GVariant ** out_objects, GAsyncResult * res,
                                                                                   GError ** error);

gboolean bluez_org_freedesktop_dbus_object_manager_call_get_managed_objects_sync(BluezOrgFreedesktopDBusObjectManager * proxy,
                                                                                 GVariant ** out_objects,
                                                                                 GCancellable * cancellable, GError ** error);

/* ---- */

#define BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY (bluez_org_freedesktop_dbus_object_manager_proxy_get_type())
#define BLUEZ_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY(o)                                                                         \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY,                                         \
                                BluezOrgFreedesktopDBusObjectManagerProxy))
#define BLUEZ_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY_CLASS(k)                                                                   \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY,                                            \
                             BluezOrgFreedesktopDBusObjectManagerProxyClass))
#define BLUEZ_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY_GET_CLASS(o)                                                               \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY,                                          \
                               BluezOrgFreedesktopDBusObjectManagerProxyClass))
#define BLUEZ_IS_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY(o)                                                                      \
    (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY))
#define BLUEZ_IS_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY_CLASS(k)                                                                \
    (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY))

typedef struct _BluezOrgFreedesktopDBusObjectManagerProxy BluezOrgFreedesktopDBusObjectManagerProxy;
typedef struct _BluezOrgFreedesktopDBusObjectManagerProxyClass BluezOrgFreedesktopDBusObjectManagerProxyClass;
typedef struct _BluezOrgFreedesktopDBusObjectManagerProxyPrivate BluezOrgFreedesktopDBusObjectManagerProxyPrivate;

struct _BluezOrgFreedesktopDBusObjectManagerProxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    BluezOrgFreedesktopDBusObjectManagerProxyPrivate * priv;
};

struct _BluezOrgFreedesktopDBusObjectManagerProxyClass
{
    GDBusProxyClass parent_class;
};

GType bluez_org_freedesktop_dbus_object_manager_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezOrgFreedesktopDBusObjectManagerProxy, g_object_unref)
#endif

void bluez_org_freedesktop_dbus_object_manager_proxy_new(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                                         const gchar * object_path, GCancellable * cancellable,
                                                         GAsyncReadyCallback callback, gpointer user_data);
BluezOrgFreedesktopDBusObjectManager * bluez_org_freedesktop_dbus_object_manager_proxy_new_finish(GAsyncResult * res,
                                                                                                  GError ** error);
BluezOrgFreedesktopDBusObjectManager *
bluez_org_freedesktop_dbus_object_manager_proxy_new_sync(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                                         const gchar * object_path, GCancellable * cancellable, GError ** error);

void bluez_org_freedesktop_dbus_object_manager_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                                 const gchar * object_path, GCancellable * cancellable,
                                                                 GAsyncReadyCallback callback, gpointer user_data);
BluezOrgFreedesktopDBusObjectManager * bluez_org_freedesktop_dbus_object_manager_proxy_new_for_bus_finish(GAsyncResult * res,
                                                                                                          GError ** error);
BluezOrgFreedesktopDBusObjectManager *
bluez_org_freedesktop_dbus_object_manager_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                                 const gchar * object_path, GCancellable * cancellable,
                                                                 GError ** error);

/* ---- */

#define BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON (bluez_org_freedesktop_dbus_object_manager_skeleton_get_type())
#define BLUEZ_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON(o)                                                                      \
    (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON,                                      \
                                BluezOrgFreedesktopDBusObjectManagerSkeleton))
#define BLUEZ_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON_CLASS(k)                                                                \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON,                                         \
                             BluezOrgFreedesktopDBusObjectManagerSkeletonClass))
#define BLUEZ_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON_GET_CLASS(o)                                                            \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON,                                       \
                               BluezOrgFreedesktopDBusObjectManagerSkeletonClass))
#define BLUEZ_IS_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON(o)                                                                   \
    (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON))
#define BLUEZ_IS_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON_CLASS(k)                                                             \
    (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON))

typedef struct _BluezOrgFreedesktopDBusObjectManagerSkeleton BluezOrgFreedesktopDBusObjectManagerSkeleton;
typedef struct _BluezOrgFreedesktopDBusObjectManagerSkeletonClass BluezOrgFreedesktopDBusObjectManagerSkeletonClass;
typedef struct _BluezOrgFreedesktopDBusObjectManagerSkeletonPrivate BluezOrgFreedesktopDBusObjectManagerSkeletonPrivate;

struct _BluezOrgFreedesktopDBusObjectManagerSkeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    BluezOrgFreedesktopDBusObjectManagerSkeletonPrivate * priv;
};

struct _BluezOrgFreedesktopDBusObjectManagerSkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_org_freedesktop_dbus_object_manager_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezOrgFreedesktopDBusObjectManagerSkeleton, g_object_unref)
#endif

BluezOrgFreedesktopDBusObjectManager * bluez_org_freedesktop_dbus_object_manager_skeleton_new(void);

/* ---- */

#define BLUEZ_TYPE_OBJECT (bluez_object_get_type())
#define BLUEZ_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_OBJECT, BluezObject))
#define BLUEZ_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_OBJECT))
#define BLUEZ_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), BLUEZ_TYPE_OBJECT, BluezObject))

struct _BluezObject;
typedef struct _BluezObject BluezObject;
typedef struct _BluezObjectIface BluezObjectIface;

struct _BluezObjectIface
{
    GTypeInterface parent_iface;
};

GType bluez_object_get_type(void) G_GNUC_CONST;

BluezAdapter1 * bluez_object_get_adapter1(BluezObject * object);
BluezDevice1 * bluez_object_get_device1(BluezObject * object);
BluezGattManager1 * bluez_object_get_gatt_manager1(BluezObject * object);
BluezGattService1 * bluez_object_get_gatt_service1(BluezObject * object);
BluezGattCharacteristic1 * bluez_object_get_gatt_characteristic1(BluezObject * object);
BluezGattDescriptor1 * bluez_object_get_gatt_descriptor1(BluezObject * object);
BluezLEAdvertisement1 * bluez_object_get_leadvertisement1(BluezObject * object);
BluezLEAdvertisingManager1 * bluez_object_get_leadvertising_manager1(BluezObject * object);
BluezOrgFreedesktopDBusProperties * bluez_object_get_org_freedesktop_dbus_properties(BluezObject * object);
BluezProfileManager1 * bluez_object_get_profile_manager1(BluezObject * object);
BluezOrgFreedesktopDBusObjectManager * bluez_object_get_org_freedesktop_dbus_object_manager(BluezObject * object);
BluezAdapter1 * bluez_object_peek_adapter1(BluezObject * object);
BluezDevice1 * bluez_object_peek_device1(BluezObject * object);
BluezGattManager1 * bluez_object_peek_gatt_manager1(BluezObject * object);
BluezGattService1 * bluez_object_peek_gatt_service1(BluezObject * object);
BluezGattCharacteristic1 * bluez_object_peek_gatt_characteristic1(BluezObject * object);
BluezGattDescriptor1 * bluez_object_peek_gatt_descriptor1(BluezObject * object);
BluezLEAdvertisement1 * bluez_object_peek_leadvertisement1(BluezObject * object);
BluezLEAdvertisingManager1 * bluez_object_peek_leadvertising_manager1(BluezObject * object);
BluezOrgFreedesktopDBusProperties * bluez_object_peek_org_freedesktop_dbus_properties(BluezObject * object);
BluezProfileManager1 * bluez_object_peek_profile_manager1(BluezObject * object);
BluezOrgFreedesktopDBusObjectManager * bluez_object_peek_org_freedesktop_dbus_object_manager(BluezObject * object);

#define BLUEZ_TYPE_OBJECT_PROXY (bluez_object_proxy_get_type())
#define BLUEZ_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_OBJECT_PROXY, BluezObjectProxy))
#define BLUEZ_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_OBJECT_PROXY, BluezObjectProxyClass))
#define BLUEZ_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_OBJECT_PROXY, BluezObjectProxyClass))
#define BLUEZ_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_OBJECT_PROXY))
#define BLUEZ_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_OBJECT_PROXY))

typedef struct _BluezObjectProxy BluezObjectProxy;
typedef struct _BluezObjectProxyClass BluezObjectProxyClass;
typedef struct _BluezObjectProxyPrivate BluezObjectProxyPrivate;

struct _BluezObjectProxy
{
    /*< private >*/
    GDBusObjectProxy parent_instance;
    BluezObjectProxyPrivate * priv;
};

struct _BluezObjectProxyClass
{
    GDBusObjectProxyClass parent_class;
};

GType bluez_object_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezObjectProxy, g_object_unref)
#endif

BluezObjectProxy * bluez_object_proxy_new(GDBusConnection * connection, const gchar * object_path);

#define BLUEZ_TYPE_OBJECT_SKELETON (bluez_object_skeleton_get_type())
#define BLUEZ_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_OBJECT_SKELETON, BluezObjectSkeleton))
#define BLUEZ_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_OBJECT_SKELETON, BluezObjectSkeletonClass))
#define BLUEZ_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_OBJECT_SKELETON, BluezObjectSkeletonClass))
#define BLUEZ_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_OBJECT_SKELETON))
#define BLUEZ_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_OBJECT_SKELETON))

typedef struct _BluezObjectSkeleton BluezObjectSkeleton;
typedef struct _BluezObjectSkeletonClass BluezObjectSkeletonClass;
typedef struct _BluezObjectSkeletonPrivate BluezObjectSkeletonPrivate;

struct _BluezObjectSkeleton
{
    /*< private >*/
    GDBusObjectSkeleton parent_instance;
    BluezObjectSkeletonPrivate * priv;
};

struct _BluezObjectSkeletonClass
{
    GDBusObjectSkeletonClass parent_class;
};

GType bluez_object_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezObjectSkeleton, g_object_unref)
#endif

BluezObjectSkeleton * bluez_object_skeleton_new(const gchar * object_path);
void bluez_object_skeleton_set_adapter1(BluezObjectSkeleton * object, BluezAdapter1 * interface_);
void bluez_object_skeleton_set_device1(BluezObjectSkeleton * object, BluezDevice1 * interface_);
void bluez_object_skeleton_set_gatt_manager1(BluezObjectSkeleton * object, BluezGattManager1 * interface_);
void bluez_object_skeleton_set_gatt_service1(BluezObjectSkeleton * object, BluezGattService1 * interface_);
void bluez_object_skeleton_set_gatt_characteristic1(BluezObjectSkeleton * object, BluezGattCharacteristic1 * interface_);
void bluez_object_skeleton_set_gatt_descriptor1(BluezObjectSkeleton * object, BluezGattDescriptor1 * interface_);
void bluez_object_skeleton_set_leadvertisement1(BluezObjectSkeleton * object, BluezLEAdvertisement1 * interface_);
void bluez_object_skeleton_set_leadvertising_manager1(BluezObjectSkeleton * object, BluezLEAdvertisingManager1 * interface_);
void bluez_object_skeleton_set_org_freedesktop_dbus_properties(BluezObjectSkeleton * object,
                                                               BluezOrgFreedesktopDBusProperties * interface_);
void bluez_object_skeleton_set_profile_manager1(BluezObjectSkeleton * object, BluezProfileManager1 * interface_);
void bluez_object_skeleton_set_org_freedesktop_dbus_object_manager(BluezObjectSkeleton * object,
                                                                   BluezOrgFreedesktopDBusObjectManager * interface_);

/* ---- */

#define BLUEZ_TYPE_OBJECT_MANAGER_CLIENT (bluez_object_manager_client_get_type())
#define BLUEZ_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST((o), BLUEZ_TYPE_OBJECT_MANAGER_CLIENT, BluezObjectManagerClient))
#define BLUEZ_OBJECT_MANAGER_CLIENT_CLASS(k)                                                                                       \
    (G_TYPE_CHECK_CLASS_CAST((k), BLUEZ_TYPE_OBJECT_MANAGER_CLIENT, BluezObjectManagerClientClass))
#define BLUEZ_OBJECT_MANAGER_CLIENT_GET_CLASS(o)                                                                                   \
    (G_TYPE_INSTANCE_GET_CLASS((o), BLUEZ_TYPE_OBJECT_MANAGER_CLIENT, BluezObjectManagerClientClass))
#define BLUEZ_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), BLUEZ_TYPE_OBJECT_MANAGER_CLIENT))
#define BLUEZ_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), BLUEZ_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _BluezObjectManagerClient BluezObjectManagerClient;
typedef struct _BluezObjectManagerClientClass BluezObjectManagerClientClass;
typedef struct _BluezObjectManagerClientPrivate BluezObjectManagerClientPrivate;

struct _BluezObjectManagerClient
{
    /*< private >*/
    GDBusObjectManagerClient parent_instance;
    BluezObjectManagerClientPrivate * priv;
};

struct _BluezObjectManagerClientClass
{
    GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(BluezObjectManagerClient, g_object_unref)
#endif

GType bluez_object_manager_client_get_type(void) G_GNUC_CONST;

GType bluez_object_manager_client_get_proxy_type(GDBusObjectManagerClient * manager, const gchar * object_path,
                                                 const gchar * interface_name, gpointer user_data);

void bluez_object_manager_client_new(GDBusConnection * connection, GDBusObjectManagerClientFlags flags, const gchar * name,
                                     const gchar * object_path, GCancellable * cancellable, GAsyncReadyCallback callback,
                                     gpointer user_data);
GDBusObjectManager * bluez_object_manager_client_new_finish(GAsyncResult * res, GError ** error);
GDBusObjectManager * bluez_object_manager_client_new_sync(GDBusConnection * connection, GDBusObjectManagerClientFlags flags,
                                                          const gchar * name, const gchar * object_path, GCancellable * cancellable,
                                                          GError ** error);

void bluez_object_manager_client_new_for_bus(GBusType bus_type, GDBusObjectManagerClientFlags flags, const gchar * name,
                                             const gchar * object_path, GCancellable * cancellable, GAsyncReadyCallback callback,
                                             gpointer user_data);
GDBusObjectManager * bluez_object_manager_client_new_for_bus_finish(GAsyncResult * res, GError ** error);
GDBusObjectManager * bluez_object_manager_client_new_for_bus_sync(GBusType bus_type, GDBusObjectManagerClientFlags flags,
                                                                  const gchar * name, const gchar * object_path,
                                                                  GCancellable * cancellable, GError ** error);

G_END_DECLS

#endif /* __DBUSBLUEZ_H__ */
