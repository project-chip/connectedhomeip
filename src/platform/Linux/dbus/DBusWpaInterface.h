/*
 * Generated by gdbus-codegen 2.56.4. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __DBUSWPAINTERFACE_H__
#define __DBUSWPAINTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS

/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1.Interface */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE (wpa_fi_w1_wpa_supplicant1_interface_get_type())
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE(o)                                                                                     \
    (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE, WpaFiW1Wpa_supplicant1Interface))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE))
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_GET_IFACE(o)                                                                           \
    (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE, WpaFiW1Wpa_supplicant1InterfaceIface))

struct _WpaFiW1Wpa_supplicant1Interface;
typedef struct _WpaFiW1Wpa_supplicant1Interface WpaFiW1Wpa_supplicant1Interface;
typedef struct _WpaFiW1Wpa_supplicant1InterfaceIface WpaFiW1Wpa_supplicant1InterfaceIface;

struct _WpaFiW1Wpa_supplicant1InterfaceIface
{
    GTypeInterface parent_iface;

    gboolean (*handle_abort_scan)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_add_blob)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation,
                                const gchar * arg_name, const gchar * arg_data);

    gboolean (*handle_add_network)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation,
                                   GVariant * arg_args);

    gboolean (*handle_auto_scan)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation,
                                 const gchar * arg_arg);

    gboolean (*handle_disconnect)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_eaplogoff)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_eaplogon)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_flush_bss)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation, guint arg_age);

    gboolean (*handle_get_blob)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation,
                                const gchar * arg_name);

    gboolean (*handle_network_reply)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation,
                                     const gchar * arg_path, const gchar * arg_field, const gchar * arg_value);

    gboolean (*handle_reassociate)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_reattach)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_reconnect)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_remove_all_networks)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_remove_blob)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation,
                                   const gchar * arg_name);

    gboolean (*handle_remove_network)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation,
                                      const gchar * arg_path);

    gboolean (*handle_save_config)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_scan)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation, GVariant * arg_args);

    gboolean (*handle_select_network)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation,
                                      const gchar * arg_path);

    gboolean (*handle_set_pkcs11_engine_and_module_path)(WpaFiW1Wpa_supplicant1Interface * object,
                                                         GDBusMethodInvocation * invocation, const gchar * arg_pkcs11_engine_path,
                                                         const gchar * arg_pkcs11_module_path);

    gboolean (*handle_signal_poll)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_subscribe_probe_req)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_tdlscancel_channel_switch)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation,
                                                 const gchar * arg_peer_address);

    gboolean (*handle_tdlschannel_switch)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation,
                                          GVariant * arg_args);

    gboolean (*handle_tdlsdiscover)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation,
                                    const gchar * arg_peer_address);

    gboolean (*handle_tdlssetup)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation,
                                 const gchar * arg_peer_address);

    gboolean (*handle_tdlsstatus)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation,
                                  const gchar * arg_peer_address);

    gboolean (*handle_tdlsteardown)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation,
                                    const gchar * arg_peer_address);

    gboolean (*handle_unsubscribe_probe_req)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_vendor_elem_add)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation,
                                       gint arg_frame_id, const gchar * arg_ielems);

    gboolean (*handle_vendor_elem_get)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation,
                                       gint arg_frame_id);

    gboolean (*handle_vendor_elem_rem)(WpaFiW1Wpa_supplicant1Interface * object, GDBusMethodInvocation * invocation,
                                       gint arg_frame_id, const gchar * arg_ielems);

    const gchar * (*get_access_network_type)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_ap_isolate)(WpaFiW1Wpa_supplicant1Interface * object);

    guint (*get_ap_scan)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_ap_vendor_elements)(WpaFiW1Wpa_supplicant1Interface * object);

    gint (*get_assoc_status_code)(WpaFiW1Wpa_supplicant1Interface * object);

    gint (*get_auth_status_code)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_auto_interworking)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_auto_uuid)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_autoscan)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_beacon_int)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_bgscan)(WpaFiW1Wpa_supplicant1Interface * object);

    GVariant * (*get_blobs)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_bridge_ifname)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_bss_max_count)(WpaFiW1Wpa_supplicant1Interface * object);

    guint (*get_bssexpire_age)(WpaFiW1Wpa_supplicant1Interface * object);

    guint (*get_bssexpire_count)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * const * (*get_bsss)(WpaFiW1Wpa_supplicant1Interface * object);

    guint (*get_bsstmstatus)(WpaFiW1Wpa_supplicant1Interface * object);

    GVariant * (*get_capabilities)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_cert_in_cb)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_coloc_intf_reporting)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_config_file)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_config_methods)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_country)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_ctrl_interface)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_ctrl_interface_group)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_current_auth_mode)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_current_bss)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_current_network)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_device_name)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_device_type)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_disable_scan_offload)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_disassoc_low_ack)(WpaFiW1Wpa_supplicant1Interface * object);

    gint (*get_disconnect_reason)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_dot11_rsnaconfig_pmklifetime)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_dot11_rsnaconfig_pmkreauth_threshold)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_dot11_rsnaconfig_satimeout)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_dpp_config_processing)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_dpp_mud_url)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_dpp_name)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_driver)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_driver_param)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_dtim_period)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_eapol_version)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_ext_password_backend)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_external_sim)(WpaFiW1Wpa_supplicant1Interface * object);

    gboolean (*get_fast_reauth)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_filter_rssi)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_filter_ssids)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_freq_list)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_fst_group_id)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_fst_llt)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_fst_priority)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_ftm_initiator)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_ftm_responder)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_gas_address3)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_gas_rand_addr_lifetime)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_gas_rand_mac_addr)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_go_access_network_type)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_go_internet)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_go_interworking)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_go_venue_group)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_go_venue_type)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_hessid)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_hs20)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_ifname)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_ignore_old_scan_res)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_interworking)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_ip_addr_end)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_ip_addr_go)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_ip_addr_mask)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_ip_addr_start)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_key_mgmt_offload)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_mac_addr)(WpaFiW1Wpa_supplicant1Interface * object);

    GVariant * (*get_macaddress_randomization_mask)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_manufacturer)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_max_num_sta)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_model_name)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_model_number)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * const * (*get_networks)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_okc)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_opensc_engine_path)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_openssl_ciphers)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_os_version)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_osu_dir)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_add_cli_chan)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_cli_probe)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_device_persistent_mac_addr)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_device_random_mac_addr)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_disabled)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_go_ctwindow)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_go_edmg)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_go_freq_change_policy)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_go_he)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_go_ht40)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_go_intent)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_go_max_inactivity)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_go_vht)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_group_idle)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_ignore_shared_freq)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_interface_random_mac_addr)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_intra_bss)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_listen_channel)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_listen_reg_class)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_no_go_freq)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_no_group_iface)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_oper_channel)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_oper_reg_class)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_optimize_listen_chan)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_passphrase_len)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_pref_chan)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_search_delay)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_p2p_ssid_postfix)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_passive_scan)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_pbc_in_m1)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_pcsc_pin)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_pcsc_reader)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_persistent_reconnect)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_pkcs11_engine_path)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_pkcs11_module_path)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_pmf)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_preassoc_mac_addr)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_rand_addr_lifetime)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_reassoc_same_bss_optim)(WpaFiW1Wpa_supplicant1Interface * object);

    gboolean (*get_roam_complete)(WpaFiW1Wpa_supplicant1Interface * object);

    guint (*get_roam_time)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_sae_groups)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_sae_pmkid_in_assoc)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_sae_pwe)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_scan_cur_freq)(WpaFiW1Wpa_supplicant1Interface * object);

    gint (*get_scan_interval)(WpaFiW1Wpa_supplicant1Interface * object);

    gboolean (*get_scanning)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_sched_scan_interval)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_sched_scan_plans)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_sched_scan_start_delay)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_sec_device_type)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_serial_number)(WpaFiW1Wpa_supplicant1Interface * object);

    guint (*get_session_length)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_state)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * const * (*get_stations)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_tdls_external_control)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_update_config)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_uuid)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_wowlan_triggers)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_wpa_rsc_relaxation)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_wps_cred_add_sae)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_wps_cred_processing)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_wps_nfc_dev_pw)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_wps_nfc_dev_pw_id)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_wps_nfc_dh_privkey)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_wps_nfc_dh_pubkey)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_wps_priority)(WpaFiW1Wpa_supplicant1Interface * object);

    const gchar * (*get_wps_vendor_ext_m1)(WpaFiW1Wpa_supplicant1Interface * object);

    void (*blob_added)(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_name);

    void (*blob_removed)(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_name);

    void (*bssadded)(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_path, GVariant * arg_properties);

    void (*bssremoved)(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_path);

    void (*certification)(WpaFiW1Wpa_supplicant1Interface * object, GVariant * arg_certification);

    void (*eap)(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_status, const gchar * arg_parameter);

    void (*network_added)(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_path, GVariant * arg_properties);

    void (*network_removed)(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_path);

    void (*network_request)(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_path, const gchar * arg_field,
                            const gchar * arg_text);

    void (*network_selected)(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_path);

    void (*probe_request)(WpaFiW1Wpa_supplicant1Interface * object, GVariant * arg_args);

    void (*properties_changed)(WpaFiW1Wpa_supplicant1Interface * object, GVariant * arg_properties);

    void (*scan_done)(WpaFiW1Wpa_supplicant1Interface * object, gboolean arg_success);

    void (*sta_authorized)(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_name);

    void (*sta_deauthorized)(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_name);

    void (*station_added)(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_path, GVariant * arg_properties);

    void (*station_removed)(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_path);
};

GType wpa_fi_w1_wpa_supplicant1_interface_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo * wpa_fi_w1_wpa_supplicant1_interface_interface_info(void);
guint wpa_fi_w1_wpa_supplicant1_interface_override_properties(GObjectClass * klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void wpa_fi_w1_wpa_supplicant1_interface_complete_scan(WpaFiW1Wpa_supplicant1Interface * object,
                                                       GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_signal_poll(WpaFiW1Wpa_supplicant1Interface * object,
                                                              GDBusMethodInvocation * invocation, GVariant * args);

void wpa_fi_w1_wpa_supplicant1_interface_complete_disconnect(WpaFiW1Wpa_supplicant1Interface * object,
                                                             GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_add_network(WpaFiW1Wpa_supplicant1Interface * object,
                                                              GDBusMethodInvocation * invocation, const gchar * path);

void wpa_fi_w1_wpa_supplicant1_interface_complete_reassociate(WpaFiW1Wpa_supplicant1Interface * object,
                                                              GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_reattach(WpaFiW1Wpa_supplicant1Interface * object,
                                                           GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_reconnect(WpaFiW1Wpa_supplicant1Interface * object,
                                                            GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_remove_network(WpaFiW1Wpa_supplicant1Interface * object,
                                                                 GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_remove_all_networks(WpaFiW1Wpa_supplicant1Interface * object,
                                                                      GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_select_network(WpaFiW1Wpa_supplicant1Interface * object,
                                                                 GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_network_reply(WpaFiW1Wpa_supplicant1Interface * object,
                                                                GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_add_blob(WpaFiW1Wpa_supplicant1Interface * object,
                                                           GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_get_blob(WpaFiW1Wpa_supplicant1Interface * object,
                                                           GDBusMethodInvocation * invocation, const gchar * data);

void wpa_fi_w1_wpa_supplicant1_interface_complete_remove_blob(WpaFiW1Wpa_supplicant1Interface * object,
                                                              GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_set_pkcs11_engine_and_module_path(WpaFiW1Wpa_supplicant1Interface * object,
                                                                                    GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_flush_bss(WpaFiW1Wpa_supplicant1Interface * object,
                                                            GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_subscribe_probe_req(WpaFiW1Wpa_supplicant1Interface * object,
                                                                      GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_unsubscribe_probe_req(WpaFiW1Wpa_supplicant1Interface * object,
                                                                        GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_eaplogoff(WpaFiW1Wpa_supplicant1Interface * object,
                                                            GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_eaplogon(WpaFiW1Wpa_supplicant1Interface * object,
                                                           GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_auto_scan(WpaFiW1Wpa_supplicant1Interface * object,
                                                            GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_tdlsdiscover(WpaFiW1Wpa_supplicant1Interface * object,
                                                               GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_tdlssetup(WpaFiW1Wpa_supplicant1Interface * object,
                                                            GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_tdlsstatus(WpaFiW1Wpa_supplicant1Interface * object,
                                                             GDBusMethodInvocation * invocation, const gchar * status);

void wpa_fi_w1_wpa_supplicant1_interface_complete_tdlsteardown(WpaFiW1Wpa_supplicant1Interface * object,
                                                               GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_tdlschannel_switch(WpaFiW1Wpa_supplicant1Interface * object,
                                                                     GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_tdlscancel_channel_switch(WpaFiW1Wpa_supplicant1Interface * object,
                                                                            GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_vendor_elem_add(WpaFiW1Wpa_supplicant1Interface * object,
                                                                  GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_vendor_elem_get(WpaFiW1Wpa_supplicant1Interface * object,
                                                                  GDBusMethodInvocation * invocation, const gchar * ielems);

void wpa_fi_w1_wpa_supplicant1_interface_complete_vendor_elem_rem(WpaFiW1Wpa_supplicant1Interface * object,
                                                                  GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_save_config(WpaFiW1Wpa_supplicant1Interface * object,
                                                              GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_complete_abort_scan(WpaFiW1Wpa_supplicant1Interface * object,
                                                             GDBusMethodInvocation * invocation);

/* D-Bus signal emissions functions: */
void wpa_fi_w1_wpa_supplicant1_interface_emit_scan_done(WpaFiW1Wpa_supplicant1Interface * object, gboolean arg_success);

void wpa_fi_w1_wpa_supplicant1_interface_emit_bssadded(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_path,
                                                       GVariant * arg_properties);

void wpa_fi_w1_wpa_supplicant1_interface_emit_bssremoved(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_path);

void wpa_fi_w1_wpa_supplicant1_interface_emit_blob_added(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_name);

void wpa_fi_w1_wpa_supplicant1_interface_emit_blob_removed(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_name);

void wpa_fi_w1_wpa_supplicant1_interface_emit_network_added(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_path,
                                                            GVariant * arg_properties);

void wpa_fi_w1_wpa_supplicant1_interface_emit_network_removed(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_path);

void wpa_fi_w1_wpa_supplicant1_interface_emit_network_selected(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_path);

void wpa_fi_w1_wpa_supplicant1_interface_emit_properties_changed(WpaFiW1Wpa_supplicant1Interface * object,
                                                                 GVariant * arg_properties);

void wpa_fi_w1_wpa_supplicant1_interface_emit_probe_request(WpaFiW1Wpa_supplicant1Interface * object, GVariant * arg_args);

void wpa_fi_w1_wpa_supplicant1_interface_emit_certification(WpaFiW1Wpa_supplicant1Interface * object, GVariant * arg_certification);

void wpa_fi_w1_wpa_supplicant1_interface_emit_eap(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_status,
                                                  const gchar * arg_parameter);

void wpa_fi_w1_wpa_supplicant1_interface_emit_sta_authorized(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_name);

void wpa_fi_w1_wpa_supplicant1_interface_emit_sta_deauthorized(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_name);

void wpa_fi_w1_wpa_supplicant1_interface_emit_station_added(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_path,
                                                            GVariant * arg_properties);

void wpa_fi_w1_wpa_supplicant1_interface_emit_station_removed(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_path);

void wpa_fi_w1_wpa_supplicant1_interface_emit_network_request(WpaFiW1Wpa_supplicant1Interface * object, const gchar * arg_path,
                                                              const gchar * arg_field, const gchar * arg_text);

/* D-Bus method calls: */
void wpa_fi_w1_wpa_supplicant1_interface_call_scan(WpaFiW1Wpa_supplicant1Interface * proxy, GVariant * arg_args,
                                                   GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_scan_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                              GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_scan_sync(WpaFiW1Wpa_supplicant1Interface * proxy, GVariant * arg_args,
                                                            GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_signal_poll(WpaFiW1Wpa_supplicant1Interface * proxy, GCancellable * cancellable,
                                                          GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_signal_poll_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GVariant ** out_args,
                                                                     GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_signal_poll_sync(WpaFiW1Wpa_supplicant1Interface * proxy, GVariant ** out_args,
                                                                   GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_disconnect(WpaFiW1Wpa_supplicant1Interface * proxy, GCancellable * cancellable,
                                                         GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_disconnect_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                    GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_disconnect_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                  GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_add_network(WpaFiW1Wpa_supplicant1Interface * proxy, GVariant * arg_args,
                                                          GCancellable * cancellable, GAsyncReadyCallback callback,
                                                          gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_add_network_finish(WpaFiW1Wpa_supplicant1Interface * proxy, gchar ** out_path,
                                                                     GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_add_network_sync(WpaFiW1Wpa_supplicant1Interface * proxy, GVariant * arg_args,
                                                                   gchar ** out_path, GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_reassociate(WpaFiW1Wpa_supplicant1Interface * proxy, GCancellable * cancellable,
                                                          GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_reassociate_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                     GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_reassociate_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                   GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_reattach(WpaFiW1Wpa_supplicant1Interface * proxy, GCancellable * cancellable,
                                                       GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_reattach_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                  GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_reattach_sync(WpaFiW1Wpa_supplicant1Interface * proxy, GCancellable * cancellable,
                                                                GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_reconnect(WpaFiW1Wpa_supplicant1Interface * proxy, GCancellable * cancellable,
                                                        GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_reconnect_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                   GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_reconnect_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                 GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_remove_network(WpaFiW1Wpa_supplicant1Interface * proxy, const gchar * arg_path,
                                                             GCancellable * cancellable, GAsyncReadyCallback callback,
                                                             gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_remove_network_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                        GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_remove_network_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                      const gchar * arg_path, GCancellable * cancellable,
                                                                      GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_remove_all_networks(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                  GCancellable * cancellable, GAsyncReadyCallback callback,
                                                                  gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_remove_all_networks_finish(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                             GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_remove_all_networks_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                           GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_select_network(WpaFiW1Wpa_supplicant1Interface * proxy, const gchar * arg_path,
                                                             GCancellable * cancellable, GAsyncReadyCallback callback,
                                                             gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_select_network_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                        GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_select_network_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                      const gchar * arg_path, GCancellable * cancellable,
                                                                      GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_network_reply(WpaFiW1Wpa_supplicant1Interface * proxy, const gchar * arg_path,
                                                            const gchar * arg_field, const gchar * arg_value,
                                                            GCancellable * cancellable, GAsyncReadyCallback callback,
                                                            gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_network_reply_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                       GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_network_reply_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                     const gchar * arg_path, const gchar * arg_field,
                                                                     const gchar * arg_value, GCancellable * cancellable,
                                                                     GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_add_blob(WpaFiW1Wpa_supplicant1Interface * proxy, const gchar * arg_name,
                                                       const gchar * arg_data, GCancellable * cancellable,
                                                       GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_add_blob_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                  GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_add_blob_sync(WpaFiW1Wpa_supplicant1Interface * proxy, const gchar * arg_name,
                                                                const gchar * arg_data, GCancellable * cancellable,
                                                                GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_get_blob(WpaFiW1Wpa_supplicant1Interface * proxy, const gchar * arg_name,
                                                       GCancellable * cancellable, GAsyncReadyCallback callback,
                                                       gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_get_blob_finish(WpaFiW1Wpa_supplicant1Interface * proxy, gchar ** out_data,
                                                                  GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_get_blob_sync(WpaFiW1Wpa_supplicant1Interface * proxy, const gchar * arg_name,
                                                                gchar ** out_data, GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_remove_blob(WpaFiW1Wpa_supplicant1Interface * proxy, const gchar * arg_name,
                                                          GCancellable * cancellable, GAsyncReadyCallback callback,
                                                          gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_remove_blob_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                     GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_remove_blob_sync(WpaFiW1Wpa_supplicant1Interface * proxy, const gchar * arg_name,
                                                                   GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_set_pkcs11_engine_and_module_path(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                                const gchar * arg_pkcs11_engine_path,
                                                                                const gchar * arg_pkcs11_module_path,
                                                                                GCancellable * cancellable,
                                                                                GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_set_pkcs11_engine_and_module_path_finish(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                                           GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_set_pkcs11_engine_and_module_path_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                                         const gchar * arg_pkcs11_engine_path,
                                                                                         const gchar * arg_pkcs11_module_path,
                                                                                         GCancellable * cancellable,
                                                                                         GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_flush_bss(WpaFiW1Wpa_supplicant1Interface * proxy, guint arg_age,
                                                        GCancellable * cancellable, GAsyncReadyCallback callback,
                                                        gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_flush_bss_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                   GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_flush_bss_sync(WpaFiW1Wpa_supplicant1Interface * proxy, guint arg_age,
                                                                 GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_subscribe_probe_req(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                  GCancellable * cancellable, GAsyncReadyCallback callback,
                                                                  gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_subscribe_probe_req_finish(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                             GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_subscribe_probe_req_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                           GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_unsubscribe_probe_req(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                    GCancellable * cancellable, GAsyncReadyCallback callback,
                                                                    gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_unsubscribe_probe_req_finish(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                               GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_unsubscribe_probe_req_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                             GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_eaplogoff(WpaFiW1Wpa_supplicant1Interface * proxy, GCancellable * cancellable,
                                                        GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_eaplogoff_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                   GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_eaplogoff_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                 GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_eaplogon(WpaFiW1Wpa_supplicant1Interface * proxy, GCancellable * cancellable,
                                                       GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_eaplogon_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                  GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_eaplogon_sync(WpaFiW1Wpa_supplicant1Interface * proxy, GCancellable * cancellable,
                                                                GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_auto_scan(WpaFiW1Wpa_supplicant1Interface * proxy, const gchar * arg_arg,
                                                        GCancellable * cancellable, GAsyncReadyCallback callback,
                                                        gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_auto_scan_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                   GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_auto_scan_sync(WpaFiW1Wpa_supplicant1Interface * proxy, const gchar * arg_arg,
                                                                 GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_tdlsdiscover(WpaFiW1Wpa_supplicant1Interface * proxy, const gchar * arg_peer_address,
                                                           GCancellable * cancellable, GAsyncReadyCallback callback,
                                                           gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_tdlsdiscover_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                      GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_tdlsdiscover_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                    const gchar * arg_peer_address, GCancellable * cancellable,
                                                                    GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_tdlssetup(WpaFiW1Wpa_supplicant1Interface * proxy, const gchar * arg_peer_address,
                                                        GCancellable * cancellable, GAsyncReadyCallback callback,
                                                        gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_tdlssetup_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                   GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_tdlssetup_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                 const gchar * arg_peer_address, GCancellable * cancellable,
                                                                 GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_tdlsstatus(WpaFiW1Wpa_supplicant1Interface * proxy, const gchar * arg_peer_address,
                                                         GCancellable * cancellable, GAsyncReadyCallback callback,
                                                         gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_tdlsstatus_finish(WpaFiW1Wpa_supplicant1Interface * proxy, gchar ** out_status,
                                                                    GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_tdlsstatus_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                  const gchar * arg_peer_address, gchar ** out_status,
                                                                  GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_tdlsteardown(WpaFiW1Wpa_supplicant1Interface * proxy, const gchar * arg_peer_address,
                                                           GCancellable * cancellable, GAsyncReadyCallback callback,
                                                           gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_tdlsteardown_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                      GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_tdlsteardown_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                    const gchar * arg_peer_address, GCancellable * cancellable,
                                                                    GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_tdlschannel_switch(WpaFiW1Wpa_supplicant1Interface * proxy, GVariant * arg_args,
                                                                 GCancellable * cancellable, GAsyncReadyCallback callback,
                                                                 gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_tdlschannel_switch_finish(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                            GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_tdlschannel_switch_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                          GVariant * arg_args, GCancellable * cancellable,
                                                                          GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_tdlscancel_channel_switch(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                        const gchar * arg_peer_address, GCancellable * cancellable,
                                                                        GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_tdlscancel_channel_switch_finish(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                                   GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_tdlscancel_channel_switch_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                                 const gchar * arg_peer_address,
                                                                                 GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_vendor_elem_add(WpaFiW1Wpa_supplicant1Interface * proxy, gint arg_frame_id,
                                                              const gchar * arg_ielems, GCancellable * cancellable,
                                                              GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_vendor_elem_add_finish(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                         GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_vendor_elem_add_sync(WpaFiW1Wpa_supplicant1Interface * proxy, gint arg_frame_id,
                                                                       const gchar * arg_ielems, GCancellable * cancellable,
                                                                       GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_vendor_elem_get(WpaFiW1Wpa_supplicant1Interface * proxy, gint arg_frame_id,
                                                              GCancellable * cancellable, GAsyncReadyCallback callback,
                                                              gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_vendor_elem_get_finish(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                         gchar ** out_ielems, GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_vendor_elem_get_sync(WpaFiW1Wpa_supplicant1Interface * proxy, gint arg_frame_id,
                                                                       gchar ** out_ielems, GCancellable * cancellable,
                                                                       GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_vendor_elem_rem(WpaFiW1Wpa_supplicant1Interface * proxy, gint arg_frame_id,
                                                              const gchar * arg_ielems, GCancellable * cancellable,
                                                              GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_vendor_elem_rem_finish(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                         GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_vendor_elem_rem_sync(WpaFiW1Wpa_supplicant1Interface * proxy, gint arg_frame_id,
                                                                       const gchar * arg_ielems, GCancellable * cancellable,
                                                                       GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_save_config(WpaFiW1Wpa_supplicant1Interface * proxy, GCancellable * cancellable,
                                                          GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_save_config_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                     GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_save_config_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                   GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_call_abort_scan(WpaFiW1Wpa_supplicant1Interface * proxy, GCancellable * cancellable,
                                                         GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_abort_scan_finish(WpaFiW1Wpa_supplicant1Interface * proxy, GAsyncResult * res,
                                                                    GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_call_abort_scan_sync(WpaFiW1Wpa_supplicant1Interface * proxy,
                                                                  GCancellable * cancellable, GError ** error);

/* D-Bus property accessors: */
GVariant * wpa_fi_w1_wpa_supplicant1_interface_get_capabilities(WpaFiW1Wpa_supplicant1Interface * object);
GVariant * wpa_fi_w1_wpa_supplicant1_interface_dup_capabilities(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_capabilities(WpaFiW1Wpa_supplicant1Interface * object, GVariant * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_state(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_state(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_state(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

gboolean wpa_fi_w1_wpa_supplicant1_interface_get_scanning(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_scanning(WpaFiW1Wpa_supplicant1Interface * object, gboolean value);

guint wpa_fi_w1_wpa_supplicant1_interface_get_ap_scan(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_ap_scan(WpaFiW1Wpa_supplicant1Interface * object, guint value);

guint wpa_fi_w1_wpa_supplicant1_interface_get_bssexpire_age(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_bssexpire_age(WpaFiW1Wpa_supplicant1Interface * object, guint value);

guint wpa_fi_w1_wpa_supplicant1_interface_get_bssexpire_count(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_bssexpire_count(WpaFiW1Wpa_supplicant1Interface * object, guint value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_country(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_country(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_country(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_ifname(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_ifname(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_ifname(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_driver(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_driver(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_driver(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_bridge_ifname(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_bridge_ifname(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_bridge_ifname(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_config_file(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_config_file(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_config_file(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_current_bss(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_current_bss(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_current_bss(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_current_network(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_current_network(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_current_network(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_current_auth_mode(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_current_auth_mode(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_current_auth_mode(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

GVariant * wpa_fi_w1_wpa_supplicant1_interface_get_blobs(WpaFiW1Wpa_supplicant1Interface * object);
GVariant * wpa_fi_w1_wpa_supplicant1_interface_dup_blobs(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_blobs(WpaFiW1Wpa_supplicant1Interface * object, GVariant * value);

const gchar * const * wpa_fi_w1_wpa_supplicant1_interface_get_bsss(WpaFiW1Wpa_supplicant1Interface * object);
gchar ** wpa_fi_w1_wpa_supplicant1_interface_dup_bsss(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_bsss(WpaFiW1Wpa_supplicant1Interface * object, const gchar * const * value);

const gchar * const * wpa_fi_w1_wpa_supplicant1_interface_get_networks(WpaFiW1Wpa_supplicant1Interface * object);
gchar ** wpa_fi_w1_wpa_supplicant1_interface_dup_networks(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_networks(WpaFiW1Wpa_supplicant1Interface * object, const gchar * const * value);

gboolean wpa_fi_w1_wpa_supplicant1_interface_get_fast_reauth(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_fast_reauth(WpaFiW1Wpa_supplicant1Interface * object, gboolean value);

gint wpa_fi_w1_wpa_supplicant1_interface_get_scan_interval(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_scan_interval(WpaFiW1Wpa_supplicant1Interface * object, gint value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_pkcs11_engine_path(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_pkcs11_engine_path(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_pkcs11_engine_path(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_pkcs11_module_path(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_pkcs11_module_path(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_pkcs11_module_path(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

gint wpa_fi_w1_wpa_supplicant1_interface_get_disconnect_reason(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_disconnect_reason(WpaFiW1Wpa_supplicant1Interface * object, gint value);

gint wpa_fi_w1_wpa_supplicant1_interface_get_auth_status_code(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_auth_status_code(WpaFiW1Wpa_supplicant1Interface * object, gint value);

gint wpa_fi_w1_wpa_supplicant1_interface_get_assoc_status_code(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_assoc_status_code(WpaFiW1Wpa_supplicant1Interface * object, gint value);

guint wpa_fi_w1_wpa_supplicant1_interface_get_roam_time(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_roam_time(WpaFiW1Wpa_supplicant1Interface * object, guint value);

gboolean wpa_fi_w1_wpa_supplicant1_interface_get_roam_complete(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_roam_complete(WpaFiW1Wpa_supplicant1Interface * object, gboolean value);

guint wpa_fi_w1_wpa_supplicant1_interface_get_session_length(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_session_length(WpaFiW1Wpa_supplicant1Interface * object, guint value);

guint wpa_fi_w1_wpa_supplicant1_interface_get_bsstmstatus(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_bsstmstatus(WpaFiW1Wpa_supplicant1Interface * object, guint value);

const gchar * const * wpa_fi_w1_wpa_supplicant1_interface_get_stations(WpaFiW1Wpa_supplicant1Interface * object);
gchar ** wpa_fi_w1_wpa_supplicant1_interface_dup_stations(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_stations(WpaFiW1Wpa_supplicant1Interface * object, const gchar * const * value);

GVariant * wpa_fi_w1_wpa_supplicant1_interface_get_macaddress_randomization_mask(WpaFiW1Wpa_supplicant1Interface * object);
GVariant * wpa_fi_w1_wpa_supplicant1_interface_dup_macaddress_randomization_mask(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_macaddress_randomization_mask(WpaFiW1Wpa_supplicant1Interface * object,
                                                                           GVariant * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_ctrl_interface(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_ctrl_interface(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_ctrl_interface(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_ctrl_interface_group(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_ctrl_interface_group(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_ctrl_interface_group(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_eapol_version(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_eapol_version(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_eapol_version(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_bgscan(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_bgscan(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_bgscan(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_disable_scan_offload(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_disable_scan_offload(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_disable_scan_offload(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_opensc_engine_path(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_opensc_engine_path(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_opensc_engine_path(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_openssl_ciphers(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_openssl_ciphers(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_openssl_ciphers(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_pcsc_reader(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_pcsc_reader(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_pcsc_reader(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_pcsc_pin(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_pcsc_pin(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_pcsc_pin(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_external_sim(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_external_sim(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_external_sim(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_driver_param(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_driver_param(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_driver_param(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_dot11_rsnaconfig_pmklifetime(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_dot11_rsnaconfig_pmklifetime(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_dot11_rsnaconfig_pmklifetime(WpaFiW1Wpa_supplicant1Interface * object,
                                                                          const gchar * value);

const gchar *
wpa_fi_w1_wpa_supplicant1_interface_get_dot11_rsnaconfig_pmkreauth_threshold(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_dot11_rsnaconfig_pmkreauth_threshold(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_dot11_rsnaconfig_pmkreauth_threshold(WpaFiW1Wpa_supplicant1Interface * object,
                                                                                  const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_dot11_rsnaconfig_satimeout(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_dot11_rsnaconfig_satimeout(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_dot11_rsnaconfig_satimeout(WpaFiW1Wpa_supplicant1Interface * object,
                                                                        const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_update_config(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_update_config(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_update_config(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_uuid(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_uuid(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_uuid(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_auto_uuid(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_auto_uuid(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_auto_uuid(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_device_name(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_device_name(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_device_name(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_manufacturer(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_manufacturer(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_manufacturer(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_model_name(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_model_name(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_model_name(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_model_number(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_model_number(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_model_number(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_serial_number(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_serial_number(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_serial_number(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_device_type(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_device_type(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_device_type(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_os_version(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_os_version(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_os_version(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_config_methods(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_config_methods(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_config_methods(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_wps_cred_processing(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_wps_cred_processing(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_wps_cred_processing(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_wps_cred_add_sae(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_wps_cred_add_sae(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_wps_cred_add_sae(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_wps_vendor_ext_m1(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_wps_vendor_ext_m1(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_wps_vendor_ext_m1(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_sec_device_type(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_sec_device_type(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_sec_device_type(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_listen_reg_class(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_listen_reg_class(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_listen_reg_class(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_listen_channel(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_listen_channel(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_listen_channel(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_oper_reg_class(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_oper_reg_class(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_oper_reg_class(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_oper_channel(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_oper_channel(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_oper_channel(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_go_intent(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_go_intent(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_go_intent(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_ssid_postfix(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_ssid_postfix(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_ssid_postfix(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_persistent_reconnect(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_persistent_reconnect(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_persistent_reconnect(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_intra_bss(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_intra_bss(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_intra_bss(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_group_idle(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_group_idle(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_group_idle(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_go_freq_change_policy(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_go_freq_change_policy(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_go_freq_change_policy(WpaFiW1Wpa_supplicant1Interface * object,
                                                                       const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_passphrase_len(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_passphrase_len(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_passphrase_len(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_pref_chan(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_pref_chan(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_pref_chan(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_no_go_freq(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_no_go_freq(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_no_go_freq(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_add_cli_chan(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_add_cli_chan(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_add_cli_chan(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_optimize_listen_chan(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_optimize_listen_chan(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_optimize_listen_chan(WpaFiW1Wpa_supplicant1Interface * object,
                                                                      const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_go_ht40(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_go_ht40(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_go_ht40(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_go_vht(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_go_vht(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_go_vht(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_go_he(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_go_he(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_go_he(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_go_edmg(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_go_edmg(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_go_edmg(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_disabled(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_disabled(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_disabled(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_go_ctwindow(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_go_ctwindow(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_go_ctwindow(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_no_group_iface(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_no_group_iface(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_no_group_iface(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_ignore_shared_freq(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_ignore_shared_freq(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_ignore_shared_freq(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_ip_addr_go(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_ip_addr_go(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_ip_addr_go(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_ip_addr_mask(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_ip_addr_mask(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_ip_addr_mask(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_ip_addr_start(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_ip_addr_start(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_ip_addr_start(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_ip_addr_end(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_ip_addr_end(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_ip_addr_end(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_cli_probe(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_cli_probe(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_cli_probe(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_device_random_mac_addr(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_device_random_mac_addr(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_device_random_mac_addr(WpaFiW1Wpa_supplicant1Interface * object,
                                                                        const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_device_persistent_mac_addr(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_device_persistent_mac_addr(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_device_persistent_mac_addr(WpaFiW1Wpa_supplicant1Interface * object,
                                                                            const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_interface_random_mac_addr(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_interface_random_mac_addr(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_interface_random_mac_addr(WpaFiW1Wpa_supplicant1Interface * object,
                                                                           const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_bss_max_count(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_bss_max_count(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_bss_max_count(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_filter_ssids(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_filter_ssids(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_filter_ssids(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_filter_rssi(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_filter_rssi(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_filter_rssi(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_max_num_sta(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_max_num_sta(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_max_num_sta(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_ap_isolate(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_ap_isolate(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_ap_isolate(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_disassoc_low_ack(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_disassoc_low_ack(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_disassoc_low_ack(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_hs20(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_hs20(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_hs20(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_interworking(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_interworking(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_interworking(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_hessid(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_hessid(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_hessid(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_access_network_type(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_access_network_type(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_access_network_type(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_go_interworking(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_go_interworking(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_go_interworking(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_go_access_network_type(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_go_access_network_type(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_go_access_network_type(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_go_internet(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_go_internet(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_go_internet(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_go_venue_group(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_go_venue_group(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_go_venue_group(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_go_venue_type(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_go_venue_type(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_go_venue_type(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_pbc_in_m1(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_pbc_in_m1(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_pbc_in_m1(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_autoscan(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_autoscan(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_autoscan(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_wps_nfc_dev_pw_id(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_wps_nfc_dev_pw_id(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_wps_nfc_dev_pw_id(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_wps_nfc_dh_pubkey(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_wps_nfc_dh_pubkey(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_wps_nfc_dh_pubkey(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_wps_nfc_dh_privkey(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_wps_nfc_dh_privkey(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_wps_nfc_dh_privkey(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_wps_nfc_dev_pw(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_wps_nfc_dev_pw(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_wps_nfc_dev_pw(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_ext_password_backend(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_ext_password_backend(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_ext_password_backend(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_go_max_inactivity(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_go_max_inactivity(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_go_max_inactivity(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_auto_interworking(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_auto_interworking(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_auto_interworking(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_okc(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_okc(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_okc(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_pmf(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_pmf(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_pmf(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_sae_groups(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_sae_groups(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_sae_groups(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_sae_pwe(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_sae_pwe(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_sae_pwe(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_sae_pmkid_in_assoc(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_sae_pmkid_in_assoc(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_sae_pmkid_in_assoc(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_dtim_period(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_dtim_period(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_dtim_period(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_beacon_int(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_beacon_int(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_beacon_int(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_ap_vendor_elements(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_ap_vendor_elements(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_ap_vendor_elements(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_ignore_old_scan_res(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_ignore_old_scan_res(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_ignore_old_scan_res(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_freq_list(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_freq_list(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_freq_list(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_scan_cur_freq(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_scan_cur_freq(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_scan_cur_freq(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_sched_scan_interval(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_sched_scan_interval(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_sched_scan_interval(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_sched_scan_start_delay(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_sched_scan_start_delay(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_sched_scan_start_delay(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_tdls_external_control(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_tdls_external_control(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_tdls_external_control(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_osu_dir(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_osu_dir(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_osu_dir(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_wowlan_triggers(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_wowlan_triggers(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_wowlan_triggers(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_p2p_search_delay(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_p2p_search_delay(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_p2p_search_delay(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_mac_addr(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_mac_addr(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_mac_addr(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_rand_addr_lifetime(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_rand_addr_lifetime(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_rand_addr_lifetime(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_preassoc_mac_addr(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_preassoc_mac_addr(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_preassoc_mac_addr(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_key_mgmt_offload(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_key_mgmt_offload(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_key_mgmt_offload(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_passive_scan(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_passive_scan(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_passive_scan(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_reassoc_same_bss_optim(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_reassoc_same_bss_optim(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_reassoc_same_bss_optim(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_wps_priority(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_wps_priority(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_wps_priority(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_fst_group_id(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_fst_group_id(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_fst_group_id(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_fst_priority(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_fst_priority(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_fst_priority(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_fst_llt(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_fst_llt(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_fst_llt(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_cert_in_cb(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_cert_in_cb(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_cert_in_cb(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_wpa_rsc_relaxation(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_wpa_rsc_relaxation(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_wpa_rsc_relaxation(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_sched_scan_plans(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_sched_scan_plans(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_sched_scan_plans(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_gas_address3(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_gas_address3(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_gas_address3(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_ftm_responder(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_ftm_responder(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_ftm_responder(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_ftm_initiator(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_ftm_initiator(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_ftm_initiator(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_gas_rand_addr_lifetime(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_gas_rand_addr_lifetime(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_gas_rand_addr_lifetime(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_gas_rand_mac_addr(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_gas_rand_mac_addr(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_gas_rand_mac_addr(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_dpp_config_processing(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_dpp_config_processing(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_dpp_config_processing(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_dpp_name(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_dpp_name(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_dpp_name(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_dpp_mud_url(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_dpp_mud_url(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_dpp_mud_url(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_get_coloc_intf_reporting(WpaFiW1Wpa_supplicant1Interface * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_dup_coloc_intf_reporting(WpaFiW1Wpa_supplicant1Interface * object);
void wpa_fi_w1_wpa_supplicant1_interface_set_coloc_intf_reporting(WpaFiW1Wpa_supplicant1Interface * object, const gchar * value);

/* ---- */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY (wpa_fi_w1_wpa_supplicant1_interface_proxy_get_type())
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY(o)                                                                               \
    (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY, WpaFiW1Wpa_supplicant1InterfaceProxy))
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY_CLASS(k)                                                                         \
    (G_TYPE_CHECK_CLASS_CAST((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY, WpaFiW1Wpa_supplicant1InterfaceProxyClass))
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY_GET_CLASS(o)                                                                     \
    (G_TYPE_INSTANCE_GET_CLASS((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY, WpaFiW1Wpa_supplicant1InterfaceProxyClass))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY(o)                                                                            \
    (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY_CLASS(k)                                                                      \
    (G_TYPE_CHECK_CLASS_TYPE((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY))

typedef struct _WpaFiW1Wpa_supplicant1InterfaceProxy WpaFiW1Wpa_supplicant1InterfaceProxy;
typedef struct _WpaFiW1Wpa_supplicant1InterfaceProxyClass WpaFiW1Wpa_supplicant1InterfaceProxyClass;
typedef struct _WpaFiW1Wpa_supplicant1InterfaceProxyPrivate WpaFiW1Wpa_supplicant1InterfaceProxyPrivate;

struct _WpaFiW1Wpa_supplicant1InterfaceProxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    WpaFiW1Wpa_supplicant1InterfaceProxyPrivate * priv;
};

struct _WpaFiW1Wpa_supplicant1InterfaceProxyClass
{
    GDBusProxyClass parent_class;
};

GType wpa_fi_w1_wpa_supplicant1_interface_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaFiW1Wpa_supplicant1InterfaceProxy, g_object_unref)
#endif

void wpa_fi_w1_wpa_supplicant1_interface_proxy_new(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                                   const gchar * object_path, GCancellable * cancellable,
                                                   GAsyncReadyCallback callback, gpointer user_data);
WpaFiW1Wpa_supplicant1Interface * wpa_fi_w1_wpa_supplicant1_interface_proxy_new_finish(GAsyncResult * res, GError ** error);
WpaFiW1Wpa_supplicant1Interface * wpa_fi_w1_wpa_supplicant1_interface_proxy_new_sync(GDBusConnection * connection,
                                                                                     GDBusProxyFlags flags, const gchar * name,
                                                                                     const gchar * object_path,
                                                                                     GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                           const gchar * object_path, GCancellable * cancellable,
                                                           GAsyncReadyCallback callback, gpointer user_data);
WpaFiW1Wpa_supplicant1Interface * wpa_fi_w1_wpa_supplicant1_interface_proxy_new_for_bus_finish(GAsyncResult * res, GError ** error);
WpaFiW1Wpa_supplicant1Interface *
wpa_fi_w1_wpa_supplicant1_interface_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                           const gchar * object_path, GCancellable * cancellable, GError ** error);

/* ---- */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON (wpa_fi_w1_wpa_supplicant1_interface_skeleton_get_type())
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON(o)                                                                            \
    (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON, WpaFiW1Wpa_supplicant1InterfaceSkeleton))
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON_CLASS(k)                                                                      \
    (G_TYPE_CHECK_CLASS_CAST((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON, WpaFiW1Wpa_supplicant1InterfaceSkeletonClass))
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON_GET_CLASS(o)                                                                  \
    (G_TYPE_INSTANCE_GET_CLASS((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON,                                             \
                               WpaFiW1Wpa_supplicant1InterfaceSkeletonClass))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON(o)                                                                         \
    (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON_CLASS(k)                                                                   \
    (G_TYPE_CHECK_CLASS_TYPE((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON))

typedef struct _WpaFiW1Wpa_supplicant1InterfaceSkeleton WpaFiW1Wpa_supplicant1InterfaceSkeleton;
typedef struct _WpaFiW1Wpa_supplicant1InterfaceSkeletonClass WpaFiW1Wpa_supplicant1InterfaceSkeletonClass;
typedef struct _WpaFiW1Wpa_supplicant1InterfaceSkeletonPrivate WpaFiW1Wpa_supplicant1InterfaceSkeletonPrivate;

struct _WpaFiW1Wpa_supplicant1InterfaceSkeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    WpaFiW1Wpa_supplicant1InterfaceSkeletonPrivate * priv;
};

struct _WpaFiW1Wpa_supplicant1InterfaceSkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType wpa_fi_w1_wpa_supplicant1_interface_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaFiW1Wpa_supplicant1InterfaceSkeleton, g_object_unref)
#endif

WpaFiW1Wpa_supplicant1Interface * wpa_fi_w1_wpa_supplicant1_interface_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1.Interface.WPS */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS (wpa_fi_w1_wpa_supplicant1_interface_wps_get_type())
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS(o)                                                                                 \
    (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS, WpaFiW1Wpa_supplicant1InterfaceWPS))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS(o)                                                                              \
    (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS))
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_GET_IFACE(o)                                                                       \
    (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS, WpaFiW1Wpa_supplicant1InterfaceWPSIface))

struct _WpaFiW1Wpa_supplicant1InterfaceWPS;
typedef struct _WpaFiW1Wpa_supplicant1InterfaceWPS WpaFiW1Wpa_supplicant1InterfaceWPS;
typedef struct _WpaFiW1Wpa_supplicant1InterfaceWPSIface WpaFiW1Wpa_supplicant1InterfaceWPSIface;

struct _WpaFiW1Wpa_supplicant1InterfaceWPSIface
{
    GTypeInterface parent_iface;

    gboolean (*handle_cancel)(WpaFiW1Wpa_supplicant1InterfaceWPS * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_start)(WpaFiW1Wpa_supplicant1InterfaceWPS * object, GDBusMethodInvocation * invocation, GVariant * arg_args);

    const gchar * (*get_config_methods)(WpaFiW1Wpa_supplicant1InterfaceWPS * object);

    const gchar * (*get_device_name)(WpaFiW1Wpa_supplicant1InterfaceWPS * object);

    const gchar * (*get_device_type)(WpaFiW1Wpa_supplicant1InterfaceWPS * object);

    const gchar * (*get_manufacturer)(WpaFiW1Wpa_supplicant1InterfaceWPS * object);

    const gchar * (*get_model_name)(WpaFiW1Wpa_supplicant1InterfaceWPS * object);

    const gchar * (*get_model_number)(WpaFiW1Wpa_supplicant1InterfaceWPS * object);

    gboolean (*get_process_credentials)(WpaFiW1Wpa_supplicant1InterfaceWPS * object);

    const gchar * (*get_serial_number)(WpaFiW1Wpa_supplicant1InterfaceWPS * object);

    void (*credentials)(WpaFiW1Wpa_supplicant1InterfaceWPS * object, GVariant * arg_credentials);

    void (*event)(WpaFiW1Wpa_supplicant1InterfaceWPS * object, const gchar * arg_name, GVariant * arg_args);

    void (*properties_changed)(WpaFiW1Wpa_supplicant1InterfaceWPS * object, GVariant * arg_properties);
};

GType wpa_fi_w1_wpa_supplicant1_interface_wps_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo * wpa_fi_w1_wpa_supplicant1_interface_wps_interface_info(void);
guint wpa_fi_w1_wpa_supplicant1_interface_wps_override_properties(GObjectClass * klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void wpa_fi_w1_wpa_supplicant1_interface_wps_complete_start(WpaFiW1Wpa_supplicant1InterfaceWPS * object,
                                                            GDBusMethodInvocation * invocation, GVariant * output);

void wpa_fi_w1_wpa_supplicant1_interface_wps_complete_cancel(WpaFiW1Wpa_supplicant1InterfaceWPS * object,
                                                             GDBusMethodInvocation * invocation);

/* D-Bus signal emissions functions: */
void wpa_fi_w1_wpa_supplicant1_interface_wps_emit_event(WpaFiW1Wpa_supplicant1InterfaceWPS * object, const gchar * arg_name,
                                                        GVariant * arg_args);

void wpa_fi_w1_wpa_supplicant1_interface_wps_emit_credentials(WpaFiW1Wpa_supplicant1InterfaceWPS * object,
                                                              GVariant * arg_credentials);

void wpa_fi_w1_wpa_supplicant1_interface_wps_emit_properties_changed(WpaFiW1Wpa_supplicant1InterfaceWPS * object,
                                                                     GVariant * arg_properties);

/* D-Bus method calls: */
void wpa_fi_w1_wpa_supplicant1_interface_wps_call_start(WpaFiW1Wpa_supplicant1InterfaceWPS * proxy, GVariant * arg_args,
                                                        GCancellable * cancellable, GAsyncReadyCallback callback,
                                                        gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_wps_call_start_finish(WpaFiW1Wpa_supplicant1InterfaceWPS * proxy,
                                                                   GVariant ** out_output, GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_wps_call_start_sync(WpaFiW1Wpa_supplicant1InterfaceWPS * proxy, GVariant * arg_args,
                                                                 GVariant ** out_output, GCancellable * cancellable,
                                                                 GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_wps_call_cancel(WpaFiW1Wpa_supplicant1InterfaceWPS * proxy, GCancellable * cancellable,
                                                         GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_wps_call_cancel_finish(WpaFiW1Wpa_supplicant1InterfaceWPS * proxy, GAsyncResult * res,
                                                                    GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_wps_call_cancel_sync(WpaFiW1Wpa_supplicant1InterfaceWPS * proxy,
                                                                  GCancellable * cancellable, GError ** error);

/* D-Bus property accessors: */
gboolean wpa_fi_w1_wpa_supplicant1_interface_wps_get_process_credentials(WpaFiW1Wpa_supplicant1InterfaceWPS * object);
void wpa_fi_w1_wpa_supplicant1_interface_wps_set_process_credentials(WpaFiW1Wpa_supplicant1InterfaceWPS * object, gboolean value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_wps_get_config_methods(WpaFiW1Wpa_supplicant1InterfaceWPS * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_wps_dup_config_methods(WpaFiW1Wpa_supplicant1InterfaceWPS * object);
void wpa_fi_w1_wpa_supplicant1_interface_wps_set_config_methods(WpaFiW1Wpa_supplicant1InterfaceWPS * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_wps_get_device_name(WpaFiW1Wpa_supplicant1InterfaceWPS * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_wps_dup_device_name(WpaFiW1Wpa_supplicant1InterfaceWPS * object);
void wpa_fi_w1_wpa_supplicant1_interface_wps_set_device_name(WpaFiW1Wpa_supplicant1InterfaceWPS * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_wps_get_manufacturer(WpaFiW1Wpa_supplicant1InterfaceWPS * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_wps_dup_manufacturer(WpaFiW1Wpa_supplicant1InterfaceWPS * object);
void wpa_fi_w1_wpa_supplicant1_interface_wps_set_manufacturer(WpaFiW1Wpa_supplicant1InterfaceWPS * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_wps_get_model_name(WpaFiW1Wpa_supplicant1InterfaceWPS * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_wps_dup_model_name(WpaFiW1Wpa_supplicant1InterfaceWPS * object);
void wpa_fi_w1_wpa_supplicant1_interface_wps_set_model_name(WpaFiW1Wpa_supplicant1InterfaceWPS * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_wps_get_model_number(WpaFiW1Wpa_supplicant1InterfaceWPS * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_wps_dup_model_number(WpaFiW1Wpa_supplicant1InterfaceWPS * object);
void wpa_fi_w1_wpa_supplicant1_interface_wps_set_model_number(WpaFiW1Wpa_supplicant1InterfaceWPS * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_wps_get_serial_number(WpaFiW1Wpa_supplicant1InterfaceWPS * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_wps_dup_serial_number(WpaFiW1Wpa_supplicant1InterfaceWPS * object);
void wpa_fi_w1_wpa_supplicant1_interface_wps_set_serial_number(WpaFiW1Wpa_supplicant1InterfaceWPS * object, const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_wps_get_device_type(WpaFiW1Wpa_supplicant1InterfaceWPS * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_wps_dup_device_type(WpaFiW1Wpa_supplicant1InterfaceWPS * object);
void wpa_fi_w1_wpa_supplicant1_interface_wps_set_device_type(WpaFiW1Wpa_supplicant1InterfaceWPS * object, const gchar * value);

/* ---- */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_PROXY (wpa_fi_w1_wpa_supplicant1_interface_wps_proxy_get_type())
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_PROXY(o)                                                                           \
    (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_PROXY, WpaFiW1Wpa_supplicant1InterfaceWPSProxy))
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_PROXY_CLASS(k)                                                                     \
    (G_TYPE_CHECK_CLASS_CAST((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_PROXY, WpaFiW1Wpa_supplicant1InterfaceWPSProxyClass))
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_PROXY_GET_CLASS(o)                                                                 \
    (G_TYPE_INSTANCE_GET_CLASS((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_PROXY,                                            \
                               WpaFiW1Wpa_supplicant1InterfaceWPSProxyClass))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_PROXY(o)                                                                        \
    (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_PROXY))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_PROXY_CLASS(k)                                                                  \
    (G_TYPE_CHECK_CLASS_TYPE((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_PROXY))

typedef struct _WpaFiW1Wpa_supplicant1InterfaceWPSProxy WpaFiW1Wpa_supplicant1InterfaceWPSProxy;
typedef struct _WpaFiW1Wpa_supplicant1InterfaceWPSProxyClass WpaFiW1Wpa_supplicant1InterfaceWPSProxyClass;
typedef struct _WpaFiW1Wpa_supplicant1InterfaceWPSProxyPrivate WpaFiW1Wpa_supplicant1InterfaceWPSProxyPrivate;

struct _WpaFiW1Wpa_supplicant1InterfaceWPSProxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    WpaFiW1Wpa_supplicant1InterfaceWPSProxyPrivate * priv;
};

struct _WpaFiW1Wpa_supplicant1InterfaceWPSProxyClass
{
    GDBusProxyClass parent_class;
};

GType wpa_fi_w1_wpa_supplicant1_interface_wps_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaFiW1Wpa_supplicant1InterfaceWPSProxy, g_object_unref)
#endif

void wpa_fi_w1_wpa_supplicant1_interface_wps_proxy_new(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                                       const gchar * object_path, GCancellable * cancellable,
                                                       GAsyncReadyCallback callback, gpointer user_data);
WpaFiW1Wpa_supplicant1InterfaceWPS * wpa_fi_w1_wpa_supplicant1_interface_wps_proxy_new_finish(GAsyncResult * res, GError ** error);
WpaFiW1Wpa_supplicant1InterfaceWPS *
wpa_fi_w1_wpa_supplicant1_interface_wps_proxy_new_sync(GDBusConnection * connection, GDBusProxyFlags flags, const gchar * name,
                                                       const gchar * object_path, GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_wps_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                               const gchar * object_path, GCancellable * cancellable,
                                                               GAsyncReadyCallback callback, gpointer user_data);
WpaFiW1Wpa_supplicant1InterfaceWPS * wpa_fi_w1_wpa_supplicant1_interface_wps_proxy_new_for_bus_finish(GAsyncResult * res,
                                                                                                      GError ** error);
WpaFiW1Wpa_supplicant1InterfaceWPS *
wpa_fi_w1_wpa_supplicant1_interface_wps_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                               const gchar * object_path, GCancellable * cancellable,
                                                               GError ** error);

/* ---- */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_SKELETON (wpa_fi_w1_wpa_supplicant1_interface_wps_skeleton_get_type())
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_SKELETON(o)                                                                        \
    (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_SKELETON,                                        \
                                WpaFiW1Wpa_supplicant1InterfaceWPSSkeleton))
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_SKELETON_CLASS(k)                                                                  \
    (G_TYPE_CHECK_CLASS_CAST((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_SKELETON,                                           \
                             WpaFiW1Wpa_supplicant1InterfaceWPSSkeletonClass))
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_SKELETON_GET_CLASS(o)                                                              \
    (G_TYPE_INSTANCE_GET_CLASS((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_SKELETON,                                         \
                               WpaFiW1Wpa_supplicant1InterfaceWPSSkeletonClass))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_SKELETON(o)                                                                     \
    (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_SKELETON))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_SKELETON_CLASS(k)                                                               \
    (G_TYPE_CHECK_CLASS_TYPE((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_WPS_SKELETON))

typedef struct _WpaFiW1Wpa_supplicant1InterfaceWPSSkeleton WpaFiW1Wpa_supplicant1InterfaceWPSSkeleton;
typedef struct _WpaFiW1Wpa_supplicant1InterfaceWPSSkeletonClass WpaFiW1Wpa_supplicant1InterfaceWPSSkeletonClass;
typedef struct _WpaFiW1Wpa_supplicant1InterfaceWPSSkeletonPrivate WpaFiW1Wpa_supplicant1InterfaceWPSSkeletonPrivate;

struct _WpaFiW1Wpa_supplicant1InterfaceWPSSkeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    WpaFiW1Wpa_supplicant1InterfaceWPSSkeletonPrivate * priv;
};

struct _WpaFiW1Wpa_supplicant1InterfaceWPSSkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType wpa_fi_w1_wpa_supplicant1_interface_wps_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaFiW1Wpa_supplicant1InterfaceWPSSkeleton, g_object_unref)
#endif

WpaFiW1Wpa_supplicant1InterfaceWPS * wpa_fi_w1_wpa_supplicant1_interface_wps_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1.Interface.P2PDevice */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE (wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_get_type())
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE(o)                                                                          \
    (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE, WpaFiW1Wpa_supplicant1InterfaceP2PDevice))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE(o)                                                                       \
    (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE))
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_GET_IFACE(o)                                                                \
    (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE,                                       \
                                   WpaFiW1Wpa_supplicant1InterfaceP2PDeviceIface))

struct _WpaFiW1Wpa_supplicant1InterfaceP2PDevice;
typedef struct _WpaFiW1Wpa_supplicant1InterfaceP2PDevice WpaFiW1Wpa_supplicant1InterfaceP2PDevice;
typedef struct _WpaFiW1Wpa_supplicant1InterfaceP2PDeviceIface WpaFiW1Wpa_supplicant1InterfaceP2PDeviceIface;

struct _WpaFiW1Wpa_supplicant1InterfaceP2PDeviceIface
{
    GTypeInterface parent_iface;

    gboolean (*handle_add_persistent_group)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation,
                                            GVariant * arg_args);

    gboolean (*handle_add_service)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation,
                                   GVariant * arg_args);

    gboolean (*handle_cancel)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_connect)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation,
                               GVariant * arg_args);

    gboolean (*handle_delete_service)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation,
                                      GVariant * arg_args);

    gboolean (*handle_disconnect)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_extended_listen)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation,
                                       GVariant * arg_args);

    gboolean (*handle_find)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation,
                            GVariant * arg_args);

    gboolean (*handle_flush)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_flush_service)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_group_add)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation,
                                 GVariant * arg_args);

    gboolean (*handle_invite)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation,
                              GVariant * arg_args);

    gboolean (*handle_listen)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation,
                              gint arg_timeout);

    gboolean (*handle_presence_request)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation,
                                        GVariant * arg_args);

    gboolean (*handle_provision_discovery_request)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                   GDBusMethodInvocation * invocation, const gchar * arg_peer,
                                                   const gchar * arg_config_method);

    gboolean (*handle_reject_peer)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation,
                                   const gchar * arg_peer);

    gboolean (*handle_remove_all_persistent_groups)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                    GDBusMethodInvocation * invocation);

    gboolean (*handle_remove_client)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation,
                                     GVariant * arg_args);

    gboolean (*handle_remove_persistent_group)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                               GDBusMethodInvocation * invocation, const gchar * arg_path);

    gboolean (*handle_service_discovery_cancel_request)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                        GDBusMethodInvocation * invocation, guint64 arg_args);

    gboolean (*handle_service_discovery_external)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                  GDBusMethodInvocation * invocation, gint arg_arg);

    gboolean (*handle_service_discovery_request)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                 GDBusMethodInvocation * invocation, GVariant * arg_args);

    gboolean (*handle_service_discovery_response)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                  GDBusMethodInvocation * invocation, GVariant * arg_args);

    gboolean (*handle_service_update)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation);

    gboolean (*handle_stop_find)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation);

    const gchar * (*get_group)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);

    GVariant * (*get_p2_pdevice_config)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);

    const gchar * (*get_peer_go)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);

    const gchar * const * (*get_peers)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);

    const gchar * const * (*get_persistent_groups)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);

    const gchar * (*get_role)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);

    void (*device_found)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_path);

    void (*device_found_properties)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_path,
                                    GVariant * arg_properties);

    void (*device_lost)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_path);

    void (*find_stopped)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);

    void (*gonegotiation_failure)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GVariant * arg_properties);

    void (*gonegotiation_request)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_path,
                                  guint16 arg_dev_passwd_id, guchar arg_device_go_intent);

    void (*gonegotiation_success)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GVariant * arg_properties);

    void (*group_finished)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GVariant * arg_properties);

    void (*group_formation_failure)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_reason);

    void (*group_started)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GVariant * arg_properties);

    void (*invitation_received)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GVariant * arg_properties);

    void (*invitation_result)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GVariant * arg_invite_result);

    void (*persistent_group_added)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_path,
                                   GVariant * arg_properties);

    void (*persistent_group_removed)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_path);

    void (*provision_discovery_failure)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_peer_object,
                                        gint arg_status);

    void (*provision_discovery_pbcrequest)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_peer_object);

    void (*provision_discovery_pbcresponse)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_peer_object);

    void (*provision_discovery_request_display_pin)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                    const gchar * arg_peer_object, const gchar * arg_pin);

    void (*provision_discovery_request_enter_pin)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_peer_object);

    void (*provision_discovery_response_display_pin)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                     const gchar * arg_peer_object, const gchar * arg_pin);

    void (*provision_discovery_response_enter_pin)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                   const gchar * arg_peer_object);

    void (*service_discovery_request)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GVariant * arg_sd_request);

    void (*service_discovery_response)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GVariant * arg_sd_response);

    void (*wps_failed)(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_name, GVariant * arg_args);
};

GType wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo * wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_interface_info(void);
guint wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_override_properties(GObjectClass * klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_find(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                  GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_stop_find(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                       GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_listen(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                    GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_extended_listen(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                             GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_presence_request(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                              GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_provision_discovery_request(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_connect(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                     GDBusMethodInvocation * invocation,
                                                                     const gchar * generated_pin);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_group_add(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                       GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_cancel(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                    GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_invite(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                    GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_disconnect(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                        GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_reject_peer(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                         GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_remove_client(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                           GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_flush(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                   GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_add_service(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                         GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_delete_service(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                            GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_flush_service(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                           GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_service_discovery_request(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation, guint64 ref);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_service_discovery_response(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_service_discovery_cancel_request(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_service_update(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                            GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_service_discovery_external(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_add_persistent_group(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                                  GDBusMethodInvocation * invocation,
                                                                                  const gchar * path);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_remove_persistent_group(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_complete_remove_all_persistent_groups(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GDBusMethodInvocation * invocation);

/* D-Bus signal emissions functions: */
void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_device_found(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                      const gchar * arg_path);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_device_found_properties(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                                 const gchar * arg_path, GVariant * arg_properties);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_device_lost(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                     const gchar * arg_path);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_find_stopped(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_provision_discovery_request_display_pin(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_peer_object, const gchar * arg_pin);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_provision_discovery_response_display_pin(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_peer_object, const gchar * arg_pin);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_provision_discovery_request_enter_pin(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_peer_object);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_provision_discovery_response_enter_pin(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_peer_object);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_provision_discovery_pbcrequest(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_peer_object);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_provision_discovery_pbcresponse(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_peer_object);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_provision_discovery_failure(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, const gchar * arg_peer_object, gint arg_status);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_group_started(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                       GVariant * arg_properties);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_group_formation_failure(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                                 const gchar * arg_reason);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_gonegotiation_success(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                               GVariant * arg_properties);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_gonegotiation_failure(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                               GVariant * arg_properties);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_gonegotiation_request(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                               const gchar * arg_path, guint16 arg_dev_passwd_id,
                                                                               guchar arg_device_go_intent);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_invitation_result(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                           GVariant * arg_invite_result);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_group_finished(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                        GVariant * arg_properties);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_service_discovery_request(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GVariant * arg_sd_request);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_service_discovery_response(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object, GVariant * arg_sd_response);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_persistent_group_added(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                                const gchar * arg_path, GVariant * arg_properties);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_persistent_group_removed(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                                  const gchar * arg_path);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_wps_failed(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                    const gchar * arg_name, GVariant * arg_args);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_emit_invitation_received(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                             GVariant * arg_properties);

/* D-Bus method calls: */
void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_find(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, GVariant * arg_args,
                                                              GCancellable * cancellable, GAsyncReadyCallback callback,
                                                              gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_find_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                         GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_find_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                       GVariant * arg_args, GCancellable * cancellable,
                                                                       GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_stop_find(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                   GCancellable * cancellable, GAsyncReadyCallback callback,
                                                                   gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_stop_find_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                              GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_stop_find_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                            GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_listen(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, gint arg_timeout,
                                                                GCancellable * cancellable, GAsyncReadyCallback callback,
                                                                gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_listen_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                           GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_listen_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                         gint arg_timeout, GCancellable * cancellable,
                                                                         GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_extended_listen(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                         GVariant * arg_args, GCancellable * cancellable,
                                                                         GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_extended_listen_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                           GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_extended_listen_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                                  GVariant * arg_args, GCancellable * cancellable,
                                                                                  GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_presence_request(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                          GVariant * arg_args, GCancellable * cancellable,
                                                                          GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_presence_request_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                            GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_presence_request_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                                   GVariant * arg_args, GCancellable * cancellable,
                                                                                   GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_provision_discovery_request(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, const gchar * arg_peer, const gchar * arg_config_method,
    GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_provision_discovery_request_finish(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_provision_discovery_request_sync(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, const gchar * arg_peer, const gchar * arg_config_method,
    GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_connect(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                 GVariant * arg_args, GCancellable * cancellable,
                                                                 GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_connect_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                            gchar ** out_generated_pin, GAsyncResult * res,
                                                                            GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_connect_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                          GVariant * arg_args, gchar ** out_generated_pin,
                                                                          GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_group_add(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                   GVariant * arg_args, GCancellable * cancellable,
                                                                   GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_group_add_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                              GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_group_add_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                            GVariant * arg_args, GCancellable * cancellable,
                                                                            GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_cancel(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                GCancellable * cancellable, GAsyncReadyCallback callback,
                                                                gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_cancel_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                           GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_cancel_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                         GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_invite(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                GVariant * arg_args, GCancellable * cancellable,
                                                                GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_invite_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                           GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_invite_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                         GVariant * arg_args, GCancellable * cancellable,
                                                                         GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_disconnect(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                    GCancellable * cancellable, GAsyncReadyCallback callback,
                                                                    gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_disconnect_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                               GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_disconnect_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                             GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_reject_peer(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                     const gchar * arg_peer, GCancellable * cancellable,
                                                                     GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_reject_peer_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                                GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_reject_peer_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                              const gchar * arg_peer, GCancellable * cancellable,
                                                                              GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_remove_client(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                       GVariant * arg_args, GCancellable * cancellable,
                                                                       GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_remove_client_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                                  GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_remove_client_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                                GVariant * arg_args, GCancellable * cancellable,
                                                                                GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_flush(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                               GCancellable * cancellable, GAsyncReadyCallback callback,
                                                               gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_flush_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                          GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_flush_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                        GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_add_service(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                     GVariant * arg_args, GCancellable * cancellable,
                                                                     GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_add_service_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                                GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_add_service_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                              GVariant * arg_args, GCancellable * cancellable,
                                                                              GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_delete_service(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                        GVariant * arg_args, GCancellable * cancellable,
                                                                        GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_delete_service_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                                   GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_delete_service_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                                 GVariant * arg_args, GCancellable * cancellable,
                                                                                 GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_flush_service(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                       GCancellable * cancellable, GAsyncReadyCallback callback,
                                                                       gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_flush_service_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                                  GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_flush_service_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                                GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_service_discovery_request(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                                   GVariant * arg_args, GCancellable * cancellable,
                                                                                   GAsyncReadyCallback callback,
                                                                                   gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_service_discovery_request_finish(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, guint64 * out_ref, GAsyncResult * res, GError ** error);

gboolean
wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_service_discovery_request_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                                   GVariant * arg_args, guint64 * out_ref,
                                                                                   GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_service_discovery_response(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, GVariant * arg_args, GCancellable * cancellable, GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_service_discovery_response_finish(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_service_discovery_response_sync(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, GVariant * arg_args, GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_service_discovery_cancel_request(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, guint64 arg_args, GCancellable * cancellable, GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_service_discovery_cancel_request_finish(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_service_discovery_cancel_request_sync(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, guint64 arg_args, GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_service_update(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                        GCancellable * cancellable, GAsyncReadyCallback callback,
                                                                        gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_service_update_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                                   GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_service_update_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                                 GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_service_discovery_external(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, gint arg_arg, GCancellable * cancellable, GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_service_discovery_external_finish(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_service_discovery_external_sync(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, gint arg_arg, GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_add_persistent_group(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                              GVariant * arg_args, GCancellable * cancellable,
                                                                              GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_add_persistent_group_finish(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, gchar ** out_path, GAsyncResult * res, GError ** error);

gboolean
wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_add_persistent_group_sync(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                              GVariant * arg_args, gchar ** out_path,
                                                                              GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_remove_persistent_group(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                                 const gchar * arg_path, GCancellable * cancellable,
                                                                                 GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_remove_persistent_group_finish(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy,
                                                                                   GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_remove_persistent_group_sync(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, const gchar * arg_path, GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_remove_all_persistent_groups(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_remove_all_persistent_groups_finish(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, GAsyncResult * res, GError ** error);

gboolean wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_call_remove_all_persistent_groups_sync(
    WpaFiW1Wpa_supplicant1InterfaceP2PDevice * proxy, GCancellable * cancellable, GError ** error);

/* D-Bus property accessors: */
GVariant * wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_get_p2_pdevice_config(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);
GVariant * wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_dup_p2_pdevice_config(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);
void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_set_p2_pdevice_config(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                          GVariant * value);

const gchar * const * wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_get_peers(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);
gchar ** wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_dup_peers(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);
void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_set_peers(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                              const gchar * const * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_get_role(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_dup_role(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);
void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_set_role(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                             const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_get_group(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_dup_group(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);
void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_set_group(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                              const gchar * value);

const gchar * wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_get_peer_go(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);
gchar * wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_dup_peer_go(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);
void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_set_peer_go(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                const gchar * value);

const gchar * const *
wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_get_persistent_groups(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);
gchar ** wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_dup_persistent_groups(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object);
void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_set_persistent_groups(WpaFiW1Wpa_supplicant1InterfaceP2PDevice * object,
                                                                          const gchar * const * value);

/* ---- */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_PROXY (wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_proxy_get_type())
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_PROXY(o)                                                                    \
    (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_PROXY,                                    \
                                WpaFiW1Wpa_supplicant1InterfaceP2PDeviceProxy))
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_PROXY_CLASS(k)                                                              \
    (G_TYPE_CHECK_CLASS_CAST((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_PROXY,                                       \
                             WpaFiW1Wpa_supplicant1InterfaceP2PDeviceProxyClass))
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_PROXY_GET_CLASS(o)                                                          \
    (G_TYPE_INSTANCE_GET_CLASS((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_PROXY,                                     \
                               WpaFiW1Wpa_supplicant1InterfaceP2PDeviceProxyClass))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_PROXY(o)                                                                 \
    (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_PROXY))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_PROXY_CLASS(k)                                                           \
    (G_TYPE_CHECK_CLASS_TYPE((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_PROXY))

typedef struct _WpaFiW1Wpa_supplicant1InterfaceP2PDeviceProxy WpaFiW1Wpa_supplicant1InterfaceP2PDeviceProxy;
typedef struct _WpaFiW1Wpa_supplicant1InterfaceP2PDeviceProxyClass WpaFiW1Wpa_supplicant1InterfaceP2PDeviceProxyClass;
typedef struct _WpaFiW1Wpa_supplicant1InterfaceP2PDeviceProxyPrivate WpaFiW1Wpa_supplicant1InterfaceP2PDeviceProxyPrivate;

struct _WpaFiW1Wpa_supplicant1InterfaceP2PDeviceProxy
{
    /*< private >*/
    GDBusProxy parent_instance;
    WpaFiW1Wpa_supplicant1InterfaceP2PDeviceProxyPrivate * priv;
};

struct _WpaFiW1Wpa_supplicant1InterfaceP2PDeviceProxyClass
{
    GDBusProxyClass parent_class;
};

GType wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaFiW1Wpa_supplicant1InterfaceP2PDeviceProxy, g_object_unref)
#endif

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_proxy_new(GDBusConnection * connection, GDBusProxyFlags flags,
                                                              const gchar * name, const gchar * object_path,
                                                              GCancellable * cancellable, GAsyncReadyCallback callback,
                                                              gpointer user_data);
WpaFiW1Wpa_supplicant1InterfaceP2PDevice * wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_proxy_new_finish(GAsyncResult * res,
                                                                                                           GError ** error);
WpaFiW1Wpa_supplicant1InterfaceP2PDevice *
wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_proxy_new_sync(GDBusConnection * connection, GDBusProxyFlags flags,
                                                              const gchar * name, const gchar * object_path,
                                                              GCancellable * cancellable, GError ** error);

void wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                                      const gchar * object_path, GCancellable * cancellable,
                                                                      GAsyncReadyCallback callback, gpointer user_data);
WpaFiW1Wpa_supplicant1InterfaceP2PDevice *
wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_proxy_new_for_bus_finish(GAsyncResult * res, GError ** error);
WpaFiW1Wpa_supplicant1InterfaceP2PDevice *
wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, const gchar * name,
                                                                      const gchar * object_path, GCancellable * cancellable,
                                                                      GError ** error);

/* ---- */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_SKELETON                                                               \
    (wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_skeleton_get_type())
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_SKELETON(o)                                                                 \
    (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_SKELETON,                                 \
                                WpaFiW1Wpa_supplicant1InterfaceP2PDeviceSkeleton))
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_SKELETON_CLASS(k)                                                           \
    (G_TYPE_CHECK_CLASS_CAST((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_SKELETON,                                    \
                             WpaFiW1Wpa_supplicant1InterfaceP2PDeviceSkeletonClass))
#define WPA_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_SKELETON_GET_CLASS(o)                                                       \
    (G_TYPE_INSTANCE_GET_CLASS((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_SKELETON,                                  \
                               WpaFiW1Wpa_supplicant1InterfaceP2PDeviceSkeletonClass))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_SKELETON(o)                                                              \
    (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_SKELETON))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_SKELETON_CLASS(k)                                                        \
    (G_TYPE_CHECK_CLASS_TYPE((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_P2_PDEVICE_SKELETON))

typedef struct _WpaFiW1Wpa_supplicant1InterfaceP2PDeviceSkeleton WpaFiW1Wpa_supplicant1InterfaceP2PDeviceSkeleton;
typedef struct _WpaFiW1Wpa_supplicant1InterfaceP2PDeviceSkeletonClass WpaFiW1Wpa_supplicant1InterfaceP2PDeviceSkeletonClass;
typedef struct _WpaFiW1Wpa_supplicant1InterfaceP2PDeviceSkeletonPrivate WpaFiW1Wpa_supplicant1InterfaceP2PDeviceSkeletonPrivate;

struct _WpaFiW1Wpa_supplicant1InterfaceP2PDeviceSkeleton
{
    /*< private >*/
    GDBusInterfaceSkeleton parent_instance;
    WpaFiW1Wpa_supplicant1InterfaceP2PDeviceSkeletonPrivate * priv;
};

struct _WpaFiW1Wpa_supplicant1InterfaceP2PDeviceSkeletonClass
{
    GDBusInterfaceSkeletonClass parent_class;
};

GType wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaFiW1Wpa_supplicant1InterfaceP2PDeviceSkeleton, g_object_unref)
#endif

WpaFiW1Wpa_supplicant1InterfaceP2PDevice * wpa_fi_w1_wpa_supplicant1_interface_p2_pdevice_skeleton_new(void);

G_END_DECLS

#endif /* __DBUSWPAINTERFACE_H__ */
