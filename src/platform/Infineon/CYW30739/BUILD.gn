# Copyright (c) 2021 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/cyw30739_sdk.gni")

import("${chip_root}/src/platform/device.gni")

assert(chip_device_platform == "cyw30739")

if (chip_enable_openthread) {
  import("//build_overrides/openthread.gni")
}

static_library("CYW30739") {
  sources = [
    "../../SingletonConfigurationManager.cpp",
    "BLEManagerImpl.h",
    "BlePlatformConfig.h",
    "CHIPDevicePlatformConfig.h",
    "CHIPDevicePlatformEvent.h",
    "CHIPPlatformConfig.h",
    "ConfigurationManagerImpl.h",
    "ConnectivityManagerImpl.cpp",
    "ConnectivityManagerImpl.h",
    "FactoryDataProvider.cpp",
    "FactoryDataProvider.h",
    "InetPlatformConfig.h",
    "KeyValueStoreManagerImpl.cpp",
    "KeyValueStoreManagerImpl.h",
    "OTAImageProcessorImpl.h",
    "PlatformManagerImpl.h",
    "SystemPlatformConfig.h",
    "cyw30739-chip-mbedtls-config.h",
  ]

  deps = [
    "${chip_root}/src/crypto",
    "${matter_wpan_sdk_build_root}:wpan_sdk",
  ]

  public = [
    "${chip_root}/src/credentials/DeviceAttestationCredsProvider.h",
    "CYW30739Config.h",
    "DiagnosticDataProviderImpl.h",
    "EventFlags.h",
    "FactoryDataProvider.h",
    "OTAImageProcessorImpl.h",
    "cycfg_gatt_db.h",
  ]

  public_deps = [ "${chip_root}/src/platform:platform_base" ]

  if (chip_enable_openthread) {
    sources += [
      "../../OpenThread/OpenThreadUtils.cpp",
      "ThreadStackManagerImpl.h",
    ]

    deps += [
      "${chip_root}/third_party/openthread/platforms:libopenthread-platform",
    ]
    if (chip_openthread_ftd) {
      deps += [ "${chip_root}/third_party/openthread/repo:libopenthread-ftd" ]
    } else {
      deps += [ "${chip_root}/third_party/openthread/repo:libopenthread-mtd" ]
    }

    if (chip_mdns == "platform") {
      sources += [
        "../../OpenThread/DnssdImpl.cpp",
        "../../OpenThread/OpenThreadDnssdImpl.cpp",
        "../../OpenThread/OpenThreadDnssdImpl.h",
      ]

      deps += [ "${chip_root}/src/lib/dnssd:platform_header" ]
    }
  }
}
