# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/nlassert.gni")
import("//build_overrides/nxp_sdk.gni")
import("${chip_root}/build/chip/buildconfig_header.gni")
import("${chip_root}/src/crypto/crypto.gni")
import("${chip_root}/src/platform/device.gni")

#allows to get common NXP SDK gn options
import("${nxp_sdk_build_root}/nxp_sdk.gni")
if (!nxp_external_sdk) {
  import("${chip_root}/src/platform/nxp/crypto/se05x/args.gni")
}

if (chip_crypto == "platform") {
  import("//build_overrides/mbedtls.gni")
}

static_library("nxp_crypto_lib") {
  sources = [
    "${chip_root}/src/platform/nxp/crypto/se05x/CHIPCryptoPALHost.cpp",
    "${chip_root}/src/platform/nxp/crypto/se05x/CHIPCryptoPALHsm_se05x_hkdf.cpp",
    "${chip_root}/src/platform/nxp/crypto/se05x/CHIPCryptoPALHsm_se05x_hmac.cpp",
    "${chip_root}/src/platform/nxp/crypto/se05x/CHIPCryptoPALHsm_se05x_p256.cpp",
    "${chip_root}/src/platform/nxp/crypto/se05x/CHIPCryptoPALHsm_se05x_pbkdf.cpp",
    "${chip_root}/src/platform/nxp/crypto/se05x/CHIPCryptoPALHsm_se05x_rng.cpp",
    "${chip_root}/src/platform/nxp/crypto/se05x/CHIPCryptoPALHsm_se05x_utils.cpp",
    "${chip_root}/src/platform/nxp/crypto/se05x/CHIPCryptoPAL_HostFallBack.cpp",
    "${chip_root}/src/platform/nxp/crypto/se05x/PersistentStorageOperationalKeystore_se05x.cpp",
  ]

  if (nxp_platform == "rt/rw61x") {
    sources += [
      "${chip_root}/examples/platform/nxp/se05x/DeviceAttestationSe05xCredsExample.cpp",
      "${chip_root}/src/credentials/examples/ExampleDACs.h",
      "${chip_root}/src/credentials/examples/ExamplePAI.h",
    ]
  }

  if (chip_device_platform == "linux") {
    deps = [ "${chip_root}/${nxp_crypto_mw_root}:se05x" ]
  }

  defines = []

  # In case nxp_external_sdk is defined assuming that se05x option would be set by KCONFIG.
  if (!nxp_external_sdk) {
    if (chip_se05x_spake_verifier) {
      defines += [ "ENABLE_SE05X_SPAKE_VERIFIER=1" ]
    }

    if (chip_se05x_spake_prover) {
      defines += [ "ENABLE_SE05X_SPAKE_PROVER=1" ]
    }

    if (chip_se05x_rnd_gen) {
      defines += [ "ENABLE_SE05X_RND_GEN=1" ]
    }

    if (chip_se05x_gen_ec_key) {
      defines += [ "ENABLE_SE05X_GENERATE_EC_KEY=1" ]
    }

    if (chip_se05x_ecdsa_verify) {
      defines += [ "ENABLE_SE05X_ECDSA_VERIFY=1" ]
    }

    if (chip_se05x_pbkdf2_sha256) {
      defines += [ "ENABLE_SE05X_PBKDF2_SHA256=1" ]
    }

    if (chip_se05x_hkdf_sha256) {
      defines += [ "ENABLE_SE05X_HKDF_SHA256=1" ]
    }

    if (chip_se05x_hmac_sha256) {
      defines += [ "ENABLE_SE05X_HMAC_SHA256=1" ]
    }

    if (chip_se05x_device_attestation) {
      defines += [ "ENABLE_SE05X_DEVICE_ATTESTATION=1" ]
    }
  }

  external_mbedtls = current_os == "zephyr" || nxp_external_sdk

  public_deps = [ "${chip_root}/src/crypto" ]

  if (!external_mbedtls) {
    public_deps += [ "${mbedtls_root}:mbedtls" ]
  }

  include_dirs = [
    ".",
    "${chip_root}/src/crypto",
    "${chip_root}/src/platform/nxp/crypto/se05x",
  ]
}
