# Copyright (c) 2021 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/k32w0_sdk.gni")

import("${chip_root}/src/platform/device.gni")
import("${k32w0_sdk_build_root}/k32w0_sdk.gni")

assert(chip_device_platform == "k32w0")

if (chip_enable_openthread) {
  import("//build_overrides/openthread.gni")
}

static_library("k32w0") {
  sources = [
    "../../../SingletonConfigurationManager.cpp",
    "../common/RamStorage.cpp",
    "../common/RamStorageKey.cpp",
    "BLEManagerImpl.cpp",
    "BLEManagerImpl.h",
    "CHIPDevicePlatformConfig.h",
    "CHIPDevicePlatformEvent.h",
    "ConfigurationManagerImpl.cpp",
    "ConfigurationManagerImpl.h",
    "ConnectivityManagerImpl.cpp",
    "ConnectivityManagerImpl.h",
    "DefaultTestEventTriggerDelegate.cpp",
    "DefaultTestEventTriggerDelegate.h",
    "DiagnosticDataProviderImpl.cpp",
    "DiagnosticDataProviderImpl.h",
    "K32W0Config.cpp",
    "K32W0Config.h",
    "KeyValueStoreManagerImpl.cpp",
    "KeyValueStoreManagerImpl.h",
    "Logging.cpp",
    "NFCManagerImpl.cpp",
    "NFCManagerImpl.h",
    "PlatformManagerImpl.cpp",
    "PlatformManagerImpl.h",
    "SystemTimeSupport.cpp",
    "ble_function_mux.c",
  ]

  public = [
    "${chip_root}/src/credentials/DeviceAttestationCredsProvider.h",
    "${chip_root}/src/credentials/examples/DeviceAttestationCredsExample.h",
    "${chip_root}/src/credentials/examples/ExampleDACs.h",
    "${chip_root}/src/credentials/examples/ExamplePAI.h",
    "../common/RamStorage.h",
    "../common/RamStorageKey.h",
  ]

  if (chip_with_factory_data == 1) {
    sources += [
      "K32W0FactoryDataProvider.cpp",
      "K32W0FactoryDataProvider.h",
    ]
    public += [
      "${chip_root}/src/credentials/CHIPCert.h",
      "${chip_root}/src/credentials/CertificationDeclaration.h",
    ]
  }

  if (chip_with_low_power != 0) {
    sources += [ "LowPowerHooks.cpp" ]
  }

  if (chip_enable_ota_requestor) {
    public += [ "../common/OTAImageProcessorImpl.h" ]

    sources += [
      "../common/OTAImageProcessorImpl.cpp",
      "../common/OTAImageProcessorImpl.h",
      "../common/OTATlvProcessor.cpp",
      "../common/OTATlvProcessor.h",
    ]

    if (chip_enable_ota_default_processors == 1) {
      sources += [
        "OTAApplicationProcessor.cpp",
        "OTAApplicationProcessor.h",
        "OTABootloaderProcessor.cpp",
        "OTABootloaderProcessor.h",
        "OTAHooks.cpp",
      ]

      if (chip_with_factory_data == 1) {
        sources += [
          "OTAFactoryDataProcessor.cpp",
          "OTAFactoryDataProcessor.h",
        ]
      }
    }
  }

  deps = []

  public_deps = [ "${chip_root}/src/platform:platform_base" ]

  if (chip_crypto == "platform") {
    if (chip_crypto_flavor == "tinycrypt") {
      sources += [ "${chip_root}/src/platform/nxp/common/crypto/CHIPCryptoPALTinyCrypt.cpp" ]

      public_deps += [ "${mbedtls_root}:mbedtls" ]
    }

    if (chip_crypto_flavor == "NXP-Ultrafast-P256") {
      sources += [ "${chip_root}/src/platform/nxp/k32w/k32w0/crypto/CHIPCryptoPALNXPUltrafastP256.cpp" ]

      public_deps += [
        "${chip_root}/third_party/nxp/k32w0_sdk:k32w0_sdk",
        "${mbedtls_root}:mbedtls",
      ]
    }
  }

  if (chip_enable_openthread) {
    sources += [
      "../../../OpenThread/OpenThreadUtils.cpp",
      "ThreadStackManagerImpl.cpp",
      "ThreadStackManagerImpl.h",
    ]

    if (chip_mdns == "platform") {
      sources += [ "../../../OpenThread/DnssdImpl.cpp" ]
      deps += [ "${chip_root}/src/lib/dnssd:platform_header" ]
    }
  }

  public_deps += [ "${chip_root}/src/crypto" ]

  public_configs =
      [ "${chip_root}/src/lib/address_resolve:default_address_resolve_config" ]
}
