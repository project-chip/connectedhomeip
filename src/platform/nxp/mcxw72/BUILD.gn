# Copyright (c) 2021 Project CHIP Authors
# Copyright 2023 NXP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")
import("//build_overrides/nxp_sdk.gni")
import("//build_overrides/openthread.gni")

import("${chip_root}/src/crypto/crypto.gni")
import("${chip_root}/src/platform/device.gni")
import("${chip_root}/src/platform/nxp/common/ota/ota.gni")

# Include to define nxp_crypto_impl
import("${chip_root}/src/platform/nxp/crypto/nxp_crypto.gni")

# If external SDK is used, do not import ${nxp_sdk_name}.gni
if (!nxp_external_sdk) {
  import("${nxp_sdk_build_root}/${nxp_sdk_name}/${nxp_sdk_name}.gni")
}

import("${nxp_sdk_build_root}/nxp_sdk.gni")

assert(chip_device_platform == "nxp")
assert(nxp_platform == "mcxw72")

assert(!nxp_use_low_power || (nxp_use_low_power && !nxp_enable_ot_cli),
       "Please disable low power if openthread CLI is needed!")

source_set("nxp_factory_data") {
}

source_set("nxp_ota") {
  public = [ "../common/ota/OTAImageProcessorImpl.h" ]

  sources = ota_sources

  deps = [
    ":nxp_platform",
    "${chip_root}/src/platform:platform",
  ]
}

config("nxp_platform_config") {
  include_dirs = [
    ".",
    "../common",
    "../common/ble",
    "../common/crypto",
    "../common/factory_data/legacy",
    "../common/ota",
  ]

  # Needed for sources that use mbedtls
  if (nxp_external_sdk) {
    include_dirs += [
      "${nxp_sdk_root}/middleware/mbedtls/include",
      "${nxp_sdk_root}/middleware/mbedtls/port/sssapi",
    ]
  }

  defines = [ "EXTERNAL_BLEMANAGERIMPL_HEADER=\"platform/nxp/${nxp_platform}/BLEManagerImpl.h\"" ]
}

static_library("nxp_platform") {
  output_name = "libCHIP_NXP_Port_${nxp_platform}"
  cflags = [
    "-Wno-conversion",
    "-Wno-sign-compare",
  ]
  deps = []
  defines = [
    "NXP_DEVICE_MCXW7X=1",
    "NXP_USE_MML=1",
  ]

  sources = [
    "../../FreeRTOS/SystemTimeSupport.cpp",
    "../../SingletonConfigurationManager.cpp",
    "../common/CHIPDevicePlatformEvent.h",
    "../common/ConfigurationManagerImpl.cpp",
    "../common/ConfigurationManagerImpl.h",
    "../common/ConnectivityManagerImpl.cpp",
    "../common/ConnectivityManagerImpl.h",
    "../common/DiagnosticDataProviderImpl.cpp",
    "../common/DiagnosticDataProviderImpl.h",
    "../common/KeyValueStoreManagerImpl.cpp",
    "../common/KeyValueStoreManagerImpl.h",
    "../common/NXPConfig.h",
    "../common/NXPConfigNVS.cpp",
    "../common/NetworkProvisioningServerImpl.h",
    "../common/PlatformManagerImpl.h",
    "../common/SoftwareUpdateManagerImpl.h",
    "CHIPDevicePlatformConfig.h",
    "PlatformManagerImpl.cpp",
  ]
  deps = [ "${chip_root}/src/app:app_config" ]

  if (chip_crypto == "platform") {
    sources += [
      "../common/crypto/PersistentStorageOpKeystoreBase.cpp",
      "../common/crypto/PersistentStorageOpKeystoreBase.h",
      "../common/crypto/S200/CHIPCryptoPalS200.cpp",
      "../common/crypto/S200/PersistentStorageOpKeystoreS200.cpp",
      "../common/crypto/S200/PersistentStorageOpKeystoreS200.h",
    ]

    # TODO: Why are these definitions and include dirs required here and not
    # inherited from the dependencies?
    defines += [
      "MBEDTLS_CONFIG_FILE=<sssapi_mbedtls_config.h>",
      "MBEDTLS_USER_CONFIG_FILE=<nxp_matter_mbedtls_config.h>",
    ]

    include_dirs = [ "${nxp_sdk_build_root}/mbedtls/config" ]
  }

  if (chip_enable_ble) {
    sources += [
      "../common/ble/BLEManagerCommon.cpp",
      "../common/ble/BLEManagerCommon.h",
      "../common/ble/BLEManagerImpl.cpp",
    ]
  }

  # When the app is built using cmake, we must ensure the OTA platform files are also compiled.
  # When the app is built using gn, the app selects the nxp_ota target through its build file.
  if (nxp_external_sdk && chip_enable_ota_requestor) {
    sources += ota_sources
  }

  public_deps = [ "${chip_root}/src/platform:platform_base" ]

  if (nxp_use_low_power) {
    sources += [ "../mcxw71/LowPowerHooks.cpp" ]
  }

  deps += [
    "${chip_root}/src/lib/dnssd:constants",
    "${chip_root}/src/platform/logging:headers",
  ]

  if (chip_enable_openthread) {
    sources += [
      "../../OpenThread/OpenThreadUtils.cpp",
      "../common/ThreadStackManagerImpl.cpp",
      "../common/ThreadStackManagerImpl.h",
    ]

    deps += [ "${chip_root}/third_party/openthread:openthread" ]
    public_deps += [ "${chip_root}/third_party/openthread:openthread-platform" ]

    if (nxp_enable_matter_cli) {
      public_deps += [ "${chip_root}/third_party/openthread:openthread_cli" ]
    }

    if (chip_mdns == "platform") {
      sources += [
        "../../OpenThread/DnssdImpl.cpp",
        "../../OpenThread/OpenThreadDnssdImpl.cpp",
        "../../OpenThread/OpenThreadDnssdImpl.h",
      ]
      deps += [ "${chip_root}/src/lib/dnssd:platform_header" ]
    }
  }

  if (nxp_use_factory_data) {
    sources += [
      "../common/factory_data/legacy/FactoryDataDriver.cpp",
      "../common/factory_data/legacy/FactoryDataDriverImpl.cpp",
      "../common/factory_data/legacy/FactoryDataProvider.cpp",
      "../common/factory_data/legacy/FactoryDataProviderImpl.cpp",
    ]

    defines += [ "PLATFORM_FACTORY_DATA_PROVIDER_IMPL_HEADER=\"platform/nxp/common/factory_data/legacy/FactoryDataProviderImpl.h\"" ]
  }

  deps += [ "${nxp_sdk_build_root}:nxp_sdk" ]

  public_deps += [
    "${chip_root}/examples/platform/nxp/mcxw71/app/support:freertos_memory_utils",
    "${chip_root}/src/credentials:credentials_header",
    "${chip_root}/src/crypto",
    "${chip_root}/src/platform:syscalls_stub",
  ]

  public_configs = [ ":nxp_platform_config" ]
}
