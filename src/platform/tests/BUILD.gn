# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/nlunit_test.gni")

import("${chip_root}/src/platform/device.gni")

if (chip_device_platform != "none") {
  import("${chip_root}/build/chip/chip_test_suite.gni")

  chip_test_suite("tests") {
    output_name = "libPlatformTests"

    sources = [
      "TestConfigurationMgr.cpp",
      "TestConfigurationMgr.h",
      "TestPlatformMgr.cpp",
      "TestPlatformMgr.h",
      "TestPlatformTime.cpp",
      "TestPlatformTime.h",
    ]

    public_deps = [
      "${chip_root}/src/lib/support",
      "${chip_root}/src/platform",
      "${chip_root}/src/system",
      "${nlunit_test_root}:nlunit-test",
    ]

    tests = [ "TestPlatformMgr" ]

    # These tests appear to be broken on Mac.
    if (current_os != "mac") {
      tests += [
        "TestConfigurationMgr",
        "TestPlatformTime",
      ]
    }

    if (chip_enable_openthread) {
      sources += [
        "TestThreadStackMgr.cpp",
        "TestThreadStackMgr.h",
      ]
      # FIXME: TestThreadStackMgr requires ot-br-posix daemon to be running
      # tests += [ "TestThreadStackMgr" ]
    }

    if (chip_enable_ble) {
      sources += [
        "TestCHIPoBLEStackMgr.cpp",
        "TestCHIPoBLEStackMgr.h",
        "TestCHIPoBLEStackMgrDriver.cpp",
      ]

      # FIXME: TestCHIPoBLEStackMgr requires bluetoothd daemon to be running
      tests += [ "TestCHIPoBLEStackMgr" ]
    }
  }
} else {
  import("${chip_root}/build/chip/chip_test_group.gni")
  chip_test_group("tests") {
    deps = []
  }
}
