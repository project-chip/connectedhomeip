# See Project CHIP LICENSE file for licensing information.

import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")
import("//build_overrides/pigweed.gni")

import("${chip_root}/src/platform/device.gni")

config("includes") {
  include_dirs = [ "include" ]
}

if (chip_enable_openthread) {
  import("//build_overrides/openthread.gni")

  if (chip_device_platform == "linux" || chip_device_platform == "Darwin") {
    import("//build_overrides/ot_br_posix.gni")
  }
}

simple_log_platforms = [
  "cc13x2_26x2",
  "darwin",
  "efr32",
  "esp32",
  "k32w",
  "linux",
  "nrfconnect",
  "qpg6100",
]

foreach(platform, simple_log_platforms) {
  if (chip_device_platform == platform) {
    static_library(platform) {
      sources = [ "impl/" + platform + "/Logging.cpp" ]

      deps = [
        "${chip_root}/src/lib/core:chip_config_header",
        "${chip_root}/src/platform:platform_buildconfig",
      ]

      public_configs = [ ":includes" ]

      if (chip_enable_openthread) {
        defines = [ "CHIP_ENABLE_OPENTHREAD=1" ]

        if (platform == "cc13x2_26x2") {
          deps += [ "${openthread_root}:libopenthread-mtd" ]
        } else if (platform == "efr32") {
          deps += [ "${openthread_root}:libopenthread-ftd" ]
        } else if (platform == "k32w") {
          deps += [ "${openthread_root}:libopenthread-ftd" ]
        } else if (platform == "qpg6100") {
          deps += [ "${openthread_root}:libopenthread-ftd" ]
        }
      }
    }
  }
}

if (current_os == "android") {
  static_library("android") {
    sources = [ "impl/android/Logging.cpp" ]
    deps = [
      "${chip_root}/src/lib/core:chip_config_header",
      "${chip_root}/src/platform:platform_buildconfig",
    ]

    libs = [ "log" ]

    public_configs = [ ":includes" ]
  }
}

static_library("stdio") {
  sources = [ "impl/stdio/Logging.cpp" ]

  deps = [
    "${chip_root}/src/lib/core:chip_config_header",
    "${chip_root}/src/platform:platform_buildconfig",
  ]

  public_configs = [ ":includes" ]
}
