'''
/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
'''

# This file contains generated struct, enum, command definition.
# Users are not expected to import this file, instead, users can use import chip.clusters, which will import all symbols from this file and can get a readable, pretty naming like clusters.OnOff.commands.OnCommand

from dataclasses import dataclass
import typing
from enum import IntEnum
from chip import ChipUtility

from .ClusterObjects import ClusterObject, ClusterObjectDescriptor, ClusterObjectFieldDescriptor, ClusterCommand


@dataclass
class PowerConfiguration:
    id: typing.ClassVar[int] = 0x0001


@dataclass
class DeviceTemperatureConfiguration:
    id: typing.ClassVar[int] = 0x0002


@dataclass
class Identify:
    id: typing.ClassVar[int] = 0x0003

    class Enums:
        class IdentifyEffectIdentifier(IntEnum):
            kBlink = 0x00
            kBreathe = 0x01
            kOkay = 0x02
            kChannelChange = 0x0B
            kFinishEffect = 0xFE
            kStopEffect = 0xFF

        class IdentifyEffectVariant(IntEnum):
            kDefault = 0x00

        class IdentifyIdentifyType(IntEnum):
            kNone = 0x00
            kVisibleLight = 0x01
            kVisibleLED = 0x02
            kAudibleBeep = 0x03
            kDisplay = 0x04
            kActuator = 0x05

    class Commands:
        @dataclass
        class Identify(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0003
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="IdentifyTime", Tag=0, Type=int),
                    ])

            IdentifyTime: 'int' = None

        @dataclass
        class IdentifyQueryResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0003
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Timeout", Tag=0, Type=int),
                    ])

            Timeout: 'int' = None

        @dataclass
        class IdentifyQuery(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0003
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class TriggerEffect(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0003
            command_id: typing.ClassVar[int] = 0x0040

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="EffectIdentifier", Tag=0, Type=Identify.Enums.IdentifyEffectIdentifier),
                        ClusterObjectFieldDescriptor(
                            Label="EffectVariant", Tag=1, Type=Identify.Enums.IdentifyEffectVariant),
                    ])

            EffectIdentifier: 'Identify.Enums.IdentifyEffectIdentifier' = None
            EffectVariant: 'Identify.Enums.IdentifyEffectVariant' = None


@dataclass
class Groups:
    id: typing.ClassVar[int] = 0x0004

    class Commands:
        @dataclass
        class AddGroup(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0004
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupName", Tag=1, Type=str),
                    ])

            GroupId: 'int' = None
            GroupName: 'str' = None

        @dataclass
        class AddGroupResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0004
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=1, Type=int),
                    ])

            Status: 'int' = None
            GroupId: 'int' = None

        @dataclass
        class ViewGroup(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0004
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=0, Type=int),
                    ])

            GroupId: 'int' = None

        @dataclass
        class ViewGroupResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0004
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupName", Tag=2, Type=str),
                    ])

            Status: 'int' = None
            GroupId: 'int' = None
            GroupName: 'str' = None

        @dataclass
        class GetGroupMembership(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0004
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="GroupCount", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupList", Tag=1, Type=int, IsArray=True),
                    ])

            GroupCount: 'int' = None
            GroupList: typing.List['int'] = None

        @dataclass
        class GetGroupMembershipResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0004
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Capacity", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupCount", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupList", Tag=2, Type=int, IsArray=True),
                    ])

            Capacity: 'int' = None
            GroupCount: 'int' = None
            GroupList: typing.List['int'] = None

        @dataclass
        class RemoveGroup(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0004
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=0, Type=int),
                    ])

            GroupId: 'int' = None

        @dataclass
        class RemoveGroupResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0004
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=1, Type=int),
                    ])

            Status: 'int' = None
            GroupId: 'int' = None

        @dataclass
        class RemoveAllGroups(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0004
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class AddGroupIfIdentifying(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0004
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupName", Tag=1, Type=str),
                    ])

            GroupId: 'int' = None
            GroupName: 'str' = None


@dataclass
class Scenes:
    id: typing.ClassVar[int] = 0x0005

    class Structs:
        @dataclass
        class SceneExtensionFieldSet(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ClusterId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Length", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Value", Tag=2, Type=int),
                    ])

            ClusterId: 'int' = None
            Length: 'int' = None
            Value: 'int' = None

    class Commands:
        @dataclass
        class AddScene(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneName", Tag=3, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="ExtensionFieldSets", Tag=4, Type=Scenes.Structs.SceneExtensionFieldSet, IsArray=True),
                    ])

            GroupId: 'int' = None
            SceneId: 'int' = None
            TransitionTime: 'int' = None
            SceneName: 'str' = None
            ExtensionFieldSets: typing.List['Scenes.Structs.SceneExtensionFieldSet'] = None

        @dataclass
        class AddSceneResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneId", Tag=2, Type=int),
                    ])

            Status: 'int' = None
            GroupId: 'int' = None
            SceneId: 'int' = None

        @dataclass
        class ViewScene(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneId", Tag=1, Type=int),
                    ])

            GroupId: 'int' = None
            SceneId: 'int' = None

        @dataclass
        class ViewSceneResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneId", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneName", Tag=4, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="ExtensionFieldSets", Tag=5, Type=Scenes.Structs.SceneExtensionFieldSet, IsArray=True),
                    ])

            Status: 'int' = None
            GroupId: 'int' = None
            SceneId: 'int' = None
            TransitionTime: 'int' = None
            SceneName: 'str' = None
            ExtensionFieldSets: typing.List['Scenes.Structs.SceneExtensionFieldSet'] = None

        @dataclass
        class RemoveScene(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneId", Tag=1, Type=int),
                    ])

            GroupId: 'int' = None
            SceneId: 'int' = None

        @dataclass
        class RemoveSceneResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneId", Tag=2, Type=int),
                    ])

            Status: 'int' = None
            GroupId: 'int' = None
            SceneId: 'int' = None

        @dataclass
        class RemoveAllScenes(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=0, Type=int),
                    ])

            GroupId: 'int' = None

        @dataclass
        class RemoveAllScenesResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=1, Type=int),
                    ])

            Status: 'int' = None
            GroupId: 'int' = None

        @dataclass
        class StoreScene(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneId", Tag=1, Type=int),
                    ])

            GroupId: 'int' = None
            SceneId: 'int' = None

        @dataclass
        class StoreSceneResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneId", Tag=2, Type=int),
                    ])

            Status: 'int' = None
            GroupId: 'int' = None
            SceneId: 'int' = None

        @dataclass
        class RecallScene(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=2, Type=int),
                    ])

            GroupId: 'int' = None
            SceneId: 'int' = None
            TransitionTime: 'int' = None

        @dataclass
        class GetSceneMembership(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0006

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=0, Type=int),
                    ])

            GroupId: 'int' = None

        @dataclass
        class GetSceneMembershipResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0006

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Capacity", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneCount", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneList", Tag=4, Type=int, IsArray=True),
                    ])

            Status: 'int' = None
            Capacity: 'int' = None
            GroupId: 'int' = None
            SceneCount: 'int' = None
            SceneList: typing.List['int'] = None

        @dataclass
        class EnhancedAddScene(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0040

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneName", Tag=3, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="ExtensionFieldSets", Tag=4, Type=Scenes.Structs.SceneExtensionFieldSet, IsArray=True),
                    ])

            GroupId: 'int' = None
            SceneId: 'int' = None
            TransitionTime: 'int' = None
            SceneName: 'str' = None
            ExtensionFieldSets: typing.List['Scenes.Structs.SceneExtensionFieldSet'] = None

        @dataclass
        class EnhancedAddSceneResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0040

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneId", Tag=2, Type=int),
                    ])

            Status: 'int' = None
            GroupId: 'int' = None
            SceneId: 'int' = None

        @dataclass
        class EnhancedViewScene(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0041

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneId", Tag=1, Type=int),
                    ])

            GroupId: 'int' = None
            SceneId: 'int' = None

        @dataclass
        class EnhancedViewSceneResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0041

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneId", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneName", Tag=4, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="ExtensionFieldSets", Tag=5, Type=Scenes.Structs.SceneExtensionFieldSet, IsArray=True),
                    ])

            Status: 'int' = None
            GroupId: 'int' = None
            SceneId: 'int' = None
            TransitionTime: 'int' = None
            SceneName: 'str' = None
            ExtensionFieldSets: typing.List['Scenes.Structs.SceneExtensionFieldSet'] = None

        @dataclass
        class CopyScene(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0042

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Mode", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupIdFrom", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneIdFrom", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupIdTo", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneIdTo", Tag=4, Type=int),
                    ])

            Mode: 'int' = None
            GroupIdFrom: 'int' = None
            SceneIdFrom: 'int' = None
            GroupIdTo: 'int' = None
            SceneIdTo: 'int' = None

        @dataclass
        class CopySceneResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0005
            command_id: typing.ClassVar[int] = 0x0042

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupIdFrom", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SceneIdFrom", Tag=2, Type=int),
                    ])

            Status: 'int' = None
            GroupIdFrom: 'int' = None
            SceneIdFrom: 'int' = None


@dataclass
class OnOff:
    id: typing.ClassVar[int] = 0x0006

    class Enums:
        class OnOffDelayedAllOffEffectVariant(IntEnum):
            kFadeToOffIn0p8Seconds = 0x00
            kNoFade = 0x01
            k50PercentDimDownIn0p8SecondsThenFadeToOffIn12Seconds = 0x02

        class OnOffDyingLightEffectVariant(IntEnum):
            k20PercenterDimUpIn0p5SecondsThenFadeToOffIn1Second = 0x00

        class OnOffEffectIdentifier(IntEnum):
            kDelayedAllOff = 0x00
            kDyingLight = 0x01

    class Commands:
        @dataclass
        class Off(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0006
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class SampleMfgSpecificOffWithTransition(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0006
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class On(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0006
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class SampleMfgSpecificOnWithTransition(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0006
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class SampleMfgSpecificOnWithTransition2(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0006
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class Toggle(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0006
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class SampleMfgSpecificToggleWithTransition(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0006
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class SampleMfgSpecificToggleWithTransition2(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0006
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class OffWithEffect(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0006
            command_id: typing.ClassVar[int] = 0x0040

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="EffectId", Tag=0, Type=OnOff.Enums.OnOffEffectIdentifier),
                        ClusterObjectFieldDescriptor(
                            Label="EffectVariant", Tag=1, Type=OnOff.Enums.OnOffDelayedAllOffEffectVariant),
                    ])

            EffectId: 'OnOff.Enums.OnOffEffectIdentifier' = None
            EffectVariant: 'OnOff.Enums.OnOffDelayedAllOffEffectVariant' = None

        @dataclass
        class OnWithRecallGlobalScene(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0006
            command_id: typing.ClassVar[int] = 0x0041

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class OnWithTimedOff(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0006
            command_id: typing.ClassVar[int] = 0x0042

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="OnOffControl", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OnTime", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OffWaitTime", Tag=2, Type=int),
                    ])

            OnOffControl: 'int' = None
            OnTime: 'int' = None
            OffWaitTime: 'int' = None


@dataclass
class OnOffSwitchConfiguration:
    id: typing.ClassVar[int] = 0x0007


@dataclass
class LevelControl:
    id: typing.ClassVar[int] = 0x0008

    class Enums:
        class MoveMode(IntEnum):
            kUp = 0x00
            kDown = 0x01

        class StepMode(IntEnum):
            kUp = 0x00
            kDown = 0x01

    class Commands:
        @dataclass
        class MoveToLevel(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0008
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Level", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionMask", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionOverride", Tag=3, Type=int),
                    ])

            Level: 'int' = None
            TransitionTime: 'int' = None
            OptionMask: 'int' = None
            OptionOverride: 'int' = None

        @dataclass
        class Move(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0008
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MoveMode", Tag=0, Type=LevelControl.Enums.MoveMode),
                        ClusterObjectFieldDescriptor(
                            Label="Rate", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionMask", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionOverride", Tag=3, Type=int),
                    ])

            MoveMode: 'LevelControl.Enums.MoveMode' = None
            Rate: 'int' = None
            OptionMask: 'int' = None
            OptionOverride: 'int' = None

        @dataclass
        class Step(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0008
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="StepMode", Tag=0, Type=LevelControl.Enums.StepMode),
                        ClusterObjectFieldDescriptor(
                            Label="StepSize", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionMask", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionOverride", Tag=4, Type=int),
                    ])

            StepMode: 'LevelControl.Enums.StepMode' = None
            StepSize: 'int' = None
            TransitionTime: 'int' = None
            OptionMask: 'int' = None
            OptionOverride: 'int' = None

        @dataclass
        class Stop(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0008
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="OptionMask", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionOverride", Tag=1, Type=int),
                    ])

            OptionMask: 'int' = None
            OptionOverride: 'int' = None

        @dataclass
        class MoveToLevelWithOnOff(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0008
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Level", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=1, Type=int),
                    ])

            Level: 'int' = None
            TransitionTime: 'int' = None

        @dataclass
        class MoveWithOnOff(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0008
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MoveMode", Tag=0, Type=LevelControl.Enums.MoveMode),
                        ClusterObjectFieldDescriptor(
                            Label="Rate", Tag=1, Type=int),
                    ])

            MoveMode: 'LevelControl.Enums.MoveMode' = None
            Rate: 'int' = None

        @dataclass
        class StepWithOnOff(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0008
            command_id: typing.ClassVar[int] = 0x0006

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="StepMode", Tag=0, Type=LevelControl.Enums.StepMode),
                        ClusterObjectFieldDescriptor(
                            Label="StepSize", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=2, Type=int),
                    ])

            StepMode: 'LevelControl.Enums.StepMode' = None
            StepSize: 'int' = None
            TransitionTime: 'int' = None

        @dataclass
        class StopWithOnOff(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0008
            command_id: typing.ClassVar[int] = 0x0007

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])


@dataclass
class Alarms:
    id: typing.ClassVar[int] = 0x0009

    class Commands:
        @dataclass
        class ResetAlarm(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0009
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="AlarmCode", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ClusterId", Tag=1, Type=int),
                    ])

            AlarmCode: 'int' = None
            ClusterId: 'int' = None

        @dataclass
        class Alarm(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0009
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="AlarmCode", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ClusterId", Tag=1, Type=int),
                    ])

            AlarmCode: 'int' = None
            ClusterId: 'int' = None

        @dataclass
        class ResetAllAlarms(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0009
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class GetAlarmResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0009
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="AlarmCode", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ClusterId", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TimeStamp", Tag=3, Type=int),
                    ])

            Status: 'int' = None
            AlarmCode: 'int' = None
            ClusterId: 'int' = None
            TimeStamp: 'int' = None

        @dataclass
        class GetAlarm(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0009
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class ResetAlarmLog(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0009
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])


@dataclass
class Time:
    id: typing.ClassVar[int] = 0x000A


@dataclass
class BinaryInputBasic:
    id: typing.ClassVar[int] = 0x000F


@dataclass
class PowerProfile:
    id: typing.ClassVar[int] = 0x001A

    class Structs:
        @dataclass
        class PowerProfileRecord(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="EnergyPhaseId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileRemoteControl", Tag=2, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileState", Tag=3, Type=int),
                    ])

            PowerProfileId: 'int' = None
            EnergyPhaseId: 'int' = None
            PowerProfileRemoteControl: 'bool' = None
            PowerProfileState: 'int' = None

        @dataclass
        class ScheduledPhase(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="EnergyPhaseId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ScheduledTime", Tag=1, Type=int),
                    ])

            EnergyPhaseId: 'int' = None
            ScheduledTime: 'int' = None

        @dataclass
        class TransferredPhase(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="EnergyPhaseId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="MacroPhaseId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ExpectedDuration", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="PeakPower", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Energy", Tag=4, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="MaxActivationDelay", Tag=5, Type=int),
                    ])

            EnergyPhaseId: 'int' = None
            MacroPhaseId: 'int' = None
            ExpectedDuration: 'int' = None
            PeakPower: 'int' = None
            Energy: 'int' = None
            MaxActivationDelay: 'int' = None

    class Commands:
        @dataclass
        class PowerProfileRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileId", Tag=0, Type=int),
                    ])

            PowerProfileId: 'int' = None

        @dataclass
        class PowerProfileNotification(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="TotalProfileNum", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="NumOfTransferredPhases", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransferredPhases", Tag=3, Type=PowerProfile.Structs.TransferredPhase, IsArray=True),
                    ])

            TotalProfileNum: 'int' = None
            PowerProfileId: 'int' = None
            NumOfTransferredPhases: 'int' = None
            TransferredPhases: typing.List['PowerProfile.Structs.TransferredPhase'] = None

        @dataclass
        class PowerProfileStateRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class PowerProfileResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="TotalProfileNum", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="NumOfTransferredPhases", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransferredPhases", Tag=3, Type=PowerProfile.Structs.TransferredPhase, IsArray=True),
                    ])

            TotalProfileNum: 'int' = None
            PowerProfileId: 'int' = None
            NumOfTransferredPhases: 'int' = None
            TransferredPhases: typing.List['PowerProfile.Structs.TransferredPhase'] = None

        @dataclass
        class GetPowerProfilePriceResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Currency", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Price", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="PriceTrailingDigit", Tag=3, Type=int),
                    ])

            PowerProfileId: 'int' = None
            Currency: 'int' = None
            Price: 'int' = None
            PriceTrailingDigit: 'int' = None

        @dataclass
        class PowerProfileStateResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileCount", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileRecords", Tag=1, Type=PowerProfile.Structs.PowerProfileRecord, IsArray=True),
                    ])

            PowerProfileCount: 'int' = None
            PowerProfileRecords: typing.List['PowerProfile.Structs.PowerProfileRecord'] = None

        @dataclass
        class GetOverallSchedulePriceResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Currency", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Price", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="PriceTrailingDigit", Tag=2, Type=int),
                    ])

            Currency: 'int' = None
            Price: 'int' = None
            PriceTrailingDigit: 'int' = None

        @dataclass
        class GetPowerProfilePrice(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileId", Tag=0, Type=int),
                    ])

            PowerProfileId: 'int' = None

        @dataclass
        class EnergyPhasesScheduleNotification(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="NumOfScheduledPhases", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ScheduledPhases", Tag=2, Type=PowerProfile.Structs.ScheduledPhase, IsArray=True),
                    ])

            PowerProfileId: 'int' = None
            NumOfScheduledPhases: 'int' = None
            ScheduledPhases: typing.List['PowerProfile.Structs.ScheduledPhase'] = None

        @dataclass
        class PowerProfilesStateNotification(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileCount", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileRecords", Tag=1, Type=PowerProfile.Structs.PowerProfileRecord, IsArray=True),
                    ])

            PowerProfileCount: 'int' = None
            PowerProfileRecords: typing.List['PowerProfile.Structs.PowerProfileRecord'] = None

        @dataclass
        class EnergyPhasesScheduleResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="NumOfScheduledPhases", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ScheduledPhases", Tag=2, Type=PowerProfile.Structs.ScheduledPhase, IsArray=True),
                    ])

            PowerProfileId: 'int' = None
            NumOfScheduledPhases: 'int' = None
            ScheduledPhases: typing.List['PowerProfile.Structs.ScheduledPhase'] = None

        @dataclass
        class GetOverallSchedulePrice(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class PowerProfileScheduleConstraintsRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0006

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileId", Tag=0, Type=int),
                    ])

            PowerProfileId: 'int' = None

        @dataclass
        class EnergyPhasesScheduleRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0006

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileId", Tag=0, Type=int),
                    ])

            PowerProfileId: 'int' = None

        @dataclass
        class EnergyPhasesScheduleStateRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0007

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileId", Tag=0, Type=int),
                    ])

            PowerProfileId: 'int' = None

        @dataclass
        class EnergyPhasesScheduleStateResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0007

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="NumOfScheduledPhases", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ScheduledPhases", Tag=2, Type=PowerProfile.Structs.ScheduledPhase, IsArray=True),
                    ])

            PowerProfileId: 'int' = None
            NumOfScheduledPhases: 'int' = None
            ScheduledPhases: typing.List['PowerProfile.Structs.ScheduledPhase'] = None

        @dataclass
        class GetPowerProfilePriceExtendedResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0008

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Currency", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Price", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="PriceTrailingDigit", Tag=3, Type=int),
                    ])

            PowerProfileId: 'int' = None
            Currency: 'int' = None
            Price: 'int' = None
            PriceTrailingDigit: 'int' = None

        @dataclass
        class EnergyPhasesScheduleStateNotification(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0008

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="NumOfScheduledPhases", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ScheduledPhases", Tag=2, Type=PowerProfile.Structs.ScheduledPhase, IsArray=True),
                    ])

            PowerProfileId: 'int' = None
            NumOfScheduledPhases: 'int' = None
            ScheduledPhases: typing.List['PowerProfile.Structs.ScheduledPhase'] = None

        @dataclass
        class PowerProfileScheduleConstraintsNotification(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x0009

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="StartAfter", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="StopBefore", Tag=2, Type=int),
                    ])

            PowerProfileId: 'int' = None
            StartAfter: 'int' = None
            StopBefore: 'int' = None

        @dataclass
        class PowerProfileScheduleConstraintsResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x000A

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="StartAfter", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="StopBefore", Tag=2, Type=int),
                    ])

            PowerProfileId: 'int' = None
            StartAfter: 'int' = None
            StopBefore: 'int' = None

        @dataclass
        class GetPowerProfilePriceExtended(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001A
            command_id: typing.ClassVar[int] = 0x000B

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Options", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="PowerProfileStartTime", Tag=2, Type=int),
                    ])

            Options: 'int' = None
            PowerProfileId: 'int' = None
            PowerProfileStartTime: 'int' = None


@dataclass
class ApplianceControl:
    id: typing.ClassVar[int] = 0x001B

    class Enums:
        class ApplianceStatus(IntEnum):
            kOff = 0x01
            kStandBy = 0x02
            kProgrammed = 0x03
            kProgrammedWaitingToStart = 0x04
            kRunning = 0x05
            kPause = 0x06
            kEndProgrammed = 0x07
            kFailure = 0x08
            kProgrammeInterrupted = 0x09
            kIdle = 0x0A
            kRinseHold = 0x0B
            kService = 0x0C
            kSuperfreezing = 0x0D
            kSupercooling = 0x0E
            kSuperheating = 0x0F

        class CommandIdentification(IntEnum):
            kStart = 0x01
            kStop = 0x02
            kPause = 0x03
            kStartSuperfreezing = 0x04
            kStopSuperfreezing = 0x05
            kStartSupercooling = 0x06
            kStopSupercooling = 0x07
            kDisableGas = 0x08
            kEnableGas = 0x09
            kEnableEnergyControl = 0x0A
            kDisableEnergyControl = 0x0B

        class WarningEvent(IntEnum):
            kWarning1OverallPowerAboveAvailablePowerLevel = 0x00
            kWarning2OverallPowerAbovePowerThresholdLevel = 0x01
            kWarning3OverallPowerBackBelowTheAvailablePowerLevel = 0x02
            kWarning4OverallPowerBackBelowThePowerThresholdLevel = 0x03
            kWarning5OverallPowerWillBePotentiallyAboveAvailablePowerLevelIfTheApplianceStarts = 0x04

    class Commands:
        @dataclass
        class ExecutionOfACommand(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001B
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="CommandId", Tag=0, Type=ApplianceControl.Enums.CommandIdentification),
                    ])

            CommandId: 'ApplianceControl.Enums.CommandIdentification' = None

        @dataclass
        class SignalStateResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001B
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ApplianceStatus", Tag=0, Type=ApplianceControl.Enums.ApplianceStatus),
                        ClusterObjectFieldDescriptor(
                            Label="RemoteEnableFlagsAndDeviceStatus2", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ApplianceStatus2", Tag=2, Type=ApplianceControl.Enums.ApplianceStatus),
                    ])

            ApplianceStatus: 'ApplianceControl.Enums.ApplianceStatus' = None
            RemoteEnableFlagsAndDeviceStatus2: 'int' = None
            ApplianceStatus2: 'ApplianceControl.Enums.ApplianceStatus' = None

        @dataclass
        class SignalState(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001B
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class SignalStateNotification(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001B
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ApplianceStatus", Tag=0, Type=ApplianceControl.Enums.ApplianceStatus),
                        ClusterObjectFieldDescriptor(
                            Label="RemoteEnableFlagsAndDeviceStatus2", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ApplianceStatus2", Tag=2, Type=ApplianceControl.Enums.ApplianceStatus),
                    ])

            ApplianceStatus: 'ApplianceControl.Enums.ApplianceStatus' = None
            RemoteEnableFlagsAndDeviceStatus2: 'int' = None
            ApplianceStatus2: 'ApplianceControl.Enums.ApplianceStatus' = None

        @dataclass
        class WriteFunctions(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001B
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="FunctionId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="FunctionDataType", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="FunctionData", Tag=2, Type=int, IsArray=True),
                    ])

            FunctionId: 'int' = None
            FunctionDataType: 'int' = None
            FunctionData: typing.List['int'] = None

        @dataclass
        class OverloadPauseResume(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001B
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class OverloadPause(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001B
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class OverloadWarning(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x001B
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="WarningEvent", Tag=0, Type=ApplianceControl.Enums.WarningEvent),
                    ])

            WarningEvent: 'ApplianceControl.Enums.WarningEvent' = None


@dataclass
class Descriptor:
    id: typing.ClassVar[int] = 0x001D

    class Structs:
        @dataclass
        class DeviceType(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Type", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Revision", Tag=1, Type=int),
                    ])

            Type: 'int' = None
            Revision: 'int' = None


@dataclass
class PollControl:
    id: typing.ClassVar[int] = 0x0020

    class Commands:
        @dataclass
        class CheckIn(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0020
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class CheckInResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0020
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="StartFastPolling", Tag=0, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="FastPollTimeout", Tag=1, Type=int),
                    ])

            StartFastPolling: 'bool' = None
            FastPollTimeout: 'int' = None

        @dataclass
        class FastPollStop(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0020
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class SetLongPollInterval(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0020
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="NewLongPollInterval", Tag=0, Type=int),
                    ])

            NewLongPollInterval: 'int' = None

        @dataclass
        class SetShortPollInterval(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0020
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="NewShortPollInterval", Tag=0, Type=int),
                    ])

            NewShortPollInterval: 'int' = None


@dataclass
class Basic:
    id: typing.ClassVar[int] = 0x0028

    class Commands:
        @dataclass
        class StartUp(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0028
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class MfgSpecificPing(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0028
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class ShutDown(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0028
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class Leave(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0028
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])


@dataclass
class OtaSoftwareUpdateProvider:
    id: typing.ClassVar[int] = 0x0029

    class Enums:
        class OTAApplyUpdateAction(IntEnum):
            kProceed = 0x00
            kAwaitNextAction = 0x01
            kDiscontinue = 0x02

        class OTADownloadProtocol(IntEnum):
            kBDXSynchronous = 0x00
            kBDXAsynchronous = 0x01
            kHttps = 0x02
            kVendorSpecific = 0x03

        class OTAQueryStatus(IntEnum):
            kUpdateAvailable = 0x00
            kBusy = 0x01
            kNotAvailable = 0x02

    class Commands:
        @dataclass
        class QueryImage(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0029
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="VendorId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ProductId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="HardwareVersion", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SoftwareVersion", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ProtocolsSupported", Tag=4, Type=OtaSoftwareUpdateProvider.Enums.OTADownloadProtocol),
                        ClusterObjectFieldDescriptor(
                            Label="Location", Tag=5, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="RequestorCanConsent", Tag=6, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="MetadataForProvider", Tag=7, Type=bytes),
                    ])

            VendorId: 'int' = None
            ProductId: 'int' = None
            HardwareVersion: 'int' = None
            SoftwareVersion: 'int' = None
            ProtocolsSupported: 'OtaSoftwareUpdateProvider.Enums.OTADownloadProtocol' = None
            Location: 'str' = None
            RequestorCanConsent: 'bool' = None
            MetadataForProvider: 'bytes' = None

        @dataclass
        class ApplyUpdateRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0029
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UpdateToken", Tag=0, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="NewVersion", Tag=1, Type=int),
                    ])

            UpdateToken: 'bytes' = None
            NewVersion: 'int' = None

        @dataclass
        class NotifyUpdateApplied(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0029
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UpdateToken", Tag=0, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="SoftwareVersion", Tag=1, Type=int),
                    ])

            UpdateToken: 'bytes' = None
            SoftwareVersion: 'int' = None

        @dataclass
        class QueryImageResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0029
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=OtaSoftwareUpdateProvider.Enums.OTAQueryStatus),
                        ClusterObjectFieldDescriptor(
                            Label="DelayedActionTime", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ImageURI", Tag=2, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="SoftwareVersion", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="SoftwareVersionString", Tag=4, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="UpdateToken", Tag=5, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="UserConsentNeeded", Tag=6, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="MetadataForRequestor", Tag=7, Type=bytes),
                    ])

            Status: 'OtaSoftwareUpdateProvider.Enums.OTAQueryStatus' = None
            DelayedActionTime: 'int' = None
            ImageURI: 'str' = None
            SoftwareVersion: 'int' = None
            SoftwareVersionString: 'str' = None
            UpdateToken: 'bytes' = None
            UserConsentNeeded: 'bool' = None
            MetadataForRequestor: 'bytes' = None

        @dataclass
        class ApplyUpdateRequestResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0029
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Action", Tag=0, Type=OtaSoftwareUpdateProvider.Enums.OTAApplyUpdateAction),
                        ClusterObjectFieldDescriptor(
                            Label="DelayedActionTime", Tag=1, Type=int),
                    ])

            Action: 'OtaSoftwareUpdateProvider.Enums.OTAApplyUpdateAction' = None
            DelayedActionTime: 'int' = None


@dataclass
class OtaSoftwareUpdateRequestor:
    id: typing.ClassVar[int] = 0x002A

    class Enums:
        class OTAAnnouncementReason(IntEnum):
            kSimpleAnnouncement = 0x00
            kUpdateAvailable = 0x01
            kUrgentUpdateAvailable = 0x02

    class Commands:
        @dataclass
        class AnnounceOtaProvider(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x002A
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ProviderLocation", Tag=0, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="VendorId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="AnnouncementReason", Tag=2, Type=OtaSoftwareUpdateRequestor.Enums.OTAAnnouncementReason),
                        ClusterObjectFieldDescriptor(
                            Label="MetadataForNode", Tag=3, Type=bytes),
                    ])

            ProviderLocation: 'bytes' = None
            VendorId: 'int' = None
            AnnouncementReason: 'OtaSoftwareUpdateRequestor.Enums.OTAAnnouncementReason' = None
            MetadataForNode: 'bytes' = None


@dataclass
class PowerSource:
    id: typing.ClassVar[int] = 0x002F


@dataclass
class GeneralCommissioning:
    id: typing.ClassVar[int] = 0x0030

    class Enums:
        class GeneralCommissioningError(IntEnum):
            kOk = 0x00
            kValueOutsideRange = 0x01
            kInvalidAuthentication = 0x02

        class RegulatoryLocationType(IntEnum):
            kIndoor = 0x00
            kOutdoor = 0x01
            kIndoorOutdoor = 0x02

    class Structs:
        @dataclass
        class BasicCommissioningInfoType(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="FailSafeExpiryLengthMs", Tag=0, Type=int),
                    ])

            FailSafeExpiryLengthMs: 'int' = None

    class Commands:
        @dataclass
        class ArmFailSafe(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0030
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ExpiryLengthSeconds", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Breadcrumb", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TimeoutMs", Tag=2, Type=int),
                    ])

            ExpiryLengthSeconds: 'int' = None
            Breadcrumb: 'int' = None
            TimeoutMs: 'int' = None

        @dataclass
        class ArmFailSafeResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0030
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ErrorCode", Tag=0, Type=GeneralCommissioning.Enums.GeneralCommissioningError),
                        ClusterObjectFieldDescriptor(
                            Label="DebugText", Tag=1, Type=str),
                    ])

            ErrorCode: 'GeneralCommissioning.Enums.GeneralCommissioningError' = None
            DebugText: 'str' = None

        @dataclass
        class SetRegulatoryConfig(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0030
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Location", Tag=0, Type=GeneralCommissioning.Enums.RegulatoryLocationType),
                        ClusterObjectFieldDescriptor(
                            Label="CountryCode", Tag=1, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="Breadcrumb", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TimeoutMs", Tag=3, Type=int),
                    ])

            Location: 'GeneralCommissioning.Enums.RegulatoryLocationType' = None
            CountryCode: 'str' = None
            Breadcrumb: 'int' = None
            TimeoutMs: 'int' = None

        @dataclass
        class SetRegulatoryConfigResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0030
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ErrorCode", Tag=0, Type=GeneralCommissioning.Enums.GeneralCommissioningError),
                        ClusterObjectFieldDescriptor(
                            Label="DebugText", Tag=1, Type=str),
                    ])

            ErrorCode: 'GeneralCommissioning.Enums.GeneralCommissioningError' = None
            DebugText: 'str' = None

        @dataclass
        class CommissioningComplete(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0030
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class CommissioningCompleteResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0030
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ErrorCode", Tag=0, Type=GeneralCommissioning.Enums.GeneralCommissioningError),
                        ClusterObjectFieldDescriptor(
                            Label="DebugText", Tag=1, Type=str),
                    ])

            ErrorCode: 'GeneralCommissioning.Enums.GeneralCommissioningError' = None
            DebugText: 'str' = None


@dataclass
class NetworkCommissioning:
    id: typing.ClassVar[int] = 0x0031

    class Enums:
        class NetworkCommissioningError(IntEnum):
            kSuccess = 0x00
            kOutOfRange = 0x01
            kBoundsExceeded = 0x02
            kNetworkIDNotFound = 0x03
            kDuplicateNetworkID = 0x04
            kNetworkNotFound = 0x05
            kRegulatoryError = 0x06
            kAuthFailure = 0x07
            kUnsupportedSecurity = 0x08
            kOtherConnectionFailure = 0x09
            kIPV6Failed = 0x0A
            kIPBindFailed = 0x0B
            kLabel9 = 0x0C
            kLabel10 = 0x0D
            kLabel11 = 0x0E
            kLabel12 = 0x0F
            kLabel13 = 0x10
            kLabel14 = 0x11
            kLabel15 = 0x12
            kUnknownError = 0x13

    class Structs:
        @dataclass
        class ThreadInterfaceScanResult(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="DiscoveryResponse", Tag=0, Type=bytes),
                    ])

            DiscoveryResponse: 'bytes' = None

        @dataclass
        class WiFiInterfaceScanResult(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Security", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Ssid", Tag=1, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="Bssid", Tag=2, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="Channel", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="FrequencyBand", Tag=4, Type=int),
                    ])

            Security: 'int' = None
            Ssid: 'bytes' = None
            Bssid: 'bytes' = None
            Channel: 'int' = None
            FrequencyBand: 'int' = None

    class Commands:
        @dataclass
        class ScanNetworks(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0031
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Ssid", Tag=0, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="Breadcrumb", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TimeoutMs", Tag=2, Type=int),
                    ])

            Ssid: 'bytes' = None
            Breadcrumb: 'int' = None
            TimeoutMs: 'int' = None

        @dataclass
        class ScanNetworksResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0031
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ErrorCode", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="DebugText", Tag=1, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="WifiScanResults", Tag=2, Type=NetworkCommissioning.Structs.WiFiInterfaceScanResult, IsArray=True),
                        ClusterObjectFieldDescriptor(
                            Label="ThreadScanResults", Tag=3, Type=NetworkCommissioning.Structs.ThreadInterfaceScanResult, IsArray=True),
                    ])

            ErrorCode: 'int' = None
            DebugText: 'str' = None
            WifiScanResults: typing.List['NetworkCommissioning.Structs.WiFiInterfaceScanResult'] = None
            ThreadScanResults: typing.List['NetworkCommissioning.Structs.ThreadInterfaceScanResult'] = None

        @dataclass
        class AddWiFiNetwork(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0031
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Ssid", Tag=0, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="Credentials", Tag=1, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="Breadcrumb", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TimeoutMs", Tag=3, Type=int),
                    ])

            Ssid: 'bytes' = None
            Credentials: 'bytes' = None
            Breadcrumb: 'int' = None
            TimeoutMs: 'int' = None

        @dataclass
        class AddWiFiNetworkResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0031
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ErrorCode", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="DebugText", Tag=1, Type=str),
                    ])

            ErrorCode: 'int' = None
            DebugText: 'str' = None

        @dataclass
        class UpdateWiFiNetwork(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0031
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Ssid", Tag=0, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="Credentials", Tag=1, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="Breadcrumb", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TimeoutMs", Tag=3, Type=int),
                    ])

            Ssid: 'bytes' = None
            Credentials: 'bytes' = None
            Breadcrumb: 'int' = None
            TimeoutMs: 'int' = None

        @dataclass
        class UpdateWiFiNetworkResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0031
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ErrorCode", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="DebugText", Tag=1, Type=str),
                    ])

            ErrorCode: 'int' = None
            DebugText: 'str' = None

        @dataclass
        class AddThreadNetwork(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0031
            command_id: typing.ClassVar[int] = 0x0006

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="OperationalDataset", Tag=0, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="Breadcrumb", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TimeoutMs", Tag=2, Type=int),
                    ])

            OperationalDataset: 'bytes' = None
            Breadcrumb: 'int' = None
            TimeoutMs: 'int' = None

        @dataclass
        class AddThreadNetworkResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0031
            command_id: typing.ClassVar[int] = 0x0007

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ErrorCode", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="DebugText", Tag=1, Type=str),
                    ])

            ErrorCode: 'int' = None
            DebugText: 'str' = None

        @dataclass
        class UpdateThreadNetwork(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0031
            command_id: typing.ClassVar[int] = 0x0008

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="OperationalDataset", Tag=0, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="Breadcrumb", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TimeoutMs", Tag=2, Type=int),
                    ])

            OperationalDataset: 'bytes' = None
            Breadcrumb: 'int' = None
            TimeoutMs: 'int' = None

        @dataclass
        class UpdateThreadNetworkResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0031
            command_id: typing.ClassVar[int] = 0x0009

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ErrorCode", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="DebugText", Tag=1, Type=str),
                    ])

            ErrorCode: 'int' = None
            DebugText: 'str' = None

        @dataclass
        class RemoveNetwork(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0031
            command_id: typing.ClassVar[int] = 0x000A

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="NetworkID", Tag=0, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="Breadcrumb", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TimeoutMs", Tag=2, Type=int),
                    ])

            NetworkID: 'bytes' = None
            Breadcrumb: 'int' = None
            TimeoutMs: 'int' = None

        @dataclass
        class RemoveNetworkResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0031
            command_id: typing.ClassVar[int] = 0x000B

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ErrorCode", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="DebugText", Tag=1, Type=str),
                    ])

            ErrorCode: 'int' = None
            DebugText: 'str' = None

        @dataclass
        class EnableNetwork(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0031
            command_id: typing.ClassVar[int] = 0x000C

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="NetworkID", Tag=0, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="Breadcrumb", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TimeoutMs", Tag=2, Type=int),
                    ])

            NetworkID: 'bytes' = None
            Breadcrumb: 'int' = None
            TimeoutMs: 'int' = None

        @dataclass
        class EnableNetworkResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0031
            command_id: typing.ClassVar[int] = 0x000D

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ErrorCode", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="DebugText", Tag=1, Type=str),
                    ])

            ErrorCode: 'int' = None
            DebugText: 'str' = None

        @dataclass
        class DisableNetwork(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0031
            command_id: typing.ClassVar[int] = 0x000E

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="NetworkID", Tag=0, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="Breadcrumb", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TimeoutMs", Tag=2, Type=int),
                    ])

            NetworkID: 'bytes' = None
            Breadcrumb: 'int' = None
            TimeoutMs: 'int' = None

        @dataclass
        class DisableNetworkResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0031
            command_id: typing.ClassVar[int] = 0x000F

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ErrorCode", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="DebugText", Tag=1, Type=str),
                    ])

            ErrorCode: 'int' = None
            DebugText: 'str' = None

        @dataclass
        class GetLastNetworkCommissioningResult(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0031
            command_id: typing.ClassVar[int] = 0x0010

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="TimeoutMs", Tag=0, Type=int),
                    ])

            TimeoutMs: 'int' = None


@dataclass
class DiagnosticLogs:
    id: typing.ClassVar[int] = 0x0032

    class Enums:
        class LogsIntent(IntEnum):
            kEndUserSupport = 0x00
            kNetworkDiag = 0x01
            kCrashLogs = 0x02

        class LogsStatus(IntEnum):
            kSuccess = 0x00
            kExhausted = 0x01
            kNoLogs = 0x02
            kBusy = 0x03
            kDenied = 0x04

        class LogsTransferProtocol(IntEnum):
            kResponsePayload = 0x00
            kBdx = 0x01

    class Commands:
        @dataclass
        class RetrieveLogsRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0032
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Intent", Tag=0, Type=DiagnosticLogs.Enums.LogsIntent),
                        ClusterObjectFieldDescriptor(
                            Label="RequestedProtocol", Tag=1, Type=DiagnosticLogs.Enums.LogsTransferProtocol),
                        ClusterObjectFieldDescriptor(
                            Label="TransferFileDesignator", Tag=2, Type=bytes),
                    ])

            Intent: 'DiagnosticLogs.Enums.LogsIntent' = None
            RequestedProtocol: 'DiagnosticLogs.Enums.LogsTransferProtocol' = None
            TransferFileDesignator: 'bytes' = None

        @dataclass
        class RetrieveLogsResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0032
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=DiagnosticLogs.Enums.LogsStatus),
                        ClusterObjectFieldDescriptor(
                            Label="Content", Tag=1, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="TimeStamp", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TimeSinceBoot", Tag=3, Type=int),
                    ])

            Status: 'DiagnosticLogs.Enums.LogsStatus' = None
            Content: 'bytes' = None
            TimeStamp: 'int' = None
            TimeSinceBoot: 'int' = None


@dataclass
class GeneralDiagnostics:
    id: typing.ClassVar[int] = 0x0033

    class Enums:
        class BootReasonType(IntEnum):
            kUnspecified = 0x00
            kPowerOnReboot = 0x01
            kBrownOutReset = 0x02
            kSoftwareWatchdogReset = 0x03
            kHardwareWatchdogReset = 0x04
            kSoftwareUpdateCompleted = 0x05
            kSoftwareReset = 0x06

        class HardwareFaultType(IntEnum):
            kUnspecified = 0x00
            kRadio = 0x01
            kSensor = 0x02
            kResettableOverTemp = 0x03
            kNonResettableOverTemp = 0x04
            kPowerSource = 0x05
            kVisualDisplayFault = 0x06
            kAudioOutputFault = 0x07
            kUserInterfaceFault = 0x08
            kNonVolatileMemoryError = 0x09
            kTamperDetected = 0x0A

        class InterfaceType(IntEnum):
            kUnspecified = 0x00
            kWiFi = 0x01
            kEthernet = 0x02
            kCellular = 0x03
            kThread = 0x04

        class NetworkFaultType(IntEnum):
            kUnspecified = 0x00
            kHardwareFailure = 0x01
            kNetworkJammed = 0x02
            kConnectionFailed = 0x03

        class RadioFaultType(IntEnum):
            kUnspecified = 0x00
            kWiFiFault = 0x01
            kCellularFault = 0x02
            kThreadFault = 0x03
            kNFCFault = 0x04
            kBLEFault = 0x05
            kEthernetFault = 0x06

    class Structs:
        @dataclass
        class NetworkInterfaceType(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Name", Tag=0, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="FabricConnected", Tag=1, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="OffPremiseServicesReachableIPv4", Tag=2, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="OffPremiseServicesReachableIPv6", Tag=3, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="HardwareAddress", Tag=4, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="Type", Tag=5, Type=GeneralDiagnostics.Enums.InterfaceType),
                    ])

            Name: 'bytes' = None
            FabricConnected: 'bool' = None
            OffPremiseServicesReachableIPv4: 'bool' = None
            OffPremiseServicesReachableIPv6: 'bool' = None
            HardwareAddress: 'bytes' = None
            Type: 'GeneralDiagnostics.Enums.InterfaceType' = None


@dataclass
class SoftwareDiagnostics:
    id: typing.ClassVar[int] = 0x0034

    class Structs:
        @dataclass
        class ThreadMetrics(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Id", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Name", Tag=1, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="StackFreeCurrent", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="StackFreeMinimum", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="StackSize", Tag=4, Type=int),
                    ])

            Id: 'int' = None
            Name: 'bytes' = None
            StackFreeCurrent: 'int' = None
            StackFreeMinimum: 'int' = None
            StackSize: 'int' = None

    class Commands:
        @dataclass
        class ResetWatermarks(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0034
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])


@dataclass
class ThreadNetworkDiagnostics:
    id: typing.ClassVar[int] = 0x0035

    class Enums:
        class NetworkFault(IntEnum):
            kUnspecified = 0x00
            kLinkDown = 0x01
            kHardwareFailure = 0x02
            kNetworkJammed = 0x03

        class RoutingRole(IntEnum):
            kUnspecified = 0x00
            kUnassigned = 0x01
            kSleepyEndDevice = 0x02
            kEndDevice = 0x03
            kReed = 0x04
            kRouter = 0x05
            kLeader = 0x06

    class Structs:
        @dataclass
        class NeighborTable(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ExtAddress", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Age", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Rloc16", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LinkFrameCounter", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="MleFrameCounter", Tag=4, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Lqi", Tag=5, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="AverageRssi", Tag=6, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LastRssi", Tag=7, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="FrameErrorRate", Tag=8, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="MessageErrorRate", Tag=9, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="RxOnWhenIdle", Tag=10, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="FullThreadDevice", Tag=11, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="FullNetworkData", Tag=12, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="IsChild", Tag=13, Type=bool),
                    ])

            ExtAddress: 'int' = None
            Age: 'int' = None
            Rloc16: 'int' = None
            LinkFrameCounter: 'int' = None
            MleFrameCounter: 'int' = None
            Lqi: 'int' = None
            AverageRssi: 'int' = None
            LastRssi: 'int' = None
            FrameErrorRate: 'int' = None
            MessageErrorRate: 'int' = None
            RxOnWhenIdle: 'bool' = None
            FullThreadDevice: 'bool' = None
            FullNetworkData: 'bool' = None
            IsChild: 'bool' = None

        @dataclass
        class OperationalDatasetComponents(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ActiveTimestampPresent", Tag=0, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="PendingTimestampPresent", Tag=1, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="MasterKeyPresent", Tag=2, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="NetworkNamePresent", Tag=3, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="ExtendedPanIdPresent", Tag=4, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="MeshLocalPrefixPresent", Tag=5, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="DelayPresent", Tag=6, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="PanIdPresent", Tag=7, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="ChannelPresent", Tag=8, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="PskcPresent", Tag=9, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="SecurityPolicyPresent", Tag=10, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="ChannelMaskPresent", Tag=11, Type=bool),
                    ])

            ActiveTimestampPresent: 'bool' = None
            PendingTimestampPresent: 'bool' = None
            MasterKeyPresent: 'bool' = None
            NetworkNamePresent: 'bool' = None
            ExtendedPanIdPresent: 'bool' = None
            MeshLocalPrefixPresent: 'bool' = None
            DelayPresent: 'bool' = None
            PanIdPresent: 'bool' = None
            ChannelPresent: 'bool' = None
            PskcPresent: 'bool' = None
            SecurityPolicyPresent: 'bool' = None
            ChannelMaskPresent: 'bool' = None

        @dataclass
        class RouteTable(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ExtAddress", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Rloc16", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="RouterId", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="NextHop", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="PathCost", Tag=4, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LQIIn", Tag=5, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LQIOut", Tag=6, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Age", Tag=7, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Allocated", Tag=8, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="LinkEstablished", Tag=9, Type=bool),
                    ])

            ExtAddress: 'int' = None
            Rloc16: 'int' = None
            RouterId: 'int' = None
            NextHop: 'int' = None
            PathCost: 'int' = None
            LQIIn: 'int' = None
            LQIOut: 'int' = None
            Age: 'int' = None
            Allocated: 'bool' = None
            LinkEstablished: 'bool' = None

        @dataclass
        class SecurityPolicy(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="RotationTime", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Flags", Tag=1, Type=int),
                    ])

            RotationTime: 'int' = None
            Flags: 'int' = None

    class Commands:
        @dataclass
        class ResetCounts(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0035
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])


@dataclass
class WiFiNetworkDiagnostics:
    id: typing.ClassVar[int] = 0x0036

    class Enums:
        class SecurityType(IntEnum):
            kUnspecified = 0x00
            kNone = 0x01
            kWep = 0x02
            kWpa = 0x03
            kWpa2 = 0x04
            kWpa3 = 0x05

        class WiFiVersionType(IntEnum):
            k80211a = 0x00
            k80211b = 0x01
            k80211g = 0x02
            k80211n = 0x03
            k80211ac = 0x04
            k80211ax = 0x05

    class Commands:
        @dataclass
        class ResetCounts(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0036
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])


@dataclass
class EthernetNetworkDiagnostics:
    id: typing.ClassVar[int] = 0x0037

    class Enums:
        class PHYRateType(IntEnum):
            k10m = 0x00
            k100m = 0x01
            k1000m = 0x02
            k25g = 0x03
            k5g = 0x04
            k10g = 0x05
            k40g = 0x06
            k100g = 0x07
            k200g = 0x08
            k400g = 0x09

    class Commands:
        @dataclass
        class ResetCounts(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0037
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])


@dataclass
class BridgedDeviceBasic:
    id: typing.ClassVar[int] = 0x0039

    class Commands:
        @dataclass
        class StartUp(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0039
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class ShutDown(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0039
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class Leave(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0039
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class ReachableChanged(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0039
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])


@dataclass
class Switch:
    id: typing.ClassVar[int] = 0x003B


@dataclass
class AdministratorCommissioning:
    id: typing.ClassVar[int] = 0x003C

    class Enums:
        class StatusCode(IntEnum):
            kSuccess = 0x00
            kBusy = 0x01
            kGeneralError = 0x02

    class Commands:
        @dataclass
        class OpenCommissioningWindow(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x003C
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="CommissioningTimeout", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="PAKEVerifier", Tag=1, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="Discriminator", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Iterations", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Salt", Tag=4, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="PasscodeID", Tag=5, Type=int),
                    ])

            CommissioningTimeout: 'int' = None
            PAKEVerifier: 'bytes' = None
            Discriminator: 'int' = None
            Iterations: 'int' = None
            Salt: 'bytes' = None
            PasscodeID: 'int' = None

        @dataclass
        class OpenBasicCommissioningWindow(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x003C
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="CommissioningTimeout", Tag=0, Type=int),
                    ])

            CommissioningTimeout: 'int' = None

        @dataclass
        class RevokeCommissioning(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x003C
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])


@dataclass
class OperationalCredentials:
    id: typing.ClassVar[int] = 0x003E

    class Enums:
        class NodeOperationalCertStatus(IntEnum):
            kSuccess = 0x00
            kInvalidPublicKey = 0x01
            kInvalidNodeOpId = 0x02
            kInvalidNOC = 0x03
            kMissingCsr = 0x04
            kTableFull = 0x05
            kInsufficientPrivilege = 0x08
            kFabricConflict = 0x09
            kLabelConflict = 0x0A
            kInvalidFabricIndex = 0x0B

    class Structs:
        @dataclass
        class FabricDescriptor(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="FabricIndex", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="RootPublicKey", Tag=1, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="VendorId", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="FabricId", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="NodeId", Tag=4, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Label", Tag=5, Type=bytes),
                    ])

            FabricIndex: 'int' = None
            RootPublicKey: 'bytes' = None
            VendorId: 'int' = None
            FabricId: 'int' = None
            NodeId: 'int' = None
            Label: 'bytes' = None

        @dataclass
        class NOCStruct(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="FabricIndex", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Noc", Tag=1, Type=bytes),
                    ])

            FabricIndex: 'int' = None
            Noc: 'bytes' = None

    class Commands:
        @dataclass
        class AttestationRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x003E
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="AttestationNonce", Tag=0, Type=bytes),
                    ])

            AttestationNonce: 'bytes' = None

        @dataclass
        class AttestationResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x003E
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="AttestationElements", Tag=0, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="Signature", Tag=1, Type=bytes),
                    ])

            AttestationElements: 'bytes' = None
            Signature: 'bytes' = None

        @dataclass
        class CertificateChainRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x003E
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="CertificateType", Tag=0, Type=int),
                    ])

            CertificateType: 'int' = None

        @dataclass
        class CertificateChainResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x003E
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Certificate", Tag=0, Type=bytes),
                    ])

            Certificate: 'bytes' = None

        @dataclass
        class OpCSRRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x003E
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="CSRNonce", Tag=0, Type=bytes),
                    ])

            CSRNonce: 'bytes' = None

        @dataclass
        class OpCSRResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x003E
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="NOCSRElements", Tag=0, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="AttestationSignature", Tag=1, Type=bytes),
                    ])

            NOCSRElements: 'bytes' = None
            AttestationSignature: 'bytes' = None

        @dataclass
        class AddNOC(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x003E
            command_id: typing.ClassVar[int] = 0x0006

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="NOCValue", Tag=0, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="ICACValue", Tag=1, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="IPKValue", Tag=2, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="CaseAdminNode", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="AdminVendorId", Tag=4, Type=int),
                    ])

            NOCValue: 'bytes' = None
            ICACValue: 'bytes' = None
            IPKValue: 'bytes' = None
            CaseAdminNode: 'int' = None
            AdminVendorId: 'int' = None

        @dataclass
        class UpdateNOC(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x003E
            command_id: typing.ClassVar[int] = 0x0007

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="NOCValue", Tag=0, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="ICACValue", Tag=1, Type=bytes),
                    ])

            NOCValue: 'bytes' = None
            ICACValue: 'bytes' = None

        @dataclass
        class NOCResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x003E
            command_id: typing.ClassVar[int] = 0x0008

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="StatusCode", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="FabricIndex", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="DebugText", Tag=2, Type=bytes),
                    ])

            StatusCode: 'int' = None
            FabricIndex: 'int' = None
            DebugText: 'bytes' = None

        @dataclass
        class UpdateFabricLabel(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x003E
            command_id: typing.ClassVar[int] = 0x0009

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Label", Tag=0, Type=str),
                    ])

            Label: 'str' = None

        @dataclass
        class RemoveFabric(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x003E
            command_id: typing.ClassVar[int] = 0x000A

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="FabricIndex", Tag=0, Type=int),
                    ])

            FabricIndex: 'int' = None

        @dataclass
        class AddTrustedRootCertificate(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x003E
            command_id: typing.ClassVar[int] = 0x000B

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="RootCertificate", Tag=0, Type=bytes),
                    ])

            RootCertificate: 'bytes' = None

        @dataclass
        class RemoveTrustedRootCertificate(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x003E
            command_id: typing.ClassVar[int] = 0x000C

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="TrustedRootIdentifier", Tag=0, Type=bytes),
                    ])

            TrustedRootIdentifier: 'bytes' = None


@dataclass
class FixedLabel:
    id: typing.ClassVar[int] = 0x0040

    class Structs:
        @dataclass
        class LabelStruct(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Label", Tag=0, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="Value", Tag=1, Type=bytes),
                    ])

            Label: 'bytes' = None
            Value: 'bytes' = None


@dataclass
class ShadeConfiguration:
    id: typing.ClassVar[int] = 0x0100


@dataclass
class DoorLock:
    id: typing.ClassVar[int] = 0x0101

    class Enums:
        class DoorLockOperationEventCode(IntEnum):
            kUnknownOrMfgSpecific = 0x00
            kLock = 0x01
            kUnlock = 0x02
            kLockInvalidPinOrId = 0x03
            kLockInvalidSchedule = 0x04
            kUnlockInvalidPinOrId = 0x05
            kUnlockInvalidSchedule = 0x06
            kOneTouchLock = 0x07
            kKeyLock = 0x08
            kKeyUnlock = 0x09
            kAutoLock = 0x0A
            kScheduleLock = 0x0B
            kScheduleUnlock = 0x0C
            kManualLock = 0x0D
            kManualUnlock = 0x0E

        class DoorLockProgrammingEventCode(IntEnum):
            kUnknownOrMfgSpecific = 0x00
            kMasterCodeChanged = 0x01
            kPinAdded = 0x02
            kPinDeleted = 0x03
            kPinChanged = 0x04
            kIdAdded = 0x05
            kIdDeleted = 0x06

        class DoorLockSetPinOrIdStatus(IntEnum):
            kSuccess = 0x00
            kGeneralFailure = 0x01
            kMemoryFull = 0x02
            kDuplicateCodeError = 0x03

        class DoorLockUserStatus(IntEnum):
            kAvailable = 0x00
            kOccupiedEnabled = 0x01
            kOccupiedDisabled = 0x03
            kNotSupported = 0xFF

        class DoorLockUserType(IntEnum):
            kUnrestricted = 0x00
            kYearDayScheduleUser = 0x01
            kWeekDayScheduleUser = 0x02
            kMasterUser = 0x03
            kNonAccessUser = 0x04
            kNotSupported = 0xFF

    class Commands:
        @dataclass
        class LockDoor(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Pin", Tag=0, Type=bytes),
                    ])

            Pin: 'bytes' = None

        @dataclass
        class LockDoorResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                    ])

            Status: 'int' = None

        @dataclass
        class UnlockDoor(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Pin", Tag=0, Type=bytes),
                    ])

            Pin: 'bytes' = None

        @dataclass
        class UnlockDoorResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                    ])

            Status: 'int' = None

        @dataclass
        class Toggle(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Pin", Tag=0, Type=str),
                    ])

            Pin: 'str' = None

        @dataclass
        class ToggleResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                    ])

            Status: 'int' = None

        @dataclass
        class UnlockWithTimeout(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="TimeoutInSeconds", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Pin", Tag=1, Type=bytes),
                    ])

            TimeoutInSeconds: 'int' = None
            Pin: 'bytes' = None

        @dataclass
        class UnlockWithTimeoutResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                    ])

            Status: 'int' = None

        @dataclass
        class GetLogRecord(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="LogIndex", Tag=0, Type=int),
                    ])

            LogIndex: 'int' = None

        @dataclass
        class GetLogRecordResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="LogEntryId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Timestamp", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="EventType", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Source", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="EventIdOrAlarmCode", Tag=4, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=5, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Pin", Tag=6, Type=bytes),
                    ])

            LogEntryId: 'int' = None
            Timestamp: 'int' = None
            EventType: 'int' = None
            Source: 'int' = None
            EventIdOrAlarmCode: 'int' = None
            UserId: 'int' = None
            Pin: 'bytes' = None

        @dataclass
        class SetPin(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="UserStatus", Tag=1, Type=DoorLock.Enums.DoorLockUserStatus),
                        ClusterObjectFieldDescriptor(
                            Label="UserType", Tag=2, Type=DoorLock.Enums.DoorLockUserType),
                        ClusterObjectFieldDescriptor(
                            Label="Pin", Tag=3, Type=bytes),
                    ])

            UserId: 'int' = None
            UserStatus: 'DoorLock.Enums.DoorLockUserStatus' = None
            UserType: 'DoorLock.Enums.DoorLockUserType' = None
            Pin: 'bytes' = None

        @dataclass
        class SetPinResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=DoorLock.Enums.DoorLockSetPinOrIdStatus),
                    ])

            Status: 'DoorLock.Enums.DoorLockSetPinOrIdStatus' = None

        @dataclass
        class GetPin(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0006

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=0, Type=int),
                    ])

            UserId: 'int' = None

        @dataclass
        class GetPinResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0006

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="UserStatus", Tag=1, Type=DoorLock.Enums.DoorLockUserStatus),
                        ClusterObjectFieldDescriptor(
                            Label="UserType", Tag=2, Type=DoorLock.Enums.DoorLockUserType),
                        ClusterObjectFieldDescriptor(
                            Label="Pin", Tag=3, Type=bytes),
                    ])

            UserId: 'int' = None
            UserStatus: 'DoorLock.Enums.DoorLockUserStatus' = None
            UserType: 'DoorLock.Enums.DoorLockUserType' = None
            Pin: 'bytes' = None

        @dataclass
        class ClearPin(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0007

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=0, Type=int),
                    ])

            UserId: 'int' = None

        @dataclass
        class ClearPinResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0007

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                    ])

            Status: 'int' = None

        @dataclass
        class ClearAllPins(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0008

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class ClearAllPinsResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0008

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                    ])

            Status: 'int' = None

        @dataclass
        class SetUserStatus(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0009

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="UserStatus", Tag=1, Type=int),
                    ])

            UserId: 'int' = None
            UserStatus: 'int' = None

        @dataclass
        class SetUserStatusResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0009

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                    ])

            Status: 'int' = None

        @dataclass
        class GetUserStatus(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x000A

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=0, Type=int),
                    ])

            UserId: 'int' = None

        @dataclass
        class GetUserStatusResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x000A

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=1, Type=int),
                    ])

            UserId: 'int' = None
            Status: 'int' = None

        @dataclass
        class SetWeekdaySchedule(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x000B

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ScheduleId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="DaysMask", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="StartHour", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="StartMinute", Tag=4, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="EndHour", Tag=5, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="EndMinute", Tag=6, Type=int),
                    ])

            ScheduleId: 'int' = None
            UserId: 'int' = None
            DaysMask: 'int' = None
            StartHour: 'int' = None
            StartMinute: 'int' = None
            EndHour: 'int' = None
            EndMinute: 'int' = None

        @dataclass
        class SetWeekdayScheduleResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x000B

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                    ])

            Status: 'int' = None

        @dataclass
        class GetWeekdaySchedule(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x000C

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ScheduleId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=1, Type=int),
                    ])

            ScheduleId: 'int' = None
            UserId: 'int' = None

        @dataclass
        class GetWeekdayScheduleResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x000C

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ScheduleId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="DaysMask", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="StartHour", Tag=4, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="StartMinute", Tag=5, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="EndHour", Tag=6, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="EndMinute", Tag=7, Type=int),
                    ])

            ScheduleId: 'int' = None
            UserId: 'int' = None
            Status: 'int' = None
            DaysMask: 'int' = None
            StartHour: 'int' = None
            StartMinute: 'int' = None
            EndHour: 'int' = None
            EndMinute: 'int' = None

        @dataclass
        class ClearWeekdaySchedule(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x000D

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ScheduleId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=1, Type=int),
                    ])

            ScheduleId: 'int' = None
            UserId: 'int' = None

        @dataclass
        class ClearWeekdayScheduleResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x000D

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                    ])

            Status: 'int' = None

        @dataclass
        class SetYeardaySchedule(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x000E

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ScheduleId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LocalStartTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LocalEndTime", Tag=3, Type=int),
                    ])

            ScheduleId: 'int' = None
            UserId: 'int' = None
            LocalStartTime: 'int' = None
            LocalEndTime: 'int' = None

        @dataclass
        class SetYeardayScheduleResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x000E

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                    ])

            Status: 'int' = None

        @dataclass
        class GetYeardaySchedule(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x000F

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ScheduleId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=1, Type=int),
                    ])

            ScheduleId: 'int' = None
            UserId: 'int' = None

        @dataclass
        class GetYeardayScheduleResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x000F

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ScheduleId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LocalStartTime", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LocalEndTime", Tag=4, Type=int),
                    ])

            ScheduleId: 'int' = None
            UserId: 'int' = None
            Status: 'int' = None
            LocalStartTime: 'int' = None
            LocalEndTime: 'int' = None

        @dataclass
        class ClearYeardaySchedule(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0010

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ScheduleId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=1, Type=int),
                    ])

            ScheduleId: 'int' = None
            UserId: 'int' = None

        @dataclass
        class ClearYeardayScheduleResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0010

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                    ])

            Status: 'int' = None

        @dataclass
        class SetHolidaySchedule(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0011

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ScheduleId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LocalStartTime", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LocalEndTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OperatingModeDuringHoliday", Tag=3, Type=int),
                    ])

            ScheduleId: 'int' = None
            LocalStartTime: 'int' = None
            LocalEndTime: 'int' = None
            OperatingModeDuringHoliday: 'int' = None

        @dataclass
        class SetHolidayScheduleResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0011

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                    ])

            Status: 'int' = None

        @dataclass
        class GetHolidaySchedule(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0012

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ScheduleId", Tag=0, Type=int),
                    ])

            ScheduleId: 'int' = None

        @dataclass
        class GetHolidayScheduleResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0012

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ScheduleId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LocalStartTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LocalEndTime", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OperatingModeDuringHoliday", Tag=4, Type=int),
                    ])

            ScheduleId: 'int' = None
            Status: 'int' = None
            LocalStartTime: 'int' = None
            LocalEndTime: 'int' = None
            OperatingModeDuringHoliday: 'int' = None

        @dataclass
        class ClearHolidaySchedule(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0013

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ScheduleId", Tag=0, Type=int),
                    ])

            ScheduleId: 'int' = None

        @dataclass
        class ClearHolidayScheduleResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0013

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                    ])

            Status: 'int' = None

        @dataclass
        class SetUserType(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0014

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="UserType", Tag=1, Type=DoorLock.Enums.DoorLockUserType),
                    ])

            UserId: 'int' = None
            UserType: 'DoorLock.Enums.DoorLockUserType' = None

        @dataclass
        class SetUserTypeResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0014

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                    ])

            Status: 'int' = None

        @dataclass
        class GetUserType(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0015

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=0, Type=int),
                    ])

            UserId: 'int' = None

        @dataclass
        class GetUserTypeResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0015

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="UserType", Tag=1, Type=DoorLock.Enums.DoorLockUserType),
                    ])

            UserId: 'int' = None
            UserType: 'DoorLock.Enums.DoorLockUserType' = None

        @dataclass
        class SetRfid(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0016

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="UserStatus", Tag=1, Type=DoorLock.Enums.DoorLockUserStatus),
                        ClusterObjectFieldDescriptor(
                            Label="UserType", Tag=2, Type=DoorLock.Enums.DoorLockUserType),
                        ClusterObjectFieldDescriptor(
                            Label="Id", Tag=3, Type=bytes),
                    ])

            UserId: 'int' = None
            UserStatus: 'DoorLock.Enums.DoorLockUserStatus' = None
            UserType: 'DoorLock.Enums.DoorLockUserType' = None
            Id: 'bytes' = None

        @dataclass
        class SetRfidResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0016

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=DoorLock.Enums.DoorLockSetPinOrIdStatus),
                    ])

            Status: 'DoorLock.Enums.DoorLockSetPinOrIdStatus' = None

        @dataclass
        class GetRfid(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0017

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=0, Type=int),
                    ])

            UserId: 'int' = None

        @dataclass
        class GetRfidResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0017

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="UserStatus", Tag=1, Type=DoorLock.Enums.DoorLockUserStatus),
                        ClusterObjectFieldDescriptor(
                            Label="UserType", Tag=2, Type=DoorLock.Enums.DoorLockUserType),
                        ClusterObjectFieldDescriptor(
                            Label="Rfid", Tag=3, Type=bytes),
                    ])

            UserId: 'int' = None
            UserStatus: 'DoorLock.Enums.DoorLockUserStatus' = None
            UserType: 'DoorLock.Enums.DoorLockUserType' = None
            Rfid: 'bytes' = None

        @dataclass
        class ClearRfid(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0018

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=0, Type=int),
                    ])

            UserId: 'int' = None

        @dataclass
        class ClearRfidResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0018

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                    ])

            Status: 'int' = None

        @dataclass
        class ClearAllRfids(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0019

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class ClearAllRfidsResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0019

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=int),
                    ])

            Status: 'int' = None

        @dataclass
        class OperationEventNotification(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0020

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Source", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="EventCode", Tag=1, Type=DoorLock.Enums.DoorLockOperationEventCode),
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Pin", Tag=3, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="TimeStamp", Tag=4, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Data", Tag=5, Type=str),
                    ])

            Source: 'int' = None
            EventCode: 'DoorLock.Enums.DoorLockOperationEventCode' = None
            UserId: 'int' = None
            Pin: 'bytes' = None
            TimeStamp: 'int' = None
            Data: 'str' = None

        @dataclass
        class ProgrammingEventNotification(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0101
            command_id: typing.ClassVar[int] = 0x0021

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Source", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="EventCode", Tag=1, Type=DoorLock.Enums.DoorLockProgrammingEventCode),
                        ClusterObjectFieldDescriptor(
                            Label="UserId", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Pin", Tag=3, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="UserType", Tag=4, Type=DoorLock.Enums.DoorLockUserType),
                        ClusterObjectFieldDescriptor(
                            Label="UserStatus", Tag=5, Type=DoorLock.Enums.DoorLockUserStatus),
                        ClusterObjectFieldDescriptor(
                            Label="TimeStamp", Tag=6, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Data", Tag=7, Type=str),
                    ])

            Source: 'int' = None
            EventCode: 'DoorLock.Enums.DoorLockProgrammingEventCode' = None
            UserId: 'int' = None
            Pin: 'bytes' = None
            UserType: 'DoorLock.Enums.DoorLockUserType' = None
            UserStatus: 'DoorLock.Enums.DoorLockUserStatus' = None
            TimeStamp: 'int' = None
            Data: 'str' = None


@dataclass
class WindowCovering:
    id: typing.ClassVar[int] = 0x0102

    class Enums:
        class WcEndProductType(IntEnum):
            kRollerShade = 0x00
            kRomanShade = 0x01
            kBalloonShade = 0x02
            kWovenWood = 0x03
            kPleatedShade = 0x04
            kCellularShade = 0x05
            kLayeredShade = 0x06
            kLayeredShade2D = 0x07
            kSheerShade = 0x08
            kTiltOnlyInteriorBlind = 0x09
            kInteriorBlind = 0x0A
            kVerticalBlindStripCurtain = 0x0B
            kInteriorVenetianBlind = 0x0C
            kExteriorVenetianBlind = 0x0D
            kLateralLeftCurtain = 0x0E
            kLateralRightCurtain = 0x0F
            kCentralCurtain = 0x10
            kRollerShutter = 0x11
            kExteriorVerticalScreen = 0x12
            kAwningTerracePatio = 0x13
            kAwningVerticalScreen = 0x14
            kTiltOnlyPergola = 0x15
            kSwingingShutter = 0x16
            kSlidingShutter = 0x17
            kUnknown = 0xFF

        class WcType(IntEnum):
            kRollershade = 0x00
            kRollershade2Motor = 0x01
            kRollershadeExterior = 0x02
            kRollershadeExterior2Motor = 0x03
            kDrapery = 0x04
            kAwning = 0x05
            kShutter = 0x06
            kTiltBlindTiltOnly = 0x07
            kTiltBlindLiftAndTilt = 0x08
            kProjectorScreen = 0x09
            kUnknown = 0xFF

    class Commands:
        @dataclass
        class UpOrOpen(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0102
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class DownOrClose(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0102
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class StopMotion(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0102
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class GoToLiftValue(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0102
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="LiftValue", Tag=0, Type=int),
                    ])

            LiftValue: 'int' = None

        @dataclass
        class GoToLiftPercentage(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0102
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="LiftPercentageValue", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LiftPercent100thsValue", Tag=1, Type=int),
                    ])

            LiftPercentageValue: 'int' = None
            LiftPercent100thsValue: 'int' = None

        @dataclass
        class GoToTiltValue(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0102
            command_id: typing.ClassVar[int] = 0x0007

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="TiltValue", Tag=0, Type=int),
                    ])

            TiltValue: 'int' = None

        @dataclass
        class GoToTiltPercentage(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0102
            command_id: typing.ClassVar[int] = 0x0008

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="TiltPercentageValue", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TiltPercent100thsValue", Tag=1, Type=int),
                    ])

            TiltPercentageValue: 'int' = None
            TiltPercent100thsValue: 'int' = None


@dataclass
class BarrierControl:
    id: typing.ClassVar[int] = 0x0103

    class Commands:
        @dataclass
        class BarrierControlGoToPercent(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0103
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PercentOpen", Tag=0, Type=int),
                    ])

            PercentOpen: 'int' = None

        @dataclass
        class BarrierControlStop(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0103
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])


@dataclass
class PumpConfigurationAndControl:
    id: typing.ClassVar[int] = 0x0200

    class Enums:
        class PumpControlMode(IntEnum):
            kConstantSpeed = 0x00
            kConstantPressure = 0x01
            kProportionalPressure = 0x02
            kConstantFlow = 0x03
            kConstantTemperature = 0x05
            kAutomatic = 0x07

        class PumpOperationMode(IntEnum):
            kNormal = 0x00
            kMinimum = 0x01
            kMaximum = 0x02
            kLocal = 0x03


@dataclass
class Thermostat:
    id: typing.ClassVar[int] = 0x0201

    class Enums:
        class SetpointAdjustMode(IntEnum):
            kHeatSetpoint = 0x00
            kCoolSetpoint = 0x01
            kHeatAndCoolSetpoints = 0x02

    class Commands:
        @dataclass
        class SetpointRaiseLower(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0201
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Mode", Tag=0, Type=Thermostat.Enums.SetpointAdjustMode),
                        ClusterObjectFieldDescriptor(
                            Label="Amount", Tag=1, Type=int),
                    ])

            Mode: 'Thermostat.Enums.SetpointAdjustMode' = None
            Amount: 'int' = None

        @dataclass
        class CurrentWeeklySchedule(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0201
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="NumberOfTransitionsForSequence", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="DayOfWeekForSequence", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ModeForSequence", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Payload", Tag=3, Type=int, IsArray=True),
                    ])

            NumberOfTransitionsForSequence: 'int' = None
            DayOfWeekForSequence: 'int' = None
            ModeForSequence: 'int' = None
            Payload: typing.List['int'] = None

        @dataclass
        class SetWeeklySchedule(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0201
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="NumberOfTransitionsForSequence", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="DayOfWeekForSequence", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ModeForSequence", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Payload", Tag=3, Type=int, IsArray=True),
                    ])

            NumberOfTransitionsForSequence: 'int' = None
            DayOfWeekForSequence: 'int' = None
            ModeForSequence: 'int' = None
            Payload: typing.List['int'] = None

        @dataclass
        class RelayStatusLog(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0201
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="TimeOfDay", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="RelayStatus", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LocalTemperature", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="HumidityInPercentage", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Setpoint", Tag=4, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="UnreadEntries", Tag=5, Type=int),
                    ])

            TimeOfDay: 'int' = None
            RelayStatus: 'int' = None
            LocalTemperature: 'int' = None
            HumidityInPercentage: 'int' = None
            Setpoint: 'int' = None
            UnreadEntries: 'int' = None

        @dataclass
        class GetWeeklySchedule(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0201
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="DaysToReturn", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ModeToReturn", Tag=1, Type=int),
                    ])

            DaysToReturn: 'int' = None
            ModeToReturn: 'int' = None

        @dataclass
        class ClearWeeklySchedule(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0201
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class GetRelayStatusLog(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0201
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])


@dataclass
class FanControl:
    id: typing.ClassVar[int] = 0x0202


@dataclass
class DehumidificationControl:
    id: typing.ClassVar[int] = 0x0203


@dataclass
class ThermostatUserInterfaceConfiguration:
    id: typing.ClassVar[int] = 0x0204


@dataclass
class ColorControl:
    id: typing.ClassVar[int] = 0x0300

    class Enums:
        class ColorLoopAction(IntEnum):
            kDeactivate = 0x00
            kActivateFromColorLoopStartEnhancedHue = 0x01
            kActivateFromEnhancedCurrentHue = 0x02

        class ColorLoopDirection(IntEnum):
            kDecrementHue = 0x00
            kIncrementHue = 0x01

        class ColorMode(IntEnum):
            kCurrentHueAndCurrentSaturation = 0x00
            kCurrentXAndCurrentY = 0x01
            kColorTemperature = 0x02

        class HueDirection(IntEnum):
            kShortestDistance = 0x00
            kLongestDistance = 0x01
            kUp = 0x02
            kDown = 0x03

        class HueMoveMode(IntEnum):
            kStop = 0x00
            kUp = 0x01
            kDown = 0x03

        class HueStepMode(IntEnum):
            kUp = 0x01
            kDown = 0x03

        class SaturationMoveMode(IntEnum):
            kStop = 0x00
            kUp = 0x01
            kDown = 0x03

        class SaturationStepMode(IntEnum):
            kUp = 0x01
            kDown = 0x03

    class Commands:
        @dataclass
        class MoveToHue(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Hue", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Direction", Tag=1, Type=ColorControl.Enums.HueDirection),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=4, Type=int),
                    ])

            Hue: 'int' = None
            Direction: 'ColorControl.Enums.HueDirection' = None
            TransitionTime: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class MoveHue(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MoveMode", Tag=0, Type=ColorControl.Enums.HueMoveMode),
                        ClusterObjectFieldDescriptor(
                            Label="Rate", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=3, Type=int),
                    ])

            MoveMode: 'ColorControl.Enums.HueMoveMode' = None
            Rate: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class StepHue(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="StepMode", Tag=0, Type=ColorControl.Enums.HueStepMode),
                        ClusterObjectFieldDescriptor(
                            Label="StepSize", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=4, Type=int),
                    ])

            StepMode: 'ColorControl.Enums.HueStepMode' = None
            StepSize: 'int' = None
            TransitionTime: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class MoveToSaturation(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Saturation", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=3, Type=int),
                    ])

            Saturation: 'int' = None
            TransitionTime: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class MoveSaturation(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MoveMode", Tag=0, Type=ColorControl.Enums.SaturationMoveMode),
                        ClusterObjectFieldDescriptor(
                            Label="Rate", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=3, Type=int),
                    ])

            MoveMode: 'ColorControl.Enums.SaturationMoveMode' = None
            Rate: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class StepSaturation(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="StepMode", Tag=0, Type=ColorControl.Enums.SaturationStepMode),
                        ClusterObjectFieldDescriptor(
                            Label="StepSize", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=4, Type=int),
                    ])

            StepMode: 'ColorControl.Enums.SaturationStepMode' = None
            StepSize: 'int' = None
            TransitionTime: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class MoveToHueAndSaturation(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x0006

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Hue", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Saturation", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=4, Type=int),
                    ])

            Hue: 'int' = None
            Saturation: 'int' = None
            TransitionTime: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class MoveToColor(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x0007

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ColorX", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ColorY", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=4, Type=int),
                    ])

            ColorX: 'int' = None
            ColorY: 'int' = None
            TransitionTime: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class MoveColor(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x0008

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="RateX", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="RateY", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=3, Type=int),
                    ])

            RateX: 'int' = None
            RateY: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class StepColor(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x0009

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="StepX", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="StepY", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=4, Type=int),
                    ])

            StepX: 'int' = None
            StepY: 'int' = None
            TransitionTime: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class MoveToColorTemperature(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x000A

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ColorTemperature", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=3, Type=int),
                    ])

            ColorTemperature: 'int' = None
            TransitionTime: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class EnhancedMoveToHue(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x0040

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="EnhancedHue", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Direction", Tag=1, Type=ColorControl.Enums.HueDirection),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=4, Type=int),
                    ])

            EnhancedHue: 'int' = None
            Direction: 'ColorControl.Enums.HueDirection' = None
            TransitionTime: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class EnhancedMoveHue(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x0041

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MoveMode", Tag=0, Type=ColorControl.Enums.HueMoveMode),
                        ClusterObjectFieldDescriptor(
                            Label="Rate", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=3, Type=int),
                    ])

            MoveMode: 'ColorControl.Enums.HueMoveMode' = None
            Rate: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class EnhancedStepHue(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x0042

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="StepMode", Tag=0, Type=ColorControl.Enums.HueStepMode),
                        ClusterObjectFieldDescriptor(
                            Label="StepSize", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=4, Type=int),
                    ])

            StepMode: 'ColorControl.Enums.HueStepMode' = None
            StepSize: 'int' = None
            TransitionTime: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class EnhancedMoveToHueAndSaturation(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x0043

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="EnhancedHue", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Saturation", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=4, Type=int),
                    ])

            EnhancedHue: 'int' = None
            Saturation: 'int' = None
            TransitionTime: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class ColorLoopSet(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x0044

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UpdateFlags", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Action", Tag=1, Type=ColorControl.Enums.ColorLoopAction),
                        ClusterObjectFieldDescriptor(
                            Label="Direction", Tag=2, Type=ColorControl.Enums.ColorLoopDirection),
                        ClusterObjectFieldDescriptor(
                            Label="Time", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="StartHue", Tag=4, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=5, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=6, Type=int),
                    ])

            UpdateFlags: 'int' = None
            Action: 'ColorControl.Enums.ColorLoopAction' = None
            Direction: 'ColorControl.Enums.ColorLoopDirection' = None
            Time: 'int' = None
            StartHue: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class StopMoveStep(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x0047

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=1, Type=int),
                    ])

            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class MoveColorTemperature(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x004B

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MoveMode", Tag=0, Type=ColorControl.Enums.HueMoveMode),
                        ClusterObjectFieldDescriptor(
                            Label="Rate", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ColorTemperatureMinimum", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ColorTemperatureMaximum", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=4, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=5, Type=int),
                    ])

            MoveMode: 'ColorControl.Enums.HueMoveMode' = None
            Rate: 'int' = None
            ColorTemperatureMinimum: 'int' = None
            ColorTemperatureMaximum: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None

        @dataclass
        class StepColorTemperature(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0300
            command_id: typing.ClassVar[int] = 0x004C

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="StepMode", Tag=0, Type=ColorControl.Enums.HueStepMode),
                        ClusterObjectFieldDescriptor(
                            Label="StepSize", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="TransitionTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ColorTemperatureMinimum", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ColorTemperatureMaximum", Tag=4, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsMask", Tag=5, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OptionsOverride", Tag=6, Type=int),
                    ])

            StepMode: 'ColorControl.Enums.HueStepMode' = None
            StepSize: 'int' = None
            TransitionTime: 'int' = None
            ColorTemperatureMinimum: 'int' = None
            ColorTemperatureMaximum: 'int' = None
            OptionsMask: 'int' = None
            OptionsOverride: 'int' = None


@dataclass
class BallastConfiguration:
    id: typing.ClassVar[int] = 0x0301


@dataclass
class IlluminanceMeasurement:
    id: typing.ClassVar[int] = 0x0400


@dataclass
class IlluminanceLevelSensing:
    id: typing.ClassVar[int] = 0x0401


@dataclass
class TemperatureMeasurement:
    id: typing.ClassVar[int] = 0x0402


@dataclass
class PressureMeasurement:
    id: typing.ClassVar[int] = 0x0403


@dataclass
class FlowMeasurement:
    id: typing.ClassVar[int] = 0x0404


@dataclass
class RelativeHumidityMeasurement:
    id: typing.ClassVar[int] = 0x0405


@dataclass
class OccupancySensing:
    id: typing.ClassVar[int] = 0x0406


@dataclass
class CarbonMonoxideConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x040C


@dataclass
class CarbonDioxideConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x040D


@dataclass
class EthyleneConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x040E


@dataclass
class EthyleneOxideConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x040F


@dataclass
class HydrogenConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0410


@dataclass
class HydrogenSulphideConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0411


@dataclass
class NitricOxideConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0412


@dataclass
class NitrogenDioxideConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0413


@dataclass
class OxygenConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0414


@dataclass
class OzoneConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0415


@dataclass
class SulfurDioxideConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0416


@dataclass
class DissolvedOxygenConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0417


@dataclass
class BromateConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0418


@dataclass
class ChloraminesConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0419


@dataclass
class ChlorineConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x041A


@dataclass
class FecalColiformAndEColiConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x041B


@dataclass
class FluorideConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x041C


@dataclass
class HaloaceticAcidsConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x041D


@dataclass
class TotalTrihalomethanesConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x041E


@dataclass
class TotalColiformBacteriaConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x041F


@dataclass
class TurbidityConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0420


@dataclass
class CopperConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0421


@dataclass
class LeadConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0422


@dataclass
class ManganeseConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0423


@dataclass
class SulfateConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0424


@dataclass
class BromodichloromethaneConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0425


@dataclass
class BromoformConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0426


@dataclass
class ChlorodibromomethaneConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0427


@dataclass
class ChloroformConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0428


@dataclass
class SodiumConcentrationMeasurement:
    id: typing.ClassVar[int] = 0x0429


@dataclass
class IasZone:
    id: typing.ClassVar[int] = 0x0500

    class Enums:
        class IasEnrollResponseCode(IntEnum):
            kSuccess = 0x00
            kNotSupported = 0x01
            kNoEnrollPermit = 0x02
            kTooManyZones = 0x03

        class IasZoneType(IntEnum):
            kStandardCie = 0x00
            kMotionSensor = 0x0D
            kContactSwitch = 0x15
            kFireSensor = 0x28
            kWaterSensor = 0x2A
            kGasSensor = 0x2B
            kPersonalEmergencyDevice = 0x2C
            kVibrationMovementSensor = 0x2D
            kRemoteControl = 0x10F
            kKeyFob = 0x115
            kKeypad = 0x21D
            kStandardWarningDevice = 0x225
            kGlassBreakSensor = 0x226
            kCarbonMonoxideSensor = 0x227
            kSecurityRepeater = 0x229
            kInvalidZoneType = 0xFFFF

    class Commands:
        @dataclass
        class ZoneEnrollResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0500
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="EnrollResponseCode", Tag=0, Type=IasZone.Enums.IasEnrollResponseCode),
                        ClusterObjectFieldDescriptor(
                            Label="ZoneId", Tag=1, Type=int),
                    ])

            EnrollResponseCode: 'IasZone.Enums.IasEnrollResponseCode' = None
            ZoneId: 'int' = None

        @dataclass
        class ZoneStatusChangeNotification(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0500
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ZoneStatus", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ExtendedStatus", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ZoneId", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Delay", Tag=3, Type=int),
                    ])

            ZoneStatus: 'int' = None
            ExtendedStatus: 'int' = None
            ZoneId: 'int' = None
            Delay: 'int' = None

        @dataclass
        class InitiateNormalOperationMode(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0500
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class ZoneEnrollRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0500
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ZoneType", Tag=0, Type=IasZone.Enums.IasZoneType),
                        ClusterObjectFieldDescriptor(
                            Label="ManufacturerCode", Tag=1, Type=int),
                    ])

            ZoneType: 'IasZone.Enums.IasZoneType' = None
            ManufacturerCode: 'int' = None

        @dataclass
        class InitiateTestMode(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0500
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="TestModeDuration", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="CurrentZoneSensitivityLevel", Tag=1, Type=int),
                    ])

            TestModeDuration: 'int' = None
            CurrentZoneSensitivityLevel: 'int' = None

        @dataclass
        class InitiateNormalOperationModeResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0500
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class InitiateTestModeResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0500
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])


@dataclass
class IasAce:
    id: typing.ClassVar[int] = 0x0501

    class Enums:
        class IasAceAlarmStatus(IntEnum):
            kNoAlarm = 0x00
            kBurglar = 0x01
            kFire = 0x02
            kEmergency = 0x03
            kPolicePanic = 0x04
            kFirePanic = 0x05
            kEmergencyPanic = 0x06

        class IasAceArmMode(IntEnum):
            kDisarm = 0x00
            kArmDayHomeZonesOnly = 0x01
            kArmNightSleepZonesOnly = 0x02
            kArmAllZones = 0x03

        class IasAceArmNotification(IntEnum):
            kAllZonesDisarmed = 0x00
            kOnlyDayHomeZonesArmed = 0x01
            kOnlyNightSleepZonesArmed = 0x02
            kAllZonesArmed = 0x03
            kInvalidArmDisarmCode = 0x04
            kNotReadyToArm = 0x05
            kAlreadyDisarmed = 0x06

        class IasAceAudibleNotification(IntEnum):
            kMute = 0x00
            kDefaultSound = 0x01

        class IasAceBypassResult(IntEnum):
            kZoneBypassed = 0x00
            kZoneNotBypassed = 0x01
            kNotAllowed = 0x02
            kInvalidZoneId = 0x03
            kUnknownZoneId = 0x04
            kInvalidArmDisarmCode = 0x05

        class IasAcePanelStatus(IntEnum):
            kPanelDisarmed = 0x00
            kArmedStay = 0x01
            kArmedNight = 0x02
            kArmedAway = 0x03
            kExitDelay = 0x04
            kEntryDelay = 0x05
            kNotReadyToArm = 0x06
            kInAlarm = 0x07
            kArmingStay = 0x08
            kArmingNight = 0x09
            kArmingAway = 0x0A

        class IasZoneType(IntEnum):
            kStandardCie = 0x00
            kMotionSensor = 0x0D
            kContactSwitch = 0x15
            kFireSensor = 0x28
            kWaterSensor = 0x2A
            kGasSensor = 0x2B
            kPersonalEmergencyDevice = 0x2C
            kVibrationMovementSensor = 0x2D
            kRemoteControl = 0x10F
            kKeyFob = 0x115
            kKeypad = 0x21D
            kStandardWarningDevice = 0x225
            kGlassBreakSensor = 0x226
            kCarbonMonoxideSensor = 0x227
            kSecurityRepeater = 0x229
            kInvalidZoneType = 0xFFFF

    class Structs:
        @dataclass
        class IasAceZoneStatusResult(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ZoneId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ZoneStatus", Tag=1, Type=int),
                    ])

            ZoneId: 'int' = None
            ZoneStatus: 'int' = None

    class Commands:
        @dataclass
        class Arm(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ArmMode", Tag=0, Type=IasAce.Enums.IasAceArmMode),
                        ClusterObjectFieldDescriptor(
                            Label="ArmDisarmCode", Tag=1, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="ZoneId", Tag=2, Type=int),
                    ])

            ArmMode: 'IasAce.Enums.IasAceArmMode' = None
            ArmDisarmCode: 'str' = None
            ZoneId: 'int' = None

        @dataclass
        class ArmResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ArmNotification", Tag=0, Type=IasAce.Enums.IasAceArmNotification),
                    ])

            ArmNotification: 'IasAce.Enums.IasAceArmNotification' = None

        @dataclass
        class Bypass(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="NumberOfZones", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ZoneIds", Tag=1, Type=int, IsArray=True),
                        ClusterObjectFieldDescriptor(
                            Label="ArmDisarmCode", Tag=2, Type=str),
                    ])

            NumberOfZones: 'int' = None
            ZoneIds: typing.List['int'] = None
            ArmDisarmCode: 'str' = None

        @dataclass
        class GetZoneIdMapResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Section0", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Section1", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Section2", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Section3", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Section4", Tag=4, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Section5", Tag=5, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Section6", Tag=6, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Section7", Tag=7, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Section8", Tag=8, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Section9", Tag=9, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Section10", Tag=10, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Section11", Tag=11, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Section12", Tag=12, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Section13", Tag=13, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Section14", Tag=14, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Section15", Tag=15, Type=int),
                    ])

            Section0: 'int' = None
            Section1: 'int' = None
            Section2: 'int' = None
            Section3: 'int' = None
            Section4: 'int' = None
            Section5: 'int' = None
            Section6: 'int' = None
            Section7: 'int' = None
            Section8: 'int' = None
            Section9: 'int' = None
            Section10: 'int' = None
            Section11: 'int' = None
            Section12: 'int' = None
            Section13: 'int' = None
            Section14: 'int' = None
            Section15: 'int' = None

        @dataclass
        class Emergency(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class GetZoneInformationResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ZoneId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ZoneType", Tag=1, Type=IasAce.Enums.IasZoneType),
                        ClusterObjectFieldDescriptor(
                            Label="IeeeAddress", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ZoneLabel", Tag=3, Type=str),
                    ])

            ZoneId: 'int' = None
            ZoneType: 'IasAce.Enums.IasZoneType' = None
            IeeeAddress: 'int' = None
            ZoneLabel: 'str' = None

        @dataclass
        class Fire(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class ZoneStatusChanged(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ZoneId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ZoneStatus", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="AudibleNotification", Tag=2, Type=IasAce.Enums.IasAceAudibleNotification),
                        ClusterObjectFieldDescriptor(
                            Label="ZoneLabel", Tag=3, Type=str),
                    ])

            ZoneId: 'int' = None
            ZoneStatus: 'int' = None
            AudibleNotification: 'IasAce.Enums.IasAceAudibleNotification' = None
            ZoneLabel: 'str' = None

        @dataclass
        class Panic(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class PanelStatusChanged(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PanelStatus", Tag=0, Type=IasAce.Enums.IasAcePanelStatus),
                        ClusterObjectFieldDescriptor(
                            Label="SecondsRemaining", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="AudibleNotification", Tag=2, Type=IasAce.Enums.IasAceAudibleNotification),
                        ClusterObjectFieldDescriptor(
                            Label="AlarmStatus", Tag=3, Type=IasAce.Enums.IasAceAlarmStatus),
                    ])

            PanelStatus: 'IasAce.Enums.IasAcePanelStatus' = None
            SecondsRemaining: 'int' = None
            AudibleNotification: 'IasAce.Enums.IasAceAudibleNotification' = None
            AlarmStatus: 'IasAce.Enums.IasAceAlarmStatus' = None

        @dataclass
        class GetZoneIdMap(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class GetPanelStatusResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="PanelStatus", Tag=0, Type=IasAce.Enums.IasAcePanelStatus),
                        ClusterObjectFieldDescriptor(
                            Label="SecondsRemaining", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="AudibleNotification", Tag=2, Type=IasAce.Enums.IasAceAudibleNotification),
                        ClusterObjectFieldDescriptor(
                            Label="AlarmStatus", Tag=3, Type=IasAce.Enums.IasAceAlarmStatus),
                    ])

            PanelStatus: 'IasAce.Enums.IasAcePanelStatus' = None
            SecondsRemaining: 'int' = None
            AudibleNotification: 'IasAce.Enums.IasAceAudibleNotification' = None
            AlarmStatus: 'IasAce.Enums.IasAceAlarmStatus' = None

        @dataclass
        class GetZoneInformation(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0006

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ZoneId", Tag=0, Type=int),
                    ])

            ZoneId: 'int' = None

        @dataclass
        class SetBypassedZoneList(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0006

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="NumberOfZones", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ZoneIds", Tag=1, Type=int, IsArray=True),
                    ])

            NumberOfZones: 'int' = None
            ZoneIds: typing.List['int'] = None

        @dataclass
        class GetPanelStatus(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0007

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class BypassResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0007

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="NumberOfZones", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="BypassResult", Tag=1, Type=IasAce.Enums.IasAceBypassResult, IsArray=True),
                    ])

            NumberOfZones: 'int' = None
            BypassResult: typing.List['IasAce.Enums.IasAceBypassResult'] = None

        @dataclass
        class GetBypassedZoneList(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0008

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class GetZoneStatusResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0008

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ZoneStatusComplete", Tag=0, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="NumberOfZones", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ZoneStatusResult", Tag=2, Type=IasAce.Structs.IasAceZoneStatusResult, IsArray=True),
                    ])

            ZoneStatusComplete: 'bool' = None
            NumberOfZones: 'int' = None
            ZoneStatusResult: typing.List['IasAce.Structs.IasAceZoneStatusResult'] = None

        @dataclass
        class GetZoneStatus(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0501
            command_id: typing.ClassVar[int] = 0x0009

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="StartingZoneId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="MaxNumberOfZoneIds", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ZoneStatusMaskFlag", Tag=2, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="ZoneStatusMask", Tag=3, Type=int),
                    ])

            StartingZoneId: 'int' = None
            MaxNumberOfZoneIds: 'int' = None
            ZoneStatusMaskFlag: 'bool' = None
            ZoneStatusMask: 'int' = None


@dataclass
class IasWd:
    id: typing.ClassVar[int] = 0x0502

    class Commands:
        @dataclass
        class StartWarning(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0502
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="WarningInfo", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="WarningDuration", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="StrobeDutyCycle", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="StrobeLevel", Tag=3, Type=int),
                    ])

            WarningInfo: 'int' = None
            WarningDuration: 'int' = None
            StrobeDutyCycle: 'int' = None
            StrobeLevel: 'int' = None

        @dataclass
        class Squawk(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0502
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="SquawkInfo", Tag=0, Type=int),
                    ])

            SquawkInfo: 'int' = None


@dataclass
class WakeOnLan:
    id: typing.ClassVar[int] = 0x0503


@dataclass
class TvChannel:
    id: typing.ClassVar[int] = 0x0504

    class Enums:
        class TvChannelErrorType(IntEnum):
            kMultipleMatches = 0x00
            kNoMatches = 0x01

        class TvChannelLineupInfoType(IntEnum):
            kMso = 0x00

    class Structs:
        @dataclass
        class TvChannelInfo(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MajorNumber", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="MinorNumber", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Name", Tag=2, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="CallSign", Tag=3, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="AffiliateCallSign", Tag=4, Type=bytes),
                    ])

            MajorNumber: 'int' = None
            MinorNumber: 'int' = None
            Name: 'bytes' = None
            CallSign: 'bytes' = None
            AffiliateCallSign: 'bytes' = None

        @dataclass
        class TvChannelLineupInfo(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="OperatorName", Tag=0, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="LineupName", Tag=1, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="PostalCode", Tag=2, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="LineupInfoType", Tag=3, Type=TvChannel.Enums.TvChannelLineupInfoType),
                    ])

            OperatorName: 'str' = None
            LineupName: 'str' = None
            PostalCode: 'str' = None
            LineupInfoType: 'TvChannel.Enums.TvChannelLineupInfoType' = None

    class Commands:
        @dataclass
        class ChangeChannel(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0504
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Match", Tag=0, Type=str),
                    ])

            Match: 'str' = None

        @dataclass
        class ChangeChannelResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0504
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ChannelMatch", Tag=0, Type=TvChannel.Structs.TvChannelInfo, IsArray=True),
                        ClusterObjectFieldDescriptor(
                            Label="ErrorType", Tag=1, Type=TvChannel.Enums.TvChannelErrorType),
                    ])

            ChannelMatch: typing.List['TvChannel.Structs.TvChannelInfo'] = None
            ErrorType: 'TvChannel.Enums.TvChannelErrorType' = None

        @dataclass
        class ChangeChannelByNumber(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0504
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MajorNumber", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="MinorNumber", Tag=1, Type=int),
                    ])

            MajorNumber: 'int' = None
            MinorNumber: 'int' = None

        @dataclass
        class SkipChannel(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0504
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Count", Tag=0, Type=int),
                    ])

            Count: 'int' = None


@dataclass
class TargetNavigator:
    id: typing.ClassVar[int] = 0x0505

    class Enums:
        class NavigateTargetStatus(IntEnum):
            kSuccess = 0x00
            kAppNotAvailable = 0x01
            kSystemBusy = 0x02

    class Structs:
        @dataclass
        class NavigateTargetTargetInfo(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Identifier", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Name", Tag=1, Type=bytes),
                    ])

            Identifier: 'int' = None
            Name: 'bytes' = None

    class Commands:
        @dataclass
        class NavigateTarget(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0505
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Target", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Data", Tag=1, Type=str),
                    ])

            Target: 'int' = None
            Data: 'str' = None

        @dataclass
        class NavigateTargetResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0505
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=TargetNavigator.Enums.NavigateTargetStatus),
                        ClusterObjectFieldDescriptor(
                            Label="Data", Tag=1, Type=str),
                    ])

            Status: 'TargetNavigator.Enums.NavigateTargetStatus' = None
            Data: 'str' = None


@dataclass
class MediaPlayback:
    id: typing.ClassVar[int] = 0x0506

    class Enums:
        class MediaPlaybackState(IntEnum):
            kPlaying = 0x00
            kPaused = 0x01
            kNotPlaying = 0x02
            kBuffering = 0x03

        class MediaPlaybackStatus(IntEnum):
            kSuccess = 0x00
            kInvalidStateForCommand = 0x01
            kNotAllowed = 0x02
            kNotActive = 0x03
            kSpeedOutOfRange = 0x04
            kSeekOutOfRange = 0x05

    class Structs:
        @dataclass
        class MediaPlaybackPosition(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="UpdatedAt", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Position", Tag=1, Type=int),
                    ])

            UpdatedAt: 'int' = None
            Position: 'int' = None

    class Commands:
        @dataclass
        class MediaPlay(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class MediaPlayResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MediaPlaybackStatus", Tag=0, Type=MediaPlayback.Enums.MediaPlaybackStatus),
                    ])

            MediaPlaybackStatus: 'MediaPlayback.Enums.MediaPlaybackStatus' = None

        @dataclass
        class MediaPause(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class MediaPauseResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MediaPlaybackStatus", Tag=0, Type=MediaPlayback.Enums.MediaPlaybackStatus),
                    ])

            MediaPlaybackStatus: 'MediaPlayback.Enums.MediaPlaybackStatus' = None

        @dataclass
        class MediaStop(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class MediaStopResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MediaPlaybackStatus", Tag=0, Type=MediaPlayback.Enums.MediaPlaybackStatus),
                    ])

            MediaPlaybackStatus: 'MediaPlayback.Enums.MediaPlaybackStatus' = None

        @dataclass
        class MediaStartOver(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class MediaStartOverResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MediaPlaybackStatus", Tag=0, Type=MediaPlayback.Enums.MediaPlaybackStatus),
                    ])

            MediaPlaybackStatus: 'MediaPlayback.Enums.MediaPlaybackStatus' = None

        @dataclass
        class MediaPrevious(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class MediaPreviousResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MediaPlaybackStatus", Tag=0, Type=MediaPlayback.Enums.MediaPlaybackStatus),
                    ])

            MediaPlaybackStatus: 'MediaPlayback.Enums.MediaPlaybackStatus' = None

        @dataclass
        class MediaNext(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class MediaNextResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MediaPlaybackStatus", Tag=0, Type=MediaPlayback.Enums.MediaPlaybackStatus),
                    ])

            MediaPlaybackStatus: 'MediaPlayback.Enums.MediaPlaybackStatus' = None

        @dataclass
        class MediaRewind(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0006

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class MediaRewindResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0006

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MediaPlaybackStatus", Tag=0, Type=MediaPlayback.Enums.MediaPlaybackStatus),
                    ])

            MediaPlaybackStatus: 'MediaPlayback.Enums.MediaPlaybackStatus' = None

        @dataclass
        class MediaFastForward(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0007

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class MediaFastForwardResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0007

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MediaPlaybackStatus", Tag=0, Type=MediaPlayback.Enums.MediaPlaybackStatus),
                    ])

            MediaPlaybackStatus: 'MediaPlayback.Enums.MediaPlaybackStatus' = None

        @dataclass
        class MediaSkipForward(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0008

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="DeltaPositionMilliseconds", Tag=0, Type=int),
                    ])

            DeltaPositionMilliseconds: 'int' = None

        @dataclass
        class MediaSkipForwardResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0008

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MediaPlaybackStatus", Tag=0, Type=MediaPlayback.Enums.MediaPlaybackStatus),
                    ])

            MediaPlaybackStatus: 'MediaPlayback.Enums.MediaPlaybackStatus' = None

        @dataclass
        class MediaSkipBackward(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0009

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="DeltaPositionMilliseconds", Tag=0, Type=int),
                    ])

            DeltaPositionMilliseconds: 'int' = None

        @dataclass
        class MediaSkipBackwardResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x0009

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MediaPlaybackStatus", Tag=0, Type=MediaPlayback.Enums.MediaPlaybackStatus),
                    ])

            MediaPlaybackStatus: 'MediaPlayback.Enums.MediaPlaybackStatus' = None

        @dataclass
        class MediaSeek(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x000A

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Position", Tag=0, Type=int),
                    ])

            Position: 'int' = None

        @dataclass
        class MediaSeekResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0506
            command_id: typing.ClassVar[int] = 0x000B

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MediaPlaybackStatus", Tag=0, Type=MediaPlayback.Enums.MediaPlaybackStatus),
                    ])

            MediaPlaybackStatus: 'MediaPlayback.Enums.MediaPlaybackStatus' = None


@dataclass
class MediaInput:
    id: typing.ClassVar[int] = 0x0507

    class Enums:
        class MediaInputType(IntEnum):
            kInternal = 0x00
            kAux = 0x01
            kCoax = 0x02
            kComposite = 0x03
            kHdmi = 0x04
            kInput = 0x05
            kLine = 0x06
            kOptical = 0x07
            kVideo = 0x08
            kScart = 0x09
            kUsb = 0x0A
            kOther = 0x0B

    class Structs:
        @dataclass
        class MediaInputInfo(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Index", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="InputType", Tag=1, Type=MediaInput.Enums.MediaInputType),
                        ClusterObjectFieldDescriptor(
                            Label="Name", Tag=2, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="Description", Tag=3, Type=bytes),
                    ])

            Index: 'int' = None
            InputType: 'MediaInput.Enums.MediaInputType' = None
            Name: 'bytes' = None
            Description: 'bytes' = None

    class Commands:
        @dataclass
        class SelectInput(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0507
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Index", Tag=0, Type=int),
                    ])

            Index: 'int' = None

        @dataclass
        class ShowInputStatus(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0507
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class HideInputStatus(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0507
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class RenameInput(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0507
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Index", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Name", Tag=1, Type=str),
                    ])

            Index: 'int' = None
            Name: 'str' = None


@dataclass
class LowPower:
    id: typing.ClassVar[int] = 0x0508

    class Commands:
        @dataclass
        class Sleep(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0508
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])


@dataclass
class KeypadInput:
    id: typing.ClassVar[int] = 0x0509

    class Enums:
        class KeypadInputCecKeyCode(IntEnum):
            kSelect = 0x00
            kUp = 0x01
            kDown = 0x02
            kLeft = 0x03
            kRight = 0x04
            kRightUp = 0x05
            kRightDown = 0x06
            kLeftUp = 0x07
            kLeftDown = 0x08
            kRootMenu = 0x09
            kSetupMenu = 0x0A
            kContentsMenu = 0x0B
            kFavoriteMenu = 0x0C
            kExit = 0x0D
            kMediaTopMenu = 0x10
            kMediaContextSensitiveMenu = 0x11
            kNumberEntryMode = 0x1D
            kNumber11 = 0x1E
            kNumber12 = 0x1F
            kNumber0OrNumber10 = 0x20
            kNumbers1 = 0x21
            kNumbers2 = 0x22
            kNumbers3 = 0x23
            kNumbers4 = 0x24
            kNumbers5 = 0x25
            kNumbers6 = 0x26
            kNumbers7 = 0x27
            kNumbers8 = 0x28
            kNumbers9 = 0x29
            kDot = 0x2A
            kEnter = 0x2B
            kClear = 0x2C
            kNextFavorite = 0x2F
            kChannelUp = 0x30
            kChannelDown = 0x31
            kPreviousChannel = 0x32
            kSoundSelect = 0x33
            kInputSelect = 0x34
            kDisplayInformation = 0x35
            kHelp = 0x36
            kPageUp = 0x37
            kPageDown = 0x38
            kPower = 0x40
            kVolumeUp = 0x41
            kVolumeDown = 0x42
            kMute = 0x43
            kPlay = 0x44
            kStop = 0x45
            kPause = 0x46
            kRecord = 0x47
            kRewind = 0x48
            kFastForward = 0x49
            kEject = 0x4A
            kForward = 0x4B
            kBackward = 0x4C
            kStopRecord = 0x4D
            kPauseRecord = 0x4E
            kReserved = 0x4F
            kAngle = 0x50
            kSubPicture = 0x51
            kVideoOnDemand = 0x52
            kElectronicProgramGuide = 0x53
            kTimerProgramming = 0x54
            kInitialConfiguration = 0x55
            kSelectBroadcastType = 0x56
            kSelectSoundPresentation = 0x57
            kPlayFunction = 0x60
            kPausePlayFunction = 0x61
            kRecordFunction = 0x62
            kPauseRecordFunction = 0x63
            kStopFunction = 0x64
            kMuteFunction = 0x65
            kRestoreVolumeFunction = 0x66
            kTuneFunction = 0x67
            kSelectMediaFunction = 0x68
            kSelectAvInputFunction = 0x69
            kSelectAudioInputFunction = 0x6A
            kPowerToggleFunction = 0x6B
            kPowerOffFunction = 0x6C
            kPowerOnFunction = 0x6D
            kF1Blue = 0x71
            kF2Red = 0x72
            kF3Green = 0x73
            kF4Yellow = 0x74
            kF5 = 0x75
            kData = 0x76

        class KeypadInputStatus(IntEnum):
            kSuccess = 0x00
            kUnsupportedKey = 0x01
            kInvalidKeyInCurrentState = 0x02

    class Commands:
        @dataclass
        class SendKey(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0509
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="KeyCode", Tag=0, Type=KeypadInput.Enums.KeypadInputCecKeyCode),
                    ])

            KeyCode: 'KeypadInput.Enums.KeypadInputCecKeyCode' = None

        @dataclass
        class SendKeyResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0509
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=KeypadInput.Enums.KeypadInputStatus),
                    ])

            Status: 'KeypadInput.Enums.KeypadInputStatus' = None


@dataclass
class ContentLauncher:
    id: typing.ClassVar[int] = 0x050A

    class Enums:
        class ContentLaunchMetricType(IntEnum):
            kPixels = 0x00
            kPercentage = 0x01

        class ContentLaunchParameterEnum(IntEnum):
            kActor = 0x00
            kChannel = 0x01
            kCharacter = 0x02
            kEvent = 0x03
            kFranchise = 0x04
            kGenre = 0x05
            kLeague = 0x06
            kPopularity = 0x07
            kSport = 0x08
            kSportsTeam = 0x09
            kVideo = 0x0A

        class ContentLaunchStatus(IntEnum):
            kSuccess = 0x00
            kUrlNotAvailable = 0x01
            kAuthFailed = 0x02

        class ContentLaunchStreamingType(IntEnum):
            kDash = 0x00
            kHls = 0x01

    class Structs:
        @dataclass
        class ContentLaunchAdditionalInfo(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Name", Tag=0, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="Value", Tag=1, Type=str),
                    ])

            Name: 'str' = None
            Value: 'str' = None

        @dataclass
        class ContentLaunchParamater(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Type", Tag=0, Type=ContentLauncher.Enums.ContentLaunchParameterEnum),
                        ClusterObjectFieldDescriptor(
                            Label="Value", Tag=1, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="ExternalIDList", Tag=2, Type=ContentLauncher.Structs.ContentLaunchAdditionalInfo, IsArray=True),
                    ])

            Type: 'ContentLauncher.Enums.ContentLaunchParameterEnum' = None
            Value: 'str' = None
            ExternalIDList: typing.List['ContentLauncher.Structs.ContentLaunchAdditionalInfo'] = None

        @dataclass
        class ContentLaunchBrandingInformation(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ProviderName", Tag=0, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="Background", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Logo", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ProgressBar", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Splash", Tag=4, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="WaterMark", Tag=5, Type=int),
                    ])

            ProviderName: 'str' = None
            Background: 'int' = None
            Logo: 'int' = None
            ProgressBar: 'int' = None
            Splash: 'int' = None
            WaterMark: 'int' = None

        @dataclass
        class ContentLaunchDimension(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Width", Tag=0, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="Height", Tag=1, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="Metric", Tag=2, Type=ContentLauncher.Enums.ContentLaunchMetricType),
                    ])

            Width: 'str' = None
            Height: 'str' = None
            Metric: 'ContentLauncher.Enums.ContentLaunchMetricType' = None

        @dataclass
        class ContentLaunchStyleInformation(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ImageUrl", Tag=0, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="Color", Tag=1, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="Size", Tag=2, Type=int),
                    ])

            ImageUrl: 'str' = None
            Color: 'str' = None
            Size: 'int' = None

    class Commands:
        @dataclass
        class LaunchContent(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050A
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="AutoPlay", Tag=0, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="Data", Tag=1, Type=str),
                    ])

            AutoPlay: 'bool' = None
            Data: 'str' = None

        @dataclass
        class LaunchContentResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050A
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Data", Tag=0, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="ContentLaunchStatus", Tag=1, Type=ContentLauncher.Enums.ContentLaunchStatus),
                    ])

            Data: 'str' = None
            ContentLaunchStatus: 'ContentLauncher.Enums.ContentLaunchStatus' = None

        @dataclass
        class LaunchURL(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050A
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ContentURL", Tag=0, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="DisplayString", Tag=1, Type=str),
                    ])

            ContentURL: 'str' = None
            DisplayString: 'str' = None

        @dataclass
        class LaunchURLResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050A
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Data", Tag=0, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="ContentLaunchStatus", Tag=1, Type=ContentLauncher.Enums.ContentLaunchStatus),
                    ])

            Data: 'str' = None
            ContentLaunchStatus: 'ContentLauncher.Enums.ContentLaunchStatus' = None


@dataclass
class AudioOutput:
    id: typing.ClassVar[int] = 0x050B

    class Enums:
        class AudioOutputType(IntEnum):
            kHdmi = 0x00
            kBt = 0x01
            kOptical = 0x02
            kHeadphone = 0x03
            kInternal = 0x04
            kOther = 0x05

    class Structs:
        @dataclass
        class AudioOutputInfo(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Index", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OutputType", Tag=1, Type=AudioOutput.Enums.AudioOutputType),
                        ClusterObjectFieldDescriptor(
                            Label="Name", Tag=2, Type=bytes),
                    ])

            Index: 'int' = None
            OutputType: 'AudioOutput.Enums.AudioOutputType' = None
            Name: 'bytes' = None

    class Commands:
        @dataclass
        class SelectOutput(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050B
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Index", Tag=0, Type=int),
                    ])

            Index: 'int' = None

        @dataclass
        class RenameOutput(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050B
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Index", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Name", Tag=1, Type=str),
                    ])

            Index: 'int' = None
            Name: 'str' = None


@dataclass
class ApplicationLauncher:
    id: typing.ClassVar[int] = 0x050C

    class Enums:
        class ApplicationLauncherStatus(IntEnum):
            kSuccess = 0x00
            kAppNotAvailable = 0x01
            kSystemBusy = 0x02

    class Structs:
        @dataclass
        class ApplicationLauncherApp(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="CatalogVendorId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ApplicationId", Tag=1, Type=str),
                    ])

            CatalogVendorId: 'int' = None
            ApplicationId: 'str' = None

    class Commands:
        @dataclass
        class LaunchApp(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050C
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Data", Tag=0, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="CatalogVendorId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ApplicationId", Tag=2, Type=str),
                    ])

            Data: 'str' = None
            CatalogVendorId: 'int' = None
            ApplicationId: 'str' = None

        @dataclass
        class LaunchAppResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050C
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=ApplicationLauncher.Enums.ApplicationLauncherStatus),
                        ClusterObjectFieldDescriptor(
                            Label="Data", Tag=1, Type=str),
                    ])

            Status: 'ApplicationLauncher.Enums.ApplicationLauncherStatus' = None
            Data: 'str' = None


@dataclass
class ApplicationBasic:
    id: typing.ClassVar[int] = 0x050D

    class Enums:
        class ApplicationBasicStatus(IntEnum):
            kStopped = 0x00
            kActiveVisibleFocus = 0x01
            kActiveHidden = 0x02
            kActiveVisibleNotFocus = 0x03

    class Commands:
        @dataclass
        class ChangeStatus(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050D
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=0, Type=ApplicationBasic.Enums.ApplicationBasicStatus),
                    ])

            Status: 'ApplicationBasic.Enums.ApplicationBasicStatus' = None


@dataclass
class AccountLogin:
    id: typing.ClassVar[int] = 0x050E

    class Commands:
        @dataclass
        class GetSetupPIN(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050E
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="TempAccountIdentifier", Tag=0, Type=str),
                    ])

            TempAccountIdentifier: 'str' = None

        @dataclass
        class GetSetupPINResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050E
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="SetupPIN", Tag=0, Type=str),
                    ])

            SetupPIN: 'str' = None

        @dataclass
        class Login(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050E
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="TempAccountIdentifier", Tag=0, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="SetupPIN", Tag=1, Type=str),
                    ])

            TempAccountIdentifier: 'str' = None
            SetupPIN: 'str' = None


@dataclass
class TestCluster:
    id: typing.ClassVar[int] = 0x050F

    class Enums:
        class SimpleEnum(IntEnum):
            kUnspecified = 0x00
            kValueA = 0x01
            kValueB = 0x02
            kValueC = 0x03

    class Structs:
        @dataclass
        class SimpleStruct(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="A", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="B", Tag=1, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="C", Tag=2, Type=TestCluster.Enums.SimpleEnum),
                        ClusterObjectFieldDescriptor(
                            Label="D", Tag=3, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="E", Tag=4, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="F", Tag=5, Type=int),
                    ])

            A: 'int' = None
            B: 'bool' = None
            C: 'TestCluster.Enums.SimpleEnum' = None
            D: 'bytes' = None
            E: 'str' = None
            F: 'int' = None

        @dataclass
        class NestedStruct(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="A", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="B", Tag=1, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="C", Tag=2, Type=TestCluster.Structs.SimpleStruct),
                    ])

            A: 'int' = None
            B: 'bool' = None
            C: 'TestCluster.Structs.SimpleStruct' = None

        @dataclass
        class NestedStructList(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="A", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="B", Tag=1, Type=bool),
                        ClusterObjectFieldDescriptor(
                            Label="C", Tag=2, Type=TestCluster.Structs.SimpleStruct),
                        ClusterObjectFieldDescriptor(
                            Label="D", Tag=3, Type=TestCluster.Structs.SimpleStruct, IsArray=True),
                        ClusterObjectFieldDescriptor(
                            Label="E", Tag=4, Type=int, IsArray=True),
                        ClusterObjectFieldDescriptor(
                            Label="F", Tag=5, Type=bytes, IsArray=True),
                        ClusterObjectFieldDescriptor(
                            Label="G", Tag=6, Type=int, IsArray=True),
                    ])

            A: 'int' = None
            B: 'bool' = None
            C: 'TestCluster.Structs.SimpleStruct' = None
            D: typing.List['TestCluster.Structs.SimpleStruct'] = None
            E: typing.List['int'] = None
            F: typing.List['bytes'] = None
            G: typing.List['int'] = None

        @dataclass
        class DoubleNestedStructList(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="A", Tag=0, Type=TestCluster.Structs.NestedStructList, IsArray=True),
                    ])

            A: typing.List['TestCluster.Structs.NestedStructList'] = None

        @dataclass
        class TestListStructOctet(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="FabricIndex", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="OperationalCert", Tag=1, Type=bytes),
                    ])

            FabricIndex: 'int' = None
            OperationalCert: 'bytes' = None

    class Commands:
        @dataclass
        class Test(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050F
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class TestSpecificResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050F
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ReturnValue", Tag=0, Type=int),
                    ])

            ReturnValue: 'int' = None

        @dataclass
        class TestNotHandled(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050F
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class TestAddArgumentsResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050F
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ReturnValue", Tag=0, Type=int),
                    ])

            ReturnValue: 'int' = None

        @dataclass
        class TestSpecific(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050F
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class TestSimpleArgumentResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050F
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ReturnValue", Tag=0, Type=bool),
                    ])

            ReturnValue: 'bool' = None

        @dataclass
        class TestUnknownCommand(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050F
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class TestStructArrayArgumentResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050F
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Arg1", Tag=0, Type=TestCluster.Structs.NestedStructList, IsArray=True),
                        ClusterObjectFieldDescriptor(
                            Label="Arg2", Tag=1, Type=TestCluster.Structs.SimpleStruct, IsArray=True),
                        ClusterObjectFieldDescriptor(
                            Label="Arg3", Tag=2, Type=TestCluster.Enums.SimpleEnum, IsArray=True),
                        ClusterObjectFieldDescriptor(
                            Label="Arg4", Tag=3, Type=bool, IsArray=True),
                        ClusterObjectFieldDescriptor(
                            Label="Arg5", Tag=4, Type=TestCluster.Enums.SimpleEnum),
                        ClusterObjectFieldDescriptor(
                            Label="Arg6", Tag=5, Type=bool),
                    ])

            Arg1: typing.List['TestCluster.Structs.NestedStructList'] = None
            Arg2: typing.List['TestCluster.Structs.SimpleStruct'] = None
            Arg3: typing.List['TestCluster.Enums.SimpleEnum'] = None
            Arg4: typing.List['bool'] = None
            Arg5: 'TestCluster.Enums.SimpleEnum' = None
            Arg6: 'bool' = None

        @dataclass
        class TestAddArguments(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050F
            command_id: typing.ClassVar[int] = 0x0004

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Arg1", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Arg2", Tag=1, Type=int),
                    ])

            Arg1: 'int' = None
            Arg2: 'int' = None

        @dataclass
        class TestSimpleArgumentRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050F
            command_id: typing.ClassVar[int] = 0x0005

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Arg1", Tag=0, Type=bool),
                    ])

            Arg1: 'bool' = None

        @dataclass
        class TestStructArrayArgumentRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050F
            command_id: typing.ClassVar[int] = 0x0006

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Arg1", Tag=0, Type=TestCluster.Structs.NestedStructList, IsArray=True),
                        ClusterObjectFieldDescriptor(
                            Label="Arg2", Tag=1, Type=TestCluster.Structs.SimpleStruct, IsArray=True),
                        ClusterObjectFieldDescriptor(
                            Label="Arg3", Tag=2, Type=TestCluster.Enums.SimpleEnum, IsArray=True),
                        ClusterObjectFieldDescriptor(
                            Label="Arg4", Tag=3, Type=bool, IsArray=True),
                        ClusterObjectFieldDescriptor(
                            Label="Arg5", Tag=4, Type=TestCluster.Enums.SimpleEnum),
                        ClusterObjectFieldDescriptor(
                            Label="Arg6", Tag=5, Type=bool),
                    ])

            Arg1: typing.List['TestCluster.Structs.NestedStructList'] = None
            Arg2: typing.List['TestCluster.Structs.SimpleStruct'] = None
            Arg3: typing.List['TestCluster.Enums.SimpleEnum'] = None
            Arg4: typing.List['bool'] = None
            Arg5: 'TestCluster.Enums.SimpleEnum' = None
            Arg6: 'bool' = None

        @dataclass
        class TestStructArgumentRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050F
            command_id: typing.ClassVar[int] = 0x0007

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Arg1", Tag=0, Type=TestCluster.Structs.SimpleStruct),
                    ])

            Arg1: 'TestCluster.Structs.SimpleStruct' = None

        @dataclass
        class TestNestedStructArgumentRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050F
            command_id: typing.ClassVar[int] = 0x0008

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Arg1", Tag=0, Type=TestCluster.Structs.NestedStruct),
                    ])

            Arg1: 'TestCluster.Structs.NestedStruct' = None

        @dataclass
        class TestListStructArgumentRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050F
            command_id: typing.ClassVar[int] = 0x0009

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Arg1", Tag=0, Type=TestCluster.Structs.SimpleStruct, IsArray=True),
                    ])

            Arg1: typing.List['TestCluster.Structs.SimpleStruct'] = None

        @dataclass
        class TestListInt8UArgumentRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050F
            command_id: typing.ClassVar[int] = 0x000A

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Arg1", Tag=0, Type=int, IsArray=True),
                    ])

            Arg1: typing.List['int'] = None

        @dataclass
        class TestNestedStructListArgumentRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050F
            command_id: typing.ClassVar[int] = 0x000B

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Arg1", Tag=0, Type=TestCluster.Structs.NestedStructList),
                    ])

            Arg1: 'TestCluster.Structs.NestedStructList' = None

        @dataclass
        class TestListNestedStructListArgumentRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x050F
            command_id: typing.ClassVar[int] = 0x000C

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="Arg1", Tag=0, Type=TestCluster.Structs.NestedStructList, IsArray=True),
                    ])

            Arg1: typing.List['TestCluster.Structs.NestedStructList'] = None


@dataclass
class Messaging:
    id: typing.ClassVar[int] = 0x0703

    class Enums:
        class EventId(IntEnum):
            kMeterCoverRemoved = 0x00
            kMeterCoverClosed = 0x01
            kStrongMagneticField = 0x02
            kNoStrongMagneticField = 0x03
            kBatteryFailure = 0x04
            kLowBattery = 0x05
            kProgramMemoryError = 0x06
            kRamError = 0x07
            kNvMemoryError = 0x08
            kMeasurementSystemError = 0x09
            kWatchdogError = 0x0A
            kSupplyDisconnectFailure = 0x0B
            kSupplyConnectFailure = 0x0C
            kMeasurmentSoftwareChanged = 0x0D
            kDstEnabled = 0x0E
            kDstDisabled = 0x0F
            kClockAdjBackward = 0x10
            kClockAdjForward = 0x11
            kClockInvalid = 0x12
            kCommsErrorHan = 0x13
            kCommsOkHan = 0x14
            kFraudAttempt = 0x15
            kPowerLoss = 0x16
            kIncorrectProtocol = 0x17
            kUnusualHanTraffic = 0x18
            kUnexpectedClockChange = 0x19
            kCommsUsingUnauthenticatedComponent = 0x1A
            kErrorRegClear = 0x1B
            kAlarmRegClear = 0x1C
            kUnexpectedHwReset = 0x1D
            kUnexpectedProgramExecution = 0x1E
            kEventLogCleared = 0x1F
            kManualDisconnect = 0x20
            kManualConnect = 0x21
            kRemoteDisconnection = 0x22
            kLocalDisconnection = 0x23
            kLimitThresholdExceeded = 0x24
            kLimitThresholdOk = 0x25
            kLimitThresholdChanged = 0x26
            kMaximumDemandExceeded = 0x27
            kProfileCleared = 0x28
            kFirmwareReadyForActivation = 0x29
            kFirmwareActivated = 0x2A
            kPatchFailure = 0x2B
            kTouTariffActivation = 0x2C
            k8x8Tariffactivated = 0x2D
            kSingleTariffRateActivated = 0x2E
            kAsynchronousBillingOccurred = 0x2F
            kSynchronousBillingOccurred = 0x30
            kIncorrectPolarity = 0x80
            kCurrentNoVoltage = 0x81
            kUnderVoltage = 0x82
            kOverVoltage = 0x83
            kNormalVoltage = 0x84
            kPfBelowThreshold = 0x85
            kPfAboveThreshold = 0x86
            kTerminalCoverRemoved = 0x87
            kTerminalCoverClosed = 0x88
            kReverseFlow = 0xA0
            kTiltTamper = 0xA1
            kBatteryCoverRemoved = 0xA2
            kBatteryCoverClosed = 0xA3
            kExcessFlow = 0xA4
            kCreditOk = 0xC0
            kLowCredit = 0xC1
            kEmergencyCreditInUse = 0xC0
            kEmergencyCreditExhausted = 0xC1
            kZeroCreditEcNotSelected = 0xC2
            kSupplyOn = 0xC3
            kSupplyOffAarmed = 0xC4
            kSupplyOff = 0xC5
            kDiscountApplied = 0xC6
            kManufacturerSpecificA = 0xE0
            kManufacturerSpecificB = 0xE1
            kManufacturerSpecificC = 0xE2
            kManufacturerSpecificD = 0xE3
            kManufacturerSpecificE = 0xE4
            kManufacturerSpecificF = 0xE5
            kManufacturerSpecificG = 0xE6
            kManufacturerSpecificH = 0xE7
            kManufacturerSpecificI = 0xE8

        class MessagingControlConfirmation(IntEnum):
            kNotRequired = 0x00
            kRequired = 0x80

        class MessagingControlEnhancedConfirmation(IntEnum):
            kNotRequired = 0x00
            kRequired = 0x20

        class MessagingControlImportance(IntEnum):
            kLow = 0x00
            kMedium = 0x04
            kHigh = 0x08
            kCritical = 0x0C

        class MessagingControlTransmission(IntEnum):
            kNormal = 0x00
            kNormalAndAnonymous = 0x01
            kAnonymous = 0x02
            kReserved = 0x03

    class Commands:
        @dataclass
        class DisplayMessage(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0703
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MessageId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="MessageControl", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="StartTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="DurationInMinutes", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Message", Tag=4, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="OptionalExtendedMessageControl", Tag=5, Type=int),
                    ])

            MessageId: 'int' = None
            MessageControl: 'int' = None
            StartTime: 'int' = None
            DurationInMinutes: 'int' = None
            Message: 'str' = None
            OptionalExtendedMessageControl: 'int' = None

        @dataclass
        class GetLastMessage(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0703
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class CancelMessage(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0703
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MessageId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="MessageControl", Tag=1, Type=int),
                    ])

            MessageId: 'int' = None
            MessageControl: 'int' = None

        @dataclass
        class MessageConfirmation(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0703
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MessageId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ConfirmationTime", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="MessageConfirmationControl", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="MessageResponse", Tag=3, Type=bytes),
                    ])

            MessageId: 'int' = None
            ConfirmationTime: 'int' = None
            MessageConfirmationControl: 'int' = None
            MessageResponse: 'bytes' = None

        @dataclass
        class DisplayProtectedMessage(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0703
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="MessageId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="MessageControl", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="StartTime", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="DurationInMinutes", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Message", Tag=4, Type=str),
                        ClusterObjectFieldDescriptor(
                            Label="OptionalExtendedMessageControl", Tag=5, Type=int),
                    ])

            MessageId: 'int' = None
            MessageControl: 'int' = None
            StartTime: 'int' = None
            DurationInMinutes: 'int' = None
            Message: 'str' = None
            OptionalExtendedMessageControl: 'int' = None

        @dataclass
        class GetMessageCancellation(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0703
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="EarliestImplementationTime", Tag=0, Type=int),
                    ])

            EarliestImplementationTime: 'int' = None

        @dataclass
        class CancelAllMessages(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0703
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ImplementationDateTime", Tag=0, Type=int),
                    ])

            ImplementationDateTime: 'int' = None


@dataclass
class ApplianceIdentification:
    id: typing.ClassVar[int] = 0x0B00


@dataclass
class MeterIdentification:
    id: typing.ClassVar[int] = 0x0B01


@dataclass
class ApplianceEventsAndAlert:
    id: typing.ClassVar[int] = 0x0B02

    class Enums:
        class EventIdentification(IntEnum):
            kEndOfCycle = 0x01
            kTemperatureReached = 0x04
            kEndOfCooking = 0x05
            kSwitchingOff = 0x06
            kWrongData = 0x07

    class Commands:
        @dataclass
        class GetAlerts(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0B02
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class GetAlertsResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0B02
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="AlertsCount", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="AlertStructures", Tag=1, Type=int, IsArray=True),
                    ])

            AlertsCount: 'int' = None
            AlertStructures: typing.List['int'] = None

        @dataclass
        class AlertsNotification(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0B02
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="AlertsCount", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="AlertStructures", Tag=1, Type=int, IsArray=True),
                    ])

            AlertsCount: 'int' = None
            AlertStructures: typing.List['int'] = None

        @dataclass
        class EventsNotification(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0B02
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="EventHeader", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="EventId", Tag=1, Type=ApplianceEventsAndAlert.Enums.EventIdentification),
                    ])

            EventHeader: 'int' = None
            EventId: 'ApplianceEventsAndAlert.Enums.EventIdentification' = None


@dataclass
class ApplianceStatistics:
    id: typing.ClassVar[int] = 0x0B03

    class Commands:
        @dataclass
        class LogNotification(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0B03
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="TimeStamp", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LogId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LogLength", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LogPayload", Tag=3, Type=int, IsArray=True),
                    ])

            TimeStamp: 'int' = None
            LogId: 'int' = None
            LogLength: 'int' = None
            LogPayload: typing.List['int'] = None

        @dataclass
        class LogRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0B03
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="LogId", Tag=0, Type=int),
                    ])

            LogId: 'int' = None

        @dataclass
        class LogResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0B03
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="TimeStamp", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LogId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LogLength", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LogPayload", Tag=3, Type=int, IsArray=True),
                    ])

            TimeStamp: 'int' = None
            LogId: 'int' = None
            LogLength: 'int' = None
            LogPayload: typing.List['int'] = None

        @dataclass
        class LogQueueRequest(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0B03
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class LogQueueResponse(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0B03
            command_id: typing.ClassVar[int] = 0x0002

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="LogQueueSize", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LogIds", Tag=1, Type=int, IsArray=True),
                    ])

            LogQueueSize: 'int' = None
            LogIds: typing.List['int'] = None

        @dataclass
        class StatisticsAvailable(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0B03
            command_id: typing.ClassVar[int] = 0x0003

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="LogQueueSize", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="LogIds", Tag=1, Type=int, IsArray=True),
                    ])

            LogQueueSize: 'int' = None
            LogIds: typing.List['int'] = None


@dataclass
class ElectricalMeasurement:
    id: typing.ClassVar[int] = 0x0B04

    class Commands:
        @dataclass
        class GetProfileInfoResponseCommand(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0B04
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ProfileCount", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ProfileIntervalPeriod", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="MaxNumberOfIntervals", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ListOfAttributes", Tag=3, Type=int, IsArray=True),
                    ])

            ProfileCount: 'int' = None
            ProfileIntervalPeriod: 'int' = None
            MaxNumberOfIntervals: 'int' = None
            ListOfAttributes: typing.List['int'] = None

        @dataclass
        class GetProfileInfoCommand(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0B04
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                    ])

        @dataclass
        class GetMeasurementProfileResponseCommand(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0B04
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="StartTime", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Status", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ProfileIntervalPeriod", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="NumberOfIntervalsDelivered", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="AttributeId", Tag=4, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="Intervals", Tag=5, Type=int, IsArray=True),
                    ])

            StartTime: 'int' = None
            Status: 'int' = None
            ProfileIntervalPeriod: 'int' = None
            NumberOfIntervalsDelivered: 'int' = None
            AttributeId: 'int' = None
            Intervals: typing.List['int'] = None

        @dataclass
        class GetMeasurementProfileCommand(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0x0B04
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="AttributeId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="StartTime", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="NumberOfIntervals", Tag=2, Type=int),
                    ])

            AttributeId: 'int' = None
            StartTime: 'int' = None
            NumberOfIntervals: 'int' = None


@dataclass
class Binding:
    id: typing.ClassVar[int] = 0xF000

    class Commands:
        @dataclass
        class Bind(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0xF000
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="NodeId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="EndpointId", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ClusterId", Tag=3, Type=int),
                    ])

            NodeId: 'int' = None
            GroupId: 'int' = None
            EndpointId: 'int' = None
            ClusterId: 'int' = None

        @dataclass
        class Unbind(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0xF000
            command_id: typing.ClassVar[int] = 0x0001

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="NodeId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="EndpointId", Tag=2, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="ClusterId", Tag=3, Type=int),
                    ])

            NodeId: 'int' = None
            GroupId: 'int' = None
            EndpointId: 'int' = None
            ClusterId: 'int' = None


@dataclass
class GroupKeyManagement:
    id: typing.ClassVar[int] = 0xF004

    class Enums:
        class GroupKeySecurityPolicy(IntEnum):
            kStandard = 0x00
            kLowLatency = 0x01

    class Structs:
        @dataclass
        class GroupKey(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="VendorId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupKeyIndex", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupKeyRoot", Tag=2, Type=bytes),
                        ClusterObjectFieldDescriptor(
                            Label="GroupKeyEpochStartTime", Tag=3, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupKeySecurityPolicy", Tag=4, Type=GroupKeyManagement.Enums.GroupKeySecurityPolicy),
                    ])

            VendorId: 'int' = None
            GroupKeyIndex: 'int' = None
            GroupKeyRoot: 'bytes' = None
            GroupKeyEpochStartTime: 'int' = None
            GroupKeySecurityPolicy: 'GroupKeyManagement.Enums.GroupKeySecurityPolicy' = None

        @dataclass
        class GroupState(ClusterObject):
            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="VendorId", Tag=0, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="VendorGroupId", Tag=1, Type=int),
                        ClusterObjectFieldDescriptor(
                            Label="GroupKeySetIndex", Tag=2, Type=int),
                    ])

            VendorId: 'int' = None
            VendorGroupId: 'int' = None
            GroupKeySetIndex: 'int' = None


@dataclass
class SampleMfgSpecificCluster:
    id: typing.ClassVar[int] = 0xFC00

    class Commands:
        @dataclass
        class CommandOne(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0xFC00
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ArgOne", Tag=0, Type=int),
                    ])

            ArgOne: 'int' = None


@dataclass
class SampleMfgSpecificCluster2:
    id: typing.ClassVar[int] = 0xFC00

    class Commands:
        @dataclass
        class CommandTwo(ClusterCommand):
            cluster_id: typing.ClassVar[int] = 0xFC00
            command_id: typing.ClassVar[int] = 0x0000

            @ChipUtility.classproperty
            def descriptor(cls) -> ClusterObjectDescriptor:
                return ClusterObjectDescriptor(
                    Fields=[
                        ClusterObjectFieldDescriptor(
                            Label="ArgOne", Tag=0, Type=int),
                    ])

            ArgOne: 'int' = None
