// This IDL was generated automatically by ZAP.
// This file don't uses the infomations from zap files, thus it will contain all clusters, commands, attributes etc and it won't contain any endpoint configs.

struct LabelStruct {
    CHAR_STRING<16> label = 0;
    CHAR_STRING<16> value = 1;
}

server cluster PowerConfiguration = 1 {
  readonly nosubscribe attribute int16u mainsVoltage = 0;
  readonly nosubscribe attribute int8u mainsFrequency = 1;
  readonly nosubscribe attribute bitmap8 mainsAlarmMask = 16;
  readonly nosubscribe attribute int16u mainsVoltageMinThreshold = 17;
  readonly nosubscribe attribute int16u mainsVoltageMaxThreshold = 18;
  readonly nosubscribe attribute int16u mainsVoltageDwellTrip = 19;
  readonly nosubscribe attribute int8u batteryVoltage = 32;
  readonly nosubscribe attribute int8u batteryPercentageRemaining = 33;
  readonly nosubscribe attribute char_string<16> batteryManufacturer = 48;
  readonly nosubscribe attribute enum8 batterySize = 49;
  readonly nosubscribe attribute int16u batteryAhrRating = 50;
  readonly nosubscribe attribute int8u batteryQuantity = 51;
  readonly nosubscribe attribute int8u batteryRatedVoltage = 52;
  readonly nosubscribe attribute bitmap8 batteryAlarmMask = 53;
  readonly nosubscribe attribute int8u batteryVoltageMinThreshold = 54;
  readonly nosubscribe attribute int8u batteryVoltageThreshold1 = 55;
  readonly nosubscribe attribute int8u batteryVoltageThreshold2 = 56;
  readonly nosubscribe attribute int8u batteryVoltageThreshold3 = 57;
  readonly nosubscribe attribute int8u batteryPercentageMinThreshold = 58;
  readonly nosubscribe attribute int8u batteryPercentageThreshold1 = 59;
  readonly nosubscribe attribute int8u batteryPercentageThreshold2 = 60;
  readonly nosubscribe attribute int8u batteryPercentageThreshold3 = 61;
  readonly nosubscribe attribute bitmap32 batteryAlarmState = 62;
  readonly nosubscribe attribute int8u battery2Voltage = 64;
  readonly nosubscribe attribute int8u battery2PercentageRemaining = 65;
  readonly nosubscribe attribute char_string<16> battery2Manufacturer = 80;
  readonly nosubscribe attribute enum8 battery2Size = 81;
  readonly nosubscribe attribute int16u battery2AhrRating = 82;
  readonly nosubscribe attribute int8u battery2Quantity = 83;
  readonly nosubscribe attribute int8u battery2RatedVoltage = 84;
  readonly nosubscribe attribute bitmap8 battery2AlarmMask = 85;
  readonly nosubscribe attribute int8u battery2VoltageMinThreshold = 86;
  readonly nosubscribe attribute int8u battery2VoltageThreshold1 = 87;
  readonly nosubscribe attribute int8u battery2VoltageThreshold2 = 88;
  readonly nosubscribe attribute int8u battery2VoltageThreshold3 = 89;
  readonly nosubscribe attribute int8u battery2PercentageMinThreshold = 90;
  readonly nosubscribe attribute int8u battery2PercentageThreshold1 = 91;
  readonly nosubscribe attribute int8u battery2PercentageThreshold2 = 92;
  readonly nosubscribe attribute int8u battery2PercentageThreshold3 = 93;
  readonly nosubscribe attribute bitmap32 battery2AlarmState = 94;
  readonly nosubscribe attribute int8u battery3Voltage = 96;
  readonly nosubscribe attribute int8u battery3PercentageRemaining = 97;
  readonly nosubscribe attribute char_string<16> battery3Manufacturer = 112;
  readonly nosubscribe attribute enum8 battery3Size = 113;
  readonly nosubscribe attribute int16u battery3AhrRating = 114;
  readonly nosubscribe attribute int8u battery3Quantity = 115;
  readonly nosubscribe attribute int8u battery3RatedVoltage = 116;
  readonly nosubscribe attribute bitmap8 battery3AlarmMask = 117;
  readonly nosubscribe attribute int8u battery3VoltageMinThreshold = 118;
  readonly nosubscribe attribute int8u battery3VoltageThreshold1 = 119;
  readonly nosubscribe attribute int8u battery3VoltageThreshold2 = 120;
  readonly nosubscribe attribute int8u battery3VoltageThreshold3 = 121;
  readonly nosubscribe attribute int8u battery3PercentageMinThreshold = 122;
  readonly nosubscribe attribute int8u battery3PercentageThreshold1 = 123;
  readonly nosubscribe attribute int8u battery3PercentageThreshold2 = 124;
  readonly nosubscribe attribute int8u battery3PercentageThreshold3 = 125;
  readonly nosubscribe attribute bitmap32 battery3AlarmState = 126;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster DeviceTemperatureConfiguration = 2 {
  readonly nosubscribe attribute int16s currentTemperature = 0;
  readonly nosubscribe attribute int16s minTempExperienced = 1;
  readonly nosubscribe attribute int16s maxTempExperienced = 2;
  readonly nosubscribe attribute int16u overTempTotalDwell = 3;
  readonly nosubscribe attribute bitmap8 deviceTempAlarmMask = 16;
  readonly nosubscribe attribute int16s lowTempThreshold = 17;
  readonly nosubscribe attribute int16s highTempThreshold = 18;
  readonly nosubscribe attribute int24u lowTempDwellTripPoint = 19;
  readonly nosubscribe attribute int24u highTempDwellTripPoint = 20;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster Identify = 3 {
  enum IdentifyEffectIdentifier : ENUM8 {
    kBlink = 0;
    kBreathe = 1;
    kOkay = 2;
    kChannelChange = 11;
    kFinishEffect = 254;
    kStopEffect = 255;
  }

  enum IdentifyEffectVariant : ENUM8 {
    kDefault = 0;
  }

  enum IdentifyIdentifyType : ENUM8 {
    kNone = 0;
    kVisibleLight = 1;
    kVisibleLED = 2;
    kAudibleBeep = 3;
    kDisplay = 4;
    kActuator = 5;
  }

  readonly nosubscribe attribute int16u identifyTime = 0;
  readonly nosubscribe attribute enum8 identifyType = 1;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct IdentifyRequest {
    INT16U identifyTime = 0;
  }

  response struct IdentifyQueryResponse = 0 {
    INT16U timeout = 0;
  }

  request struct TriggerEffectRequest {
    IdentifyEffectIdentifier effectIdentifier = 0;
    IdentifyEffectVariant effectVariant = 1;
  }


  command access(invoke: manage) Identify(IdentifyRequest): DefaultSuccess = 0;
  command access(invoke: manage) IdentifyQuery(): IdentifyQueryResponse = 1;
  command access(invoke: manage) TriggerEffect(TriggerEffectRequest): DefaultSuccess = 64;
}

server cluster Groups = 4 {
  readonly nosubscribe attribute bitmap8 nameSupport = 0;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct AddGroupRequest {
    group_id groupId = 0;
    CHAR_STRING groupName = 1;
  }

  response struct AddGroupResponse = 0 {
    ENUM8 status = 0;
    group_id groupId = 1;
  }

  request struct ViewGroupRequest {
    group_id groupId = 0;
  }

  response struct ViewGroupResponse = 1 {
    ENUM8 status = 0;
    group_id groupId = 1;
    CHAR_STRING groupName = 2;
  }

  request struct GetGroupMembershipRequest {
    group_id groupList[] = 0;
  }

  response struct GetGroupMembershipResponse = 2 {
    nullable INT8U capacity = 0;
    group_id groupList[] = 1;
  }

  request struct RemoveGroupRequest {
    group_id groupId = 0;
  }

  response struct RemoveGroupResponse = 3 {
    ENUM8 status = 0;
    group_id groupId = 1;
  }

  request struct AddGroupIfIdentifyingRequest {
    group_id groupId = 0;
    CHAR_STRING groupName = 1;
  }


  command access(invoke: manage) AddGroup(AddGroupRequest): AddGroupResponse = 0;
  command ViewGroup(ViewGroupRequest): ViewGroupResponse = 1;
  command GetGroupMembership(GetGroupMembershipRequest): GetGroupMembershipResponse = 2;
  command access(invoke: manage) RemoveGroup(RemoveGroupRequest): RemoveGroupResponse = 3;
  command access(invoke: manage) RemoveAllGroups(): DefaultSuccess = 4;
  command access(invoke: manage) AddGroupIfIdentifying(AddGroupIfIdentifyingRequest): DefaultSuccess = 5;
}

server cluster Scenes = 5 {
  bitmap ScenesCopyMode : BITMAP8 {
    kCopyAllScenes = 0x1;
  }

  struct SceneExtensionFieldSet {
    CLUSTER_ID clusterId = 0;
    INT8U length = 1;
    INT8U value = 2;
  }

  readonly nosubscribe attribute int8u sceneCount = 0;
  readonly nosubscribe attribute int8u currentScene = 1;
  readonly nosubscribe attribute int16u currentGroup = 2;
  readonly nosubscribe attribute boolean sceneValid = 3;
  readonly nosubscribe attribute bitmap8 nameSupport = 4;
  readonly nosubscribe attribute node_id lastConfiguredBy = 5;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct AddSceneRequest {
    INT16U groupId = 0;
    INT8U sceneId = 1;
    INT16U transitionTime = 2;
    CHAR_STRING sceneName = 3;
    SceneExtensionFieldSet extensionFieldSets[] = 4;
  }

  response struct AddSceneResponse = 0 {
    ENUM8 status = 0;
    INT16U groupId = 1;
    INT8U sceneId = 2;
  }

  request struct ViewSceneRequest {
    INT16U groupId = 0;
    INT8U sceneId = 1;
  }

  response struct ViewSceneResponse = 1 {
    ENUM8 status = 0;
    INT16U groupId = 1;
    INT8U sceneId = 2;
    INT16U transitionTime = 3;
    CHAR_STRING sceneName = 4;
    SceneExtensionFieldSet extensionFieldSets[] = 5;
  }

  request struct RemoveSceneRequest {
    INT16U groupId = 0;
    INT8U sceneId = 1;
  }

  response struct RemoveSceneResponse = 2 {
    ENUM8 status = 0;
    INT16U groupId = 1;
    INT8U sceneId = 2;
  }

  request struct RemoveAllScenesRequest {
    INT16U groupId = 0;
  }

  response struct RemoveAllScenesResponse = 3 {
    ENUM8 status = 0;
    INT16U groupId = 1;
  }

  request struct StoreSceneRequest {
    INT16U groupId = 0;
    INT8U sceneId = 1;
  }

  response struct StoreSceneResponse = 4 {
    ENUM8 status = 0;
    INT16U groupId = 1;
    INT8U sceneId = 2;
  }

  request struct RecallSceneRequest {
    INT16U groupId = 0;
    INT8U sceneId = 1;
    INT16U transitionTime = 2;
  }

  request struct GetSceneMembershipRequest {
    INT16U groupId = 0;
  }

  response struct GetSceneMembershipResponse = 6 {
    ENUM8 status = 0;
    INT8U capacity = 1;
    INT16U groupId = 2;
    INT8U sceneCount = 3;
    INT8U sceneList[] = 4;
  }

  request struct EnhancedAddSceneRequest {
    INT16U groupId = 0;
    INT8U sceneId = 1;
    INT16U transitionTime = 2;
    CHAR_STRING sceneName = 3;
    SceneExtensionFieldSet extensionFieldSets[] = 4;
  }

  response struct EnhancedAddSceneResponse = 64 {
    ENUM8 status = 0;
    INT16U groupId = 1;
    INT8U sceneId = 2;
  }

  request struct EnhancedViewSceneRequest {
    INT16U groupId = 0;
    INT8U sceneId = 1;
  }

  response struct EnhancedViewSceneResponse = 65 {
    ENUM8 status = 0;
    INT16U groupId = 1;
    INT8U sceneId = 2;
    INT16U transitionTime = 3;
    CHAR_STRING sceneName = 4;
    SceneExtensionFieldSet extensionFieldSets[] = 5;
  }

  request struct CopySceneRequest {
    ScenesCopyMode mode = 0;
    INT16U groupIdFrom = 1;
    INT8U sceneIdFrom = 2;
    INT16U groupIdTo = 3;
    INT8U sceneIdTo = 4;
  }

  response struct CopySceneResponse = 66 {
    ENUM8 status = 0;
    INT16U groupIdFrom = 1;
    INT8U sceneIdFrom = 2;
  }


  command access(invoke: manage) AddScene(AddSceneRequest): AddSceneResponse = 0;
  command ViewScene(ViewSceneRequest): ViewSceneResponse = 1;
  command access(invoke: manage) RemoveScene(RemoveSceneRequest): RemoveSceneResponse = 2;
  command access(invoke: manage) RemoveAllScenes(RemoveAllScenesRequest): RemoveAllScenesResponse = 3;
  command access(invoke: manage) StoreScene(StoreSceneRequest): StoreSceneResponse = 4;
  command RecallScene(RecallSceneRequest): DefaultSuccess = 5;
  command GetSceneMembership(GetSceneMembershipRequest): GetSceneMembershipResponse = 6;
  command EnhancedAddScene(EnhancedAddSceneRequest): EnhancedAddSceneResponse = 64;
  command EnhancedViewScene(EnhancedViewSceneRequest): EnhancedViewSceneResponse = 65;
  command CopyScene(CopySceneRequest): CopySceneResponse = 66;
}

server cluster OnOff = 6 {
  enum OnOffDelayedAllOffEffectVariant : enum8 {
    kFadeToOffIn0p8Seconds = 0;
    kNoFade = 1;
    k50PercentDimDownIn0p8SecondsThenFadeToOffIn12Seconds = 2;
  }

  enum OnOffDyingLightEffectVariant : enum8 {
    k20PercenterDimUpIn0p5SecondsThenFadeToOffIn1Second = 0;
  }

  enum OnOffEffectIdentifier : enum8 {
    kDelayedAllOff = 0;
    kDyingLight = 1;
  }

  enum OnOffStartUpOnOff : ENUM8 {
    kOff = 0;
    kOn = 1;
    kTogglePreviousOnOff = 2;
  }

  bitmap OnOffControl : BITMAP8 {
    kAcceptOnlyWhenOn = 0x1;
  }

  bitmap OnOffFeature : BITMAP32 {
    kLighting = 0x1;
  }

  readonly nosubscribe attribute boolean onOff = 0;
  readonly nosubscribe attribute boolean globalSceneControl = 16384;
  readonly nosubscribe attribute int16u onTime = 16385;
  readonly nosubscribe attribute int16u offWaitTime = 16386;
  readonly nosubscribe attribute access(write: manage) nullable OnOffStartUpOnOff startUpOnOff = 16387;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct OffWithEffectRequest {
    OnOffEffectIdentifier effectId = 0;
    OnOffDelayedAllOffEffectVariant effectVariant = 1;
  }

  request struct OnWithTimedOffRequest {
    OnOffControl onOffControl = 0;
    int16u onTime = 1;
    int16u offWaitTime = 2;
  }


  command Off(): DefaultSuccess = 0;
  command On(): DefaultSuccess = 1;
  command Toggle(): DefaultSuccess = 2;
  command OffWithEffect(OffWithEffectRequest): DefaultSuccess = 64;
  command OnWithRecallGlobalScene(): DefaultSuccess = 65;
  command OnWithTimedOff(OnWithTimedOffRequest): DefaultSuccess = 66;
}

server cluster OnOffSwitchConfiguration = 7 {
  readonly nosubscribe attribute enum8 switchType = 0;
  readonly nosubscribe attribute enum8 switchActions = 16;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster LevelControl = 8 {
  enum MoveMode : ENUM8 {
    kUp = 0;
    kDown = 1;
  }

  enum StepMode : ENUM8 {
    kUp = 0;
    kDown = 1;
  }

  bitmap LevelControlFeature : BITMAP32 {
    kOnOff = 0x1;
    kLighting = 0x2;
    kFrequency = 0x4;
  }

  readonly nosubscribe attribute int8u currentLevel = 0;
  readonly nosubscribe attribute int16u remainingTime = 1;
  readonly nosubscribe attribute int8u minLevel = 2;
  readonly nosubscribe attribute int8u maxLevel = 3;
  readonly nosubscribe attribute int16u currentFrequency = 4;
  readonly nosubscribe attribute int16u minFrequency = 5;
  readonly nosubscribe attribute int16u maxFrequency = 6;
  readonly nosubscribe attribute bitmap8 options = 15;
  readonly nosubscribe attribute int16u onOffTransitionTime = 16;
  readonly nosubscribe attribute nullable int8u onLevel = 17;
  readonly nosubscribe attribute nullable int16u onTransitionTime = 18;
  readonly nosubscribe attribute nullable int16u offTransitionTime = 19;
  readonly nosubscribe attribute nullable int8u defaultMoveRate = 20;
  readonly nosubscribe attribute access(write: manage) nullable int8u startUpCurrentLevel = 16384;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct MoveToLevelRequest {
    INT8U level = 0;
    INT16U transitionTime = 1;
    BITMAP8 optionMask = 2;
    BITMAP8 optionOverride = 3;
  }

  request struct MoveRequest {
    MoveMode moveMode = 0;
    INT8U rate = 1;
    BITMAP8 optionMask = 2;
    BITMAP8 optionOverride = 3;
  }

  request struct StepRequest {
    StepMode stepMode = 0;
    INT8U stepSize = 1;
    INT16U transitionTime = 2;
    BITMAP8 optionMask = 3;
    BITMAP8 optionOverride = 4;
  }

  request struct StopRequest {
    BITMAP8 optionMask = 0;
    BITMAP8 optionOverride = 1;
  }

  request struct MoveToLevelWithOnOffRequest {
    INT8U level = 0;
    INT16U transitionTime = 1;
  }

  request struct MoveWithOnOffRequest {
    MoveMode moveMode = 0;
    INT8U rate = 1;
  }

  request struct StepWithOnOffRequest {
    StepMode stepMode = 0;
    INT8U stepSize = 1;
    INT16U transitionTime = 2;
  }


  command MoveToLevel(MoveToLevelRequest): DefaultSuccess = 0;
  command Move(MoveRequest): DefaultSuccess = 1;
  command Step(StepRequest): DefaultSuccess = 2;
  command Stop(StopRequest): DefaultSuccess = 3;
  command MoveToLevelWithOnOff(MoveToLevelWithOnOffRequest): DefaultSuccess = 4;
  command MoveWithOnOff(MoveWithOnOffRequest): DefaultSuccess = 5;
  command StepWithOnOff(StepWithOnOffRequest): DefaultSuccess = 6;
  command StopWithOnOff(): DefaultSuccess = 7;
}

server cluster Alarms = 9 {
  readonly nosubscribe attribute int16u alarmCount = 0;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct ResetAlarmRequest {
    ENUM8 alarmCode = 0;
    CLUSTER_ID clusterId = 1;
  }

  response struct Alarm = 0 {
    ENUM8 alarmCode = 0;
    CLUSTER_ID clusterId = 1;
  }

  response struct GetAlarmResponse = 1 {
    ENUM8 status = 0;
    ENUM8 alarmCode = 1;
    CLUSTER_ID clusterId = 2;
    epoch_s timeStamp = 3;
  }


  command ResetAlarm(ResetAlarmRequest): DefaultSuccess = 0;
  command ResetAllAlarms(): DefaultSuccess = 1;
  command GetAlarm(): GetAlarmResponse = 2;
  command ResetAlarmLog(): DefaultSuccess = 3;
}

server cluster Time = 10 {
  readonly nosubscribe attribute epoch_s time = 0;
  readonly nosubscribe attribute bitmap8 timeStatus = 1;
  readonly nosubscribe attribute int32s timeZone = 2;
  readonly nosubscribe attribute int32u dstStart = 3;
  readonly nosubscribe attribute int32u dstEnd = 4;
  readonly nosubscribe attribute int32s dstShift = 5;
  readonly nosubscribe attribute int32u standardTime = 6;
  readonly nosubscribe attribute int32u localTime = 7;
  readonly nosubscribe attribute epoch_s lastSetTime = 8;
  readonly nosubscribe attribute epoch_s validUntilTime = 9;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster BinaryInputBasic = 15 {
  readonly nosubscribe attribute char_string<16> activeText = 4;
  readonly nosubscribe attribute char_string<16> description = 28;
  readonly nosubscribe attribute char_string<16> inactiveText = 46;
  readonly nosubscribe attribute boolean outOfService = 81;
  readonly nosubscribe attribute enum8 polarity = 84;
  readonly nosubscribe attribute boolean presentValue = 85;
  readonly nosubscribe attribute enum8 reliability = 103;
  readonly nosubscribe attribute bitmap8 statusFlags = 111;
  readonly nosubscribe attribute int32u applicationType = 256;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster PowerProfile = 26 {
  struct PowerProfileRecord {
    INT8U powerProfileId = 0;
    INT8U energyPhaseId = 1;
    BOOLEAN powerProfileRemoteControl = 2;
    ENUM8 powerProfileState = 3;
  }

  struct ScheduledPhase {
    INT8U energyPhaseId = 0;
    INT16U scheduledTime = 1;
  }

  struct TransferredPhase {
    INT8U energyPhaseId = 0;
    INT8U macroPhaseId = 1;
    INT16U expectedDuration = 2;
    INT16U peakPower = 3;
    INT16U energy = 4;
    INT16U maxActivationDelay = 5;
  }

  readonly nosubscribe attribute int8u totalProfileNum = 0;
  readonly nosubscribe attribute boolean multipleScheduling = 1;
  readonly nosubscribe attribute bitmap8 energyFormatting = 2;
  readonly nosubscribe attribute boolean energyRemote = 3;
  readonly nosubscribe attribute bitmap8 scheduleMode = 4;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct PowerProfileRequestRequest {
    INT8U powerProfileId = 0;
  }

  response struct PowerProfileNotification = 0 {
    INT8U totalProfileNum = 0;
    INT8U powerProfileId = 1;
    INT8U numOfTransferredPhases = 2;
    TransferredPhase transferredPhases[] = 3;
  }

  response struct PowerProfileResponse = 1 {
    INT8U totalProfileNum = 0;
    INT8U powerProfileId = 1;
    INT8U numOfTransferredPhases = 2;
    TransferredPhase transferredPhases[] = 3;
  }

  request struct GetPowerProfilePriceResponseRequest {
    INT8U powerProfileId = 0;
    INT16U currency = 1;
    INT32U price = 2;
    INT8U priceTrailingDigit = 3;
  }

  response struct PowerProfileStateResponse = 2 {
    INT8U powerProfileCount = 0;
    PowerProfileRecord powerProfileRecords[] = 1;
  }

  request struct GetOverallSchedulePriceResponseRequest {
    INT16U currency = 0;
    INT32U price = 1;
    INT8U priceTrailingDigit = 2;
  }

  response struct GetPowerProfilePrice = 3 {
    INT8U powerProfileId = 0;
  }

  request struct EnergyPhasesScheduleNotificationRequest {
    INT8U powerProfileId = 0;
    INT8U numOfScheduledPhases = 1;
    ScheduledPhase scheduledPhases[] = 2;
  }

  response struct PowerProfilesStateNotification = 4 {
    INT8U powerProfileCount = 0;
    PowerProfileRecord powerProfileRecords[] = 1;
  }

  request struct EnergyPhasesScheduleResponseRequest {
    INT8U powerProfileId = 0;
    INT8U numOfScheduledPhases = 1;
    ScheduledPhase scheduledPhases[] = 2;
  }

  response struct GetOverallSchedulePrice = 5 {
  }

  request struct PowerProfileScheduleConstraintsRequestRequest {
    INT8U powerProfileId = 0;
  }

  response struct EnergyPhasesScheduleRequest = 6 {
    INT8U powerProfileId = 0;
  }

  request struct EnergyPhasesScheduleStateRequestRequest {
    INT8U powerProfileId = 0;
  }

  response struct EnergyPhasesScheduleStateResponse = 7 {
    INT8U powerProfileId = 0;
    INT8U numOfScheduledPhases = 1;
    ScheduledPhase scheduledPhases[] = 2;
  }

  request struct GetPowerProfilePriceExtendedResponseRequest {
    INT8U powerProfileId = 0;
    INT16U currency = 1;
    INT32U price = 2;
    INT8U priceTrailingDigit = 3;
  }

  response struct EnergyPhasesScheduleStateNotification = 8 {
    INT8U powerProfileId = 0;
    INT8U numOfScheduledPhases = 1;
    ScheduledPhase scheduledPhases[] = 2;
  }

  response struct PowerProfileScheduleConstraintsNotification = 9 {
    INT8U powerProfileId = 0;
    INT16U startAfter = 1;
    INT16U stopBefore = 2;
  }

  response struct PowerProfileScheduleConstraintsResponse = 10 {
    INT8U powerProfileId = 0;
    INT16U startAfter = 1;
    INT16U stopBefore = 2;
  }

  response struct GetPowerProfilePriceExtended = 11 {
    BITMAP8 options = 0;
    INT8U powerProfileId = 1;
    INT16U powerProfileStartTime = 2;
  }


  command PowerProfileRequest(PowerProfileRequestRequest): PowerProfileResponse = 0;
  command PowerProfileStateRequest(): PowerProfileStateResponse = 1;
  command GetPowerProfilePriceResponse(GetPowerProfilePriceResponseRequest): DefaultSuccess = 2;
  command GetOverallSchedulePriceResponse(GetOverallSchedulePriceResponseRequest): DefaultSuccess = 3;
  command EnergyPhasesScheduleNotification(EnergyPhasesScheduleNotificationRequest): DefaultSuccess = 4;
  command EnergyPhasesScheduleResponse(EnergyPhasesScheduleResponseRequest): DefaultSuccess = 5;
  command PowerProfileScheduleConstraintsRequest(PowerProfileScheduleConstraintsRequestRequest): PowerProfileScheduleConstraintsResponse = 6;
  command EnergyPhasesScheduleStateRequest(EnergyPhasesScheduleStateRequestRequest): EnergyPhasesScheduleStateResponse = 7;
  command GetPowerProfilePriceExtendedResponse(GetPowerProfilePriceExtendedResponseRequest): DefaultSuccess = 8;
}

server cluster ApplianceControl = 27 {
  enum ApplianceStatus : ENUM8 {
    kOff = 1;
    kStandBy = 2;
    kProgrammed = 3;
    kProgrammedWaitingToStart = 4;
    kRunning = 5;
    kPause = 6;
    kEndProgrammed = 7;
    kFailure = 8;
    kProgrammeInterrupted = 9;
    kIdle = 10;
    kRinseHold = 11;
    kService = 12;
    kSuperfreezing = 13;
    kSupercooling = 14;
    kSuperheating = 15;
  }

  enum CommandIdentification : ENUM8 {
    kStart = 1;
    kStop = 2;
    kPause = 3;
    kStartSuperfreezing = 4;
    kStopSuperfreezing = 5;
    kStartSupercooling = 6;
    kStopSupercooling = 7;
    kDisableGas = 8;
    kEnableGas = 9;
    kEnableEnergyControl = 10;
    kDisableEnergyControl = 11;
  }

  enum WarningEvent : ENUM8 {
    kWarning1OverallPowerAboveAvailablePowerLevel = 0;
    kWarning2OverallPowerAbovePowerThresholdLevel = 1;
    kWarning3OverallPowerBackBelowTheAvailablePowerLevel = 2;
    kWarning4OverallPowerBackBelowThePowerThresholdLevel = 3;
    kWarning5OverallPowerWillBePotentiallyAboveAvailablePowerLevelIfTheApplianceStarts = 4;
  }

  bitmap RemoteEnableFlagsAndDeviceStatus2 : BITMAP8 {
    kRemoteEnableFlags = 0xF;
    kDeviceStatus2Structure = 0xF0;
  }

  readonly nosubscribe attribute int16u startTime = 0;
  readonly nosubscribe attribute int16u finishTime = 1;
  readonly nosubscribe attribute int16u remainingTime = 2;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct ExecutionOfACommandRequest {
    CommandIdentification commandId = 0;
  }

  response struct SignalStateResponse = 0 {
    ApplianceStatus applianceStatus = 0;
    RemoteEnableFlagsAndDeviceStatus2 remoteEnableFlagsAndDeviceStatus2 = 1;
    ApplianceStatus applianceStatus2 = 2;
  }

  response struct SignalStateNotification = 1 {
    ApplianceStatus applianceStatus = 0;
    RemoteEnableFlagsAndDeviceStatus2 remoteEnableFlagsAndDeviceStatus2 = 1;
    ApplianceStatus applianceStatus2 = 2;
  }

  request struct WriteFunctionsRequest {
    INT16U functionId = 0;
    ENUM8 functionDataType = 1;
    INT8U functionData[] = 2;
  }

  request struct OverloadWarningRequest {
    WarningEvent warningEvent = 0;
  }


  command ExecutionOfACommand(ExecutionOfACommandRequest): DefaultSuccess = 0;
  command SignalState(): SignalStateResponse = 1;
  command WriteFunctions(WriteFunctionsRequest): DefaultSuccess = 2;
  command OverloadPauseResume(): DefaultSuccess = 3;
  command OverloadPause(): DefaultSuccess = 4;
  command OverloadWarning(OverloadWarningRequest): DefaultSuccess = 5;
}

server cluster PulseWidthModulation = 28 {
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster Descriptor = 29 {
  struct DeviceType {
    DEVTYPE_ID type = 0;
    INT16U revision = 1;
  }

  readonly nosubscribe attribute DeviceType deviceList[] = 0;
  readonly nosubscribe attribute CLUSTER_ID serverList[] = 1;
  readonly nosubscribe attribute CLUSTER_ID clientList[] = 2;
  readonly nosubscribe attribute ENDPOINT_NO partsList[] = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster Binding = 30 {
  struct TargetStruct {
    optional NODE_ID node = 1;
    optional GROUP_ID group = 2;
    optional ENDPOINT_NO endpoint = 3;
    optional CLUSTER_ID cluster = 4;
    FABRIC_IDX fabricIndex = 254;
  }

  readonly nosubscribe attribute TargetStruct binding[] = 0;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster AccessControl = 31 {
  enum AuthMode : ENUM8 {
    kPase = 1;
    kCase = 2;
    kGroup = 3;
  }

  enum ChangeTypeEnum : ENUM8 {
    kChanged = 0;
    kAdded = 1;
    kRemoved = 2;
  }

  enum Privilege : ENUM8 {
    kView = 1;
    kProxyView = 2;
    kOperate = 3;
    kManage = 4;
    kAdminister = 5;
  }

  struct Target {
    nullable cluster_id cluster = 0;
    nullable endpoint_no endpoint = 1;
    nullable devtype_id deviceType = 2;
  }

  struct AccessControlEntry {
    Privilege privilege = 1;
    AuthMode authMode = 2;
    nullable INT64U subjects[] = 3;
    nullable Target targets[] = 4;
    fabric_idx fabricIndex = 254;
  }

  struct ExtensionEntry {
    OCTET_STRING<128> data = 1;
    fabric_idx fabricIndex = 254;
  }

  info event access(read: administer) AccessControlEntryChanged = 0 {
    nullable node_id adminNodeID = 1;
    nullable INT16U adminPasscodeID = 2;
    ChangeTypeEnum changeType = 3;
    nullable AccessControlEntry latestValue = 4;
    fabric_idx adminFabricIndex = 254;
  }

  info event access(read: administer) AccessControlExtensionChanged = 1 {
    nullable node_id adminNodeID = 1;
    nullable INT16U adminPasscodeID = 2;
    ChangeTypeEnum changeType = 3;
    nullable ExtensionEntry latestValue = 4;
    fabric_idx adminFabricIndex = 254;
  }

  readonly nosubscribe attribute access(read: administer, write: administer) AccessControlEntry acl[] = 0;
  readonly nosubscribe attribute access(read: administer, write: administer) ExtensionEntry extension[] = 1;
  readonly nosubscribe attribute int16u subjectsPerAccessControlEntry = 2;
  readonly nosubscribe attribute int16u targetsPerAccessControlEntry = 3;
  readonly nosubscribe attribute int16u accessControlEntriesPerFabric = 4;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster PollControl = 32 {
  readonly nosubscribe attribute int32u checkInInterval = 0;
  readonly nosubscribe attribute int32u longPollInterval = 1;
  readonly nosubscribe attribute int16u shortPollInterval = 2;
  readonly nosubscribe attribute int16u fastPollTimeout = 3;
  readonly nosubscribe attribute int32u checkInIntervalMin = 4;
  readonly nosubscribe attribute int32u longPollIntervalMin = 5;
  readonly nosubscribe attribute int16u fastPollTimeoutMax = 6;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  response struct CheckIn = 0 {
  }

  request struct CheckInResponseRequest {
    BOOLEAN startFastPolling = 0;
    INT16U fastPollTimeout = 1;
  }

  request struct SetLongPollIntervalRequest {
    INT32U newLongPollInterval = 0;
  }

  request struct SetShortPollIntervalRequest {
    INT16U newShortPollInterval = 0;
  }

  command CheckInResponse(CheckInResponseRequest): DefaultSuccess = 0;
  command FastPollStop(): DefaultSuccess = 1;
  command SetLongPollInterval(SetLongPollIntervalRequest): DefaultSuccess = 2;
  command SetShortPollInterval(SetShortPollIntervalRequest): DefaultSuccess = 3;
}

server cluster BridgedActions = 37 {
  enum ActionErrorEnum : ENUM8 {
    kUnknown = 0;
    kInterrupted = 1;
  }

  enum ActionStateEnum : ENUM8 {
    kInactive = 0;
    kActive = 1;
    kPaused = 2;
    kDisabled = 3;
  }

  enum ActionTypeEnum : ENUM8 {
    kOther = 0;
    kScene = 1;
    kSequence = 2;
    kAutomation = 3;
    kException = 4;
    kNotification = 5;
    kAlarm = 6;
  }

  enum EndpointListTypeEnum : ENUM8 {
    kOther = 0;
    kRoom = 1;
    kZone = 2;
  }

  bitmap CommandBits : BITMAP16 {
    kInstantAction = 0x1;
    kInstantActionWithTransition = 0x2;
    kStartAction = 0x4;
    kStartActionWithDuration = 0x8;
    kStopAction = 0x10;
    kPauseAction = 0x20;
    kPauseActionWithDuration = 0x40;
    kResumeAction = 0x80;
    kEnableAction = 0x100;
    kEnableActionWithDuration = 0x200;
    kDisableAction = 0x400;
    kDisableActionWithDuration = 0x800;
  }

  struct ActionStruct {
    INT16U actionID = 0;
    CHAR_STRING<32> name = 1;
    ActionTypeEnum type = 2;
    INT16U endpointListID = 3;
    INT16U supportedCommands = 4;
    ActionStateEnum status = 5;
  }

  struct EndpointListStruct {
    INT16U endpointListID = 0;
    CHAR_STRING<32> name = 1;
    EndpointListTypeEnum type = 2;
    ENDPOINT_NO endpoints[] = 3;
  }

  info event StateChanged = 0 {
    INT16U actionID = 0;
    INT32U invokeID = 1;
    ActionStateEnum newState = 2;
  }

  info event ActionFailed = 1 {
    INT16U actionID = 0;
    INT32U invokeID = 1;
    ActionStateEnum newState = 2;
    ActionErrorEnum error = 3;
  }

  readonly nosubscribe attribute ActionStruct actionList[] = 0;
  readonly nosubscribe attribute EndpointListStruct endpointList[] = 1;
  readonly nosubscribe attribute long_char_string<512> setupUrl = 2;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct InstantActionRequest {
    INT16U actionID = 0;
    optional INT32U invokeID = 1;
  }

  request struct InstantActionWithTransitionRequest {
    INT16U actionID = 0;
    optional INT32U invokeID = 1;
    INT16U transitionTime = 2;
  }

  request struct StartActionRequest {
    INT16U actionID = 0;
    optional INT32U invokeID = 1;
  }

  request struct StartActionWithDurationRequest {
    INT16U actionID = 0;
    optional INT32U invokeID = 1;
    INT32U duration = 2;
  }

  request struct StopActionRequest {
    INT16U actionID = 0;
    optional INT32U invokeID = 1;
  }

  request struct PauseActionRequest {
    INT16U actionID = 0;
    optional INT32U invokeID = 1;
  }

  request struct PauseActionWithDurationRequest {
    INT16U actionID = 0;
    optional INT32U invokeID = 1;
    INT32U duration = 2;
  }

  request struct ResumeActionRequest {
    INT16U actionID = 0;
    optional INT32U invokeID = 1;
  }

  request struct EnableActionRequest {
    INT16U actionID = 0;
    optional INT32U invokeID = 1;
  }

  request struct EnableActionWithDurationRequest {
    INT16U actionID = 0;
    optional INT32U invokeID = 1;
    INT32U duration = 2;
  }

  request struct DisableActionRequest {
    INT16U actionID = 0;
    optional INT32U invokeID = 1;
  }

  request struct DisableActionWithDurationRequest {
    INT16U actionID = 0;
    optional INT32U invokeID = 1;
    INT32U duration = 2;
  }


  command InstantAction(InstantActionRequest): DefaultSuccess = 0;
  command InstantActionWithTransition(InstantActionWithTransitionRequest): DefaultSuccess = 1;
  command StartAction(StartActionRequest): DefaultSuccess = 2;
  command StartActionWithDuration(StartActionWithDurationRequest): DefaultSuccess = 3;
  command StopAction(StopActionRequest): DefaultSuccess = 4;
  command PauseAction(PauseActionRequest): DefaultSuccess = 5;
  command PauseActionWithDuration(PauseActionWithDurationRequest): DefaultSuccess = 6;
  command ResumeAction(ResumeActionRequest): DefaultSuccess = 7;
  command EnableAction(EnableActionRequest): DefaultSuccess = 8;
  command EnableActionWithDuration(EnableActionWithDurationRequest): DefaultSuccess = 9;
  command DisableAction(DisableActionRequest): DefaultSuccess = 10;
  command DisableActionWithDuration(DisableActionWithDurationRequest): DefaultSuccess = 11;
}

server cluster Basic = 40 {
  struct CapabilityMinimaStruct {
    int16u caseSessionsPerFabric = 0;
    int16u subscriptionsPerFabric = 1;
  }

  critical event StartUp = 0 {
    INT32U softwareVersion = 0;
  }

  critical event ShutDown = 1 {
  }

  info event Leave = 2 {
  }

  info event ReachableChanged = 3 {
    boolean reachableNewValue = 0;
  }

  readonly nosubscribe attribute int16u dataModelRevision = 0;
  readonly nosubscribe attribute char_string<32> vendorName = 1;
  readonly nosubscribe attribute vendor_id vendorID = 2;
  readonly nosubscribe attribute char_string<32> productName = 3;
  readonly nosubscribe attribute int16u productID = 4;
  readonly nosubscribe attribute access(write: manage) char_string<32> nodeLabel = 5;
  readonly nosubscribe attribute access(write: administer) char_string<2> location = 6;
  readonly nosubscribe attribute int16u hardwareVersion = 7;
  readonly nosubscribe attribute char_string<64> hardwareVersionString = 8;
  readonly nosubscribe attribute int32u softwareVersion = 9;
  readonly nosubscribe attribute char_string<64> softwareVersionString = 10;
  readonly nosubscribe attribute char_string<16> manufacturingDate = 11;
  readonly nosubscribe attribute char_string<32> partNumber = 12;
  readonly nosubscribe attribute long_char_string<256> productURL = 13;
  readonly nosubscribe attribute char_string<64> productLabel = 14;
  readonly nosubscribe attribute char_string<32> serialNumber = 15;
  readonly nosubscribe attribute access(write: manage) boolean localConfigDisabled = 16;
  readonly nosubscribe attribute boolean reachable = 17;
  readonly nosubscribe attribute char_string<32> uniqueID = 18;
  readonly nosubscribe attribute CapabilityMinimaStruct capabilityMinima = 19;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;


  command MfgSpecificPing(): DefaultSuccess = 0;
}

server cluster OtaSoftwareUpdateProvider = 41 {
  enum OTAApplyUpdateAction : ENUM8 {
    kProceed = 0;
    kAwaitNextAction = 1;
    kDiscontinue = 2;
  }

  enum OTADownloadProtocol : ENUM8 {
    kBDXSynchronous = 0;
    kBDXAsynchronous = 1;
    kHttps = 2;
    kVendorSpecific = 3;
  }

  enum OTAQueryStatus : ENUM8 {
    kUpdateAvailable = 0;
    kBusy = 1;
    kNotAvailable = 2;
    kDownloadProtocolNotSupported = 3;
  }

  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct QueryImageRequest {
    vendor_id vendorId = 0;
    INT16U productId = 1;
    INT32U softwareVersion = 2;
    OTADownloadProtocol protocolsSupported[] = 3;
    optional INT16U hardwareVersion = 4;
    optional CHAR_STRING location = 5;
    optional BOOLEAN requestorCanConsent = 6;
    optional OCTET_STRING metadataForProvider = 7;
  }

  response struct QueryImageResponse = 1 {
    OTAQueryStatus status = 0;
    optional INT32U delayedActionTime = 1;
    optional CHAR_STRING imageURI = 2;
    optional INT32U softwareVersion = 3;
    optional CHAR_STRING softwareVersionString = 4;
    optional OCTET_STRING updateToken = 5;
    optional BOOLEAN userConsentNeeded = 6;
    optional OCTET_STRING metadataForRequestor = 7;
  }

  request struct ApplyUpdateRequestRequest {
    OCTET_STRING updateToken = 0;
    INT32U newVersion = 1;
  }

  response struct ApplyUpdateResponse = 3 {
    OTAApplyUpdateAction action = 0;
    INT32U delayedActionTime = 1;
  }

  request struct NotifyUpdateAppliedRequest {
    OCTET_STRING updateToken = 0;
    INT32U softwareVersion = 1;
  }


  command QueryImage(QueryImageRequest): QueryImageResponse = 0;
  command ApplyUpdateRequest(ApplyUpdateRequestRequest): ApplyUpdateResponse = 2;
  command NotifyUpdateApplied(NotifyUpdateAppliedRequest): DefaultSuccess = 4;
}

server cluster OtaSoftwareUpdateRequestor = 42 {
  enum OTAAnnouncementReason : ENUM8 {
    kSimpleAnnouncement = 0;
    kUpdateAvailable = 1;
    kUrgentUpdateAvailable = 2;
  }

  enum OTAChangeReasonEnum : ENUM8 {
    kUnknown = 0;
    kSuccess = 1;
    kFailure = 2;
    kTimeOut = 3;
    kDelayByProvider = 4;
  }

  enum OTAUpdateStateEnum : ENUM8 {
    kUnknown = 0;
    kIdle = 1;
    kQuerying = 2;
    kDelayedOnQuery = 3;
    kDownloading = 4;
    kApplying = 5;
    kDelayedOnApply = 6;
    kRollingBack = 7;
    kDelayedOnUserConsent = 8;
  }

  struct ProviderLocation {
    node_id providerNodeID = 1;
    endpoint_no endpoint = 2;
    fabric_idx fabricIndex = 254;
  }

  info event StateTransition = 0 {
    OTAUpdateStateEnum previousState = 0;
    OTAUpdateStateEnum newState = 1;
    OTAChangeReasonEnum reason = 2;
    nullable INT32U targetSoftwareVersion = 3;
  }

  critical event VersionApplied = 1 {
    INT32U softwareVersion = 0;
    INT16U productID = 1;
  }

  info event DownloadError = 2 {
    INT32U softwareVersion = 0;
    INT64U bytesDownloaded = 1;
    nullable INT8U progressPercent = 2;
    nullable INT64S platformCode = 3;
  }

  readonly nosubscribe attribute ProviderLocation defaultOtaProviders[] = 0;
  readonly nosubscribe attribute boolean updatePossible = 1;
  readonly nosubscribe attribute OTAUpdateStateEnum updateState = 2;
  readonly nosubscribe attribute nullable int8u updateStateProgress = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct AnnounceOtaProviderRequest {
    node_id providerNodeId = 0;
    vendor_id vendorId = 1;
    OTAAnnouncementReason announcementReason = 2;
    optional OCTET_STRING metadataForNode = 3;
    endpoint_no endpoint = 4;
  }


  command AnnounceOtaProvider(AnnounceOtaProviderRequest): DefaultSuccess = 0;
}

server cluster LocalizationConfiguration = 43 {
  readonly nosubscribe attribute char_string<35> activeLocale = 1;
  readonly nosubscribe attribute CHAR_STRING supportedLocales[] = 2;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster TimeFormatLocalization = 44 {
  enum CalendarType : ENUM8 {
    kBuddhist = 0;
    kChinese = 1;
    kCoptic = 2;
    kEthiopian = 3;
    kGregorian = 4;
    kHebrew = 5;
    kIndian = 6;
    kIslamic = 7;
    kJapanese = 8;
    kKorean = 9;
    kPersian = 10;
    kTaiwanese = 11;
  }

  enum HourFormat : ENUM8 {
    k12hr = 0;
    k24hr = 1;
  }

  readonly nosubscribe attribute HourFormat hourFormat = 0;
  readonly nosubscribe attribute CalendarType activeCalendarType = 1;
  readonly nosubscribe attribute CalendarType supportedCalendarTypes[] = 2;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster UnitLocalization = 45 {
  enum TempUnit : ENUM8 {
    kFahrenheit = 0;
    kCelsius = 1;
    kKelvin = 2;
  }

  bitmap UnitLocalizationFeature : BITMAP32 {
    kTemperatureUnit = 0x1;
  }

  readonly nosubscribe attribute TempUnit temperatureUnit = 0;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster PowerSourceConfiguration = 46 {
  readonly nosubscribe attribute INT8U sources[] = 0;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster PowerSource = 47 {
  enum BatChargeFaultType : ENUM8 {
    kUnspecfied = 0;
    kAmbientTooHot = 1;
    kAmbientTooCold = 2;
    kBatteryTooHot = 3;
    kBatteryTooCold = 4;
    kBatteryAbsent = 5;
    kBatteryOverVoltage = 6;
    kBatteryUnderVoltage = 7;
    kChargerOverVoltage = 8;
    kChargerUnderVoltage = 9;
    kSafetyTimeout = 10;
  }

  enum BatChargeLevel : ENUM8 {
    kOk = 0;
    kWarning = 1;
    kCritical = 2;
  }

  enum BatChargeState : ENUM8 {
    kUnknown = 0;
    kIsCharging = 1;
    kIsAtFullCharge = 2;
    kIsNotCharging = 3;
  }

  enum BatFaultType : ENUM8 {
    kUnspecfied = 0;
    kOverTemp = 1;
    kUnderTemp = 2;
  }

  enum BatReplaceability : ENUM8 {
    kUnspecified = 0;
    kNotReplaceable = 1;
    kUserReplaceable = 2;
    kFactoryReplaceable = 3;
  }

  enum PowerSourceStatus : ENUM8 {
    kUnspecfied = 0;
    kActive = 1;
    kStandby = 2;
    kUnavailable = 3;
  }

  enum WiredCurrentType : ENUM8 {
    kAc = 0;
    kDc = 1;
  }

  enum WiredFaultType : ENUM8 {
    kUnspecfied = 0;
    kOverVoltage = 1;
    kUnderVoltage = 2;
  }

  bitmap PowerSourceFeature : BITMAP32 {
    kWired = 0x1;
    kBattery = 0x2;
    kRechargeable = 0x4;
    kReplaceable = 0x8;
  }

  struct BatChargeFaultChangeType {
    BatChargeFaultType current[] = 0;
    BatChargeFaultType previous[] = 1;
  }

  struct BatFaultChangeType {
    BatFaultType current[] = 0;
    BatFaultType previous[] = 1;
  }

  struct WiredFaultChangeType {
    WiredFaultType current[] = 0;
    WiredFaultType previous[] = 1;
  }

  readonly nosubscribe attribute enum8 status = 0;
  readonly nosubscribe attribute int8u order = 1;
  readonly nosubscribe attribute char_string<60> description = 2;
  readonly nosubscribe attribute int32u wiredAssessedInputVoltage = 3;
  readonly nosubscribe attribute int16u wiredAssessedInputFrequency = 4;
  readonly nosubscribe attribute enum8 wiredCurrentType = 5;
  readonly nosubscribe attribute int32u wiredAssessedCurrent = 6;
  readonly nosubscribe attribute int32u wiredNominalVoltage = 7;
  readonly nosubscribe attribute int32u wiredMaximumCurrent = 8;
  readonly nosubscribe attribute boolean wiredPresent = 9;
  readonly nosubscribe attribute ENUM8 activeWiredFaults[] = 10;
  readonly nosubscribe attribute int32u batteryVoltage = 11;
  readonly nosubscribe attribute int8u batteryPercentRemaining = 12;
  readonly nosubscribe attribute int32u batteryTimeRemaining = 13;
  readonly nosubscribe attribute enum8 batteryChargeLevel = 14;
  readonly nosubscribe attribute boolean batteryReplacementNeeded = 15;
  readonly nosubscribe attribute enum8 batteryReplaceability = 16;
  readonly nosubscribe attribute boolean batteryPresent = 17;
  readonly nosubscribe attribute ENUM8 activeBatteryFaults[] = 18;
  readonly nosubscribe attribute char_string<60> batteryReplacementDescription = 19;
  readonly nosubscribe attribute int32u batteryCommonDesignation = 20;
  readonly nosubscribe attribute char_string<20> batteryANSIDesignation = 21;
  readonly nosubscribe attribute char_string<20> batteryIECDesignation = 22;
  readonly nosubscribe attribute int32u batteryApprovedChemistry = 23;
  readonly nosubscribe attribute int32u batteryCapacity = 24;
  readonly nosubscribe attribute int8u batteryQuantity = 25;
  readonly nosubscribe attribute enum8 batteryChargeState = 26;
  readonly nosubscribe attribute int32u batteryTimeToFullCharge = 27;
  readonly nosubscribe attribute boolean batteryFunctionalWhileCharging = 28;
  readonly nosubscribe attribute int32u batteryChargingCurrent = 29;
  readonly nosubscribe attribute ENUM8 activeBatteryChargeFaults[] = 30;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster GeneralCommissioning = 48 {
  enum CommissioningError : ENUM8 {
    kOk = 0;
    kValueOutsideRange = 1;
    kInvalidAuthentication = 2;
    kNoFailSafe = 3;
    kBusyWithOtherAdmin = 4;
  }

  enum RegulatoryLocationType : ENUM8 {
    kIndoor = 0;
    kOutdoor = 1;
    kIndoorOutdoor = 2;
  }

  struct BasicCommissioningInfo {
    INT16U failSafeExpiryLengthSeconds = 0;
  }

  readonly nosubscribe attribute access(write: administer) int64u breadcrumb = 0;
  readonly nosubscribe attribute BasicCommissioningInfo basicCommissioningInfo = 1;
  readonly nosubscribe attribute RegulatoryLocationType regulatoryConfig = 2;
  readonly nosubscribe attribute RegulatoryLocationType locationCapability = 3;
  readonly nosubscribe attribute boolean supportsConcurrentConnection = 4;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct ArmFailSafeRequest {
    INT16U expiryLengthSeconds = 0;
    INT64U breadcrumb = 1;
  }

  response struct ArmFailSafeResponse = 1 {
    CommissioningError errorCode = 0;
    CHAR_STRING debugText = 1;
  }

  request struct SetRegulatoryConfigRequest {
    RegulatoryLocationType newRegulatoryConfig = 0;
    CHAR_STRING countryCode = 1;
    INT64U breadcrumb = 2;
  }

  response struct SetRegulatoryConfigResponse = 3 {
    CommissioningError errorCode = 0;
    CHAR_STRING debugText = 1;
  }

  response struct CommissioningCompleteResponse = 5 {
    CommissioningError errorCode = 0;
    CHAR_STRING debugText = 1;
  }


  command access(invoke: administer) ArmFailSafe(ArmFailSafeRequest): ArmFailSafeResponse = 0;
  command access(invoke: administer) SetRegulatoryConfig(SetRegulatoryConfigRequest): SetRegulatoryConfigResponse = 2;
  command access(invoke: administer) CommissioningComplete(): CommissioningCompleteResponse = 4;
}

server cluster NetworkCommissioning = 49 {
  enum NetworkCommissioningStatus : ENUM8 {
    kSuccess = 0;
    kOutOfRange = 1;
    kBoundsExceeded = 2;
    kNetworkIDNotFound = 3;
    kDuplicateNetworkID = 4;
    kNetworkNotFound = 5;
    kRegulatoryError = 6;
    kAuthFailure = 7;
    kUnsupportedSecurity = 8;
    kOtherConnectionFailure = 9;
    kIPV6Failed = 10;
    kIPBindFailed = 11;
    kUnknownError = 12;
  }

  enum WiFiBand : ENUM8 {
    k2g4 = 0;
    k3g65 = 1;
    k5g = 2;
    k6g = 3;
    k60g = 4;
  }

  bitmap NetworkCommissioningFeature : BITMAP32 {
    kWiFiNetworkInterface = 0x1;
    kThreadNetworkInterface = 0x2;
    kEthernetNetworkInterface = 0x4;
  }

  bitmap WiFiSecurity : BITMAP8 {
    kUnencrypted = 0x1;
    kWepPersonal = 0x2;
    kWpaPersonal = 0x4;
    kWpa2Personal = 0x8;
    kWpa3Personal = 0x10;
  }

  struct NetworkInfo {
    OCTET_STRING<32> networkID = 0;
    BOOLEAN connected = 1;
  }

  struct ThreadInterfaceScanResult {
    INT16U panId = 0;
    INT64U extendedPanId = 1;
    CHAR_STRING<16> networkName = 2;
    INT16U channel = 3;
    INT8U version = 4;
    OCTET_STRING<8> extendedAddress = 5;
    INT8S rssi = 6;
    INT8U lqi = 7;
  }

  struct WiFiInterfaceScanResult {
    WiFiSecurity security = 0;
    OCTET_STRING<32> ssid = 1;
    OCTET_STRING<6> bssid = 2;
    INT16U channel = 3;
    WiFiBand wiFiBand = 4;
    INT8S rssi = 5;
  }

  readonly nosubscribe attribute access(read: administer) int8u maxNetworks = 0;
  readonly nosubscribe attribute access(read: administer) NetworkInfo networks[] = 1;
  readonly nosubscribe attribute int8u scanMaxTimeSeconds = 2;
  readonly nosubscribe attribute int8u connectMaxTimeSeconds = 3;
  readonly nosubscribe attribute access(write: administer) boolean interfaceEnabled = 4;
  readonly nosubscribe attribute access(read: administer) nullable NetworkCommissioningStatus lastNetworkingStatus = 5;
  readonly nosubscribe attribute access(read: administer) nullable octet_string<32> lastNetworkID = 6;
  readonly nosubscribe attribute access(read: administer) nullable int32s lastConnectErrorValue = 7;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct ScanNetworksRequest {
    optional nullable OCTET_STRING ssid = 0;
    optional INT64U breadcrumb = 1;
  }

  response struct ScanNetworksResponse = 1 {
    NetworkCommissioningStatus networkingStatus = 0;
    optional CHAR_STRING debugText = 1;
    optional WiFiInterfaceScanResult wiFiScanResults[] = 2;
    optional ThreadInterfaceScanResult threadScanResults[] = 3;
  }

  request struct AddOrUpdateWiFiNetworkRequest {
    OCTET_STRING ssid = 0;
    OCTET_STRING credentials = 1;
    optional INT64U breadcrumb = 2;
  }

  request struct AddOrUpdateThreadNetworkRequest {
    OCTET_STRING operationalDataset = 0;
    optional INT64U breadcrumb = 1;
  }

  request struct RemoveNetworkRequest {
    OCTET_STRING networkID = 0;
    optional INT64U breadcrumb = 1;
  }

  response struct NetworkConfigResponse = 5 {
    NetworkCommissioningStatus networkingStatus = 0;
    optional CHAR_STRING debugText = 1;
    optional INT8U networkIndex = 2;
  }

  request struct ConnectNetworkRequest {
    OCTET_STRING networkID = 0;
    optional INT64U breadcrumb = 1;
  }

  response struct ConnectNetworkResponse = 7 {
    NetworkCommissioningStatus networkingStatus = 0;
    optional CHAR_STRING debugText = 1;
    nullable INT32S errorValue = 2;
  }

  request struct ReorderNetworkRequest {
    OCTET_STRING networkID = 0;
    INT8U networkIndex = 1;
    optional INT64U breadcrumb = 2;
  }


  command access(invoke: administer) ScanNetworks(ScanNetworksRequest): ScanNetworksResponse = 0;
  command access(invoke: administer) AddOrUpdateWiFiNetwork(AddOrUpdateWiFiNetworkRequest): NetworkConfigResponse = 2;
  command access(invoke: administer) AddOrUpdateThreadNetwork(AddOrUpdateThreadNetworkRequest): NetworkConfigResponse = 3;
  command access(invoke: administer) RemoveNetwork(RemoveNetworkRequest): NetworkConfigResponse = 4;
  command access(invoke: administer) ConnectNetwork(ConnectNetworkRequest): ConnectNetworkResponse = 6;
  command access(invoke: administer) ReorderNetwork(ReorderNetworkRequest): NetworkConfigResponse = 8;
}

server cluster DiagnosticLogs = 50 {
  enum LogsIntent : ENUM8 {
    kEndUserSupport = 0;
    kNetworkDiag = 1;
    kCrashLogs = 2;
  }

  enum LogsStatus : ENUM8 {
    kSuccess = 0;
    kExhausted = 1;
    kNoLogs = 2;
    kBusy = 3;
    kDenied = 4;
  }

  enum LogsTransferProtocol : ENUM8 {
    kResponsePayload = 0;
    kBdx = 1;
  }

  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct RetrieveLogsRequestRequest {
    LogsIntent intent = 0;
    LogsTransferProtocol requestedProtocol = 1;
    OCTET_STRING transferFileDesignator = 2;
  }

  response struct RetrieveLogsResponse = 1 {
    LogsStatus status = 0;
    OCTET_STRING content = 1;
    epoch_s timeStamp = 2;
    INT32U timeSinceBoot = 3;
  }


  command RetrieveLogsRequest(RetrieveLogsRequestRequest): RetrieveLogsResponse = 0;
}

server cluster GeneralDiagnostics = 51 {
  enum BootReasonType : ENUM8 {
    kUnspecified = 0;
    kPowerOnReboot = 1;
    kBrownOutReset = 2;
    kSoftwareWatchdogReset = 3;
    kHardwareWatchdogReset = 4;
    kSoftwareUpdateCompleted = 5;
    kSoftwareReset = 6;
  }

  enum HardwareFaultType : ENUM8 {
    kUnspecified = 0;
    kRadio = 1;
    kSensor = 2;
    kResettableOverTemp = 3;
    kNonResettableOverTemp = 4;
    kPowerSource = 5;
    kVisualDisplayFault = 6;
    kAudioOutputFault = 7;
    kUserInterfaceFault = 8;
    kNonVolatileMemoryError = 9;
    kTamperDetected = 10;
  }

  enum InterfaceType : ENUM8 {
    kUnspecified = 0;
    kWiFi = 1;
    kEthernet = 2;
    kCellular = 3;
    kThread = 4;
  }

  enum NetworkFaultType : ENUM8 {
    kUnspecified = 0;
    kHardwareFailure = 1;
    kNetworkJammed = 2;
    kConnectionFailed = 3;
  }

  enum RadioFaultType : ENUM8 {
    kUnspecified = 0;
    kWiFiFault = 1;
    kCellularFault = 2;
    kThreadFault = 3;
    kNFCFault = 4;
    kBLEFault = 5;
    kEthernetFault = 6;
  }

  struct NetworkInterfaceType {
    CHAR_STRING<32> name = 0;
    BOOLEAN isOperational = 1;
    nullable BOOLEAN offPremiseServicesReachableIPv4 = 2;
    nullable BOOLEAN offPremiseServicesReachableIPv6 = 3;
    OCTET_STRING<8> hardwareAddress = 4;
    OCTET_STRING IPv4Addresses[] = 5;
    OCTET_STRING IPv6Addresses[] = 6;
    InterfaceType type = 7;
  }

  critical event HardwareFaultChange = 0 {
    HardwareFaultType current[] = 0;
    HardwareFaultType previous[] = 1;
  }

  critical event RadioFaultChange = 1 {
    RadioFaultType current[] = 0;
    RadioFaultType previous[] = 1;
  }

  critical event NetworkFaultChange = 2 {
    NetworkFaultType current[] = 0;
    NetworkFaultType previous[] = 1;
  }

  critical event BootReason = 3 {
    BootReasonType bootReason = 0;
  }

  readonly nosubscribe attribute NetworkInterfaceType networkInterfaces[] = 0;
  readonly nosubscribe attribute int16u rebootCount = 1;
  readonly nosubscribe attribute int64u upTime = 2;
  readonly nosubscribe attribute int32u totalOperationalHours = 3;
  readonly nosubscribe attribute enum8 bootReasons = 4;
  readonly nosubscribe attribute ENUM8 activeHardwareFaults[] = 5;
  readonly nosubscribe attribute ENUM8 activeRadioFaults[] = 6;
  readonly nosubscribe attribute ENUM8 activeNetworkFaults[] = 7;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster SoftwareDiagnostics = 52 {
  struct SoftwareFaultStruct {
    INT64U id = 0;
    CHAR_STRING<8> name = 1;
    OCTET_STRING<1024> faultRecording = 2;
  }

  struct ThreadMetrics {
    INT64U id = 0;
    CHAR_STRING<8> name = 1;
    INT32U stackFreeCurrent = 2;
    INT32U stackFreeMinimum = 3;
    INT32U stackSize = 4;
  }

  info event SoftwareFault = 0 {
    SoftwareFaultStruct softwareFault = 0;
  }

  readonly nosubscribe attribute ThreadMetrics threadMetrics[] = 0;
  readonly nosubscribe attribute int64u currentHeapFree = 1;
  readonly nosubscribe attribute int64u currentHeapUsed = 2;
  readonly nosubscribe attribute int64u currentHeapHighWatermark = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;


  command ResetWatermarks(): DefaultSuccess = 0;
}

server cluster ThreadNetworkDiagnostics = 53 {
  enum NetworkFault : ENUM8 {
    kUnspecified = 0;
    kLinkDown = 1;
    kHardwareFailure = 2;
    kNetworkJammed = 3;
  }

  enum RoutingRole : ENUM8 {
    kUnspecified = 0;
    kUnassigned = 1;
    kSleepyEndDevice = 2;
    kEndDevice = 3;
    kReed = 4;
    kRouter = 5;
    kLeader = 6;
  }

  enum ThreadConnectionStatus : ENUM8 {
    kConnected = 0;
    kNotConnected = 1;
  }

  bitmap ThreadNetworkDiagnosticsFeature : BITMAP32 {
    kPacketCounts = 0x1;
    kErrorCounts = 0x2;
    kMLECounts = 0x4;
    kMACCounts = 0x8;
  }

  struct NeighborTable {
    INT64U extAddress = 0;
    INT32U age = 1;
    INT16U rloc16 = 2;
    INT32U linkFrameCounter = 3;
    INT32U mleFrameCounter = 4;
    INT8U lqi = 5;
    INT8S averageRssi = 6;
    INT8S lastRssi = 7;
    INT8U frameErrorRate = 8;
    INT8U messageErrorRate = 9;
    BOOLEAN rxOnWhenIdle = 10;
    BOOLEAN fullThreadDevice = 11;
    BOOLEAN fullNetworkData = 12;
    BOOLEAN isChild = 13;
  }

  struct OperationalDatasetComponents {
    BOOLEAN activeTimestampPresent = 0;
    BOOLEAN pendingTimestampPresent = 1;
    BOOLEAN masterKeyPresent = 2;
    BOOLEAN networkNamePresent = 3;
    BOOLEAN extendedPanIdPresent = 4;
    BOOLEAN meshLocalPrefixPresent = 5;
    BOOLEAN delayPresent = 6;
    BOOLEAN panIdPresent = 7;
    BOOLEAN channelPresent = 8;
    BOOLEAN pskcPresent = 9;
    BOOLEAN securityPolicyPresent = 10;
    BOOLEAN channelMaskPresent = 11;
  }

  struct RouteTable {
    INT64U extAddress = 0;
    INT16U rloc16 = 1;
    INT8U routerId = 2;
    INT8U nextHop = 3;
    INT8U pathCost = 4;
    INT8U LQIIn = 5;
    INT8U LQIOut = 6;
    INT8U age = 7;
    BOOLEAN allocated = 8;
    BOOLEAN linkEstablished = 9;
  }

  struct SecurityPolicy {
    INT16U rotationTime = 0;
    BITMAP16 flags = 1;
  }

  info event ConnectionStatus = 0 {
    ThreadConnectionStatus connectionStatus = 0;
  }

  readonly nosubscribe attribute int16u channel = 0;
  readonly nosubscribe attribute enum8 routingRole = 1;
  readonly nosubscribe attribute char_string<16> networkName = 2;
  readonly nosubscribe attribute int16u panId = 3;
  readonly nosubscribe attribute int64u extendedPanId = 4;
  readonly nosubscribe attribute octet_string<17> meshLocalPrefix = 5;
  readonly nosubscribe attribute int64u overrunCount = 6;
  readonly nosubscribe attribute NeighborTable neighborTableList[] = 7;
  readonly nosubscribe attribute RouteTable routeTableList[] = 8;
  readonly nosubscribe attribute int32u partitionId = 9;
  readonly nosubscribe attribute int8u weighting = 10;
  readonly nosubscribe attribute int8u dataVersion = 11;
  readonly nosubscribe attribute int8u stableDataVersion = 12;
  readonly nosubscribe attribute int8u leaderRouterId = 13;
  readonly nosubscribe attribute int16u detachedRoleCount = 14;
  readonly nosubscribe attribute int16u childRoleCount = 15;
  readonly nosubscribe attribute int16u routerRoleCount = 16;
  readonly nosubscribe attribute int16u leaderRoleCount = 17;
  readonly nosubscribe attribute int16u attachAttemptCount = 18;
  readonly nosubscribe attribute int16u partitionIdChangeCount = 19;
  readonly nosubscribe attribute int16u betterPartitionAttachAttemptCount = 20;
  readonly nosubscribe attribute int16u parentChangeCount = 21;
  readonly nosubscribe attribute int32u txTotalCount = 22;
  readonly nosubscribe attribute int32u txUnicastCount = 23;
  readonly nosubscribe attribute int32u txBroadcastCount = 24;
  readonly nosubscribe attribute int32u txAckRequestedCount = 25;
  readonly nosubscribe attribute int32u txAckedCount = 26;
  readonly nosubscribe attribute int32u txNoAckRequestedCount = 27;
  readonly nosubscribe attribute int32u txDataCount = 28;
  readonly nosubscribe attribute int32u txDataPollCount = 29;
  readonly nosubscribe attribute int32u txBeaconCount = 30;
  readonly nosubscribe attribute int32u txBeaconRequestCount = 31;
  readonly nosubscribe attribute int32u txOtherCount = 32;
  readonly nosubscribe attribute int32u txRetryCount = 33;
  readonly nosubscribe attribute int32u txDirectMaxRetryExpiryCount = 34;
  readonly nosubscribe attribute int32u txIndirectMaxRetryExpiryCount = 35;
  readonly nosubscribe attribute int32u txErrCcaCount = 36;
  readonly nosubscribe attribute int32u txErrAbortCount = 37;
  readonly nosubscribe attribute int32u txErrBusyChannelCount = 38;
  readonly nosubscribe attribute int32u rxTotalCount = 39;
  readonly nosubscribe attribute int32u rxUnicastCount = 40;
  readonly nosubscribe attribute int32u rxBroadcastCount = 41;
  readonly nosubscribe attribute int32u rxDataCount = 42;
  readonly nosubscribe attribute int32u rxDataPollCount = 43;
  readonly nosubscribe attribute int32u rxBeaconCount = 44;
  readonly nosubscribe attribute int32u rxBeaconRequestCount = 45;
  readonly nosubscribe attribute int32u rxOtherCount = 46;
  readonly nosubscribe attribute int32u rxAddressFilteredCount = 47;
  readonly nosubscribe attribute int32u rxDestAddrFilteredCount = 48;
  readonly nosubscribe attribute int32u rxDuplicatedCount = 49;
  readonly nosubscribe attribute int32u rxErrNoFrameCount = 50;
  readonly nosubscribe attribute int32u rxErrUnknownNeighborCount = 51;
  readonly nosubscribe attribute int32u rxErrInvalidSrcAddrCount = 52;
  readonly nosubscribe attribute int32u rxErrSecCount = 53;
  readonly nosubscribe attribute int32u rxErrFcsCount = 54;
  readonly nosubscribe attribute int32u rxErrOtherCount = 55;
  readonly nosubscribe attribute int64u activeTimestamp = 56;
  readonly nosubscribe attribute int64u pendingTimestamp = 57;
  readonly nosubscribe attribute int32u delay = 58;
  readonly nosubscribe attribute SecurityPolicy securityPolicy[] = 59;
  readonly nosubscribe attribute octet_string<4> channelMask = 60;
  readonly nosubscribe attribute OperationalDatasetComponents operationalDatasetComponents[] = 61;
  readonly nosubscribe attribute NetworkFault activeNetworkFaultsList[] = 62;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;


  command ResetCounts(): DefaultSuccess = 0;
}

server cluster WiFiNetworkDiagnostics = 54 {
  enum AssociationFailureCause : ENUM8 {
    kUnknown = 0;
    kAssociationFailed = 1;
    kAuthenticationFailed = 2;
    kSsidNotFound = 3;
  }

  enum SecurityType : ENUM8 {
    kUnspecified = 0;
    kNone = 1;
    kWep = 2;
    kWpa = 3;
    kWpa2 = 4;
    kWpa3 = 5;
  }

  enum WiFiConnectionStatus : ENUM8 {
    kConnected = 0;
    kNotConnected = 1;
  }

  enum WiFiVersionType : ENUM8 {
    k80211a = 0;
    k80211b = 1;
    k80211g = 2;
    k80211n = 3;
    k80211ac = 4;
    k80211ax = 5;
  }

  info event Disconnection = 0 {
    INT16U reasonCode = 0;
  }

  info event AssociationFailure = 1 {
    AssociationFailureCause associationFailure = 0;
    INT16U status = 1;
  }

  info event ConnectionStatus = 2 {
    WiFiConnectionStatus connectionStatus = 0;
  }

  readonly nosubscribe attribute nullable octet_string<6> bssid = 0;
  readonly nosubscribe attribute nullable SecurityType securityType = 1;
  readonly nosubscribe attribute nullable WiFiVersionType wiFiVersion = 2;
  readonly nosubscribe attribute nullable int16u channelNumber = 3;
  readonly nosubscribe attribute nullable int8s rssi = 4;
  readonly nosubscribe attribute int32u beaconLostCount = 5;
  readonly nosubscribe attribute int32u beaconRxCount = 6;
  readonly nosubscribe attribute int32u packetMulticastRxCount = 7;
  readonly nosubscribe attribute int32u packetMulticastTxCount = 8;
  readonly nosubscribe attribute int32u packetUnicastRxCount = 9;
  readonly nosubscribe attribute int32u packetUnicastTxCount = 10;
  readonly nosubscribe attribute int64u currentMaxRate = 11;
  readonly nosubscribe attribute int64u overrunCount = 12;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;


  command ResetCounts(): DefaultSuccess = 0;
}

server cluster EthernetNetworkDiagnostics = 55 {
  enum PHYRateType : ENUM8 {
    k10m = 0;
    k100m = 1;
    k1000m = 2;
    k25g = 3;
    k5g = 4;
    k10g = 5;
    k40g = 6;
    k100g = 7;
    k200g = 8;
    k400g = 9;
  }

  readonly nosubscribe attribute nullable PHYRateType PHYRate = 0;
  readonly nosubscribe attribute nullable boolean fullDuplex = 1;
  readonly nosubscribe attribute int64u packetRxCount = 2;
  readonly nosubscribe attribute int64u packetTxCount = 3;
  readonly nosubscribe attribute int64u txErrCount = 4;
  readonly nosubscribe attribute int64u collisionCount = 5;
  readonly nosubscribe attribute int64u overrunCount = 6;
  readonly nosubscribe attribute nullable boolean carrierDetect = 7;
  readonly nosubscribe attribute int64u timeSinceReset = 8;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;


  command ResetCounts(): DefaultSuccess = 0;
}

server cluster TimeSynchronization = 56 {
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster BridgedDeviceBasic = 57 {
  critical event StartUp = 0 {
    INT32U softwareVersion = 0;
  }

  critical event ShutDown = 1 {
  }

  info event Leave = 2 {
  }

  info event ReachableChanged = 3 {
    boolean reachableNewValue = 0;
  }

  readonly nosubscribe attribute char_string<32> vendorName = 1;
  readonly nosubscribe attribute vendor_id vendorID = 2;
  readonly nosubscribe attribute char_string<32> productName = 3;
  readonly nosubscribe attribute char_string<32> nodeLabel = 5;
  readonly nosubscribe attribute int16u hardwareVersion = 7;
  readonly nosubscribe attribute char_string<64> hardwareVersionString = 8;
  readonly nosubscribe attribute int32u softwareVersion = 9;
  readonly nosubscribe attribute char_string<64> softwareVersionString = 10;
  readonly nosubscribe attribute char_string<16> manufacturingDate = 11;
  readonly nosubscribe attribute char_string<32> partNumber = 12;
  readonly nosubscribe attribute long_char_string<256> productURL = 13;
  readonly nosubscribe attribute char_string<64> productLabel = 14;
  readonly nosubscribe attribute char_string<32> serialNumber = 15;
  readonly nosubscribe attribute boolean reachable = 17;
  readonly nosubscribe attribute char_string<32> uniqueID = 18;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster Switch = 59 {
  info event SwitchLatched = 0 {
    INT8U newPosition = 0;
  }

  info event InitialPress = 1 {
    INT8U newPosition = 0;
  }

  info event LongPress = 2 {
    INT8U newPosition = 0;
  }

  info event ShortRelease = 3 {
    INT8U previousPosition = 0;
  }

  info event LongRelease = 4 {
    INT8U previousPosition = 0;
  }

  info event MultiPressOngoing = 5 {
    INT8U newPosition = 0;
    INT8U currentNumberOfPressesCounted = 1;
  }

  info event MultiPressComplete = 6 {
    INT8U newPosition = 0;
    INT8U totalNumberOfPressesCounted = 1;
  }

  readonly nosubscribe attribute int8u numberOfPositions = 0;
  readonly nosubscribe attribute int8u currentPosition = 1;
  readonly nosubscribe attribute int8u multiPressMax = 2;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster AdministratorCommissioning = 60 {
  enum CommissioningWindowStatus : ENUM8 {
    kWindowNotOpen = 0;
    kEnhancedWindowOpen = 1;
    kBasicWindowOpen = 2;
  }

  enum StatusCode : ENUM8 {
    kBusy = 1;
    kPAKEParameterError = 2;
    kWindowNotOpen = 3;
  }

  readonly nosubscribe attribute int8u windowStatus = 0;
  readonly nosubscribe attribute fabric_idx adminFabricIndex = 1;
  readonly nosubscribe attribute int16u adminVendorId = 2;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct OpenCommissioningWindowRequest {
    INT16U commissioningTimeout = 0;
    OCTET_STRING PAKEVerifier = 1;
    INT16U discriminator = 2;
    INT32U iterations = 3;
    OCTET_STRING salt = 4;
  }

  request struct OpenBasicCommissioningWindowRequest {
    INT16U commissioningTimeout = 0;
  }


  timed command access(invoke: administer) OpenCommissioningWindow(OpenCommissioningWindowRequest): DefaultSuccess = 0;
  timed command access(invoke: administer) OpenBasicCommissioningWindow(OpenBasicCommissioningWindowRequest): DefaultSuccess = 1;
  timed command access(invoke: administer) RevokeCommissioning(): DefaultSuccess = 2;
}

server cluster OperationalCredentials = 62 {
  enum OperationalCertStatus : ENUM8 {
    kSuccess = 0;
    kInvalidPublicKey = 1;
    kInvalidNodeOpId = 2;
    kInvalidNOC = 3;
    kMissingCsr = 4;
    kTableFull = 5;
    kInsufficientPrivilege = 8;
    kFabricConflict = 9;
    kLabelConflict = 10;
    kInvalidFabricIndex = 11;
  }

  struct FabricDescriptor {
    OCTET_STRING<65> rootPublicKey = 1;
    INT16U vendorId = 2;
    FABRIC_ID fabricId = 3;
    NODE_ID nodeId = 4;
    CHAR_STRING<32> label = 5;
    fabric_idx fabricIndex = 254;
  }

  struct NOCStruct {
    OCTET_STRING noc = 1;
    nullable OCTET_STRING icac = 2;
    fabric_idx fabricIndex = 254;
  }

  readonly nosubscribe attribute access(read: administer) NOCStruct NOCs[] = 0;
  readonly nosubscribe attribute FabricDescriptor fabrics[] = 1;
  readonly nosubscribe attribute int8u supportedFabrics = 2;
  readonly nosubscribe attribute int8u commissionedFabrics = 3;
  readonly nosubscribe attribute OCTET_STRING trustedRootCertificates[] = 4;
  readonly nosubscribe attribute fabric_idx currentFabricIndex = 5;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct AttestationRequestRequest {
    OCTET_STRING attestationNonce = 0;
  }

  response struct AttestationResponse = 1 {
    OCTET_STRING attestationElements = 0;
    OCTET_STRING signature = 1;
  }

  request struct CertificateChainRequestRequest {
    INT8U certificateType = 0;
  }

  response struct CertificateChainResponse = 3 {
    OCTET_STRING certificate = 0;
  }

  request struct CSRRequestRequest {
    OCTET_STRING CSRNonce = 0;
  }

  response struct CSRResponse = 5 {
    OCTET_STRING NOCSRElements = 0;
    OCTET_STRING attestationSignature = 1;
  }

  request struct AddNOCRequest {
    OCTET_STRING NOCValue = 0;
    optional OCTET_STRING ICACValue = 1;
    OCTET_STRING IPKValue = 2;
    NODE_ID caseAdminNode = 3;
    INT16U adminVendorId = 4;
  }

  request struct UpdateNOCRequest {
    OCTET_STRING NOCValue = 0;
    optional OCTET_STRING ICACValue = 1;
  }

  response struct NOCResponse = 8 {
    OperationalCertStatus statusCode = 0;
    optional fabric_idx fabricIndex = 1;
    optional CHAR_STRING debugText = 2;
  }

  request struct UpdateFabricLabelRequest {
    CHAR_STRING label = 0;
  }

  request struct RemoveFabricRequest {
    fabric_idx fabricIndex = 0;
  }

  request struct AddTrustedRootCertificateRequest {
    OCTET_STRING rootCertificate = 0;
  }

  request struct RemoveTrustedRootCertificateRequest {
    OCTET_STRING trustedRootIdentifier = 0;
  }


  command access(invoke: administer) AttestationRequest(AttestationRequestRequest): AttestationResponse = 0;
  command access(invoke: administer) CertificateChainRequest(CertificateChainRequestRequest): CertificateChainResponse = 2;
  command access(invoke: administer) CSRRequest(CSRRequestRequest): CSRResponse = 4;
  command access(invoke: administer) AddNOC(AddNOCRequest): NOCResponse = 6;
  command access(invoke: administer) UpdateNOC(UpdateNOCRequest): NOCResponse = 7;
  command access(invoke: administer) UpdateFabricLabel(UpdateFabricLabelRequest): NOCResponse = 9;
  command access(invoke: administer) RemoveFabric(RemoveFabricRequest): NOCResponse = 10;
  command access(invoke: administer) AddTrustedRootCertificate(AddTrustedRootCertificateRequest): DefaultSuccess = 11;
  command access(invoke: administer) RemoveTrustedRootCertificate(RemoveTrustedRootCertificateRequest): DefaultSuccess = 12;
}

server cluster GroupKeyManagement = 63 {
  enum GroupKeySecurityPolicy : ENUM8 {
    kTrustFirst = 0;
    kCacheAndSync = 1;
  }

  struct GroupInfoMapStruct {
    group_id groupId = 1;
    endpoint_no endpoints[] = 2;
    optional CHAR_STRING<16> groupName = 3;
    fabric_idx fabricIndex = 254;
  }

  struct GroupKeyMapStruct {
    group_id groupId = 1;
    INT16U groupKeySetID = 2;
    fabric_idx fabricIndex = 254;
  }

  struct GroupKeySetStruct {
    INT16U groupKeySetID = 0;
    GroupKeySecurityPolicy groupKeySecurityPolicy = 1;
    nullable OCTET_STRING<16> epochKey0 = 2;
    nullable epoch_us epochStartTime0 = 3;
    nullable OCTET_STRING<16> epochKey1 = 4;
    nullable epoch_us epochStartTime1 = 5;
    nullable OCTET_STRING<16> epochKey2 = 6;
    nullable epoch_us epochStartTime2 = 7;
  }

  readonly nosubscribe attribute access(write: manage) GroupKeyMapStruct groupKeyMap[] = 0;
  readonly nosubscribe attribute GroupInfoMapStruct groupTable[] = 1;
  readonly nosubscribe attribute int16u maxGroupsPerFabric = 2;
  readonly nosubscribe attribute int16u maxGroupKeysPerFabric = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct KeySetWriteRequest {
    GroupKeySetStruct groupKeySet = 0;
  }

  request struct KeySetReadRequest {
    INT16U groupKeySetID = 0;
  }

  response struct KeySetReadResponse = 2 {
    GroupKeySetStruct groupKeySet = 0;
  }

  request struct KeySetRemoveRequest {
    INT16U groupKeySetID = 0;
  }

  request struct KeySetReadAllIndicesRequest {
    INT16U groupKeySetIDs[] = 0;
  }

  response struct KeySetReadAllIndicesResponse = 5 {
    INT16U groupKeySetIDs[] = 0;
  }


  command access(invoke: administer) KeySetWrite(KeySetWriteRequest): DefaultSuccess = 0;
  command access(invoke: administer) KeySetRead(KeySetReadRequest): KeySetReadResponse = 1;
  command access(invoke: administer) KeySetRemove(KeySetRemoveRequest): DefaultSuccess = 3;
  command access(invoke: administer) KeySetReadAllIndices(KeySetReadAllIndicesRequest): KeySetReadAllIndicesResponse = 4;
}

server cluster FixedLabel = 64 {
  struct LabelStruct {
    CHAR_STRING<16> label = 0;
    CHAR_STRING<16> value = 1;
  }

  readonly nosubscribe attribute LabelStruct labelList[] = 0;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster UserLabel = 65 {
  struct LabelStruct {
    CHAR_STRING<16> label = 0;
    CHAR_STRING<16> value = 1;
  }

  readonly nosubscribe attribute access(write: manage) LabelStruct labelList[] = 0;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster ProxyConfiguration = 66 {
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster ProxyDiscovery = 67 {
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster ProxyValid = 68 {
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster BooleanState = 69 {
  info event StateChange = 0 {
    boolean stateValue = 0;
  }

  readonly nosubscribe attribute boolean stateValue = 0;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster ModeSelect = 80 {
  bitmap ModeSelectFeature : BITMAP32 {
    kDeponoff = 0x1;
  }

  struct ModeOptionStruct {
    CHAR_STRING<32> label = 0;
    INT8U mode = 1;
    INT32U semanticTag = 2;
  }

  struct SemanticTag {
    ENUM16 mfgCode = 0;
    ENUM16 value = 1;
  }

  readonly nosubscribe attribute char_string<32> description = 0;
  readonly nosubscribe attribute nullable enum16 standardNamespace = 1;
  readonly nosubscribe attribute ModeOptionStruct supportedModes[] = 2;
  readonly nosubscribe attribute int8u currentMode = 3;
  readonly nosubscribe attribute nullable int8u startUpMode = 4;
  readonly nosubscribe attribute nullable int8u onMode = 5;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct ChangeToModeRequest {
    INT8U newMode = 0;
  }


  command ChangeToMode(ChangeToModeRequest): DefaultSuccess = 0;
}

server cluster ShadeConfiguration = 256 {
  readonly nosubscribe attribute int16u physicalClosedLimit = 0;
  readonly nosubscribe attribute int8u motorStepSize = 1;
  readonly nosubscribe attribute bitmap8 status = 2;
  readonly nosubscribe attribute int16u closedLimit = 16;
  readonly nosubscribe attribute enum8 mode = 17;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster DoorLock = 257 {
  enum DlAlarmCode : ENUM8 {
    kLockJammed = 0;
    kLockFactoryReset = 1;
    kLockRadioPowerCycled = 3;
    kWrongCodeEntryLimit = 4;
    kFrontEsceutcheonRemoved = 5;
    kDoorForcedOpen = 6;
    kDoorAjar = 7;
    kForcedUser = 8;
  }

  enum DlCredentialRule : ENUM8 {
    kSingle = 0;
    kDouble = 1;
    kTri = 2;
  }

  enum DlCredentialType : ENUM8 {
    kProgrammingPIN = 0;
    kPin = 1;
    kRfid = 2;
    kFingerprint = 3;
    kFingerVein = 4;
    kFace = 5;
  }

  enum DlDataOperationType : ENUM8 {
    kAdd = 0;
    kClear = 1;
    kModify = 2;
  }

  enum DlDoorState : ENUM8 {
    kDoorOpen = 0;
    kDoorClosed = 1;
    kDoorJammed = 2;
    kDoorForcedOpen = 3;
    kDoorUnspecifiedError = 4;
    kDoorAjar = 5;
  }

  enum DlLockDataType : ENUM8 {
    kUnspecified = 0;
    kProgrammingCode = 1;
    kUserIndex = 2;
    kWeekDaySchedule = 3;
    kYearDaySchedule = 4;
    kHolidaySchedule = 5;
    kPin = 6;
    kRfid = 7;
    kFingerprint = 8;
  }

  enum DlLockOperationType : ENUM8 {
    kLock = 0;
    kUnlock = 1;
    kNonAccessUserEvent = 2;
    kForcedUserEvent = 3;
  }

  enum DlLockState : ENUM8 {
    kNotFullyLocked = 0;
    kLocked = 1;
    kUnlocked = 2;
  }

  enum DlLockType : ENUM8 {
    kDeadBolt = 0;
    kMagnetic = 1;
    kOther = 2;
    kMortise = 3;
    kRim = 4;
    kLatchBolt = 5;
    kCylindricalLock = 6;
    kTubularLock = 7;
    kInterconnectedLock = 8;
    kDeadLatch = 9;
    kDoorFurniture = 10;
  }

  enum DlOperatingMode : ENUM8 {
    kNormal = 0;
    kVacation = 1;
    kPrivacy = 2;
    kNoRemoteLockUnlock = 3;
    kPassage = 4;
  }

  enum DlOperationError : ENUM8 {
    kUnspecified = 0;
    kInvalidCredential = 1;
    kDisabledUserDenied = 2;
    kRestricted = 3;
    kInsufficientBattery = 4;
  }

  enum DlOperationSource : ENUM8 {
    kUnspecified = 0;
    kManual = 1;
    kProprietaryRemote = 2;
    kKeypad = 3;
    kAuto = 4;
    kButton = 5;
    kSchedule = 6;
    kRemote = 7;
    kRfid = 8;
    kBiometric = 9;
  }

  enum DlStatus : ENUM8 {
    kSuccess = 0;
    kFailure = 1;
    kDuplicate = 2;
    kOccupied = 3;
    kInvalidField = 133;
    kNotFound = 139;
  }

  enum DlUserStatus : ENUM8 {
    kAvailable = 0;
    kOccupiedEnabled = 1;
    kOccupiedDisabled = 3;
  }

  enum DlUserType : ENUM8 {
    kUnrestrictedUser = 0;
    kYearDayScheduleUser = 1;
    kWeekDayScheduleUser = 2;
    kProgrammingUser = 3;
    kNonAccessUser = 4;
    kForcedUser = 5;
    kDisposableUser = 6;
    kExpiringUser = 7;
    kScheduleRestrictedUser = 8;
    kRemoteOnlyUser = 9;
  }

  enum DoorLockOperationEventCode : ENUM8 {
    kUnknownOrMfgSpecific = 0;
    kLock = 1;
    kUnlock = 2;
    kLockInvalidPinOrId = 3;
    kLockInvalidSchedule = 4;
    kUnlockInvalidPinOrId = 5;
    kUnlockInvalidSchedule = 6;
    kOneTouchLock = 7;
    kKeyLock = 8;
    kKeyUnlock = 9;
    kAutoLock = 10;
    kScheduleLock = 11;
    kScheduleUnlock = 12;
    kManualLock = 13;
    kManualUnlock = 14;
  }

  enum DoorLockProgrammingEventCode : ENUM8 {
    kUnknownOrMfgSpecific = 0;
    kMasterCodeChanged = 1;
    kPinAdded = 2;
    kPinDeleted = 3;
    kPinChanged = 4;
    kIdAdded = 5;
    kIdDeleted = 6;
  }

  enum DoorLockSetPinOrIdStatus : ENUM8 {
    kSuccess = 0;
    kGeneralFailure = 1;
    kMemoryFull = 2;
    kDuplicateCodeError = 3;
  }

  enum DoorLockUserStatus : ENUM8 {
    kAvailable = 0;
    kOccupiedEnabled = 1;
    kOccupiedDisabled = 3;
    kNotSupported = 255;
  }

  enum DoorLockUserType : ENUM8 {
    kUnrestricted = 0;
    kYearDayScheduleUser = 1;
    kWeekDayScheduleUser = 2;
    kMasterUser = 3;
    kNonAccessUser = 4;
    kNotSupported = 255;
  }

  bitmap DlAlarmMask : BITMAP16 {
    kLockingMechanismJammed = 0x1;
    kLockResetToFactoryDefaults = 0x2;
    kReserved = 0x4;
    kRFModulePowerCycled = 0x8;
    kWrongCodeEntryLimit = 0x10;
    kFrontEscutcheonRemovedFromMain = 0x20;
    kForcedDoorOpenUnderDoorLockedCondition = 0x40;
  }

  bitmap DlCredentialRuleMask : BITMAP8 {
    kSingle = 0x1;
    kDual = 0x2;
    kTri = 0x4;
  }

  bitmap DlCredentialRulesSupport : BITMAP8 {
    kSingle = 0x1;
    kDual = 0x2;
    kTri = 0x4;
  }

  bitmap DlDaysMaskMap : BITMAP8 {
    kSunday = 0x1;
    kMonday = 0x2;
    kTuesday = 0x4;
    kWednesday = 0x8;
    kThursday = 0x10;
    kFriday = 0x20;
    kSaturday = 0x40;
  }

  bitmap DlDefaultConfigurationRegister : BITMAP16 {
    kEnableLocalProgrammingEnabled = 0x1;
    kKeypadInterfaceDefaultAccessEnabled = 0x2;
    kRemoteInterfaceDefaultAccessIsEnabled = 0x4;
    kSoundEnabled = 0x20;
    kAutoRelockTimeSet = 0x40;
    kLEDSettingsSet = 0x80;
  }

  bitmap DlKeypadOperationEventMask : BITMAP16 {
    kUnknown = 0x1;
    kLock = 0x2;
    kUnlock = 0x4;
    kLockInvalidPIN = 0x8;
    kLockInvalidSchedule = 0x10;
    kUnlockInvalidCode = 0x20;
    kUnlockInvalidSchedule = 0x40;
    kNonAccessUserOpEvent = 0x80;
  }

  bitmap DlKeypadProgrammingEventMask : BITMAP16 {
    kUnknown = 0x1;
    kProgrammingPINChanged = 0x2;
    kPINAdded = 0x4;
    kPINCleared = 0x8;
    kPINChanged = 0x10;
  }

  bitmap DlLocalProgrammingFeatures : BITMAP8 {
    kAddUsersCredentialsSchedulesLocally = 0x1;
    kModifyUsersCredentialsSchedulesLocally = 0x2;
    kClearUsersCredentialsSchedulesLocally = 0x4;
    kAdjustLockSettingsLocally = 0x8;
  }

  bitmap DlManualOperationEventMask : BITMAP16 {
    kUnknown = 0x1;
    kThumbturnLock = 0x2;
    kThumbturnUnlock = 0x4;
    kOneTouchLock = 0x8;
    kKeyLock = 0x10;
    kKeyUnlock = 0x20;
    kAutoLock = 0x40;
    kScheduleLock = 0x80;
    kScheduleUnlock = 0x100;
    kManualLock = 0x200;
    kManualUnlock = 0x400;
  }

  bitmap DlRFIDOperationEventMask : BITMAP16 {
    kUnknown = 0x1;
    kLock = 0x2;
    kUnlock = 0x4;
    kLockInvalidRFID = 0x8;
    kLockInvalidSchedule = 0x10;
    kUnlockInvalidRFID = 0x20;
    kUnlockInvalidSchedule = 0x40;
  }

  bitmap DlRFIDProgrammingEventMask : BITMAP16 {
    kUnknown = 0x1;
    kRFIDCodeAdded = 0x20;
    kRFIDCodeCleared = 0x40;
  }

  bitmap DlRemoteOperationEventMask : BITMAP16 {
    kUnknown = 0x1;
    kLock = 0x2;
    kUnlock = 0x4;
    kLockInvalidCode = 0x8;
    kLockInvalidSchedule = 0x10;
    kUnlockInvalidCode = 0x20;
    kUnlockInvalidSchedule = 0x40;
  }

  bitmap DlRemoteProgrammingEventMask : BITMAP16 {
    kUnknown = 0x1;
    kProgrammingPINChanged = 0x2;
    kPINAdded = 0x4;
    kPINCleared = 0x8;
    kPINChanged = 0x10;
    kRFIDCodeAdded = 0x20;
    kRFIDCodeCleared = 0x40;
  }

  bitmap DlSupportedOperatingModes : BITMAP16 {
    kNormal = 0x1;
    kVacation = 0x2;
    kPrivacy = 0x4;
    kNoRemoteLockUnlock = 0x8;
    kPassage = 0x10;
  }

  bitmap DoorLockDayOfWeek : BITMAP8 {
    kSunday = 0x1;
    kMonday = 0x2;
    kTuesday = 0x4;
    kWednesday = 0x8;
    kThursday = 0x10;
    kFriday = 0x20;
    kSaturday = 0x40;
  }

  bitmap DoorLockFeature : BITMAP32 {
    kPINCredentials = 0x1;
    kRFIDCredentials = 0x2;
    kFingerCredentials = 0x4;
    kLogging = 0x8;
    kAccessSchedules = 0x10;
    kDoorPositionSensor = 0x20;
    kFaceCredentials = 0x40;
    kCredentialsOTA = 0x80;
    kUsersManagement = 0x100;
    kNotifications = 0x200;
  }

  struct DlCredential {
    DlCredentialType credentialType = 0;
    INT16U credentialIndex = 1;
  }

  critical event DoorLockAlarm = 0 {
    DlAlarmCode alarmCode = 0;
  }

  critical event DoorStateChange = 1 {
    DlDoorState doorState = 0;
  }

  critical event LockOperation = 2 {
    DlLockOperationType lockOperationType = 0;
    DlOperationSource operationSource = 1;
    nullable INT16U userIndex = 2;
    nullable fabric_idx fabricIndex = 3;
    nullable NODE_ID sourceNode = 4;
    optional nullable DlCredential credentials[] = 5;
  }

  critical event LockOperationError = 3 {
    DlLockOperationType lockOperationType = 0;
    DlOperationSource operationSource = 1;
    DlOperationError operationError = 2;
    nullable INT16U userIndex = 3;
    nullable fabric_idx fabricIndex = 4;
    nullable NODE_ID sourceNode = 5;
    optional nullable DlCredential credentials[] = 6;
  }

  info event LockUserChange = 4 {
    DlLockDataType lockDataType = 0;
    DlDataOperationType dataOperationType = 1;
    DlOperationSource operationSource = 2;
    nullable INT16U userIndex = 3;
    nullable fabric_idx fabricIndex = 4;
    nullable NODE_ID sourceNode = 5;
    nullable INT16U dataIndex = 6;
  }

  readonly nosubscribe attribute nullable DlLockState lockState = 0;
  readonly nosubscribe attribute DlLockType lockType = 1;
  readonly nosubscribe attribute boolean actuatorEnabled = 2;
  readonly nosubscribe attribute nullable DlDoorState doorState = 3;
  readonly nosubscribe attribute access(write: manage) int32u doorOpenEvents = 4;
  readonly nosubscribe attribute access(write: manage) int32u doorClosedEvents = 5;
  readonly nosubscribe attribute access(write: manage) int16u openPeriod = 6;
  readonly nosubscribe attribute int16u numberOfLogRecordsSupported = 16;
  readonly nosubscribe attribute int16u numberOfTotalUsersSupported = 17;
  readonly nosubscribe attribute int16u numberOfPINUsersSupported = 18;
  readonly nosubscribe attribute int16u numberOfRFIDUsersSupported = 19;
  readonly nosubscribe attribute int8u numberOfWeekDaySchedulesSupportedPerUser = 20;
  readonly nosubscribe attribute int8u numberOfYearDaySchedulesSupportedPerUser = 21;
  readonly nosubscribe attribute int8u numberOfHolidaySchedulesSupported = 22;
  readonly nosubscribe attribute int8u maxPINCodeLength = 23;
  readonly nosubscribe attribute int8u minPINCodeLength = 24;
  readonly nosubscribe attribute int8u maxRFIDCodeLength = 25;
  readonly nosubscribe attribute int8u minRFIDCodeLength = 26;
  readonly nosubscribe attribute DlCredentialRuleMask credentialRulesSupport = 27;
  readonly nosubscribe attribute access(write: administer) boolean enableLogging = 32;
  readonly nosubscribe attribute access(write: manage) char_string<3> language = 33;
  readonly nosubscribe attribute access(write: manage) int8u LEDSettings = 34;
  readonly nosubscribe attribute access(write: manage) int32u autoRelockTime = 35;
  readonly nosubscribe attribute access(write: manage) int8u soundVolume = 36;
  readonly nosubscribe attribute access(write: manage) DlOperatingMode operatingMode = 37;
  readonly nosubscribe attribute DlSupportedOperatingModes supportedOperatingModes = 38;
  readonly nosubscribe attribute DlDefaultConfigurationRegister defaultConfigurationRegister = 39;
  readonly nosubscribe attribute access(write: administer) boolean enableLocalProgramming = 40;
  readonly nosubscribe attribute access(write: manage) boolean enableOneTouchLocking = 41;
  readonly nosubscribe attribute access(write: manage) boolean enableInsideStatusLED = 42;
  readonly nosubscribe attribute access(write: manage) boolean enablePrivacyModeButton = 43;
  readonly nosubscribe attribute access(write: administer) DlLocalProgrammingFeatures localProgrammingFeatures = 44;
  readonly nosubscribe attribute access(write: administer) int8u wrongCodeEntryLimit = 48;
  readonly nosubscribe attribute access(write: administer) int8u userCodeTemporaryDisableTime = 49;
  readonly nosubscribe attribute access(write: administer) boolean sendPINOverTheAir = 50;
  readonly nosubscribe attribute access(write: administer) boolean requirePINforRemoteOperation = 51;
  readonly nosubscribe attribute access(write: administer) int16u expiringUserTimeout = 53;
  readonly nosubscribe attribute access(write: administer) DlAlarmMask alarmMask = 64;
  readonly nosubscribe attribute access(write: administer) DlKeypadOperationEventMask keypadOperationEventMask = 65;
  readonly nosubscribe attribute access(write: administer) DlRemoteOperationEventMask remoteOperationEventMask = 66;
  readonly nosubscribe attribute access(write: administer) DlManualOperationEventMask manualOperationEventMask = 67;
  readonly nosubscribe attribute access(write: administer) DlRFIDOperationEventMask RFIDOperationEventMask = 68;
  readonly nosubscribe attribute access(write: administer) DlKeypadOperationEventMask keypadProgrammingEventMask = 69;
  readonly nosubscribe attribute access(write: administer) DlRemoteProgrammingEventMask remoteProgrammingEventMask = 70;
  readonly nosubscribe attribute access(write: administer) DlRFIDProgrammingEventMask RFIDProgrammingEventMask = 71;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct LockDoorRequest {
    optional OCTET_STRING pinCode = 0;
  }

  request struct UnlockDoorRequest {
    optional OCTET_STRING pinCode = 0;
  }

  request struct UnlockWithTimeoutRequest {
    INT16U timeout = 0;
    optional OCTET_STRING pinCode = 1;
  }

  request struct GetLogRecordRequest {
    INT16U logIndex = 0;
  }

  response struct GetLogRecordResponse = 4 {
    INT16U logEntryId = 0;
    INT32U timestamp = 1;
    ENUM8 eventType = 2;
    INT8U source = 3;
    INT8U eventIdOrAlarmCode = 4;
    INT16U userId = 5;
    OCTET_STRING pin = 6;
  }

  request struct SetPINCodeRequest {
    INT16U userId = 0;
    nullable DlUserStatus userStatus = 1;
    nullable DlUserType userType = 2;
    OCTET_STRING pin = 3;
  }

  request struct GetPINCodeRequest {
    INT16U userId = 0;
  }

  response struct GetPINCodeResponse = 6 {
    INT16U userId = 0;
    nullable DlUserStatus userStatus = 1;
    nullable DlUserType userType = 2;
    nullable OCTET_STRING pin = 3;
  }

  request struct ClearPINCodeRequest {
    INT16U pinSlotIndex = 0;
  }

  request struct SetUserStatusRequest {
    INT16U userId = 0;
    DlUserStatus userStatus = 1;
  }

  request struct GetUserStatusRequest {
    INT16U userId = 0;
  }

  response struct GetUserStatusResponse = 10 {
    INT16U userId = 0;
    DlUserStatus userStatus = 1;
  }

  request struct SetWeekDayScheduleRequest {
    INT8U weekDayIndex = 0;
    INT16U userIndex = 1;
    DlDaysMaskMap daysMask = 2;
    INT8U startHour = 3;
    INT8U startMinute = 4;
    INT8U endHour = 5;
    INT8U endMinute = 6;
  }

  request struct GetWeekDayScheduleRequest {
    INT8U weekDayIndex = 0;
    INT16U userIndex = 1;
  }

  response struct GetWeekDayScheduleResponse = 12 {
    INT8U weekDayIndex = 0;
    INT16U userIndex = 1;
    DlStatus status = 2;
    optional DlDaysMaskMap daysMask = 3;
    optional INT8U startHour = 4;
    optional INT8U startMinute = 5;
    optional INT8U endHour = 6;
    optional INT8U endMinute = 7;
  }

  request struct ClearWeekDayScheduleRequest {
    INT8U weekDayIndex = 0;
    INT16U userIndex = 1;
  }

  request struct SetYearDayScheduleRequest {
    INT8U yearDayIndex = 0;
    INT16U userIndex = 1;
    epoch_s localStartTime = 2;
    epoch_s localEndTime = 3;
  }

  request struct GetYearDayScheduleRequest {
    INT8U yearDayIndex = 0;
    INT16U userIndex = 1;
  }

  response struct GetYearDayScheduleResponse = 15 {
    INT8U yearDayIndex = 0;
    INT16U userIndex = 1;
    DlStatus status = 2;
    optional epoch_s localStartTime = 3;
    optional epoch_s localEndTime = 4;
  }

  request struct ClearYearDayScheduleRequest {
    INT8U yearDayIndex = 0;
    INT16U userIndex = 1;
  }

  request struct SetHolidayScheduleRequest {
    INT8U holidayIndex = 0;
    epoch_s localStartTime = 1;
    epoch_s localEndTime = 2;
    DlOperatingMode operatingMode = 3;
  }

  request struct GetHolidayScheduleRequest {
    INT8U holidayIndex = 0;
  }

  response struct GetHolidayScheduleResponse = 18 {
    INT8U holidayIndex = 0;
    DlStatus status = 1;
    optional epoch_s localStartTime = 2;
    optional epoch_s localEndTime = 3;
    optional DlOperatingMode operatingMode = 4;
  }

  request struct ClearHolidayScheduleRequest {
    INT8U holidayIndex = 0;
  }

  request struct SetUserTypeRequest {
    INT16U userId = 0;
    DlUserType userType = 1;
  }

  request struct GetUserTypeRequest {
    INT16U userId = 0;
  }

  response struct GetUserTypeResponse = 21 {
    INT16U userId = 0;
    DlUserType userType = 1;
  }

  request struct SetRFIDCodeRequest {
    INT16U userId = 0;
    nullable DlUserStatus userStatus = 1;
    nullable DlUserType userType = 2;
    OCTET_STRING rfidCode = 3;
  }

  request struct GetRFIDCodeRequest {
    INT16U userId = 0;
  }

  response struct GetRFIDCodeResponse = 23 {
    INT16U userId = 0;
    nullable DlUserStatus userStatus = 1;
    nullable DlUserType userType = 2;
    nullable OCTET_STRING rfidCode = 3;
  }

  request struct ClearRFIDCodeRequest {
    INT16U rfidSlotIndex = 0;
  }

  request struct SetUserRequest {
    DlDataOperationType operationType = 0;
    INT16U userIndex = 1;
    nullable CHAR_STRING userName = 2;
    nullable INT32U userUniqueId = 3;
    nullable DlUserStatus userStatus = 4;
    nullable DlUserType userType = 5;
    nullable DlCredentialRule credentialRule = 6;
  }

  request struct GetUserRequest {
    INT16U userIndex = 0;
  }

  response struct GetUserResponse = 28 {
    INT16U userIndex = 0;
    nullable CHAR_STRING userName = 1;
    nullable INT32U userUniqueId = 2;
    nullable DlUserStatus userStatus = 3;
    nullable DlUserType userType = 4;
    nullable DlCredentialRule credentialRule = 5;
    nullable DlCredential credentials[] = 6;
    nullable fabric_idx creatorFabricIndex = 7;
    nullable fabric_idx lastModifiedFabricIndex = 8;
    nullable INT16U nextUserIndex = 9;
  }

  request struct ClearUserRequest {
    INT16U userIndex = 0;
  }

  response struct OperatingEventNotification = 32 {
    INT8U operationEventSource = 0;
    INT8U operationEventCode = 1;
    INT16U userId = 2;
    OCTET_STRING pin = 3;
    epoch_s localTime = 4;
    optional CHAR_STRING data = 5;
  }

  response struct ProgrammingEventNotification = 33 {
    INT8U programEventSource = 0;
    INT8U programEventCode = 1;
    INT16U userId = 2;
    OCTET_STRING pin = 3;
    DlUserType userType = 4;
    DlUserStatus userStatus = 5;
    epoch_s localTime = 6;
    optional CHAR_STRING data = 7;
  }

  request struct SetCredentialRequest {
    DlDataOperationType operationType = 0;
    DlCredential credential = 1;
    LONG_OCTET_STRING credentialData = 2;
    nullable INT16U userIndex = 3;
    nullable DlUserStatus userStatus = 4;
    nullable DlUserType userType = 5;
  }

  response struct SetCredentialResponse = 35 {
    DlStatus status = 0;
    nullable INT16U userIndex = 1;
    nullable INT16U nextCredentialIndex = 2;
  }

  request struct GetCredentialStatusRequest {
    DlCredential credential = 0;
  }

  response struct GetCredentialStatusResponse = 37 {
    boolean credentialExists = 0;
    nullable INT16U userIndex = 1;
    nullable INT16U nextCredentialIndex = 2;
  }

  request struct ClearCredentialRequest {
    nullable DlCredential credential = 0;
  }


  timed command LockDoor(LockDoorRequest): DefaultSuccess = 0;
  timed command UnlockDoor(UnlockDoorRequest): DefaultSuccess = 1;
  timed command UnlockWithTimeout(UnlockWithTimeoutRequest): DefaultSuccess = 3;
  command access(invoke: manage) GetLogRecord(GetLogRecordRequest): GetLogRecordResponse = 4;
  timed command access(invoke: administer) SetPINCode(SetPINCodeRequest): DefaultSuccess = 5;
  command access(invoke: administer) GetPINCode(GetPINCodeRequest): GetPINCodeResponse = 6;
  timed command access(invoke: administer) ClearPINCode(ClearPINCodeRequest): DefaultSuccess = 7;
  timed command access(invoke: administer) ClearAllPINCodes(): DefaultSuccess = 8;
  command access(invoke: administer) SetUserStatus(SetUserStatusRequest): DefaultSuccess = 9;
  command access(invoke: administer) GetUserStatus(GetUserStatusRequest): GetUserStatusResponse = 10;
  command access(invoke: administer) SetWeekDaySchedule(SetWeekDayScheduleRequest): DefaultSuccess = 11;
  command access(invoke: administer) GetWeekDaySchedule(GetWeekDayScheduleRequest): GetWeekDayScheduleResponse = 12;
  command access(invoke: administer) ClearWeekDaySchedule(ClearWeekDayScheduleRequest): DefaultSuccess = 13;
  command access(invoke: administer) SetYearDaySchedule(SetYearDayScheduleRequest): DefaultSuccess = 14;
  command access(invoke: administer) GetYearDaySchedule(GetYearDayScheduleRequest): GetYearDayScheduleResponse = 15;
  command access(invoke: administer) ClearYearDaySchedule(ClearYearDayScheduleRequest): DefaultSuccess = 16;
  command access(invoke: administer) SetHolidaySchedule(SetHolidayScheduleRequest): DefaultSuccess = 17;
  command access(invoke: administer) GetHolidaySchedule(GetHolidayScheduleRequest): GetHolidayScheduleResponse = 18;
  command access(invoke: administer) ClearHolidaySchedule(ClearHolidayScheduleRequest): DefaultSuccess = 19;
  command access(invoke: administer) SetUserType(SetUserTypeRequest): DefaultSuccess = 20;
  command access(invoke: administer) GetUserType(GetUserTypeRequest): GetUserTypeResponse = 21;
  timed command access(invoke: administer) SetRFIDCode(SetRFIDCodeRequest): DefaultSuccess = 22;
  command access(invoke: administer) GetRFIDCode(GetRFIDCodeRequest): GetRFIDCodeResponse = 23;
  timed command access(invoke: administer) ClearRFIDCode(ClearRFIDCodeRequest): DefaultSuccess = 24;
  timed command access(invoke: administer) ClearAllRFIDCodes(): DefaultSuccess = 25;
  timed command access(invoke: administer) SetUser(SetUserRequest): DefaultSuccess = 26;
  command access(invoke: administer) GetUser(GetUserRequest): GetUserResponse = 27;
  timed command access(invoke: administer) ClearUser(ClearUserRequest): DefaultSuccess = 29;
  timed command access(invoke: administer) SetCredential(SetCredentialRequest): SetCredentialResponse = 34;
  command access(invoke: administer) GetCredentialStatus(GetCredentialStatusRequest): GetCredentialStatusResponse = 36;
  timed command access(invoke: administer) ClearCredential(ClearCredentialRequest): DefaultSuccess = 38;
}

server cluster WindowCovering = 258 {
  enum EndProductType : ENUM8 {
    kRollerShade = 0;
    kRomanShade = 1;
    kBalloonShade = 2;
    kWovenWood = 3;
    kPleatedShade = 4;
    kCellularShade = 5;
    kLayeredShade = 6;
    kLayeredShade2D = 7;
    kSheerShade = 8;
    kTiltOnlyInteriorBlind = 9;
    kInteriorBlind = 10;
    kVerticalBlindStripCurtain = 11;
    kInteriorVenetianBlind = 12;
    kExteriorVenetianBlind = 13;
    kLateralLeftCurtain = 14;
    kLateralRightCurtain = 15;
    kCentralCurtain = 16;
    kRollerShutter = 17;
    kExteriorVerticalScreen = 18;
    kAwningTerracePatio = 19;
    kAwningVerticalScreen = 20;
    kTiltOnlyPergola = 21;
    kSwingingShutter = 22;
    kSlidingShutter = 23;
    kUnknown = 255;
  }

  enum Type : ENUM8 {
    kRollerShade = 0;
    kRollerShade2Motor = 1;
    kRollerShadeExterior = 2;
    kRollerShadeExterior2Motor = 3;
    kDrapery = 4;
    kAwning = 5;
    kShutter = 6;
    kTiltBlindTiltOnly = 7;
    kTiltBlindLiftAndTilt = 8;
    kProjectorScreen = 9;
    kUnknown = 255;
  }

  bitmap ConfigStatus : BITMAP8 {
    kOperational = 0x1;
    kOnlineReserved = 0x2;
    kLiftMovementReversed = 0x4;
    kLiftPositionAware = 0x8;
    kTiltPositionAware = 0x10;
    kLiftEncoderControlled = 0x20;
    kTiltEncoderControlled = 0x40;
  }

  bitmap Mode : BITMAP8 {
    kMotorDirectionReversed = 0x1;
    kCalibrationMode = 0x2;
    kMaintenanceMode = 0x4;
    kLedFeedback = 0x8;
  }

  bitmap WcFeature : BITMAP32 {
    kLift = 0x1;
    kTilt = 0x2;
    kPositionAwareLift = 0x4;
    kAbsolutePosition = 0x8;
    kPositionAwareTilt = 0x10;
  }

  bitmap WcOperationalStatus : BITMAP8 {
    kGlobal = 0x3;
    kLift = 0xC;
    kTilt = 0x30;
  }

  bitmap WcSafetyStatus : BITMAP16 {
    kRemoteLockout = 0x1;
    kTamperDetection = 0x2;
    kFailedCommunication = 0x4;
    kPositionFailure = 0x8;
    kThermalProtection = 0x10;
    kObstacleDetected = 0x20;
    kPower = 0x40;
    kStopInput = 0x80;
    kMotorJammed = 0x100;
    kHardwareFailure = 0x200;
    kManualOperation = 0x400;
    kProtection = 0x800;
  }

  readonly nosubscribe attribute Type type = 0;
  readonly nosubscribe attribute int16u physicalClosedLimitLift = 1;
  readonly nosubscribe attribute int16u physicalClosedLimitTilt = 2;
  readonly nosubscribe attribute nullable int16u currentPositionLift = 3;
  readonly nosubscribe attribute nullable int16u currentPositionTilt = 4;
  readonly nosubscribe attribute int16u numberOfActuationsLift = 5;
  readonly nosubscribe attribute int16u numberOfActuationsTilt = 6;
  readonly nosubscribe attribute ConfigStatus configStatus = 7;
  readonly nosubscribe attribute nullable Percent currentPositionLiftPercentage = 8;
  readonly nosubscribe attribute nullable Percent currentPositionTiltPercentage = 9;
  readonly nosubscribe attribute bitmap8 operationalStatus = 10;
  readonly nosubscribe attribute nullable Percent100ths targetPositionLiftPercent100ths = 11;
  readonly nosubscribe attribute nullable Percent100ths targetPositionTiltPercent100ths = 12;
  readonly nosubscribe attribute EndProductType endProductType = 13;
  readonly nosubscribe attribute nullable Percent100ths currentPositionLiftPercent100ths = 14;
  readonly nosubscribe attribute nullable Percent100ths currentPositionTiltPercent100ths = 15;
  readonly nosubscribe attribute int16u installedOpenLimitLift = 16;
  readonly nosubscribe attribute int16u installedClosedLimitLift = 17;
  readonly nosubscribe attribute int16u installedOpenLimitTilt = 18;
  readonly nosubscribe attribute int16u installedClosedLimitTilt = 19;
  readonly nosubscribe attribute access(write: manage) Mode mode = 23;
  readonly nosubscribe attribute bitmap16 safetyStatus = 26;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct GoToLiftValueRequest {
    INT16U liftValue = 0;
  }

  request struct GoToLiftPercentageRequest {
    Percent liftPercentageValue = 0;
    optional Percent100ths liftPercent100thsValue = 1;
  }

  request struct GoToTiltValueRequest {
    INT16U tiltValue = 0;
  }

  request struct GoToTiltPercentageRequest {
    Percent tiltPercentageValue = 0;
    optional Percent100ths tiltPercent100thsValue = 1;
  }


  command UpOrOpen(): DefaultSuccess = 0;
  command DownOrClose(): DefaultSuccess = 1;
  command StopMotion(): DefaultSuccess = 2;
  command GoToLiftValue(GoToLiftValueRequest): DefaultSuccess = 4;
  command GoToLiftPercentage(GoToLiftPercentageRequest): DefaultSuccess = 5;
  command GoToTiltValue(GoToTiltValueRequest): DefaultSuccess = 7;
  command GoToTiltPercentage(GoToTiltPercentageRequest): DefaultSuccess = 8;
}

server cluster BarrierControl = 259 {
  readonly nosubscribe attribute enum8 barrierMovingState = 1;
  readonly nosubscribe attribute bitmap16 barrierSafetyStatus = 2;
  readonly nosubscribe attribute bitmap8 barrierCapabilities = 3;
  readonly nosubscribe attribute int16u barrierOpenEvents = 4;
  readonly nosubscribe attribute int16u barrierCloseEvents = 5;
  readonly nosubscribe attribute int16u barrierCommandOpenEvents = 6;
  readonly nosubscribe attribute int16u barrierCommandCloseEvents = 7;
  readonly nosubscribe attribute int16u barrierOpenPeriod = 8;
  readonly nosubscribe attribute int16u barrierClosePeriod = 9;
  readonly nosubscribe attribute int8u barrierPosition = 10;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct BarrierControlGoToPercentRequest {
    INT8U percentOpen = 0;
  }


  command BarrierControlGoToPercent(BarrierControlGoToPercentRequest): DefaultSuccess = 0;
  command BarrierControlStop(): DefaultSuccess = 1;
}

server cluster PumpConfigurationAndControl = 512 {
  enum PumpControlMode : ENUM8 {
    kConstantSpeed = 0;
    kConstantPressure = 1;
    kProportionalPressure = 2;
    kConstantFlow = 3;
    kConstantTemperature = 5;
    kAutomatic = 7;
  }

  enum PumpOperationMode : ENUM8 {
    kNormal = 0;
    kMinimum = 1;
    kMaximum = 2;
    kLocal = 3;
  }

  bitmap PumpStatus : BITMAP16 {
    kDeviceFault = 0x1;
    kSupplyfault = 0x2;
    kSpeedLow = 0x4;
    kSpeedHigh = 0x8;
    kLocalOverride = 0x10;
    kRunning = 0x20;
    kRemotePressure = 0x40;
    kRemoteFlow = 0x80;
    kRemoteTemperature = 0x100;
  }

  info event SupplyVoltageLow = 0 {
  }

  info event SupplyVoltageHigh = 1 {
  }

  info event PowerMissingPhase = 2 {
  }

  info event SystemPressureLow = 3 {
  }

  info event SystemPressureHigh = 4 {
  }

  critical event DryRunning = 5 {
  }

  info event MotorTemperatureHigh = 6 {
  }

  critical event PumpMotorFatalFailure = 7 {
  }

  info event ElectronicTemperatureHigh = 8 {
  }

  critical event PumpBlocked = 9 {
  }

  info event SensorFailure = 10 {
  }

  info event ElectronicNonFatalFailure = 11 {
  }

  critical event ElectronicFatalFailure = 12 {
  }

  info event GeneralFault = 13 {
  }

  info event Leakage = 14 {
  }

  info event AirDetection = 15 {
  }

  info event TurbineOperation = 16 {
  }

  readonly nosubscribe attribute nullable int16s maxPressure = 0;
  readonly nosubscribe attribute nullable int16u maxSpeed = 1;
  readonly nosubscribe attribute nullable int16u maxFlow = 2;
  readonly nosubscribe attribute nullable int16s minConstPressure = 3;
  readonly nosubscribe attribute nullable int16s maxConstPressure = 4;
  readonly nosubscribe attribute nullable int16s minCompPressure = 5;
  readonly nosubscribe attribute nullable int16s maxCompPressure = 6;
  readonly nosubscribe attribute nullable int16u minConstSpeed = 7;
  readonly nosubscribe attribute nullable int16u maxConstSpeed = 8;
  readonly nosubscribe attribute nullable int16u minConstFlow = 9;
  readonly nosubscribe attribute nullable int16u maxConstFlow = 10;
  readonly nosubscribe attribute nullable int16s minConstTemp = 11;
  readonly nosubscribe attribute nullable int16s maxConstTemp = 12;
  readonly nosubscribe attribute bitmap16 pumpStatus = 16;
  readonly nosubscribe attribute PumpOperationMode effectiveOperationMode = 17;
  readonly nosubscribe attribute PumpControlMode effectiveControlMode = 18;
  readonly nosubscribe attribute nullable int16s capacity = 19;
  readonly nosubscribe attribute nullable int16u speed = 20;
  readonly nosubscribe attribute access(write: manage) nullable int24u lifetimeRunningHours = 21;
  readonly nosubscribe attribute nullable int24u power = 22;
  readonly nosubscribe attribute access(write: manage) nullable int32u lifetimeEnergyConsumed = 23;
  readonly nosubscribe attribute access(write: manage) PumpOperationMode operationMode = 32;
  readonly nosubscribe attribute access(write: manage) PumpControlMode controlMode = 33;
  readonly nosubscribe attribute bitmap16 alarmMask = 34;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster Thermostat = 513 {
  enum SetpointAdjustMode : ENUM8 {
    kHeatSetpoint = 0;
    kCoolSetpoint = 1;
    kHeatAndCoolSetpoints = 2;
  }

  enum ThermostatControlSequence : ENUM8 {
    kCoolingOnly = 0;
    kCoolingWithReheat = 1;
    kHeatingOnly = 2;
    kHeatingWithReheat = 3;
    kCoolingAndHeating = 4;
    kCoolingAndHeatingWithReheat = 5;
  }

  enum ThermostatRunningMode : ENUM8 {
    kOff = 0;
    kCool = 3;
    kHeat = 4;
  }

  enum ThermostatSystemMode : ENUM8 {
    kOff = 0;
    kAuto = 1;
    kCool = 3;
    kHeat = 4;
    kEmergencyHeating = 5;
    kPrecooling = 6;
    kFanOnly = 7;
  }

  bitmap DayOfWeek : BITMAP8 {
    kSunday = 0x1;
    kMonday = 0x2;
    kTuesday = 0x4;
    kWednesday = 0x8;
    kThursday = 0x10;
    kFriday = 0x20;
    kSaturday = 0x40;
    kAwayOrVacation = 0x80;
  }

  bitmap ModeForSequence : BITMAP8 {
    kHeatSetpointFieldPresent = 0x1;
    kCoolSetpointFieldPresent = 0x2;
  }

  bitmap ThermostatFeature : BITMAP32 {
    kHeating = 0x1;
    kCooling = 0x2;
    kOccupancy = 0x4;
    kSchedule = 0x8;
    kSetback = 0x10;
    kAutomode = 0x20;
  }

  readonly nosubscribe attribute int16s localTemperature = 0;
  readonly nosubscribe attribute int16s outdoorTemperature = 1;
  readonly nosubscribe attribute bitmap8 occupancy = 2;
  readonly nosubscribe attribute int16s absMinHeatSetpointLimit = 3;
  readonly nosubscribe attribute int16s absMaxHeatSetpointLimit = 4;
  readonly nosubscribe attribute int16s absMinCoolSetpointLimit = 5;
  readonly nosubscribe attribute int16s absMaxCoolSetpointLimit = 6;
  readonly nosubscribe attribute int8u piCoolingDemand = 7;
  readonly nosubscribe attribute int8u piHeatingDemand = 8;
  readonly nosubscribe attribute access(write: manage) bitmap8 hvacSystemTypeConfiguration = 9;
  readonly nosubscribe attribute access(write: manage) int8s localTemperatureCalibration = 16;
  readonly nosubscribe attribute int16s occupiedCoolingSetpoint = 17;
  readonly nosubscribe attribute int16s occupiedHeatingSetpoint = 18;
  readonly nosubscribe attribute int16s unoccupiedCoolingSetpoint = 19;
  readonly nosubscribe attribute int16s unoccupiedHeatingSetpoint = 20;
  readonly nosubscribe attribute access(write: manage) int16s minHeatSetpointLimit = 21;
  readonly nosubscribe attribute access(write: manage) int16s maxHeatSetpointLimit = 22;
  readonly nosubscribe attribute access(write: manage) int16s minCoolSetpointLimit = 23;
  readonly nosubscribe attribute access(write: manage) int16s maxCoolSetpointLimit = 24;
  readonly nosubscribe attribute access(write: manage) int8s minSetpointDeadBand = 25;
  readonly nosubscribe attribute access(write: manage) bitmap8 remoteSensing = 26;
  readonly nosubscribe attribute access(write: manage) ThermostatControlSequence controlSequenceOfOperation = 27;
  readonly nosubscribe attribute access(write: manage) enum8 systemMode = 28;
  readonly nosubscribe attribute bitmap8 alarmMask = 29;
  readonly nosubscribe attribute enum8 thermostatRunningMode = 30;
  readonly nosubscribe attribute enum8 startOfWeek = 32;
  readonly nosubscribe attribute int8u numberOfWeeklyTransitions = 33;
  readonly nosubscribe attribute int8u numberOfDailyTransitions = 34;
  readonly nosubscribe attribute access(write: manage) enum8 temperatureSetpointHold = 35;
  readonly nosubscribe attribute access(write: manage) int16u temperatureSetpointHoldDuration = 36;
  readonly nosubscribe attribute access(write: manage) bitmap8 thermostatProgrammingOperationMode = 37;
  readonly nosubscribe attribute bitmap16 thermostatRunningState = 41;
  readonly nosubscribe attribute enum8 setpointChangeSource = 48;
  readonly nosubscribe attribute int16s setpointChangeAmount = 49;
  readonly nosubscribe attribute epoch_s setpointChangeSourceTimestamp = 50;
  readonly nosubscribe attribute access(write: manage) enum8 acType = 64;
  readonly nosubscribe attribute access(write: manage) int16u acCapacity = 65;
  readonly nosubscribe attribute access(write: manage) enum8 acRefrigerantType = 66;
  readonly nosubscribe attribute access(write: manage) enum8 acCompressorType = 67;
  readonly nosubscribe attribute access(write: manage) bitmap32 acErrorCode = 68;
  readonly nosubscribe attribute access(write: manage) enum8 acLouverPosition = 69;
  readonly nosubscribe attribute int16s acCoilTemperature = 70;
  readonly nosubscribe attribute access(write: manage) enum8 acCapacityFormat = 71;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct SetpointRaiseLowerRequest {
    SetpointAdjustMode mode = 0;
    INT8S amount = 1;
  }

  response struct GetWeeklyScheduleResponse = 0 {
    ENUM8 numberOfTransitionsForSequence = 0;
    DayOfWeek dayOfWeekForSequence = 1;
    ModeForSequence modeForSequence = 2;
    INT8U payload[] = 3;
  }

  request struct SetWeeklyScheduleRequest {
    ENUM8 numberOfTransitionsForSequence = 0;
    DayOfWeek dayOfWeekForSequence = 1;
    ModeForSequence modeForSequence = 2;
    INT8U payload[] = 3;
  }

  response struct GetRelayStatusLogResponse = 1 {
    INT16U timeOfDay = 0;
    BITMAP16 relayStatus = 1;
    INT16S localTemperature = 2;
    INT8U humidityInPercentage = 3;
    INT16S setpoint = 4;
    INT16U unreadEntries = 5;
  }

  request struct GetWeeklyScheduleRequest {
    DayOfWeek daysToReturn = 0;
    ModeForSequence modeToReturn = 1;
  }


  command SetpointRaiseLower(SetpointRaiseLowerRequest): DefaultSuccess = 0;
  command access(invoke: manage) SetWeeklySchedule(SetWeeklyScheduleRequest): DefaultSuccess = 1;
  command GetWeeklySchedule(GetWeeklyScheduleRequest): GetWeeklyScheduleResponse = 2;
  command access(invoke: manage) ClearWeeklySchedule(): DefaultSuccess = 3;
  command GetRelayStatusLog(): GetRelayStatusLogResponse = 4;
}

server cluster FanControl = 514 {
  enum FanModeSequenceType : ENUM8 {
    kOffLowMedHigh = 0;
    kOffLowHigh = 1;
    kOffLowMedHighAuto = 2;
    kOffLowHighAuto = 3;
    kOffOnAuto = 4;
    kOffOn = 5;
  }

  enum FanModeType : ENUM8 {
    kOff = 0;
    kLow = 1;
    kMedium = 2;
    kHigh = 3;
    kOn = 4;
    kAuto = 5;
    kSmart = 6;
  }

  bitmap FanControlFeature : BITMAP32 {
    kMultiSpeed = 0x1;
    kAuto = 0x2;
    kRocking = 0x4;
    kWind = 0x8;
  }

  bitmap RockSupportMask : BITMAP8 {
    kRockLeftRight = 0x1;
    kRockUpDown = 0x2;
    kRockRound = 0x4;
  }

  bitmap WindSettingMask : BITMAP8 {
    kSleepWind = 0x1;
    kNaturalWind = 0x2;
  }

  bitmap WindSupportMask : BITMAP8 {
    kSleepWind = 0x1;
    kNaturalWind = 0x2;
  }

  readonly nosubscribe attribute FanModeType fanMode = 0;
  readonly nosubscribe attribute FanModeSequenceType fanModeSequence = 1;
  readonly nosubscribe attribute int8u percentSetting = 2;
  readonly nosubscribe attribute int8u percentCurrent = 3;
  readonly nosubscribe attribute int8u speedMax = 4;
  readonly nosubscribe attribute int8u speedSetting = 5;
  readonly nosubscribe attribute int8u speedCurrent = 6;
  readonly nosubscribe attribute bitmap8 rockSupport = 7;
  readonly nosubscribe attribute bitmap8 rockSetting = 8;
  readonly nosubscribe attribute bitmap8 windSupport = 9;
  readonly nosubscribe attribute bitmap8 windSetting = 10;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster DehumidificationControl = 515 {
  readonly nosubscribe attribute int8u relativeHumidity = 0;
  readonly nosubscribe attribute int8u dehumidificationCooling = 1;
  readonly nosubscribe attribute int8u rhDehumidificationSetpoint = 16;
  readonly nosubscribe attribute enum8 relativeHumidityMode = 17;
  readonly nosubscribe attribute enum8 dehumidificationLockout = 18;
  readonly nosubscribe attribute int8u dehumidificationHysteresis = 19;
  readonly nosubscribe attribute int8u dehumidificationMaxCool = 20;
  readonly nosubscribe attribute enum8 relativeHumidityDisplay = 21;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster ThermostatUserInterfaceConfiguration = 516 {
  readonly nosubscribe attribute enum8 temperatureDisplayMode = 0;
  readonly nosubscribe attribute access(write: manage) enum8 keypadLockout = 1;
  readonly nosubscribe attribute access(write: manage) enum8 scheduleProgrammingVisibility = 2;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster ColorControl = 768 {
  enum ColorLoopAction : ENUM8 {
    kDeactivate = 0;
    kActivateFromColorLoopStartEnhancedHue = 1;
    kActivateFromEnhancedCurrentHue = 2;
  }

  enum ColorLoopDirection : ENUM8 {
    kDecrementHue = 0;
    kIncrementHue = 1;
  }

  enum ColorMode : ENUM8 {
    kCurrentHueAndCurrentSaturation = 0;
    kCurrentXAndCurrentY = 1;
    kColorTemperature = 2;
  }

  enum HueDirection : ENUM8 {
    kShortestDistance = 0;
    kLongestDistance = 1;
    kUp = 2;
    kDown = 3;
  }

  enum HueMoveMode : ENUM8 {
    kStop = 0;
    kUp = 1;
    kDown = 3;
  }

  enum HueStepMode : ENUM8 {
    kUp = 1;
    kDown = 3;
  }

  enum SaturationMoveMode : ENUM8 {
    kStop = 0;
    kUp = 1;
    kDown = 3;
  }

  enum SaturationStepMode : ENUM8 {
    kUp = 1;
    kDown = 3;
  }

  bitmap ColorCapabilities : BITMAP16 {
    kHueSaturationSupported = 0x1;
    kEnhancedHueSupported = 0x2;
    kColorLoopSupported = 0x4;
    kXYAttributesSupported = 0x8;
    kColorTemperatureSupported = 0x10;
  }

  bitmap ColorControlFeature : BITMAP32 {
    kHueAndSaturation = 0x1;
    kEnhancedHue = 0x2;
    kColorLoop = 0x4;
    kXy = 0x8;
    kColorTemperature = 0x10;
  }

  bitmap ColorLoopUpdateFlags : BITMAP8 {
    kUpdateAction = 0x1;
    kUpdateDirection = 0x2;
    kUpdateTime = 0x4;
    kUpdateStartHue = 0x8;
  }

  readonly nosubscribe attribute int8u currentHue = 0;
  readonly nosubscribe attribute int8u currentSaturation = 1;
  readonly nosubscribe attribute int16u remainingTime = 2;
  readonly nosubscribe attribute int16u currentX = 3;
  readonly nosubscribe attribute int16u currentY = 4;
  readonly nosubscribe attribute enum8 driftCompensation = 5;
  readonly nosubscribe attribute char_string<254> compensationText = 6;
  readonly nosubscribe attribute int16u colorTemperature = 7;
  readonly nosubscribe attribute enum8 colorMode = 8;
  readonly nosubscribe attribute bitmap8 colorControlOptions = 15;
  readonly nosubscribe attribute int8u numberOfPrimaries = 16;
  readonly nosubscribe attribute int16u primary1X = 17;
  readonly nosubscribe attribute int16u primary1Y = 18;
  readonly nosubscribe attribute int8u primary1Intensity = 19;
  readonly nosubscribe attribute int16u primary2X = 21;
  readonly nosubscribe attribute int16u primary2Y = 22;
  readonly nosubscribe attribute int8u primary2Intensity = 23;
  readonly nosubscribe attribute int16u primary3X = 25;
  readonly nosubscribe attribute int16u primary3Y = 26;
  readonly nosubscribe attribute int8u primary3Intensity = 27;
  readonly nosubscribe attribute int16u primary4X = 32;
  readonly nosubscribe attribute int16u primary4Y = 33;
  readonly nosubscribe attribute int8u primary4Intensity = 34;
  readonly nosubscribe attribute int16u primary5X = 36;
  readonly nosubscribe attribute int16u primary5Y = 37;
  readonly nosubscribe attribute int8u primary5Intensity = 38;
  readonly nosubscribe attribute int16u primary6X = 40;
  readonly nosubscribe attribute int16u primary6Y = 41;
  readonly nosubscribe attribute int8u primary6Intensity = 42;
  readonly nosubscribe attribute access(write: manage) int16u whitePointX = 48;
  readonly nosubscribe attribute access(write: manage) int16u whitePointY = 49;
  readonly nosubscribe attribute access(write: manage) int16u colorPointRX = 50;
  readonly nosubscribe attribute access(write: manage) int16u colorPointRY = 51;
  readonly nosubscribe attribute access(write: manage) int8u colorPointRIntensity = 52;
  readonly nosubscribe attribute access(write: manage) int16u colorPointGX = 54;
  readonly nosubscribe attribute access(write: manage) int16u colorPointGY = 55;
  readonly nosubscribe attribute access(write: manage) int8u colorPointGIntensity = 56;
  readonly nosubscribe attribute access(write: manage) int16u colorPointBX = 58;
  readonly nosubscribe attribute access(write: manage) int16u colorPointBY = 59;
  readonly nosubscribe attribute access(write: manage) int8u colorPointBIntensity = 60;
  readonly nosubscribe attribute int16u enhancedCurrentHue = 16384;
  readonly nosubscribe attribute enum8 enhancedColorMode = 16385;
  readonly nosubscribe attribute int8u colorLoopActive = 16386;
  readonly nosubscribe attribute int8u colorLoopDirection = 16387;
  readonly nosubscribe attribute int16u colorLoopTime = 16388;
  readonly nosubscribe attribute int16u colorLoopStartEnhancedHue = 16389;
  readonly nosubscribe attribute int16u colorLoopStoredEnhancedHue = 16390;
  readonly nosubscribe attribute bitmap16 colorCapabilities = 16394;
  readonly nosubscribe attribute int16u colorTempPhysicalMin = 16395;
  readonly nosubscribe attribute int16u colorTempPhysicalMax = 16396;
  readonly nosubscribe attribute int16u coupleColorTempToLevelMinMireds = 16397;
  readonly nosubscribe attribute access(write: manage) int16u startUpColorTemperatureMireds = 16400;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct MoveToHueRequest {
    INT8U hue = 0;
    HueDirection direction = 1;
    INT16U transitionTime = 2;
    BITMAP8 optionsMask = 3;
    BITMAP8 optionsOverride = 4;
  }

  request struct MoveHueRequest {
    HueMoveMode moveMode = 0;
    INT8U rate = 1;
    BITMAP8 optionsMask = 2;
    BITMAP8 optionsOverride = 3;
  }

  request struct StepHueRequest {
    HueStepMode stepMode = 0;
    INT8U stepSize = 1;
    INT8U transitionTime = 2;
    BITMAP8 optionsMask = 3;
    BITMAP8 optionsOverride = 4;
  }

  request struct MoveToSaturationRequest {
    INT8U saturation = 0;
    INT16U transitionTime = 1;
    BITMAP8 optionsMask = 2;
    BITMAP8 optionsOverride = 3;
  }

  request struct MoveSaturationRequest {
    SaturationMoveMode moveMode = 0;
    INT8U rate = 1;
    BITMAP8 optionsMask = 2;
    BITMAP8 optionsOverride = 3;
  }

  request struct StepSaturationRequest {
    SaturationStepMode stepMode = 0;
    INT8U stepSize = 1;
    INT8U transitionTime = 2;
    BITMAP8 optionsMask = 3;
    BITMAP8 optionsOverride = 4;
  }

  request struct MoveToHueAndSaturationRequest {
    INT8U hue = 0;
    INT8U saturation = 1;
    INT16U transitionTime = 2;
    BITMAP8 optionsMask = 3;
    BITMAP8 optionsOverride = 4;
  }

  request struct MoveToColorRequest {
    INT16U colorX = 0;
    INT16U colorY = 1;
    INT16U transitionTime = 2;
    BITMAP8 optionsMask = 3;
    BITMAP8 optionsOverride = 4;
  }

  request struct MoveColorRequest {
    INT16S rateX = 0;
    INT16S rateY = 1;
    BITMAP8 optionsMask = 2;
    BITMAP8 optionsOverride = 3;
  }

  request struct StepColorRequest {
    INT16S stepX = 0;
    INT16S stepY = 1;
    INT16U transitionTime = 2;
    BITMAP8 optionsMask = 3;
    BITMAP8 optionsOverride = 4;
  }

  request struct MoveToColorTemperatureRequest {
    INT16U colorTemperature = 0;
    INT16U transitionTime = 1;
    BITMAP8 optionsMask = 2;
    BITMAP8 optionsOverride = 3;
  }

  request struct EnhancedMoveToHueRequest {
    INT16U enhancedHue = 0;
    HueDirection direction = 1;
    INT16U transitionTime = 2;
    BITMAP8 optionsMask = 3;
    BITMAP8 optionsOverride = 4;
  }

  request struct EnhancedMoveHueRequest {
    HueMoveMode moveMode = 0;
    INT16U rate = 1;
    BITMAP8 optionsMask = 2;
    BITMAP8 optionsOverride = 3;
  }

  request struct EnhancedStepHueRequest {
    HueStepMode stepMode = 0;
    INT16U stepSize = 1;
    INT16U transitionTime = 2;
    BITMAP8 optionsMask = 3;
    BITMAP8 optionsOverride = 4;
  }

  request struct EnhancedMoveToHueAndSaturationRequest {
    INT16U enhancedHue = 0;
    INT8U saturation = 1;
    INT16U transitionTime = 2;
    BITMAP8 optionsMask = 3;
    BITMAP8 optionsOverride = 4;
  }

  request struct ColorLoopSetRequest {
    ColorLoopUpdateFlags updateFlags = 0;
    ColorLoopAction action = 1;
    ColorLoopDirection direction = 2;
    INT16U time = 3;
    INT16U startHue = 4;
    BITMAP8 optionsMask = 5;
    BITMAP8 optionsOverride = 6;
  }

  request struct StopMoveStepRequest {
    BITMAP8 optionsMask = 0;
    BITMAP8 optionsOverride = 1;
  }

  request struct MoveColorTemperatureRequest {
    HueMoveMode moveMode = 0;
    INT16U rate = 1;
    INT16U colorTemperatureMinimum = 2;
    INT16U colorTemperatureMaximum = 3;
    BITMAP8 optionsMask = 4;
    BITMAP8 optionsOverride = 5;
  }

  request struct StepColorTemperatureRequest {
    HueStepMode stepMode = 0;
    INT16U stepSize = 1;
    INT16U transitionTime = 2;
    INT16U colorTemperatureMinimum = 3;
    INT16U colorTemperatureMaximum = 4;
    BITMAP8 optionsMask = 5;
    BITMAP8 optionsOverride = 6;
  }


  command MoveToHue(MoveToHueRequest): DefaultSuccess = 0;
  command MoveHue(MoveHueRequest): DefaultSuccess = 1;
  command StepHue(StepHueRequest): DefaultSuccess = 2;
  command MoveToSaturation(MoveToSaturationRequest): DefaultSuccess = 3;
  command MoveSaturation(MoveSaturationRequest): DefaultSuccess = 4;
  command StepSaturation(StepSaturationRequest): DefaultSuccess = 5;
  command MoveToHueAndSaturation(MoveToHueAndSaturationRequest): DefaultSuccess = 6;
  command MoveToColor(MoveToColorRequest): DefaultSuccess = 7;
  command MoveColor(MoveColorRequest): DefaultSuccess = 8;
  command StepColor(StepColorRequest): DefaultSuccess = 9;
  command MoveToColorTemperature(MoveToColorTemperatureRequest): DefaultSuccess = 10;
  command EnhancedMoveToHue(EnhancedMoveToHueRequest): DefaultSuccess = 64;
  command EnhancedMoveHue(EnhancedMoveHueRequest): DefaultSuccess = 65;
  command EnhancedStepHue(EnhancedStepHueRequest): DefaultSuccess = 66;
  command EnhancedMoveToHueAndSaturation(EnhancedMoveToHueAndSaturationRequest): DefaultSuccess = 67;
  command ColorLoopSet(ColorLoopSetRequest): DefaultSuccess = 68;
  command StopMoveStep(StopMoveStepRequest): DefaultSuccess = 71;
  command MoveColorTemperature(MoveColorTemperatureRequest): DefaultSuccess = 75;
  command StepColorTemperature(StepColorTemperatureRequest): DefaultSuccess = 76;
}

server cluster BallastConfiguration = 769 {
  readonly nosubscribe attribute int8u physicalMinLevel = 0;
  readonly nosubscribe attribute int8u physicalMaxLevel = 1;
  readonly nosubscribe attribute bitmap8 ballastStatus = 2;
  readonly nosubscribe attribute int8u minLevel = 16;
  readonly nosubscribe attribute int8u maxLevel = 17;
  readonly nosubscribe attribute int8u powerOnLevel = 18;
  readonly nosubscribe attribute int16u powerOnFadeTime = 19;
  readonly nosubscribe attribute int8u intrinsicBallastFactor = 20;
  readonly nosubscribe attribute int8u ballastFactorAdjustment = 21;
  readonly nosubscribe attribute int8u lampQuality = 32;
  readonly nosubscribe attribute char_string<16> lampType = 48;
  readonly nosubscribe attribute char_string<16> lampManufacturer = 49;
  readonly nosubscribe attribute int24u lampRatedHours = 50;
  readonly nosubscribe attribute int24u lampBurnHours = 51;
  readonly nosubscribe attribute bitmap8 lampAlarmMode = 52;
  readonly nosubscribe attribute int24u lampBurnHoursTripPoint = 53;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster IlluminanceMeasurement = 1024 {
  enum LightSensorType : ENUM8 {
    kPhotodiode = 0;
    kCmos = 1;
  }

  readonly nosubscribe attribute nullable int16u measuredValue = 0;
  readonly nosubscribe attribute nullable int16u minMeasuredValue = 1;
  readonly nosubscribe attribute nullable int16u maxMeasuredValue = 2;
  readonly nosubscribe attribute int16u tolerance = 3;
  readonly nosubscribe attribute nullable enum8 lightSensorType = 4;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster TemperatureMeasurement = 1026 {
  readonly nosubscribe attribute nullable int16s measuredValue = 0;
  readonly nosubscribe attribute nullable int16s minMeasuredValue = 1;
  readonly nosubscribe attribute nullable int16s maxMeasuredValue = 2;
  readonly nosubscribe attribute int16u tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster PressureMeasurement = 1027 {
  bitmap PressureFeature : BITMAP32 {
    kExt = 0x1;
  }

  readonly nosubscribe attribute nullable int16s measuredValue = 0;
  readonly nosubscribe attribute nullable int16s minMeasuredValue = 1;
  readonly nosubscribe attribute nullable int16s maxMeasuredValue = 2;
  readonly nosubscribe attribute int16u tolerance = 3;
  readonly nosubscribe attribute nullable int16s scaledValue = 16;
  readonly nosubscribe attribute nullable int16s minScaledValue = 17;
  readonly nosubscribe attribute nullable int16s maxScaledValue = 18;
  readonly nosubscribe attribute int16u scaledTolerance = 19;
  readonly nosubscribe attribute int8s scale = 20;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster FlowMeasurement = 1028 {
  readonly nosubscribe attribute nullable int16u measuredValue = 0;
  readonly nosubscribe attribute nullable int16u minMeasuredValue = 1;
  readonly nosubscribe attribute nullable int16u maxMeasuredValue = 2;
  readonly nosubscribe attribute int16u tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster RelativeHumidityMeasurement = 1029 {
  readonly nosubscribe attribute nullable int16u measuredValue = 0;
  readonly nosubscribe attribute nullable int16u minMeasuredValue = 1;
  readonly nosubscribe attribute nullable int16u maxMeasuredValue = 2;
  readonly nosubscribe attribute int16u tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster OccupancySensing = 1030 {
  readonly nosubscribe attribute bitmap8 occupancy = 0;
  readonly nosubscribe attribute enum8 occupancySensorType = 1;
  readonly nosubscribe attribute bitmap8 occupancySensorTypeBitmap = 2;
  readonly nosubscribe attribute access(write: manage) int16u pirOccupiedToUnoccupiedDelay = 16;
  readonly nosubscribe attribute access(write: manage) int16u pirUnoccupiedToOccupiedDelay = 17;
  readonly nosubscribe attribute access(write: manage) int8u pirUnoccupiedToOccupiedThreshold = 18;
  readonly nosubscribe attribute access(write: manage) int16u ultrasonicOccupiedToUnoccupiedDelay = 32;
  readonly nosubscribe attribute access(write: manage) int16u ultrasonicUnoccupiedToOccupiedDelay = 33;
  readonly nosubscribe attribute access(write: manage) int8u ultrasonicUnoccupiedToOccupiedThreshold = 34;
  readonly nosubscribe attribute access(write: manage) int16u physicalContactOccupiedToUnoccupiedDelay = 48;
  readonly nosubscribe attribute access(write: manage) int16u physicalContactUnoccupiedToOccupiedDelay = 49;
  readonly nosubscribe attribute access(write: manage) int8u physicalContactUnoccupiedToOccupiedThreshold = 50;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster CarbonMonoxideConcentrationMeasurement = 1036 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster CarbonDioxideConcentrationMeasurement = 1037 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster EthyleneConcentrationMeasurement = 1038 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster EthyleneOxideConcentrationMeasurement = 1039 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster HydrogenConcentrationMeasurement = 1040 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster HydrogenSulphideConcentrationMeasurement = 1041 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster NitricOxideConcentrationMeasurement = 1042 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster NitrogenDioxideConcentrationMeasurement = 1043 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster OxygenConcentrationMeasurement = 1044 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster OzoneConcentrationMeasurement = 1045 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster SulfurDioxideConcentrationMeasurement = 1046 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster DissolvedOxygenConcentrationMeasurement = 1047 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster BromateConcentrationMeasurement = 1048 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster ChloraminesConcentrationMeasurement = 1049 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster ChlorineConcentrationMeasurement = 1050 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster FecalColiformAndEColiConcentrationMeasurement = 1051 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster FluorideConcentrationMeasurement = 1052 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster HaloaceticAcidsConcentrationMeasurement = 1053 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster TotalTrihalomethanesConcentrationMeasurement = 1054 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster TotalColiformBacteriaConcentrationMeasurement = 1055 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster TurbidityConcentrationMeasurement = 1056 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster CopperConcentrationMeasurement = 1057 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster LeadConcentrationMeasurement = 1058 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster ManganeseConcentrationMeasurement = 1059 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster SulfateConcentrationMeasurement = 1060 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster BromodichloromethaneConcentrationMeasurement = 1061 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster BromoformConcentrationMeasurement = 1062 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster ChlorodibromomethaneConcentrationMeasurement = 1063 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster ChloroformConcentrationMeasurement = 1064 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster SodiumConcentrationMeasurement = 1065 {
  readonly nosubscribe attribute single measuredValue = 0;
  readonly nosubscribe attribute single minMeasuredValue = 1;
  readonly nosubscribe attribute single maxMeasuredValue = 2;
  readonly nosubscribe attribute single tolerance = 3;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster IasZone = 1280 {
  enum IasEnrollResponseCode : ENUM8 {
    kSuccess = 0;
    kNotSupported = 1;
    kNoEnrollPermit = 2;
    kTooManyZones = 3;
  }

  enum IasZoneType : ENUM16 {
    kStandardCie = 0;
    kMotionSensor = 13;
    kContactSwitch = 21;
    kFireSensor = 40;
    kWaterSensor = 42;
    kGasSensor = 43;
    kPersonalEmergencyDevice = 44;
    kVibrationMovementSensor = 45;
    kRemoteControl = 271;
    kKeyFob = 277;
    kKeypad = 541;
    kStandardWarningDevice = 549;
    kGlassBreakSensor = 550;
    kCarbonMonoxideSensor = 551;
    kSecurityRepeater = 553;
    kInvalidZoneType = 65535;
  }

  bitmap IasZoneStatus : BITMAP16 {
    kAlarm1 = 0x1;
    kAlarm2 = 0x2;
    kTamper = 0x4;
    kBattery = 0x8;
    kSupervisionReports = 0x10;
    kRestoreReports = 0x20;
    kTrouble = 0x40;
    kAc = 0x80;
    kTest = 0x100;
    kBatteryDefect = 0x200;
  }

  readonly nosubscribe attribute enum8 zoneState = 0;
  readonly nosubscribe attribute enum16 zoneType = 1;
  readonly nosubscribe attribute bitmap16 zoneStatus = 2;
  readonly nosubscribe attribute node_id iasCieAddress = 16;
  readonly nosubscribe attribute int8u zoneId = 17;
  readonly nosubscribe attribute int8u numberOfZoneSensitivityLevelsSupported = 18;
  readonly nosubscribe attribute int8u currentZoneSensitivityLevel = 19;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct ZoneEnrollResponseRequest {
    IasEnrollResponseCode enrollResponseCode = 0;
    INT8U zoneId = 1;
  }

  response struct ZoneStatusChangeNotification = 0 {
    IasZoneStatus zoneStatus = 0;
    BITMAP8 extendedStatus = 1;
    INT8U zoneId = 2;
    INT16U delay = 3;
  }

  response struct ZoneEnrollRequest = 1 {
    IasZoneType zoneType = 0;
    INT16U manufacturerCode = 1;
  }

  request struct InitiateTestModeRequest {
    INT8U testModeDuration = 0;
    INT8U currentZoneSensitivityLevel = 1;
  }

  response struct InitiateNormalOperationModeResponse = 2 {
  }

  response struct InitiateTestModeResponse = 3 {
  }


  command ZoneEnrollResponse(ZoneEnrollResponseRequest): DefaultSuccess = 0;
  command InitiateNormalOperationMode(): InitiateNormalOperationModeResponse = 1;
  command InitiateTestMode(InitiateTestModeRequest): InitiateTestModeResponse = 2;
}

server cluster IasAce = 1281 {
  enum IasAceAlarmStatus : ENUM8 {
    kNoAlarm = 0;
    kBurglar = 1;
    kFire = 2;
    kEmergency = 3;
    kPolicePanic = 4;
    kFirePanic = 5;
    kEmergencyPanic = 6;
  }

  enum IasAceArmMode : ENUM8 {
    kDisarm = 0;
    kArmDayHomeZonesOnly = 1;
    kArmNightSleepZonesOnly = 2;
    kArmAllZones = 3;
  }

  enum IasAceArmNotification : ENUM8 {
    kAllZonesDisarmed = 0;
    kOnlyDayHomeZonesArmed = 1;
    kOnlyNightSleepZonesArmed = 2;
    kAllZonesArmed = 3;
    kInvalidArmDisarmCode = 4;
    kNotReadyToArm = 5;
    kAlreadyDisarmed = 6;
  }

  enum IasAceAudibleNotification : ENUM8 {
    kMute = 0;
    kDefaultSound = 1;
  }

  enum IasAceBypassResult : ENUM8 {
    kZoneBypassed = 0;
    kZoneNotBypassed = 1;
    kNotAllowed = 2;
    kInvalidZoneId = 3;
    kUnknownZoneId = 4;
    kInvalidArmDisarmCode = 5;
  }

  enum IasAcePanelStatus : ENUM8 {
    kPanelDisarmed = 0;
    kArmedStay = 1;
    kArmedNight = 2;
    kArmedAway = 3;
    kExitDelay = 4;
    kEntryDelay = 5;
    kNotReadyToArm = 6;
    kInAlarm = 7;
    kArmingStay = 8;
    kArmingNight = 9;
    kArmingAway = 10;
  }

  enum IasZoneType : ENUM16 {
    kStandardCie = 0;
    kMotionSensor = 13;
    kContactSwitch = 21;
    kFireSensor = 40;
    kWaterSensor = 42;
    kGasSensor = 43;
    kPersonalEmergencyDevice = 44;
    kVibrationMovementSensor = 45;
    kRemoteControl = 271;
    kKeyFob = 277;
    kKeypad = 541;
    kStandardWarningDevice = 549;
    kGlassBreakSensor = 550;
    kCarbonMonoxideSensor = 551;
    kSecurityRepeater = 553;
    kInvalidZoneType = 65535;
  }

  bitmap IasZoneStatus : BITMAP16 {
    kAlarm1 = 0x1;
    kAlarm2 = 0x2;
    kTamper = 0x4;
    kBattery = 0x8;
    kSupervisionReports = 0x10;
    kRestoreReports = 0x20;
    kTrouble = 0x40;
    kAc = 0x80;
    kTest = 0x100;
    kBatteryDefect = 0x200;
  }

  struct IasAceZoneStatusResult {
    INT8U zoneId = 0;
    IasZoneStatus zoneStatus = 1;
  }

  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct ArmRequest {
    IasAceArmMode armMode = 0;
    CHAR_STRING armDisarmCode = 1;
    INT8U zoneId = 2;
  }

  response struct ArmResponse = 0 {
    IasAceArmNotification armNotification = 0;
  }

  request struct BypassRequest {
    INT8U numberOfZones = 0;
    INT8U zoneIds[] = 1;
    CHAR_STRING armDisarmCode = 2;
  }

  response struct GetZoneIdMapResponse = 1 {
    BITMAP16 section0 = 0;
    BITMAP16 section1 = 1;
    BITMAP16 section2 = 2;
    BITMAP16 section3 = 3;
    BITMAP16 section4 = 4;
    BITMAP16 section5 = 5;
    BITMAP16 section6 = 6;
    BITMAP16 section7 = 7;
    BITMAP16 section8 = 8;
    BITMAP16 section9 = 9;
    BITMAP16 section10 = 10;
    BITMAP16 section11 = 11;
    BITMAP16 section12 = 12;
    BITMAP16 section13 = 13;
    BITMAP16 section14 = 14;
    BITMAP16 section15 = 15;
  }

  response struct GetZoneInformationResponse = 2 {
    INT8U zoneId = 0;
    IasZoneType zoneType = 1;
    node_id ieeeAddress = 2;
    CHAR_STRING zoneLabel = 3;
  }

  response struct ZoneStatusChanged = 3 {
    INT8U zoneId = 0;
    ENUM16 zoneStatus = 1;
    IasAceAudibleNotification audibleNotification = 2;
    CHAR_STRING zoneLabel = 3;
  }

  response struct PanelStatusChanged = 4 {
    IasAcePanelStatus panelStatus = 0;
    INT8U secondsRemaining = 1;
    IasAceAudibleNotification audibleNotification = 2;
    IasAceAlarmStatus alarmStatus = 3;
  }

  response struct GetPanelStatusResponse = 5 {
    IasAcePanelStatus panelStatus = 0;
    INT8U secondsRemaining = 1;
    IasAceAudibleNotification audibleNotification = 2;
    IasAceAlarmStatus alarmStatus = 3;
  }

  request struct GetZoneInformationRequest {
    INT8U zoneId = 0;
  }

  response struct SetBypassedZoneList = 6 {
    INT8U numberOfZones = 0;
    INT8U zoneIds[] = 1;
  }

  response struct BypassResponse = 7 {
    INT8U numberOfZones = 0;
    IasAceBypassResult bypassResult[] = 1;
  }

  response struct GetZoneStatusResponse = 8 {
    BOOLEAN zoneStatusComplete = 0;
    INT8U numberOfZones = 1;
    IasAceZoneStatusResult zoneStatusResult[] = 2;
  }

  request struct GetZoneStatusRequest {
    INT8U startingZoneId = 0;
    INT8U maxNumberOfZoneIds = 1;
    BOOLEAN zoneStatusMaskFlag = 2;
    BITMAP16 zoneStatusMask = 3;
  }


  command Arm(ArmRequest): ArmResponse = 0;
  command Bypass(BypassRequest): BypassResponse = 1;
  command Emergency(): DefaultSuccess = 2;
  command Fire(): DefaultSuccess = 3;
  command Panic(): DefaultSuccess = 4;
  command GetZoneIdMap(): GetZoneIdMapResponse = 5;
  command GetZoneInformation(GetZoneInformationRequest): GetZoneInformationResponse = 6;
  command GetPanelStatus(): GetPanelStatusResponse = 7;
  command GetBypassedZoneList(): DefaultSuccess = 8;
  command GetZoneStatus(GetZoneStatusRequest): GetZoneStatusResponse = 9;
}

server cluster IasWd = 1282 {
  bitmap SquawkInfo : BITMAP8 {
    kMode = 0xF0;
    kStrobe = 0x8;
    kLevel = 0x3;
  }

  bitmap WarningInfo : BITMAP8 {
    kMode = 0xF0;
    kStrobe = 0xC;
    kSirenLevel = 0x3;
  }

  readonly nosubscribe attribute int16u maxDuration = 0;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct StartWarningRequest {
    WarningInfo warningInfo = 0;
    INT16U warningDuration = 1;
    INT8U strobeDutyCycle = 2;
    ENUM8 strobeLevel = 3;
  }

  request struct SquawkRequest {
    SquawkInfo squawkInfo = 0;
  }


  command StartWarning(StartWarningRequest): DefaultSuccess = 0;
  command Squawk(SquawkRequest): DefaultSuccess = 1;
}

server cluster WakeOnLan = 1283 {
  readonly nosubscribe attribute char_string<32> MACAddress = 0;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster Channel = 1284 {
  enum ChannelStatusEnum : ENUM8 {
    kSuccess = 0;
    kMultipleMatches = 1;
    kNoMatches = 2;
  }

  enum LineupInfoTypeEnum : ENUM8 {
    kMso = 0;
  }

  bitmap ChannelFeature : BITMAP32 {
    kChannelList = 0x1;
    kLineupInfo = 0x2;
  }

  struct ChannelInfo {
    INT16U majorNumber = 0;
    INT16U minorNumber = 1;
    optional CHAR_STRING<32> name = 2;
    optional CHAR_STRING<32> callSign = 3;
    optional CHAR_STRING<32> affiliateCallSign = 4;
  }

  struct LineupInfo {
    CHAR_STRING operatorName = 0;
    optional CHAR_STRING lineupName = 1;
    optional CHAR_STRING postalCode = 2;
    LineupInfoTypeEnum lineupInfoType = 3;
  }

  readonly nosubscribe attribute ChannelInfo channelList[] = 0;
  readonly nosubscribe attribute nullable LineupInfo lineup = 1;
  readonly nosubscribe attribute nullable ChannelInfo currentChannel = 2;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct ChangeChannelRequest {
    CHAR_STRING match = 0;
  }

  response struct ChangeChannelResponse = 1 {
    ChannelStatusEnum status = 0;
    optional CHAR_STRING data = 1;
  }

  request struct ChangeChannelByNumberRequest {
    INT16U majorNumber = 0;
    INT16U minorNumber = 1;
  }

  request struct SkipChannelRequest {
    INT16U count = 0;
  }


  command ChangeChannel(ChangeChannelRequest): ChangeChannelResponse = 0;
  command ChangeChannelByNumber(ChangeChannelByNumberRequest): DefaultSuccess = 2;
  command SkipChannel(SkipChannelRequest): DefaultSuccess = 3;
}

server cluster TargetNavigator = 1285 {
  enum TargetNavigatorStatusEnum : ENUM8 {
    kSuccess = 0;
    kTargetNotFound = 1;
    kNotAllowed = 2;
  }

  struct TargetInfo {
    INT8U identifier = 0;
    CHAR_STRING<32> name = 1;
  }

  readonly nosubscribe attribute TargetInfo targetList[] = 0;
  readonly nosubscribe attribute int8u currentTarget = 1;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct NavigateTargetRequest {
    INT8U target = 0;
    optional CHAR_STRING data = 1;
  }

  response struct NavigateTargetResponse = 1 {
    TargetNavigatorStatusEnum status = 0;
    optional CHAR_STRING data = 1;
  }


  command NavigateTarget(NavigateTargetRequest): NavigateTargetResponse = 0;
}

server cluster MediaPlayback = 1286 {
  enum MediaPlaybackStatusEnum : ENUM8 {
    kSuccess = 0;
    kInvalidStateForCommand = 1;
    kNotAllowed = 2;
    kNotActive = 3;
    kSpeedOutOfRange = 4;
    kSeekOutOfRange = 5;
  }

  enum PlaybackStateEnum : ENUM8 {
    kPlaying = 0;
    kPaused = 1;
    kNotPlaying = 2;
    kBuffering = 3;
  }

  struct PlaybackPosition {
    INT64U updatedAt = 0;
    nullable INT64U position = 1;
  }

  readonly nosubscribe attribute PlaybackStateEnum currentState = 0;
  readonly nosubscribe attribute nullable epoch_us startTime = 1;
  readonly nosubscribe attribute nullable int64u duration = 2;
  readonly nosubscribe attribute nullable PlaybackPosition sampledPosition = 3;
  readonly nosubscribe attribute single playbackSpeed = 4;
  readonly nosubscribe attribute nullable int64u seekRangeEnd = 5;
  readonly nosubscribe attribute nullable int64u seekRangeStart = 6;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct SkipForwardRequest {
    INT64U deltaPositionMilliseconds = 0;
  }

  request struct SkipBackwardRequest {
    INT64U deltaPositionMilliseconds = 0;
  }

  response struct PlaybackResponse = 10 {
    MediaPlaybackStatusEnum status = 0;
    optional CHAR_STRING data = 1;
  }

  request struct SeekRequest {
    INT64U position = 0;
  }


  command Play(): PlaybackResponse = 0;
  command Pause(): PlaybackResponse = 1;
  command StopPlayback(): PlaybackResponse = 2;
  command StartOver(): PlaybackResponse = 3;
  command Previous(): PlaybackResponse = 4;
  command Next(): PlaybackResponse = 5;
  command Rewind(): PlaybackResponse = 6;
  command FastForward(): PlaybackResponse = 7;
  command SkipForward(SkipForwardRequest): PlaybackResponse = 8;
  command SkipBackward(SkipBackwardRequest): PlaybackResponse = 9;
  command Seek(SeekRequest): PlaybackResponse = 11;
}

server cluster MediaInput = 1287 {
  enum InputTypeEnum : ENUM8 {
    kInternal = 0;
    kAux = 1;
    kCoax = 2;
    kComposite = 3;
    kHdmi = 4;
    kInput = 5;
    kLine = 6;
    kOptical = 7;
    kVideo = 8;
    kScart = 9;
    kUsb = 10;
    kOther = 11;
  }

  bitmap MediaInputFeature : BITMAP32 {
    kNameUpdates = 0x1;
  }

  struct InputInfo {
    INT8U index = 0;
    InputTypeEnum inputType = 1;
    CHAR_STRING<32> name = 2;
    CHAR_STRING<32> description = 3;
  }

  readonly nosubscribe attribute InputInfo inputList[] = 0;
  readonly nosubscribe attribute int8u currentInput = 1;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct SelectInputRequest {
    INT8U index = 0;
  }

  request struct RenameInputRequest {
    INT8U index = 0;
    CHAR_STRING name = 1;
  }


  command SelectInput(SelectInputRequest): DefaultSuccess = 0;
  command ShowInputStatus(): DefaultSuccess = 1;
  command HideInputStatus(): DefaultSuccess = 2;
  command RenameInput(RenameInputRequest): DefaultSuccess = 3;
}

server cluster LowPower = 1288 {
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;


  command Sleep(): DefaultSuccess = 0;
}

server cluster KeypadInput = 1289 {
  enum CecKeyCode : ENUM8 {
    kSelect = 0;
    kUp = 1;
    kDown = 2;
    kLeft = 3;
    kRight = 4;
    kRightUp = 5;
    kRightDown = 6;
    kLeftUp = 7;
    kLeftDown = 8;
    kRootMenu = 9;
    kSetupMenu = 10;
    kContentsMenu = 11;
    kFavoriteMenu = 12;
    kExit = 13;
    kMediaTopMenu = 16;
    kMediaContextSensitiveMenu = 17;
    kNumberEntryMode = 29;
    kNumber11 = 30;
    kNumber12 = 31;
    kNumber0OrNumber10 = 32;
    kNumbers1 = 33;
    kNumbers2 = 34;
    kNumbers3 = 35;
    kNumbers4 = 36;
    kNumbers5 = 37;
    kNumbers6 = 38;
    kNumbers7 = 39;
    kNumbers8 = 40;
    kNumbers9 = 41;
    kDot = 42;
    kEnter = 43;
    kClear = 44;
    kNextFavorite = 47;
    kChannelUp = 48;
    kChannelDown = 49;
    kPreviousChannel = 50;
    kSoundSelect = 51;
    kInputSelect = 52;
    kDisplayInformation = 53;
    kHelp = 54;
    kPageUp = 55;
    kPageDown = 56;
    kPower = 64;
    kVolumeUp = 65;
    kVolumeDown = 66;
    kMute = 67;
    kPlay = 68;
    kStop = 69;
    kPause = 70;
    kRecord = 71;
    kRewind = 72;
    kFastForward = 73;
    kEject = 74;
    kForward = 75;
    kBackward = 76;
    kStopRecord = 77;
    kPauseRecord = 78;
    kReserved = 79;
    kAngle = 80;
    kSubPicture = 81;
    kVideoOnDemand = 82;
    kElectronicProgramGuide = 83;
    kTimerProgramming = 84;
    kInitialConfiguration = 85;
    kSelectBroadcastType = 86;
    kSelectSoundPresentation = 87;
    kPlayFunction = 96;
    kPausePlayFunction = 97;
    kRecordFunction = 98;
    kPauseRecordFunction = 99;
    kStopFunction = 100;
    kMuteFunction = 101;
    kRestoreVolumeFunction = 102;
    kTuneFunction = 103;
    kSelectMediaFunction = 104;
    kSelectAvInputFunction = 105;
    kSelectAudioInputFunction = 106;
    kPowerToggleFunction = 107;
    kPowerOffFunction = 108;
    kPowerOnFunction = 109;
    kF1Blue = 113;
    kF2Red = 114;
    kF3Green = 115;
    kF4Yellow = 116;
    kF5 = 117;
    kData = 118;
  }

  enum KeypadInputStatusEnum : ENUM8 {
    kSuccess = 0;
    kUnsupportedKey = 1;
    kInvalidKeyInCurrentState = 2;
  }

  bitmap KeypadInputFeature : BITMAP32 {
    kNavigationKeyCodes = 0x1;
    kLocationKeys = 0x2;
    kNumberKeys = 0x4;
  }

  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct SendKeyRequest {
    CecKeyCode keyCode = 0;
  }

  response struct SendKeyResponse = 1 {
    KeypadInputStatusEnum status = 0;
  }


  command SendKey(SendKeyRequest): SendKeyResponse = 0;
}

server cluster ContentLauncher = 1290 {
  enum ContentLaunchStatusEnum : ENUM8 {
    kSuccess = 0;
    kUrlNotAvailable = 1;
    kAuthFailed = 2;
  }

  enum MetricTypeEnum : ENUM8 {
    kPixels = 0;
    kPercentage = 1;
  }

  enum ParameterEnum : ENUM8 {
    kActor = 0;
    kChannel = 1;
    kCharacter = 2;
    kDirector = 3;
    kEvent = 4;
    kFranchise = 5;
    kGenre = 6;
    kLeague = 7;
    kPopularity = 8;
    kProvider = 9;
    kSport = 10;
    kSportsTeam = 11;
    kType = 12;
  }

  bitmap ContentLauncherFeature : BITMAP32 {
    kContentSearch = 0x1;
    kURLPlayback = 0x2;
  }

  bitmap SupportedStreamingProtocol : BITMAP32 {
    kDash = 0x1;
    kHls = 0x2;
  }

  struct Dimension {
    double width = 0;
    double height = 1;
    MetricTypeEnum metric = 2;
  }

  struct AdditionalInfo {
    CHAR_STRING name = 0;
    CHAR_STRING value = 1;
  }

  struct Parameter {
    ParameterEnum type = 0;
    CHAR_STRING value = 1;
    optional AdditionalInfo externalIDList[] = 2;
  }

  struct ContentSearch {
    Parameter parameterList[] = 0;
  }

  struct StyleInformation {
    optional CHAR_STRING imageUrl = 0;
    optional CHAR_STRING color = 1;
    optional Dimension size = 2;
  }

  struct BrandingInformation {
    CHAR_STRING providerName = 0;
    optional StyleInformation background = 1;
    optional StyleInformation logo = 2;
    optional StyleInformation progressBar = 3;
    optional StyleInformation splash = 4;
    optional StyleInformation waterMark = 5;
  }

  readonly nosubscribe attribute CHAR_STRING acceptHeader[] = 0;
  readonly nosubscribe attribute bitmap32 supportedStreamingProtocols = 1;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct LaunchContentRequest {
    ContentSearch search = 0;
    BOOLEAN autoPlay = 1;
    optional CHAR_STRING data = 2;
  }

  request struct LaunchURLRequest {
    CHAR_STRING contentURL = 0;
    optional CHAR_STRING displayString = 1;
    optional BrandingInformation brandingInformation = 2;
  }

  response struct LaunchResponse = 2 {
    ContentLaunchStatusEnum status = 0;
    optional CHAR_STRING data = 1;
  }


  command LaunchContent(LaunchContentRequest): LaunchResponse = 0;
  command LaunchURL(LaunchURLRequest): LaunchResponse = 1;
}

server cluster AudioOutput = 1291 {
  enum OutputTypeEnum : ENUM8 {
    kHdmi = 0;
    kBt = 1;
    kOptical = 2;
    kHeadphone = 3;
    kInternal = 4;
    kOther = 5;
  }

  bitmap AudioOutputFeature : BITMAP32 {
    kNameUpdates = 0x1;
  }

  struct OutputInfo {
    INT8U index = 0;
    OutputTypeEnum outputType = 1;
    CHAR_STRING<32> name = 2;
  }

  readonly nosubscribe attribute OutputInfo outputList[] = 0;
  readonly nosubscribe attribute int8u currentOutput = 1;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct SelectOutputRequest {
    INT8U index = 0;
  }

  request struct RenameOutputRequest {
    INT8U index = 0;
    CHAR_STRING name = 1;
  }


  command SelectOutput(SelectOutputRequest): DefaultSuccess = 0;
  command RenameOutput(RenameOutputRequest): DefaultSuccess = 1;
}

server cluster ApplicationLauncher = 1292 {
  enum ApplicationLauncherStatusEnum : ENUM8 {
    kSuccess = 0;
    kAppNotAvailable = 1;
    kSystemBusy = 2;
  }

  bitmap ApplicationLauncherFeature : BITMAP32 {
    kApplicationPlatform = 0x1;
  }

  struct Application {
    INT16U catalogVendorId = 0;
    CHAR_STRING applicationId = 1;
  }

  struct ApplicationEP {
    Application application = 0;
    optional ENDPOINT_NO endpoint = 1;
  }

  readonly nosubscribe attribute INT16U catalogList[] = 0;
  readonly nosubscribe attribute nullable ApplicationEP currentApp = 1;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct LaunchAppRequest {
    Application application = 0;
    optional OCTET_STRING data = 1;
  }

  request struct StopAppRequest {
    Application application = 0;
  }

  request struct HideAppRequest {
    Application application = 0;
  }

  response struct LauncherResponse = 3 {
    ApplicationLauncherStatusEnum status = 0;
    OCTET_STRING data = 1;
  }


  command LaunchApp(LaunchAppRequest): LauncherResponse = 0;
  command StopApp(StopAppRequest): LauncherResponse = 1;
  command HideApp(HideAppRequest): LauncherResponse = 2;
}

server cluster ApplicationBasic = 1293 {
  enum ApplicationStatusEnum : ENUM8 {
    kStopped = 0;
    kActiveVisibleFocus = 1;
    kActiveHidden = 2;
    kActiveVisibleNotFocus = 3;
  }

  struct ApplicationBasicApplication {
    INT16U catalogVendorId = 0;
    CHAR_STRING applicationId = 1;
  }

  readonly nosubscribe attribute char_string<32> vendorName = 0;
  readonly nosubscribe attribute int16u vendorID = 1;
  readonly nosubscribe attribute char_string<32> applicationName = 2;
  readonly nosubscribe attribute int16u productID = 3;
  readonly nosubscribe attribute ApplicationBasicApplication application = 4;
  readonly nosubscribe attribute ApplicationStatusEnum status = 5;
  readonly nosubscribe attribute char_string<32> applicationVersion = 6;
  readonly nosubscribe attribute vendor_id allowedVendorList[] = 7;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster AccountLogin = 1294 {
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  request struct GetSetupPINRequest {
    CHAR_STRING tempAccountIdentifier = 0;
  }

  response struct GetSetupPINResponse = 1 {
    CHAR_STRING setupPIN = 0;
  }

  request struct LoginRequest {
    CHAR_STRING tempAccountIdentifier = 0;
    CHAR_STRING setupPIN = 1;
  }


  timed command GetSetupPIN(GetSetupPINRequest): GetSetupPINResponse = 0;
  timed command Login(LoginRequest): DefaultSuccess = 2;
  timed command Logout(): DefaultSuccess = 3;
}

server cluster TestCluster = 1295 {
  enum SimpleEnum : ENUM8 {
    kUnspecified = 0;
    kValueA = 1;
    kValueB = 2;
    kValueC = 3;
  }

  bitmap Bitmap16MaskMap : BITMAP16 {
    kMaskVal1 = 0x1;
    kMaskVal2 = 0x2;
    kMaskVal3 = 0x4;
    kMaskVal4 = 0x4000;
  }

  bitmap Bitmap32MaskMap : BITMAP32 {
    kMaskVal1 = 0x1;
    kMaskVal2 = 0x2;
    kMaskVal3 = 0x4;
    kMaskVal4 = 0x40000000;
  }

  bitmap Bitmap64MaskMap : BITMAP64 {
    kMaskVal1 = 0x1;
    kMaskVal2 = 0x2;
    kMaskVal3 = 0x4;
    kMaskVal4 = 0x4000000000000000;
  }

  bitmap Bitmap8MaskMap : BITMAP8 {
    kMaskVal1 = 0x1;
    kMaskVal2 = 0x2;
    kMaskVal3 = 0x4;
    kMaskVal4 = 0x40;
  }

  bitmap SimpleBitmap : BITMAP8 {
    kValueA = 0x1;
    kValueB = 0x2;
    kValueC = 0x4;
  }

  struct SimpleStruct {
    INT8U a = 0;
    BOOLEAN b = 1;
    SimpleEnum c = 2;
    OCTET_STRING d = 3;
    CHAR_STRING e = 4;
    SimpleBitmap f = 5;
    single g = 6;
    double h = 7;
  }

  struct TestFabricScoped {
    INT8U fabricSensitiveInt8u = 1;
    optional INT8U optionalFabricSensitiveInt8u = 2;
    nullable INT8U nullableFabricSensitiveInt8u = 3;
    optional nullable INT8U nullableOptionalFabricSensitiveInt8u = 4;
    CHAR_STRING fabricSensitiveCharString = 5;
    SimpleStruct fabricSensitiveStruct = 6;
    INT8U fabricSensitiveInt8uList[] = 7;
    fabric_idx fabricIndex = 254;
  }

  struct NullablesAndOptionalsStruct {
    nullable INT16U nullableInt = 0;
    optional INT16U optionalInt = 1;
    optional nullable INT16U nullableOptionalInt = 2;
    nullable CHAR_STRING nullableString = 3;
    optional CHAR_STRING optionalString = 4;
    optional nullable CHAR_STRING nullableOptionalString = 5;
    nullable SimpleStruct nullableStruct = 6;
    optional SimpleStruct optionalStruct = 7;
    optional nullable SimpleStruct nullableOptionalStruct = 8;
    nullable SimpleEnum nullableList[] = 9;
    optional SimpleEnum optionalList[] = 10;
    optional nullable SimpleEnum nullableOptionalList[] = 11;
  }

  struct NestedStruct {
    INT8U a = 0;
    BOOLEAN b = 1;
    SimpleStruct c = 2;
  }

  struct NestedStructList {
    INT8U a = 0;
    BOOLEAN b = 1;
    SimpleStruct c = 2;
    SimpleStruct d[] = 3;
    INT32U e[] = 4;
    OCTET_STRING f[] = 5;
    INT8U g[] = 6;
  }

  struct DoubleNestedStructList {
    NestedStructList a[] = 0;
  }

  struct TestListStructOctet {
    INT64U fabricIndex = 0;
    OCTET_STRING<32> operationalCert = 1;
  }

  info event TestEvent = 1 {
    INT8U arg1 = 1;
    SimpleEnum arg2 = 2;
    BOOLEAN arg3 = 3;
    SimpleStruct arg4 = 4;
    SimpleStruct arg5[] = 5;
    SimpleEnum arg6[] = 6;
  }

  info event TestFabricScopedEvent = 2 {
    fabric_idx arg1 = 254;
  }

  readonly nosubscribe attribute boolean boolean = 0;
  readonly nosubscribe attribute Bitmap8MaskMap bitmap8 = 1;
  readonly nosubscribe attribute Bitmap16MaskMap bitmap16 = 2;
  readonly nosubscribe attribute Bitmap32MaskMap bitmap32 = 3;
  readonly nosubscribe attribute Bitmap64MaskMap bitmap64 = 4;
  readonly nosubscribe attribute int8u int8u = 5;
  readonly nosubscribe attribute int16u int16u = 6;
  readonly nosubscribe attribute int24u int24u = 7;
  readonly nosubscribe attribute int32u int32u = 8;
  readonly nosubscribe attribute int40u int40u = 9;
  readonly nosubscribe attribute int48u int48u = 10;
  readonly nosubscribe attribute int56u int56u = 11;
  readonly nosubscribe attribute int64u int64u = 12;
  readonly nosubscribe attribute int8s int8s = 13;
  readonly nosubscribe attribute int16s int16s = 14;
  readonly nosubscribe attribute int24s int24s = 15;
  readonly nosubscribe attribute int32s int32s = 16;
  readonly nosubscribe attribute int40s int40s = 17;
  readonly nosubscribe attribute int48s int48s = 18;
  readonly nosubscribe attribute int56s int56s = 19;
  readonly nosubscribe attribute int64s int64s = 20;
  readonly nosubscribe attribute enum8 enum8 = 21;
  readonly nosubscribe attribute enum16 enum16 = 22;
  readonly nosubscribe attribute single floatSingle = 23;
  readonly nosubscribe attribute double floatDouble = 24;
  readonly nosubscribe attribute octet_string<10> octetString = 25;
  readonly nosubscribe attribute INT8U listInt8u[] = 26;
  readonly nosubscribe attribute OCTET_STRING listOctetString[] = 27;
  readonly nosubscribe attribute TestListStructOctet listStructOctetString[] = 28;
  readonly nosubscribe attribute long_octet_string<1000> longOctetString = 29;
  readonly nosubscribe attribute char_string<10> charString = 30;
  readonly nosubscribe attribute long_char_string<1000> longCharString = 31;
  readonly nosubscribe attribute epoch_us epochUs = 32;
  readonly nosubscribe attribute epoch_s epochS = 33;
  readonly nosubscribe attribute vendor_id vendorId = 34;
  readonly nosubscribe attribute NullablesAndOptionalsStruct listNullablesAndOptionalsStruct[] = 35;
  readonly nosubscribe attribute SimpleEnum enumAttr = 36;
  readonly nosubscribe attribute SimpleStruct structAttr = 37;
  readonly nosubscribe attribute int8u rangeRestrictedInt8u = 38;
  readonly nosubscribe attribute int8s rangeRestrictedInt8s = 39;
  readonly nosubscribe attribute int16u rangeRestrictedInt16u = 40;
  readonly nosubscribe attribute int16s rangeRestrictedInt16s = 41;
  readonly nosubscribe attribute LONG_OCTET_STRING listLongOctetString[] = 42;
  readonly nosubscribe attribute TestFabricScoped listFabricScoped[] = 43;
  readonly nosubscribe attribute boolean timedWriteBoolean = 48;
  readonly nosubscribe attribute boolean generalErrorBoolean = 49;
  readonly nosubscribe attribute boolean clusterErrorBoolean = 50;
  readonly nosubscribe attribute boolean unsupported = 255;
  readonly nosubscribe attribute nullable boolean nullableBoolean = 16384;
  readonly nosubscribe attribute nullable Bitmap8MaskMap nullableBitmap8 = 16385;
  readonly nosubscribe attribute nullable Bitmap16MaskMap nullableBitmap16 = 16386;
  readonly nosubscribe attribute nullable Bitmap32MaskMap nullableBitmap32 = 16387;
  readonly nosubscribe attribute nullable Bitmap64MaskMap nullableBitmap64 = 16388;
  readonly nosubscribe attribute nullable int8u nullableInt8u = 16389;
  readonly nosubscribe attribute nullable int16u nullableInt16u = 16390;
  readonly nosubscribe attribute nullable int24u nullableInt24u = 16391;
  readonly nosubscribe attribute nullable int32u nullableInt32u = 16392;
  readonly nosubscribe attribute nullable int40u nullableInt40u = 16393;
  readonly nosubscribe attribute nullable int48u nullableInt48u = 16394;
  readonly nosubscribe attribute nullable int56u nullableInt56u = 16395;
  readonly nosubscribe attribute nullable int64u nullableInt64u = 16396;
  readonly nosubscribe attribute nullable int8s nullableInt8s = 16397;
  readonly nosubscribe attribute nullable int16s nullableInt16s = 16398;
  readonly nosubscribe attribute nullable int24s nullableInt24s = 16399;
  readonly nosubscribe attribute nullable int32s nullableInt32s = 16400;
  readonly nosubscribe attribute nullable int40s nullableInt40s = 16401;
  readonly nosubscribe attribute nullable int48s nullableInt48s = 16402;
  readonly nosubscribe attribute nullable int56s nullableInt56s = 16403;
  readonly nosubscribe attribute nullable int64s nullableInt64s = 16404;
  readonly nosubscribe attribute nullable enum8 nullableEnum8 = 16405;
  readonly nosubscribe attribute nullable enum16 nullableEnum16 = 16406;
  readonly nosubscribe attribute nullable single nullableFloatSingle = 16407;
  readonly nosubscribe attribute nullable double nullableFloatDouble = 16408;
  readonly nosubscribe attribute nullable octet_string<10> nullableOctetString = 16409;
  readonly nosubscribe attribute nullable char_string<10> nullableCharString = 16414;
  readonly nosubscribe attribute nullable SimpleEnum nullableEnumAttr = 16420;
  readonly nosubscribe attribute nullable SimpleStruct nullableStruct = 16421;
  readonly nosubscribe attribute nullable int8u nullableRangeRestrictedInt8u = 16422;
  readonly nosubscribe attribute nullable int8s nullableRangeRestrictedInt8s = 16423;
  readonly nosubscribe attribute nullable int16u nullableRangeRestrictedInt16u = 16424;
  readonly nosubscribe attribute nullable int16s nullableRangeRestrictedInt16s = 16425;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  response struct TestSpecificResponse = 0 {
    INT8U returnValue = 0;
  }

  response struct TestAddArgumentsResponse = 1 {
    INT8U returnValue = 0;
  }

  response struct TestSimpleArgumentResponse = 2 {
    BOOLEAN returnValue = 0;
  }

  response struct TestStructArrayArgumentResponse = 3 {
    NestedStructList arg1[] = 0;
    SimpleStruct arg2[] = 1;
    SimpleEnum arg3[] = 2;
    BOOLEAN arg4[] = 3;
    SimpleEnum arg5 = 4;
    BOOLEAN arg6 = 5;
  }

  request struct TestAddArgumentsRequest {
    INT8U arg1 = 0;
    INT8U arg2 = 1;
  }

  response struct TestListInt8UReverseResponse = 4 {
    INT8U arg1[] = 0;
  }

  request struct TestSimpleArgumentRequestRequest {
    BOOLEAN arg1 = 0;
  }

  response struct TestEnumsResponse = 5 {
    vendor_id arg1 = 0;
    SimpleEnum arg2 = 1;
  }

  request struct TestStructArrayArgumentRequestRequest {
    NestedStructList arg1[] = 0;
    SimpleStruct arg2[] = 1;
    SimpleEnum arg3[] = 2;
    BOOLEAN arg4[] = 3;
    SimpleEnum arg5 = 4;
    BOOLEAN arg6 = 5;
  }

  response struct TestNullableOptionalResponse = 6 {
    BOOLEAN wasPresent = 0;
    optional BOOLEAN wasNull = 1;
    optional INT8U value = 2;
    optional nullable INT8U originalValue = 3;
  }

  request struct TestStructArgumentRequestRequest {
    SimpleStruct arg1 = 0;
  }

  response struct TestComplexNullableOptionalResponse = 7 {
    BOOLEAN nullableIntWasNull = 0;
    optional INT16U nullableIntValue = 1;
    BOOLEAN optionalIntWasPresent = 2;
    optional INT16U optionalIntValue = 3;
    BOOLEAN nullableOptionalIntWasPresent = 4;
    optional BOOLEAN nullableOptionalIntWasNull = 5;
    optional INT16U nullableOptionalIntValue = 6;
    BOOLEAN nullableStringWasNull = 7;
    optional CHAR_STRING nullableStringValue = 8;
    BOOLEAN optionalStringWasPresent = 9;
    optional CHAR_STRING optionalStringValue = 10;
    BOOLEAN nullableOptionalStringWasPresent = 11;
    optional BOOLEAN nullableOptionalStringWasNull = 12;
    optional CHAR_STRING nullableOptionalStringValue = 13;
    BOOLEAN nullableStructWasNull = 14;
    optional SimpleStruct nullableStructValue = 15;
    BOOLEAN optionalStructWasPresent = 16;
    optional SimpleStruct optionalStructValue = 17;
    BOOLEAN nullableOptionalStructWasPresent = 18;
    optional BOOLEAN nullableOptionalStructWasNull = 19;
    optional SimpleStruct nullableOptionalStructValue = 20;
    BOOLEAN nullableListWasNull = 21;
    optional SimpleEnum nullableListValue[] = 22;
    BOOLEAN optionalListWasPresent = 23;
    optional SimpleEnum optionalListValue[] = 24;
    BOOLEAN nullableOptionalListWasPresent = 25;
    optional BOOLEAN nullableOptionalListWasNull = 26;
    optional SimpleEnum nullableOptionalListValue[] = 27;
  }

  request struct TestNestedStructArgumentRequestRequest {
    NestedStruct arg1 = 0;
  }

  response struct BooleanResponse = 8 {
    BOOLEAN value = 0;
  }

  request struct TestListStructArgumentRequestRequest {
    SimpleStruct arg1[] = 0;
  }

  response struct SimpleStructResponse = 9 {
    SimpleStruct arg1 = 0;
  }

  request struct TestListInt8UArgumentRequestRequest {
    INT8U arg1[] = 0;
  }

  response struct TestEmitTestEventResponse = 10 {
    INT64U value = 0;
  }

  request struct TestNestedStructListArgumentRequestRequest {
    NestedStructList arg1 = 0;
  }

  response struct TestEmitTestFabricScopedEventResponse = 11 {
    INT64U value = 0;
  }

  request struct TestListNestedStructListArgumentRequestRequest {
    NestedStructList arg1[] = 0;
  }

  request struct TestListInt8UReverseRequestRequest {
    INT8U arg1[] = 0;
  }

  request struct TestEnumsRequestRequest {
    vendor_id arg1 = 0;
    SimpleEnum arg2 = 1;
  }

  request struct TestNullableOptionalRequestRequest {
    optional nullable INT8U arg1 = 0;
  }

  request struct TestComplexNullableOptionalRequestRequest {
    nullable INT16U nullableInt = 0;
    optional INT16U optionalInt = 1;
    optional nullable INT16U nullableOptionalInt = 2;
    nullable CHAR_STRING nullableString = 3;
    optional CHAR_STRING optionalString = 4;
    optional nullable CHAR_STRING nullableOptionalString = 5;
    nullable SimpleStruct nullableStruct = 6;
    optional SimpleStruct optionalStruct = 7;
    optional nullable SimpleStruct nullableOptionalStruct = 8;
    nullable SimpleEnum nullableList[] = 9;
    optional SimpleEnum optionalList[] = 10;
    optional nullable SimpleEnum nullableOptionalList[] = 11;
  }

  request struct SimpleStructEchoRequestRequest {
    SimpleStruct arg1 = 0;
  }

  request struct TestSimpleOptionalArgumentRequestRequest {
    optional BOOLEAN arg1 = 0;
  }

  request struct TestEmitTestEventRequestRequest {
    INT8U arg1 = 0;
    SimpleEnum arg2 = 1;
    BOOLEAN arg3 = 2;
  }

  request struct TestEmitTestFabricScopedEventRequestRequest {
    INT8U arg1 = 0;
  }


  command Test(): DefaultSuccess = 0;
  command TestNotHandled(): DefaultSuccess = 1;
  command TestSpecific(): TestSpecificResponse = 2;
  command TestUnknownCommand(): DefaultSuccess = 3;
  command TestAddArguments(TestAddArgumentsRequest): TestAddArgumentsResponse = 4;
  command TestSimpleArgumentRequest(TestSimpleArgumentRequestRequest): TestSimpleArgumentResponse = 5;
  command TestStructArrayArgumentRequest(TestStructArrayArgumentRequestRequest): TestStructArrayArgumentResponse = 6;
  command TestStructArgumentRequest(TestStructArgumentRequestRequest): BooleanResponse = 7;
  command TestNestedStructArgumentRequest(TestNestedStructArgumentRequestRequest): BooleanResponse = 8;
  command TestListStructArgumentRequest(TestListStructArgumentRequestRequest): BooleanResponse = 9;
  command TestListInt8UArgumentRequest(TestListInt8UArgumentRequestRequest): BooleanResponse = 10;
  command TestNestedStructListArgumentRequest(TestNestedStructListArgumentRequestRequest): BooleanResponse = 11;
  command TestListNestedStructListArgumentRequest(TestListNestedStructListArgumentRequestRequest): BooleanResponse = 12;
  command TestListInt8UReverseRequest(TestListInt8UReverseRequestRequest): TestListInt8UReverseResponse = 13;
  command TestEnumsRequest(TestEnumsRequestRequest): TestEnumsResponse = 14;
  command TestNullableOptionalRequest(TestNullableOptionalRequestRequest): TestNullableOptionalResponse = 15;
  command TestComplexNullableOptionalRequest(TestComplexNullableOptionalRequestRequest): TestComplexNullableOptionalResponse = 16;
  command SimpleStructEchoRequest(SimpleStructEchoRequestRequest): SimpleStructResponse = 17;
  timed command TimedInvokeRequest(): DefaultSuccess = 18;
  command TestSimpleOptionalArgumentRequest(TestSimpleOptionalArgumentRequestRequest): DefaultSuccess = 19;
  command TestEmitTestEventRequest(TestEmitTestEventRequestRequest): TestEmitTestEventResponse = 20;
  command TestEmitTestFabricScopedEventRequest(TestEmitTestFabricScopedEventRequestRequest): TestEmitTestFabricScopedEventResponse = 21;
}

server cluster Messaging = 1795 {
  enum EventId : ENUM8 {
    kMeterCoverRemoved = 0;
    kMeterCoverClosed = 1;
    kStrongMagneticField = 2;
    kNoStrongMagneticField = 3;
    kBatteryFailure = 4;
    kLowBattery = 5;
    kProgramMemoryError = 6;
    kRamError = 7;
    kNvMemoryError = 8;
    kMeasurementSystemError = 9;
    kWatchdogError = 10;
    kSupplyDisconnectFailure = 11;
    kSupplyConnectFailure = 12;
    kMeasurmentSoftwareChanged = 13;
    kDstEnabled = 14;
    kDstDisabled = 15;
    kClockAdjBackward = 16;
    kClockAdjForward = 17;
    kClockInvalid = 18;
    kCommsErrorHan = 19;
    kCommsOkHan = 20;
    kFraudAttempt = 21;
    kPowerLoss = 22;
    kIncorrectProtocol = 23;
    kUnusualHanTraffic = 24;
    kUnexpectedClockChange = 25;
    kCommsUsingUnauthenticatedComponent = 26;
    kErrorRegClear = 27;
    kAlarmRegClear = 28;
    kUnexpectedHwReset = 29;
    kUnexpectedProgramExecution = 30;
    kEventLogCleared = 31;
    kManualDisconnect = 32;
    kManualConnect = 33;
    kRemoteDisconnection = 34;
    kLocalDisconnection = 35;
    kLimitThresholdExceeded = 36;
    kLimitThresholdOk = 37;
    kLimitThresholdChanged = 38;
    kMaximumDemandExceeded = 39;
    kProfileCleared = 40;
    kFirmwareReadyForActivation = 41;
    kFirmwareActivated = 42;
    kPatchFailure = 43;
    kTouTariffActivation = 44;
    k8x8Tariffactivated = 45;
    kSingleTariffRateActivated = 46;
    kAsynchronousBillingOccurred = 47;
    kSynchronousBillingOccurred = 48;
    kIncorrectPolarity = 128;
    kCurrentNoVoltage = 129;
    kUnderVoltage = 130;
    kOverVoltage = 131;
    kNormalVoltage = 132;
    kPfBelowThreshold = 133;
    kPfAboveThreshold = 134;
    kTerminalCoverRemoved = 135;
    kTerminalCoverClosed = 136;
    kReverseFlow = 160;
    kTiltTamper = 161;
    kBatteryCoverRemoved = 162;
    kBatteryCoverClosed = 163;
    kExcessFlow = 164;
    kCreditOk = 192;
    kLowCredit = 193;
    kEmergencyCreditInUse = 192;
    kEmergencyCreditExhausted = 193;
    kZeroCreditEcNotSelected = 194;
    kSupplyOn = 195;
    kSupplyOffAarmed = 196;
    kSupplyOff = 197;
    kDiscountApplied = 198;
    kManufacturerSpecificA = 224;
    kManufacturerSpecificB = 225;
    kManufacturerSpecificC = 226;
    kManufacturerSpecificD = 227;
    kManufacturerSpecificE = 228;
    kManufacturerSpecificF = 229;
    kManufacturerSpecificG = 230;
    kManufacturerSpecificH = 231;
    kManufacturerSpecificI = 232;
  }

  enum MessagingControlConfirmation : ENUM8 {
    kNotRequired = 0;
    kRequired = 128;
  }

  enum MessagingControlEnhancedConfirmation : ENUM8 {
    kNotRequired = 0;
    kRequired = 32;
  }

  enum MessagingControlImportance : ENUM8 {
    kLow = 0;
    kMedium = 4;
    kHigh = 8;
    kCritical = 12;
  }

  enum MessagingControlTransmission : ENUM8 {
    kNormal = 0;
    kNormalAndAnonymous = 1;
    kAnonymous = 2;
    kReserved = 3;
  }

  bitmap MessagingConfirmationControl : BITMAP8 {
    kNoReturned = 0x1;
    kYesReturned = 0x2;
  }

  bitmap MessagingControlMask : BITMAP8 {
    kTransMechanism = 0x3;
    kMessageUrgency = 0xC;
    kEnhancedConfirmationRequest = 0x20;
    kMessageConfirmation = 0x80;
  }

  bitmap MessagingExtendedControlMask : BITMAP8 {
    kMessageConfirmationStatus = 0x1;
  }

  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  response struct DisplayMessage = 0 {
    INT32U messageId = 0;
    MessagingControlMask messageControl = 1;
    epoch_s startTime = 2;
    INT16U durationInMinutes = 3;
    CHAR_STRING message = 4;
    MessagingExtendedControlMask optionalExtendedMessageControl = 5;
  }

  response struct CancelMessage = 1 {
    INT32U messageId = 0;
    MessagingControlMask messageControl = 1;
  }

  request struct MessageConfirmationRequest {
    INT32U messageId = 0;
    epoch_s confirmationTime = 1;
    BITMAP8 messageConfirmationControl = 2;
    OCTET_STRING messageResponse = 3;
  }

  response struct DisplayProtectedMessage = 2 {
    INT32U messageId = 0;
    MessagingControlMask messageControl = 1;
    epoch_s startTime = 2;
    INT16U durationInMinutes = 3;
    CHAR_STRING message = 4;
    MessagingExtendedControlMask optionalExtendedMessageControl = 5;
  }

  request struct GetMessageCancellationRequest {
    epoch_s earliestImplementationTime = 0;
  }

  response struct CancelAllMessages = 3 {
    epoch_s implementationDateTime = 0;
  }

  command GetLastMessage(): DefaultSuccess = 0;
  command MessageConfirmation(MessageConfirmationRequest): DefaultSuccess = 1;
  command GetMessageCancellation(GetMessageCancellationRequest): DefaultSuccess = 2;
}

server cluster ApplianceIdentification = 2816 {
  readonly nosubscribe attribute int56u basicIdentification = 0;
  readonly nosubscribe attribute char_string<16> companyName = 16;
  readonly nosubscribe attribute int16u companyId = 17;
  readonly nosubscribe attribute char_string<16> brandName = 18;
  readonly nosubscribe attribute int16u brandId = 19;
  readonly nosubscribe attribute octet_string<16> model = 20;
  readonly nosubscribe attribute octet_string<16> partNumber = 21;
  readonly nosubscribe attribute octet_string<6> productRevision = 22;
  readonly nosubscribe attribute octet_string<6> softwareRevision = 23;
  readonly nosubscribe attribute octet_string<2> productTypeName = 24;
  readonly nosubscribe attribute int16u productTypeId = 25;
  readonly nosubscribe attribute int8u cecedSpecificationVersion = 26;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster MeterIdentification = 2817 {
  readonly nosubscribe attribute char_string<16> companyName = 0;
  readonly nosubscribe attribute int16u meterTypeId = 1;
  readonly nosubscribe attribute int16u dataQualityId = 4;
  readonly nosubscribe attribute char_string<16> customerName = 5;
  readonly nosubscribe attribute octet_string<16> model = 6;
  readonly nosubscribe attribute octet_string<16> partNumber = 7;
  readonly nosubscribe attribute octet_string<6> productRevision = 8;
  readonly nosubscribe attribute octet_string<6> softwareRevision = 10;
  readonly nosubscribe attribute char_string<16> utilityName = 11;
  readonly nosubscribe attribute char_string<16> pod = 12;
  readonly nosubscribe attribute int24s availablePower = 13;
  readonly nosubscribe attribute int24s powerThreshold = 14;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

}

server cluster ApplianceEventsAndAlert = 2818 {
  enum EventIdentification : ENUM8 {
    kEndOfCycle = 1;
    kTemperatureReached = 4;
    kEndOfCooking = 5;
    kSwitchingOff = 6;
    kWrongData = 7;
  }

  bitmap AlertCount : BITMAP8 {
    kNumberOfAlerts = 0xF;
    kTypeOfAlert = 0xF0;
  }

  bitmap AlertStructure : BITMAP24 {
    kAlertId = 0xFF;
    kCategory = 0xF00;
    kPresenceRecovery = 0x3000;
  }

  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  response struct GetAlertsResponse = 0 {
    AlertCount alertsCount = 0;
    AlertStructure alertStructures[] = 1;
  }

  response struct AlertsNotification = 1 {
    AlertCount alertsCount = 0;
    AlertStructure alertStructures[] = 1;
  }

  response struct EventsNotification = 2 {
    INT8U eventHeader = 0;
    EventIdentification eventId = 1;
  }


  command GetAlerts(): GetAlertsResponse = 0;
}

server cluster ApplianceStatistics = 2819 {
  readonly nosubscribe attribute int32u logMaxSize = 0;
  readonly nosubscribe attribute int8u logQueueMaxSize = 1;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  response struct LogNotification = 0 {
    epoch_s timeStamp = 0;
    INT32U logId = 1;
    INT32U logLength = 2;
    INT8U logPayload[] = 3;
  }

  request struct LogRequestRequest {
    INT32U logId = 0;
  }

  response struct LogResponse = 1 {
    epoch_s timeStamp = 0;
    INT32U logId = 1;
    INT32U logLength = 2;
    INT8U logPayload[] = 3;
  }

  response struct LogQueueResponse = 2 {
    INT8U logQueueSize = 0;
    INT32U logIds[] = 1;
  }

  response struct StatisticsAvailable = 3 {
    INT8U logQueueSize = 0;
    INT32U logIds[] = 1;
  }

  command LogRequest(LogRequestRequest): LogResponse = 0;
  command LogQueueRequest(): LogQueueResponse = 1;
}

server cluster ElectricalMeasurement = 2820 {
  readonly nosubscribe attribute bitmap32 measurementType = 0;
  readonly nosubscribe attribute int16s dcVoltage = 256;
  readonly nosubscribe attribute int16s dcVoltageMin = 257;
  readonly nosubscribe attribute int16s dcVoltageMax = 258;
  readonly nosubscribe attribute int16s dcCurrent = 259;
  readonly nosubscribe attribute int16s dcCurrentMin = 260;
  readonly nosubscribe attribute int16s dcCurrentMax = 261;
  readonly nosubscribe attribute int16s dcPower = 262;
  readonly nosubscribe attribute int16s dcPowerMin = 263;
  readonly nosubscribe attribute int16s dcPowerMax = 264;
  readonly nosubscribe attribute int16u dcVoltageMultiplier = 512;
  readonly nosubscribe attribute int16u dcVoltageDivisor = 513;
  readonly nosubscribe attribute int16u dcCurrentMultiplier = 514;
  readonly nosubscribe attribute int16u dcCurrentDivisor = 515;
  readonly nosubscribe attribute int16u dcPowerMultiplier = 516;
  readonly nosubscribe attribute int16u dcPowerDivisor = 517;
  readonly nosubscribe attribute int16u acFrequency = 768;
  readonly nosubscribe attribute int16u acFrequencyMin = 769;
  readonly nosubscribe attribute int16u acFrequencyMax = 770;
  readonly nosubscribe attribute int16u neutralCurrent = 771;
  readonly nosubscribe attribute int32s totalActivePower = 772;
  readonly nosubscribe attribute int32s totalReactivePower = 773;
  readonly nosubscribe attribute int32u totalApparentPower = 774;
  readonly nosubscribe attribute int16s measured1stHarmonicCurrent = 775;
  readonly nosubscribe attribute int16s measured3rdHarmonicCurrent = 776;
  readonly nosubscribe attribute int16s measured5thHarmonicCurrent = 777;
  readonly nosubscribe attribute int16s measured7thHarmonicCurrent = 778;
  readonly nosubscribe attribute int16s measured9thHarmonicCurrent = 779;
  readonly nosubscribe attribute int16s measured11thHarmonicCurrent = 780;
  readonly nosubscribe attribute int16s measuredPhase1stHarmonicCurrent = 781;
  readonly nosubscribe attribute int16s measuredPhase3rdHarmonicCurrent = 782;
  readonly nosubscribe attribute int16s measuredPhase5thHarmonicCurrent = 783;
  readonly nosubscribe attribute int16s measuredPhase7thHarmonicCurrent = 784;
  readonly nosubscribe attribute int16s measuredPhase9thHarmonicCurrent = 785;
  readonly nosubscribe attribute int16s measuredPhase11thHarmonicCurrent = 786;
  readonly nosubscribe attribute int16u acFrequencyMultiplier = 1024;
  readonly nosubscribe attribute int16u acFrequencyDivisor = 1025;
  readonly nosubscribe attribute int32u powerMultiplier = 1026;
  readonly nosubscribe attribute int32u powerDivisor = 1027;
  readonly nosubscribe attribute int8s harmonicCurrentMultiplier = 1028;
  readonly nosubscribe attribute int8s phaseHarmonicCurrentMultiplier = 1029;
  readonly nosubscribe attribute int16s instantaneousVoltage = 1280;
  readonly nosubscribe attribute int16u instantaneousLineCurrent = 1281;
  readonly nosubscribe attribute int16s instantaneousActiveCurrent = 1282;
  readonly nosubscribe attribute int16s instantaneousReactiveCurrent = 1283;
  readonly nosubscribe attribute int16s instantaneousPower = 1284;
  readonly nosubscribe attribute int16u rmsVoltage = 1285;
  readonly nosubscribe attribute int16u rmsVoltageMin = 1286;
  readonly nosubscribe attribute int16u rmsVoltageMax = 1287;
  readonly nosubscribe attribute int16u rmsCurrent = 1288;
  readonly nosubscribe attribute int16u rmsCurrentMin = 1289;
  readonly nosubscribe attribute int16u rmsCurrentMax = 1290;
  readonly nosubscribe attribute int16s activePower = 1291;
  readonly nosubscribe attribute int16s activePowerMin = 1292;
  readonly nosubscribe attribute int16s activePowerMax = 1293;
  readonly nosubscribe attribute int16s reactivePower = 1294;
  readonly nosubscribe attribute int16u apparentPower = 1295;
  readonly nosubscribe attribute int8s powerFactor = 1296;
  readonly nosubscribe attribute int16u averageRmsVoltageMeasurementPeriod = 1297;
  readonly nosubscribe attribute int16u averageRmsUnderVoltageCounter = 1299;
  readonly nosubscribe attribute int16u rmsExtremeOverVoltagePeriod = 1300;
  readonly nosubscribe attribute int16u rmsExtremeUnderVoltagePeriod = 1301;
  readonly nosubscribe attribute int16u rmsVoltageSagPeriod = 1302;
  readonly nosubscribe attribute int16u rmsVoltageSwellPeriod = 1303;
  readonly nosubscribe attribute int16u acVoltageMultiplier = 1536;
  readonly nosubscribe attribute int16u acVoltageDivisor = 1537;
  readonly nosubscribe attribute int16u acCurrentMultiplier = 1538;
  readonly nosubscribe attribute int16u acCurrentDivisor = 1539;
  readonly nosubscribe attribute int16u acPowerMultiplier = 1540;
  readonly nosubscribe attribute int16u acPowerDivisor = 1541;
  readonly nosubscribe attribute bitmap8 overloadAlarmsMask = 1792;
  readonly nosubscribe attribute int16s voltageOverload = 1793;
  readonly nosubscribe attribute int16s currentOverload = 1794;
  readonly nosubscribe attribute bitmap16 acOverloadAlarmsMask = 2048;
  readonly nosubscribe attribute int16s acVoltageOverload = 2049;
  readonly nosubscribe attribute int16s acCurrentOverload = 2050;
  readonly nosubscribe attribute int16s acActivePowerOverload = 2051;
  readonly nosubscribe attribute int16s acReactivePowerOverload = 2052;
  readonly nosubscribe attribute int16s averageRmsOverVoltage = 2053;
  readonly nosubscribe attribute int16s averageRmsUnderVoltage = 2054;
  readonly nosubscribe attribute int16s rmsExtremeOverVoltage = 2055;
  readonly nosubscribe attribute int16s rmsExtremeUnderVoltage = 2056;
  readonly nosubscribe attribute int16s rmsVoltageSag = 2057;
  readonly nosubscribe attribute int16s rmsVoltageSwell = 2058;
  readonly nosubscribe attribute int16u lineCurrentPhaseB = 2305;
  readonly nosubscribe attribute int16s activeCurrentPhaseB = 2306;
  readonly nosubscribe attribute int16s reactiveCurrentPhaseB = 2307;
  readonly nosubscribe attribute int16u rmsVoltagePhaseB = 2309;
  readonly nosubscribe attribute int16u rmsVoltageMinPhaseB = 2310;
  readonly nosubscribe attribute int16u rmsVoltageMaxPhaseB = 2311;
  readonly nosubscribe attribute int16u rmsCurrentPhaseB = 2312;
  readonly nosubscribe attribute int16u rmsCurrentMinPhaseB = 2313;
  readonly nosubscribe attribute int16u rmsCurrentMaxPhaseB = 2314;
  readonly nosubscribe attribute int16s activePowerPhaseB = 2315;
  readonly nosubscribe attribute int16s activePowerMinPhaseB = 2316;
  readonly nosubscribe attribute int16s activePowerMaxPhaseB = 2317;
  readonly nosubscribe attribute int16s reactivePowerPhaseB = 2318;
  readonly nosubscribe attribute int16u apparentPowerPhaseB = 2319;
  readonly nosubscribe attribute int8s powerFactorPhaseB = 2320;
  readonly nosubscribe attribute int16u averageRmsVoltageMeasurementPeriodPhaseB = 2321;
  readonly nosubscribe attribute int16u averageRmsOverVoltageCounterPhaseB = 2322;
  readonly nosubscribe attribute int16u averageRmsUnderVoltageCounterPhaseB = 2323;
  readonly nosubscribe attribute int16u rmsExtremeOverVoltagePeriodPhaseB = 2324;
  readonly nosubscribe attribute int16u rmsExtremeUnderVoltagePeriodPhaseB = 2325;
  readonly nosubscribe attribute int16u rmsVoltageSagPeriodPhaseB = 2326;
  readonly nosubscribe attribute int16u rmsVoltageSwellPeriodPhaseB = 2327;
  readonly nosubscribe attribute int16u lineCurrentPhaseC = 2561;
  readonly nosubscribe attribute int16s activeCurrentPhaseC = 2562;
  readonly nosubscribe attribute int16s reactiveCurrentPhaseC = 2563;
  readonly nosubscribe attribute int16u rmsVoltagePhaseC = 2565;
  readonly nosubscribe attribute int16u rmsVoltageMinPhaseC = 2566;
  readonly nosubscribe attribute int16u rmsVoltageMaxPhaseC = 2567;
  readonly nosubscribe attribute int16u rmsCurrentPhaseC = 2568;
  readonly nosubscribe attribute int16u rmsCurrentMinPhaseC = 2569;
  readonly nosubscribe attribute int16u rmsCurrentMaxPhaseC = 2570;
  readonly nosubscribe attribute int16s activePowerPhaseC = 2571;
  readonly nosubscribe attribute int16s activePowerMinPhaseC = 2572;
  readonly nosubscribe attribute int16s activePowerMaxPhaseC = 2573;
  readonly nosubscribe attribute int16s reactivePowerPhaseC = 2574;
  readonly nosubscribe attribute int16u apparentPowerPhaseC = 2575;
  readonly nosubscribe attribute int8s powerFactorPhaseC = 2576;
  readonly nosubscribe attribute int16u averageRmsVoltageMeasurementPeriodPhaseC = 2577;
  readonly nosubscribe attribute int16u averageRmsOverVoltageCounterPhaseC = 2578;
  readonly nosubscribe attribute int16u averageRmsUnderVoltageCounterPhaseC = 2579;
  readonly nosubscribe attribute int16u rmsExtremeOverVoltagePeriodPhaseC = 2580;
  readonly nosubscribe attribute int16u rmsExtremeUnderVoltagePeriodPhaseC = 2581;
  readonly nosubscribe attribute int16u rmsVoltageSagPeriodPhaseC = 2582;
  readonly nosubscribe attribute int16u rmsVoltageSwellPeriodPhaseC = 2583;
  readonly nosubscribe attribute command_id generatedCommandList[] = 65528;
  readonly nosubscribe attribute command_id acceptedCommandList[] = 65529;
  readonly nosubscribe attribute attrib_id attributeList[] = 65531;
  readonly nosubscribe attribute bitmap32 featureMap = 65532;
  readonly nosubscribe attribute int16u clusterRevision = 65533;

  response struct GetProfileInfoResponseCommand = 0 {
    INT8U profileCount = 0;
    ENUM8 profileIntervalPeriod = 1;
    INT8U maxNumberOfIntervals = 2;
    INT16U listOfAttributes[] = 3;
  }

  response struct GetMeasurementProfileResponseCommand = 1 {
    INT32U startTime = 0;
    ENUM8 status = 1;
    ENUM8 profileIntervalPeriod = 2;
    INT8U numberOfIntervalsDelivered = 3;
    INT16U attributeId = 4;
    INT8U intervals[] = 5;
  }

  request struct GetMeasurementProfileCommandRequest {
    INT16U attributeId = 0;
    INT32U startTime = 1;
    ENUM8 numberOfIntervals = 2;
  }

  command GetProfileInfoCommand(): DefaultSuccess = 0;
  command GetMeasurementProfileCommand(GetMeasurementProfileCommandRequest): DefaultSuccess = 1;
}

