/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

package chip.devicecontroller;

import androidx.annotation.Nullable;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class ChipClusters {

  public interface DefaultClusterCallback {
    void onSuccess();

    void onError(Exception error);
  }

  public interface CharStringAttributeCallback {
    /** Indicates a successful read for a CHAR_STRING attribute. */
    void onSuccess(String value);

    void onError(Exception error);
  }

  public interface OctetStringAttributeCallback {
    /** Indicates a successful read for an OCTET_STRING attribute. */
    void onSuccess(byte[] value);

    void onError(Exception error);
  }

  public interface IntegerAttributeCallback {
    void onSuccess(int value);

    void onError(Exception error);
  }

  public interface LongAttributeCallback {
    void onSuccess(long value);

    void onError(Exception error);
  }

  public interface BooleanAttributeCallback {
    void onSuccess(boolean value);

    void onError(Exception error);
  }

  public abstract static class BaseChipCluster {
    protected long chipClusterPtr;

    public BaseChipCluster(long devicePtr, int endpointId) {
      chipClusterPtr = initWithDevice(devicePtr, endpointId);
    }

    public abstract long initWithDevice(long devicePtr, int endpointId);

    public native void deleteCluster(long chipClusterPtr);

    @SuppressWarnings("deprecation")
    protected void finalize() throws Throwable {
      super.finalize();

      if (chipClusterPtr != 0) {
        deleteCluster(chipClusterPtr);
        chipClusterPtr = 0;
      }
    }
  }

  public static class AccountLoginCluster extends BaseChipCluster {
    public AccountLoginCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1294");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void getSetupPIN(GetSetupPINResponseCallback callback, String tempAccountIdentifier) {
      getSetupPIN(chipClusterPtr, callback, tempAccountIdentifier);
    }

    public void login(
        DefaultClusterCallback callback, String tempAccountIdentifier, String setupPIN) {
      login(chipClusterPtr, callback, tempAccountIdentifier, setupPIN);
    }

    private native void getSetupPIN(
        long chipClusterPtr, GetSetupPINResponseCallback callback, String tempAccountIdentifier);

    private native void login(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        String tempAccountIdentifier,
        String setupPIN);

    public interface GetSetupPINResponseCallback {
      void onSuccess(String setupPIN);

      void onError(Exception error);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class AdministratorCommissioningCluster extends BaseChipCluster {
    public AdministratorCommissioningCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("60");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void openBasicCommissioningWindow(
        DefaultClusterCallback callback, Integer commissioningTimeout) {
      openBasicCommissioningWindow(chipClusterPtr, callback, commissioningTimeout);
    }

    public void openCommissioningWindow(
        DefaultClusterCallback callback,
        Integer commissioningTimeout,
        byte[] PAKEVerifier,
        Integer discriminator,
        Long iterations,
        byte[] salt,
        Integer passcodeID) {
      openCommissioningWindow(
          chipClusterPtr,
          callback,
          commissioningTimeout,
          PAKEVerifier,
          discriminator,
          iterations,
          salt,
          passcodeID);
    }

    public void revokeCommissioning(DefaultClusterCallback callback) {
      revokeCommissioning(chipClusterPtr, callback);
    }

    private native void openBasicCommissioningWindow(
        long chipClusterPtr, DefaultClusterCallback callback, Integer commissioningTimeout);

    private native void openCommissioningWindow(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer commissioningTimeout,
        byte[] PAKEVerifier,
        Integer discriminator,
        Long iterations,
        byte[] salt,
        Integer passcodeID);

    private native void revokeCommissioning(long chipClusterPtr, DefaultClusterCallback callback);

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class ApplicationBasicCluster extends BaseChipCluster {
    public ApplicationBasicCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1293");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void changeStatus(DefaultClusterCallback callback, Integer status) {
      changeStatus(chipClusterPtr, callback, status);
    }

    private native void changeStatus(
        long chipClusterPtr, DefaultClusterCallback callback, Integer status);

    public void readVendorNameAttribute(CharStringAttributeCallback callback) {
      readVendorNameAttribute(chipClusterPtr, callback);
    }

    public void readVendorIdAttribute(IntegerAttributeCallback callback) {
      readVendorIdAttribute(chipClusterPtr, callback);
    }

    public void readApplicationNameAttribute(CharStringAttributeCallback callback) {
      readApplicationNameAttribute(chipClusterPtr, callback);
    }

    public void readProductIdAttribute(IntegerAttributeCallback callback) {
      readProductIdAttribute(chipClusterPtr, callback);
    }

    public void readApplicationIdAttribute(CharStringAttributeCallback callback) {
      readApplicationIdAttribute(chipClusterPtr, callback);
    }

    public void readCatalogVendorIdAttribute(IntegerAttributeCallback callback) {
      readCatalogVendorIdAttribute(chipClusterPtr, callback);
    }

    public void readApplicationStatusAttribute(IntegerAttributeCallback callback) {
      readApplicationStatusAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readVendorNameAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readVendorIdAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readApplicationNameAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readProductIdAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readApplicationIdAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readCatalogVendorIdAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readApplicationStatusAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class ApplicationLauncherCluster extends BaseChipCluster {
    public ApplicationLauncherCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1292");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void launchApp(
        LaunchAppResponseCallback callback,
        String data,
        Integer catalogVendorId,
        String applicationId) {
      launchApp(chipClusterPtr, callback, data, catalogVendorId, applicationId);
    }

    private native void launchApp(
        long chipClusterPtr,
        LaunchAppResponseCallback callback,
        String data,
        Integer catalogVendorId,
        String applicationId);

    public interface LaunchAppResponseCallback {
      void onSuccess(Integer status, String data);

      void onError(Exception error);
    }

    public interface ApplicationLauncherListAttributeCallback {
      void onSuccess(List<Integer> valueList);

      void onError(Exception ex);
    }

    public void readApplicationLauncherListAttribute(
        ApplicationLauncherListAttributeCallback callback) {
      readApplicationLauncherListAttribute(chipClusterPtr, callback);
    }

    public void readCatalogVendorIdAttribute(IntegerAttributeCallback callback) {
      readCatalogVendorIdAttribute(chipClusterPtr, callback);
    }

    public void readApplicationIdAttribute(IntegerAttributeCallback callback) {
      readApplicationIdAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readApplicationLauncherListAttribute(
        long chipClusterPtr, ApplicationLauncherListAttributeCallback callback);

    private native void readCatalogVendorIdAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readApplicationIdAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class AudioOutputCluster extends BaseChipCluster {
    public AudioOutputCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1291");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void renameOutput(DefaultClusterCallback callback, Integer index, String name) {
      renameOutput(chipClusterPtr, callback, index, name);
    }

    public void selectOutput(DefaultClusterCallback callback, Integer index) {
      selectOutput(chipClusterPtr, callback, index);
    }

    private native void renameOutput(
        long chipClusterPtr, DefaultClusterCallback callback, Integer index, String name);

    private native void selectOutput(
        long chipClusterPtr, DefaultClusterCallback callback, Integer index);

    public static class AudioOutputListAttribute {
      public Integer index;
      public Integer outputType;
      public String name;

      public AudioOutputListAttribute(Integer index, Integer outputType, String name) {
        this.index = index;
        this.outputType = outputType;
        this.name = name;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("int index: ");
        output.append(this.index);
        output.append("\n");

        output.append("int outputType: ");
        output.append(this.outputType);
        output.append("\n");

        output.append("String name: ");
        output.append(this.name);
        output.append("\n");

        return output.toString();
      }
    }

    public interface AudioOutputListAttributeCallback {
      void onSuccess(List<AudioOutputListAttribute> valueList);

      void onError(Exception ex);
    }

    public void readAudioOutputListAttribute(AudioOutputListAttributeCallback callback) {
      readAudioOutputListAttribute(chipClusterPtr, callback);
    }

    public void readCurrentAudioOutputAttribute(IntegerAttributeCallback callback) {
      readCurrentAudioOutputAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readAudioOutputListAttribute(
        long chipClusterPtr, AudioOutputListAttributeCallback callback);

    private native void readCurrentAudioOutputAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class BarrierControlCluster extends BaseChipCluster {
    public BarrierControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("259");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void barrierControlGoToPercent(DefaultClusterCallback callback, Integer percentOpen) {
      barrierControlGoToPercent(chipClusterPtr, callback, percentOpen);
    }

    public void barrierControlStop(DefaultClusterCallback callback) {
      barrierControlStop(chipClusterPtr, callback);
    }

    private native void barrierControlGoToPercent(
        long chipClusterPtr, DefaultClusterCallback callback, Integer percentOpen);

    private native void barrierControlStop(long chipClusterPtr, DefaultClusterCallback callback);

    public void readBarrierMovingStateAttribute(IntegerAttributeCallback callback) {
      readBarrierMovingStateAttribute(chipClusterPtr, callback);
    }

    public void readBarrierSafetyStatusAttribute(IntegerAttributeCallback callback) {
      readBarrierSafetyStatusAttribute(chipClusterPtr, callback);
    }

    public void readBarrierCapabilitiesAttribute(IntegerAttributeCallback callback) {
      readBarrierCapabilitiesAttribute(chipClusterPtr, callback);
    }

    public void readBarrierPositionAttribute(IntegerAttributeCallback callback) {
      readBarrierPositionAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readBarrierMovingStateAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readBarrierSafetyStatusAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readBarrierCapabilitiesAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readBarrierPositionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class BasicCluster extends BaseChipCluster {
    public BasicCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("40");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void mfgSpecificPing(DefaultClusterCallback callback) {
      mfgSpecificPing(chipClusterPtr, callback);
    }

    private native void mfgSpecificPing(long chipClusterPtr, DefaultClusterCallback callback);

    public void readInteractionModelVersionAttribute(IntegerAttributeCallback callback) {
      readInteractionModelVersionAttribute(chipClusterPtr, callback);
    }

    public void readVendorNameAttribute(CharStringAttributeCallback callback) {
      readVendorNameAttribute(chipClusterPtr, callback);
    }

    public void readVendorIDAttribute(IntegerAttributeCallback callback) {
      readVendorIDAttribute(chipClusterPtr, callback);
    }

    public void readProductNameAttribute(CharStringAttributeCallback callback) {
      readProductNameAttribute(chipClusterPtr, callback);
    }

    public void readProductIDAttribute(IntegerAttributeCallback callback) {
      readProductIDAttribute(chipClusterPtr, callback);
    }

    public void readUserLabelAttribute(CharStringAttributeCallback callback) {
      readUserLabelAttribute(chipClusterPtr, callback);
    }

    public void writeUserLabelAttribute(DefaultClusterCallback callback, String value) {
      writeUserLabelAttribute(chipClusterPtr, callback, value);
    }

    public void readLocationAttribute(CharStringAttributeCallback callback) {
      readLocationAttribute(chipClusterPtr, callback);
    }

    public void writeLocationAttribute(DefaultClusterCallback callback, String value) {
      writeLocationAttribute(chipClusterPtr, callback, value);
    }

    public void readHardwareVersionAttribute(IntegerAttributeCallback callback) {
      readHardwareVersionAttribute(chipClusterPtr, callback);
    }

    public void readHardwareVersionStringAttribute(CharStringAttributeCallback callback) {
      readHardwareVersionStringAttribute(chipClusterPtr, callback);
    }

    public void readSoftwareVersionAttribute(LongAttributeCallback callback) {
      readSoftwareVersionAttribute(chipClusterPtr, callback);
    }

    public void readSoftwareVersionStringAttribute(CharStringAttributeCallback callback) {
      readSoftwareVersionStringAttribute(chipClusterPtr, callback);
    }

    public void readManufacturingDateAttribute(CharStringAttributeCallback callback) {
      readManufacturingDateAttribute(chipClusterPtr, callback);
    }

    public void readPartNumberAttribute(CharStringAttributeCallback callback) {
      readPartNumberAttribute(chipClusterPtr, callback);
    }

    public void readProductURLAttribute(CharStringAttributeCallback callback) {
      readProductURLAttribute(chipClusterPtr, callback);
    }

    public void readProductLabelAttribute(CharStringAttributeCallback callback) {
      readProductLabelAttribute(chipClusterPtr, callback);
    }

    public void readSerialNumberAttribute(CharStringAttributeCallback callback) {
      readSerialNumberAttribute(chipClusterPtr, callback);
    }

    public void readLocalConfigDisabledAttribute(BooleanAttributeCallback callback) {
      readLocalConfigDisabledAttribute(chipClusterPtr, callback);
    }

    public void writeLocalConfigDisabledAttribute(DefaultClusterCallback callback, boolean value) {
      writeLocalConfigDisabledAttribute(chipClusterPtr, callback, value);
    }

    public void readReachableAttribute(BooleanAttributeCallback callback) {
      readReachableAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readInteractionModelVersionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readVendorNameAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readVendorIDAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readProductNameAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readProductIDAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readUserLabelAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void writeUserLabelAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, String value);

    private native void readLocationAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void writeLocationAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, String value);

    private native void readHardwareVersionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readHardwareVersionStringAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readSoftwareVersionAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readSoftwareVersionStringAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readManufacturingDateAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readPartNumberAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readProductURLAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readProductLabelAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readSerialNumberAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readLocalConfigDisabledAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void writeLocalConfigDisabledAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, boolean value);

    private native void readReachableAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class BinaryInputBasicCluster extends BaseChipCluster {
    public BinaryInputBasicCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("15");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void readOutOfServiceAttribute(BooleanAttributeCallback callback) {
      readOutOfServiceAttribute(chipClusterPtr, callback);
    }

    public void writeOutOfServiceAttribute(DefaultClusterCallback callback, boolean value) {
      writeOutOfServiceAttribute(chipClusterPtr, callback, value);
    }

    public void readPresentValueAttribute(BooleanAttributeCallback callback) {
      readPresentValueAttribute(chipClusterPtr, callback);
    }

    public void writePresentValueAttribute(DefaultClusterCallback callback, boolean value) {
      writePresentValueAttribute(chipClusterPtr, callback, value);
    }

    public void subscribePresentValueAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribePresentValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportPresentValueAttribute(BooleanAttributeCallback callback) {
      reportPresentValueAttribute(chipClusterPtr, callback);
    }

    public void readStatusFlagsAttribute(IntegerAttributeCallback callback) {
      readStatusFlagsAttribute(chipClusterPtr, callback);
    }

    public void subscribeStatusFlagsAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeStatusFlagsAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportStatusFlagsAttribute(IntegerAttributeCallback callback) {
      reportStatusFlagsAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readOutOfServiceAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void writeOutOfServiceAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, boolean value);

    private native void readPresentValueAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void writePresentValueAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, boolean value);

    private native void subscribePresentValueAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportPresentValueAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void readStatusFlagsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeStatusFlagsAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportStatusFlagsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class BindingCluster extends BaseChipCluster {
    public BindingCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("61440");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void bind(
        DefaultClusterCallback callback,
        Long nodeId,
        Integer groupId,
        Integer endpointId,
        Long clusterId) {
      bind(chipClusterPtr, callback, nodeId, groupId, endpointId, clusterId);
    }

    public void unbind(
        DefaultClusterCallback callback,
        Long nodeId,
        Integer groupId,
        Integer endpointId,
        Long clusterId) {
      unbind(chipClusterPtr, callback, nodeId, groupId, endpointId, clusterId);
    }

    private native void bind(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Long nodeId,
        Integer groupId,
        Integer endpointId,
        Long clusterId);

    private native void unbind(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Long nodeId,
        Integer groupId,
        Integer endpointId,
        Long clusterId);

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class BooleanStateCluster extends BaseChipCluster {
    public BooleanStateCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("69");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void readStateValueAttribute(BooleanAttributeCallback callback) {
      readStateValueAttribute(chipClusterPtr, callback);
    }

    public void subscribeStateValueAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeStateValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportStateValueAttribute(BooleanAttributeCallback callback) {
      reportStateValueAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readStateValueAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void subscribeStateValueAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportStateValueAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class BridgedActionsCluster extends BaseChipCluster {
    public BridgedActionsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("37");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void disableAction(
        DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      disableAction(chipClusterPtr, callback, actionID, invokeID);
    }

    public void disableActionWithDuration(
        DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration) {
      disableActionWithDuration(chipClusterPtr, callback, actionID, invokeID, duration);
    }

    public void enableAction(
        DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      enableAction(chipClusterPtr, callback, actionID, invokeID);
    }

    public void enableActionWithDuration(
        DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration) {
      enableActionWithDuration(chipClusterPtr, callback, actionID, invokeID, duration);
    }

    public void instantAction(
        DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      instantAction(chipClusterPtr, callback, actionID, invokeID);
    }

    public void instantActionWithTransition(
        DefaultClusterCallback callback,
        Integer actionID,
        Optional<Long> invokeID,
        Integer transitionTime) {
      instantActionWithTransition(chipClusterPtr, callback, actionID, invokeID, transitionTime);
    }

    public void pauseAction(
        DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      pauseAction(chipClusterPtr, callback, actionID, invokeID);
    }

    public void pauseActionWithDuration(
        DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration) {
      pauseActionWithDuration(chipClusterPtr, callback, actionID, invokeID, duration);
    }

    public void resumeAction(
        DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      resumeAction(chipClusterPtr, callback, actionID, invokeID);
    }

    public void startAction(
        DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      startAction(chipClusterPtr, callback, actionID, invokeID);
    }

    public void startActionWithDuration(
        DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration) {
      startActionWithDuration(chipClusterPtr, callback, actionID, invokeID, duration);
    }

    public void stopAction(
        DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      stopAction(chipClusterPtr, callback, actionID, invokeID);
    }

    private native void disableAction(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer actionID,
        Optional<Long> invokeID);

    private native void disableActionWithDuration(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer actionID,
        Optional<Long> invokeID,
        Long duration);

    private native void enableAction(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer actionID,
        Optional<Long> invokeID);

    private native void enableActionWithDuration(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer actionID,
        Optional<Long> invokeID,
        Long duration);

    private native void instantAction(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer actionID,
        Optional<Long> invokeID);

    private native void instantActionWithTransition(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer actionID,
        Optional<Long> invokeID,
        Integer transitionTime);

    private native void pauseAction(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer actionID,
        Optional<Long> invokeID);

    private native void pauseActionWithDuration(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer actionID,
        Optional<Long> invokeID,
        Long duration);

    private native void resumeAction(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer actionID,
        Optional<Long> invokeID);

    private native void startAction(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer actionID,
        Optional<Long> invokeID);

    private native void startActionWithDuration(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer actionID,
        Optional<Long> invokeID,
        Long duration);

    private native void stopAction(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer actionID,
        Optional<Long> invokeID);

    public static class ActionListAttribute {
      public Integer actionID;
      public String name;
      public Integer type;
      public Integer endpointListID;
      public Integer supportedCommands;
      public Integer status;

      public ActionListAttribute(
          Integer actionID,
          String name,
          Integer type,
          Integer endpointListID,
          Integer supportedCommands,
          Integer status) {
        this.actionID = actionID;
        this.name = name;
        this.type = type;
        this.endpointListID = endpointListID;
        this.supportedCommands = supportedCommands;
        this.status = status;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("int actionID: ");
        output.append(this.actionID);
        output.append("\n");

        output.append("String name: ");
        output.append(this.name);
        output.append("\n");

        output.append("int type: ");
        output.append(this.type);
        output.append("\n");

        output.append("int endpointListID: ");
        output.append(this.endpointListID);
        output.append("\n");

        output.append("int supportedCommands: ");
        output.append(this.supportedCommands);
        output.append("\n");

        output.append("int status: ");
        output.append(this.status);
        output.append("\n");

        return output.toString();
      }
    }

    public interface ActionListAttributeCallback {
      void onSuccess(List<ActionListAttribute> valueList);

      void onError(Exception ex);
    }

    public static class EndpointListAttribute {
      public Integer endpointListID;
      public String name;
      public Integer type;
      public byte[] endpoints;

      public EndpointListAttribute(
          Integer endpointListID, String name, Integer type, byte[] endpoints) {
        this.endpointListID = endpointListID;
        this.name = name;
        this.type = type;
        this.endpoints = endpoints;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("int endpointListID: ");
        output.append(this.endpointListID);
        output.append("\n");

        output.append("String name: ");
        output.append(this.name);
        output.append("\n");

        output.append("int type: ");
        output.append(this.type);
        output.append("\n");

        output.append("byte[] ");
        output.append(Arrays.toString(endpoints));
        output.append("\n");

        return output.toString();
      }
    }

    public interface EndpointListAttributeCallback {
      void onSuccess(List<EndpointListAttribute> valueList);

      void onError(Exception ex);
    }

    public void readActionListAttribute(ActionListAttributeCallback callback) {
      readActionListAttribute(chipClusterPtr, callback);
    }

    public void readEndpointListAttribute(EndpointListAttributeCallback callback) {
      readEndpointListAttribute(chipClusterPtr, callback);
    }

    public void readSetupUrlAttribute(CharStringAttributeCallback callback) {
      readSetupUrlAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readActionListAttribute(
        long chipClusterPtr, ActionListAttributeCallback callback);

    private native void readEndpointListAttribute(
        long chipClusterPtr, EndpointListAttributeCallback callback);

    private native void readSetupUrlAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class BridgedDeviceBasicCluster extends BaseChipCluster {
    public BridgedDeviceBasicCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("57");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void readVendorNameAttribute(CharStringAttributeCallback callback) {
      readVendorNameAttribute(chipClusterPtr, callback);
    }

    public void readVendorIDAttribute(IntegerAttributeCallback callback) {
      readVendorIDAttribute(chipClusterPtr, callback);
    }

    public void readProductNameAttribute(CharStringAttributeCallback callback) {
      readProductNameAttribute(chipClusterPtr, callback);
    }

    public void readUserLabelAttribute(CharStringAttributeCallback callback) {
      readUserLabelAttribute(chipClusterPtr, callback);
    }

    public void writeUserLabelAttribute(DefaultClusterCallback callback, String value) {
      writeUserLabelAttribute(chipClusterPtr, callback, value);
    }

    public void readHardwareVersionAttribute(IntegerAttributeCallback callback) {
      readHardwareVersionAttribute(chipClusterPtr, callback);
    }

    public void readHardwareVersionStringAttribute(CharStringAttributeCallback callback) {
      readHardwareVersionStringAttribute(chipClusterPtr, callback);
    }

    public void readSoftwareVersionAttribute(LongAttributeCallback callback) {
      readSoftwareVersionAttribute(chipClusterPtr, callback);
    }

    public void readSoftwareVersionStringAttribute(CharStringAttributeCallback callback) {
      readSoftwareVersionStringAttribute(chipClusterPtr, callback);
    }

    public void readManufacturingDateAttribute(CharStringAttributeCallback callback) {
      readManufacturingDateAttribute(chipClusterPtr, callback);
    }

    public void readPartNumberAttribute(CharStringAttributeCallback callback) {
      readPartNumberAttribute(chipClusterPtr, callback);
    }

    public void readProductURLAttribute(CharStringAttributeCallback callback) {
      readProductURLAttribute(chipClusterPtr, callback);
    }

    public void readProductLabelAttribute(CharStringAttributeCallback callback) {
      readProductLabelAttribute(chipClusterPtr, callback);
    }

    public void readSerialNumberAttribute(CharStringAttributeCallback callback) {
      readSerialNumberAttribute(chipClusterPtr, callback);
    }

    public void readReachableAttribute(BooleanAttributeCallback callback) {
      readReachableAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readVendorNameAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readVendorIDAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readProductNameAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readUserLabelAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void writeUserLabelAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, String value);

    private native void readHardwareVersionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readHardwareVersionStringAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readSoftwareVersionAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readSoftwareVersionStringAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readManufacturingDateAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readPartNumberAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readProductURLAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readProductLabelAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readSerialNumberAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readReachableAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class ColorControlCluster extends BaseChipCluster {
    public ColorControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("768");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void colorLoopSet(
        DefaultClusterCallback callback,
        Integer updateFlags,
        Integer action,
        Integer direction,
        Integer time,
        Integer startHue,
        Integer optionsMask,
        Integer optionsOverride) {
      colorLoopSet(
          chipClusterPtr,
          callback,
          updateFlags,
          action,
          direction,
          time,
          startHue,
          optionsMask,
          optionsOverride);
    }

    public void enhancedMoveHue(
        DefaultClusterCallback callback,
        Integer moveMode,
        Integer rate,
        Integer optionsMask,
        Integer optionsOverride) {
      enhancedMoveHue(chipClusterPtr, callback, moveMode, rate, optionsMask, optionsOverride);
    }

    public void enhancedMoveToHue(
        DefaultClusterCallback callback,
        Integer enhancedHue,
        Integer direction,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride) {
      enhancedMoveToHue(
          chipClusterPtr,
          callback,
          enhancedHue,
          direction,
          transitionTime,
          optionsMask,
          optionsOverride);
    }

    public void enhancedMoveToHueAndSaturation(
        DefaultClusterCallback callback,
        Integer enhancedHue,
        Integer saturation,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride) {
      enhancedMoveToHueAndSaturation(
          chipClusterPtr,
          callback,
          enhancedHue,
          saturation,
          transitionTime,
          optionsMask,
          optionsOverride);
    }

    public void enhancedStepHue(
        DefaultClusterCallback callback,
        Integer stepMode,
        Integer stepSize,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride) {
      enhancedStepHue(
          chipClusterPtr,
          callback,
          stepMode,
          stepSize,
          transitionTime,
          optionsMask,
          optionsOverride);
    }

    public void moveColor(
        DefaultClusterCallback callback,
        Integer rateX,
        Integer rateY,
        Integer optionsMask,
        Integer optionsOverride) {
      moveColor(chipClusterPtr, callback, rateX, rateY, optionsMask, optionsOverride);
    }

    public void moveColorTemperature(
        DefaultClusterCallback callback,
        Integer moveMode,
        Integer rate,
        Integer colorTemperatureMinimum,
        Integer colorTemperatureMaximum,
        Integer optionsMask,
        Integer optionsOverride) {
      moveColorTemperature(
          chipClusterPtr,
          callback,
          moveMode,
          rate,
          colorTemperatureMinimum,
          colorTemperatureMaximum,
          optionsMask,
          optionsOverride);
    }

    public void moveHue(
        DefaultClusterCallback callback,
        Integer moveMode,
        Integer rate,
        Integer optionsMask,
        Integer optionsOverride) {
      moveHue(chipClusterPtr, callback, moveMode, rate, optionsMask, optionsOverride);
    }

    public void moveSaturation(
        DefaultClusterCallback callback,
        Integer moveMode,
        Integer rate,
        Integer optionsMask,
        Integer optionsOverride) {
      moveSaturation(chipClusterPtr, callback, moveMode, rate, optionsMask, optionsOverride);
    }

    public void moveToColor(
        DefaultClusterCallback callback,
        Integer colorX,
        Integer colorY,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride) {
      moveToColor(
          chipClusterPtr, callback, colorX, colorY, transitionTime, optionsMask, optionsOverride);
    }

    public void moveToColorTemperature(
        DefaultClusterCallback callback,
        Integer colorTemperature,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride) {
      moveToColorTemperature(
          chipClusterPtr, callback, colorTemperature, transitionTime, optionsMask, optionsOverride);
    }

    public void moveToHue(
        DefaultClusterCallback callback,
        Integer hue,
        Integer direction,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride) {
      moveToHue(
          chipClusterPtr, callback, hue, direction, transitionTime, optionsMask, optionsOverride);
    }

    public void moveToHueAndSaturation(
        DefaultClusterCallback callback,
        Integer hue,
        Integer saturation,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride) {
      moveToHueAndSaturation(
          chipClusterPtr, callback, hue, saturation, transitionTime, optionsMask, optionsOverride);
    }

    public void moveToSaturation(
        DefaultClusterCallback callback,
        Integer saturation,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride) {
      moveToSaturation(
          chipClusterPtr, callback, saturation, transitionTime, optionsMask, optionsOverride);
    }

    public void stepColor(
        DefaultClusterCallback callback,
        Integer stepX,
        Integer stepY,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride) {
      stepColor(
          chipClusterPtr, callback, stepX, stepY, transitionTime, optionsMask, optionsOverride);
    }

    public void stepColorTemperature(
        DefaultClusterCallback callback,
        Integer stepMode,
        Integer stepSize,
        Integer transitionTime,
        Integer colorTemperatureMinimum,
        Integer colorTemperatureMaximum,
        Integer optionsMask,
        Integer optionsOverride) {
      stepColorTemperature(
          chipClusterPtr,
          callback,
          stepMode,
          stepSize,
          transitionTime,
          colorTemperatureMinimum,
          colorTemperatureMaximum,
          optionsMask,
          optionsOverride);
    }

    public void stepHue(
        DefaultClusterCallback callback,
        Integer stepMode,
        Integer stepSize,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride) {
      stepHue(
          chipClusterPtr,
          callback,
          stepMode,
          stepSize,
          transitionTime,
          optionsMask,
          optionsOverride);
    }

    public void stepSaturation(
        DefaultClusterCallback callback,
        Integer stepMode,
        Integer stepSize,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride) {
      stepSaturation(
          chipClusterPtr,
          callback,
          stepMode,
          stepSize,
          transitionTime,
          optionsMask,
          optionsOverride);
    }

    public void stopMoveStep(
        DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride) {
      stopMoveStep(chipClusterPtr, callback, optionsMask, optionsOverride);
    }

    private native void colorLoopSet(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer updateFlags,
        Integer action,
        Integer direction,
        Integer time,
        Integer startHue,
        Integer optionsMask,
        Integer optionsOverride);

    private native void enhancedMoveHue(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer moveMode,
        Integer rate,
        Integer optionsMask,
        Integer optionsOverride);

    private native void enhancedMoveToHue(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer enhancedHue,
        Integer direction,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride);

    private native void enhancedMoveToHueAndSaturation(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer enhancedHue,
        Integer saturation,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride);

    private native void enhancedStepHue(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer stepMode,
        Integer stepSize,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride);

    private native void moveColor(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer rateX,
        Integer rateY,
        Integer optionsMask,
        Integer optionsOverride);

    private native void moveColorTemperature(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer moveMode,
        Integer rate,
        Integer colorTemperatureMinimum,
        Integer colorTemperatureMaximum,
        Integer optionsMask,
        Integer optionsOverride);

    private native void moveHue(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer moveMode,
        Integer rate,
        Integer optionsMask,
        Integer optionsOverride);

    private native void moveSaturation(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer moveMode,
        Integer rate,
        Integer optionsMask,
        Integer optionsOverride);

    private native void moveToColor(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer colorX,
        Integer colorY,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride);

    private native void moveToColorTemperature(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer colorTemperature,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride);

    private native void moveToHue(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer hue,
        Integer direction,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride);

    private native void moveToHueAndSaturation(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer hue,
        Integer saturation,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride);

    private native void moveToSaturation(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer saturation,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride);

    private native void stepColor(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer stepX,
        Integer stepY,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride);

    private native void stepColorTemperature(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer stepMode,
        Integer stepSize,
        Integer transitionTime,
        Integer colorTemperatureMinimum,
        Integer colorTemperatureMaximum,
        Integer optionsMask,
        Integer optionsOverride);

    private native void stepHue(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer stepMode,
        Integer stepSize,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride);

    private native void stepSaturation(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer stepMode,
        Integer stepSize,
        Integer transitionTime,
        Integer optionsMask,
        Integer optionsOverride);

    private native void stopMoveStep(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer optionsMask,
        Integer optionsOverride);

    public void readCurrentHueAttribute(IntegerAttributeCallback callback) {
      readCurrentHueAttribute(chipClusterPtr, callback);
    }

    public void subscribeCurrentHueAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeCurrentHueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportCurrentHueAttribute(IntegerAttributeCallback callback) {
      reportCurrentHueAttribute(chipClusterPtr, callback);
    }

    public void readCurrentSaturationAttribute(IntegerAttributeCallback callback) {
      readCurrentSaturationAttribute(chipClusterPtr, callback);
    }

    public void subscribeCurrentSaturationAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeCurrentSaturationAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportCurrentSaturationAttribute(IntegerAttributeCallback callback) {
      reportCurrentSaturationAttribute(chipClusterPtr, callback);
    }

    public void readRemainingTimeAttribute(IntegerAttributeCallback callback) {
      readRemainingTimeAttribute(chipClusterPtr, callback);
    }

    public void readCurrentXAttribute(IntegerAttributeCallback callback) {
      readCurrentXAttribute(chipClusterPtr, callback);
    }

    public void subscribeCurrentXAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeCurrentXAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportCurrentXAttribute(IntegerAttributeCallback callback) {
      reportCurrentXAttribute(chipClusterPtr, callback);
    }

    public void readCurrentYAttribute(IntegerAttributeCallback callback) {
      readCurrentYAttribute(chipClusterPtr, callback);
    }

    public void subscribeCurrentYAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeCurrentYAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportCurrentYAttribute(IntegerAttributeCallback callback) {
      reportCurrentYAttribute(chipClusterPtr, callback);
    }

    public void readDriftCompensationAttribute(IntegerAttributeCallback callback) {
      readDriftCompensationAttribute(chipClusterPtr, callback);
    }

    public void readCompensationTextAttribute(CharStringAttributeCallback callback) {
      readCompensationTextAttribute(chipClusterPtr, callback);
    }

    public void readColorTemperatureAttribute(IntegerAttributeCallback callback) {
      readColorTemperatureAttribute(chipClusterPtr, callback);
    }

    public void subscribeColorTemperatureAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeColorTemperatureAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportColorTemperatureAttribute(IntegerAttributeCallback callback) {
      reportColorTemperatureAttribute(chipClusterPtr, callback);
    }

    public void readColorModeAttribute(IntegerAttributeCallback callback) {
      readColorModeAttribute(chipClusterPtr, callback);
    }

    public void readColorControlOptionsAttribute(IntegerAttributeCallback callback) {
      readColorControlOptionsAttribute(chipClusterPtr, callback);
    }

    public void writeColorControlOptionsAttribute(DefaultClusterCallback callback, int value) {
      writeColorControlOptionsAttribute(chipClusterPtr, callback, value);
    }

    public void readNumberOfPrimariesAttribute(IntegerAttributeCallback callback) {
      readNumberOfPrimariesAttribute(chipClusterPtr, callback);
    }

    public void readPrimary1XAttribute(IntegerAttributeCallback callback) {
      readPrimary1XAttribute(chipClusterPtr, callback);
    }

    public void readPrimary1YAttribute(IntegerAttributeCallback callback) {
      readPrimary1YAttribute(chipClusterPtr, callback);
    }

    public void readPrimary1IntensityAttribute(IntegerAttributeCallback callback) {
      readPrimary1IntensityAttribute(chipClusterPtr, callback);
    }

    public void readPrimary2XAttribute(IntegerAttributeCallback callback) {
      readPrimary2XAttribute(chipClusterPtr, callback);
    }

    public void readPrimary2YAttribute(IntegerAttributeCallback callback) {
      readPrimary2YAttribute(chipClusterPtr, callback);
    }

    public void readPrimary2IntensityAttribute(IntegerAttributeCallback callback) {
      readPrimary2IntensityAttribute(chipClusterPtr, callback);
    }

    public void readPrimary3XAttribute(IntegerAttributeCallback callback) {
      readPrimary3XAttribute(chipClusterPtr, callback);
    }

    public void readPrimary3YAttribute(IntegerAttributeCallback callback) {
      readPrimary3YAttribute(chipClusterPtr, callback);
    }

    public void readPrimary3IntensityAttribute(IntegerAttributeCallback callback) {
      readPrimary3IntensityAttribute(chipClusterPtr, callback);
    }

    public void readPrimary4XAttribute(IntegerAttributeCallback callback) {
      readPrimary4XAttribute(chipClusterPtr, callback);
    }

    public void readPrimary4YAttribute(IntegerAttributeCallback callback) {
      readPrimary4YAttribute(chipClusterPtr, callback);
    }

    public void readPrimary4IntensityAttribute(IntegerAttributeCallback callback) {
      readPrimary4IntensityAttribute(chipClusterPtr, callback);
    }

    public void readPrimary5XAttribute(IntegerAttributeCallback callback) {
      readPrimary5XAttribute(chipClusterPtr, callback);
    }

    public void readPrimary5YAttribute(IntegerAttributeCallback callback) {
      readPrimary5YAttribute(chipClusterPtr, callback);
    }

    public void readPrimary5IntensityAttribute(IntegerAttributeCallback callback) {
      readPrimary5IntensityAttribute(chipClusterPtr, callback);
    }

    public void readPrimary6XAttribute(IntegerAttributeCallback callback) {
      readPrimary6XAttribute(chipClusterPtr, callback);
    }

    public void readPrimary6YAttribute(IntegerAttributeCallback callback) {
      readPrimary6YAttribute(chipClusterPtr, callback);
    }

    public void readPrimary6IntensityAttribute(IntegerAttributeCallback callback) {
      readPrimary6IntensityAttribute(chipClusterPtr, callback);
    }

    public void readWhitePointXAttribute(IntegerAttributeCallback callback) {
      readWhitePointXAttribute(chipClusterPtr, callback);
    }

    public void writeWhitePointXAttribute(DefaultClusterCallback callback, int value) {
      writeWhitePointXAttribute(chipClusterPtr, callback, value);
    }

    public void readWhitePointYAttribute(IntegerAttributeCallback callback) {
      readWhitePointYAttribute(chipClusterPtr, callback);
    }

    public void writeWhitePointYAttribute(DefaultClusterCallback callback, int value) {
      writeWhitePointYAttribute(chipClusterPtr, callback, value);
    }

    public void readColorPointRXAttribute(IntegerAttributeCallback callback) {
      readColorPointRXAttribute(chipClusterPtr, callback);
    }

    public void writeColorPointRXAttribute(DefaultClusterCallback callback, int value) {
      writeColorPointRXAttribute(chipClusterPtr, callback, value);
    }

    public void readColorPointRYAttribute(IntegerAttributeCallback callback) {
      readColorPointRYAttribute(chipClusterPtr, callback);
    }

    public void writeColorPointRYAttribute(DefaultClusterCallback callback, int value) {
      writeColorPointRYAttribute(chipClusterPtr, callback, value);
    }

    public void readColorPointRIntensityAttribute(IntegerAttributeCallback callback) {
      readColorPointRIntensityAttribute(chipClusterPtr, callback);
    }

    public void writeColorPointRIntensityAttribute(DefaultClusterCallback callback, int value) {
      writeColorPointRIntensityAttribute(chipClusterPtr, callback, value);
    }

    public void readColorPointGXAttribute(IntegerAttributeCallback callback) {
      readColorPointGXAttribute(chipClusterPtr, callback);
    }

    public void writeColorPointGXAttribute(DefaultClusterCallback callback, int value) {
      writeColorPointGXAttribute(chipClusterPtr, callback, value);
    }

    public void readColorPointGYAttribute(IntegerAttributeCallback callback) {
      readColorPointGYAttribute(chipClusterPtr, callback);
    }

    public void writeColorPointGYAttribute(DefaultClusterCallback callback, int value) {
      writeColorPointGYAttribute(chipClusterPtr, callback, value);
    }

    public void readColorPointGIntensityAttribute(IntegerAttributeCallback callback) {
      readColorPointGIntensityAttribute(chipClusterPtr, callback);
    }

    public void writeColorPointGIntensityAttribute(DefaultClusterCallback callback, int value) {
      writeColorPointGIntensityAttribute(chipClusterPtr, callback, value);
    }

    public void readColorPointBXAttribute(IntegerAttributeCallback callback) {
      readColorPointBXAttribute(chipClusterPtr, callback);
    }

    public void writeColorPointBXAttribute(DefaultClusterCallback callback, int value) {
      writeColorPointBXAttribute(chipClusterPtr, callback, value);
    }

    public void readColorPointBYAttribute(IntegerAttributeCallback callback) {
      readColorPointBYAttribute(chipClusterPtr, callback);
    }

    public void writeColorPointBYAttribute(DefaultClusterCallback callback, int value) {
      writeColorPointBYAttribute(chipClusterPtr, callback, value);
    }

    public void readColorPointBIntensityAttribute(IntegerAttributeCallback callback) {
      readColorPointBIntensityAttribute(chipClusterPtr, callback);
    }

    public void writeColorPointBIntensityAttribute(DefaultClusterCallback callback, int value) {
      writeColorPointBIntensityAttribute(chipClusterPtr, callback, value);
    }

    public void readEnhancedCurrentHueAttribute(IntegerAttributeCallback callback) {
      readEnhancedCurrentHueAttribute(chipClusterPtr, callback);
    }

    public void readEnhancedColorModeAttribute(IntegerAttributeCallback callback) {
      readEnhancedColorModeAttribute(chipClusterPtr, callback);
    }

    public void readColorLoopActiveAttribute(IntegerAttributeCallback callback) {
      readColorLoopActiveAttribute(chipClusterPtr, callback);
    }

    public void readColorLoopDirectionAttribute(IntegerAttributeCallback callback) {
      readColorLoopDirectionAttribute(chipClusterPtr, callback);
    }

    public void readColorLoopTimeAttribute(IntegerAttributeCallback callback) {
      readColorLoopTimeAttribute(chipClusterPtr, callback);
    }

    public void readColorLoopStartEnhancedHueAttribute(IntegerAttributeCallback callback) {
      readColorLoopStartEnhancedHueAttribute(chipClusterPtr, callback);
    }

    public void readColorLoopStoredEnhancedHueAttribute(IntegerAttributeCallback callback) {
      readColorLoopStoredEnhancedHueAttribute(chipClusterPtr, callback);
    }

    public void readColorCapabilitiesAttribute(IntegerAttributeCallback callback) {
      readColorCapabilitiesAttribute(chipClusterPtr, callback);
    }

    public void readColorTempPhysicalMinAttribute(IntegerAttributeCallback callback) {
      readColorTempPhysicalMinAttribute(chipClusterPtr, callback);
    }

    public void readColorTempPhysicalMaxAttribute(IntegerAttributeCallback callback) {
      readColorTempPhysicalMaxAttribute(chipClusterPtr, callback);
    }

    public void readCoupleColorTempToLevelMinMiredsAttribute(IntegerAttributeCallback callback) {
      readCoupleColorTempToLevelMinMiredsAttribute(chipClusterPtr, callback);
    }

    public void readStartUpColorTemperatureMiredsAttribute(IntegerAttributeCallback callback) {
      readStartUpColorTemperatureMiredsAttribute(chipClusterPtr, callback);
    }

    public void writeStartUpColorTemperatureMiredsAttribute(
        DefaultClusterCallback callback, int value) {
      writeStartUpColorTemperatureMiredsAttribute(chipClusterPtr, callback, value);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readCurrentHueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeCurrentHueAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportCurrentHueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readCurrentSaturationAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeCurrentSaturationAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportCurrentSaturationAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readRemainingTimeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readCurrentXAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeCurrentXAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportCurrentXAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readCurrentYAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeCurrentYAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportCurrentYAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readDriftCompensationAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readCompensationTextAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readColorTemperatureAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeColorTemperatureAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportColorTemperatureAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readColorModeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readColorControlOptionsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeColorControlOptionsAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readNumberOfPrimariesAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary1XAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary1YAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary1IntensityAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary2XAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary2YAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary2IntensityAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary3XAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary3YAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary3IntensityAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary4XAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary4YAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary4IntensityAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary5XAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary5YAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary5IntensityAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary6XAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary6YAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPrimary6IntensityAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readWhitePointXAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeWhitePointXAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readWhitePointYAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeWhitePointYAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readColorPointRXAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeColorPointRXAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readColorPointRYAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeColorPointRYAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readColorPointRIntensityAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeColorPointRIntensityAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readColorPointGXAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeColorPointGXAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readColorPointGYAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeColorPointGYAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readColorPointGIntensityAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeColorPointGIntensityAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readColorPointBXAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeColorPointBXAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readColorPointBYAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeColorPointBYAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readColorPointBIntensityAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeColorPointBIntensityAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readEnhancedCurrentHueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readEnhancedColorModeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readColorLoopActiveAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readColorLoopDirectionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readColorLoopTimeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readColorLoopStartEnhancedHueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readColorLoopStoredEnhancedHueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readColorCapabilitiesAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readColorTempPhysicalMinAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readColorTempPhysicalMaxAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readCoupleColorTempToLevelMinMiredsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readStartUpColorTemperatureMiredsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeStartUpColorTemperatureMiredsAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class ContentLauncherCluster extends BaseChipCluster {
    public ContentLauncherCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1290");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void launchContent(
        LaunchContentResponseCallback callback, Boolean autoPlay, String data) {
      launchContent(chipClusterPtr, callback, autoPlay, data);
    }

    public void launchURL(
        LaunchURLResponseCallback callback, String contentURL, String displayString) {
      launchURL(chipClusterPtr, callback, contentURL, displayString);
    }

    private native void launchContent(
        long chipClusterPtr, LaunchContentResponseCallback callback, Boolean autoPlay, String data);

    private native void launchURL(
        long chipClusterPtr,
        LaunchURLResponseCallback callback,
        String contentURL,
        String displayString);

    public interface LaunchContentResponseCallback {
      void onSuccess(String data, Integer contentLaunchStatus);

      void onError(Exception error);
    }

    public interface LaunchURLResponseCallback {
      void onSuccess(String data, Integer contentLaunchStatus);

      void onError(Exception error);
    }

    public interface AcceptsHeaderListAttributeCallback {
      void onSuccess(List<byte[]> valueList);

      void onError(Exception ex);
    }

    public interface SupportedStreamingTypesAttributeCallback {
      void onSuccess(List<Integer> valueList);

      void onError(Exception ex);
    }

    public void readAcceptsHeaderListAttribute(AcceptsHeaderListAttributeCallback callback) {
      readAcceptsHeaderListAttribute(chipClusterPtr, callback);
    }

    public void readSupportedStreamingTypesAttribute(
        SupportedStreamingTypesAttributeCallback callback) {
      readSupportedStreamingTypesAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readAcceptsHeaderListAttribute(
        long chipClusterPtr, AcceptsHeaderListAttributeCallback callback);

    private native void readSupportedStreamingTypesAttribute(
        long chipClusterPtr, SupportedStreamingTypesAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class DescriptorCluster extends BaseChipCluster {
    public DescriptorCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("29");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public static class DeviceListAttribute {
      public Long type;
      public Integer revision;

      public DeviceListAttribute(Long type, Integer revision) {
        this.type = type;
        this.revision = revision;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("long type: ");
        output.append(this.type);
        output.append("\n");

        output.append("int revision: ");
        output.append(this.revision);
        output.append("\n");

        return output.toString();
      }
    }

    public interface DeviceListAttributeCallback {
      void onSuccess(List<DeviceListAttribute> valueList);

      void onError(Exception ex);
    }

    public interface ServerListAttributeCallback {
      void onSuccess(List<Long> valueList);

      void onError(Exception ex);
    }

    public interface ClientListAttributeCallback {
      void onSuccess(List<Long> valueList);

      void onError(Exception ex);
    }

    public interface PartsListAttributeCallback {
      void onSuccess(List<Integer> valueList);

      void onError(Exception ex);
    }

    public void readDeviceListAttribute(DeviceListAttributeCallback callback) {
      readDeviceListAttribute(chipClusterPtr, callback);
    }

    public void readServerListAttribute(ServerListAttributeCallback callback) {
      readServerListAttribute(chipClusterPtr, callback);
    }

    public void readClientListAttribute(ClientListAttributeCallback callback) {
      readClientListAttribute(chipClusterPtr, callback);
    }

    public void readPartsListAttribute(PartsListAttributeCallback callback) {
      readPartsListAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readDeviceListAttribute(
        long chipClusterPtr, DeviceListAttributeCallback callback);

    private native void readServerListAttribute(
        long chipClusterPtr, ServerListAttributeCallback callback);

    private native void readClientListAttribute(
        long chipClusterPtr, ClientListAttributeCallback callback);

    private native void readPartsListAttribute(
        long chipClusterPtr, PartsListAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class DiagnosticLogsCluster extends BaseChipCluster {
    public DiagnosticLogsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("50");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void retrieveLogsRequest(
        RetrieveLogsResponseCallback callback,
        Integer intent,
        Integer requestedProtocol,
        byte[] transferFileDesignator) {
      retrieveLogsRequest(
          chipClusterPtr, callback, intent, requestedProtocol, transferFileDesignator);
    }

    private native void retrieveLogsRequest(
        long chipClusterPtr,
        RetrieveLogsResponseCallback callback,
        Integer intent,
        Integer requestedProtocol,
        byte[] transferFileDesignator);

    public interface RetrieveLogsResponseCallback {
      void onSuccess(Integer status, byte[] content, Long timeStamp, Long timeSinceBoot);

      void onError(Exception error);
    }
  }

  public static class DoorLockCluster extends BaseChipCluster {
    public DoorLockCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("257");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void clearAllPins(ClearAllPinsResponseCallback callback) {
      clearAllPins(chipClusterPtr, callback);
    }

    public void clearAllRfids(ClearAllRfidsResponseCallback callback) {
      clearAllRfids(chipClusterPtr, callback);
    }

    public void clearHolidaySchedule(
        ClearHolidayScheduleResponseCallback callback, Integer scheduleId) {
      clearHolidaySchedule(chipClusterPtr, callback, scheduleId);
    }

    public void clearPin(ClearPinResponseCallback callback, Integer userId) {
      clearPin(chipClusterPtr, callback, userId);
    }

    public void clearRfid(ClearRfidResponseCallback callback, Integer userId) {
      clearRfid(chipClusterPtr, callback, userId);
    }

    public void clearWeekdaySchedule(
        ClearWeekdayScheduleResponseCallback callback, Integer scheduleId, Integer userId) {
      clearWeekdaySchedule(chipClusterPtr, callback, scheduleId, userId);
    }

    public void clearYeardaySchedule(
        ClearYeardayScheduleResponseCallback callback, Integer scheduleId, Integer userId) {
      clearYeardaySchedule(chipClusterPtr, callback, scheduleId, userId);
    }

    public void getHolidaySchedule(
        GetHolidayScheduleResponseCallback callback, Integer scheduleId) {
      getHolidaySchedule(chipClusterPtr, callback, scheduleId);
    }

    public void getLogRecord(GetLogRecordResponseCallback callback, Integer logIndex) {
      getLogRecord(chipClusterPtr, callback, logIndex);
    }

    public void getPin(GetPinResponseCallback callback, Integer userId) {
      getPin(chipClusterPtr, callback, userId);
    }

    public void getRfid(GetRfidResponseCallback callback, Integer userId) {
      getRfid(chipClusterPtr, callback, userId);
    }

    public void getUserType(GetUserTypeResponseCallback callback, Integer userId) {
      getUserType(chipClusterPtr, callback, userId);
    }

    public void getWeekdaySchedule(
        GetWeekdayScheduleResponseCallback callback, Integer scheduleId, Integer userId) {
      getWeekdaySchedule(chipClusterPtr, callback, scheduleId, userId);
    }

    public void getYeardaySchedule(
        GetYeardayScheduleResponseCallback callback, Integer scheduleId, Integer userId) {
      getYeardaySchedule(chipClusterPtr, callback, scheduleId, userId);
    }

    public void lockDoor(LockDoorResponseCallback callback, byte[] pin) {
      lockDoor(chipClusterPtr, callback, pin);
    }

    public void setHolidaySchedule(
        SetHolidayScheduleResponseCallback callback,
        Integer scheduleId,
        Long localStartTime,
        Long localEndTime,
        Integer operatingModeDuringHoliday) {
      setHolidaySchedule(
          chipClusterPtr,
          callback,
          scheduleId,
          localStartTime,
          localEndTime,
          operatingModeDuringHoliday);
    }

    public void setPin(
        SetPinResponseCallback callback,
        Integer userId,
        Integer userStatus,
        Integer userType,
        byte[] pin) {
      setPin(chipClusterPtr, callback, userId, userStatus, userType, pin);
    }

    public void setRfid(
        SetRfidResponseCallback callback,
        Integer userId,
        Integer userStatus,
        Integer userType,
        byte[] id) {
      setRfid(chipClusterPtr, callback, userId, userStatus, userType, id);
    }

    public void setUserType(
        SetUserTypeResponseCallback callback, Integer userId, Integer userType) {
      setUserType(chipClusterPtr, callback, userId, userType);
    }

    public void setWeekdaySchedule(
        SetWeekdayScheduleResponseCallback callback,
        Integer scheduleId,
        Integer userId,
        Integer daysMask,
        Integer startHour,
        Integer startMinute,
        Integer endHour,
        Integer endMinute) {
      setWeekdaySchedule(
          chipClusterPtr,
          callback,
          scheduleId,
          userId,
          daysMask,
          startHour,
          startMinute,
          endHour,
          endMinute);
    }

    public void setYeardaySchedule(
        SetYeardayScheduleResponseCallback callback,
        Integer scheduleId,
        Integer userId,
        Long localStartTime,
        Long localEndTime) {
      setYeardaySchedule(
          chipClusterPtr, callback, scheduleId, userId, localStartTime, localEndTime);
    }

    public void unlockDoor(UnlockDoorResponseCallback callback, byte[] pin) {
      unlockDoor(chipClusterPtr, callback, pin);
    }

    public void unlockWithTimeout(
        UnlockWithTimeoutResponseCallback callback, Integer timeoutInSeconds, byte[] pin) {
      unlockWithTimeout(chipClusterPtr, callback, timeoutInSeconds, pin);
    }

    private native void clearAllPins(long chipClusterPtr, ClearAllPinsResponseCallback callback);

    private native void clearAllRfids(long chipClusterPtr, ClearAllRfidsResponseCallback callback);

    private native void clearHolidaySchedule(
        long chipClusterPtr, ClearHolidayScheduleResponseCallback callback, Integer scheduleId);

    private native void clearPin(
        long chipClusterPtr, ClearPinResponseCallback callback, Integer userId);

    private native void clearRfid(
        long chipClusterPtr, ClearRfidResponseCallback callback, Integer userId);

    private native void clearWeekdaySchedule(
        long chipClusterPtr,
        ClearWeekdayScheduleResponseCallback callback,
        Integer scheduleId,
        Integer userId);

    private native void clearYeardaySchedule(
        long chipClusterPtr,
        ClearYeardayScheduleResponseCallback callback,
        Integer scheduleId,
        Integer userId);

    private native void getHolidaySchedule(
        long chipClusterPtr, GetHolidayScheduleResponseCallback callback, Integer scheduleId);

    private native void getLogRecord(
        long chipClusterPtr, GetLogRecordResponseCallback callback, Integer logIndex);

    private native void getPin(
        long chipClusterPtr, GetPinResponseCallback callback, Integer userId);

    private native void getRfid(
        long chipClusterPtr, GetRfidResponseCallback callback, Integer userId);

    private native void getUserType(
        long chipClusterPtr, GetUserTypeResponseCallback callback, Integer userId);

    private native void getWeekdaySchedule(
        long chipClusterPtr,
        GetWeekdayScheduleResponseCallback callback,
        Integer scheduleId,
        Integer userId);

    private native void getYeardaySchedule(
        long chipClusterPtr,
        GetYeardayScheduleResponseCallback callback,
        Integer scheduleId,
        Integer userId);

    private native void lockDoor(
        long chipClusterPtr, LockDoorResponseCallback callback, byte[] pin);

    private native void setHolidaySchedule(
        long chipClusterPtr,
        SetHolidayScheduleResponseCallback callback,
        Integer scheduleId,
        Long localStartTime,
        Long localEndTime,
        Integer operatingModeDuringHoliday);

    private native void setPin(
        long chipClusterPtr,
        SetPinResponseCallback callback,
        Integer userId,
        Integer userStatus,
        Integer userType,
        byte[] pin);

    private native void setRfid(
        long chipClusterPtr,
        SetRfidResponseCallback callback,
        Integer userId,
        Integer userStatus,
        Integer userType,
        byte[] id);

    private native void setUserType(
        long chipClusterPtr,
        SetUserTypeResponseCallback callback,
        Integer userId,
        Integer userType);

    private native void setWeekdaySchedule(
        long chipClusterPtr,
        SetWeekdayScheduleResponseCallback callback,
        Integer scheduleId,
        Integer userId,
        Integer daysMask,
        Integer startHour,
        Integer startMinute,
        Integer endHour,
        Integer endMinute);

    private native void setYeardaySchedule(
        long chipClusterPtr,
        SetYeardayScheduleResponseCallback callback,
        Integer scheduleId,
        Integer userId,
        Long localStartTime,
        Long localEndTime);

    private native void unlockDoor(
        long chipClusterPtr, UnlockDoorResponseCallback callback, byte[] pin);

    private native void unlockWithTimeout(
        long chipClusterPtr,
        UnlockWithTimeoutResponseCallback callback,
        Integer timeoutInSeconds,
        byte[] pin);

    public interface ClearAllPinsResponseCallback {
      void onSuccess(Integer status);

      void onError(Exception error);
    }

    public interface ClearAllRfidsResponseCallback {
      void onSuccess(Integer status);

      void onError(Exception error);
    }

    public interface ClearHolidayScheduleResponseCallback {
      void onSuccess(Integer status);

      void onError(Exception error);
    }

    public interface ClearPinResponseCallback {
      void onSuccess(Integer status);

      void onError(Exception error);
    }

    public interface ClearRfidResponseCallback {
      void onSuccess(Integer status);

      void onError(Exception error);
    }

    public interface ClearWeekdayScheduleResponseCallback {
      void onSuccess(Integer status);

      void onError(Exception error);
    }

    public interface ClearYeardayScheduleResponseCallback {
      void onSuccess(Integer status);

      void onError(Exception error);
    }

    public interface GetHolidayScheduleResponseCallback {
      void onSuccess(
          Integer scheduleId,
          Integer status,
          Long localStartTime,
          Long localEndTime,
          Integer operatingModeDuringHoliday);

      void onError(Exception error);
    }

    public interface GetLogRecordResponseCallback {
      void onSuccess(
          Integer logEntryId,
          Long timestamp,
          Integer eventType,
          Integer source,
          Integer eventIdOrAlarmCode,
          Integer userId,
          byte[] pin);

      void onError(Exception error);
    }

    public interface GetPinResponseCallback {
      void onSuccess(Integer userId, Integer userStatus, Integer userType, byte[] pin);

      void onError(Exception error);
    }

    public interface GetRfidResponseCallback {
      void onSuccess(Integer userId, Integer userStatus, Integer userType, byte[] rfid);

      void onError(Exception error);
    }

    public interface GetUserTypeResponseCallback {
      void onSuccess(Integer userId, Integer userType);

      void onError(Exception error);
    }

    public interface GetWeekdayScheduleResponseCallback {
      void onSuccess(
          Integer scheduleId,
          Integer userId,
          Integer status,
          Integer daysMask,
          Integer startHour,
          Integer startMinute,
          Integer endHour,
          Integer endMinute);

      void onError(Exception error);
    }

    public interface GetYeardayScheduleResponseCallback {
      void onSuccess(
          Integer scheduleId,
          Integer userId,
          Integer status,
          Long localStartTime,
          Long localEndTime);

      void onError(Exception error);
    }

    public interface LockDoorResponseCallback {
      void onSuccess(Integer status);

      void onError(Exception error);
    }

    public interface SetHolidayScheduleResponseCallback {
      void onSuccess(Integer status);

      void onError(Exception error);
    }

    public interface SetPinResponseCallback {
      void onSuccess(Integer status);

      void onError(Exception error);
    }

    public interface SetRfidResponseCallback {
      void onSuccess(Integer status);

      void onError(Exception error);
    }

    public interface SetUserTypeResponseCallback {
      void onSuccess(Integer status);

      void onError(Exception error);
    }

    public interface SetWeekdayScheduleResponseCallback {
      void onSuccess(Integer status);

      void onError(Exception error);
    }

    public interface SetYeardayScheduleResponseCallback {
      void onSuccess(Integer status);

      void onError(Exception error);
    }

    public interface UnlockDoorResponseCallback {
      void onSuccess(Integer status);

      void onError(Exception error);
    }

    public interface UnlockWithTimeoutResponseCallback {
      void onSuccess(Integer status);

      void onError(Exception error);
    }

    public void readLockStateAttribute(IntegerAttributeCallback callback) {
      readLockStateAttribute(chipClusterPtr, callback);
    }

    public void subscribeLockStateAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeLockStateAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportLockStateAttribute(IntegerAttributeCallback callback) {
      reportLockStateAttribute(chipClusterPtr, callback);
    }

    public void readLockTypeAttribute(IntegerAttributeCallback callback) {
      readLockTypeAttribute(chipClusterPtr, callback);
    }

    public void readActuatorEnabledAttribute(BooleanAttributeCallback callback) {
      readActuatorEnabledAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readLockStateAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeLockStateAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportLockStateAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readLockTypeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readActuatorEnabledAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class ElectricalMeasurementCluster extends BaseChipCluster {
    public ElectricalMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("2820");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void readMeasurementTypeAttribute(LongAttributeCallback callback) {
      readMeasurementTypeAttribute(chipClusterPtr, callback);
    }

    public void readTotalActivePowerAttribute(LongAttributeCallback callback) {
      readTotalActivePowerAttribute(chipClusterPtr, callback);
    }

    public void readRmsVoltageAttribute(IntegerAttributeCallback callback) {
      readRmsVoltageAttribute(chipClusterPtr, callback);
    }

    public void readRmsVoltageMinAttribute(IntegerAttributeCallback callback) {
      readRmsVoltageMinAttribute(chipClusterPtr, callback);
    }

    public void readRmsVoltageMaxAttribute(IntegerAttributeCallback callback) {
      readRmsVoltageMaxAttribute(chipClusterPtr, callback);
    }

    public void readRmsCurrentAttribute(IntegerAttributeCallback callback) {
      readRmsCurrentAttribute(chipClusterPtr, callback);
    }

    public void readRmsCurrentMinAttribute(IntegerAttributeCallback callback) {
      readRmsCurrentMinAttribute(chipClusterPtr, callback);
    }

    public void readRmsCurrentMaxAttribute(IntegerAttributeCallback callback) {
      readRmsCurrentMaxAttribute(chipClusterPtr, callback);
    }

    public void readActivePowerAttribute(IntegerAttributeCallback callback) {
      readActivePowerAttribute(chipClusterPtr, callback);
    }

    public void readActivePowerMinAttribute(IntegerAttributeCallback callback) {
      readActivePowerMinAttribute(chipClusterPtr, callback);
    }

    public void readActivePowerMaxAttribute(IntegerAttributeCallback callback) {
      readActivePowerMaxAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readMeasurementTypeAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTotalActivePowerAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRmsVoltageAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readRmsVoltageMinAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readRmsVoltageMaxAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readRmsCurrentAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readRmsCurrentMinAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readRmsCurrentMaxAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readActivePowerAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readActivePowerMinAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readActivePowerMaxAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class EthernetNetworkDiagnosticsCluster extends BaseChipCluster {
    public EthernetNetworkDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("55");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void resetCounts(DefaultClusterCallback callback) {
      resetCounts(chipClusterPtr, callback);
    }

    private native void resetCounts(long chipClusterPtr, DefaultClusterCallback callback);

    public void readPHYRateAttribute(IntegerAttributeCallback callback) {
      readPHYRateAttribute(chipClusterPtr, callback);
    }

    public void readFullDuplexAttribute(BooleanAttributeCallback callback) {
      readFullDuplexAttribute(chipClusterPtr, callback);
    }

    public void readPacketRxCountAttribute(LongAttributeCallback callback) {
      readPacketRxCountAttribute(chipClusterPtr, callback);
    }

    public void readPacketTxCountAttribute(LongAttributeCallback callback) {
      readPacketTxCountAttribute(chipClusterPtr, callback);
    }

    public void readTxErrCountAttribute(LongAttributeCallback callback) {
      readTxErrCountAttribute(chipClusterPtr, callback);
    }

    public void readCollisionCountAttribute(LongAttributeCallback callback) {
      readCollisionCountAttribute(chipClusterPtr, callback);
    }

    public void readOverrunCountAttribute(LongAttributeCallback callback) {
      readOverrunCountAttribute(chipClusterPtr, callback);
    }

    public void readCarrierDetectAttribute(BooleanAttributeCallback callback) {
      readCarrierDetectAttribute(chipClusterPtr, callback);
    }

    public void readTimeSinceResetAttribute(LongAttributeCallback callback) {
      readTimeSinceResetAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readPHYRateAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readFullDuplexAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void readPacketRxCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readPacketTxCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTxErrCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readCollisionCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readOverrunCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readCarrierDetectAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void readTimeSinceResetAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class FixedLabelCluster extends BaseChipCluster {
    public FixedLabelCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("64");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public static class LabelListAttribute {
      public String label;
      public String value;

      public LabelListAttribute(String label, String value) {
        this.label = label;
        this.value = value;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("String label: ");
        output.append(this.label);
        output.append("\n");

        output.append("String value: ");
        output.append(this.value);
        output.append("\n");

        return output.toString();
      }
    }

    public interface LabelListAttributeCallback {
      void onSuccess(List<LabelListAttribute> valueList);

      void onError(Exception ex);
    }

    public void readLabelListAttribute(LabelListAttributeCallback callback) {
      readLabelListAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readLabelListAttribute(
        long chipClusterPtr, LabelListAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class FlowMeasurementCluster extends BaseChipCluster {
    public FlowMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1028");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void readMeasuredValueAttribute(IntegerAttributeCallback callback) {
      readMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void readMinMeasuredValueAttribute(IntegerAttributeCallback callback) {
      readMinMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void readMaxMeasuredValueAttribute(IntegerAttributeCallback callback) {
      readMaxMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void readToleranceAttribute(IntegerAttributeCallback callback) {
      readToleranceAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMinMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMaxMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readToleranceAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class GeneralCommissioningCluster extends BaseChipCluster {
    public GeneralCommissioningCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("48");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void armFailSafe(
        ArmFailSafeResponseCallback callback,
        Integer expiryLengthSeconds,
        Long breadcrumb,
        Long timeoutMs) {
      armFailSafe(chipClusterPtr, callback, expiryLengthSeconds, breadcrumb, timeoutMs);
    }

    public void commissioningComplete(CommissioningCompleteResponseCallback callback) {
      commissioningComplete(chipClusterPtr, callback);
    }

    public void setRegulatoryConfig(
        SetRegulatoryConfigResponseCallback callback,
        Integer location,
        String countryCode,
        Long breadcrumb,
        Long timeoutMs) {
      setRegulatoryConfig(chipClusterPtr, callback, location, countryCode, breadcrumb, timeoutMs);
    }

    private native void armFailSafe(
        long chipClusterPtr,
        ArmFailSafeResponseCallback callback,
        Integer expiryLengthSeconds,
        Long breadcrumb,
        Long timeoutMs);

    private native void commissioningComplete(
        long chipClusterPtr, CommissioningCompleteResponseCallback callback);

    private native void setRegulatoryConfig(
        long chipClusterPtr,
        SetRegulatoryConfigResponseCallback callback,
        Integer location,
        String countryCode,
        Long breadcrumb,
        Long timeoutMs);

    public interface ArmFailSafeResponseCallback {
      void onSuccess(Integer errorCode, String debugText);

      void onError(Exception error);
    }

    public interface CommissioningCompleteResponseCallback {
      void onSuccess(Integer errorCode, String debugText);

      void onError(Exception error);
    }

    public interface SetRegulatoryConfigResponseCallback {
      void onSuccess(Integer errorCode, String debugText);

      void onError(Exception error);
    }

    public static class BasicCommissioningInfoListAttribute {
      public Long failSafeExpiryLengthMs;

      public BasicCommissioningInfoListAttribute(Long failSafeExpiryLengthMs) {
        this.failSafeExpiryLengthMs = failSafeExpiryLengthMs;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("long failSafeExpiryLengthMs: ");
        output.append(this.failSafeExpiryLengthMs);
        output.append("\n");

        return output.toString();
      }
    }

    public interface BasicCommissioningInfoListAttributeCallback {
      void onSuccess(List<BasicCommissioningInfoListAttribute> valueList);

      void onError(Exception ex);
    }

    public void readBreadcrumbAttribute(LongAttributeCallback callback) {
      readBreadcrumbAttribute(chipClusterPtr, callback);
    }

    public void writeBreadcrumbAttribute(DefaultClusterCallback callback, long value) {
      writeBreadcrumbAttribute(chipClusterPtr, callback, value);
    }

    public void readBasicCommissioningInfoListAttribute(
        BasicCommissioningInfoListAttributeCallback callback) {
      readBasicCommissioningInfoListAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readBreadcrumbAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void writeBreadcrumbAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, long value);

    private native void readBasicCommissioningInfoListAttribute(
        long chipClusterPtr, BasicCommissioningInfoListAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class GeneralDiagnosticsCluster extends BaseChipCluster {
    public GeneralDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("51");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public static class NetworkInterfacesAttribute {
      public String name;
      public Boolean fabricConnected;
      public Boolean offPremiseServicesReachableIPv4;
      public Boolean offPremiseServicesReachableIPv6;
      public byte[] hardwareAddress;
      public Integer type;

      public NetworkInterfacesAttribute(
          String name,
          Boolean fabricConnected,
          Boolean offPremiseServicesReachableIPv4,
          Boolean offPremiseServicesReachableIPv6,
          byte[] hardwareAddress,
          Integer type) {
        this.name = name;
        this.fabricConnected = fabricConnected;
        this.offPremiseServicesReachableIPv4 = offPremiseServicesReachableIPv4;
        this.offPremiseServicesReachableIPv6 = offPremiseServicesReachableIPv6;
        this.hardwareAddress = hardwareAddress;
        this.type = type;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("String name: ");
        output.append(this.name);
        output.append("\n");

        output.append("boolean fabricConnected: ");
        output.append(this.fabricConnected);
        output.append("\n");

        output.append("boolean offPremiseServicesReachableIPv4: ");
        output.append(this.offPremiseServicesReachableIPv4);
        output.append("\n");

        output.append("boolean offPremiseServicesReachableIPv6: ");
        output.append(this.offPremiseServicesReachableIPv6);
        output.append("\n");

        output.append("byte[] ");
        output.append(Arrays.toString(hardwareAddress));
        output.append("\n");

        output.append("int type: ");
        output.append(this.type);
        output.append("\n");

        return output.toString();
      }
    }

    public interface NetworkInterfacesAttributeCallback {
      void onSuccess(List<NetworkInterfacesAttribute> valueList);

      void onError(Exception ex);
    }

    public interface ActiveHardwareFaultsAttributeCallback {
      void onSuccess(List<Integer> valueList);

      void onError(Exception ex);
    }

    public interface ActiveRadioFaultsAttributeCallback {
      void onSuccess(List<Integer> valueList);

      void onError(Exception ex);
    }

    public interface ActiveNetworkFaultsAttributeCallback {
      void onSuccess(List<Integer> valueList);

      void onError(Exception ex);
    }

    public void readNetworkInterfacesAttribute(NetworkInterfacesAttributeCallback callback) {
      readNetworkInterfacesAttribute(chipClusterPtr, callback);
    }

    public void readRebootCountAttribute(IntegerAttributeCallback callback) {
      readRebootCountAttribute(chipClusterPtr, callback);
    }

    public void readUpTimeAttribute(LongAttributeCallback callback) {
      readUpTimeAttribute(chipClusterPtr, callback);
    }

    public void readTotalOperationalHoursAttribute(LongAttributeCallback callback) {
      readTotalOperationalHoursAttribute(chipClusterPtr, callback);
    }

    public void readBootReasonsAttribute(IntegerAttributeCallback callback) {
      readBootReasonsAttribute(chipClusterPtr, callback);
    }

    public void readActiveHardwareFaultsAttribute(ActiveHardwareFaultsAttributeCallback callback) {
      readActiveHardwareFaultsAttribute(chipClusterPtr, callback);
    }

    public void readActiveRadioFaultsAttribute(ActiveRadioFaultsAttributeCallback callback) {
      readActiveRadioFaultsAttribute(chipClusterPtr, callback);
    }

    public void readActiveNetworkFaultsAttribute(ActiveNetworkFaultsAttributeCallback callback) {
      readActiveNetworkFaultsAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readNetworkInterfacesAttribute(
        long chipClusterPtr, NetworkInterfacesAttributeCallback callback);

    private native void readRebootCountAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readUpTimeAttribute(long chipClusterPtr, LongAttributeCallback callback);

    private native void readTotalOperationalHoursAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readBootReasonsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readActiveHardwareFaultsAttribute(
        long chipClusterPtr, ActiveHardwareFaultsAttributeCallback callback);

    private native void readActiveRadioFaultsAttribute(
        long chipClusterPtr, ActiveRadioFaultsAttributeCallback callback);

    private native void readActiveNetworkFaultsAttribute(
        long chipClusterPtr, ActiveNetworkFaultsAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class GroupKeyManagementCluster extends BaseChipCluster {
    public GroupKeyManagementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("61444");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public static class GroupsAttribute {
      public Integer vendorId;
      public Integer vendorGroupId;
      public Integer groupKeySetIndex;

      public GroupsAttribute(Integer vendorId, Integer vendorGroupId, Integer groupKeySetIndex) {
        this.vendorId = vendorId;
        this.vendorGroupId = vendorGroupId;
        this.groupKeySetIndex = groupKeySetIndex;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("int vendorId: ");
        output.append(this.vendorId);
        output.append("\n");

        output.append("int vendorGroupId: ");
        output.append(this.vendorGroupId);
        output.append("\n");

        output.append("int groupKeySetIndex: ");
        output.append(this.groupKeySetIndex);
        output.append("\n");

        return output.toString();
      }
    }

    public interface GroupsAttributeCallback {
      void onSuccess(List<GroupsAttribute> valueList);

      void onError(Exception ex);
    }

    public static class GroupKeysAttribute {
      public Integer vendorId;
      public Integer groupKeyIndex;
      public byte[] groupKeyRoot;
      public Long groupKeyEpochStartTime;
      public Integer groupKeySecurityPolicy;

      public GroupKeysAttribute(
          Integer vendorId,
          Integer groupKeyIndex,
          byte[] groupKeyRoot,
          Long groupKeyEpochStartTime,
          Integer groupKeySecurityPolicy) {
        this.vendorId = vendorId;
        this.groupKeyIndex = groupKeyIndex;
        this.groupKeyRoot = groupKeyRoot;
        this.groupKeyEpochStartTime = groupKeyEpochStartTime;
        this.groupKeySecurityPolicy = groupKeySecurityPolicy;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("int vendorId: ");
        output.append(this.vendorId);
        output.append("\n");

        output.append("int groupKeyIndex: ");
        output.append(this.groupKeyIndex);
        output.append("\n");

        output.append("byte[] ");
        output.append(Arrays.toString(groupKeyRoot));
        output.append("\n");

        output.append("long groupKeyEpochStartTime: ");
        output.append(this.groupKeyEpochStartTime);
        output.append("\n");

        output.append("int groupKeySecurityPolicy: ");
        output.append(this.groupKeySecurityPolicy);
        output.append("\n");

        return output.toString();
      }
    }

    public interface GroupKeysAttributeCallback {
      void onSuccess(List<GroupKeysAttribute> valueList);

      void onError(Exception ex);
    }

    public void readGroupsAttribute(GroupsAttributeCallback callback) {
      readGroupsAttribute(chipClusterPtr, callback);
    }

    public void readGroupKeysAttribute(GroupKeysAttributeCallback callback) {
      readGroupKeysAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readGroupsAttribute(long chipClusterPtr, GroupsAttributeCallback callback);

    private native void readGroupKeysAttribute(
        long chipClusterPtr, GroupKeysAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class GroupsCluster extends BaseChipCluster {
    public GroupsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("4");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void addGroup(AddGroupResponseCallback callback, Integer groupId, String groupName) {
      addGroup(chipClusterPtr, callback, groupId, groupName);
    }

    public void addGroupIfIdentifying(
        DefaultClusterCallback callback, Integer groupId, String groupName) {
      addGroupIfIdentifying(chipClusterPtr, callback, groupId, groupName);
    }

    public void getGroupMembership(
        GetGroupMembershipResponseCallback callback, Integer groupCount, Integer groupList) {
      getGroupMembership(chipClusterPtr, callback, groupCount, groupList);
    }

    public void removeAllGroups(DefaultClusterCallback callback) {
      removeAllGroups(chipClusterPtr, callback);
    }

    public void removeGroup(RemoveGroupResponseCallback callback, Integer groupId) {
      removeGroup(chipClusterPtr, callback, groupId);
    }

    public void viewGroup(ViewGroupResponseCallback callback, Integer groupId) {
      viewGroup(chipClusterPtr, callback, groupId);
    }

    private native void addGroup(
        long chipClusterPtr, AddGroupResponseCallback callback, Integer groupId, String groupName);

    private native void addGroupIfIdentifying(
        long chipClusterPtr, DefaultClusterCallback callback, Integer groupId, String groupName);

    private native void getGroupMembership(
        long chipClusterPtr,
        GetGroupMembershipResponseCallback callback,
        Integer groupCount,
        Integer groupList);

    private native void removeAllGroups(long chipClusterPtr, DefaultClusterCallback callback);

    private native void removeGroup(
        long chipClusterPtr, RemoveGroupResponseCallback callback, Integer groupId);

    private native void viewGroup(
        long chipClusterPtr, ViewGroupResponseCallback callback, Integer groupId);

    public interface AddGroupResponseCallback {
      void onSuccess(Integer status, Integer groupId);

      void onError(Exception error);
    }

    public interface GetGroupMembershipResponseCallback {
      void onSuccess(Integer capacity, Integer groupCount
          // groupList: /* TYPE WARNING: array array defaults to */ uint8_t *
          // Conversion from this type to Java is not properly implemented yet
          );

      void onError(Exception error);
    }

    public interface RemoveGroupResponseCallback {
      void onSuccess(Integer status, Integer groupId);

      void onError(Exception error);
    }

    public interface ViewGroupResponseCallback {
      void onSuccess(Integer status, Integer groupId, String groupName);

      void onError(Exception error);
    }

    public void readNameSupportAttribute(IntegerAttributeCallback callback) {
      readNameSupportAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readNameSupportAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class IdentifyCluster extends BaseChipCluster {
    public IdentifyCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("3");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void identify(DefaultClusterCallback callback, Integer identifyTime) {
      identify(chipClusterPtr, callback, identifyTime);
    }

    public void identifyQuery(IdentifyQueryResponseCallback callback) {
      identifyQuery(chipClusterPtr, callback);
    }

    public void triggerEffect(
        DefaultClusterCallback callback, Integer effectIdentifier, Integer effectVariant) {
      triggerEffect(chipClusterPtr, callback, effectIdentifier, effectVariant);
    }

    private native void identify(
        long chipClusterPtr, DefaultClusterCallback callback, Integer identifyTime);

    private native void identifyQuery(long chipClusterPtr, IdentifyQueryResponseCallback callback);

    private native void triggerEffect(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer effectIdentifier,
        Integer effectVariant);

    public interface IdentifyQueryResponseCallback {
      void onSuccess(Integer timeout);

      void onError(Exception error);
    }

    public void readIdentifyTimeAttribute(IntegerAttributeCallback callback) {
      readIdentifyTimeAttribute(chipClusterPtr, callback);
    }

    public void writeIdentifyTimeAttribute(DefaultClusterCallback callback, int value) {
      writeIdentifyTimeAttribute(chipClusterPtr, callback, value);
    }

    public void readIdentifyTypeAttribute(IntegerAttributeCallback callback) {
      readIdentifyTypeAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readIdentifyTimeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeIdentifyTimeAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readIdentifyTypeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class IlluminanceMeasurementCluster extends BaseChipCluster {
    public IlluminanceMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1024");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void readMeasuredValueAttribute(IntegerAttributeCallback callback) {
      readMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void subscribeMeasuredValueAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportMeasuredValueAttribute(IntegerAttributeCallback callback) {
      reportMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void readMinMeasuredValueAttribute(IntegerAttributeCallback callback) {
      readMinMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void readMaxMeasuredValueAttribute(IntegerAttributeCallback callback) {
      readMaxMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void readToleranceAttribute(IntegerAttributeCallback callback) {
      readToleranceAttribute(chipClusterPtr, callback);
    }

    public void readLightSensorTypeAttribute(IntegerAttributeCallback callback) {
      readLightSensorTypeAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeMeasuredValueAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMinMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMaxMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readToleranceAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readLightSensorTypeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class KeypadInputCluster extends BaseChipCluster {
    public KeypadInputCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1289");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void sendKey(SendKeyResponseCallback callback, Integer keyCode) {
      sendKey(chipClusterPtr, callback, keyCode);
    }

    private native void sendKey(
        long chipClusterPtr, SendKeyResponseCallback callback, Integer keyCode);

    public interface SendKeyResponseCallback {
      void onSuccess(Integer status);

      void onError(Exception error);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class LevelControlCluster extends BaseChipCluster {
    public LevelControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("8");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void move(
        DefaultClusterCallback callback,
        Integer moveMode,
        Integer rate,
        Integer optionMask,
        Integer optionOverride) {
      move(chipClusterPtr, callback, moveMode, rate, optionMask, optionOverride);
    }

    public void moveToLevel(
        DefaultClusterCallback callback,
        Integer level,
        Integer transitionTime,
        Integer optionMask,
        Integer optionOverride) {
      moveToLevel(chipClusterPtr, callback, level, transitionTime, optionMask, optionOverride);
    }

    public void moveToLevelWithOnOff(
        DefaultClusterCallback callback, Integer level, Integer transitionTime) {
      moveToLevelWithOnOff(chipClusterPtr, callback, level, transitionTime);
    }

    public void moveWithOnOff(DefaultClusterCallback callback, Integer moveMode, Integer rate) {
      moveWithOnOff(chipClusterPtr, callback, moveMode, rate);
    }

    public void step(
        DefaultClusterCallback callback,
        Integer stepMode,
        Integer stepSize,
        Integer transitionTime,
        Integer optionMask,
        Integer optionOverride) {
      step(
          chipClusterPtr, callback, stepMode, stepSize, transitionTime, optionMask, optionOverride);
    }

    public void stepWithOnOff(
        DefaultClusterCallback callback,
        Integer stepMode,
        Integer stepSize,
        Integer transitionTime) {
      stepWithOnOff(chipClusterPtr, callback, stepMode, stepSize, transitionTime);
    }

    public void stop(DefaultClusterCallback callback, Integer optionMask, Integer optionOverride) {
      stop(chipClusterPtr, callback, optionMask, optionOverride);
    }

    public void stopWithOnOff(DefaultClusterCallback callback) {
      stopWithOnOff(chipClusterPtr, callback);
    }

    private native void move(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer moveMode,
        Integer rate,
        Integer optionMask,
        Integer optionOverride);

    private native void moveToLevel(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer level,
        Integer transitionTime,
        Integer optionMask,
        Integer optionOverride);

    private native void moveToLevelWithOnOff(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer level,
        Integer transitionTime);

    private native void moveWithOnOff(
        long chipClusterPtr, DefaultClusterCallback callback, Integer moveMode, Integer rate);

    private native void step(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer stepMode,
        Integer stepSize,
        Integer transitionTime,
        Integer optionMask,
        Integer optionOverride);

    private native void stepWithOnOff(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer stepMode,
        Integer stepSize,
        Integer transitionTime);

    private native void stop(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer optionMask,
        Integer optionOverride);

    private native void stopWithOnOff(long chipClusterPtr, DefaultClusterCallback callback);

    public void readCurrentLevelAttribute(IntegerAttributeCallback callback) {
      readCurrentLevelAttribute(chipClusterPtr, callback);
    }

    public void subscribeCurrentLevelAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeCurrentLevelAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportCurrentLevelAttribute(IntegerAttributeCallback callback) {
      reportCurrentLevelAttribute(chipClusterPtr, callback);
    }

    public void readRemainingTimeAttribute(IntegerAttributeCallback callback) {
      readRemainingTimeAttribute(chipClusterPtr, callback);
    }

    public void readMinLevelAttribute(IntegerAttributeCallback callback) {
      readMinLevelAttribute(chipClusterPtr, callback);
    }

    public void readMaxLevelAttribute(IntegerAttributeCallback callback) {
      readMaxLevelAttribute(chipClusterPtr, callback);
    }

    public void readCurrentFrequencyAttribute(IntegerAttributeCallback callback) {
      readCurrentFrequencyAttribute(chipClusterPtr, callback);
    }

    public void readMinFrequencyAttribute(IntegerAttributeCallback callback) {
      readMinFrequencyAttribute(chipClusterPtr, callback);
    }

    public void readMaxFrequencyAttribute(IntegerAttributeCallback callback) {
      readMaxFrequencyAttribute(chipClusterPtr, callback);
    }

    public void readOptionsAttribute(IntegerAttributeCallback callback) {
      readOptionsAttribute(chipClusterPtr, callback);
    }

    public void writeOptionsAttribute(DefaultClusterCallback callback, int value) {
      writeOptionsAttribute(chipClusterPtr, callback, value);
    }

    public void readOnOffTransitionTimeAttribute(IntegerAttributeCallback callback) {
      readOnOffTransitionTimeAttribute(chipClusterPtr, callback);
    }

    public void writeOnOffTransitionTimeAttribute(DefaultClusterCallback callback, int value) {
      writeOnOffTransitionTimeAttribute(chipClusterPtr, callback, value);
    }

    public void readOnLevelAttribute(IntegerAttributeCallback callback) {
      readOnLevelAttribute(chipClusterPtr, callback);
    }

    public void writeOnLevelAttribute(DefaultClusterCallback callback, int value) {
      writeOnLevelAttribute(chipClusterPtr, callback, value);
    }

    public void readOnTransitionTimeAttribute(IntegerAttributeCallback callback) {
      readOnTransitionTimeAttribute(chipClusterPtr, callback);
    }

    public void writeOnTransitionTimeAttribute(DefaultClusterCallback callback, int value) {
      writeOnTransitionTimeAttribute(chipClusterPtr, callback, value);
    }

    public void readOffTransitionTimeAttribute(IntegerAttributeCallback callback) {
      readOffTransitionTimeAttribute(chipClusterPtr, callback);
    }

    public void writeOffTransitionTimeAttribute(DefaultClusterCallback callback, int value) {
      writeOffTransitionTimeAttribute(chipClusterPtr, callback, value);
    }

    public void readDefaultMoveRateAttribute(IntegerAttributeCallback callback) {
      readDefaultMoveRateAttribute(chipClusterPtr, callback);
    }

    public void writeDefaultMoveRateAttribute(DefaultClusterCallback callback, int value) {
      writeDefaultMoveRateAttribute(chipClusterPtr, callback, value);
    }

    public void readStartUpCurrentLevelAttribute(IntegerAttributeCallback callback) {
      readStartUpCurrentLevelAttribute(chipClusterPtr, callback);
    }

    public void writeStartUpCurrentLevelAttribute(DefaultClusterCallback callback, int value) {
      writeStartUpCurrentLevelAttribute(chipClusterPtr, callback, value);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readCurrentLevelAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeCurrentLevelAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportCurrentLevelAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readRemainingTimeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMinLevelAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMaxLevelAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readCurrentFrequencyAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMinFrequencyAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMaxFrequencyAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readOptionsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeOptionsAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readOnOffTransitionTimeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeOnOffTransitionTimeAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readOnLevelAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeOnLevelAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readOnTransitionTimeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeOnTransitionTimeAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readOffTransitionTimeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeOffTransitionTimeAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readDefaultMoveRateAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeDefaultMoveRateAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readStartUpCurrentLevelAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeStartUpCurrentLevelAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class LowPowerCluster extends BaseChipCluster {
    public LowPowerCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1288");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void sleep(DefaultClusterCallback callback) {
      sleep(chipClusterPtr, callback);
    }

    private native void sleep(long chipClusterPtr, DefaultClusterCallback callback);

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class MediaInputCluster extends BaseChipCluster {
    public MediaInputCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1287");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void hideInputStatus(DefaultClusterCallback callback) {
      hideInputStatus(chipClusterPtr, callback);
    }

    public void renameInput(DefaultClusterCallback callback, Integer index, String name) {
      renameInput(chipClusterPtr, callback, index, name);
    }

    public void selectInput(DefaultClusterCallback callback, Integer index) {
      selectInput(chipClusterPtr, callback, index);
    }

    public void showInputStatus(DefaultClusterCallback callback) {
      showInputStatus(chipClusterPtr, callback);
    }

    private native void hideInputStatus(long chipClusterPtr, DefaultClusterCallback callback);

    private native void renameInput(
        long chipClusterPtr, DefaultClusterCallback callback, Integer index, String name);

    private native void selectInput(
        long chipClusterPtr, DefaultClusterCallback callback, Integer index);

    private native void showInputStatus(long chipClusterPtr, DefaultClusterCallback callback);

    public static class MediaInputListAttribute {
      public Integer index;
      public Integer inputType;
      public String name;
      public String description;

      public MediaInputListAttribute(
          Integer index, Integer inputType, String name, String description) {
        this.index = index;
        this.inputType = inputType;
        this.name = name;
        this.description = description;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("int index: ");
        output.append(this.index);
        output.append("\n");

        output.append("int inputType: ");
        output.append(this.inputType);
        output.append("\n");

        output.append("String name: ");
        output.append(this.name);
        output.append("\n");

        output.append("String description: ");
        output.append(this.description);
        output.append("\n");

        return output.toString();
      }
    }

    public interface MediaInputListAttributeCallback {
      void onSuccess(List<MediaInputListAttribute> valueList);

      void onError(Exception ex);
    }

    public void readMediaInputListAttribute(MediaInputListAttributeCallback callback) {
      readMediaInputListAttribute(chipClusterPtr, callback);
    }

    public void readCurrentMediaInputAttribute(IntegerAttributeCallback callback) {
      readCurrentMediaInputAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readMediaInputListAttribute(
        long chipClusterPtr, MediaInputListAttributeCallback callback);

    private native void readCurrentMediaInputAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class MediaPlaybackCluster extends BaseChipCluster {
    public MediaPlaybackCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1286");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void mediaFastForward(MediaFastForwardResponseCallback callback) {
      mediaFastForward(chipClusterPtr, callback);
    }

    public void mediaNext(MediaNextResponseCallback callback) {
      mediaNext(chipClusterPtr, callback);
    }

    public void mediaPause(MediaPauseResponseCallback callback) {
      mediaPause(chipClusterPtr, callback);
    }

    public void mediaPlay(MediaPlayResponseCallback callback) {
      mediaPlay(chipClusterPtr, callback);
    }

    public void mediaPrevious(MediaPreviousResponseCallback callback) {
      mediaPrevious(chipClusterPtr, callback);
    }

    public void mediaRewind(MediaRewindResponseCallback callback) {
      mediaRewind(chipClusterPtr, callback);
    }

    public void mediaSeek(MediaSeekResponseCallback callback, Long position) {
      mediaSeek(chipClusterPtr, callback, position);
    }

    public void mediaSkipBackward(
        MediaSkipBackwardResponseCallback callback, Long deltaPositionMilliseconds) {
      mediaSkipBackward(chipClusterPtr, callback, deltaPositionMilliseconds);
    }

    public void mediaSkipForward(
        MediaSkipForwardResponseCallback callback, Long deltaPositionMilliseconds) {
      mediaSkipForward(chipClusterPtr, callback, deltaPositionMilliseconds);
    }

    public void mediaStartOver(MediaStartOverResponseCallback callback) {
      mediaStartOver(chipClusterPtr, callback);
    }

    public void mediaStop(MediaStopResponseCallback callback) {
      mediaStop(chipClusterPtr, callback);
    }

    private native void mediaFastForward(
        long chipClusterPtr, MediaFastForwardResponseCallback callback);

    private native void mediaNext(long chipClusterPtr, MediaNextResponseCallback callback);

    private native void mediaPause(long chipClusterPtr, MediaPauseResponseCallback callback);

    private native void mediaPlay(long chipClusterPtr, MediaPlayResponseCallback callback);

    private native void mediaPrevious(long chipClusterPtr, MediaPreviousResponseCallback callback);

    private native void mediaRewind(long chipClusterPtr, MediaRewindResponseCallback callback);

    private native void mediaSeek(
        long chipClusterPtr, MediaSeekResponseCallback callback, Long position);

    private native void mediaSkipBackward(
        long chipClusterPtr,
        MediaSkipBackwardResponseCallback callback,
        Long deltaPositionMilliseconds);

    private native void mediaSkipForward(
        long chipClusterPtr,
        MediaSkipForwardResponseCallback callback,
        Long deltaPositionMilliseconds);

    private native void mediaStartOver(
        long chipClusterPtr, MediaStartOverResponseCallback callback);

    private native void mediaStop(long chipClusterPtr, MediaStopResponseCallback callback);

    public interface MediaFastForwardResponseCallback {
      void onSuccess(Integer mediaPlaybackStatus);

      void onError(Exception error);
    }

    public interface MediaNextResponseCallback {
      void onSuccess(Integer mediaPlaybackStatus);

      void onError(Exception error);
    }

    public interface MediaPauseResponseCallback {
      void onSuccess(Integer mediaPlaybackStatus);

      void onError(Exception error);
    }

    public interface MediaPlayResponseCallback {
      void onSuccess(Integer mediaPlaybackStatus);

      void onError(Exception error);
    }

    public interface MediaPreviousResponseCallback {
      void onSuccess(Integer mediaPlaybackStatus);

      void onError(Exception error);
    }

    public interface MediaRewindResponseCallback {
      void onSuccess(Integer mediaPlaybackStatus);

      void onError(Exception error);
    }

    public interface MediaSeekResponseCallback {
      void onSuccess(Integer mediaPlaybackStatus);

      void onError(Exception error);
    }

    public interface MediaSkipBackwardResponseCallback {
      void onSuccess(Integer mediaPlaybackStatus);

      void onError(Exception error);
    }

    public interface MediaSkipForwardResponseCallback {
      void onSuccess(Integer mediaPlaybackStatus);

      void onError(Exception error);
    }

    public interface MediaStartOverResponseCallback {
      void onSuccess(Integer mediaPlaybackStatus);

      void onError(Exception error);
    }

    public interface MediaStopResponseCallback {
      void onSuccess(Integer mediaPlaybackStatus);

      void onError(Exception error);
    }

    public void readPlaybackStateAttribute(IntegerAttributeCallback callback) {
      readPlaybackStateAttribute(chipClusterPtr, callback);
    }

    public void readStartTimeAttribute(LongAttributeCallback callback) {
      readStartTimeAttribute(chipClusterPtr, callback);
    }

    public void readDurationAttribute(LongAttributeCallback callback) {
      readDurationAttribute(chipClusterPtr, callback);
    }

    public void readPositionUpdatedAtAttribute(LongAttributeCallback callback) {
      readPositionUpdatedAtAttribute(chipClusterPtr, callback);
    }

    public void readPositionAttribute(LongAttributeCallback callback) {
      readPositionAttribute(chipClusterPtr, callback);
    }

    public void readPlaybackSpeedAttribute(LongAttributeCallback callback) {
      readPlaybackSpeedAttribute(chipClusterPtr, callback);
    }

    public void readSeekRangeEndAttribute(LongAttributeCallback callback) {
      readSeekRangeEndAttribute(chipClusterPtr, callback);
    }

    public void readSeekRangeStartAttribute(LongAttributeCallback callback) {
      readSeekRangeStartAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readPlaybackStateAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readStartTimeAttribute(long chipClusterPtr, LongAttributeCallback callback);

    private native void readDurationAttribute(long chipClusterPtr, LongAttributeCallback callback);

    private native void readPositionUpdatedAtAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readPositionAttribute(long chipClusterPtr, LongAttributeCallback callback);

    private native void readPlaybackSpeedAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readSeekRangeEndAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readSeekRangeStartAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class ModeSelectCluster extends BaseChipCluster {
    public ModeSelectCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("80");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void changeToMode(DefaultClusterCallback callback, Integer newMode) {
      changeToMode(chipClusterPtr, callback, newMode);
    }

    private native void changeToMode(
        long chipClusterPtr, DefaultClusterCallback callback, Integer newMode);

    public static class SupportedModesAttribute {
      public String label;
      public Integer mode;
      public Long semanticTag;

      public SupportedModesAttribute(String label, Integer mode, Long semanticTag) {
        this.label = label;
        this.mode = mode;
        this.semanticTag = semanticTag;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("String label: ");
        output.append(this.label);
        output.append("\n");

        output.append("int mode: ");
        output.append(this.mode);
        output.append("\n");

        output.append("long semanticTag: ");
        output.append(this.semanticTag);
        output.append("\n");

        return output.toString();
      }
    }

    public interface SupportedModesAttributeCallback {
      void onSuccess(List<SupportedModesAttribute> valueList);

      void onError(Exception ex);
    }

    public void readCurrentModeAttribute(IntegerAttributeCallback callback) {
      readCurrentModeAttribute(chipClusterPtr, callback);
    }

    public void subscribeCurrentModeAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeCurrentModeAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportCurrentModeAttribute(IntegerAttributeCallback callback) {
      reportCurrentModeAttribute(chipClusterPtr, callback);
    }

    public void readSupportedModesAttribute(SupportedModesAttributeCallback callback) {
      readSupportedModesAttribute(chipClusterPtr, callback);
    }

    public void readOnModeAttribute(IntegerAttributeCallback callback) {
      readOnModeAttribute(chipClusterPtr, callback);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, int value) {
      writeOnModeAttribute(chipClusterPtr, callback, value);
    }

    public void readStartUpModeAttribute(IntegerAttributeCallback callback) {
      readStartUpModeAttribute(chipClusterPtr, callback);
    }

    public void readDescriptionAttribute(CharStringAttributeCallback callback) {
      readDescriptionAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readCurrentModeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeCurrentModeAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportCurrentModeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readSupportedModesAttribute(
        long chipClusterPtr, SupportedModesAttributeCallback callback);

    private native void readOnModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeOnModeAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readStartUpModeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readDescriptionAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class NetworkCommissioningCluster extends BaseChipCluster {
    public NetworkCommissioningCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("49");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void addThreadNetwork(
        AddThreadNetworkResponseCallback callback,
        byte[] operationalDataset,
        Long breadcrumb,
        Long timeoutMs) {
      addThreadNetwork(chipClusterPtr, callback, operationalDataset, breadcrumb, timeoutMs);
    }

    public void addWiFiNetwork(
        AddWiFiNetworkResponseCallback callback,
        byte[] ssid,
        byte[] credentials,
        Long breadcrumb,
        Long timeoutMs) {
      addWiFiNetwork(chipClusterPtr, callback, ssid, credentials, breadcrumb, timeoutMs);
    }

    public void disableNetwork(
        DisableNetworkResponseCallback callback,
        byte[] networkID,
        Long breadcrumb,
        Long timeoutMs) {
      disableNetwork(chipClusterPtr, callback, networkID, breadcrumb, timeoutMs);
    }

    public void enableNetwork(
        EnableNetworkResponseCallback callback, byte[] networkID, Long breadcrumb, Long timeoutMs) {
      enableNetwork(chipClusterPtr, callback, networkID, breadcrumb, timeoutMs);
    }

    public void removeNetwork(
        RemoveNetworkResponseCallback callback, byte[] networkID, Long breadcrumb, Long timeoutMs) {
      removeNetwork(chipClusterPtr, callback, networkID, breadcrumb, timeoutMs);
    }

    public void scanNetworks(
        ScanNetworksResponseCallback callback, byte[] ssid, Long breadcrumb, Long timeoutMs) {
      scanNetworks(chipClusterPtr, callback, ssid, breadcrumb, timeoutMs);
    }

    public void updateThreadNetwork(
        UpdateThreadNetworkResponseCallback callback,
        byte[] operationalDataset,
        Long breadcrumb,
        Long timeoutMs) {
      updateThreadNetwork(chipClusterPtr, callback, operationalDataset, breadcrumb, timeoutMs);
    }

    public void updateWiFiNetwork(
        UpdateWiFiNetworkResponseCallback callback,
        byte[] ssid,
        byte[] credentials,
        Long breadcrumb,
        Long timeoutMs) {
      updateWiFiNetwork(chipClusterPtr, callback, ssid, credentials, breadcrumb, timeoutMs);
    }

    private native void addThreadNetwork(
        long chipClusterPtr,
        AddThreadNetworkResponseCallback callback,
        byte[] operationalDataset,
        Long breadcrumb,
        Long timeoutMs);

    private native void addWiFiNetwork(
        long chipClusterPtr,
        AddWiFiNetworkResponseCallback callback,
        byte[] ssid,
        byte[] credentials,
        Long breadcrumb,
        Long timeoutMs);

    private native void disableNetwork(
        long chipClusterPtr,
        DisableNetworkResponseCallback callback,
        byte[] networkID,
        Long breadcrumb,
        Long timeoutMs);

    private native void enableNetwork(
        long chipClusterPtr,
        EnableNetworkResponseCallback callback,
        byte[] networkID,
        Long breadcrumb,
        Long timeoutMs);

    private native void removeNetwork(
        long chipClusterPtr,
        RemoveNetworkResponseCallback callback,
        byte[] networkID,
        Long breadcrumb,
        Long timeoutMs);

    private native void scanNetworks(
        long chipClusterPtr,
        ScanNetworksResponseCallback callback,
        byte[] ssid,
        Long breadcrumb,
        Long timeoutMs);

    private native void updateThreadNetwork(
        long chipClusterPtr,
        UpdateThreadNetworkResponseCallback callback,
        byte[] operationalDataset,
        Long breadcrumb,
        Long timeoutMs);

    private native void updateWiFiNetwork(
        long chipClusterPtr,
        UpdateWiFiNetworkResponseCallback callback,
        byte[] ssid,
        byte[] credentials,
        Long breadcrumb,
        Long timeoutMs);

    public interface AddThreadNetworkResponseCallback {
      void onSuccess(Integer errorCode, String debugText);

      void onError(Exception error);
    }

    public interface AddWiFiNetworkResponseCallback {
      void onSuccess(Integer errorCode, String debugText);

      void onError(Exception error);
    }

    public interface DisableNetworkResponseCallback {
      void onSuccess(Integer errorCode, String debugText);

      void onError(Exception error);
    }

    public interface EnableNetworkResponseCallback {
      void onSuccess(Integer errorCode, String debugText);

      void onError(Exception error);
    }

    public interface RemoveNetworkResponseCallback {
      void onSuccess(Integer errorCode, String debugText);

      void onError(Exception error);
    }

    public interface ScanNetworksResponseCallback {
      void onSuccess(Integer errorCode, String debugText
          // wifiScanResults: /* TYPE WARNING: array array defaults to */ uint8_t *
          // Conversion from this type to Java is not properly implemented yet
          // threadScanResults: /* TYPE WARNING: array array defaults to */ uint8_t *
          // Conversion from this type to Java is not properly implemented yet
          );

      void onError(Exception error);
    }

    public interface UpdateThreadNetworkResponseCallback {
      void onSuccess(Integer errorCode, String debugText);

      void onError(Exception error);
    }

    public interface UpdateWiFiNetworkResponseCallback {
      void onSuccess(Integer errorCode, String debugText);

      void onError(Exception error);
    }

    public void readFeatureMapAttribute(LongAttributeCallback callback) {
      readFeatureMapAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readFeatureMapAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class OtaSoftwareUpdateProviderCluster extends BaseChipCluster {
    public OtaSoftwareUpdateProviderCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("41");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void applyUpdateRequest(
        ApplyUpdateResponseCallback callback, byte[] updateToken, Long newVersion) {
      applyUpdateRequest(chipClusterPtr, callback, updateToken, newVersion);
    }

    public void notifyUpdateApplied(
        DefaultClusterCallback callback, byte[] updateToken, Long softwareVersion) {
      notifyUpdateApplied(chipClusterPtr, callback, updateToken, softwareVersion);
    }

    public void queryImage(
        QueryImageResponseCallback callback,
        Integer vendorId,
        Integer productId,
        Long softwareVersion,
        Integer protocolsSupported,
        Optional<Integer> hardwareVersion,
        Optional<String> location,
        Optional<Boolean> requestorCanConsent,
        Optional<byte[]> metadataForProvider) {
      queryImage(
          chipClusterPtr,
          callback,
          vendorId,
          productId,
          softwareVersion,
          protocolsSupported,
          hardwareVersion,
          location,
          requestorCanConsent,
          metadataForProvider);
    }

    private native void applyUpdateRequest(
        long chipClusterPtr,
        ApplyUpdateResponseCallback callback,
        byte[] updateToken,
        Long newVersion);

    private native void notifyUpdateApplied(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        byte[] updateToken,
        Long softwareVersion);

    private native void queryImage(
        long chipClusterPtr,
        QueryImageResponseCallback callback,
        Integer vendorId,
        Integer productId,
        Long softwareVersion,
        Integer protocolsSupported,
        Optional<Integer> hardwareVersion,
        Optional<String> location,
        Optional<Boolean> requestorCanConsent,
        Optional<byte[]> metadataForProvider);

    public interface ApplyUpdateResponseCallback {
      void onSuccess(Integer action, Long delayedActionTime);

      void onError(Exception error);
    }

    public interface QueryImageResponseCallback {
      void onSuccess(
          Integer status,
          Optional<Long> delayedActionTime,
          Optional<String> imageURI,
          Optional<Long> softwareVersion,
          Optional<String> softwareVersionString,
          Optional<byte[]> updateToken,
          Optional<Boolean> userConsentNeeded,
          Optional<byte[]> metadataForRequestor);

      void onError(Exception error);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class OtaSoftwareUpdateRequestorCluster extends BaseChipCluster {
    public OtaSoftwareUpdateRequestorCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("42");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void announceOtaProvider(
        DefaultClusterCallback callback,
        Long providerLocation,
        Integer vendorId,
        Integer announcementReason,
        Optional<byte[]> metadataForNode) {
      announceOtaProvider(
          chipClusterPtr,
          callback,
          providerLocation,
          vendorId,
          announcementReason,
          metadataForNode);
    }

    private native void announceOtaProvider(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Long providerLocation,
        Integer vendorId,
        Integer announcementReason,
        Optional<byte[]> metadataForNode);

    public void readDefaultOtaProviderAttribute(OctetStringAttributeCallback callback) {
      readDefaultOtaProviderAttribute(chipClusterPtr, callback);
    }

    public void writeDefaultOtaProviderAttribute(DefaultClusterCallback callback, byte[] value) {
      writeDefaultOtaProviderAttribute(chipClusterPtr, callback, value);
    }

    public void readUpdatePossibleAttribute(BooleanAttributeCallback callback) {
      readUpdatePossibleAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readDefaultOtaProviderAttribute(
        long chipClusterPtr, OctetStringAttributeCallback callback);

    private native void writeDefaultOtaProviderAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, byte[] value);

    private native void readUpdatePossibleAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class OccupancySensingCluster extends BaseChipCluster {
    public OccupancySensingCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1030");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void readOccupancyAttribute(IntegerAttributeCallback callback) {
      readOccupancyAttribute(chipClusterPtr, callback);
    }

    public void subscribeOccupancyAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeOccupancyAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportOccupancyAttribute(IntegerAttributeCallback callback) {
      reportOccupancyAttribute(chipClusterPtr, callback);
    }

    public void readOccupancySensorTypeAttribute(IntegerAttributeCallback callback) {
      readOccupancySensorTypeAttribute(chipClusterPtr, callback);
    }

    public void readOccupancySensorTypeBitmapAttribute(IntegerAttributeCallback callback) {
      readOccupancySensorTypeBitmapAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readOccupancyAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeOccupancyAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportOccupancyAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readOccupancySensorTypeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readOccupancySensorTypeBitmapAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class OnOffCluster extends BaseChipCluster {
    public OnOffCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("6");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void off(DefaultClusterCallback callback) {
      off(chipClusterPtr, callback);
    }

    public void offWithEffect(
        DefaultClusterCallback callback, Integer effectId, Integer effectVariant) {
      offWithEffect(chipClusterPtr, callback, effectId, effectVariant);
    }

    public void on(DefaultClusterCallback callback) {
      on(chipClusterPtr, callback);
    }

    public void onWithRecallGlobalScene(DefaultClusterCallback callback) {
      onWithRecallGlobalScene(chipClusterPtr, callback);
    }

    public void onWithTimedOff(
        DefaultClusterCallback callback,
        Integer onOffControl,
        Integer onTime,
        Integer offWaitTime) {
      onWithTimedOff(chipClusterPtr, callback, onOffControl, onTime, offWaitTime);
    }

    public void toggle(DefaultClusterCallback callback) {
      toggle(chipClusterPtr, callback);
    }

    private native void off(long chipClusterPtr, DefaultClusterCallback callback);

    private native void offWithEffect(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer effectId,
        Integer effectVariant);

    private native void on(long chipClusterPtr, DefaultClusterCallback callback);

    private native void onWithRecallGlobalScene(
        long chipClusterPtr, DefaultClusterCallback callback);

    private native void onWithTimedOff(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer onOffControl,
        Integer onTime,
        Integer offWaitTime);

    private native void toggle(long chipClusterPtr, DefaultClusterCallback callback);

    public void readOnOffAttribute(BooleanAttributeCallback callback) {
      readOnOffAttribute(chipClusterPtr, callback);
    }

    public void subscribeOnOffAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeOnOffAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportOnOffAttribute(BooleanAttributeCallback callback) {
      reportOnOffAttribute(chipClusterPtr, callback);
    }

    public void readGlobalSceneControlAttribute(BooleanAttributeCallback callback) {
      readGlobalSceneControlAttribute(chipClusterPtr, callback);
    }

    public void readOnTimeAttribute(IntegerAttributeCallback callback) {
      readOnTimeAttribute(chipClusterPtr, callback);
    }

    public void writeOnTimeAttribute(DefaultClusterCallback callback, int value) {
      writeOnTimeAttribute(chipClusterPtr, callback, value);
    }

    public void readOffWaitTimeAttribute(IntegerAttributeCallback callback) {
      readOffWaitTimeAttribute(chipClusterPtr, callback);
    }

    public void writeOffWaitTimeAttribute(DefaultClusterCallback callback, int value) {
      writeOffWaitTimeAttribute(chipClusterPtr, callback, value);
    }

    public void readStartUpOnOffAttribute(IntegerAttributeCallback callback) {
      readStartUpOnOffAttribute(chipClusterPtr, callback);
    }

    public void writeStartUpOnOffAttribute(DefaultClusterCallback callback, int value) {
      writeStartUpOnOffAttribute(chipClusterPtr, callback, value);
    }

    public void readFeatureMapAttribute(LongAttributeCallback callback) {
      readFeatureMapAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readOnOffAttribute(long chipClusterPtr, BooleanAttributeCallback callback);

    private native void subscribeOnOffAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportOnOffAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void readGlobalSceneControlAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void readOnTimeAttribute(long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeOnTimeAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readOffWaitTimeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeOffWaitTimeAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readStartUpOnOffAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeStartUpOnOffAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readFeatureMapAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class OnOffSwitchConfigurationCluster extends BaseChipCluster {
    public OnOffSwitchConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("7");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void readSwitchTypeAttribute(IntegerAttributeCallback callback) {
      readSwitchTypeAttribute(chipClusterPtr, callback);
    }

    public void readSwitchActionsAttribute(IntegerAttributeCallback callback) {
      readSwitchActionsAttribute(chipClusterPtr, callback);
    }

    public void writeSwitchActionsAttribute(DefaultClusterCallback callback, int value) {
      writeSwitchActionsAttribute(chipClusterPtr, callback, value);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readSwitchTypeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readSwitchActionsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeSwitchActionsAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class OperationalCredentialsCluster extends BaseChipCluster {
    public OperationalCredentialsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("62");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void addNOC(
        NOCResponseCallback callback,
        byte[] NOCValue,
        Optional<byte[]> ICACValue,
        byte[] IPKValue,
        Long caseAdminNode,
        Integer adminVendorId) {
      addNOC(chipClusterPtr, callback, NOCValue, ICACValue, IPKValue, caseAdminNode, adminVendorId);
    }

    public void addTrustedRootCertificate(DefaultClusterCallback callback, byte[] rootCertificate) {
      addTrustedRootCertificate(chipClusterPtr, callback, rootCertificate);
    }

    public void attestationRequest(AttestationResponseCallback callback, byte[] attestationNonce) {
      attestationRequest(chipClusterPtr, callback, attestationNonce);
    }

    public void certificateChainRequest(
        CertificateChainResponseCallback callback, Integer certificateType) {
      certificateChainRequest(chipClusterPtr, callback, certificateType);
    }

    public void opCSRRequest(OpCSRResponseCallback callback, byte[] CSRNonce) {
      opCSRRequest(chipClusterPtr, callback, CSRNonce);
    }

    public void removeFabric(NOCResponseCallback callback, Integer fabricIndex) {
      removeFabric(chipClusterPtr, callback, fabricIndex);
    }

    public void removeTrustedRootCertificate(
        DefaultClusterCallback callback, byte[] trustedRootIdentifier) {
      removeTrustedRootCertificate(chipClusterPtr, callback, trustedRootIdentifier);
    }

    public void updateFabricLabel(NOCResponseCallback callback, String label) {
      updateFabricLabel(chipClusterPtr, callback, label);
    }

    public void updateNOC(
        NOCResponseCallback callback, byte[] NOCValue, Optional<byte[]> ICACValue) {
      updateNOC(chipClusterPtr, callback, NOCValue, ICACValue);
    }

    private native void addNOC(
        long chipClusterPtr,
        NOCResponseCallback callback,
        byte[] NOCValue,
        Optional<byte[]> ICACValue,
        byte[] IPKValue,
        Long caseAdminNode,
        Integer adminVendorId);

    private native void addTrustedRootCertificate(
        long chipClusterPtr, DefaultClusterCallback callback, byte[] rootCertificate);

    private native void attestationRequest(
        long chipClusterPtr, AttestationResponseCallback callback, byte[] attestationNonce);

    private native void certificateChainRequest(
        long chipClusterPtr, CertificateChainResponseCallback callback, Integer certificateType);

    private native void opCSRRequest(
        long chipClusterPtr, OpCSRResponseCallback callback, byte[] CSRNonce);

    private native void removeFabric(
        long chipClusterPtr, NOCResponseCallback callback, Integer fabricIndex);

    private native void removeTrustedRootCertificate(
        long chipClusterPtr, DefaultClusterCallback callback, byte[] trustedRootIdentifier);

    private native void updateFabricLabel(
        long chipClusterPtr, NOCResponseCallback callback, String label);

    private native void updateNOC(
        long chipClusterPtr,
        NOCResponseCallback callback,
        byte[] NOCValue,
        Optional<byte[]> ICACValue);

    public interface AttestationResponseCallback {
      void onSuccess(byte[] AttestationElements, byte[] Signature);

      void onError(Exception error);
    }

    public interface CertificateChainResponseCallback {
      void onSuccess(byte[] Certificate);

      void onError(Exception error);
    }

    public interface NOCResponseCallback {
      void onSuccess(Integer StatusCode, Integer FabricIndex, String DebugText);

      void onError(Exception error);
    }

    public interface OpCSRResponseCallback {
      void onSuccess(byte[] NOCSRElements, byte[] AttestationSignature);

      void onError(Exception error);
    }

    public static class FabricsListAttribute {
      public Integer fabricIndex;
      public byte[] rootPublicKey;
      public Integer vendorId;
      public Long fabricId;
      public Long nodeId;
      public String label;

      public FabricsListAttribute(
          Integer fabricIndex,
          byte[] rootPublicKey,
          Integer vendorId,
          Long fabricId,
          Long nodeId,
          String label) {
        this.fabricIndex = fabricIndex;
        this.rootPublicKey = rootPublicKey;
        this.vendorId = vendorId;
        this.fabricId = fabricId;
        this.nodeId = nodeId;
        this.label = label;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("int fabricIndex: ");
        output.append(this.fabricIndex);
        output.append("\n");

        output.append("byte[] ");
        output.append(Arrays.toString(rootPublicKey));
        output.append("\n");

        output.append("int vendorId: ");
        output.append(this.vendorId);
        output.append("\n");

        output.append("long fabricId: ");
        output.append(this.fabricId);
        output.append("\n");

        output.append("long nodeId: ");
        output.append(this.nodeId);
        output.append("\n");

        output.append("String label: ");
        output.append(this.label);
        output.append("\n");

        return output.toString();
      }
    }

    public interface FabricsListAttributeCallback {
      void onSuccess(List<FabricsListAttribute> valueList);

      void onError(Exception ex);
    }

    public interface TrustedRootCertificatesAttributeCallback {
      void onSuccess(List<byte[]> valueList);

      void onError(Exception ex);
    }

    public void readFabricsListAttribute(FabricsListAttributeCallback callback) {
      readFabricsListAttribute(chipClusterPtr, callback);
    }

    public void readSupportedFabricsAttribute(IntegerAttributeCallback callback) {
      readSupportedFabricsAttribute(chipClusterPtr, callback);
    }

    public void readCommissionedFabricsAttribute(IntegerAttributeCallback callback) {
      readCommissionedFabricsAttribute(chipClusterPtr, callback);
    }

    public void readTrustedRootCertificatesAttribute(
        TrustedRootCertificatesAttributeCallback callback) {
      readTrustedRootCertificatesAttribute(chipClusterPtr, callback);
    }

    public void readCurrentFabricIndexAttribute(IntegerAttributeCallback callback) {
      readCurrentFabricIndexAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readFabricsListAttribute(
        long chipClusterPtr, FabricsListAttributeCallback callback);

    private native void readSupportedFabricsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readCommissionedFabricsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readTrustedRootCertificatesAttribute(
        long chipClusterPtr, TrustedRootCertificatesAttributeCallback callback);

    private native void readCurrentFabricIndexAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class PowerSourceCluster extends BaseChipCluster {
    public PowerSourceCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("47");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public interface ActiveBatteryFaultsAttributeCallback {
      void onSuccess(List<Integer> valueList);

      void onError(Exception ex);
    }

    public void readStatusAttribute(IntegerAttributeCallback callback) {
      readStatusAttribute(chipClusterPtr, callback);
    }

    public void readOrderAttribute(IntegerAttributeCallback callback) {
      readOrderAttribute(chipClusterPtr, callback);
    }

    public void readDescriptionAttribute(CharStringAttributeCallback callback) {
      readDescriptionAttribute(chipClusterPtr, callback);
    }

    public void readBatteryVoltageAttribute(LongAttributeCallback callback) {
      readBatteryVoltageAttribute(chipClusterPtr, callback);
    }

    public void readBatteryPercentRemainingAttribute(IntegerAttributeCallback callback) {
      readBatteryPercentRemainingAttribute(chipClusterPtr, callback);
    }

    public void readBatteryTimeRemainingAttribute(LongAttributeCallback callback) {
      readBatteryTimeRemainingAttribute(chipClusterPtr, callback);
    }

    public void readBatteryChargeLevelAttribute(IntegerAttributeCallback callback) {
      readBatteryChargeLevelAttribute(chipClusterPtr, callback);
    }

    public void readActiveBatteryFaultsAttribute(ActiveBatteryFaultsAttributeCallback callback) {
      readActiveBatteryFaultsAttribute(chipClusterPtr, callback);
    }

    public void readBatteryChargeStateAttribute(IntegerAttributeCallback callback) {
      readBatteryChargeStateAttribute(chipClusterPtr, callback);
    }

    public void readFeatureMapAttribute(LongAttributeCallback callback) {
      readFeatureMapAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readStatusAttribute(long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readOrderAttribute(long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readDescriptionAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readBatteryVoltageAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readBatteryPercentRemainingAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readBatteryTimeRemainingAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readBatteryChargeLevelAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readActiveBatteryFaultsAttribute(
        long chipClusterPtr, ActiveBatteryFaultsAttributeCallback callback);

    private native void readBatteryChargeStateAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readFeatureMapAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class PressureMeasurementCluster extends BaseChipCluster {
    public PressureMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1027");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void readMeasuredValueAttribute(IntegerAttributeCallback callback) {
      readMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void subscribeMeasuredValueAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportMeasuredValueAttribute(IntegerAttributeCallback callback) {
      reportMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void readMinMeasuredValueAttribute(IntegerAttributeCallback callback) {
      readMinMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void readMaxMeasuredValueAttribute(IntegerAttributeCallback callback) {
      readMaxMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeMeasuredValueAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMinMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMaxMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class PumpConfigurationAndControlCluster extends BaseChipCluster {
    public PumpConfigurationAndControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("512");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void readMaxPressureAttribute(IntegerAttributeCallback callback) {
      readMaxPressureAttribute(chipClusterPtr, callback);
    }

    public void readMaxSpeedAttribute(IntegerAttributeCallback callback) {
      readMaxSpeedAttribute(chipClusterPtr, callback);
    }

    public void readMaxFlowAttribute(IntegerAttributeCallback callback) {
      readMaxFlowAttribute(chipClusterPtr, callback);
    }

    public void readMinConstPressureAttribute(IntegerAttributeCallback callback) {
      readMinConstPressureAttribute(chipClusterPtr, callback);
    }

    public void readMaxConstPressureAttribute(IntegerAttributeCallback callback) {
      readMaxConstPressureAttribute(chipClusterPtr, callback);
    }

    public void readMinCompPressureAttribute(IntegerAttributeCallback callback) {
      readMinCompPressureAttribute(chipClusterPtr, callback);
    }

    public void readMaxCompPressureAttribute(IntegerAttributeCallback callback) {
      readMaxCompPressureAttribute(chipClusterPtr, callback);
    }

    public void readMinConstSpeedAttribute(IntegerAttributeCallback callback) {
      readMinConstSpeedAttribute(chipClusterPtr, callback);
    }

    public void readMaxConstSpeedAttribute(IntegerAttributeCallback callback) {
      readMaxConstSpeedAttribute(chipClusterPtr, callback);
    }

    public void readMinConstFlowAttribute(IntegerAttributeCallback callback) {
      readMinConstFlowAttribute(chipClusterPtr, callback);
    }

    public void readMaxConstFlowAttribute(IntegerAttributeCallback callback) {
      readMaxConstFlowAttribute(chipClusterPtr, callback);
    }

    public void readMinConstTempAttribute(IntegerAttributeCallback callback) {
      readMinConstTempAttribute(chipClusterPtr, callback);
    }

    public void readMaxConstTempAttribute(IntegerAttributeCallback callback) {
      readMaxConstTempAttribute(chipClusterPtr, callback);
    }

    public void readPumpStatusAttribute(IntegerAttributeCallback callback) {
      readPumpStatusAttribute(chipClusterPtr, callback);
    }

    public void subscribePumpStatusAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribePumpStatusAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportPumpStatusAttribute(IntegerAttributeCallback callback) {
      reportPumpStatusAttribute(chipClusterPtr, callback);
    }

    public void readEffectiveOperationModeAttribute(IntegerAttributeCallback callback) {
      readEffectiveOperationModeAttribute(chipClusterPtr, callback);
    }

    public void readEffectiveControlModeAttribute(IntegerAttributeCallback callback) {
      readEffectiveControlModeAttribute(chipClusterPtr, callback);
    }

    public void readCapacityAttribute(IntegerAttributeCallback callback) {
      readCapacityAttribute(chipClusterPtr, callback);
    }

    public void subscribeCapacityAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeCapacityAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportCapacityAttribute(IntegerAttributeCallback callback) {
      reportCapacityAttribute(chipClusterPtr, callback);
    }

    public void readSpeedAttribute(IntegerAttributeCallback callback) {
      readSpeedAttribute(chipClusterPtr, callback);
    }

    public void readLifetimeEnergyConsumedAttribute(LongAttributeCallback callback) {
      readLifetimeEnergyConsumedAttribute(chipClusterPtr, callback);
    }

    public void readOperationModeAttribute(IntegerAttributeCallback callback) {
      readOperationModeAttribute(chipClusterPtr, callback);
    }

    public void writeOperationModeAttribute(DefaultClusterCallback callback, int value) {
      writeOperationModeAttribute(chipClusterPtr, callback, value);
    }

    public void readControlModeAttribute(IntegerAttributeCallback callback) {
      readControlModeAttribute(chipClusterPtr, callback);
    }

    public void writeControlModeAttribute(DefaultClusterCallback callback, int value) {
      writeControlModeAttribute(chipClusterPtr, callback, value);
    }

    public void readAlarmMaskAttribute(IntegerAttributeCallback callback) {
      readAlarmMaskAttribute(chipClusterPtr, callback);
    }

    public void readFeatureMapAttribute(LongAttributeCallback callback) {
      readFeatureMapAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readMaxPressureAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMaxSpeedAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMaxFlowAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMinConstPressureAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMaxConstPressureAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMinCompPressureAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMaxCompPressureAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMinConstSpeedAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMaxConstSpeedAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMinConstFlowAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMaxConstFlowAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMinConstTempAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMaxConstTempAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPumpStatusAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribePumpStatusAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportPumpStatusAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readEffectiveOperationModeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readEffectiveControlModeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readCapacityAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeCapacityAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportCapacityAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readSpeedAttribute(long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readLifetimeEnergyConsumedAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readOperationModeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeOperationModeAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readControlModeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeControlModeAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readAlarmMaskAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readFeatureMapAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class RelativeHumidityMeasurementCluster extends BaseChipCluster {
    public RelativeHumidityMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1029");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void readMeasuredValueAttribute(IntegerAttributeCallback callback) {
      readMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void subscribeMeasuredValueAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportMeasuredValueAttribute(IntegerAttributeCallback callback) {
      reportMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void readMinMeasuredValueAttribute(IntegerAttributeCallback callback) {
      readMinMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void readMaxMeasuredValueAttribute(IntegerAttributeCallback callback) {
      readMaxMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void readToleranceAttribute(IntegerAttributeCallback callback) {
      readToleranceAttribute(chipClusterPtr, callback);
    }

    public void subscribeToleranceAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeToleranceAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportToleranceAttribute(IntegerAttributeCallback callback) {
      reportToleranceAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeMeasuredValueAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMinMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMaxMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readToleranceAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeToleranceAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportToleranceAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class ScenesCluster extends BaseChipCluster {
    public ScenesCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("5");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void addScene(
        AddSceneResponseCallback callback,
        Integer groupId,
        Integer sceneId,
        Integer transitionTime,
        String sceneName,
        Long clusterId,
        Integer length,
        Integer value) {
      addScene(
          chipClusterPtr,
          callback,
          groupId,
          sceneId,
          transitionTime,
          sceneName,
          clusterId,
          length,
          value);
    }

    public void getSceneMembership(GetSceneMembershipResponseCallback callback, Integer groupId) {
      getSceneMembership(chipClusterPtr, callback, groupId);
    }

    public void recallScene(
        DefaultClusterCallback callback, Integer groupId, Integer sceneId, Integer transitionTime) {
      recallScene(chipClusterPtr, callback, groupId, sceneId, transitionTime);
    }

    public void removeAllScenes(RemoveAllScenesResponseCallback callback, Integer groupId) {
      removeAllScenes(chipClusterPtr, callback, groupId);
    }

    public void removeScene(
        RemoveSceneResponseCallback callback, Integer groupId, Integer sceneId) {
      removeScene(chipClusterPtr, callback, groupId, sceneId);
    }

    public void storeScene(StoreSceneResponseCallback callback, Integer groupId, Integer sceneId) {
      storeScene(chipClusterPtr, callback, groupId, sceneId);
    }

    public void viewScene(ViewSceneResponseCallback callback, Integer groupId, Integer sceneId) {
      viewScene(chipClusterPtr, callback, groupId, sceneId);
    }

    private native void addScene(
        long chipClusterPtr,
        AddSceneResponseCallback callback,
        Integer groupId,
        Integer sceneId,
        Integer transitionTime,
        String sceneName,
        Long clusterId,
        Integer length,
        Integer value);

    private native void getSceneMembership(
        long chipClusterPtr, GetSceneMembershipResponseCallback callback, Integer groupId);

    private native void recallScene(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer groupId,
        Integer sceneId,
        Integer transitionTime);

    private native void removeAllScenes(
        long chipClusterPtr, RemoveAllScenesResponseCallback callback, Integer groupId);

    private native void removeScene(
        long chipClusterPtr,
        RemoveSceneResponseCallback callback,
        Integer groupId,
        Integer sceneId);

    private native void storeScene(
        long chipClusterPtr, StoreSceneResponseCallback callback, Integer groupId, Integer sceneId);

    private native void viewScene(
        long chipClusterPtr, ViewSceneResponseCallback callback, Integer groupId, Integer sceneId);

    public interface AddSceneResponseCallback {
      void onSuccess(Integer status, Integer groupId, Integer sceneId);

      void onError(Exception error);
    }

    public interface GetSceneMembershipResponseCallback {
      void onSuccess(Integer status, Integer capacity, Integer groupId, Integer sceneCount
          // sceneList: /* TYPE WARNING: array array defaults to */ uint8_t *
          // Conversion from this type to Java is not properly implemented yet
          );

      void onError(Exception error);
    }

    public interface RemoveAllScenesResponseCallback {
      void onSuccess(Integer status, Integer groupId);

      void onError(Exception error);
    }

    public interface RemoveSceneResponseCallback {
      void onSuccess(Integer status, Integer groupId, Integer sceneId);

      void onError(Exception error);
    }

    public interface StoreSceneResponseCallback {
      void onSuccess(Integer status, Integer groupId, Integer sceneId);

      void onError(Exception error);
    }

    public interface ViewSceneResponseCallback {
      void onSuccess(
          Integer status, Integer groupId, Integer sceneId, Integer transitionTime, String sceneName
          // extensionFieldSets: /* TYPE WARNING: array array defaults to */ uint8_t *
          // Conversion from this type to Java is not properly implemented yet
          );

      void onError(Exception error);
    }

    public void readSceneCountAttribute(IntegerAttributeCallback callback) {
      readSceneCountAttribute(chipClusterPtr, callback);
    }

    public void readCurrentSceneAttribute(IntegerAttributeCallback callback) {
      readCurrentSceneAttribute(chipClusterPtr, callback);
    }

    public void readCurrentGroupAttribute(IntegerAttributeCallback callback) {
      readCurrentGroupAttribute(chipClusterPtr, callback);
    }

    public void readSceneValidAttribute(BooleanAttributeCallback callback) {
      readSceneValidAttribute(chipClusterPtr, callback);
    }

    public void readNameSupportAttribute(IntegerAttributeCallback callback) {
      readNameSupportAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readSceneCountAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readCurrentSceneAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readCurrentGroupAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readSceneValidAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void readNameSupportAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class SoftwareDiagnosticsCluster extends BaseChipCluster {
    public SoftwareDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("52");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void resetWatermarks(DefaultClusterCallback callback) {
      resetWatermarks(chipClusterPtr, callback);
    }

    private native void resetWatermarks(long chipClusterPtr, DefaultClusterCallback callback);

    public static class ThreadMetricsAttribute {
      public Long id;
      public String name;
      public Long stackFreeCurrent;
      public Long stackFreeMinimum;
      public Long stackSize;

      public ThreadMetricsAttribute(
          Long id, String name, Long stackFreeCurrent, Long stackFreeMinimum, Long stackSize) {
        this.id = id;
        this.name = name;
        this.stackFreeCurrent = stackFreeCurrent;
        this.stackFreeMinimum = stackFreeMinimum;
        this.stackSize = stackSize;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("long id: ");
        output.append(this.id);
        output.append("\n");

        output.append("String name: ");
        output.append(this.name);
        output.append("\n");

        output.append("long stackFreeCurrent: ");
        output.append(this.stackFreeCurrent);
        output.append("\n");

        output.append("long stackFreeMinimum: ");
        output.append(this.stackFreeMinimum);
        output.append("\n");

        output.append("long stackSize: ");
        output.append(this.stackSize);
        output.append("\n");

        return output.toString();
      }
    }

    public interface ThreadMetricsAttributeCallback {
      void onSuccess(List<ThreadMetricsAttribute> valueList);

      void onError(Exception ex);
    }

    public void readThreadMetricsAttribute(ThreadMetricsAttributeCallback callback) {
      readThreadMetricsAttribute(chipClusterPtr, callback);
    }

    public void readCurrentHeapFreeAttribute(LongAttributeCallback callback) {
      readCurrentHeapFreeAttribute(chipClusterPtr, callback);
    }

    public void readCurrentHeapUsedAttribute(LongAttributeCallback callback) {
      readCurrentHeapUsedAttribute(chipClusterPtr, callback);
    }

    public void readCurrentHeapHighWatermarkAttribute(LongAttributeCallback callback) {
      readCurrentHeapHighWatermarkAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readThreadMetricsAttribute(
        long chipClusterPtr, ThreadMetricsAttributeCallback callback);

    private native void readCurrentHeapFreeAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readCurrentHeapUsedAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readCurrentHeapHighWatermarkAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class SwitchCluster extends BaseChipCluster {
    public SwitchCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("59");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void readNumberOfPositionsAttribute(IntegerAttributeCallback callback) {
      readNumberOfPositionsAttribute(chipClusterPtr, callback);
    }

    public void readCurrentPositionAttribute(IntegerAttributeCallback callback) {
      readCurrentPositionAttribute(chipClusterPtr, callback);
    }

    public void subscribeCurrentPositionAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeCurrentPositionAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportCurrentPositionAttribute(IntegerAttributeCallback callback) {
      reportCurrentPositionAttribute(chipClusterPtr, callback);
    }

    public void readMultiPressMaxAttribute(IntegerAttributeCallback callback) {
      readMultiPressMaxAttribute(chipClusterPtr, callback);
    }

    public void readFeatureMapAttribute(LongAttributeCallback callback) {
      readFeatureMapAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readNumberOfPositionsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readCurrentPositionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeCurrentPositionAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportCurrentPositionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMultiPressMaxAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readFeatureMapAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class TvChannelCluster extends BaseChipCluster {
    public TvChannelCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1284");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void changeChannel(ChangeChannelResponseCallback callback, String match) {
      changeChannel(chipClusterPtr, callback, match);
    }

    public void changeChannelByNumber(
        DefaultClusterCallback callback, Integer majorNumber, Integer minorNumber) {
      changeChannelByNumber(chipClusterPtr, callback, majorNumber, minorNumber);
    }

    public void skipChannel(DefaultClusterCallback callback, Integer count) {
      skipChannel(chipClusterPtr, callback, count);
    }

    private native void changeChannel(
        long chipClusterPtr, ChangeChannelResponseCallback callback, String match);

    private native void changeChannelByNumber(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer majorNumber,
        Integer minorNumber);

    private native void skipChannel(
        long chipClusterPtr, DefaultClusterCallback callback, Integer count);

    public interface ChangeChannelResponseCallback {
      void onSuccess( // ChannelMatch: /* TYPE WARNING: array array defaults to */ uint8_t *
          // Conversion from this type to Java is not properly implemented yet
          Integer ErrorType);

      void onError(Exception error);
    }

    public static class TvChannelListAttribute {
      public Integer majorNumber;
      public Integer minorNumber;
      public String name;
      public String callSign;
      public String affiliateCallSign;

      public TvChannelListAttribute(
          Integer majorNumber,
          Integer minorNumber,
          String name,
          String callSign,
          String affiliateCallSign) {
        this.majorNumber = majorNumber;
        this.minorNumber = minorNumber;
        this.name = name;
        this.callSign = callSign;
        this.affiliateCallSign = affiliateCallSign;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("int majorNumber: ");
        output.append(this.majorNumber);
        output.append("\n");

        output.append("int minorNumber: ");
        output.append(this.minorNumber);
        output.append("\n");

        output.append("String name: ");
        output.append(this.name);
        output.append("\n");

        output.append("String callSign: ");
        output.append(this.callSign);
        output.append("\n");

        output.append("String affiliateCallSign: ");
        output.append(this.affiliateCallSign);
        output.append("\n");

        return output.toString();
      }
    }

    public interface TvChannelListAttributeCallback {
      void onSuccess(List<TvChannelListAttribute> valueList);

      void onError(Exception ex);
    }

    public void readTvChannelListAttribute(TvChannelListAttributeCallback callback) {
      readTvChannelListAttribute(chipClusterPtr, callback);
    }

    public void readTvChannelLineupAttribute(OctetStringAttributeCallback callback) {
      readTvChannelLineupAttribute(chipClusterPtr, callback);
    }

    public void readCurrentTvChannelAttribute(OctetStringAttributeCallback callback) {
      readCurrentTvChannelAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readTvChannelListAttribute(
        long chipClusterPtr, TvChannelListAttributeCallback callback);

    private native void readTvChannelLineupAttribute(
        long chipClusterPtr, OctetStringAttributeCallback callback);

    private native void readCurrentTvChannelAttribute(
        long chipClusterPtr, OctetStringAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class TargetNavigatorCluster extends BaseChipCluster {
    public TargetNavigatorCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1285");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void navigateTarget(
        NavigateTargetResponseCallback callback, Integer target, String data) {
      navigateTarget(chipClusterPtr, callback, target, data);
    }

    private native void navigateTarget(
        long chipClusterPtr, NavigateTargetResponseCallback callback, Integer target, String data);

    public interface NavigateTargetResponseCallback {
      void onSuccess(Integer status, String data);

      void onError(Exception error);
    }

    public static class TargetNavigatorListAttribute {
      public Integer identifier;
      public String name;

      public TargetNavigatorListAttribute(Integer identifier, String name) {
        this.identifier = identifier;
        this.name = name;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("int identifier: ");
        output.append(this.identifier);
        output.append("\n");

        output.append("String name: ");
        output.append(this.name);
        output.append("\n");

        return output.toString();
      }
    }

    public interface TargetNavigatorListAttributeCallback {
      void onSuccess(List<TargetNavigatorListAttribute> valueList);

      void onError(Exception ex);
    }

    public void readTargetNavigatorListAttribute(TargetNavigatorListAttributeCallback callback) {
      readTargetNavigatorListAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readTargetNavigatorListAttribute(
        long chipClusterPtr, TargetNavigatorListAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class TemperatureMeasurementCluster extends BaseChipCluster {
    public TemperatureMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1026");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void readMeasuredValueAttribute(IntegerAttributeCallback callback) {
      readMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void subscribeMeasuredValueAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeMeasuredValueAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportMeasuredValueAttribute(IntegerAttributeCallback callback) {
      reportMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void readMinMeasuredValueAttribute(IntegerAttributeCallback callback) {
      readMinMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void readMaxMeasuredValueAttribute(IntegerAttributeCallback callback) {
      readMaxMeasuredValueAttribute(chipClusterPtr, callback);
    }

    public void readToleranceAttribute(IntegerAttributeCallback callback) {
      readToleranceAttribute(chipClusterPtr, callback);
    }

    public void subscribeToleranceAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeToleranceAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportToleranceAttribute(IntegerAttributeCallback callback) {
      reportToleranceAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeMeasuredValueAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMinMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readMaxMeasuredValueAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readToleranceAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeToleranceAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportToleranceAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class TestClusterCluster extends BaseChipCluster {
    public TestClusterCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1295");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void test(DefaultClusterCallback callback) {
      test(chipClusterPtr, callback);
    }

    public void testAddArguments(
        TestAddArgumentsResponseCallback callback, Integer arg1, Integer arg2) {
      testAddArguments(chipClusterPtr, callback, arg1, arg2);
    }

    public void testEnumsRequest(TestEnumsResponseCallback callback, Integer arg1, Integer arg2) {
      testEnumsRequest(chipClusterPtr, callback, arg1, arg2);
    }

    public void testListInt8UArgumentRequest(BooleanResponseCallback callback, Integer arg1) {
      testListInt8UArgumentRequest(chipClusterPtr, callback, arg1);
    }

    public void testListInt8UReverseRequest(
        TestListInt8UReverseResponseCallback callback, Integer arg1) {
      testListInt8UReverseRequest(chipClusterPtr, callback, arg1);
    }

    public void testListStructArgumentRequest(
        BooleanResponseCallback callback,
        Integer a,
        Boolean b,
        Integer c,
        byte[] d,
        String e,
        Integer f) {
      testListStructArgumentRequest(chipClusterPtr, callback, a, b, c, d, e, f);
    }

    public void testNotHandled(DefaultClusterCallback callback) {
      testNotHandled(chipClusterPtr, callback);
    }

    public void testNullableOptionalRequest(
        TestNullableOptionalResponseCallback callback, Optional<Integer> arg1) {
      testNullableOptionalRequest(chipClusterPtr, callback, arg1);
    }

    public void testSpecific(TestSpecificResponseCallback callback) {
      testSpecific(chipClusterPtr, callback);
    }

    public void testStructArgumentRequest(
        BooleanResponseCallback callback,
        Integer a,
        Boolean b,
        Integer c,
        byte[] d,
        String e,
        Integer f) {
      testStructArgumentRequest(chipClusterPtr, callback, a, b, c, d, e, f);
    }

    public void testUnknownCommand(DefaultClusterCallback callback) {
      testUnknownCommand(chipClusterPtr, callback);
    }

    private native void test(long chipClusterPtr, DefaultClusterCallback callback);

    private native void testAddArguments(
        long chipClusterPtr, TestAddArgumentsResponseCallback callback, Integer arg1, Integer arg2);

    private native void testEnumsRequest(
        long chipClusterPtr, TestEnumsResponseCallback callback, Integer arg1, Integer arg2);

    private native void testListInt8UArgumentRequest(
        long chipClusterPtr, BooleanResponseCallback callback, Integer arg1);

    private native void testListInt8UReverseRequest(
        long chipClusterPtr, TestListInt8UReverseResponseCallback callback, Integer arg1);

    private native void testListStructArgumentRequest(
        long chipClusterPtr,
        BooleanResponseCallback callback,
        Integer a,
        Boolean b,
        Integer c,
        byte[] d,
        String e,
        Integer f);

    private native void testNotHandled(long chipClusterPtr, DefaultClusterCallback callback);

    private native void testNullableOptionalRequest(
        long chipClusterPtr, TestNullableOptionalResponseCallback callback, Optional<Integer> arg1);

    private native void testSpecific(long chipClusterPtr, TestSpecificResponseCallback callback);

    private native void testStructArgumentRequest(
        long chipClusterPtr,
        BooleanResponseCallback callback,
        Integer a,
        Boolean b,
        Integer c,
        byte[] d,
        String e,
        Integer f);

    private native void testUnknownCommand(long chipClusterPtr, DefaultClusterCallback callback);

    public interface BooleanResponseCallback {
      void onSuccess(Boolean value);

      void onError(Exception error);
    }

    public interface TestAddArgumentsResponseCallback {
      void onSuccess(Integer returnValue);

      void onError(Exception error);
    }

    public interface TestEnumsResponseCallback {
      void onSuccess(Integer arg1, Integer arg2);

      void onError(Exception error);
    }

    public interface TestListInt8UReverseResponseCallback {
      void onSuccess( // arg1: /* TYPE WARNING: array array defaults to */ uint8_t *
          // Conversion from this type to Java is not properly implemented yet
          );

      void onError(Exception error);
    }

    public interface TestNullableOptionalResponseCallback {
      void onSuccess(
          Boolean wasPresent,
          Optional<Boolean> wasNull,
          Optional<Integer> value,
          Optional<Integer> originalValue);

      void onError(Exception error);
    }

    public interface TestSpecificResponseCallback {
      void onSuccess(Integer returnValue);

      void onError(Exception error);
    }

    public interface ListInt8uAttributeCallback {
      void onSuccess(List<Integer> valueList);

      void onError(Exception ex);
    }

    public interface ListOctetStringAttributeCallback {
      void onSuccess(List<byte[]> valueList);

      void onError(Exception ex);
    }

    public static class ListStructOctetStringAttribute {
      public Long fabricIndex;
      public byte[] operationalCert;

      public ListStructOctetStringAttribute(Long fabricIndex, byte[] operationalCert) {
        this.fabricIndex = fabricIndex;
        this.operationalCert = operationalCert;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("long fabricIndex: ");
        output.append(this.fabricIndex);
        output.append("\n");

        output.append("byte[] ");
        output.append(Arrays.toString(operationalCert));
        output.append("\n");

        return output.toString();
      }
    }

    public interface ListStructOctetStringAttributeCallback {
      void onSuccess(List<ListStructOctetStringAttribute> valueList);

      void onError(Exception ex);
    }

    public static class ListNullablesAndOptionalsStructAttribute {
      @Nullable public Integer nullableInt;
      public Optional<Integer> optionalInt;
      @Nullable public Optional<Integer> nullableOptionalInt;
      @Nullable public String nullableString;
      public Optional<String> optionalString;
      @Nullable public Optional<String> nullableOptionalString;

      public ListNullablesAndOptionalsStructAttribute(
          @Nullable Integer nullableInt,
          Optional<Integer> optionalInt,
          @Nullable Optional<Integer> nullableOptionalInt,
          @Nullable String nullableString,
          Optional<String> optionalString,
          @Nullable Optional<String> nullableOptionalString) {
        this.nullableInt = nullableInt;
        this.optionalInt = optionalInt;
        this.nullableOptionalInt = nullableOptionalInt;
        this.nullableString = nullableString;
        this.optionalString = optionalString;
        this.nullableOptionalString = nullableOptionalString;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");

        return output.toString();
      }
    }

    public interface ListNullablesAndOptionalsStructAttributeCallback {
      void onSuccess(List<ListNullablesAndOptionalsStructAttribute> valueList);

      void onError(Exception ex);
    }

    public void readBooleanAttribute(BooleanAttributeCallback callback) {
      readBooleanAttribute(chipClusterPtr, callback);
    }

    public void writeBooleanAttribute(DefaultClusterCallback callback, boolean value) {
      writeBooleanAttribute(chipClusterPtr, callback, value);
    }

    public void readBitmap8Attribute(IntegerAttributeCallback callback) {
      readBitmap8Attribute(chipClusterPtr, callback);
    }

    public void writeBitmap8Attribute(DefaultClusterCallback callback, int value) {
      writeBitmap8Attribute(chipClusterPtr, callback, value);
    }

    public void readBitmap16Attribute(IntegerAttributeCallback callback) {
      readBitmap16Attribute(chipClusterPtr, callback);
    }

    public void writeBitmap16Attribute(DefaultClusterCallback callback, int value) {
      writeBitmap16Attribute(chipClusterPtr, callback, value);
    }

    public void readBitmap32Attribute(LongAttributeCallback callback) {
      readBitmap32Attribute(chipClusterPtr, callback);
    }

    public void writeBitmap32Attribute(DefaultClusterCallback callback, long value) {
      writeBitmap32Attribute(chipClusterPtr, callback, value);
    }

    public void readBitmap64Attribute(LongAttributeCallback callback) {
      readBitmap64Attribute(chipClusterPtr, callback);
    }

    public void writeBitmap64Attribute(DefaultClusterCallback callback, long value) {
      writeBitmap64Attribute(chipClusterPtr, callback, value);
    }

    public void readInt8uAttribute(IntegerAttributeCallback callback) {
      readInt8uAttribute(chipClusterPtr, callback);
    }

    public void writeInt8uAttribute(DefaultClusterCallback callback, int value) {
      writeInt8uAttribute(chipClusterPtr, callback, value);
    }

    public void readInt16uAttribute(IntegerAttributeCallback callback) {
      readInt16uAttribute(chipClusterPtr, callback);
    }

    public void writeInt16uAttribute(DefaultClusterCallback callback, int value) {
      writeInt16uAttribute(chipClusterPtr, callback, value);
    }

    public void readInt32uAttribute(LongAttributeCallback callback) {
      readInt32uAttribute(chipClusterPtr, callback);
    }

    public void writeInt32uAttribute(DefaultClusterCallback callback, long value) {
      writeInt32uAttribute(chipClusterPtr, callback, value);
    }

    public void readInt64uAttribute(LongAttributeCallback callback) {
      readInt64uAttribute(chipClusterPtr, callback);
    }

    public void writeInt64uAttribute(DefaultClusterCallback callback, long value) {
      writeInt64uAttribute(chipClusterPtr, callback, value);
    }

    public void readInt8sAttribute(IntegerAttributeCallback callback) {
      readInt8sAttribute(chipClusterPtr, callback);
    }

    public void writeInt8sAttribute(DefaultClusterCallback callback, int value) {
      writeInt8sAttribute(chipClusterPtr, callback, value);
    }

    public void readInt16sAttribute(IntegerAttributeCallback callback) {
      readInt16sAttribute(chipClusterPtr, callback);
    }

    public void writeInt16sAttribute(DefaultClusterCallback callback, int value) {
      writeInt16sAttribute(chipClusterPtr, callback, value);
    }

    public void readInt32sAttribute(LongAttributeCallback callback) {
      readInt32sAttribute(chipClusterPtr, callback);
    }

    public void writeInt32sAttribute(DefaultClusterCallback callback, long value) {
      writeInt32sAttribute(chipClusterPtr, callback, value);
    }

    public void readInt64sAttribute(LongAttributeCallback callback) {
      readInt64sAttribute(chipClusterPtr, callback);
    }

    public void writeInt64sAttribute(DefaultClusterCallback callback, long value) {
      writeInt64sAttribute(chipClusterPtr, callback, value);
    }

    public void readEnum8Attribute(IntegerAttributeCallback callback) {
      readEnum8Attribute(chipClusterPtr, callback);
    }

    public void writeEnum8Attribute(DefaultClusterCallback callback, int value) {
      writeEnum8Attribute(chipClusterPtr, callback, value);
    }

    public void readEnum16Attribute(IntegerAttributeCallback callback) {
      readEnum16Attribute(chipClusterPtr, callback);
    }

    public void writeEnum16Attribute(DefaultClusterCallback callback, int value) {
      writeEnum16Attribute(chipClusterPtr, callback, value);
    }

    public void readOctetStringAttribute(OctetStringAttributeCallback callback) {
      readOctetStringAttribute(chipClusterPtr, callback);
    }

    public void writeOctetStringAttribute(DefaultClusterCallback callback, byte[] value) {
      writeOctetStringAttribute(chipClusterPtr, callback, value);
    }

    public void readListInt8uAttribute(ListInt8uAttributeCallback callback) {
      readListInt8uAttribute(chipClusterPtr, callback);
    }

    public void readListOctetStringAttribute(ListOctetStringAttributeCallback callback) {
      readListOctetStringAttribute(chipClusterPtr, callback);
    }

    public void readListStructOctetStringAttribute(
        ListStructOctetStringAttributeCallback callback) {
      readListStructOctetStringAttribute(chipClusterPtr, callback);
    }

    public void readLongOctetStringAttribute(OctetStringAttributeCallback callback) {
      readLongOctetStringAttribute(chipClusterPtr, callback);
    }

    public void writeLongOctetStringAttribute(DefaultClusterCallback callback, byte[] value) {
      writeLongOctetStringAttribute(chipClusterPtr, callback, value);
    }

    public void readCharStringAttribute(CharStringAttributeCallback callback) {
      readCharStringAttribute(chipClusterPtr, callback);
    }

    public void writeCharStringAttribute(DefaultClusterCallback callback, String value) {
      writeCharStringAttribute(chipClusterPtr, callback, value);
    }

    public void readLongCharStringAttribute(CharStringAttributeCallback callback) {
      readLongCharStringAttribute(chipClusterPtr, callback);
    }

    public void writeLongCharStringAttribute(DefaultClusterCallback callback, String value) {
      writeLongCharStringAttribute(chipClusterPtr, callback, value);
    }

    public void readEpochUsAttribute(LongAttributeCallback callback) {
      readEpochUsAttribute(chipClusterPtr, callback);
    }

    public void writeEpochUsAttribute(DefaultClusterCallback callback, long value) {
      writeEpochUsAttribute(chipClusterPtr, callback, value);
    }

    public void readEpochSAttribute(LongAttributeCallback callback) {
      readEpochSAttribute(chipClusterPtr, callback);
    }

    public void writeEpochSAttribute(DefaultClusterCallback callback, long value) {
      writeEpochSAttribute(chipClusterPtr, callback, value);
    }

    public void readVendorIdAttribute(IntegerAttributeCallback callback) {
      readVendorIdAttribute(chipClusterPtr, callback);
    }

    public void writeVendorIdAttribute(DefaultClusterCallback callback, int value) {
      writeVendorIdAttribute(chipClusterPtr, callback, value);
    }

    public void readListNullablesAndOptionalsStructAttribute(
        ListNullablesAndOptionalsStructAttributeCallback callback) {
      readListNullablesAndOptionalsStructAttribute(chipClusterPtr, callback);
    }

    public void readUnsupportedAttribute(BooleanAttributeCallback callback) {
      readUnsupportedAttribute(chipClusterPtr, callback);
    }

    public void writeUnsupportedAttribute(DefaultClusterCallback callback, boolean value) {
      writeUnsupportedAttribute(chipClusterPtr, callback, value);
    }

    public void readNullableBooleanAttribute(BooleanAttributeCallback callback) {
      readNullableBooleanAttribute(chipClusterPtr, callback);
    }

    public void writeNullableBooleanAttribute(DefaultClusterCallback callback, boolean value) {
      writeNullableBooleanAttribute(chipClusterPtr, callback, value);
    }

    public void readNullableBitmap8Attribute(IntegerAttributeCallback callback) {
      readNullableBitmap8Attribute(chipClusterPtr, callback);
    }

    public void writeNullableBitmap8Attribute(DefaultClusterCallback callback, int value) {
      writeNullableBitmap8Attribute(chipClusterPtr, callback, value);
    }

    public void readNullableBitmap16Attribute(IntegerAttributeCallback callback) {
      readNullableBitmap16Attribute(chipClusterPtr, callback);
    }

    public void writeNullableBitmap16Attribute(DefaultClusterCallback callback, int value) {
      writeNullableBitmap16Attribute(chipClusterPtr, callback, value);
    }

    public void readNullableBitmap32Attribute(LongAttributeCallback callback) {
      readNullableBitmap32Attribute(chipClusterPtr, callback);
    }

    public void writeNullableBitmap32Attribute(DefaultClusterCallback callback, long value) {
      writeNullableBitmap32Attribute(chipClusterPtr, callback, value);
    }

    public void readNullableBitmap64Attribute(LongAttributeCallback callback) {
      readNullableBitmap64Attribute(chipClusterPtr, callback);
    }

    public void writeNullableBitmap64Attribute(DefaultClusterCallback callback, long value) {
      writeNullableBitmap64Attribute(chipClusterPtr, callback, value);
    }

    public void readNullableInt8uAttribute(IntegerAttributeCallback callback) {
      readNullableInt8uAttribute(chipClusterPtr, callback);
    }

    public void writeNullableInt8uAttribute(DefaultClusterCallback callback, int value) {
      writeNullableInt8uAttribute(chipClusterPtr, callback, value);
    }

    public void readNullableInt16uAttribute(IntegerAttributeCallback callback) {
      readNullableInt16uAttribute(chipClusterPtr, callback);
    }

    public void writeNullableInt16uAttribute(DefaultClusterCallback callback, int value) {
      writeNullableInt16uAttribute(chipClusterPtr, callback, value);
    }

    public void readNullableInt32uAttribute(LongAttributeCallback callback) {
      readNullableInt32uAttribute(chipClusterPtr, callback);
    }

    public void writeNullableInt32uAttribute(DefaultClusterCallback callback, long value) {
      writeNullableInt32uAttribute(chipClusterPtr, callback, value);
    }

    public void readNullableInt64uAttribute(LongAttributeCallback callback) {
      readNullableInt64uAttribute(chipClusterPtr, callback);
    }

    public void writeNullableInt64uAttribute(DefaultClusterCallback callback, long value) {
      writeNullableInt64uAttribute(chipClusterPtr, callback, value);
    }

    public void readNullableInt8sAttribute(IntegerAttributeCallback callback) {
      readNullableInt8sAttribute(chipClusterPtr, callback);
    }

    public void writeNullableInt8sAttribute(DefaultClusterCallback callback, int value) {
      writeNullableInt8sAttribute(chipClusterPtr, callback, value);
    }

    public void readNullableInt16sAttribute(IntegerAttributeCallback callback) {
      readNullableInt16sAttribute(chipClusterPtr, callback);
    }

    public void writeNullableInt16sAttribute(DefaultClusterCallback callback, int value) {
      writeNullableInt16sAttribute(chipClusterPtr, callback, value);
    }

    public void readNullableInt32sAttribute(LongAttributeCallback callback) {
      readNullableInt32sAttribute(chipClusterPtr, callback);
    }

    public void writeNullableInt32sAttribute(DefaultClusterCallback callback, long value) {
      writeNullableInt32sAttribute(chipClusterPtr, callback, value);
    }

    public void readNullableInt64sAttribute(LongAttributeCallback callback) {
      readNullableInt64sAttribute(chipClusterPtr, callback);
    }

    public void writeNullableInt64sAttribute(DefaultClusterCallback callback, long value) {
      writeNullableInt64sAttribute(chipClusterPtr, callback, value);
    }

    public void readNullableEnum8Attribute(IntegerAttributeCallback callback) {
      readNullableEnum8Attribute(chipClusterPtr, callback);
    }

    public void writeNullableEnum8Attribute(DefaultClusterCallback callback, int value) {
      writeNullableEnum8Attribute(chipClusterPtr, callback, value);
    }

    public void readNullableEnum16Attribute(IntegerAttributeCallback callback) {
      readNullableEnum16Attribute(chipClusterPtr, callback);
    }

    public void writeNullableEnum16Attribute(DefaultClusterCallback callback, int value) {
      writeNullableEnum16Attribute(chipClusterPtr, callback, value);
    }

    public void readNullableOctetStringAttribute(OctetStringAttributeCallback callback) {
      readNullableOctetStringAttribute(chipClusterPtr, callback);
    }

    public void writeNullableOctetStringAttribute(DefaultClusterCallback callback, byte[] value) {
      writeNullableOctetStringAttribute(chipClusterPtr, callback, value);
    }

    public void readNullableCharStringAttribute(CharStringAttributeCallback callback) {
      readNullableCharStringAttribute(chipClusterPtr, callback);
    }

    public void writeNullableCharStringAttribute(DefaultClusterCallback callback, String value) {
      writeNullableCharStringAttribute(chipClusterPtr, callback, value);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readBooleanAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void writeBooleanAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, boolean value);

    private native void readBitmap8Attribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeBitmap8Attribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readBitmap16Attribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeBitmap16Attribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readBitmap32Attribute(long chipClusterPtr, LongAttributeCallback callback);

    private native void writeBitmap32Attribute(
        long chipClusterPtr, DefaultClusterCallback callback, long value);

    private native void readBitmap64Attribute(long chipClusterPtr, LongAttributeCallback callback);

    private native void writeBitmap64Attribute(
        long chipClusterPtr, DefaultClusterCallback callback, long value);

    private native void readInt8uAttribute(long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeInt8uAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readInt16uAttribute(long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeInt16uAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readInt32uAttribute(long chipClusterPtr, LongAttributeCallback callback);

    private native void writeInt32uAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, long value);

    private native void readInt64uAttribute(long chipClusterPtr, LongAttributeCallback callback);

    private native void writeInt64uAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, long value);

    private native void readInt8sAttribute(long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeInt8sAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readInt16sAttribute(long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeInt16sAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readInt32sAttribute(long chipClusterPtr, LongAttributeCallback callback);

    private native void writeInt32sAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, long value);

    private native void readInt64sAttribute(long chipClusterPtr, LongAttributeCallback callback);

    private native void writeInt64sAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, long value);

    private native void readEnum8Attribute(long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeEnum8Attribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readEnum16Attribute(long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeEnum16Attribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readOctetStringAttribute(
        long chipClusterPtr, OctetStringAttributeCallback callback);

    private native void writeOctetStringAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, byte[] value);

    private native void readListInt8uAttribute(
        long chipClusterPtr, ListInt8uAttributeCallback callback);

    private native void readListOctetStringAttribute(
        long chipClusterPtr, ListOctetStringAttributeCallback callback);

    private native void readListStructOctetStringAttribute(
        long chipClusterPtr, ListStructOctetStringAttributeCallback callback);

    private native void readLongOctetStringAttribute(
        long chipClusterPtr, OctetStringAttributeCallback callback);

    private native void writeLongOctetStringAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, byte[] value);

    private native void readCharStringAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void writeCharStringAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, String value);

    private native void readLongCharStringAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void writeLongCharStringAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, String value);

    private native void readEpochUsAttribute(long chipClusterPtr, LongAttributeCallback callback);

    private native void writeEpochUsAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, long value);

    private native void readEpochSAttribute(long chipClusterPtr, LongAttributeCallback callback);

    private native void writeEpochSAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, long value);

    private native void readVendorIdAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeVendorIdAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readListNullablesAndOptionalsStructAttribute(
        long chipClusterPtr, ListNullablesAndOptionalsStructAttributeCallback callback);

    private native void readUnsupportedAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void writeUnsupportedAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, boolean value);

    private native void readNullableBooleanAttribute(
        long chipClusterPtr, BooleanAttributeCallback callback);

    private native void writeNullableBooleanAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, boolean value);

    private native void readNullableBitmap8Attribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeNullableBitmap8Attribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readNullableBitmap16Attribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeNullableBitmap16Attribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readNullableBitmap32Attribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void writeNullableBitmap32Attribute(
        long chipClusterPtr, DefaultClusterCallback callback, long value);

    private native void readNullableBitmap64Attribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void writeNullableBitmap64Attribute(
        long chipClusterPtr, DefaultClusterCallback callback, long value);

    private native void readNullableInt8uAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeNullableInt8uAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readNullableInt16uAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeNullableInt16uAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readNullableInt32uAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void writeNullableInt32uAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, long value);

    private native void readNullableInt64uAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void writeNullableInt64uAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, long value);

    private native void readNullableInt8sAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeNullableInt8sAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readNullableInt16sAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeNullableInt16sAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readNullableInt32sAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void writeNullableInt32sAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, long value);

    private native void readNullableInt64sAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void writeNullableInt64sAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, long value);

    private native void readNullableEnum8Attribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeNullableEnum8Attribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readNullableEnum16Attribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeNullableEnum16Attribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readNullableOctetStringAttribute(
        long chipClusterPtr, OctetStringAttributeCallback callback);

    private native void writeNullableOctetStringAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, byte[] value);

    private native void readNullableCharStringAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void writeNullableCharStringAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, String value);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class ThermostatCluster extends BaseChipCluster {
    public ThermostatCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("513");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void clearWeeklySchedule(DefaultClusterCallback callback) {
      clearWeeklySchedule(chipClusterPtr, callback);
    }

    public void getRelayStatusLog(DefaultClusterCallback callback) {
      getRelayStatusLog(chipClusterPtr, callback);
    }

    public void getWeeklySchedule(
        DefaultClusterCallback callback, Integer daysToReturn, Integer modeToReturn) {
      getWeeklySchedule(chipClusterPtr, callback, daysToReturn, modeToReturn);
    }

    public void setWeeklySchedule(
        DefaultClusterCallback callback,
        Integer numberOfTransitionsForSequence,
        Integer dayOfWeekForSequence,
        Integer modeForSequence,
        Integer payload) {
      setWeeklySchedule(
          chipClusterPtr,
          callback,
          numberOfTransitionsForSequence,
          dayOfWeekForSequence,
          modeForSequence,
          payload);
    }

    public void setpointRaiseLower(DefaultClusterCallback callback, Integer mode, Integer amount) {
      setpointRaiseLower(chipClusterPtr, callback, mode, amount);
    }

    private native void clearWeeklySchedule(long chipClusterPtr, DefaultClusterCallback callback);

    private native void getRelayStatusLog(long chipClusterPtr, DefaultClusterCallback callback);

    private native void getWeeklySchedule(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer daysToReturn,
        Integer modeToReturn);

    private native void setWeeklySchedule(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer numberOfTransitionsForSequence,
        Integer dayOfWeekForSequence,
        Integer modeForSequence,
        Integer payload);

    private native void setpointRaiseLower(
        long chipClusterPtr, DefaultClusterCallback callback, Integer mode, Integer amount);

    public void readLocalTemperatureAttribute(IntegerAttributeCallback callback) {
      readLocalTemperatureAttribute(chipClusterPtr, callback);
    }

    public void subscribeLocalTemperatureAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeLocalTemperatureAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportLocalTemperatureAttribute(IntegerAttributeCallback callback) {
      reportLocalTemperatureAttribute(chipClusterPtr, callback);
    }

    public void readAbsMinHeatSetpointLimitAttribute(IntegerAttributeCallback callback) {
      readAbsMinHeatSetpointLimitAttribute(chipClusterPtr, callback);
    }

    public void readAbsMaxHeatSetpointLimitAttribute(IntegerAttributeCallback callback) {
      readAbsMaxHeatSetpointLimitAttribute(chipClusterPtr, callback);
    }

    public void readAbsMinCoolSetpointLimitAttribute(IntegerAttributeCallback callback) {
      readAbsMinCoolSetpointLimitAttribute(chipClusterPtr, callback);
    }

    public void readAbsMaxCoolSetpointLimitAttribute(IntegerAttributeCallback callback) {
      readAbsMaxCoolSetpointLimitAttribute(chipClusterPtr, callback);
    }

    public void readOccupiedCoolingSetpointAttribute(IntegerAttributeCallback callback) {
      readOccupiedCoolingSetpointAttribute(chipClusterPtr, callback);
    }

    public void writeOccupiedCoolingSetpointAttribute(DefaultClusterCallback callback, int value) {
      writeOccupiedCoolingSetpointAttribute(chipClusterPtr, callback, value);
    }

    public void readOccupiedHeatingSetpointAttribute(IntegerAttributeCallback callback) {
      readOccupiedHeatingSetpointAttribute(chipClusterPtr, callback);
    }

    public void writeOccupiedHeatingSetpointAttribute(DefaultClusterCallback callback, int value) {
      writeOccupiedHeatingSetpointAttribute(chipClusterPtr, callback, value);
    }

    public void readMinHeatSetpointLimitAttribute(IntegerAttributeCallback callback) {
      readMinHeatSetpointLimitAttribute(chipClusterPtr, callback);
    }

    public void writeMinHeatSetpointLimitAttribute(DefaultClusterCallback callback, int value) {
      writeMinHeatSetpointLimitAttribute(chipClusterPtr, callback, value);
    }

    public void readMaxHeatSetpointLimitAttribute(IntegerAttributeCallback callback) {
      readMaxHeatSetpointLimitAttribute(chipClusterPtr, callback);
    }

    public void writeMaxHeatSetpointLimitAttribute(DefaultClusterCallback callback, int value) {
      writeMaxHeatSetpointLimitAttribute(chipClusterPtr, callback, value);
    }

    public void readMinCoolSetpointLimitAttribute(IntegerAttributeCallback callback) {
      readMinCoolSetpointLimitAttribute(chipClusterPtr, callback);
    }

    public void writeMinCoolSetpointLimitAttribute(DefaultClusterCallback callback, int value) {
      writeMinCoolSetpointLimitAttribute(chipClusterPtr, callback, value);
    }

    public void readMaxCoolSetpointLimitAttribute(IntegerAttributeCallback callback) {
      readMaxCoolSetpointLimitAttribute(chipClusterPtr, callback);
    }

    public void writeMaxCoolSetpointLimitAttribute(DefaultClusterCallback callback, int value) {
      writeMaxCoolSetpointLimitAttribute(chipClusterPtr, callback, value);
    }

    public void readMinSetpointDeadBandAttribute(IntegerAttributeCallback callback) {
      readMinSetpointDeadBandAttribute(chipClusterPtr, callback);
    }

    public void writeMinSetpointDeadBandAttribute(DefaultClusterCallback callback, int value) {
      writeMinSetpointDeadBandAttribute(chipClusterPtr, callback, value);
    }

    public void readControlSequenceOfOperationAttribute(IntegerAttributeCallback callback) {
      readControlSequenceOfOperationAttribute(chipClusterPtr, callback);
    }

    public void writeControlSequenceOfOperationAttribute(
        DefaultClusterCallback callback, int value) {
      writeControlSequenceOfOperationAttribute(chipClusterPtr, callback, value);
    }

    public void readSystemModeAttribute(IntegerAttributeCallback callback) {
      readSystemModeAttribute(chipClusterPtr, callback);
    }

    public void writeSystemModeAttribute(DefaultClusterCallback callback, int value) {
      writeSystemModeAttribute(chipClusterPtr, callback, value);
    }

    public void readStartOfWeekAttribute(IntegerAttributeCallback callback) {
      readStartOfWeekAttribute(chipClusterPtr, callback);
    }

    public void readNumberOfWeeklyTransitionsAttribute(IntegerAttributeCallback callback) {
      readNumberOfWeeklyTransitionsAttribute(chipClusterPtr, callback);
    }

    public void readNumberOfDailyTransitionsAttribute(IntegerAttributeCallback callback) {
      readNumberOfDailyTransitionsAttribute(chipClusterPtr, callback);
    }

    public void readFeatureMapAttribute(LongAttributeCallback callback) {
      readFeatureMapAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readLocalTemperatureAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeLocalTemperatureAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportLocalTemperatureAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readAbsMinHeatSetpointLimitAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readAbsMaxHeatSetpointLimitAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readAbsMinCoolSetpointLimitAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readAbsMaxCoolSetpointLimitAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readOccupiedCoolingSetpointAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeOccupiedCoolingSetpointAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readOccupiedHeatingSetpointAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeOccupiedHeatingSetpointAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readMinHeatSetpointLimitAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeMinHeatSetpointLimitAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readMaxHeatSetpointLimitAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeMaxHeatSetpointLimitAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readMinCoolSetpointLimitAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeMinCoolSetpointLimitAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readMaxCoolSetpointLimitAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeMaxCoolSetpointLimitAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readMinSetpointDeadBandAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeMinSetpointDeadBandAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readControlSequenceOfOperationAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeControlSequenceOfOperationAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readSystemModeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeSystemModeAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readStartOfWeekAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readNumberOfWeeklyTransitionsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readNumberOfDailyTransitionsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readFeatureMapAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class ThermostatUserInterfaceConfigurationCluster extends BaseChipCluster {
    public ThermostatUserInterfaceConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("516");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void readTemperatureDisplayModeAttribute(IntegerAttributeCallback callback) {
      readTemperatureDisplayModeAttribute(chipClusterPtr, callback);
    }

    public void writeTemperatureDisplayModeAttribute(DefaultClusterCallback callback, int value) {
      writeTemperatureDisplayModeAttribute(chipClusterPtr, callback, value);
    }

    public void readKeypadLockoutAttribute(IntegerAttributeCallback callback) {
      readKeypadLockoutAttribute(chipClusterPtr, callback);
    }

    public void writeKeypadLockoutAttribute(DefaultClusterCallback callback, int value) {
      writeKeypadLockoutAttribute(chipClusterPtr, callback, value);
    }

    public void readScheduleProgrammingVisibilityAttribute(IntegerAttributeCallback callback) {
      readScheduleProgrammingVisibilityAttribute(chipClusterPtr, callback);
    }

    public void writeScheduleProgrammingVisibilityAttribute(
        DefaultClusterCallback callback, int value) {
      writeScheduleProgrammingVisibilityAttribute(chipClusterPtr, callback, value);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readTemperatureDisplayModeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeTemperatureDisplayModeAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readKeypadLockoutAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeKeypadLockoutAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readScheduleProgrammingVisibilityAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeScheduleProgrammingVisibilityAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class ThreadNetworkDiagnosticsCluster extends BaseChipCluster {
    public ThreadNetworkDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("53");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void resetCounts(DefaultClusterCallback callback) {
      resetCounts(chipClusterPtr, callback);
    }

    private native void resetCounts(long chipClusterPtr, DefaultClusterCallback callback);

    public static class NeighborTableListAttribute {
      public Long extAddress;
      public Long age;
      public Integer rloc16;
      public Long linkFrameCounter;
      public Long mleFrameCounter;
      public Integer lqi;
      public Integer averageRssi;
      public Integer lastRssi;
      public Integer frameErrorRate;
      public Integer messageErrorRate;
      public Boolean rxOnWhenIdle;
      public Boolean fullThreadDevice;
      public Boolean fullNetworkData;
      public Boolean isChild;

      public NeighborTableListAttribute(
          Long extAddress,
          Long age,
          Integer rloc16,
          Long linkFrameCounter,
          Long mleFrameCounter,
          Integer lqi,
          Integer averageRssi,
          Integer lastRssi,
          Integer frameErrorRate,
          Integer messageErrorRate,
          Boolean rxOnWhenIdle,
          Boolean fullThreadDevice,
          Boolean fullNetworkData,
          Boolean isChild) {
        this.extAddress = extAddress;
        this.age = age;
        this.rloc16 = rloc16;
        this.linkFrameCounter = linkFrameCounter;
        this.mleFrameCounter = mleFrameCounter;
        this.lqi = lqi;
        this.averageRssi = averageRssi;
        this.lastRssi = lastRssi;
        this.frameErrorRate = frameErrorRate;
        this.messageErrorRate = messageErrorRate;
        this.rxOnWhenIdle = rxOnWhenIdle;
        this.fullThreadDevice = fullThreadDevice;
        this.fullNetworkData = fullNetworkData;
        this.isChild = isChild;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("long extAddress: ");
        output.append(this.extAddress);
        output.append("\n");

        output.append("long age: ");
        output.append(this.age);
        output.append("\n");

        output.append("int rloc16: ");
        output.append(this.rloc16);
        output.append("\n");

        output.append("long linkFrameCounter: ");
        output.append(this.linkFrameCounter);
        output.append("\n");

        output.append("long mleFrameCounter: ");
        output.append(this.mleFrameCounter);
        output.append("\n");

        output.append("int lqi: ");
        output.append(this.lqi);
        output.append("\n");

        output.append("int averageRssi: ");
        output.append(this.averageRssi);
        output.append("\n");

        output.append("int lastRssi: ");
        output.append(this.lastRssi);
        output.append("\n");

        output.append("int frameErrorRate: ");
        output.append(this.frameErrorRate);
        output.append("\n");

        output.append("int messageErrorRate: ");
        output.append(this.messageErrorRate);
        output.append("\n");

        output.append("boolean rxOnWhenIdle: ");
        output.append(this.rxOnWhenIdle);
        output.append("\n");

        output.append("boolean fullThreadDevice: ");
        output.append(this.fullThreadDevice);
        output.append("\n");

        output.append("boolean fullNetworkData: ");
        output.append(this.fullNetworkData);
        output.append("\n");

        output.append("boolean isChild: ");
        output.append(this.isChild);
        output.append("\n");

        return output.toString();
      }
    }

    public interface NeighborTableListAttributeCallback {
      void onSuccess(List<NeighborTableListAttribute> valueList);

      void onError(Exception ex);
    }

    public static class RouteTableListAttribute {
      public Long extAddress;
      public Integer rloc16;
      public Integer routerId;
      public Integer nextHop;
      public Integer pathCost;
      public Integer LQIIn;
      public Integer LQIOut;
      public Integer age;
      public Boolean allocated;
      public Boolean linkEstablished;

      public RouteTableListAttribute(
          Long extAddress,
          Integer rloc16,
          Integer routerId,
          Integer nextHop,
          Integer pathCost,
          Integer LQIIn,
          Integer LQIOut,
          Integer age,
          Boolean allocated,
          Boolean linkEstablished) {
        this.extAddress = extAddress;
        this.rloc16 = rloc16;
        this.routerId = routerId;
        this.nextHop = nextHop;
        this.pathCost = pathCost;
        this.LQIIn = LQIIn;
        this.LQIOut = LQIOut;
        this.age = age;
        this.allocated = allocated;
        this.linkEstablished = linkEstablished;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("long extAddress: ");
        output.append(this.extAddress);
        output.append("\n");

        output.append("int rloc16: ");
        output.append(this.rloc16);
        output.append("\n");

        output.append("int routerId: ");
        output.append(this.routerId);
        output.append("\n");

        output.append("int nextHop: ");
        output.append(this.nextHop);
        output.append("\n");

        output.append("int pathCost: ");
        output.append(this.pathCost);
        output.append("\n");

        output.append("int LQIIn: ");
        output.append(this.LQIIn);
        output.append("\n");

        output.append("int LQIOut: ");
        output.append(this.LQIOut);
        output.append("\n");

        output.append("int age: ");
        output.append(this.age);
        output.append("\n");

        output.append("boolean allocated: ");
        output.append(this.allocated);
        output.append("\n");

        output.append("boolean linkEstablished: ");
        output.append(this.linkEstablished);
        output.append("\n");

        return output.toString();
      }
    }

    public interface RouteTableListAttributeCallback {
      void onSuccess(List<RouteTableListAttribute> valueList);

      void onError(Exception ex);
    }

    public static class SecurityPolicyAttribute {
      public Integer rotationTime;
      public Integer flags;

      public SecurityPolicyAttribute(Integer rotationTime, Integer flags) {
        this.rotationTime = rotationTime;
        this.flags = flags;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("int rotationTime: ");
        output.append(this.rotationTime);
        output.append("\n");

        output.append("int flags: ");
        output.append(this.flags);
        output.append("\n");

        return output.toString();
      }
    }

    public interface SecurityPolicyAttributeCallback {
      void onSuccess(List<SecurityPolicyAttribute> valueList);

      void onError(Exception ex);
    }

    public static class OperationalDatasetComponentsAttribute {
      public Boolean activeTimestampPresent;
      public Boolean pendingTimestampPresent;
      public Boolean masterKeyPresent;
      public Boolean networkNamePresent;
      public Boolean extendedPanIdPresent;
      public Boolean meshLocalPrefixPresent;
      public Boolean delayPresent;
      public Boolean panIdPresent;
      public Boolean channelPresent;
      public Boolean pskcPresent;
      public Boolean securityPolicyPresent;
      public Boolean channelMaskPresent;

      public OperationalDatasetComponentsAttribute(
          Boolean activeTimestampPresent,
          Boolean pendingTimestampPresent,
          Boolean masterKeyPresent,
          Boolean networkNamePresent,
          Boolean extendedPanIdPresent,
          Boolean meshLocalPrefixPresent,
          Boolean delayPresent,
          Boolean panIdPresent,
          Boolean channelPresent,
          Boolean pskcPresent,
          Boolean securityPolicyPresent,
          Boolean channelMaskPresent) {
        this.activeTimestampPresent = activeTimestampPresent;
        this.pendingTimestampPresent = pendingTimestampPresent;
        this.masterKeyPresent = masterKeyPresent;
        this.networkNamePresent = networkNamePresent;
        this.extendedPanIdPresent = extendedPanIdPresent;
        this.meshLocalPrefixPresent = meshLocalPrefixPresent;
        this.delayPresent = delayPresent;
        this.panIdPresent = panIdPresent;
        this.channelPresent = channelPresent;
        this.pskcPresent = pskcPresent;
        this.securityPolicyPresent = securityPolicyPresent;
        this.channelMaskPresent = channelMaskPresent;
      }

      @Override
      public String toString() {
        StringBuilder output = new StringBuilder("");
        output.append("boolean activeTimestampPresent: ");
        output.append(this.activeTimestampPresent);
        output.append("\n");

        output.append("boolean pendingTimestampPresent: ");
        output.append(this.pendingTimestampPresent);
        output.append("\n");

        output.append("boolean masterKeyPresent: ");
        output.append(this.masterKeyPresent);
        output.append("\n");

        output.append("boolean networkNamePresent: ");
        output.append(this.networkNamePresent);
        output.append("\n");

        output.append("boolean extendedPanIdPresent: ");
        output.append(this.extendedPanIdPresent);
        output.append("\n");

        output.append("boolean meshLocalPrefixPresent: ");
        output.append(this.meshLocalPrefixPresent);
        output.append("\n");

        output.append("boolean delayPresent: ");
        output.append(this.delayPresent);
        output.append("\n");

        output.append("boolean panIdPresent: ");
        output.append(this.panIdPresent);
        output.append("\n");

        output.append("boolean channelPresent: ");
        output.append(this.channelPresent);
        output.append("\n");

        output.append("boolean pskcPresent: ");
        output.append(this.pskcPresent);
        output.append("\n");

        output.append("boolean securityPolicyPresent: ");
        output.append(this.securityPolicyPresent);
        output.append("\n");

        output.append("boolean channelMaskPresent: ");
        output.append(this.channelMaskPresent);
        output.append("\n");

        return output.toString();
      }
    }

    public interface OperationalDatasetComponentsAttributeCallback {
      void onSuccess(List<OperationalDatasetComponentsAttribute> valueList);

      void onError(Exception ex);
    }

    public interface ActiveNetworkFaultsListAttributeCallback {
      void onSuccess(List<Integer> valueList);

      void onError(Exception ex);
    }

    public void readChannelAttribute(IntegerAttributeCallback callback) {
      readChannelAttribute(chipClusterPtr, callback);
    }

    public void readRoutingRoleAttribute(IntegerAttributeCallback callback) {
      readRoutingRoleAttribute(chipClusterPtr, callback);
    }

    public void readNetworkNameAttribute(OctetStringAttributeCallback callback) {
      readNetworkNameAttribute(chipClusterPtr, callback);
    }

    public void readPanIdAttribute(IntegerAttributeCallback callback) {
      readPanIdAttribute(chipClusterPtr, callback);
    }

    public void readExtendedPanIdAttribute(LongAttributeCallback callback) {
      readExtendedPanIdAttribute(chipClusterPtr, callback);
    }

    public void readMeshLocalPrefixAttribute(OctetStringAttributeCallback callback) {
      readMeshLocalPrefixAttribute(chipClusterPtr, callback);
    }

    public void readOverrunCountAttribute(LongAttributeCallback callback) {
      readOverrunCountAttribute(chipClusterPtr, callback);
    }

    public void readNeighborTableListAttribute(NeighborTableListAttributeCallback callback) {
      readNeighborTableListAttribute(chipClusterPtr, callback);
    }

    public void readRouteTableListAttribute(RouteTableListAttributeCallback callback) {
      readRouteTableListAttribute(chipClusterPtr, callback);
    }

    public void readPartitionIdAttribute(LongAttributeCallback callback) {
      readPartitionIdAttribute(chipClusterPtr, callback);
    }

    public void readWeightingAttribute(IntegerAttributeCallback callback) {
      readWeightingAttribute(chipClusterPtr, callback);
    }

    public void readDataVersionAttribute(IntegerAttributeCallback callback) {
      readDataVersionAttribute(chipClusterPtr, callback);
    }

    public void readStableDataVersionAttribute(IntegerAttributeCallback callback) {
      readStableDataVersionAttribute(chipClusterPtr, callback);
    }

    public void readLeaderRouterIdAttribute(IntegerAttributeCallback callback) {
      readLeaderRouterIdAttribute(chipClusterPtr, callback);
    }

    public void readDetachedRoleCountAttribute(IntegerAttributeCallback callback) {
      readDetachedRoleCountAttribute(chipClusterPtr, callback);
    }

    public void readChildRoleCountAttribute(IntegerAttributeCallback callback) {
      readChildRoleCountAttribute(chipClusterPtr, callback);
    }

    public void readRouterRoleCountAttribute(IntegerAttributeCallback callback) {
      readRouterRoleCountAttribute(chipClusterPtr, callback);
    }

    public void readLeaderRoleCountAttribute(IntegerAttributeCallback callback) {
      readLeaderRoleCountAttribute(chipClusterPtr, callback);
    }

    public void readAttachAttemptCountAttribute(IntegerAttributeCallback callback) {
      readAttachAttemptCountAttribute(chipClusterPtr, callback);
    }

    public void readPartitionIdChangeCountAttribute(IntegerAttributeCallback callback) {
      readPartitionIdChangeCountAttribute(chipClusterPtr, callback);
    }

    public void readBetterPartitionAttachAttemptCountAttribute(IntegerAttributeCallback callback) {
      readBetterPartitionAttachAttemptCountAttribute(chipClusterPtr, callback);
    }

    public void readParentChangeCountAttribute(IntegerAttributeCallback callback) {
      readParentChangeCountAttribute(chipClusterPtr, callback);
    }

    public void readTxTotalCountAttribute(LongAttributeCallback callback) {
      readTxTotalCountAttribute(chipClusterPtr, callback);
    }

    public void readTxUnicastCountAttribute(LongAttributeCallback callback) {
      readTxUnicastCountAttribute(chipClusterPtr, callback);
    }

    public void readTxBroadcastCountAttribute(LongAttributeCallback callback) {
      readTxBroadcastCountAttribute(chipClusterPtr, callback);
    }

    public void readTxAckRequestedCountAttribute(LongAttributeCallback callback) {
      readTxAckRequestedCountAttribute(chipClusterPtr, callback);
    }

    public void readTxAckedCountAttribute(LongAttributeCallback callback) {
      readTxAckedCountAttribute(chipClusterPtr, callback);
    }

    public void readTxNoAckRequestedCountAttribute(LongAttributeCallback callback) {
      readTxNoAckRequestedCountAttribute(chipClusterPtr, callback);
    }

    public void readTxDataCountAttribute(LongAttributeCallback callback) {
      readTxDataCountAttribute(chipClusterPtr, callback);
    }

    public void readTxDataPollCountAttribute(LongAttributeCallback callback) {
      readTxDataPollCountAttribute(chipClusterPtr, callback);
    }

    public void readTxBeaconCountAttribute(LongAttributeCallback callback) {
      readTxBeaconCountAttribute(chipClusterPtr, callback);
    }

    public void readTxBeaconRequestCountAttribute(LongAttributeCallback callback) {
      readTxBeaconRequestCountAttribute(chipClusterPtr, callback);
    }

    public void readTxOtherCountAttribute(LongAttributeCallback callback) {
      readTxOtherCountAttribute(chipClusterPtr, callback);
    }

    public void readTxRetryCountAttribute(LongAttributeCallback callback) {
      readTxRetryCountAttribute(chipClusterPtr, callback);
    }

    public void readTxDirectMaxRetryExpiryCountAttribute(LongAttributeCallback callback) {
      readTxDirectMaxRetryExpiryCountAttribute(chipClusterPtr, callback);
    }

    public void readTxIndirectMaxRetryExpiryCountAttribute(LongAttributeCallback callback) {
      readTxIndirectMaxRetryExpiryCountAttribute(chipClusterPtr, callback);
    }

    public void readTxErrCcaCountAttribute(LongAttributeCallback callback) {
      readTxErrCcaCountAttribute(chipClusterPtr, callback);
    }

    public void readTxErrAbortCountAttribute(LongAttributeCallback callback) {
      readTxErrAbortCountAttribute(chipClusterPtr, callback);
    }

    public void readTxErrBusyChannelCountAttribute(LongAttributeCallback callback) {
      readTxErrBusyChannelCountAttribute(chipClusterPtr, callback);
    }

    public void readRxTotalCountAttribute(LongAttributeCallback callback) {
      readRxTotalCountAttribute(chipClusterPtr, callback);
    }

    public void readRxUnicastCountAttribute(LongAttributeCallback callback) {
      readRxUnicastCountAttribute(chipClusterPtr, callback);
    }

    public void readRxBroadcastCountAttribute(LongAttributeCallback callback) {
      readRxBroadcastCountAttribute(chipClusterPtr, callback);
    }

    public void readRxDataCountAttribute(LongAttributeCallback callback) {
      readRxDataCountAttribute(chipClusterPtr, callback);
    }

    public void readRxDataPollCountAttribute(LongAttributeCallback callback) {
      readRxDataPollCountAttribute(chipClusterPtr, callback);
    }

    public void readRxBeaconCountAttribute(LongAttributeCallback callback) {
      readRxBeaconCountAttribute(chipClusterPtr, callback);
    }

    public void readRxBeaconRequestCountAttribute(LongAttributeCallback callback) {
      readRxBeaconRequestCountAttribute(chipClusterPtr, callback);
    }

    public void readRxOtherCountAttribute(LongAttributeCallback callback) {
      readRxOtherCountAttribute(chipClusterPtr, callback);
    }

    public void readRxAddressFilteredCountAttribute(LongAttributeCallback callback) {
      readRxAddressFilteredCountAttribute(chipClusterPtr, callback);
    }

    public void readRxDestAddrFilteredCountAttribute(LongAttributeCallback callback) {
      readRxDestAddrFilteredCountAttribute(chipClusterPtr, callback);
    }

    public void readRxDuplicatedCountAttribute(LongAttributeCallback callback) {
      readRxDuplicatedCountAttribute(chipClusterPtr, callback);
    }

    public void readRxErrNoFrameCountAttribute(LongAttributeCallback callback) {
      readRxErrNoFrameCountAttribute(chipClusterPtr, callback);
    }

    public void readRxErrUnknownNeighborCountAttribute(LongAttributeCallback callback) {
      readRxErrUnknownNeighborCountAttribute(chipClusterPtr, callback);
    }

    public void readRxErrInvalidSrcAddrCountAttribute(LongAttributeCallback callback) {
      readRxErrInvalidSrcAddrCountAttribute(chipClusterPtr, callback);
    }

    public void readRxErrSecCountAttribute(LongAttributeCallback callback) {
      readRxErrSecCountAttribute(chipClusterPtr, callback);
    }

    public void readRxErrFcsCountAttribute(LongAttributeCallback callback) {
      readRxErrFcsCountAttribute(chipClusterPtr, callback);
    }

    public void readRxErrOtherCountAttribute(LongAttributeCallback callback) {
      readRxErrOtherCountAttribute(chipClusterPtr, callback);
    }

    public void readActiveTimestampAttribute(LongAttributeCallback callback) {
      readActiveTimestampAttribute(chipClusterPtr, callback);
    }

    public void readPendingTimestampAttribute(LongAttributeCallback callback) {
      readPendingTimestampAttribute(chipClusterPtr, callback);
    }

    public void readDelayAttribute(LongAttributeCallback callback) {
      readDelayAttribute(chipClusterPtr, callback);
    }

    public void readSecurityPolicyAttribute(SecurityPolicyAttributeCallback callback) {
      readSecurityPolicyAttribute(chipClusterPtr, callback);
    }

    public void readChannelMaskAttribute(OctetStringAttributeCallback callback) {
      readChannelMaskAttribute(chipClusterPtr, callback);
    }

    public void readOperationalDatasetComponentsAttribute(
        OperationalDatasetComponentsAttributeCallback callback) {
      readOperationalDatasetComponentsAttribute(chipClusterPtr, callback);
    }

    public void readActiveNetworkFaultsListAttribute(
        ActiveNetworkFaultsListAttributeCallback callback) {
      readActiveNetworkFaultsListAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readChannelAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readRoutingRoleAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readNetworkNameAttribute(
        long chipClusterPtr, OctetStringAttributeCallback callback);

    private native void readPanIdAttribute(long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readExtendedPanIdAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readMeshLocalPrefixAttribute(
        long chipClusterPtr, OctetStringAttributeCallback callback);

    private native void readOverrunCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readNeighborTableListAttribute(
        long chipClusterPtr, NeighborTableListAttributeCallback callback);

    private native void readRouteTableListAttribute(
        long chipClusterPtr, RouteTableListAttributeCallback callback);

    private native void readPartitionIdAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readWeightingAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readDataVersionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readStableDataVersionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readLeaderRouterIdAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readDetachedRoleCountAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readChildRoleCountAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readRouterRoleCountAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readLeaderRoleCountAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readAttachAttemptCountAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readPartitionIdChangeCountAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readBetterPartitionAttachAttemptCountAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readParentChangeCountAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readTxTotalCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTxUnicastCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTxBroadcastCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTxAckRequestedCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTxAckedCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTxNoAckRequestedCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTxDataCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTxDataPollCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTxBeaconCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTxBeaconRequestCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTxOtherCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTxRetryCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTxDirectMaxRetryExpiryCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTxIndirectMaxRetryExpiryCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTxErrCcaCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTxErrAbortCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readTxErrBusyChannelCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRxTotalCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRxUnicastCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRxBroadcastCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRxDataCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRxDataPollCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRxBeaconCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRxBeaconRequestCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRxOtherCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRxAddressFilteredCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRxDestAddrFilteredCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRxDuplicatedCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRxErrNoFrameCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRxErrUnknownNeighborCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRxErrInvalidSrcAddrCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRxErrSecCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRxErrFcsCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readRxErrOtherCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readActiveTimestampAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readPendingTimestampAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readDelayAttribute(long chipClusterPtr, LongAttributeCallback callback);

    private native void readSecurityPolicyAttribute(
        long chipClusterPtr, SecurityPolicyAttributeCallback callback);

    private native void readChannelMaskAttribute(
        long chipClusterPtr, OctetStringAttributeCallback callback);

    private native void readOperationalDatasetComponentsAttribute(
        long chipClusterPtr, OperationalDatasetComponentsAttributeCallback callback);

    private native void readActiveNetworkFaultsListAttribute(
        long chipClusterPtr, ActiveNetworkFaultsListAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class WakeOnLanCluster extends BaseChipCluster {
    public WakeOnLanCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("1283");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void readWakeOnLanMacAddressAttribute(CharStringAttributeCallback callback) {
      readWakeOnLanMacAddressAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readWakeOnLanMacAddressAttribute(
        long chipClusterPtr, CharStringAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class WiFiNetworkDiagnosticsCluster extends BaseChipCluster {
    public WiFiNetworkDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("54");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void resetCounts(DefaultClusterCallback callback) {
      resetCounts(chipClusterPtr, callback);
    }

    private native void resetCounts(long chipClusterPtr, DefaultClusterCallback callback);

    public void readBssidAttribute(OctetStringAttributeCallback callback) {
      readBssidAttribute(chipClusterPtr, callback);
    }

    public void readSecurityTypeAttribute(IntegerAttributeCallback callback) {
      readSecurityTypeAttribute(chipClusterPtr, callback);
    }

    public void readWiFiVersionAttribute(IntegerAttributeCallback callback) {
      readWiFiVersionAttribute(chipClusterPtr, callback);
    }

    public void readChannelNumberAttribute(IntegerAttributeCallback callback) {
      readChannelNumberAttribute(chipClusterPtr, callback);
    }

    public void readRssiAttribute(IntegerAttributeCallback callback) {
      readRssiAttribute(chipClusterPtr, callback);
    }

    public void readBeaconLostCountAttribute(LongAttributeCallback callback) {
      readBeaconLostCountAttribute(chipClusterPtr, callback);
    }

    public void readBeaconRxCountAttribute(LongAttributeCallback callback) {
      readBeaconRxCountAttribute(chipClusterPtr, callback);
    }

    public void readPacketMulticastRxCountAttribute(LongAttributeCallback callback) {
      readPacketMulticastRxCountAttribute(chipClusterPtr, callback);
    }

    public void readPacketMulticastTxCountAttribute(LongAttributeCallback callback) {
      readPacketMulticastTxCountAttribute(chipClusterPtr, callback);
    }

    public void readPacketUnicastRxCountAttribute(LongAttributeCallback callback) {
      readPacketUnicastRxCountAttribute(chipClusterPtr, callback);
    }

    public void readPacketUnicastTxCountAttribute(LongAttributeCallback callback) {
      readPacketUnicastTxCountAttribute(chipClusterPtr, callback);
    }

    public void readCurrentMaxRateAttribute(LongAttributeCallback callback) {
      readCurrentMaxRateAttribute(chipClusterPtr, callback);
    }

    public void readOverrunCountAttribute(LongAttributeCallback callback) {
      readOverrunCountAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readBssidAttribute(
        long chipClusterPtr, OctetStringAttributeCallback callback);

    private native void readSecurityTypeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readWiFiVersionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readChannelNumberAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readRssiAttribute(long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readBeaconLostCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readBeaconRxCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readPacketMulticastRxCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readPacketMulticastTxCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readPacketUnicastRxCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readPacketUnicastTxCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readCurrentMaxRateAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readOverrunCountAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }

  public static class WindowCoveringCluster extends BaseChipCluster {
    public WindowCoveringCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    public static long clusterId() {
      return Long.parseUnsignedLong("258");
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);

    public void downOrClose(DefaultClusterCallback callback) {
      downOrClose(chipClusterPtr, callback);
    }

    public void goToLiftPercentage(
        DefaultClusterCallback callback,
        Integer liftPercentageValue,
        Integer liftPercent100thsValue) {
      goToLiftPercentage(chipClusterPtr, callback, liftPercentageValue, liftPercent100thsValue);
    }

    public void goToLiftValue(DefaultClusterCallback callback, Integer liftValue) {
      goToLiftValue(chipClusterPtr, callback, liftValue);
    }

    public void goToTiltPercentage(
        DefaultClusterCallback callback,
        Integer tiltPercentageValue,
        Integer tiltPercent100thsValue) {
      goToTiltPercentage(chipClusterPtr, callback, tiltPercentageValue, tiltPercent100thsValue);
    }

    public void goToTiltValue(DefaultClusterCallback callback, Integer tiltValue) {
      goToTiltValue(chipClusterPtr, callback, tiltValue);
    }

    public void stopMotion(DefaultClusterCallback callback) {
      stopMotion(chipClusterPtr, callback);
    }

    public void upOrOpen(DefaultClusterCallback callback) {
      upOrOpen(chipClusterPtr, callback);
    }

    private native void downOrClose(long chipClusterPtr, DefaultClusterCallback callback);

    private native void goToLiftPercentage(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer liftPercentageValue,
        Integer liftPercent100thsValue);

    private native void goToLiftValue(
        long chipClusterPtr, DefaultClusterCallback callback, Integer liftValue);

    private native void goToTiltPercentage(
        long chipClusterPtr,
        DefaultClusterCallback callback,
        Integer tiltPercentageValue,
        Integer tiltPercent100thsValue);

    private native void goToTiltValue(
        long chipClusterPtr, DefaultClusterCallback callback, Integer tiltValue);

    private native void stopMotion(long chipClusterPtr, DefaultClusterCallback callback);

    private native void upOrOpen(long chipClusterPtr, DefaultClusterCallback callback);

    public void readTypeAttribute(IntegerAttributeCallback callback) {
      readTypeAttribute(chipClusterPtr, callback);
    }

    public void readCurrentPositionLiftAttribute(IntegerAttributeCallback callback) {
      readCurrentPositionLiftAttribute(chipClusterPtr, callback);
    }

    public void readCurrentPositionTiltAttribute(IntegerAttributeCallback callback) {
      readCurrentPositionTiltAttribute(chipClusterPtr, callback);
    }

    public void readConfigStatusAttribute(IntegerAttributeCallback callback) {
      readConfigStatusAttribute(chipClusterPtr, callback);
    }

    public void readCurrentPositionLiftPercentageAttribute(IntegerAttributeCallback callback) {
      readCurrentPositionLiftPercentageAttribute(chipClusterPtr, callback);
    }

    public void subscribeCurrentPositionLiftPercentageAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeCurrentPositionLiftPercentageAttribute(
          chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportCurrentPositionLiftPercentageAttribute(IntegerAttributeCallback callback) {
      reportCurrentPositionLiftPercentageAttribute(chipClusterPtr, callback);
    }

    public void readCurrentPositionTiltPercentageAttribute(IntegerAttributeCallback callback) {
      readCurrentPositionTiltPercentageAttribute(chipClusterPtr, callback);
    }

    public void subscribeCurrentPositionTiltPercentageAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeCurrentPositionTiltPercentageAttribute(
          chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportCurrentPositionTiltPercentageAttribute(IntegerAttributeCallback callback) {
      reportCurrentPositionTiltPercentageAttribute(chipClusterPtr, callback);
    }

    public void readOperationalStatusAttribute(IntegerAttributeCallback callback) {
      readOperationalStatusAttribute(chipClusterPtr, callback);
    }

    public void subscribeOperationalStatusAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeOperationalStatusAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportOperationalStatusAttribute(IntegerAttributeCallback callback) {
      reportOperationalStatusAttribute(chipClusterPtr, callback);
    }

    public void readTargetPositionLiftPercent100thsAttribute(IntegerAttributeCallback callback) {
      readTargetPositionLiftPercent100thsAttribute(chipClusterPtr, callback);
    }

    public void subscribeTargetPositionLiftPercent100thsAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeTargetPositionLiftPercent100thsAttribute(
          chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportTargetPositionLiftPercent100thsAttribute(IntegerAttributeCallback callback) {
      reportTargetPositionLiftPercent100thsAttribute(chipClusterPtr, callback);
    }

    public void readTargetPositionTiltPercent100thsAttribute(IntegerAttributeCallback callback) {
      readTargetPositionTiltPercent100thsAttribute(chipClusterPtr, callback);
    }

    public void subscribeTargetPositionTiltPercent100thsAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeTargetPositionTiltPercent100thsAttribute(
          chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportTargetPositionTiltPercent100thsAttribute(IntegerAttributeCallback callback) {
      reportTargetPositionTiltPercent100thsAttribute(chipClusterPtr, callback);
    }

    public void readEndProductTypeAttribute(IntegerAttributeCallback callback) {
      readEndProductTypeAttribute(chipClusterPtr, callback);
    }

    public void readCurrentPositionLiftPercent100thsAttribute(IntegerAttributeCallback callback) {
      readCurrentPositionLiftPercent100thsAttribute(chipClusterPtr, callback);
    }

    public void subscribeCurrentPositionLiftPercent100thsAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeCurrentPositionLiftPercent100thsAttribute(
          chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportCurrentPositionLiftPercent100thsAttribute(IntegerAttributeCallback callback) {
      reportCurrentPositionLiftPercent100thsAttribute(chipClusterPtr, callback);
    }

    public void readCurrentPositionTiltPercent100thsAttribute(IntegerAttributeCallback callback) {
      readCurrentPositionTiltPercent100thsAttribute(chipClusterPtr, callback);
    }

    public void subscribeCurrentPositionTiltPercent100thsAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeCurrentPositionTiltPercent100thsAttribute(
          chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportCurrentPositionTiltPercent100thsAttribute(IntegerAttributeCallback callback) {
      reportCurrentPositionTiltPercent100thsAttribute(chipClusterPtr, callback);
    }

    public void readInstalledOpenLimitLiftAttribute(IntegerAttributeCallback callback) {
      readInstalledOpenLimitLiftAttribute(chipClusterPtr, callback);
    }

    public void readInstalledClosedLimitLiftAttribute(IntegerAttributeCallback callback) {
      readInstalledClosedLimitLiftAttribute(chipClusterPtr, callback);
    }

    public void readInstalledOpenLimitTiltAttribute(IntegerAttributeCallback callback) {
      readInstalledOpenLimitTiltAttribute(chipClusterPtr, callback);
    }

    public void readInstalledClosedLimitTiltAttribute(IntegerAttributeCallback callback) {
      readInstalledClosedLimitTiltAttribute(chipClusterPtr, callback);
    }

    public void readModeAttribute(IntegerAttributeCallback callback) {
      readModeAttribute(chipClusterPtr, callback);
    }

    public void writeModeAttribute(DefaultClusterCallback callback, int value) {
      writeModeAttribute(chipClusterPtr, callback, value);
    }

    public void readSafetyStatusAttribute(IntegerAttributeCallback callback) {
      readSafetyStatusAttribute(chipClusterPtr, callback);
    }

    public void subscribeSafetyStatusAttribute(
        DefaultClusterCallback callback, int minInterval, int maxInterval) {
      subscribeSafetyStatusAttribute(chipClusterPtr, callback, minInterval, maxInterval);
    }

    public void reportSafetyStatusAttribute(IntegerAttributeCallback callback) {
      reportSafetyStatusAttribute(chipClusterPtr, callback);
    }

    public void readFeatureMapAttribute(LongAttributeCallback callback) {
      readFeatureMapAttribute(chipClusterPtr, callback);
    }

    public void readClusterRevisionAttribute(IntegerAttributeCallback callback) {
      readClusterRevisionAttribute(chipClusterPtr, callback);
    }

    private native void readTypeAttribute(long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readCurrentPositionLiftAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readCurrentPositionTiltAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readConfigStatusAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readCurrentPositionLiftPercentageAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeCurrentPositionLiftPercentageAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportCurrentPositionLiftPercentageAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readCurrentPositionTiltPercentageAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeCurrentPositionTiltPercentageAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportCurrentPositionTiltPercentageAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readOperationalStatusAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeOperationalStatusAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportOperationalStatusAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readTargetPositionLiftPercent100thsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeTargetPositionLiftPercent100thsAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportTargetPositionLiftPercent100thsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readTargetPositionTiltPercent100thsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeTargetPositionTiltPercent100thsAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportTargetPositionTiltPercent100thsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readEndProductTypeAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readCurrentPositionLiftPercent100thsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeCurrentPositionLiftPercent100thsAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportCurrentPositionLiftPercent100thsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readCurrentPositionTiltPercent100thsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeCurrentPositionTiltPercent100thsAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportCurrentPositionTiltPercent100thsAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readInstalledOpenLimitLiftAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readInstalledClosedLimitLiftAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readInstalledOpenLimitTiltAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readInstalledClosedLimitTiltAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readModeAttribute(long chipClusterPtr, IntegerAttributeCallback callback);

    private native void writeModeAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int value);

    private native void readSafetyStatusAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void subscribeSafetyStatusAttribute(
        long chipClusterPtr, DefaultClusterCallback callback, int minInterval, int maxInterval);

    private native void reportSafetyStatusAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);

    private native void readFeatureMapAttribute(
        long chipClusterPtr, LongAttributeCallback callback);

    private native void readClusterRevisionAttribute(
        long chipClusterPtr, IntegerAttributeCallback callback);
  }
}
