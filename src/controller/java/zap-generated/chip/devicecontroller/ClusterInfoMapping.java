/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

package chip.devicecontroller;

import chip.clusterinfo.ClusterCommandCallback;
import chip.clusterinfo.ClusterInfo;
import chip.clusterinfo.CommandInfo;
import chip.clusterinfo.CommandParameter;
import chip.clusterinfo.DelegatedClusterCallback;
import chip.devicecontroller.ChipClusters.DefaultClusterCallback;
import java.util.*;

public class ClusterInfoMapping {

  class DelegatedDefaultClusterCallback
      implements DefaultClusterCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    // Parameters and list-adds here should be generated - refer to the template code that creates
    // each callback interface.
    @Override
    public void onSuccess() {
      List<Object> responseValues = new ArrayList<>();
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception e) {
      callback.onFailure(e);
    }
  }

  public class DelegatedGetSetupPINResponseCallback
      implements ChipClusters.AccountLoginCluster.GetSetupPINResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(String setupPIN) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(setupPIN);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedLaunchAppResponseCallback
      implements ChipClusters.ApplicationLauncherCluster.LaunchAppResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, String data) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(data);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedLaunchContentResponseCallback
      implements ChipClusters.ContentLauncherCluster.LaunchContentResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(String data, int contentLaunchStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(data);
      responseValues.add(contentLaunchStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedLaunchURLResponseCallback
      implements ChipClusters.ContentLauncherCluster.LaunchURLResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(String data, int contentLaunchStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(data);
      responseValues.add(contentLaunchStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearAllPinsResponseCallback
      implements ChipClusters.DoorLockCluster.ClearAllPinsResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearAllRfidsResponseCallback
      implements ChipClusters.DoorLockCluster.ClearAllRfidsResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearHolidayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.ClearHolidayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearPinResponseCallback
      implements ChipClusters.DoorLockCluster.ClearPinResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearRfidResponseCallback
      implements ChipClusters.DoorLockCluster.ClearRfidResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearWeekdayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.ClearWeekdayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearYeardayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.ClearYeardayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetHolidayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.GetHolidayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        int scheduleId,
        int status,
        long localStartTime,
        long localEndTime,
        int operatingModeDuringHoliday) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(scheduleId);
      responseValues.add(status);
      responseValues.add(localStartTime);
      responseValues.add(localEndTime);
      responseValues.add(operatingModeDuringHoliday);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetLogRecordResponseCallback
      implements ChipClusters.DoorLockCluster.GetLogRecordResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        int logEntryId,
        long timestamp,
        int eventType,
        int source,
        int eventIdOrAlarmCode,
        int userId,
        byte[] pin) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(logEntryId);
      responseValues.add(timestamp);
      responseValues.add(eventType);
      responseValues.add(source);
      responseValues.add(eventIdOrAlarmCode);
      responseValues.add(userId);
      responseValues.add(pin);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetPinResponseCallback
      implements ChipClusters.DoorLockCluster.GetPinResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int userId, int userStatus, int userType, byte[] pin) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(userId);
      responseValues.add(userStatus);
      responseValues.add(userType);
      responseValues.add(pin);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetRfidResponseCallback
      implements ChipClusters.DoorLockCluster.GetRfidResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int userId, int userStatus, int userType, byte[] rfid) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(userId);
      responseValues.add(userStatus);
      responseValues.add(userType);
      responseValues.add(rfid);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetUserTypeResponseCallback
      implements ChipClusters.DoorLockCluster.GetUserTypeResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int userId, int userType) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(userId);
      responseValues.add(userType);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetWeekdayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.GetWeekdayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        int scheduleId,
        int userId,
        int status,
        int daysMask,
        int startHour,
        int startMinute,
        int endHour,
        int endMinute) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(scheduleId);
      responseValues.add(userId);
      responseValues.add(status);
      responseValues.add(daysMask);
      responseValues.add(startHour);
      responseValues.add(startMinute);
      responseValues.add(endHour);
      responseValues.add(endMinute);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetYeardayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.GetYeardayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        int scheduleId, int userId, int status, long localStartTime, long localEndTime) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(scheduleId);
      responseValues.add(userId);
      responseValues.add(status);
      responseValues.add(localStartTime);
      responseValues.add(localEndTime);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedLockDoorResponseCallback
      implements ChipClusters.DoorLockCluster.LockDoorResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetHolidayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.SetHolidayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetPinResponseCallback
      implements ChipClusters.DoorLockCluster.SetPinResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetRfidResponseCallback
      implements ChipClusters.DoorLockCluster.SetRfidResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetUserTypeResponseCallback
      implements ChipClusters.DoorLockCluster.SetUserTypeResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetWeekdayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.SetWeekdayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetYeardayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.SetYeardayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedUnlockDoorResponseCallback
      implements ChipClusters.DoorLockCluster.UnlockDoorResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedUnlockWithTimeoutResponseCallback
      implements ChipClusters.DoorLockCluster.UnlockWithTimeoutResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedArmFailSafeResponseCallback
      implements ChipClusters.GeneralCommissioningCluster.ArmFailSafeResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedCommissioningCompleteResponseCallback
      implements ChipClusters.GeneralCommissioningCluster.CommissioningCompleteResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetRegulatoryConfigResponseCallback
      implements ChipClusters.GeneralCommissioningCluster.SetRegulatoryConfigResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedAddGroupResponseCallback
      implements ChipClusters.GroupsCluster.AddGroupResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(groupId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetGroupMembershipResponseCallback
      implements ChipClusters.GroupsCluster.GetGroupMembershipResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int capacity, int groupCount
        // groupList: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        ) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(capacity);
      responseValues.add(groupCount);
      // groupList: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedRemoveGroupResponseCallback
      implements ChipClusters.GroupsCluster.RemoveGroupResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(groupId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedViewGroupResponseCallback
      implements ChipClusters.GroupsCluster.ViewGroupResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId, String groupName) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(groupId);
      responseValues.add(groupName);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedIdentifyQueryResponseCallback
      implements ChipClusters.IdentifyCluster.IdentifyQueryResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int timeout) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(timeout);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSendKeyResponseCallback
      implements ChipClusters.KeypadInputCluster.SendKeyResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaFastForwardResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaFastForwardResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaNextResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaNextResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaPauseResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaPauseResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaPlayResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaPlayResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaPreviousResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaPreviousResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaRewindResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaRewindResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaSeekResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaSeekResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaSkipBackwardResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaSkipBackwardResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaSkipForwardResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaSkipForwardResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaStartOverResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaStartOverResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaStopResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaStopResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedAddThreadNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.AddThreadNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedAddWiFiNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.AddWiFiNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedDisableNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.DisableNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedEnableNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.EnableNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedRemoveNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.RemoveNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedScanNetworksResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.ScanNetworksResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText
        // wifiScanResults: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        // threadScanResults: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        ) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      // wifiScanResults: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      // threadScanResults: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedUpdateThreadNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.UpdateThreadNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedUpdateWiFiNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.UpdateWiFiNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedApplyUpdateRequestResponseCallback
      implements ChipClusters.OtaSoftwareUpdateProviderCluster.ApplyUpdateRequestResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int action, long delayedActionTime) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(action);
      responseValues.add(delayedActionTime);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedQueryImageResponseCallback
      implements ChipClusters.OtaSoftwareUpdateProviderCluster.QueryImageResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        int status,
        long delayedActionTime,
        String imageURI,
        long softwareVersion,
        String softwareVersionString,
        byte[] updateToken,
        boolean userConsentNeeded,
        byte[] metadataForRequestor) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(delayedActionTime);
      responseValues.add(imageURI);
      responseValues.add(softwareVersion);
      responseValues.add(softwareVersionString);
      responseValues.add(updateToken);
      responseValues.add(userConsentNeeded);
      responseValues.add(metadataForRequestor);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedAttestationResponseCallback
      implements ChipClusters.OperationalCredentialsCluster.AttestationResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(byte[] AttestationElements, byte[] Signature) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(AttestationElements);
      responseValues.add(Signature);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedCertificateChainResponseCallback
      implements ChipClusters.OperationalCredentialsCluster.CertificateChainResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(byte[] Certificate) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(Certificate);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedNOCResponseCallback
      implements ChipClusters.OperationalCredentialsCluster.NOCResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int StatusCode, int FabricIndex, byte[] DebugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(StatusCode);
      responseValues.add(FabricIndex);
      responseValues.add(DebugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedOpCSRResponseCallback
      implements ChipClusters.OperationalCredentialsCluster.OpCSRResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(byte[] NOCSRElements, byte[] AttestationSignature) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(NOCSRElements);
      responseValues.add(AttestationSignature);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedAddSceneResponseCallback
      implements ChipClusters.ScenesCluster.AddSceneResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId, int sceneId) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(groupId);
      responseValues.add(sceneId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetSceneMembershipResponseCallback
      implements ChipClusters.ScenesCluster.GetSceneMembershipResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int capacity, int groupId, int sceneCount
        // sceneList: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        ) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(capacity);
      responseValues.add(groupId);
      responseValues.add(sceneCount);
      // sceneList: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedRemoveAllScenesResponseCallback
      implements ChipClusters.ScenesCluster.RemoveAllScenesResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(groupId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedRemoveSceneResponseCallback
      implements ChipClusters.ScenesCluster.RemoveSceneResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId, int sceneId) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(groupId);
      responseValues.add(sceneId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedStoreSceneResponseCallback
      implements ChipClusters.ScenesCluster.StoreSceneResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId, int sceneId) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(groupId);
      responseValues.add(sceneId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedViewSceneResponseCallback
      implements ChipClusters.ScenesCluster.ViewSceneResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId, int sceneId, int transitionTime, String sceneName
        // extensionFieldSets: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        ) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(groupId);
      responseValues.add(sceneId);
      responseValues.add(transitionTime);
      responseValues.add(sceneName);
      // extensionFieldSets: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedChangeChannelResponseCallback
      implements ChipClusters.TvChannelCluster.ChangeChannelResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        // ChannelMatch: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        int ErrorType) {
      List<Object> responseValues = new ArrayList<>();
      // ChannelMatch: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      responseValues.add(ErrorType);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedNavigateTargetResponseCallback
      implements ChipClusters.TargetNavigatorCluster.NavigateTargetResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, String data) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(data);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedTestAddArgumentsResponseCallback
      implements ChipClusters.TestClusterCluster.TestAddArgumentsResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int returnValue) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(returnValue);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedTestSpecificResponseCallback
      implements ChipClusters.TestClusterCluster.TestSpecificResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int returnValue) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(returnValue);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public Map<String, ClusterInfo> getClusterMap() {
    Map<String, ClusterInfo> clusterMap = new HashMap<>();
    Map<String, CommandInfo> accountLoginClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> accountLogingetSetupPINCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter accountLogingetSetupPINCommandParameter =
        new CommandParameter(
            "AccountLogin", ChipClusters.AccountLoginCluster.GetSetupPINResponseCallback.class);
    CommandParameter accountLogingetSetupPINtempAccountIdentifierCommandParameter =
        new CommandParameter("tempAccountIdentifier", String.class);
    accountLogingetSetupPINCommandParams.put(
        "tempAccountIdentifier", accountLogingetSetupPINtempAccountIdentifierCommandParameter);

    // Populate commands
    CommandInfo accountLogingetSetupPINCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AccountLoginCluster) cluster)
                  .getSetupPIN(
                      (ChipClusters.AccountLoginCluster.GetSetupPINResponseCallback) callback,
                      (String) commandArguments.get("tempAccountIdentifier"));
            },
            () -> new DelegatedGetSetupPINResponseCallback(),
            accountLogingetSetupPINCommandParams);
    accountLoginClusterCommandInfo.put("getSetupPIN", accountLogingetSetupPINCommandInfo);
    Map<String, CommandParameter> accountLoginloginCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter accountLoginloginCommandParameter =
        new CommandParameter("AccountLogin", ChipClusters.DefaultClusterCallback.class);
    CommandParameter accountLoginlogintempAccountIdentifierCommandParameter =
        new CommandParameter("tempAccountIdentifier", String.class);
    accountLoginloginCommandParams.put(
        "tempAccountIdentifier", accountLoginlogintempAccountIdentifierCommandParameter);

    CommandParameter accountLoginloginsetupPINCommandParameter =
        new CommandParameter("setupPIN", String.class);
    accountLoginloginCommandParams.put("setupPIN", accountLoginloginsetupPINCommandParameter);

    // Populate commands
    CommandInfo accountLoginloginCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AccountLoginCluster) cluster)
                  .login(
                      (DefaultClusterCallback) callback,
                      (String) commandArguments.get("tempAccountIdentifier"),
                      (String) commandArguments.get("setupPIN"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            accountLoginloginCommandParams);
    accountLoginClusterCommandInfo.put("login", accountLoginloginCommandInfo);
    // Populate cluster
    ClusterInfo accountLoginClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.AccountLoginCluster(ptr, endpointId),
            accountLoginClusterCommandInfo);
    clusterMap.put("accountLogin", accountLoginClusterInfo);
    Map<String, CommandInfo> administratorCommissioningClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter>
        administratorCommissioningopenBasicCommissioningWindowCommandParams =
            new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter administratorCommissioningopenBasicCommissioningWindowCommandParameter =
        new CommandParameter(
            "AdministratorCommissioning", ChipClusters.DefaultClusterCallback.class);
    CommandParameter
        administratorCommissioningopenBasicCommissioningWindowcommissioningTimeoutCommandParameter =
            new CommandParameter("commissioningTimeout", int.class);
    administratorCommissioningopenBasicCommissioningWindowCommandParams.put(
        "commissioningTimeout",
        administratorCommissioningopenBasicCommissioningWindowcommissioningTimeoutCommandParameter);

    // Populate commands
    CommandInfo administratorCommissioningopenBasicCommissioningWindowCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AdministratorCommissioningCluster) cluster)
                  .openBasicCommissioningWindow(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("commissioningTimeout"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            administratorCommissioningopenBasicCommissioningWindowCommandParams);
    administratorCommissioningClusterCommandInfo.put(
        "openBasicCommissioningWindow",
        administratorCommissioningopenBasicCommissioningWindowCommandInfo);
    Map<String, CommandParameter> administratorCommissioningopenCommissioningWindowCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter administratorCommissioningopenCommissioningWindowCommandParameter =
        new CommandParameter(
            "AdministratorCommissioning", ChipClusters.DefaultClusterCallback.class);
    CommandParameter
        administratorCommissioningopenCommissioningWindowcommissioningTimeoutCommandParameter =
            new CommandParameter("commissioningTimeout", int.class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "commissioningTimeout",
        administratorCommissioningopenCommissioningWindowcommissioningTimeoutCommandParameter);

    CommandParameter administratorCommissioningopenCommissioningWindowPAKEVerifierCommandParameter =
        new CommandParameter("PAKEVerifier", byte[].class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "PAKEVerifier",
        administratorCommissioningopenCommissioningWindowPAKEVerifierCommandParameter);

    CommandParameter
        administratorCommissioningopenCommissioningWindowdiscriminatorCommandParameter =
            new CommandParameter("discriminator", int.class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "discriminator",
        administratorCommissioningopenCommissioningWindowdiscriminatorCommandParameter);

    CommandParameter administratorCommissioningopenCommissioningWindowiterationsCommandParameter =
        new CommandParameter("iterations", long.class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "iterations", administratorCommissioningopenCommissioningWindowiterationsCommandParameter);

    CommandParameter administratorCommissioningopenCommissioningWindowsaltCommandParameter =
        new CommandParameter("salt", byte[].class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "salt", administratorCommissioningopenCommissioningWindowsaltCommandParameter);

    CommandParameter administratorCommissioningopenCommissioningWindowpasscodeIDCommandParameter =
        new CommandParameter("passcodeID", int.class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "passcodeID", administratorCommissioningopenCommissioningWindowpasscodeIDCommandParameter);

    // Populate commands
    CommandInfo administratorCommissioningopenCommissioningWindowCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AdministratorCommissioningCluster) cluster)
                  .openCommissioningWindow(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("commissioningTimeout"),
                      (byte[]) commandArguments.get("PAKEVerifier"),
                      (Integer) commandArguments.get("discriminator"),
                      (Long) commandArguments.get("iterations"),
                      (byte[]) commandArguments.get("salt"),
                      (Integer) commandArguments.get("passcodeID"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            administratorCommissioningopenCommissioningWindowCommandParams);
    administratorCommissioningClusterCommandInfo.put(
        "openCommissioningWindow", administratorCommissioningopenCommissioningWindowCommandInfo);
    Map<String, CommandParameter> administratorCommissioningrevokeCommissioningCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter administratorCommissioningrevokeCommissioningCommandParameter =
        new CommandParameter(
            "AdministratorCommissioning", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo administratorCommissioningrevokeCommissioningCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AdministratorCommissioningCluster) cluster)
                  .revokeCommissioning((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            administratorCommissioningrevokeCommissioningCommandParams);
    administratorCommissioningClusterCommandInfo.put(
        "revokeCommissioning", administratorCommissioningrevokeCommissioningCommandInfo);
    // Populate cluster
    ClusterInfo administratorCommissioningClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.AdministratorCommissioningCluster(ptr, endpointId),
            administratorCommissioningClusterCommandInfo);
    clusterMap.put("administratorCommissioning", administratorCommissioningClusterInfo);
    Map<String, CommandInfo> applicationBasicClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> applicationBasicchangeStatusCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter applicationBasicchangeStatusCommandParameter =
        new CommandParameter("ApplicationBasic", ChipClusters.DefaultClusterCallback.class);
    CommandParameter applicationBasicchangeStatusstatusCommandParameter =
        new CommandParameter("status", int.class);
    applicationBasicchangeStatusCommandParams.put(
        "status", applicationBasicchangeStatusstatusCommandParameter);

    // Populate commands
    CommandInfo applicationBasicchangeStatusCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationBasicCluster) cluster)
                  .changeStatus(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("status"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            applicationBasicchangeStatusCommandParams);
    applicationBasicClusterCommandInfo.put("changeStatus", applicationBasicchangeStatusCommandInfo);
    // Populate cluster
    ClusterInfo applicationBasicClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ApplicationBasicCluster(ptr, endpointId),
            applicationBasicClusterCommandInfo);
    clusterMap.put("applicationBasic", applicationBasicClusterInfo);
    Map<String, CommandInfo> applicationLauncherClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> applicationLauncherlaunchAppCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter applicationLauncherlaunchAppCommandParameter =
        new CommandParameter(
            "ApplicationLauncher",
            ChipClusters.ApplicationLauncherCluster.LaunchAppResponseCallback.class);
    CommandParameter applicationLauncherlaunchAppdataCommandParameter =
        new CommandParameter("data", String.class);
    applicationLauncherlaunchAppCommandParams.put(
        "data", applicationLauncherlaunchAppdataCommandParameter);

    CommandParameter applicationLauncherlaunchAppcatalogVendorIdCommandParameter =
        new CommandParameter("catalogVendorId", int.class);
    applicationLauncherlaunchAppCommandParams.put(
        "catalogVendorId", applicationLauncherlaunchAppcatalogVendorIdCommandParameter);

    CommandParameter applicationLauncherlaunchAppapplicationIdCommandParameter =
        new CommandParameter("applicationId", String.class);
    applicationLauncherlaunchAppCommandParams.put(
        "applicationId", applicationLauncherlaunchAppapplicationIdCommandParameter);

    // Populate commands
    CommandInfo applicationLauncherlaunchAppCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationLauncherCluster) cluster)
                  .launchApp(
                      (ChipClusters.ApplicationLauncherCluster.LaunchAppResponseCallback) callback,
                      (String) commandArguments.get("data"),
                      (Integer) commandArguments.get("catalogVendorId"),
                      (String) commandArguments.get("applicationId"));
            },
            () -> new DelegatedLaunchAppResponseCallback(),
            applicationLauncherlaunchAppCommandParams);
    applicationLauncherClusterCommandInfo.put("launchApp", applicationLauncherlaunchAppCommandInfo);
    // Populate cluster
    ClusterInfo applicationLauncherClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ApplicationLauncherCluster(ptr, endpointId),
            applicationLauncherClusterCommandInfo);
    clusterMap.put("applicationLauncher", applicationLauncherClusterInfo);
    Map<String, CommandInfo> audioOutputClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> audioOutputrenameOutputCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter audioOutputrenameOutputCommandParameter =
        new CommandParameter("AudioOutput", ChipClusters.DefaultClusterCallback.class);
    CommandParameter audioOutputrenameOutputindexCommandParameter =
        new CommandParameter("index", int.class);
    audioOutputrenameOutputCommandParams.put("index", audioOutputrenameOutputindexCommandParameter);

    CommandParameter audioOutputrenameOutputnameCommandParameter =
        new CommandParameter("name", String.class);
    audioOutputrenameOutputCommandParams.put("name", audioOutputrenameOutputnameCommandParameter);

    // Populate commands
    CommandInfo audioOutputrenameOutputCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AudioOutputCluster) cluster)
                  .renameOutput(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("index"),
                      (String) commandArguments.get("name"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            audioOutputrenameOutputCommandParams);
    audioOutputClusterCommandInfo.put("renameOutput", audioOutputrenameOutputCommandInfo);
    Map<String, CommandParameter> audioOutputselectOutputCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter audioOutputselectOutputCommandParameter =
        new CommandParameter("AudioOutput", ChipClusters.DefaultClusterCallback.class);
    CommandParameter audioOutputselectOutputindexCommandParameter =
        new CommandParameter("index", int.class);
    audioOutputselectOutputCommandParams.put("index", audioOutputselectOutputindexCommandParameter);

    // Populate commands
    CommandInfo audioOutputselectOutputCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AudioOutputCluster) cluster)
                  .selectOutput(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("index"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            audioOutputselectOutputCommandParams);
    audioOutputClusterCommandInfo.put("selectOutput", audioOutputselectOutputCommandInfo);
    // Populate cluster
    ClusterInfo audioOutputClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.AudioOutputCluster(ptr, endpointId),
            audioOutputClusterCommandInfo);
    clusterMap.put("audioOutput", audioOutputClusterInfo);
    Map<String, CommandInfo> barrierControlClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> barrierControlbarrierControlGoToPercentCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter barrierControlbarrierControlGoToPercentCommandParameter =
        new CommandParameter("BarrierControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter barrierControlbarrierControlGoToPercentpercentOpenCommandParameter =
        new CommandParameter("percentOpen", int.class);
    barrierControlbarrierControlGoToPercentCommandParams.put(
        "percentOpen", barrierControlbarrierControlGoToPercentpercentOpenCommandParameter);

    // Populate commands
    CommandInfo barrierControlbarrierControlGoToPercentCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BarrierControlCluster) cluster)
                  .barrierControlGoToPercent(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("percentOpen"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            barrierControlbarrierControlGoToPercentCommandParams);
    barrierControlClusterCommandInfo.put(
        "barrierControlGoToPercent", barrierControlbarrierControlGoToPercentCommandInfo);
    Map<String, CommandParameter> barrierControlbarrierControlStopCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter barrierControlbarrierControlStopCommandParameter =
        new CommandParameter("BarrierControl", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo barrierControlbarrierControlStopCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BarrierControlCluster) cluster)
                  .barrierControlStop((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            barrierControlbarrierControlStopCommandParams);
    barrierControlClusterCommandInfo.put(
        "barrierControlStop", barrierControlbarrierControlStopCommandInfo);
    // Populate cluster
    ClusterInfo barrierControlClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BarrierControlCluster(ptr, endpointId),
            barrierControlClusterCommandInfo);
    clusterMap.put("barrierControl", barrierControlClusterInfo);
    Map<String, CommandInfo> basicClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> basicmfgSpecificPingCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter basicmfgSpecificPingCommandParameter =
        new CommandParameter("Basic", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo basicmfgSpecificPingCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .mfgSpecificPing((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            basicmfgSpecificPingCommandParams);
    basicClusterCommandInfo.put("mfgSpecificPing", basicmfgSpecificPingCommandInfo);
    // Populate cluster
    ClusterInfo basicClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BasicCluster(ptr, endpointId),
            basicClusterCommandInfo);
    clusterMap.put("basic", basicClusterInfo);
    Map<String, CommandInfo> binaryInputBasicClusterCommandInfo = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo binaryInputBasicClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BinaryInputBasicCluster(ptr, endpointId),
            binaryInputBasicClusterCommandInfo);
    clusterMap.put("binaryInputBasic", binaryInputBasicClusterInfo);
    Map<String, CommandInfo> bindingClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> bindingbindCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter bindingbindCommandParameter =
        new CommandParameter("Binding", ChipClusters.DefaultClusterCallback.class);
    CommandParameter bindingbindnodeIdCommandParameter = new CommandParameter("nodeId", long.class);
    bindingbindCommandParams.put("nodeId", bindingbindnodeIdCommandParameter);

    CommandParameter bindingbindgroupIdCommandParameter =
        new CommandParameter("groupId", int.class);
    bindingbindCommandParams.put("groupId", bindingbindgroupIdCommandParameter);

    CommandParameter bindingbindendpointIdCommandParameter =
        new CommandParameter("endpointId", int.class);
    bindingbindCommandParams.put("endpointId", bindingbindendpointIdCommandParameter);

    CommandParameter bindingbindclusterIdCommandParameter =
        new CommandParameter("clusterId", long.class);
    bindingbindCommandParams.put("clusterId", bindingbindclusterIdCommandParameter);

    // Populate commands
    CommandInfo bindingbindCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BindingCluster) cluster)
                  .bind(
                      (DefaultClusterCallback) callback,
                      (Long) commandArguments.get("nodeId"),
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("endpointId"),
                      (Long) commandArguments.get("clusterId"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bindingbindCommandParams);
    bindingClusterCommandInfo.put("bind", bindingbindCommandInfo);
    Map<String, CommandParameter> bindingunbindCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter bindingunbindCommandParameter =
        new CommandParameter("Binding", ChipClusters.DefaultClusterCallback.class);
    CommandParameter bindingunbindnodeIdCommandParameter =
        new CommandParameter("nodeId", long.class);
    bindingunbindCommandParams.put("nodeId", bindingunbindnodeIdCommandParameter);

    CommandParameter bindingunbindgroupIdCommandParameter =
        new CommandParameter("groupId", int.class);
    bindingunbindCommandParams.put("groupId", bindingunbindgroupIdCommandParameter);

    CommandParameter bindingunbindendpointIdCommandParameter =
        new CommandParameter("endpointId", int.class);
    bindingunbindCommandParams.put("endpointId", bindingunbindendpointIdCommandParameter);

    CommandParameter bindingunbindclusterIdCommandParameter =
        new CommandParameter("clusterId", long.class);
    bindingunbindCommandParams.put("clusterId", bindingunbindclusterIdCommandParameter);

    // Populate commands
    CommandInfo bindingunbindCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BindingCluster) cluster)
                  .unbind(
                      (DefaultClusterCallback) callback,
                      (Long) commandArguments.get("nodeId"),
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("endpointId"),
                      (Long) commandArguments.get("clusterId"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bindingunbindCommandParams);
    bindingClusterCommandInfo.put("unbind", bindingunbindCommandInfo);
    // Populate cluster
    ClusterInfo bindingClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BindingCluster(ptr, endpointId),
            bindingClusterCommandInfo);
    clusterMap.put("binding", bindingClusterInfo);
    Map<String, CommandInfo> bridgedDeviceBasicClusterCommandInfo = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo bridgedDeviceBasicClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BridgedDeviceBasicCluster(ptr, endpointId),
            bridgedDeviceBasicClusterCommandInfo);
    clusterMap.put("bridgedDeviceBasic", bridgedDeviceBasicClusterInfo);
    Map<String, CommandInfo> colorControlClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> colorControlcolorLoopSetCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlcolorLoopSetCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlcolorLoopSetupdateFlagsCommandParameter =
        new CommandParameter("updateFlags", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "updateFlags", colorControlcolorLoopSetupdateFlagsCommandParameter);

    CommandParameter colorControlcolorLoopSetactionCommandParameter =
        new CommandParameter("action", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "action", colorControlcolorLoopSetactionCommandParameter);

    CommandParameter colorControlcolorLoopSetdirectionCommandParameter =
        new CommandParameter("direction", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "direction", colorControlcolorLoopSetdirectionCommandParameter);

    CommandParameter colorControlcolorLoopSettimeCommandParameter =
        new CommandParameter("time", int.class);
    colorControlcolorLoopSetCommandParams.put("time", colorControlcolorLoopSettimeCommandParameter);

    CommandParameter colorControlcolorLoopSetstartHueCommandParameter =
        new CommandParameter("startHue", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "startHue", colorControlcolorLoopSetstartHueCommandParameter);

    CommandParameter colorControlcolorLoopSetoptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "optionsMask", colorControlcolorLoopSetoptionsMaskCommandParameter);

    CommandParameter colorControlcolorLoopSetoptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "optionsOverride", colorControlcolorLoopSetoptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlcolorLoopSetCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .colorLoopSet(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("updateFlags"),
                      (Integer) commandArguments.get("action"),
                      (Integer) commandArguments.get("direction"),
                      (Integer) commandArguments.get("time"),
                      (Integer) commandArguments.get("startHue"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlcolorLoopSetCommandParams);
    colorControlClusterCommandInfo.put("colorLoopSet", colorControlcolorLoopSetCommandInfo);
    Map<String, CommandParameter> colorControlenhancedMoveHueCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlenhancedMoveHueCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlenhancedMoveHuemoveModeCommandParameter =
        new CommandParameter("moveMode", int.class);
    colorControlenhancedMoveHueCommandParams.put(
        "moveMode", colorControlenhancedMoveHuemoveModeCommandParameter);

    CommandParameter colorControlenhancedMoveHuerateCommandParameter =
        new CommandParameter("rate", int.class);
    colorControlenhancedMoveHueCommandParams.put(
        "rate", colorControlenhancedMoveHuerateCommandParameter);

    CommandParameter colorControlenhancedMoveHueoptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlenhancedMoveHueCommandParams.put(
        "optionsMask", colorControlenhancedMoveHueoptionsMaskCommandParameter);

    CommandParameter colorControlenhancedMoveHueoptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlenhancedMoveHueCommandParams.put(
        "optionsOverride", colorControlenhancedMoveHueoptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlenhancedMoveHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .enhancedMoveHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlenhancedMoveHueCommandParams);
    colorControlClusterCommandInfo.put("enhancedMoveHue", colorControlenhancedMoveHueCommandInfo);
    Map<String, CommandParameter> colorControlenhancedMoveToHueCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlenhancedMoveToHueCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlenhancedMoveToHueenhancedHueCommandParameter =
        new CommandParameter("enhancedHue", int.class);
    colorControlenhancedMoveToHueCommandParams.put(
        "enhancedHue", colorControlenhancedMoveToHueenhancedHueCommandParameter);

    CommandParameter colorControlenhancedMoveToHuedirectionCommandParameter =
        new CommandParameter("direction", int.class);
    colorControlenhancedMoveToHueCommandParams.put(
        "direction", colorControlenhancedMoveToHuedirectionCommandParameter);

    CommandParameter colorControlenhancedMoveToHuetransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControlenhancedMoveToHueCommandParams.put(
        "transitionTime", colorControlenhancedMoveToHuetransitionTimeCommandParameter);

    CommandParameter colorControlenhancedMoveToHueoptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlenhancedMoveToHueCommandParams.put(
        "optionsMask", colorControlenhancedMoveToHueoptionsMaskCommandParameter);

    CommandParameter colorControlenhancedMoveToHueoptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlenhancedMoveToHueCommandParams.put(
        "optionsOverride", colorControlenhancedMoveToHueoptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlenhancedMoveToHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .enhancedMoveToHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("enhancedHue"),
                      (Integer) commandArguments.get("direction"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlenhancedMoveToHueCommandParams);
    colorControlClusterCommandInfo.put(
        "enhancedMoveToHue", colorControlenhancedMoveToHueCommandInfo);
    Map<String, CommandParameter> colorControlenhancedMoveToHueAndSaturationCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlenhancedMoveToHueAndSaturationCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlenhancedMoveToHueAndSaturationenhancedHueCommandParameter =
        new CommandParameter("enhancedHue", int.class);
    colorControlenhancedMoveToHueAndSaturationCommandParams.put(
        "enhancedHue", colorControlenhancedMoveToHueAndSaturationenhancedHueCommandParameter);

    CommandParameter colorControlenhancedMoveToHueAndSaturationsaturationCommandParameter =
        new CommandParameter("saturation", int.class);
    colorControlenhancedMoveToHueAndSaturationCommandParams.put(
        "saturation", colorControlenhancedMoveToHueAndSaturationsaturationCommandParameter);

    CommandParameter colorControlenhancedMoveToHueAndSaturationtransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControlenhancedMoveToHueAndSaturationCommandParams.put(
        "transitionTime", colorControlenhancedMoveToHueAndSaturationtransitionTimeCommandParameter);

    CommandParameter colorControlenhancedMoveToHueAndSaturationoptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlenhancedMoveToHueAndSaturationCommandParams.put(
        "optionsMask", colorControlenhancedMoveToHueAndSaturationoptionsMaskCommandParameter);

    CommandParameter colorControlenhancedMoveToHueAndSaturationoptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlenhancedMoveToHueAndSaturationCommandParams.put(
        "optionsOverride",
        colorControlenhancedMoveToHueAndSaturationoptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlenhancedMoveToHueAndSaturationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .enhancedMoveToHueAndSaturation(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("enhancedHue"),
                      (Integer) commandArguments.get("saturation"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlenhancedMoveToHueAndSaturationCommandParams);
    colorControlClusterCommandInfo.put(
        "enhancedMoveToHueAndSaturation", colorControlenhancedMoveToHueAndSaturationCommandInfo);
    Map<String, CommandParameter> colorControlenhancedStepHueCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlenhancedStepHueCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlenhancedStepHuestepModeCommandParameter =
        new CommandParameter("stepMode", int.class);
    colorControlenhancedStepHueCommandParams.put(
        "stepMode", colorControlenhancedStepHuestepModeCommandParameter);

    CommandParameter colorControlenhancedStepHuestepSizeCommandParameter =
        new CommandParameter("stepSize", int.class);
    colorControlenhancedStepHueCommandParams.put(
        "stepSize", colorControlenhancedStepHuestepSizeCommandParameter);

    CommandParameter colorControlenhancedStepHuetransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControlenhancedStepHueCommandParams.put(
        "transitionTime", colorControlenhancedStepHuetransitionTimeCommandParameter);

    CommandParameter colorControlenhancedStepHueoptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlenhancedStepHueCommandParams.put(
        "optionsMask", colorControlenhancedStepHueoptionsMaskCommandParameter);

    CommandParameter colorControlenhancedStepHueoptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlenhancedStepHueCommandParams.put(
        "optionsOverride", colorControlenhancedStepHueoptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlenhancedStepHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .enhancedStepHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlenhancedStepHueCommandParams);
    colorControlClusterCommandInfo.put("enhancedStepHue", colorControlenhancedStepHueCommandInfo);
    Map<String, CommandParameter> colorControlmoveColorCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlmoveColorCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlmoveColorrateXCommandParameter =
        new CommandParameter("rateX", int.class);
    colorControlmoveColorCommandParams.put("rateX", colorControlmoveColorrateXCommandParameter);

    CommandParameter colorControlmoveColorrateYCommandParameter =
        new CommandParameter("rateY", int.class);
    colorControlmoveColorCommandParams.put("rateY", colorControlmoveColorrateYCommandParameter);

    CommandParameter colorControlmoveColoroptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlmoveColorCommandParams.put(
        "optionsMask", colorControlmoveColoroptionsMaskCommandParameter);

    CommandParameter colorControlmoveColoroptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlmoveColorCommandParams.put(
        "optionsOverride", colorControlmoveColoroptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlmoveColorCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveColor(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("rateX"),
                      (Integer) commandArguments.get("rateY"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveColorCommandParams);
    colorControlClusterCommandInfo.put("moveColor", colorControlmoveColorCommandInfo);
    Map<String, CommandParameter> colorControlmoveColorTemperatureCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlmoveColorTemperatureCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlmoveColorTemperaturemoveModeCommandParameter =
        new CommandParameter("moveMode", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "moveMode", colorControlmoveColorTemperaturemoveModeCommandParameter);

    CommandParameter colorControlmoveColorTemperaturerateCommandParameter =
        new CommandParameter("rate", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "rate", colorControlmoveColorTemperaturerateCommandParameter);

    CommandParameter colorControlmoveColorTemperaturecolorTemperatureMinimumCommandParameter =
        new CommandParameter("colorTemperatureMinimum", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "colorTemperatureMinimum",
        colorControlmoveColorTemperaturecolorTemperatureMinimumCommandParameter);

    CommandParameter colorControlmoveColorTemperaturecolorTemperatureMaximumCommandParameter =
        new CommandParameter("colorTemperatureMaximum", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "colorTemperatureMaximum",
        colorControlmoveColorTemperaturecolorTemperatureMaximumCommandParameter);

    CommandParameter colorControlmoveColorTemperatureoptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "optionsMask", colorControlmoveColorTemperatureoptionsMaskCommandParameter);

    CommandParameter colorControlmoveColorTemperatureoptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "optionsOverride", colorControlmoveColorTemperatureoptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlmoveColorTemperatureCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveColorTemperature(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"),
                      (Integer) commandArguments.get("colorTemperatureMinimum"),
                      (Integer) commandArguments.get("colorTemperatureMaximum"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveColorTemperatureCommandParams);
    colorControlClusterCommandInfo.put(
        "moveColorTemperature", colorControlmoveColorTemperatureCommandInfo);
    Map<String, CommandParameter> colorControlmoveHueCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlmoveHueCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlmoveHuemoveModeCommandParameter =
        new CommandParameter("moveMode", int.class);
    colorControlmoveHueCommandParams.put("moveMode", colorControlmoveHuemoveModeCommandParameter);

    CommandParameter colorControlmoveHuerateCommandParameter =
        new CommandParameter("rate", int.class);
    colorControlmoveHueCommandParams.put("rate", colorControlmoveHuerateCommandParameter);

    CommandParameter colorControlmoveHueoptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlmoveHueCommandParams.put(
        "optionsMask", colorControlmoveHueoptionsMaskCommandParameter);

    CommandParameter colorControlmoveHueoptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlmoveHueCommandParams.put(
        "optionsOverride", colorControlmoveHueoptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlmoveHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveHueCommandParams);
    colorControlClusterCommandInfo.put("moveHue", colorControlmoveHueCommandInfo);
    Map<String, CommandParameter> colorControlmoveSaturationCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlmoveSaturationCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlmoveSaturationmoveModeCommandParameter =
        new CommandParameter("moveMode", int.class);
    colorControlmoveSaturationCommandParams.put(
        "moveMode", colorControlmoveSaturationmoveModeCommandParameter);

    CommandParameter colorControlmoveSaturationrateCommandParameter =
        new CommandParameter("rate", int.class);
    colorControlmoveSaturationCommandParams.put(
        "rate", colorControlmoveSaturationrateCommandParameter);

    CommandParameter colorControlmoveSaturationoptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlmoveSaturationCommandParams.put(
        "optionsMask", colorControlmoveSaturationoptionsMaskCommandParameter);

    CommandParameter colorControlmoveSaturationoptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlmoveSaturationCommandParams.put(
        "optionsOverride", colorControlmoveSaturationoptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlmoveSaturationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveSaturation(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveSaturationCommandParams);
    colorControlClusterCommandInfo.put("moveSaturation", colorControlmoveSaturationCommandInfo);
    Map<String, CommandParameter> colorControlmoveToColorCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlmoveToColorCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlmoveToColorcolorXCommandParameter =
        new CommandParameter("colorX", int.class);
    colorControlmoveToColorCommandParams.put(
        "colorX", colorControlmoveToColorcolorXCommandParameter);

    CommandParameter colorControlmoveToColorcolorYCommandParameter =
        new CommandParameter("colorY", int.class);
    colorControlmoveToColorCommandParams.put(
        "colorY", colorControlmoveToColorcolorYCommandParameter);

    CommandParameter colorControlmoveToColortransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControlmoveToColorCommandParams.put(
        "transitionTime", colorControlmoveToColortransitionTimeCommandParameter);

    CommandParameter colorControlmoveToColoroptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlmoveToColorCommandParams.put(
        "optionsMask", colorControlmoveToColoroptionsMaskCommandParameter);

    CommandParameter colorControlmoveToColoroptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlmoveToColorCommandParams.put(
        "optionsOverride", colorControlmoveToColoroptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlmoveToColorCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveToColor(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("colorX"),
                      (Integer) commandArguments.get("colorY"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveToColorCommandParams);
    colorControlClusterCommandInfo.put("moveToColor", colorControlmoveToColorCommandInfo);
    Map<String, CommandParameter> colorControlmoveToColorTemperatureCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlmoveToColorTemperatureCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlmoveToColorTemperaturecolorTemperatureCommandParameter =
        new CommandParameter("colorTemperature", int.class);
    colorControlmoveToColorTemperatureCommandParams.put(
        "colorTemperature", colorControlmoveToColorTemperaturecolorTemperatureCommandParameter);

    CommandParameter colorControlmoveToColorTemperaturetransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControlmoveToColorTemperatureCommandParams.put(
        "transitionTime", colorControlmoveToColorTemperaturetransitionTimeCommandParameter);

    CommandParameter colorControlmoveToColorTemperatureoptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlmoveToColorTemperatureCommandParams.put(
        "optionsMask", colorControlmoveToColorTemperatureoptionsMaskCommandParameter);

    CommandParameter colorControlmoveToColorTemperatureoptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlmoveToColorTemperatureCommandParams.put(
        "optionsOverride", colorControlmoveToColorTemperatureoptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlmoveToColorTemperatureCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveToColorTemperature(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("colorTemperature"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveToColorTemperatureCommandParams);
    colorControlClusterCommandInfo.put(
        "moveToColorTemperature", colorControlmoveToColorTemperatureCommandInfo);
    Map<String, CommandParameter> colorControlmoveToHueCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlmoveToHueCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlmoveToHuehueCommandParameter =
        new CommandParameter("hue", int.class);
    colorControlmoveToHueCommandParams.put("hue", colorControlmoveToHuehueCommandParameter);

    CommandParameter colorControlmoveToHuedirectionCommandParameter =
        new CommandParameter("direction", int.class);
    colorControlmoveToHueCommandParams.put(
        "direction", colorControlmoveToHuedirectionCommandParameter);

    CommandParameter colorControlmoveToHuetransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControlmoveToHueCommandParams.put(
        "transitionTime", colorControlmoveToHuetransitionTimeCommandParameter);

    CommandParameter colorControlmoveToHueoptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlmoveToHueCommandParams.put(
        "optionsMask", colorControlmoveToHueoptionsMaskCommandParameter);

    CommandParameter colorControlmoveToHueoptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlmoveToHueCommandParams.put(
        "optionsOverride", colorControlmoveToHueoptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlmoveToHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveToHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("hue"),
                      (Integer) commandArguments.get("direction"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveToHueCommandParams);
    colorControlClusterCommandInfo.put("moveToHue", colorControlmoveToHueCommandInfo);
    Map<String, CommandParameter> colorControlmoveToHueAndSaturationCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlmoveToHueAndSaturationCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlmoveToHueAndSaturationhueCommandParameter =
        new CommandParameter("hue", int.class);
    colorControlmoveToHueAndSaturationCommandParams.put(
        "hue", colorControlmoveToHueAndSaturationhueCommandParameter);

    CommandParameter colorControlmoveToHueAndSaturationsaturationCommandParameter =
        new CommandParameter("saturation", int.class);
    colorControlmoveToHueAndSaturationCommandParams.put(
        "saturation", colorControlmoveToHueAndSaturationsaturationCommandParameter);

    CommandParameter colorControlmoveToHueAndSaturationtransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControlmoveToHueAndSaturationCommandParams.put(
        "transitionTime", colorControlmoveToHueAndSaturationtransitionTimeCommandParameter);

    CommandParameter colorControlmoveToHueAndSaturationoptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlmoveToHueAndSaturationCommandParams.put(
        "optionsMask", colorControlmoveToHueAndSaturationoptionsMaskCommandParameter);

    CommandParameter colorControlmoveToHueAndSaturationoptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlmoveToHueAndSaturationCommandParams.put(
        "optionsOverride", colorControlmoveToHueAndSaturationoptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlmoveToHueAndSaturationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveToHueAndSaturation(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("hue"),
                      (Integer) commandArguments.get("saturation"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveToHueAndSaturationCommandParams);
    colorControlClusterCommandInfo.put(
        "moveToHueAndSaturation", colorControlmoveToHueAndSaturationCommandInfo);
    Map<String, CommandParameter> colorControlmoveToSaturationCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlmoveToSaturationCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlmoveToSaturationsaturationCommandParameter =
        new CommandParameter("saturation", int.class);
    colorControlmoveToSaturationCommandParams.put(
        "saturation", colorControlmoveToSaturationsaturationCommandParameter);

    CommandParameter colorControlmoveToSaturationtransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControlmoveToSaturationCommandParams.put(
        "transitionTime", colorControlmoveToSaturationtransitionTimeCommandParameter);

    CommandParameter colorControlmoveToSaturationoptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlmoveToSaturationCommandParams.put(
        "optionsMask", colorControlmoveToSaturationoptionsMaskCommandParameter);

    CommandParameter colorControlmoveToSaturationoptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlmoveToSaturationCommandParams.put(
        "optionsOverride", colorControlmoveToSaturationoptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlmoveToSaturationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveToSaturation(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("saturation"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveToSaturationCommandParams);
    colorControlClusterCommandInfo.put("moveToSaturation", colorControlmoveToSaturationCommandInfo);
    Map<String, CommandParameter> colorControlstepColorCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlstepColorCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlstepColorstepXCommandParameter =
        new CommandParameter("stepX", int.class);
    colorControlstepColorCommandParams.put("stepX", colorControlstepColorstepXCommandParameter);

    CommandParameter colorControlstepColorstepYCommandParameter =
        new CommandParameter("stepY", int.class);
    colorControlstepColorCommandParams.put("stepY", colorControlstepColorstepYCommandParameter);

    CommandParameter colorControlstepColortransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControlstepColorCommandParams.put(
        "transitionTime", colorControlstepColortransitionTimeCommandParameter);

    CommandParameter colorControlstepColoroptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlstepColorCommandParams.put(
        "optionsMask", colorControlstepColoroptionsMaskCommandParameter);

    CommandParameter colorControlstepColoroptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlstepColorCommandParams.put(
        "optionsOverride", colorControlstepColoroptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlstepColorCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .stepColor(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepX"),
                      (Integer) commandArguments.get("stepY"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlstepColorCommandParams);
    colorControlClusterCommandInfo.put("stepColor", colorControlstepColorCommandInfo);
    Map<String, CommandParameter> colorControlstepColorTemperatureCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlstepColorTemperatureCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlstepColorTemperaturestepModeCommandParameter =
        new CommandParameter("stepMode", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "stepMode", colorControlstepColorTemperaturestepModeCommandParameter);

    CommandParameter colorControlstepColorTemperaturestepSizeCommandParameter =
        new CommandParameter("stepSize", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "stepSize", colorControlstepColorTemperaturestepSizeCommandParameter);

    CommandParameter colorControlstepColorTemperaturetransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "transitionTime", colorControlstepColorTemperaturetransitionTimeCommandParameter);

    CommandParameter colorControlstepColorTemperaturecolorTemperatureMinimumCommandParameter =
        new CommandParameter("colorTemperatureMinimum", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "colorTemperatureMinimum",
        colorControlstepColorTemperaturecolorTemperatureMinimumCommandParameter);

    CommandParameter colorControlstepColorTemperaturecolorTemperatureMaximumCommandParameter =
        new CommandParameter("colorTemperatureMaximum", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "colorTemperatureMaximum",
        colorControlstepColorTemperaturecolorTemperatureMaximumCommandParameter);

    CommandParameter colorControlstepColorTemperatureoptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "optionsMask", colorControlstepColorTemperatureoptionsMaskCommandParameter);

    CommandParameter colorControlstepColorTemperatureoptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "optionsOverride", colorControlstepColorTemperatureoptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlstepColorTemperatureCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .stepColorTemperature(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("colorTemperatureMinimum"),
                      (Integer) commandArguments.get("colorTemperatureMaximum"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlstepColorTemperatureCommandParams);
    colorControlClusterCommandInfo.put(
        "stepColorTemperature", colorControlstepColorTemperatureCommandInfo);
    Map<String, CommandParameter> colorControlstepHueCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlstepHueCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlstepHuestepModeCommandParameter =
        new CommandParameter("stepMode", int.class);
    colorControlstepHueCommandParams.put("stepMode", colorControlstepHuestepModeCommandParameter);

    CommandParameter colorControlstepHuestepSizeCommandParameter =
        new CommandParameter("stepSize", int.class);
    colorControlstepHueCommandParams.put("stepSize", colorControlstepHuestepSizeCommandParameter);

    CommandParameter colorControlstepHuetransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControlstepHueCommandParams.put(
        "transitionTime", colorControlstepHuetransitionTimeCommandParameter);

    CommandParameter colorControlstepHueoptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlstepHueCommandParams.put(
        "optionsMask", colorControlstepHueoptionsMaskCommandParameter);

    CommandParameter colorControlstepHueoptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlstepHueCommandParams.put(
        "optionsOverride", colorControlstepHueoptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlstepHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .stepHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlstepHueCommandParams);
    colorControlClusterCommandInfo.put("stepHue", colorControlstepHueCommandInfo);
    Map<String, CommandParameter> colorControlstepSaturationCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlstepSaturationCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlstepSaturationstepModeCommandParameter =
        new CommandParameter("stepMode", int.class);
    colorControlstepSaturationCommandParams.put(
        "stepMode", colorControlstepSaturationstepModeCommandParameter);

    CommandParameter colorControlstepSaturationstepSizeCommandParameter =
        new CommandParameter("stepSize", int.class);
    colorControlstepSaturationCommandParams.put(
        "stepSize", colorControlstepSaturationstepSizeCommandParameter);

    CommandParameter colorControlstepSaturationtransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControlstepSaturationCommandParams.put(
        "transitionTime", colorControlstepSaturationtransitionTimeCommandParameter);

    CommandParameter colorControlstepSaturationoptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlstepSaturationCommandParams.put(
        "optionsMask", colorControlstepSaturationoptionsMaskCommandParameter);

    CommandParameter colorControlstepSaturationoptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlstepSaturationCommandParams.put(
        "optionsOverride", colorControlstepSaturationoptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlstepSaturationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .stepSaturation(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlstepSaturationCommandParams);
    colorControlClusterCommandInfo.put("stepSaturation", colorControlstepSaturationCommandInfo);
    Map<String, CommandParameter> colorControlstopMoveStepCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter colorControlstopMoveStepCommandParameter =
        new CommandParameter("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter colorControlstopMoveStepoptionsMaskCommandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControlstopMoveStepCommandParams.put(
        "optionsMask", colorControlstopMoveStepoptionsMaskCommandParameter);

    CommandParameter colorControlstopMoveStepoptionsOverrideCommandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControlstopMoveStepCommandParams.put(
        "optionsOverride", colorControlstopMoveStepoptionsOverrideCommandParameter);

    // Populate commands
    CommandInfo colorControlstopMoveStepCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .stopMoveStep(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlstopMoveStepCommandParams);
    colorControlClusterCommandInfo.put("stopMoveStep", colorControlstopMoveStepCommandInfo);
    // Populate cluster
    ClusterInfo colorControlClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ColorControlCluster(ptr, endpointId),
            colorControlClusterCommandInfo);
    clusterMap.put("colorControl", colorControlClusterInfo);
    Map<String, CommandInfo> contentLauncherClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> contentLauncherlaunchContentCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter contentLauncherlaunchContentCommandParameter =
        new CommandParameter(
            "ContentLauncher",
            ChipClusters.ContentLauncherCluster.LaunchContentResponseCallback.class);
    CommandParameter contentLauncherlaunchContentautoPlayCommandParameter =
        new CommandParameter("autoPlay", boolean.class);
    contentLauncherlaunchContentCommandParams.put(
        "autoPlay", contentLauncherlaunchContentautoPlayCommandParameter);

    CommandParameter contentLauncherlaunchContentdataCommandParameter =
        new CommandParameter("data", String.class);
    contentLauncherlaunchContentCommandParams.put(
        "data", contentLauncherlaunchContentdataCommandParameter);

    // Populate commands
    CommandInfo contentLauncherlaunchContentCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ContentLauncherCluster) cluster)
                  .launchContent(
                      (ChipClusters.ContentLauncherCluster.LaunchContentResponseCallback) callback,
                      (Boolean) commandArguments.get("autoPlay"),
                      (String) commandArguments.get("data"));
            },
            () -> new DelegatedLaunchContentResponseCallback(),
            contentLauncherlaunchContentCommandParams);
    contentLauncherClusterCommandInfo.put("launchContent", contentLauncherlaunchContentCommandInfo);
    Map<String, CommandParameter> contentLauncherlaunchURLCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter contentLauncherlaunchURLCommandParameter =
        new CommandParameter(
            "ContentLauncher", ChipClusters.ContentLauncherCluster.LaunchURLResponseCallback.class);
    CommandParameter contentLauncherlaunchURLcontentURLCommandParameter =
        new CommandParameter("contentURL", String.class);
    contentLauncherlaunchURLCommandParams.put(
        "contentURL", contentLauncherlaunchURLcontentURLCommandParameter);

    CommandParameter contentLauncherlaunchURLdisplayStringCommandParameter =
        new CommandParameter("displayString", String.class);
    contentLauncherlaunchURLCommandParams.put(
        "displayString", contentLauncherlaunchURLdisplayStringCommandParameter);

    // Populate commands
    CommandInfo contentLauncherlaunchURLCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ContentLauncherCluster) cluster)
                  .launchURL(
                      (ChipClusters.ContentLauncherCluster.LaunchURLResponseCallback) callback,
                      (String) commandArguments.get("contentURL"),
                      (String) commandArguments.get("displayString"));
            },
            () -> new DelegatedLaunchURLResponseCallback(),
            contentLauncherlaunchURLCommandParams);
    contentLauncherClusterCommandInfo.put("launchURL", contentLauncherlaunchURLCommandInfo);
    // Populate cluster
    ClusterInfo contentLauncherClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ContentLauncherCluster(ptr, endpointId),
            contentLauncherClusterCommandInfo);
    clusterMap.put("contentLauncher", contentLauncherClusterInfo);
    Map<String, CommandInfo> descriptorClusterCommandInfo = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo descriptorClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.DescriptorCluster(ptr, endpointId),
            descriptorClusterCommandInfo);
    clusterMap.put("descriptor", descriptorClusterInfo);
    Map<String, CommandInfo> diagnosticLogsClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> diagnosticLogsretrieveLogsRequestCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter diagnosticLogsretrieveLogsRequestCommandParameter =
        new CommandParameter("DiagnosticLogs", ChipClusters.DefaultClusterCallback.class);
    CommandParameter diagnosticLogsretrieveLogsRequestintentCommandParameter =
        new CommandParameter("intent", int.class);
    diagnosticLogsretrieveLogsRequestCommandParams.put(
        "intent", diagnosticLogsretrieveLogsRequestintentCommandParameter);

    CommandParameter diagnosticLogsretrieveLogsRequestrequestedProtocolCommandParameter =
        new CommandParameter("requestedProtocol", int.class);
    diagnosticLogsretrieveLogsRequestCommandParams.put(
        "requestedProtocol", diagnosticLogsretrieveLogsRequestrequestedProtocolCommandParameter);

    CommandParameter diagnosticLogsretrieveLogsRequesttransferFileDesignatorCommandParameter =
        new CommandParameter("transferFileDesignator", byte[].class);
    diagnosticLogsretrieveLogsRequestCommandParams.put(
        "transferFileDesignator",
        diagnosticLogsretrieveLogsRequesttransferFileDesignatorCommandParameter);

    // Populate commands
    CommandInfo diagnosticLogsretrieveLogsRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DiagnosticLogsCluster) cluster)
                  .retrieveLogsRequest(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("intent"),
                      (Integer) commandArguments.get("requestedProtocol"),
                      (byte[]) commandArguments.get("transferFileDesignator"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            diagnosticLogsretrieveLogsRequestCommandParams);
    diagnosticLogsClusterCommandInfo.put(
        "retrieveLogsRequest", diagnosticLogsretrieveLogsRequestCommandInfo);
    // Populate cluster
    ClusterInfo diagnosticLogsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.DiagnosticLogsCluster(ptr, endpointId),
            diagnosticLogsClusterCommandInfo);
    clusterMap.put("diagnosticLogs", diagnosticLogsClusterInfo);
    Map<String, CommandInfo> doorLockClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> doorLockclearAllPinsCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLockclearAllPinsCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.ClearAllPinsResponseCallback.class);
    // Populate commands
    CommandInfo doorLockclearAllPinsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearAllPins(
                      (ChipClusters.DoorLockCluster.ClearAllPinsResponseCallback) callback);
            },
            () -> new DelegatedClearAllPinsResponseCallback(),
            doorLockclearAllPinsCommandParams);
    doorLockClusterCommandInfo.put("clearAllPins", doorLockclearAllPinsCommandInfo);
    Map<String, CommandParameter> doorLockclearAllRfidsCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLockclearAllRfidsCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.ClearAllRfidsResponseCallback.class);
    // Populate commands
    CommandInfo doorLockclearAllRfidsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearAllRfids(
                      (ChipClusters.DoorLockCluster.ClearAllRfidsResponseCallback) callback);
            },
            () -> new DelegatedClearAllRfidsResponseCallback(),
            doorLockclearAllRfidsCommandParams);
    doorLockClusterCommandInfo.put("clearAllRfids", doorLockclearAllRfidsCommandInfo);
    Map<String, CommandParameter> doorLockclearHolidayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLockclearHolidayScheduleCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.ClearHolidayScheduleResponseCallback.class);
    CommandParameter doorLockclearHolidaySchedulescheduleIdCommandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLockclearHolidayScheduleCommandParams.put(
        "scheduleId", doorLockclearHolidaySchedulescheduleIdCommandParameter);

    // Populate commands
    CommandInfo doorLockclearHolidayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearHolidaySchedule(
                      (ChipClusters.DoorLockCluster.ClearHolidayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"));
            },
            () -> new DelegatedClearHolidayScheduleResponseCallback(),
            doorLockclearHolidayScheduleCommandParams);
    doorLockClusterCommandInfo.put("clearHolidaySchedule", doorLockclearHolidayScheduleCommandInfo);
    Map<String, CommandParameter> doorLockclearPinCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLockclearPinCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.ClearPinResponseCallback.class);
    CommandParameter doorLockclearPinuserIdCommandParameter =
        new CommandParameter("userId", int.class);
    doorLockclearPinCommandParams.put("userId", doorLockclearPinuserIdCommandParameter);

    // Populate commands
    CommandInfo doorLockclearPinCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearPin(
                      (ChipClusters.DoorLockCluster.ClearPinResponseCallback) callback,
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedClearPinResponseCallback(),
            doorLockclearPinCommandParams);
    doorLockClusterCommandInfo.put("clearPin", doorLockclearPinCommandInfo);
    Map<String, CommandParameter> doorLockclearRfidCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLockclearRfidCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.ClearRfidResponseCallback.class);
    CommandParameter doorLockclearRfiduserIdCommandParameter =
        new CommandParameter("userId", int.class);
    doorLockclearRfidCommandParams.put("userId", doorLockclearRfiduserIdCommandParameter);

    // Populate commands
    CommandInfo doorLockclearRfidCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearRfid(
                      (ChipClusters.DoorLockCluster.ClearRfidResponseCallback) callback,
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedClearRfidResponseCallback(),
            doorLockclearRfidCommandParams);
    doorLockClusterCommandInfo.put("clearRfid", doorLockclearRfidCommandInfo);
    Map<String, CommandParameter> doorLockclearWeekdayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLockclearWeekdayScheduleCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.ClearWeekdayScheduleResponseCallback.class);
    CommandParameter doorLockclearWeekdaySchedulescheduleIdCommandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLockclearWeekdayScheduleCommandParams.put(
        "scheduleId", doorLockclearWeekdaySchedulescheduleIdCommandParameter);

    CommandParameter doorLockclearWeekdayScheduleuserIdCommandParameter =
        new CommandParameter("userId", int.class);
    doorLockclearWeekdayScheduleCommandParams.put(
        "userId", doorLockclearWeekdayScheduleuserIdCommandParameter);

    // Populate commands
    CommandInfo doorLockclearWeekdayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearWeekdaySchedule(
                      (ChipClusters.DoorLockCluster.ClearWeekdayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedClearWeekdayScheduleResponseCallback(),
            doorLockclearWeekdayScheduleCommandParams);
    doorLockClusterCommandInfo.put("clearWeekdaySchedule", doorLockclearWeekdayScheduleCommandInfo);
    Map<String, CommandParameter> doorLockclearYeardayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLockclearYeardayScheduleCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.ClearYeardayScheduleResponseCallback.class);
    CommandParameter doorLockclearYeardaySchedulescheduleIdCommandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLockclearYeardayScheduleCommandParams.put(
        "scheduleId", doorLockclearYeardaySchedulescheduleIdCommandParameter);

    CommandParameter doorLockclearYeardayScheduleuserIdCommandParameter =
        new CommandParameter("userId", int.class);
    doorLockclearYeardayScheduleCommandParams.put(
        "userId", doorLockclearYeardayScheduleuserIdCommandParameter);

    // Populate commands
    CommandInfo doorLockclearYeardayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearYeardaySchedule(
                      (ChipClusters.DoorLockCluster.ClearYeardayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedClearYeardayScheduleResponseCallback(),
            doorLockclearYeardayScheduleCommandParams);
    doorLockClusterCommandInfo.put("clearYeardaySchedule", doorLockclearYeardayScheduleCommandInfo);
    Map<String, CommandParameter> doorLockgetHolidayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLockgetHolidayScheduleCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.GetHolidayScheduleResponseCallback.class);
    CommandParameter doorLockgetHolidaySchedulescheduleIdCommandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLockgetHolidayScheduleCommandParams.put(
        "scheduleId", doorLockgetHolidaySchedulescheduleIdCommandParameter);

    // Populate commands
    CommandInfo doorLockgetHolidayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getHolidaySchedule(
                      (ChipClusters.DoorLockCluster.GetHolidayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"));
            },
            () -> new DelegatedGetHolidayScheduleResponseCallback(),
            doorLockgetHolidayScheduleCommandParams);
    doorLockClusterCommandInfo.put("getHolidaySchedule", doorLockgetHolidayScheduleCommandInfo);
    Map<String, CommandParameter> doorLockgetLogRecordCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLockgetLogRecordCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.GetLogRecordResponseCallback.class);
    CommandParameter doorLockgetLogRecordlogIndexCommandParameter =
        new CommandParameter("logIndex", int.class);
    doorLockgetLogRecordCommandParams.put("logIndex", doorLockgetLogRecordlogIndexCommandParameter);

    // Populate commands
    CommandInfo doorLockgetLogRecordCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getLogRecord(
                      (ChipClusters.DoorLockCluster.GetLogRecordResponseCallback) callback,
                      (Integer) commandArguments.get("logIndex"));
            },
            () -> new DelegatedGetLogRecordResponseCallback(),
            doorLockgetLogRecordCommandParams);
    doorLockClusterCommandInfo.put("getLogRecord", doorLockgetLogRecordCommandInfo);
    Map<String, CommandParameter> doorLockgetPinCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLockgetPinCommandParameter =
        new CommandParameter("DoorLock", ChipClusters.DoorLockCluster.GetPinResponseCallback.class);
    CommandParameter doorLockgetPinuserIdCommandParameter =
        new CommandParameter("userId", int.class);
    doorLockgetPinCommandParams.put("userId", doorLockgetPinuserIdCommandParameter);

    // Populate commands
    CommandInfo doorLockgetPinCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getPin(
                      (ChipClusters.DoorLockCluster.GetPinResponseCallback) callback,
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedGetPinResponseCallback(),
            doorLockgetPinCommandParams);
    doorLockClusterCommandInfo.put("getPin", doorLockgetPinCommandInfo);
    Map<String, CommandParameter> doorLockgetRfidCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLockgetRfidCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.GetRfidResponseCallback.class);
    CommandParameter doorLockgetRfiduserIdCommandParameter =
        new CommandParameter("userId", int.class);
    doorLockgetRfidCommandParams.put("userId", doorLockgetRfiduserIdCommandParameter);

    // Populate commands
    CommandInfo doorLockgetRfidCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getRfid(
                      (ChipClusters.DoorLockCluster.GetRfidResponseCallback) callback,
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedGetRfidResponseCallback(),
            doorLockgetRfidCommandParams);
    doorLockClusterCommandInfo.put("getRfid", doorLockgetRfidCommandInfo);
    Map<String, CommandParameter> doorLockgetUserTypeCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLockgetUserTypeCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.GetUserTypeResponseCallback.class);
    CommandParameter doorLockgetUserTypeuserIdCommandParameter =
        new CommandParameter("userId", int.class);
    doorLockgetUserTypeCommandParams.put("userId", doorLockgetUserTypeuserIdCommandParameter);

    // Populate commands
    CommandInfo doorLockgetUserTypeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getUserType(
                      (ChipClusters.DoorLockCluster.GetUserTypeResponseCallback) callback,
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedGetUserTypeResponseCallback(),
            doorLockgetUserTypeCommandParams);
    doorLockClusterCommandInfo.put("getUserType", doorLockgetUserTypeCommandInfo);
    Map<String, CommandParameter> doorLockgetWeekdayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLockgetWeekdayScheduleCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.GetWeekdayScheduleResponseCallback.class);
    CommandParameter doorLockgetWeekdaySchedulescheduleIdCommandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLockgetWeekdayScheduleCommandParams.put(
        "scheduleId", doorLockgetWeekdaySchedulescheduleIdCommandParameter);

    CommandParameter doorLockgetWeekdayScheduleuserIdCommandParameter =
        new CommandParameter("userId", int.class);
    doorLockgetWeekdayScheduleCommandParams.put(
        "userId", doorLockgetWeekdayScheduleuserIdCommandParameter);

    // Populate commands
    CommandInfo doorLockgetWeekdayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getWeekdaySchedule(
                      (ChipClusters.DoorLockCluster.GetWeekdayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedGetWeekdayScheduleResponseCallback(),
            doorLockgetWeekdayScheduleCommandParams);
    doorLockClusterCommandInfo.put("getWeekdaySchedule", doorLockgetWeekdayScheduleCommandInfo);
    Map<String, CommandParameter> doorLockgetYeardayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLockgetYeardayScheduleCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.GetYeardayScheduleResponseCallback.class);
    CommandParameter doorLockgetYeardaySchedulescheduleIdCommandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLockgetYeardayScheduleCommandParams.put(
        "scheduleId", doorLockgetYeardaySchedulescheduleIdCommandParameter);

    CommandParameter doorLockgetYeardayScheduleuserIdCommandParameter =
        new CommandParameter("userId", int.class);
    doorLockgetYeardayScheduleCommandParams.put(
        "userId", doorLockgetYeardayScheduleuserIdCommandParameter);

    // Populate commands
    CommandInfo doorLockgetYeardayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getYeardaySchedule(
                      (ChipClusters.DoorLockCluster.GetYeardayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedGetYeardayScheduleResponseCallback(),
            doorLockgetYeardayScheduleCommandParams);
    doorLockClusterCommandInfo.put("getYeardaySchedule", doorLockgetYeardayScheduleCommandInfo);
    Map<String, CommandParameter> doorLocklockDoorCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLocklockDoorCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.LockDoorResponseCallback.class);
    CommandParameter doorLocklockDoorpinCommandParameter =
        new CommandParameter("pin", byte[].class);
    doorLocklockDoorCommandParams.put("pin", doorLocklockDoorpinCommandParameter);

    // Populate commands
    CommandInfo doorLocklockDoorCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .lockDoor(
                      (ChipClusters.DoorLockCluster.LockDoorResponseCallback) callback,
                      (byte[]) commandArguments.get("pin"));
            },
            () -> new DelegatedLockDoorResponseCallback(),
            doorLocklockDoorCommandParams);
    doorLockClusterCommandInfo.put("lockDoor", doorLocklockDoorCommandInfo);
    Map<String, CommandParameter> doorLocksetHolidayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLocksetHolidayScheduleCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.SetHolidayScheduleResponseCallback.class);
    CommandParameter doorLocksetHolidaySchedulescheduleIdCommandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLocksetHolidayScheduleCommandParams.put(
        "scheduleId", doorLocksetHolidaySchedulescheduleIdCommandParameter);

    CommandParameter doorLocksetHolidaySchedulelocalStartTimeCommandParameter =
        new CommandParameter("localStartTime", long.class);
    doorLocksetHolidayScheduleCommandParams.put(
        "localStartTime", doorLocksetHolidaySchedulelocalStartTimeCommandParameter);

    CommandParameter doorLocksetHolidaySchedulelocalEndTimeCommandParameter =
        new CommandParameter("localEndTime", long.class);
    doorLocksetHolidayScheduleCommandParams.put(
        "localEndTime", doorLocksetHolidaySchedulelocalEndTimeCommandParameter);

    CommandParameter doorLocksetHolidayScheduleoperatingModeDuringHolidayCommandParameter =
        new CommandParameter("operatingModeDuringHoliday", int.class);
    doorLocksetHolidayScheduleCommandParams.put(
        "operatingModeDuringHoliday",
        doorLocksetHolidayScheduleoperatingModeDuringHolidayCommandParameter);

    // Populate commands
    CommandInfo doorLocksetHolidayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setHolidaySchedule(
                      (ChipClusters.DoorLockCluster.SetHolidayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Long) commandArguments.get("localStartTime"),
                      (Long) commandArguments.get("localEndTime"),
                      (Integer) commandArguments.get("operatingModeDuringHoliday"));
            },
            () -> new DelegatedSetHolidayScheduleResponseCallback(),
            doorLocksetHolidayScheduleCommandParams);
    doorLockClusterCommandInfo.put("setHolidaySchedule", doorLocksetHolidayScheduleCommandInfo);
    Map<String, CommandParameter> doorLocksetPinCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLocksetPinCommandParameter =
        new CommandParameter("DoorLock", ChipClusters.DoorLockCluster.SetPinResponseCallback.class);
    CommandParameter doorLocksetPinuserIdCommandParameter =
        new CommandParameter("userId", int.class);
    doorLocksetPinCommandParams.put("userId", doorLocksetPinuserIdCommandParameter);

    CommandParameter doorLocksetPinuserStatusCommandParameter =
        new CommandParameter("userStatus", int.class);
    doorLocksetPinCommandParams.put("userStatus", doorLocksetPinuserStatusCommandParameter);

    CommandParameter doorLocksetPinuserTypeCommandParameter =
        new CommandParameter("userType", int.class);
    doorLocksetPinCommandParams.put("userType", doorLocksetPinuserTypeCommandParameter);

    CommandParameter doorLocksetPinpinCommandParameter = new CommandParameter("pin", byte[].class);
    doorLocksetPinCommandParams.put("pin", doorLocksetPinpinCommandParameter);

    // Populate commands
    CommandInfo doorLocksetPinCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setPin(
                      (ChipClusters.DoorLockCluster.SetPinResponseCallback) callback,
                      (Integer) commandArguments.get("userId"),
                      (Integer) commandArguments.get("userStatus"),
                      (Integer) commandArguments.get("userType"),
                      (byte[]) commandArguments.get("pin"));
            },
            () -> new DelegatedSetPinResponseCallback(),
            doorLocksetPinCommandParams);
    doorLockClusterCommandInfo.put("setPin", doorLocksetPinCommandInfo);
    Map<String, CommandParameter> doorLocksetRfidCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLocksetRfidCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.SetRfidResponseCallback.class);
    CommandParameter doorLocksetRfiduserIdCommandParameter =
        new CommandParameter("userId", int.class);
    doorLocksetRfidCommandParams.put("userId", doorLocksetRfiduserIdCommandParameter);

    CommandParameter doorLocksetRfiduserStatusCommandParameter =
        new CommandParameter("userStatus", int.class);
    doorLocksetRfidCommandParams.put("userStatus", doorLocksetRfiduserStatusCommandParameter);

    CommandParameter doorLocksetRfiduserTypeCommandParameter =
        new CommandParameter("userType", int.class);
    doorLocksetRfidCommandParams.put("userType", doorLocksetRfiduserTypeCommandParameter);

    CommandParameter doorLocksetRfididCommandParameter = new CommandParameter("id", byte[].class);
    doorLocksetRfidCommandParams.put("id", doorLocksetRfididCommandParameter);

    // Populate commands
    CommandInfo doorLocksetRfidCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setRfid(
                      (ChipClusters.DoorLockCluster.SetRfidResponseCallback) callback,
                      (Integer) commandArguments.get("userId"),
                      (Integer) commandArguments.get("userStatus"),
                      (Integer) commandArguments.get("userType"),
                      (byte[]) commandArguments.get("id"));
            },
            () -> new DelegatedSetRfidResponseCallback(),
            doorLocksetRfidCommandParams);
    doorLockClusterCommandInfo.put("setRfid", doorLocksetRfidCommandInfo);
    Map<String, CommandParameter> doorLocksetUserTypeCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLocksetUserTypeCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.SetUserTypeResponseCallback.class);
    CommandParameter doorLocksetUserTypeuserIdCommandParameter =
        new CommandParameter("userId", int.class);
    doorLocksetUserTypeCommandParams.put("userId", doorLocksetUserTypeuserIdCommandParameter);

    CommandParameter doorLocksetUserTypeuserTypeCommandParameter =
        new CommandParameter("userType", int.class);
    doorLocksetUserTypeCommandParams.put("userType", doorLocksetUserTypeuserTypeCommandParameter);

    // Populate commands
    CommandInfo doorLocksetUserTypeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setUserType(
                      (ChipClusters.DoorLockCluster.SetUserTypeResponseCallback) callback,
                      (Integer) commandArguments.get("userId"),
                      (Integer) commandArguments.get("userType"));
            },
            () -> new DelegatedSetUserTypeResponseCallback(),
            doorLocksetUserTypeCommandParams);
    doorLockClusterCommandInfo.put("setUserType", doorLocksetUserTypeCommandInfo);
    Map<String, CommandParameter> doorLocksetWeekdayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLocksetWeekdayScheduleCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.SetWeekdayScheduleResponseCallback.class);
    CommandParameter doorLocksetWeekdaySchedulescheduleIdCommandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "scheduleId", doorLocksetWeekdaySchedulescheduleIdCommandParameter);

    CommandParameter doorLocksetWeekdayScheduleuserIdCommandParameter =
        new CommandParameter("userId", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "userId", doorLocksetWeekdayScheduleuserIdCommandParameter);

    CommandParameter doorLocksetWeekdayScheduledaysMaskCommandParameter =
        new CommandParameter("daysMask", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "daysMask", doorLocksetWeekdayScheduledaysMaskCommandParameter);

    CommandParameter doorLocksetWeekdaySchedulestartHourCommandParameter =
        new CommandParameter("startHour", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "startHour", doorLocksetWeekdaySchedulestartHourCommandParameter);

    CommandParameter doorLocksetWeekdaySchedulestartMinuteCommandParameter =
        new CommandParameter("startMinute", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "startMinute", doorLocksetWeekdaySchedulestartMinuteCommandParameter);

    CommandParameter doorLocksetWeekdayScheduleendHourCommandParameter =
        new CommandParameter("endHour", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "endHour", doorLocksetWeekdayScheduleendHourCommandParameter);

    CommandParameter doorLocksetWeekdayScheduleendMinuteCommandParameter =
        new CommandParameter("endMinute", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "endMinute", doorLocksetWeekdayScheduleendMinuteCommandParameter);

    // Populate commands
    CommandInfo doorLocksetWeekdayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setWeekdaySchedule(
                      (ChipClusters.DoorLockCluster.SetWeekdayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"),
                      (Integer) commandArguments.get("daysMask"),
                      (Integer) commandArguments.get("startHour"),
                      (Integer) commandArguments.get("startMinute"),
                      (Integer) commandArguments.get("endHour"),
                      (Integer) commandArguments.get("endMinute"));
            },
            () -> new DelegatedSetWeekdayScheduleResponseCallback(),
            doorLocksetWeekdayScheduleCommandParams);
    doorLockClusterCommandInfo.put("setWeekdaySchedule", doorLocksetWeekdayScheduleCommandInfo);
    Map<String, CommandParameter> doorLocksetYeardayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLocksetYeardayScheduleCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.SetYeardayScheduleResponseCallback.class);
    CommandParameter doorLocksetYeardaySchedulescheduleIdCommandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLocksetYeardayScheduleCommandParams.put(
        "scheduleId", doorLocksetYeardaySchedulescheduleIdCommandParameter);

    CommandParameter doorLocksetYeardayScheduleuserIdCommandParameter =
        new CommandParameter("userId", int.class);
    doorLocksetYeardayScheduleCommandParams.put(
        "userId", doorLocksetYeardayScheduleuserIdCommandParameter);

    CommandParameter doorLocksetYeardaySchedulelocalStartTimeCommandParameter =
        new CommandParameter("localStartTime", long.class);
    doorLocksetYeardayScheduleCommandParams.put(
        "localStartTime", doorLocksetYeardaySchedulelocalStartTimeCommandParameter);

    CommandParameter doorLocksetYeardaySchedulelocalEndTimeCommandParameter =
        new CommandParameter("localEndTime", long.class);
    doorLocksetYeardayScheduleCommandParams.put(
        "localEndTime", doorLocksetYeardaySchedulelocalEndTimeCommandParameter);

    // Populate commands
    CommandInfo doorLocksetYeardayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setYeardaySchedule(
                      (ChipClusters.DoorLockCluster.SetYeardayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"),
                      (Long) commandArguments.get("localStartTime"),
                      (Long) commandArguments.get("localEndTime"));
            },
            () -> new DelegatedSetYeardayScheduleResponseCallback(),
            doorLocksetYeardayScheduleCommandParams);
    doorLockClusterCommandInfo.put("setYeardaySchedule", doorLocksetYeardayScheduleCommandInfo);
    Map<String, CommandParameter> doorLockunlockDoorCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLockunlockDoorCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.UnlockDoorResponseCallback.class);
    CommandParameter doorLockunlockDoorpinCommandParameter =
        new CommandParameter("pin", byte[].class);
    doorLockunlockDoorCommandParams.put("pin", doorLockunlockDoorpinCommandParameter);

    // Populate commands
    CommandInfo doorLockunlockDoorCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .unlockDoor(
                      (ChipClusters.DoorLockCluster.UnlockDoorResponseCallback) callback,
                      (byte[]) commandArguments.get("pin"));
            },
            () -> new DelegatedUnlockDoorResponseCallback(),
            doorLockunlockDoorCommandParams);
    doorLockClusterCommandInfo.put("unlockDoor", doorLockunlockDoorCommandInfo);
    Map<String, CommandParameter> doorLockunlockWithTimeoutCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter doorLockunlockWithTimeoutCommandParameter =
        new CommandParameter(
            "DoorLock", ChipClusters.DoorLockCluster.UnlockWithTimeoutResponseCallback.class);
    CommandParameter doorLockunlockWithTimeouttimeoutInSecondsCommandParameter =
        new CommandParameter("timeoutInSeconds", int.class);
    doorLockunlockWithTimeoutCommandParams.put(
        "timeoutInSeconds", doorLockunlockWithTimeouttimeoutInSecondsCommandParameter);

    CommandParameter doorLockunlockWithTimeoutpinCommandParameter =
        new CommandParameter("pin", byte[].class);
    doorLockunlockWithTimeoutCommandParams.put("pin", doorLockunlockWithTimeoutpinCommandParameter);

    // Populate commands
    CommandInfo doorLockunlockWithTimeoutCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .unlockWithTimeout(
                      (ChipClusters.DoorLockCluster.UnlockWithTimeoutResponseCallback) callback,
                      (Integer) commandArguments.get("timeoutInSeconds"),
                      (byte[]) commandArguments.get("pin"));
            },
            () -> new DelegatedUnlockWithTimeoutResponseCallback(),
            doorLockunlockWithTimeoutCommandParams);
    doorLockClusterCommandInfo.put("unlockWithTimeout", doorLockunlockWithTimeoutCommandInfo);
    // Populate cluster
    ClusterInfo doorLockClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.DoorLockCluster(ptr, endpointId),
            doorLockClusterCommandInfo);
    clusterMap.put("doorLock", doorLockClusterInfo);
    Map<String, CommandInfo> electricalMeasurementClusterCommandInfo = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo electricalMeasurementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ElectricalMeasurementCluster(ptr, endpointId),
            electricalMeasurementClusterCommandInfo);
    clusterMap.put("electricalMeasurement", electricalMeasurementClusterInfo);
    Map<String, CommandInfo> ethernetNetworkDiagnosticsClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> ethernetNetworkDiagnosticsresetCountsCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter ethernetNetworkDiagnosticsresetCountsCommandParameter =
        new CommandParameter(
            "EthernetNetworkDiagnostics", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo ethernetNetworkDiagnosticsresetCountsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster)
                  .resetCounts((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            ethernetNetworkDiagnosticsresetCountsCommandParams);
    ethernetNetworkDiagnosticsClusterCommandInfo.put(
        "resetCounts", ethernetNetworkDiagnosticsresetCountsCommandInfo);
    // Populate cluster
    ClusterInfo ethernetNetworkDiagnosticsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.EthernetNetworkDiagnosticsCluster(ptr, endpointId),
            ethernetNetworkDiagnosticsClusterCommandInfo);
    clusterMap.put("ethernetNetworkDiagnostics", ethernetNetworkDiagnosticsClusterInfo);
    Map<String, CommandInfo> fixedLabelClusterCommandInfo = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo fixedLabelClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.FixedLabelCluster(ptr, endpointId),
            fixedLabelClusterCommandInfo);
    clusterMap.put("fixedLabel", fixedLabelClusterInfo);
    Map<String, CommandInfo> flowMeasurementClusterCommandInfo = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo flowMeasurementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.FlowMeasurementCluster(ptr, endpointId),
            flowMeasurementClusterCommandInfo);
    clusterMap.put("flowMeasurement", flowMeasurementClusterInfo);
    Map<String, CommandInfo> generalCommissioningClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> generalCommissioningarmFailSafeCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter generalCommissioningarmFailSafeCommandParameter =
        new CommandParameter(
            "GeneralCommissioning",
            ChipClusters.GeneralCommissioningCluster.ArmFailSafeResponseCallback.class);
    CommandParameter generalCommissioningarmFailSafeexpiryLengthSecondsCommandParameter =
        new CommandParameter("expiryLengthSeconds", int.class);
    generalCommissioningarmFailSafeCommandParams.put(
        "expiryLengthSeconds", generalCommissioningarmFailSafeexpiryLengthSecondsCommandParameter);

    CommandParameter generalCommissioningarmFailSafebreadcrumbCommandParameter =
        new CommandParameter("breadcrumb", long.class);
    generalCommissioningarmFailSafeCommandParams.put(
        "breadcrumb", generalCommissioningarmFailSafebreadcrumbCommandParameter);

    CommandParameter generalCommissioningarmFailSafetimeoutMsCommandParameter =
        new CommandParameter("timeoutMs", long.class);
    generalCommissioningarmFailSafeCommandParams.put(
        "timeoutMs", generalCommissioningarmFailSafetimeoutMsCommandParameter);

    // Populate commands
    CommandInfo generalCommissioningarmFailSafeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralCommissioningCluster) cluster)
                  .armFailSafe(
                      (ChipClusters.GeneralCommissioningCluster.ArmFailSafeResponseCallback)
                          callback,
                      (Integer) commandArguments.get("expiryLengthSeconds"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedArmFailSafeResponseCallback(),
            generalCommissioningarmFailSafeCommandParams);
    generalCommissioningClusterCommandInfo.put(
        "armFailSafe", generalCommissioningarmFailSafeCommandInfo);
    Map<String, CommandParameter> generalCommissioningcommissioningCompleteCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter generalCommissioningcommissioningCompleteCommandParameter =
        new CommandParameter(
            "GeneralCommissioning",
            ChipClusters.GeneralCommissioningCluster.CommissioningCompleteResponseCallback.class);
    // Populate commands
    CommandInfo generalCommissioningcommissioningCompleteCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralCommissioningCluster) cluster)
                  .commissioningComplete(
                      (ChipClusters.GeneralCommissioningCluster
                              .CommissioningCompleteResponseCallback)
                          callback);
            },
            () -> new DelegatedCommissioningCompleteResponseCallback(),
            generalCommissioningcommissioningCompleteCommandParams);
    generalCommissioningClusterCommandInfo.put(
        "commissioningComplete", generalCommissioningcommissioningCompleteCommandInfo);
    Map<String, CommandParameter> generalCommissioningsetRegulatoryConfigCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter generalCommissioningsetRegulatoryConfigCommandParameter =
        new CommandParameter(
            "GeneralCommissioning",
            ChipClusters.GeneralCommissioningCluster.SetRegulatoryConfigResponseCallback.class);
    CommandParameter generalCommissioningsetRegulatoryConfiglocationCommandParameter =
        new CommandParameter("location", int.class);
    generalCommissioningsetRegulatoryConfigCommandParams.put(
        "location", generalCommissioningsetRegulatoryConfiglocationCommandParameter);

    CommandParameter generalCommissioningsetRegulatoryConfigcountryCodeCommandParameter =
        new CommandParameter("countryCode", String.class);
    generalCommissioningsetRegulatoryConfigCommandParams.put(
        "countryCode", generalCommissioningsetRegulatoryConfigcountryCodeCommandParameter);

    CommandParameter generalCommissioningsetRegulatoryConfigbreadcrumbCommandParameter =
        new CommandParameter("breadcrumb", long.class);
    generalCommissioningsetRegulatoryConfigCommandParams.put(
        "breadcrumb", generalCommissioningsetRegulatoryConfigbreadcrumbCommandParameter);

    CommandParameter generalCommissioningsetRegulatoryConfigtimeoutMsCommandParameter =
        new CommandParameter("timeoutMs", long.class);
    generalCommissioningsetRegulatoryConfigCommandParams.put(
        "timeoutMs", generalCommissioningsetRegulatoryConfigtimeoutMsCommandParameter);

    // Populate commands
    CommandInfo generalCommissioningsetRegulatoryConfigCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralCommissioningCluster) cluster)
                  .setRegulatoryConfig(
                      (ChipClusters.GeneralCommissioningCluster.SetRegulatoryConfigResponseCallback)
                          callback,
                      (Integer) commandArguments.get("location"),
                      (String) commandArguments.get("countryCode"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedSetRegulatoryConfigResponseCallback(),
            generalCommissioningsetRegulatoryConfigCommandParams);
    generalCommissioningClusterCommandInfo.put(
        "setRegulatoryConfig", generalCommissioningsetRegulatoryConfigCommandInfo);
    // Populate cluster
    ClusterInfo generalCommissioningClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.GeneralCommissioningCluster(ptr, endpointId),
            generalCommissioningClusterCommandInfo);
    clusterMap.put("generalCommissioning", generalCommissioningClusterInfo);
    Map<String, CommandInfo> generalDiagnosticsClusterCommandInfo = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo generalDiagnosticsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.GeneralDiagnosticsCluster(ptr, endpointId),
            generalDiagnosticsClusterCommandInfo);
    clusterMap.put("generalDiagnostics", generalDiagnosticsClusterInfo);
    Map<String, CommandInfo> groupKeyManagementClusterCommandInfo = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo groupKeyManagementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.GroupKeyManagementCluster(ptr, endpointId),
            groupKeyManagementClusterCommandInfo);
    clusterMap.put("groupKeyManagement", groupKeyManagementClusterInfo);
    Map<String, CommandInfo> groupsClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> groupsaddGroupCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter groupsaddGroupCommandParameter =
        new CommandParameter("Groups", ChipClusters.GroupsCluster.AddGroupResponseCallback.class);
    CommandParameter groupsaddGroupgroupIdCommandParameter =
        new CommandParameter("groupId", int.class);
    groupsaddGroupCommandParams.put("groupId", groupsaddGroupgroupIdCommandParameter);

    CommandParameter groupsaddGroupgroupNameCommandParameter =
        new CommandParameter("groupName", String.class);
    groupsaddGroupCommandParams.put("groupName", groupsaddGroupgroupNameCommandParameter);

    // Populate commands
    CommandInfo groupsaddGroupCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .addGroup(
                      (ChipClusters.GroupsCluster.AddGroupResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (String) commandArguments.get("groupName"));
            },
            () -> new DelegatedAddGroupResponseCallback(),
            groupsaddGroupCommandParams);
    groupsClusterCommandInfo.put("addGroup", groupsaddGroupCommandInfo);
    Map<String, CommandParameter> groupsaddGroupIfIdentifyingCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter groupsaddGroupIfIdentifyingCommandParameter =
        new CommandParameter("Groups", ChipClusters.DefaultClusterCallback.class);
    CommandParameter groupsaddGroupIfIdentifyinggroupIdCommandParameter =
        new CommandParameter("groupId", int.class);
    groupsaddGroupIfIdentifyingCommandParams.put(
        "groupId", groupsaddGroupIfIdentifyinggroupIdCommandParameter);

    CommandParameter groupsaddGroupIfIdentifyinggroupNameCommandParameter =
        new CommandParameter("groupName", String.class);
    groupsaddGroupIfIdentifyingCommandParams.put(
        "groupName", groupsaddGroupIfIdentifyinggroupNameCommandParameter);

    // Populate commands
    CommandInfo groupsaddGroupIfIdentifyingCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .addGroupIfIdentifying(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (String) commandArguments.get("groupName"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            groupsaddGroupIfIdentifyingCommandParams);
    groupsClusterCommandInfo.put("addGroupIfIdentifying", groupsaddGroupIfIdentifyingCommandInfo);
    Map<String, CommandParameter> groupsgetGroupMembershipCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter groupsgetGroupMembershipCommandParameter =
        new CommandParameter(
            "Groups", ChipClusters.GroupsCluster.GetGroupMembershipResponseCallback.class);
    CommandParameter groupsgetGroupMembershipgroupCountCommandParameter =
        new CommandParameter("groupCount", int.class);
    groupsgetGroupMembershipCommandParams.put(
        "groupCount", groupsgetGroupMembershipgroupCountCommandParameter);

    CommandParameter groupsgetGroupMembershipgroupListCommandParameter =
        new CommandParameter("groupList", int.class);
    groupsgetGroupMembershipCommandParams.put(
        "groupList", groupsgetGroupMembershipgroupListCommandParameter);

    // Populate commands
    CommandInfo groupsgetGroupMembershipCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .getGroupMembership(
                      (ChipClusters.GroupsCluster.GetGroupMembershipResponseCallback) callback,
                      (Integer) commandArguments.get("groupCount"),
                      (Integer) commandArguments.get("groupList"));
            },
            () -> new DelegatedGetGroupMembershipResponseCallback(),
            groupsgetGroupMembershipCommandParams);
    groupsClusterCommandInfo.put("getGroupMembership", groupsgetGroupMembershipCommandInfo);
    Map<String, CommandParameter> groupsremoveAllGroupsCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter groupsremoveAllGroupsCommandParameter =
        new CommandParameter("Groups", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo groupsremoveAllGroupsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .removeAllGroups((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            groupsremoveAllGroupsCommandParams);
    groupsClusterCommandInfo.put("removeAllGroups", groupsremoveAllGroupsCommandInfo);
    Map<String, CommandParameter> groupsremoveGroupCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter groupsremoveGroupCommandParameter =
        new CommandParameter(
            "Groups", ChipClusters.GroupsCluster.RemoveGroupResponseCallback.class);
    CommandParameter groupsremoveGroupgroupIdCommandParameter =
        new CommandParameter("groupId", int.class);
    groupsremoveGroupCommandParams.put("groupId", groupsremoveGroupgroupIdCommandParameter);

    // Populate commands
    CommandInfo groupsremoveGroupCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .removeGroup(
                      (ChipClusters.GroupsCluster.RemoveGroupResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"));
            },
            () -> new DelegatedRemoveGroupResponseCallback(),
            groupsremoveGroupCommandParams);
    groupsClusterCommandInfo.put("removeGroup", groupsremoveGroupCommandInfo);
    Map<String, CommandParameter> groupsviewGroupCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter groupsviewGroupCommandParameter =
        new CommandParameter("Groups", ChipClusters.GroupsCluster.ViewGroupResponseCallback.class);
    CommandParameter groupsviewGroupgroupIdCommandParameter =
        new CommandParameter("groupId", int.class);
    groupsviewGroupCommandParams.put("groupId", groupsviewGroupgroupIdCommandParameter);

    // Populate commands
    CommandInfo groupsviewGroupCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .viewGroup(
                      (ChipClusters.GroupsCluster.ViewGroupResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"));
            },
            () -> new DelegatedViewGroupResponseCallback(),
            groupsviewGroupCommandParams);
    groupsClusterCommandInfo.put("viewGroup", groupsviewGroupCommandInfo);
    // Populate cluster
    ClusterInfo groupsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.GroupsCluster(ptr, endpointId),
            groupsClusterCommandInfo);
    clusterMap.put("groups", groupsClusterInfo);
    Map<String, CommandInfo> identifyClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> identifyidentifyCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter identifyidentifyCommandParameter =
        new CommandParameter("Identify", ChipClusters.DefaultClusterCallback.class);
    CommandParameter identifyidentifyidentifyTimeCommandParameter =
        new CommandParameter("identifyTime", int.class);
    identifyidentifyCommandParams.put("identifyTime", identifyidentifyidentifyTimeCommandParameter);

    // Populate commands
    CommandInfo identifyidentifyCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IdentifyCluster) cluster)
                  .identify(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("identifyTime"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            identifyidentifyCommandParams);
    identifyClusterCommandInfo.put("identify", identifyidentifyCommandInfo);
    Map<String, CommandParameter> identifyidentifyQueryCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter identifyidentifyQueryCommandParameter =
        new CommandParameter(
            "Identify", ChipClusters.IdentifyCluster.IdentifyQueryResponseCallback.class);
    // Populate commands
    CommandInfo identifyidentifyQueryCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IdentifyCluster) cluster)
                  .identifyQuery(
                      (ChipClusters.IdentifyCluster.IdentifyQueryResponseCallback) callback);
            },
            () -> new DelegatedIdentifyQueryResponseCallback(),
            identifyidentifyQueryCommandParams);
    identifyClusterCommandInfo.put("identifyQuery", identifyidentifyQueryCommandInfo);
    Map<String, CommandParameter> identifytriggerEffectCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter identifytriggerEffectCommandParameter =
        new CommandParameter("Identify", ChipClusters.DefaultClusterCallback.class);
    CommandParameter identifytriggerEffecteffectIdentifierCommandParameter =
        new CommandParameter("effectIdentifier", int.class);
    identifytriggerEffectCommandParams.put(
        "effectIdentifier", identifytriggerEffecteffectIdentifierCommandParameter);

    CommandParameter identifytriggerEffecteffectVariantCommandParameter =
        new CommandParameter("effectVariant", int.class);
    identifytriggerEffectCommandParams.put(
        "effectVariant", identifytriggerEffecteffectVariantCommandParameter);

    // Populate commands
    CommandInfo identifytriggerEffectCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IdentifyCluster) cluster)
                  .triggerEffect(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("effectIdentifier"),
                      (Integer) commandArguments.get("effectVariant"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            identifytriggerEffectCommandParams);
    identifyClusterCommandInfo.put("triggerEffect", identifytriggerEffectCommandInfo);
    // Populate cluster
    ClusterInfo identifyClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.IdentifyCluster(ptr, endpointId),
            identifyClusterCommandInfo);
    clusterMap.put("identify", identifyClusterInfo);
    Map<String, CommandInfo> keypadInputClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> keypadInputsendKeyCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter keypadInputsendKeyCommandParameter =
        new CommandParameter(
            "KeypadInput", ChipClusters.KeypadInputCluster.SendKeyResponseCallback.class);
    CommandParameter keypadInputsendKeykeyCodeCommandParameter =
        new CommandParameter("keyCode", int.class);
    keypadInputsendKeyCommandParams.put("keyCode", keypadInputsendKeykeyCodeCommandParameter);

    // Populate commands
    CommandInfo keypadInputsendKeyCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.KeypadInputCluster) cluster)
                  .sendKey(
                      (ChipClusters.KeypadInputCluster.SendKeyResponseCallback) callback,
                      (Integer) commandArguments.get("keyCode"));
            },
            () -> new DelegatedSendKeyResponseCallback(),
            keypadInputsendKeyCommandParams);
    keypadInputClusterCommandInfo.put("sendKey", keypadInputsendKeyCommandInfo);
    // Populate cluster
    ClusterInfo keypadInputClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.KeypadInputCluster(ptr, endpointId),
            keypadInputClusterCommandInfo);
    clusterMap.put("keypadInput", keypadInputClusterInfo);
    Map<String, CommandInfo> levelControlClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> levelControlmoveCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter levelControlmoveCommandParameter =
        new CommandParameter("LevelControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter levelControlmovemoveModeCommandParameter =
        new CommandParameter("moveMode", int.class);
    levelControlmoveCommandParams.put("moveMode", levelControlmovemoveModeCommandParameter);

    CommandParameter levelControlmoverateCommandParameter = new CommandParameter("rate", int.class);
    levelControlmoveCommandParams.put("rate", levelControlmoverateCommandParameter);

    CommandParameter levelControlmoveoptionMaskCommandParameter =
        new CommandParameter("optionMask", int.class);
    levelControlmoveCommandParams.put("optionMask", levelControlmoveoptionMaskCommandParameter);

    CommandParameter levelControlmoveoptionOverrideCommandParameter =
        new CommandParameter("optionOverride", int.class);
    levelControlmoveCommandParams.put(
        "optionOverride", levelControlmoveoptionOverrideCommandParameter);

    // Populate commands
    CommandInfo levelControlmoveCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .move(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"),
                      (Integer) commandArguments.get("optionMask"),
                      (Integer) commandArguments.get("optionOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlmoveCommandParams);
    levelControlClusterCommandInfo.put("move", levelControlmoveCommandInfo);
    Map<String, CommandParameter> levelControlmoveToLevelCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter levelControlmoveToLevelCommandParameter =
        new CommandParameter("LevelControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter levelControlmoveToLevellevelCommandParameter =
        new CommandParameter("level", int.class);
    levelControlmoveToLevelCommandParams.put("level", levelControlmoveToLevellevelCommandParameter);

    CommandParameter levelControlmoveToLeveltransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    levelControlmoveToLevelCommandParams.put(
        "transitionTime", levelControlmoveToLeveltransitionTimeCommandParameter);

    CommandParameter levelControlmoveToLeveloptionMaskCommandParameter =
        new CommandParameter("optionMask", int.class);
    levelControlmoveToLevelCommandParams.put(
        "optionMask", levelControlmoveToLeveloptionMaskCommandParameter);

    CommandParameter levelControlmoveToLeveloptionOverrideCommandParameter =
        new CommandParameter("optionOverride", int.class);
    levelControlmoveToLevelCommandParams.put(
        "optionOverride", levelControlmoveToLeveloptionOverrideCommandParameter);

    // Populate commands
    CommandInfo levelControlmoveToLevelCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .moveToLevel(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("level"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionMask"),
                      (Integer) commandArguments.get("optionOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlmoveToLevelCommandParams);
    levelControlClusterCommandInfo.put("moveToLevel", levelControlmoveToLevelCommandInfo);
    Map<String, CommandParameter> levelControlmoveToLevelWithOnOffCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter levelControlmoveToLevelWithOnOffCommandParameter =
        new CommandParameter("LevelControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter levelControlmoveToLevelWithOnOfflevelCommandParameter =
        new CommandParameter("level", int.class);
    levelControlmoveToLevelWithOnOffCommandParams.put(
        "level", levelControlmoveToLevelWithOnOfflevelCommandParameter);

    CommandParameter levelControlmoveToLevelWithOnOfftransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    levelControlmoveToLevelWithOnOffCommandParams.put(
        "transitionTime", levelControlmoveToLevelWithOnOfftransitionTimeCommandParameter);

    // Populate commands
    CommandInfo levelControlmoveToLevelWithOnOffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .moveToLevelWithOnOff(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("level"),
                      (Integer) commandArguments.get("transitionTime"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlmoveToLevelWithOnOffCommandParams);
    levelControlClusterCommandInfo.put(
        "moveToLevelWithOnOff", levelControlmoveToLevelWithOnOffCommandInfo);
    Map<String, CommandParameter> levelControlmoveWithOnOffCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter levelControlmoveWithOnOffCommandParameter =
        new CommandParameter("LevelControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter levelControlmoveWithOnOffmoveModeCommandParameter =
        new CommandParameter("moveMode", int.class);
    levelControlmoveWithOnOffCommandParams.put(
        "moveMode", levelControlmoveWithOnOffmoveModeCommandParameter);

    CommandParameter levelControlmoveWithOnOffrateCommandParameter =
        new CommandParameter("rate", int.class);
    levelControlmoveWithOnOffCommandParams.put(
        "rate", levelControlmoveWithOnOffrateCommandParameter);

    // Populate commands
    CommandInfo levelControlmoveWithOnOffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .moveWithOnOff(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlmoveWithOnOffCommandParams);
    levelControlClusterCommandInfo.put("moveWithOnOff", levelControlmoveWithOnOffCommandInfo);
    Map<String, CommandParameter> levelControlstepCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter levelControlstepCommandParameter =
        new CommandParameter("LevelControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter levelControlstepstepModeCommandParameter =
        new CommandParameter("stepMode", int.class);
    levelControlstepCommandParams.put("stepMode", levelControlstepstepModeCommandParameter);

    CommandParameter levelControlstepstepSizeCommandParameter =
        new CommandParameter("stepSize", int.class);
    levelControlstepCommandParams.put("stepSize", levelControlstepstepSizeCommandParameter);

    CommandParameter levelControlsteptransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    levelControlstepCommandParams.put(
        "transitionTime", levelControlsteptransitionTimeCommandParameter);

    CommandParameter levelControlstepoptionMaskCommandParameter =
        new CommandParameter("optionMask", int.class);
    levelControlstepCommandParams.put("optionMask", levelControlstepoptionMaskCommandParameter);

    CommandParameter levelControlstepoptionOverrideCommandParameter =
        new CommandParameter("optionOverride", int.class);
    levelControlstepCommandParams.put(
        "optionOverride", levelControlstepoptionOverrideCommandParameter);

    // Populate commands
    CommandInfo levelControlstepCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .step(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionMask"),
                      (Integer) commandArguments.get("optionOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlstepCommandParams);
    levelControlClusterCommandInfo.put("step", levelControlstepCommandInfo);
    Map<String, CommandParameter> levelControlstepWithOnOffCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter levelControlstepWithOnOffCommandParameter =
        new CommandParameter("LevelControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter levelControlstepWithOnOffstepModeCommandParameter =
        new CommandParameter("stepMode", int.class);
    levelControlstepWithOnOffCommandParams.put(
        "stepMode", levelControlstepWithOnOffstepModeCommandParameter);

    CommandParameter levelControlstepWithOnOffstepSizeCommandParameter =
        new CommandParameter("stepSize", int.class);
    levelControlstepWithOnOffCommandParams.put(
        "stepSize", levelControlstepWithOnOffstepSizeCommandParameter);

    CommandParameter levelControlstepWithOnOfftransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    levelControlstepWithOnOffCommandParams.put(
        "transitionTime", levelControlstepWithOnOfftransitionTimeCommandParameter);

    // Populate commands
    CommandInfo levelControlstepWithOnOffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .stepWithOnOff(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlstepWithOnOffCommandParams);
    levelControlClusterCommandInfo.put("stepWithOnOff", levelControlstepWithOnOffCommandInfo);
    Map<String, CommandParameter> levelControlstopCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter levelControlstopCommandParameter =
        new CommandParameter("LevelControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameter levelControlstopoptionMaskCommandParameter =
        new CommandParameter("optionMask", int.class);
    levelControlstopCommandParams.put("optionMask", levelControlstopoptionMaskCommandParameter);

    CommandParameter levelControlstopoptionOverrideCommandParameter =
        new CommandParameter("optionOverride", int.class);
    levelControlstopCommandParams.put(
        "optionOverride", levelControlstopoptionOverrideCommandParameter);

    // Populate commands
    CommandInfo levelControlstopCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .stop(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("optionMask"),
                      (Integer) commandArguments.get("optionOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlstopCommandParams);
    levelControlClusterCommandInfo.put("stop", levelControlstopCommandInfo);
    Map<String, CommandParameter> levelControlstopWithOnOffCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter levelControlstopWithOnOffCommandParameter =
        new CommandParameter("LevelControl", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo levelControlstopWithOnOffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .stopWithOnOff((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlstopWithOnOffCommandParams);
    levelControlClusterCommandInfo.put("stopWithOnOff", levelControlstopWithOnOffCommandInfo);
    // Populate cluster
    ClusterInfo levelControlClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.LevelControlCluster(ptr, endpointId),
            levelControlClusterCommandInfo);
    clusterMap.put("levelControl", levelControlClusterInfo);
    Map<String, CommandInfo> lowPowerClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> lowPowersleepCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter lowPowersleepCommandParameter =
        new CommandParameter("LowPower", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo lowPowersleepCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LowPowerCluster) cluster).sleep((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            lowPowersleepCommandParams);
    lowPowerClusterCommandInfo.put("sleep", lowPowersleepCommandInfo);
    // Populate cluster
    ClusterInfo lowPowerClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.LowPowerCluster(ptr, endpointId),
            lowPowerClusterCommandInfo);
    clusterMap.put("lowPower", lowPowerClusterInfo);
    Map<String, CommandInfo> mediaInputClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> mediaInputhideInputStatusCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter mediaInputhideInputStatusCommandParameter =
        new CommandParameter("MediaInput", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo mediaInputhideInputStatusCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaInputCluster) cluster)
                  .hideInputStatus((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            mediaInputhideInputStatusCommandParams);
    mediaInputClusterCommandInfo.put("hideInputStatus", mediaInputhideInputStatusCommandInfo);
    Map<String, CommandParameter> mediaInputrenameInputCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter mediaInputrenameInputCommandParameter =
        new CommandParameter("MediaInput", ChipClusters.DefaultClusterCallback.class);
    CommandParameter mediaInputrenameInputindexCommandParameter =
        new CommandParameter("index", int.class);
    mediaInputrenameInputCommandParams.put("index", mediaInputrenameInputindexCommandParameter);

    CommandParameter mediaInputrenameInputnameCommandParameter =
        new CommandParameter("name", String.class);
    mediaInputrenameInputCommandParams.put("name", mediaInputrenameInputnameCommandParameter);

    // Populate commands
    CommandInfo mediaInputrenameInputCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaInputCluster) cluster)
                  .renameInput(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("index"),
                      (String) commandArguments.get("name"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            mediaInputrenameInputCommandParams);
    mediaInputClusterCommandInfo.put("renameInput", mediaInputrenameInputCommandInfo);
    Map<String, CommandParameter> mediaInputselectInputCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter mediaInputselectInputCommandParameter =
        new CommandParameter("MediaInput", ChipClusters.DefaultClusterCallback.class);
    CommandParameter mediaInputselectInputindexCommandParameter =
        new CommandParameter("index", int.class);
    mediaInputselectInputCommandParams.put("index", mediaInputselectInputindexCommandParameter);

    // Populate commands
    CommandInfo mediaInputselectInputCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaInputCluster) cluster)
                  .selectInput(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("index"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            mediaInputselectInputCommandParams);
    mediaInputClusterCommandInfo.put("selectInput", mediaInputselectInputCommandInfo);
    Map<String, CommandParameter> mediaInputshowInputStatusCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter mediaInputshowInputStatusCommandParameter =
        new CommandParameter("MediaInput", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo mediaInputshowInputStatusCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaInputCluster) cluster)
                  .showInputStatus((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            mediaInputshowInputStatusCommandParams);
    mediaInputClusterCommandInfo.put("showInputStatus", mediaInputshowInputStatusCommandInfo);
    // Populate cluster
    ClusterInfo mediaInputClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.MediaInputCluster(ptr, endpointId),
            mediaInputClusterCommandInfo);
    clusterMap.put("mediaInput", mediaInputClusterInfo);
    Map<String, CommandInfo> mediaPlaybackClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> mediaPlaybackmediaFastForwardCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter mediaPlaybackmediaFastForwardCommandParameter =
        new CommandParameter(
            "MediaPlayback",
            ChipClusters.MediaPlaybackCluster.MediaFastForwardResponseCallback.class);
    // Populate commands
    CommandInfo mediaPlaybackmediaFastForwardCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaFastForward(
                      (ChipClusters.MediaPlaybackCluster.MediaFastForwardResponseCallback)
                          callback);
            },
            () -> new DelegatedMediaFastForwardResponseCallback(),
            mediaPlaybackmediaFastForwardCommandParams);
    mediaPlaybackClusterCommandInfo.put(
        "mediaFastForward", mediaPlaybackmediaFastForwardCommandInfo);
    Map<String, CommandParameter> mediaPlaybackmediaNextCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter mediaPlaybackmediaNextCommandParameter =
        new CommandParameter(
            "MediaPlayback", ChipClusters.MediaPlaybackCluster.MediaNextResponseCallback.class);
    // Populate commands
    CommandInfo mediaPlaybackmediaNextCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaNext(
                      (ChipClusters.MediaPlaybackCluster.MediaNextResponseCallback) callback);
            },
            () -> new DelegatedMediaNextResponseCallback(),
            mediaPlaybackmediaNextCommandParams);
    mediaPlaybackClusterCommandInfo.put("mediaNext", mediaPlaybackmediaNextCommandInfo);
    Map<String, CommandParameter> mediaPlaybackmediaPauseCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter mediaPlaybackmediaPauseCommandParameter =
        new CommandParameter(
            "MediaPlayback", ChipClusters.MediaPlaybackCluster.MediaPauseResponseCallback.class);
    // Populate commands
    CommandInfo mediaPlaybackmediaPauseCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaPause(
                      (ChipClusters.MediaPlaybackCluster.MediaPauseResponseCallback) callback);
            },
            () -> new DelegatedMediaPauseResponseCallback(),
            mediaPlaybackmediaPauseCommandParams);
    mediaPlaybackClusterCommandInfo.put("mediaPause", mediaPlaybackmediaPauseCommandInfo);
    Map<String, CommandParameter> mediaPlaybackmediaPlayCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter mediaPlaybackmediaPlayCommandParameter =
        new CommandParameter(
            "MediaPlayback", ChipClusters.MediaPlaybackCluster.MediaPlayResponseCallback.class);
    // Populate commands
    CommandInfo mediaPlaybackmediaPlayCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaPlay(
                      (ChipClusters.MediaPlaybackCluster.MediaPlayResponseCallback) callback);
            },
            () -> new DelegatedMediaPlayResponseCallback(),
            mediaPlaybackmediaPlayCommandParams);
    mediaPlaybackClusterCommandInfo.put("mediaPlay", mediaPlaybackmediaPlayCommandInfo);
    Map<String, CommandParameter> mediaPlaybackmediaPreviousCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter mediaPlaybackmediaPreviousCommandParameter =
        new CommandParameter(
            "MediaPlayback", ChipClusters.MediaPlaybackCluster.MediaPreviousResponseCallback.class);
    // Populate commands
    CommandInfo mediaPlaybackmediaPreviousCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaPrevious(
                      (ChipClusters.MediaPlaybackCluster.MediaPreviousResponseCallback) callback);
            },
            () -> new DelegatedMediaPreviousResponseCallback(),
            mediaPlaybackmediaPreviousCommandParams);
    mediaPlaybackClusterCommandInfo.put("mediaPrevious", mediaPlaybackmediaPreviousCommandInfo);
    Map<String, CommandParameter> mediaPlaybackmediaRewindCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter mediaPlaybackmediaRewindCommandParameter =
        new CommandParameter(
            "MediaPlayback", ChipClusters.MediaPlaybackCluster.MediaRewindResponseCallback.class);
    // Populate commands
    CommandInfo mediaPlaybackmediaRewindCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaRewind(
                      (ChipClusters.MediaPlaybackCluster.MediaRewindResponseCallback) callback);
            },
            () -> new DelegatedMediaRewindResponseCallback(),
            mediaPlaybackmediaRewindCommandParams);
    mediaPlaybackClusterCommandInfo.put("mediaRewind", mediaPlaybackmediaRewindCommandInfo);
    Map<String, CommandParameter> mediaPlaybackmediaSeekCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter mediaPlaybackmediaSeekCommandParameter =
        new CommandParameter(
            "MediaPlayback", ChipClusters.MediaPlaybackCluster.MediaSeekResponseCallback.class);
    CommandParameter mediaPlaybackmediaSeekpositionCommandParameter =
        new CommandParameter("position", long.class);
    mediaPlaybackmediaSeekCommandParams.put(
        "position", mediaPlaybackmediaSeekpositionCommandParameter);

    // Populate commands
    CommandInfo mediaPlaybackmediaSeekCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaSeek(
                      (ChipClusters.MediaPlaybackCluster.MediaSeekResponseCallback) callback,
                      (Long) commandArguments.get("position"));
            },
            () -> new DelegatedMediaSeekResponseCallback(),
            mediaPlaybackmediaSeekCommandParams);
    mediaPlaybackClusterCommandInfo.put("mediaSeek", mediaPlaybackmediaSeekCommandInfo);
    Map<String, CommandParameter> mediaPlaybackmediaSkipBackwardCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter mediaPlaybackmediaSkipBackwardCommandParameter =
        new CommandParameter(
            "MediaPlayback",
            ChipClusters.MediaPlaybackCluster.MediaSkipBackwardResponseCallback.class);
    CommandParameter mediaPlaybackmediaSkipBackwarddeltaPositionMillisecondsCommandParameter =
        new CommandParameter("deltaPositionMilliseconds", long.class);
    mediaPlaybackmediaSkipBackwardCommandParams.put(
        "deltaPositionMilliseconds",
        mediaPlaybackmediaSkipBackwarddeltaPositionMillisecondsCommandParameter);

    // Populate commands
    CommandInfo mediaPlaybackmediaSkipBackwardCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaSkipBackward(
                      (ChipClusters.MediaPlaybackCluster.MediaSkipBackwardResponseCallback)
                          callback,
                      (Long) commandArguments.get("deltaPositionMilliseconds"));
            },
            () -> new DelegatedMediaSkipBackwardResponseCallback(),
            mediaPlaybackmediaSkipBackwardCommandParams);
    mediaPlaybackClusterCommandInfo.put(
        "mediaSkipBackward", mediaPlaybackmediaSkipBackwardCommandInfo);
    Map<String, CommandParameter> mediaPlaybackmediaSkipForwardCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter mediaPlaybackmediaSkipForwardCommandParameter =
        new CommandParameter(
            "MediaPlayback",
            ChipClusters.MediaPlaybackCluster.MediaSkipForwardResponseCallback.class);
    CommandParameter mediaPlaybackmediaSkipForwarddeltaPositionMillisecondsCommandParameter =
        new CommandParameter("deltaPositionMilliseconds", long.class);
    mediaPlaybackmediaSkipForwardCommandParams.put(
        "deltaPositionMilliseconds",
        mediaPlaybackmediaSkipForwarddeltaPositionMillisecondsCommandParameter);

    // Populate commands
    CommandInfo mediaPlaybackmediaSkipForwardCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaSkipForward(
                      (ChipClusters.MediaPlaybackCluster.MediaSkipForwardResponseCallback) callback,
                      (Long) commandArguments.get("deltaPositionMilliseconds"));
            },
            () -> new DelegatedMediaSkipForwardResponseCallback(),
            mediaPlaybackmediaSkipForwardCommandParams);
    mediaPlaybackClusterCommandInfo.put(
        "mediaSkipForward", mediaPlaybackmediaSkipForwardCommandInfo);
    Map<String, CommandParameter> mediaPlaybackmediaStartOverCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter mediaPlaybackmediaStartOverCommandParameter =
        new CommandParameter(
            "MediaPlayback",
            ChipClusters.MediaPlaybackCluster.MediaStartOverResponseCallback.class);
    // Populate commands
    CommandInfo mediaPlaybackmediaStartOverCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaStartOver(
                      (ChipClusters.MediaPlaybackCluster.MediaStartOverResponseCallback) callback);
            },
            () -> new DelegatedMediaStartOverResponseCallback(),
            mediaPlaybackmediaStartOverCommandParams);
    mediaPlaybackClusterCommandInfo.put("mediaStartOver", mediaPlaybackmediaStartOverCommandInfo);
    Map<String, CommandParameter> mediaPlaybackmediaStopCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter mediaPlaybackmediaStopCommandParameter =
        new CommandParameter(
            "MediaPlayback", ChipClusters.MediaPlaybackCluster.MediaStopResponseCallback.class);
    // Populate commands
    CommandInfo mediaPlaybackmediaStopCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaStop(
                      (ChipClusters.MediaPlaybackCluster.MediaStopResponseCallback) callback);
            },
            () -> new DelegatedMediaStopResponseCallback(),
            mediaPlaybackmediaStopCommandParams);
    mediaPlaybackClusterCommandInfo.put("mediaStop", mediaPlaybackmediaStopCommandInfo);
    // Populate cluster
    ClusterInfo mediaPlaybackClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.MediaPlaybackCluster(ptr, endpointId),
            mediaPlaybackClusterCommandInfo);
    clusterMap.put("mediaPlayback", mediaPlaybackClusterInfo);
    Map<String, CommandInfo> networkCommissioningClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> networkCommissioningaddThreadNetworkCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter networkCommissioningaddThreadNetworkCommandParameter =
        new CommandParameter(
            "NetworkCommissioning",
            ChipClusters.NetworkCommissioningCluster.AddThreadNetworkResponseCallback.class);
    CommandParameter networkCommissioningaddThreadNetworkoperationalDatasetCommandParameter =
        new CommandParameter("operationalDataset", byte[].class);
    networkCommissioningaddThreadNetworkCommandParams.put(
        "operationalDataset",
        networkCommissioningaddThreadNetworkoperationalDatasetCommandParameter);

    CommandParameter networkCommissioningaddThreadNetworkbreadcrumbCommandParameter =
        new CommandParameter("breadcrumb", long.class);
    networkCommissioningaddThreadNetworkCommandParams.put(
        "breadcrumb", networkCommissioningaddThreadNetworkbreadcrumbCommandParameter);

    CommandParameter networkCommissioningaddThreadNetworktimeoutMsCommandParameter =
        new CommandParameter("timeoutMs", long.class);
    networkCommissioningaddThreadNetworkCommandParams.put(
        "timeoutMs", networkCommissioningaddThreadNetworktimeoutMsCommandParameter);

    // Populate commands
    CommandInfo networkCommissioningaddThreadNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .addThreadNetwork(
                      (ChipClusters.NetworkCommissioningCluster.AddThreadNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("operationalDataset"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedAddThreadNetworkResponseCallback(),
            networkCommissioningaddThreadNetworkCommandParams);
    networkCommissioningClusterCommandInfo.put(
        "addThreadNetwork", networkCommissioningaddThreadNetworkCommandInfo);
    Map<String, CommandParameter> networkCommissioningaddWiFiNetworkCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter networkCommissioningaddWiFiNetworkCommandParameter =
        new CommandParameter(
            "NetworkCommissioning",
            ChipClusters.NetworkCommissioningCluster.AddWiFiNetworkResponseCallback.class);
    CommandParameter networkCommissioningaddWiFiNetworkssidCommandParameter =
        new CommandParameter("ssid", byte[].class);
    networkCommissioningaddWiFiNetworkCommandParams.put(
        "ssid", networkCommissioningaddWiFiNetworkssidCommandParameter);

    CommandParameter networkCommissioningaddWiFiNetworkcredentialsCommandParameter =
        new CommandParameter("credentials", byte[].class);
    networkCommissioningaddWiFiNetworkCommandParams.put(
        "credentials", networkCommissioningaddWiFiNetworkcredentialsCommandParameter);

    CommandParameter networkCommissioningaddWiFiNetworkbreadcrumbCommandParameter =
        new CommandParameter("breadcrumb", long.class);
    networkCommissioningaddWiFiNetworkCommandParams.put(
        "breadcrumb", networkCommissioningaddWiFiNetworkbreadcrumbCommandParameter);

    CommandParameter networkCommissioningaddWiFiNetworktimeoutMsCommandParameter =
        new CommandParameter("timeoutMs", long.class);
    networkCommissioningaddWiFiNetworkCommandParams.put(
        "timeoutMs", networkCommissioningaddWiFiNetworktimeoutMsCommandParameter);

    // Populate commands
    CommandInfo networkCommissioningaddWiFiNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .addWiFiNetwork(
                      (ChipClusters.NetworkCommissioningCluster.AddWiFiNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("ssid"),
                      (byte[]) commandArguments.get("credentials"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedAddWiFiNetworkResponseCallback(),
            networkCommissioningaddWiFiNetworkCommandParams);
    networkCommissioningClusterCommandInfo.put(
        "addWiFiNetwork", networkCommissioningaddWiFiNetworkCommandInfo);
    Map<String, CommandParameter> networkCommissioningdisableNetworkCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter networkCommissioningdisableNetworkCommandParameter =
        new CommandParameter(
            "NetworkCommissioning",
            ChipClusters.NetworkCommissioningCluster.DisableNetworkResponseCallback.class);
    CommandParameter networkCommissioningdisableNetworknetworkIDCommandParameter =
        new CommandParameter("networkID", byte[].class);
    networkCommissioningdisableNetworkCommandParams.put(
        "networkID", networkCommissioningdisableNetworknetworkIDCommandParameter);

    CommandParameter networkCommissioningdisableNetworkbreadcrumbCommandParameter =
        new CommandParameter("breadcrumb", long.class);
    networkCommissioningdisableNetworkCommandParams.put(
        "breadcrumb", networkCommissioningdisableNetworkbreadcrumbCommandParameter);

    CommandParameter networkCommissioningdisableNetworktimeoutMsCommandParameter =
        new CommandParameter("timeoutMs", long.class);
    networkCommissioningdisableNetworkCommandParams.put(
        "timeoutMs", networkCommissioningdisableNetworktimeoutMsCommandParameter);

    // Populate commands
    CommandInfo networkCommissioningdisableNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .disableNetwork(
                      (ChipClusters.NetworkCommissioningCluster.DisableNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("networkID"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedDisableNetworkResponseCallback(),
            networkCommissioningdisableNetworkCommandParams);
    networkCommissioningClusterCommandInfo.put(
        "disableNetwork", networkCommissioningdisableNetworkCommandInfo);
    Map<String, CommandParameter> networkCommissioningenableNetworkCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter networkCommissioningenableNetworkCommandParameter =
        new CommandParameter(
            "NetworkCommissioning",
            ChipClusters.NetworkCommissioningCluster.EnableNetworkResponseCallback.class);
    CommandParameter networkCommissioningenableNetworknetworkIDCommandParameter =
        new CommandParameter("networkID", byte[].class);
    networkCommissioningenableNetworkCommandParams.put(
        "networkID", networkCommissioningenableNetworknetworkIDCommandParameter);

    CommandParameter networkCommissioningenableNetworkbreadcrumbCommandParameter =
        new CommandParameter("breadcrumb", long.class);
    networkCommissioningenableNetworkCommandParams.put(
        "breadcrumb", networkCommissioningenableNetworkbreadcrumbCommandParameter);

    CommandParameter networkCommissioningenableNetworktimeoutMsCommandParameter =
        new CommandParameter("timeoutMs", long.class);
    networkCommissioningenableNetworkCommandParams.put(
        "timeoutMs", networkCommissioningenableNetworktimeoutMsCommandParameter);

    // Populate commands
    CommandInfo networkCommissioningenableNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .enableNetwork(
                      (ChipClusters.NetworkCommissioningCluster.EnableNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("networkID"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedEnableNetworkResponseCallback(),
            networkCommissioningenableNetworkCommandParams);
    networkCommissioningClusterCommandInfo.put(
        "enableNetwork", networkCommissioningenableNetworkCommandInfo);
    Map<String, CommandParameter>
        networkCommissioninggetLastNetworkCommissioningResultCommandParams =
            new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter networkCommissioninggetLastNetworkCommissioningResultCommandParameter =
        new CommandParameter("NetworkCommissioning", ChipClusters.DefaultClusterCallback.class);
    CommandParameter
        networkCommissioninggetLastNetworkCommissioningResulttimeoutMsCommandParameter =
            new CommandParameter("timeoutMs", long.class);
    networkCommissioninggetLastNetworkCommissioningResultCommandParams.put(
        "timeoutMs",
        networkCommissioninggetLastNetworkCommissioningResulttimeoutMsCommandParameter);

    // Populate commands
    CommandInfo networkCommissioninggetLastNetworkCommissioningResultCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .getLastNetworkCommissioningResult(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            networkCommissioninggetLastNetworkCommissioningResultCommandParams);
    networkCommissioningClusterCommandInfo.put(
        "getLastNetworkCommissioningResult",
        networkCommissioninggetLastNetworkCommissioningResultCommandInfo);
    Map<String, CommandParameter> networkCommissioningremoveNetworkCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter networkCommissioningremoveNetworkCommandParameter =
        new CommandParameter(
            "NetworkCommissioning",
            ChipClusters.NetworkCommissioningCluster.RemoveNetworkResponseCallback.class);
    CommandParameter networkCommissioningremoveNetworknetworkIDCommandParameter =
        new CommandParameter("networkID", byte[].class);
    networkCommissioningremoveNetworkCommandParams.put(
        "networkID", networkCommissioningremoveNetworknetworkIDCommandParameter);

    CommandParameter networkCommissioningremoveNetworkbreadcrumbCommandParameter =
        new CommandParameter("breadcrumb", long.class);
    networkCommissioningremoveNetworkCommandParams.put(
        "breadcrumb", networkCommissioningremoveNetworkbreadcrumbCommandParameter);

    CommandParameter networkCommissioningremoveNetworktimeoutMsCommandParameter =
        new CommandParameter("timeoutMs", long.class);
    networkCommissioningremoveNetworkCommandParams.put(
        "timeoutMs", networkCommissioningremoveNetworktimeoutMsCommandParameter);

    // Populate commands
    CommandInfo networkCommissioningremoveNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .removeNetwork(
                      (ChipClusters.NetworkCommissioningCluster.RemoveNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("networkID"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedRemoveNetworkResponseCallback(),
            networkCommissioningremoveNetworkCommandParams);
    networkCommissioningClusterCommandInfo.put(
        "removeNetwork", networkCommissioningremoveNetworkCommandInfo);
    Map<String, CommandParameter> networkCommissioningscanNetworksCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter networkCommissioningscanNetworksCommandParameter =
        new CommandParameter(
            "NetworkCommissioning",
            ChipClusters.NetworkCommissioningCluster.ScanNetworksResponseCallback.class);
    CommandParameter networkCommissioningscanNetworksssidCommandParameter =
        new CommandParameter("ssid", byte[].class);
    networkCommissioningscanNetworksCommandParams.put(
        "ssid", networkCommissioningscanNetworksssidCommandParameter);

    CommandParameter networkCommissioningscanNetworksbreadcrumbCommandParameter =
        new CommandParameter("breadcrumb", long.class);
    networkCommissioningscanNetworksCommandParams.put(
        "breadcrumb", networkCommissioningscanNetworksbreadcrumbCommandParameter);

    CommandParameter networkCommissioningscanNetworkstimeoutMsCommandParameter =
        new CommandParameter("timeoutMs", long.class);
    networkCommissioningscanNetworksCommandParams.put(
        "timeoutMs", networkCommissioningscanNetworkstimeoutMsCommandParameter);

    // Populate commands
    CommandInfo networkCommissioningscanNetworksCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .scanNetworks(
                      (ChipClusters.NetworkCommissioningCluster.ScanNetworksResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("ssid"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedScanNetworksResponseCallback(),
            networkCommissioningscanNetworksCommandParams);
    networkCommissioningClusterCommandInfo.put(
        "scanNetworks", networkCommissioningscanNetworksCommandInfo);
    Map<String, CommandParameter> networkCommissioningupdateThreadNetworkCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter networkCommissioningupdateThreadNetworkCommandParameter =
        new CommandParameter(
            "NetworkCommissioning",
            ChipClusters.NetworkCommissioningCluster.UpdateThreadNetworkResponseCallback.class);
    CommandParameter networkCommissioningupdateThreadNetworkoperationalDatasetCommandParameter =
        new CommandParameter("operationalDataset", byte[].class);
    networkCommissioningupdateThreadNetworkCommandParams.put(
        "operationalDataset",
        networkCommissioningupdateThreadNetworkoperationalDatasetCommandParameter);

    CommandParameter networkCommissioningupdateThreadNetworkbreadcrumbCommandParameter =
        new CommandParameter("breadcrumb", long.class);
    networkCommissioningupdateThreadNetworkCommandParams.put(
        "breadcrumb", networkCommissioningupdateThreadNetworkbreadcrumbCommandParameter);

    CommandParameter networkCommissioningupdateThreadNetworktimeoutMsCommandParameter =
        new CommandParameter("timeoutMs", long.class);
    networkCommissioningupdateThreadNetworkCommandParams.put(
        "timeoutMs", networkCommissioningupdateThreadNetworktimeoutMsCommandParameter);

    // Populate commands
    CommandInfo networkCommissioningupdateThreadNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .updateThreadNetwork(
                      (ChipClusters.NetworkCommissioningCluster.UpdateThreadNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("operationalDataset"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedUpdateThreadNetworkResponseCallback(),
            networkCommissioningupdateThreadNetworkCommandParams);
    networkCommissioningClusterCommandInfo.put(
        "updateThreadNetwork", networkCommissioningupdateThreadNetworkCommandInfo);
    Map<String, CommandParameter> networkCommissioningupdateWiFiNetworkCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter networkCommissioningupdateWiFiNetworkCommandParameter =
        new CommandParameter(
            "NetworkCommissioning",
            ChipClusters.NetworkCommissioningCluster.UpdateWiFiNetworkResponseCallback.class);
    CommandParameter networkCommissioningupdateWiFiNetworkssidCommandParameter =
        new CommandParameter("ssid", byte[].class);
    networkCommissioningupdateWiFiNetworkCommandParams.put(
        "ssid", networkCommissioningupdateWiFiNetworkssidCommandParameter);

    CommandParameter networkCommissioningupdateWiFiNetworkcredentialsCommandParameter =
        new CommandParameter("credentials", byte[].class);
    networkCommissioningupdateWiFiNetworkCommandParams.put(
        "credentials", networkCommissioningupdateWiFiNetworkcredentialsCommandParameter);

    CommandParameter networkCommissioningupdateWiFiNetworkbreadcrumbCommandParameter =
        new CommandParameter("breadcrumb", long.class);
    networkCommissioningupdateWiFiNetworkCommandParams.put(
        "breadcrumb", networkCommissioningupdateWiFiNetworkbreadcrumbCommandParameter);

    CommandParameter networkCommissioningupdateWiFiNetworktimeoutMsCommandParameter =
        new CommandParameter("timeoutMs", long.class);
    networkCommissioningupdateWiFiNetworkCommandParams.put(
        "timeoutMs", networkCommissioningupdateWiFiNetworktimeoutMsCommandParameter);

    // Populate commands
    CommandInfo networkCommissioningupdateWiFiNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .updateWiFiNetwork(
                      (ChipClusters.NetworkCommissioningCluster.UpdateWiFiNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("ssid"),
                      (byte[]) commandArguments.get("credentials"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedUpdateWiFiNetworkResponseCallback(),
            networkCommissioningupdateWiFiNetworkCommandParams);
    networkCommissioningClusterCommandInfo.put(
        "updateWiFiNetwork", networkCommissioningupdateWiFiNetworkCommandInfo);
    // Populate cluster
    ClusterInfo networkCommissioningClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.NetworkCommissioningCluster(ptr, endpointId),
            networkCommissioningClusterCommandInfo);
    clusterMap.put("networkCommissioning", networkCommissioningClusterInfo);
    Map<String, CommandInfo> otaSoftwareUpdateProviderClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> otaSoftwareUpdateProviderapplyUpdateRequestCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter otaSoftwareUpdateProviderapplyUpdateRequestCommandParameter =
        new CommandParameter(
            "OtaSoftwareUpdateProvider",
            ChipClusters.OtaSoftwareUpdateProviderCluster.ApplyUpdateRequestResponseCallback.class);
    CommandParameter otaSoftwareUpdateProviderapplyUpdateRequestupdateTokenCommandParameter =
        new CommandParameter("updateToken", byte[].class);
    otaSoftwareUpdateProviderapplyUpdateRequestCommandParams.put(
        "updateToken", otaSoftwareUpdateProviderapplyUpdateRequestupdateTokenCommandParameter);

    CommandParameter otaSoftwareUpdateProviderapplyUpdateRequestnewVersionCommandParameter =
        new CommandParameter("newVersion", long.class);
    otaSoftwareUpdateProviderapplyUpdateRequestCommandParams.put(
        "newVersion", otaSoftwareUpdateProviderapplyUpdateRequestnewVersionCommandParameter);

    // Populate commands
    CommandInfo otaSoftwareUpdateProviderapplyUpdateRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster)
                  .applyUpdateRequest(
                      (ChipClusters.OtaSoftwareUpdateProviderCluster
                              .ApplyUpdateRequestResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("updateToken"),
                      (Long) commandArguments.get("newVersion"));
            },
            () -> new DelegatedApplyUpdateRequestResponseCallback(),
            otaSoftwareUpdateProviderapplyUpdateRequestCommandParams);
    otaSoftwareUpdateProviderClusterCommandInfo.put(
        "applyUpdateRequest", otaSoftwareUpdateProviderapplyUpdateRequestCommandInfo);
    Map<String, CommandParameter> otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParameter =
        new CommandParameter(
            "OtaSoftwareUpdateProvider", ChipClusters.DefaultClusterCallback.class);
    CommandParameter otaSoftwareUpdateProvidernotifyUpdateAppliedupdateTokenCommandParameter =
        new CommandParameter("updateToken", byte[].class);
    otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParams.put(
        "updateToken", otaSoftwareUpdateProvidernotifyUpdateAppliedupdateTokenCommandParameter);

    CommandParameter otaSoftwareUpdateProvidernotifyUpdateAppliedsoftwareVersionCommandParameter =
        new CommandParameter("softwareVersion", long.class);
    otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParams.put(
        "softwareVersion",
        otaSoftwareUpdateProvidernotifyUpdateAppliedsoftwareVersionCommandParameter);

    // Populate commands
    CommandInfo otaSoftwareUpdateProvidernotifyUpdateAppliedCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster)
                  .notifyUpdateApplied(
                      (DefaultClusterCallback) callback,
                      (byte[]) commandArguments.get("updateToken"),
                      (Long) commandArguments.get("softwareVersion"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParams);
    otaSoftwareUpdateProviderClusterCommandInfo.put(
        "notifyUpdateApplied", otaSoftwareUpdateProvidernotifyUpdateAppliedCommandInfo);
    Map<String, CommandParameter> otaSoftwareUpdateProviderqueryImageCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter otaSoftwareUpdateProviderqueryImageCommandParameter =
        new CommandParameter(
            "OtaSoftwareUpdateProvider",
            ChipClusters.OtaSoftwareUpdateProviderCluster.QueryImageResponseCallback.class);
    CommandParameter otaSoftwareUpdateProviderqueryImagevendorIdCommandParameter =
        new CommandParameter("vendorId", int.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "vendorId", otaSoftwareUpdateProviderqueryImagevendorIdCommandParameter);

    CommandParameter otaSoftwareUpdateProviderqueryImageproductIdCommandParameter =
        new CommandParameter("productId", int.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "productId", otaSoftwareUpdateProviderqueryImageproductIdCommandParameter);

    CommandParameter otaSoftwareUpdateProviderqueryImagehardwareVersionCommandParameter =
        new CommandParameter("hardwareVersion", int.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "hardwareVersion", otaSoftwareUpdateProviderqueryImagehardwareVersionCommandParameter);

    CommandParameter otaSoftwareUpdateProviderqueryImagesoftwareVersionCommandParameter =
        new CommandParameter("softwareVersion", long.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "softwareVersion", otaSoftwareUpdateProviderqueryImagesoftwareVersionCommandParameter);

    CommandParameter otaSoftwareUpdateProviderqueryImageprotocolsSupportedCommandParameter =
        new CommandParameter("protocolsSupported", int.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "protocolsSupported",
        otaSoftwareUpdateProviderqueryImageprotocolsSupportedCommandParameter);

    CommandParameter otaSoftwareUpdateProviderqueryImagelocationCommandParameter =
        new CommandParameter("location", String.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "location", otaSoftwareUpdateProviderqueryImagelocationCommandParameter);

    CommandParameter otaSoftwareUpdateProviderqueryImagerequestorCanConsentCommandParameter =
        new CommandParameter("requestorCanConsent", boolean.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "requestorCanConsent",
        otaSoftwareUpdateProviderqueryImagerequestorCanConsentCommandParameter);

    CommandParameter otaSoftwareUpdateProviderqueryImagemetadataForProviderCommandParameter =
        new CommandParameter("metadataForProvider", byte[].class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "metadataForProvider",
        otaSoftwareUpdateProviderqueryImagemetadataForProviderCommandParameter);

    // Populate commands
    CommandInfo otaSoftwareUpdateProviderqueryImageCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster)
                  .queryImage(
                      (ChipClusters.OtaSoftwareUpdateProviderCluster.QueryImageResponseCallback)
                          callback,
                      (Integer) commandArguments.get("vendorId"),
                      (Integer) commandArguments.get("productId"),
                      (Integer) commandArguments.get("hardwareVersion"),
                      (Long) commandArguments.get("softwareVersion"),
                      (Integer) commandArguments.get("protocolsSupported"),
                      (String) commandArguments.get("location"),
                      (Boolean) commandArguments.get("requestorCanConsent"),
                      (byte[]) commandArguments.get("metadataForProvider"));
            },
            () -> new DelegatedQueryImageResponseCallback(),
            otaSoftwareUpdateProviderqueryImageCommandParams);
    otaSoftwareUpdateProviderClusterCommandInfo.put(
        "queryImage", otaSoftwareUpdateProviderqueryImageCommandInfo);
    // Populate cluster
    ClusterInfo otaSoftwareUpdateProviderClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.OtaSoftwareUpdateProviderCluster(ptr, endpointId),
            otaSoftwareUpdateProviderClusterCommandInfo);
    clusterMap.put("otaSoftwareUpdateProvider", otaSoftwareUpdateProviderClusterInfo);
    Map<String, CommandInfo> otaSoftwareUpdateRequestorClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> otaSoftwareUpdateRequestorannounceOtaProviderCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter otaSoftwareUpdateRequestorannounceOtaProviderCommandParameter =
        new CommandParameter(
            "OtaSoftwareUpdateRequestor", ChipClusters.DefaultClusterCallback.class);
    CommandParameter otaSoftwareUpdateRequestorannounceOtaProviderproviderLocationCommandParameter =
        new CommandParameter("providerLocation", byte[].class);
    otaSoftwareUpdateRequestorannounceOtaProviderCommandParams.put(
        "providerLocation",
        otaSoftwareUpdateRequestorannounceOtaProviderproviderLocationCommandParameter);

    CommandParameter otaSoftwareUpdateRequestorannounceOtaProvidervendorIdCommandParameter =
        new CommandParameter("vendorId", int.class);
    otaSoftwareUpdateRequestorannounceOtaProviderCommandParams.put(
        "vendorId", otaSoftwareUpdateRequestorannounceOtaProvidervendorIdCommandParameter);

    CommandParameter
        otaSoftwareUpdateRequestorannounceOtaProviderannouncementReasonCommandParameter =
            new CommandParameter("announcementReason", int.class);
    otaSoftwareUpdateRequestorannounceOtaProviderCommandParams.put(
        "announcementReason",
        otaSoftwareUpdateRequestorannounceOtaProviderannouncementReasonCommandParameter);

    CommandParameter otaSoftwareUpdateRequestorannounceOtaProvidermetadataForNodeCommandParameter =
        new CommandParameter("metadataForNode", byte[].class);
    otaSoftwareUpdateRequestorannounceOtaProviderCommandParams.put(
        "metadataForNode",
        otaSoftwareUpdateRequestorannounceOtaProvidermetadataForNodeCommandParameter);

    // Populate commands
    CommandInfo otaSoftwareUpdateRequestorannounceOtaProviderCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OtaSoftwareUpdateRequestorCluster) cluster)
                  .announceOtaProvider(
                      (DefaultClusterCallback) callback,
                      (byte[]) commandArguments.get("providerLocation"),
                      (Integer) commandArguments.get("vendorId"),
                      (Integer) commandArguments.get("announcementReason"),
                      (byte[]) commandArguments.get("metadataForNode"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            otaSoftwareUpdateRequestorannounceOtaProviderCommandParams);
    otaSoftwareUpdateRequestorClusterCommandInfo.put(
        "announceOtaProvider", otaSoftwareUpdateRequestorannounceOtaProviderCommandInfo);
    // Populate cluster
    ClusterInfo otaSoftwareUpdateRequestorClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.OtaSoftwareUpdateRequestorCluster(ptr, endpointId),
            otaSoftwareUpdateRequestorClusterCommandInfo);
    clusterMap.put("otaSoftwareUpdateRequestor", otaSoftwareUpdateRequestorClusterInfo);
    Map<String, CommandInfo> occupancySensingClusterCommandInfo = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo occupancySensingClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.OccupancySensingCluster(ptr, endpointId),
            occupancySensingClusterCommandInfo);
    clusterMap.put("occupancySensing", occupancySensingClusterInfo);
    Map<String, CommandInfo> onOffClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> onOffoffCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter onOffoffCommandParameter =
        new CommandParameter("OnOff", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo onOffoffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster).off((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOffoffCommandParams);
    onOffClusterCommandInfo.put("off", onOffoffCommandInfo);
    Map<String, CommandParameter> onOffoffWithEffectCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter onOffoffWithEffectCommandParameter =
        new CommandParameter("OnOff", ChipClusters.DefaultClusterCallback.class);
    CommandParameter onOffoffWithEffecteffectIdCommandParameter =
        new CommandParameter("effectId", int.class);
    onOffoffWithEffectCommandParams.put("effectId", onOffoffWithEffecteffectIdCommandParameter);

    CommandParameter onOffoffWithEffecteffectVariantCommandParameter =
        new CommandParameter("effectVariant", int.class);
    onOffoffWithEffectCommandParams.put(
        "effectVariant", onOffoffWithEffecteffectVariantCommandParameter);

    // Populate commands
    CommandInfo onOffoffWithEffectCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .offWithEffect(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("effectId"),
                      (Integer) commandArguments.get("effectVariant"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOffoffWithEffectCommandParams);
    onOffClusterCommandInfo.put("offWithEffect", onOffoffWithEffectCommandInfo);
    Map<String, CommandParameter> onOffonCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter onOffonCommandParameter =
        new CommandParameter("OnOff", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo onOffonCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster).on((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOffonCommandParams);
    onOffClusterCommandInfo.put("on", onOffonCommandInfo);
    Map<String, CommandParameter> onOffonWithRecallGlobalSceneCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter onOffonWithRecallGlobalSceneCommandParameter =
        new CommandParameter("OnOff", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo onOffonWithRecallGlobalSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .onWithRecallGlobalScene((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOffonWithRecallGlobalSceneCommandParams);
    onOffClusterCommandInfo.put("onWithRecallGlobalScene", onOffonWithRecallGlobalSceneCommandInfo);
    Map<String, CommandParameter> onOffonWithTimedOffCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter onOffonWithTimedOffCommandParameter =
        new CommandParameter("OnOff", ChipClusters.DefaultClusterCallback.class);
    CommandParameter onOffonWithTimedOffonOffControlCommandParameter =
        new CommandParameter("onOffControl", int.class);
    onOffonWithTimedOffCommandParams.put(
        "onOffControl", onOffonWithTimedOffonOffControlCommandParameter);

    CommandParameter onOffonWithTimedOffonTimeCommandParameter =
        new CommandParameter("onTime", int.class);
    onOffonWithTimedOffCommandParams.put("onTime", onOffonWithTimedOffonTimeCommandParameter);

    CommandParameter onOffonWithTimedOffoffWaitTimeCommandParameter =
        new CommandParameter("offWaitTime", int.class);
    onOffonWithTimedOffCommandParams.put(
        "offWaitTime", onOffonWithTimedOffoffWaitTimeCommandParameter);

    // Populate commands
    CommandInfo onOffonWithTimedOffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .onWithTimedOff(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("onOffControl"),
                      (Integer) commandArguments.get("onTime"),
                      (Integer) commandArguments.get("offWaitTime"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOffonWithTimedOffCommandParams);
    onOffClusterCommandInfo.put("onWithTimedOff", onOffonWithTimedOffCommandInfo);
    Map<String, CommandParameter> onOfftoggleCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter onOfftoggleCommandParameter =
        new CommandParameter("OnOff", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo onOfftoggleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster).toggle((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOfftoggleCommandParams);
    onOffClusterCommandInfo.put("toggle", onOfftoggleCommandInfo);
    // Populate cluster
    ClusterInfo onOffClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.OnOffCluster(ptr, endpointId),
            onOffClusterCommandInfo);
    clusterMap.put("onOff", onOffClusterInfo);
    Map<String, CommandInfo> onOffSwitchConfigurationClusterCommandInfo = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo onOffSwitchConfigurationClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.OnOffSwitchConfigurationCluster(ptr, endpointId),
            onOffSwitchConfigurationClusterCommandInfo);
    clusterMap.put("onOffSwitchConfiguration", onOffSwitchConfigurationClusterInfo);
    Map<String, CommandInfo> operationalCredentialsClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> operationalCredentialsaddNOCCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter operationalCredentialsaddNOCCommandParameter =
        new CommandParameter(
            "OperationalCredentials",
            ChipClusters.OperationalCredentialsCluster.NOCResponseCallback.class);
    CommandParameter operationalCredentialsaddNOCNOCValueCommandParameter =
        new CommandParameter("NOCValue", byte[].class);
    operationalCredentialsaddNOCCommandParams.put(
        "NOCValue", operationalCredentialsaddNOCNOCValueCommandParameter);

    CommandParameter operationalCredentialsaddNOCICACValueCommandParameter =
        new CommandParameter("ICACValue", byte[].class);
    operationalCredentialsaddNOCCommandParams.put(
        "ICACValue", operationalCredentialsaddNOCICACValueCommandParameter);

    CommandParameter operationalCredentialsaddNOCIPKValueCommandParameter =
        new CommandParameter("IPKValue", byte[].class);
    operationalCredentialsaddNOCCommandParams.put(
        "IPKValue", operationalCredentialsaddNOCIPKValueCommandParameter);

    CommandParameter operationalCredentialsaddNOCcaseAdminNodeCommandParameter =
        new CommandParameter("caseAdminNode", long.class);
    operationalCredentialsaddNOCCommandParams.put(
        "caseAdminNode", operationalCredentialsaddNOCcaseAdminNodeCommandParameter);

    CommandParameter operationalCredentialsaddNOCadminVendorIdCommandParameter =
        new CommandParameter("adminVendorId", int.class);
    operationalCredentialsaddNOCCommandParams.put(
        "adminVendorId", operationalCredentialsaddNOCadminVendorIdCommandParameter);

    // Populate commands
    CommandInfo operationalCredentialsaddNOCCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .addNOC(
                      (ChipClusters.OperationalCredentialsCluster.NOCResponseCallback) callback,
                      (byte[]) commandArguments.get("NOCValue"),
                      (byte[]) commandArguments.get("ICACValue"),
                      (byte[]) commandArguments.get("IPKValue"),
                      (Long) commandArguments.get("caseAdminNode"),
                      (Integer) commandArguments.get("adminVendorId"));
            },
            () -> new DelegatedNOCResponseCallback(),
            operationalCredentialsaddNOCCommandParams);
    operationalCredentialsClusterCommandInfo.put("addNOC", operationalCredentialsaddNOCCommandInfo);
    Map<String, CommandParameter> operationalCredentialsaddTrustedRootCertificateCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter operationalCredentialsaddTrustedRootCertificateCommandParameter =
        new CommandParameter("OperationalCredentials", ChipClusters.DefaultClusterCallback.class);
    CommandParameter
        operationalCredentialsaddTrustedRootCertificaterootCertificateCommandParameter =
            new CommandParameter("rootCertificate", byte[].class);
    operationalCredentialsaddTrustedRootCertificateCommandParams.put(
        "rootCertificate",
        operationalCredentialsaddTrustedRootCertificaterootCertificateCommandParameter);

    // Populate commands
    CommandInfo operationalCredentialsaddTrustedRootCertificateCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .addTrustedRootCertificate(
                      (DefaultClusterCallback) callback,
                      (byte[]) commandArguments.get("rootCertificate"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            operationalCredentialsaddTrustedRootCertificateCommandParams);
    operationalCredentialsClusterCommandInfo.put(
        "addTrustedRootCertificate", operationalCredentialsaddTrustedRootCertificateCommandInfo);
    Map<String, CommandParameter> operationalCredentialsattestationRequestCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter operationalCredentialsattestationRequestCommandParameter =
        new CommandParameter(
            "OperationalCredentials",
            ChipClusters.OperationalCredentialsCluster.AttestationResponseCallback.class);
    CommandParameter operationalCredentialsattestationRequestattestationNonceCommandParameter =
        new CommandParameter("attestationNonce", byte[].class);
    operationalCredentialsattestationRequestCommandParams.put(
        "attestationNonce",
        operationalCredentialsattestationRequestattestationNonceCommandParameter);

    // Populate commands
    CommandInfo operationalCredentialsattestationRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .attestationRequest(
                      (ChipClusters.OperationalCredentialsCluster.AttestationResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("attestationNonce"));
            },
            () -> new DelegatedAttestationResponseCallback(),
            operationalCredentialsattestationRequestCommandParams);
    operationalCredentialsClusterCommandInfo.put(
        "attestationRequest", operationalCredentialsattestationRequestCommandInfo);
    Map<String, CommandParameter> operationalCredentialscertificateChainRequestCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter operationalCredentialscertificateChainRequestCommandParameter =
        new CommandParameter(
            "OperationalCredentials",
            ChipClusters.OperationalCredentialsCluster.CertificateChainResponseCallback.class);
    CommandParameter operationalCredentialscertificateChainRequestcertificateTypeCommandParameter =
        new CommandParameter("certificateType", int.class);
    operationalCredentialscertificateChainRequestCommandParams.put(
        "certificateType",
        operationalCredentialscertificateChainRequestcertificateTypeCommandParameter);

    // Populate commands
    CommandInfo operationalCredentialscertificateChainRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .certificateChainRequest(
                      (ChipClusters.OperationalCredentialsCluster.CertificateChainResponseCallback)
                          callback,
                      (Integer) commandArguments.get("certificateType"));
            },
            () -> new DelegatedCertificateChainResponseCallback(),
            operationalCredentialscertificateChainRequestCommandParams);
    operationalCredentialsClusterCommandInfo.put(
        "certificateChainRequest", operationalCredentialscertificateChainRequestCommandInfo);
    Map<String, CommandParameter> operationalCredentialsopCSRRequestCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter operationalCredentialsopCSRRequestCommandParameter =
        new CommandParameter(
            "OperationalCredentials",
            ChipClusters.OperationalCredentialsCluster.OpCSRResponseCallback.class);
    CommandParameter operationalCredentialsopCSRRequestCSRNonceCommandParameter =
        new CommandParameter("CSRNonce", byte[].class);
    operationalCredentialsopCSRRequestCommandParams.put(
        "CSRNonce", operationalCredentialsopCSRRequestCSRNonceCommandParameter);

    // Populate commands
    CommandInfo operationalCredentialsopCSRRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .opCSRRequest(
                      (ChipClusters.OperationalCredentialsCluster.OpCSRResponseCallback) callback,
                      (byte[]) commandArguments.get("CSRNonce"));
            },
            () -> new DelegatedOpCSRResponseCallback(),
            operationalCredentialsopCSRRequestCommandParams);
    operationalCredentialsClusterCommandInfo.put(
        "opCSRRequest", operationalCredentialsopCSRRequestCommandInfo);
    Map<String, CommandParameter> operationalCredentialsremoveFabricCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter operationalCredentialsremoveFabricCommandParameter =
        new CommandParameter(
            "OperationalCredentials",
            ChipClusters.OperationalCredentialsCluster.NOCResponseCallback.class);
    CommandParameter operationalCredentialsremoveFabricfabricIndexCommandParameter =
        new CommandParameter("fabricIndex", int.class);
    operationalCredentialsremoveFabricCommandParams.put(
        "fabricIndex", operationalCredentialsremoveFabricfabricIndexCommandParameter);

    // Populate commands
    CommandInfo operationalCredentialsremoveFabricCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .removeFabric(
                      (ChipClusters.OperationalCredentialsCluster.NOCResponseCallback) callback,
                      (Integer) commandArguments.get("fabricIndex"));
            },
            () -> new DelegatedNOCResponseCallback(),
            operationalCredentialsremoveFabricCommandParams);
    operationalCredentialsClusterCommandInfo.put(
        "removeFabric", operationalCredentialsremoveFabricCommandInfo);
    Map<String, CommandParameter> operationalCredentialsremoveTrustedRootCertificateCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter operationalCredentialsremoveTrustedRootCertificateCommandParameter =
        new CommandParameter("OperationalCredentials", ChipClusters.DefaultClusterCallback.class);
    CommandParameter
        operationalCredentialsremoveTrustedRootCertificatetrustedRootIdentifierCommandParameter =
            new CommandParameter("trustedRootIdentifier", byte[].class);
    operationalCredentialsremoveTrustedRootCertificateCommandParams.put(
        "trustedRootIdentifier",
        operationalCredentialsremoveTrustedRootCertificatetrustedRootIdentifierCommandParameter);

    // Populate commands
    CommandInfo operationalCredentialsremoveTrustedRootCertificateCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .removeTrustedRootCertificate(
                      (DefaultClusterCallback) callback,
                      (byte[]) commandArguments.get("trustedRootIdentifier"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            operationalCredentialsremoveTrustedRootCertificateCommandParams);
    operationalCredentialsClusterCommandInfo.put(
        "removeTrustedRootCertificate",
        operationalCredentialsremoveTrustedRootCertificateCommandInfo);
    Map<String, CommandParameter> operationalCredentialsupdateFabricLabelCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter operationalCredentialsupdateFabricLabelCommandParameter =
        new CommandParameter(
            "OperationalCredentials",
            ChipClusters.OperationalCredentialsCluster.NOCResponseCallback.class);
    CommandParameter operationalCredentialsupdateFabricLabellabelCommandParameter =
        new CommandParameter("label", String.class);
    operationalCredentialsupdateFabricLabelCommandParams.put(
        "label", operationalCredentialsupdateFabricLabellabelCommandParameter);

    // Populate commands
    CommandInfo operationalCredentialsupdateFabricLabelCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .updateFabricLabel(
                      (ChipClusters.OperationalCredentialsCluster.NOCResponseCallback) callback,
                      (String) commandArguments.get("label"));
            },
            () -> new DelegatedNOCResponseCallback(),
            operationalCredentialsupdateFabricLabelCommandParams);
    operationalCredentialsClusterCommandInfo.put(
        "updateFabricLabel", operationalCredentialsupdateFabricLabelCommandInfo);
    Map<String, CommandParameter> operationalCredentialsupdateNOCCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter operationalCredentialsupdateNOCCommandParameter =
        new CommandParameter(
            "OperationalCredentials",
            ChipClusters.OperationalCredentialsCluster.NOCResponseCallback.class);
    CommandParameter operationalCredentialsupdateNOCNOCValueCommandParameter =
        new CommandParameter("NOCValue", byte[].class);
    operationalCredentialsupdateNOCCommandParams.put(
        "NOCValue", operationalCredentialsupdateNOCNOCValueCommandParameter);

    CommandParameter operationalCredentialsupdateNOCICACValueCommandParameter =
        new CommandParameter("ICACValue", byte[].class);
    operationalCredentialsupdateNOCCommandParams.put(
        "ICACValue", operationalCredentialsupdateNOCICACValueCommandParameter);

    // Populate commands
    CommandInfo operationalCredentialsupdateNOCCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .updateNOC(
                      (ChipClusters.OperationalCredentialsCluster.NOCResponseCallback) callback,
                      (byte[]) commandArguments.get("NOCValue"),
                      (byte[]) commandArguments.get("ICACValue"));
            },
            () -> new DelegatedNOCResponseCallback(),
            operationalCredentialsupdateNOCCommandParams);
    operationalCredentialsClusterCommandInfo.put(
        "updateNOC", operationalCredentialsupdateNOCCommandInfo);
    // Populate cluster
    ClusterInfo operationalCredentialsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.OperationalCredentialsCluster(ptr, endpointId),
            operationalCredentialsClusterCommandInfo);
    clusterMap.put("operationalCredentials", operationalCredentialsClusterInfo);
    Map<String, CommandInfo> powerSourceClusterCommandInfo = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo powerSourceClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.PowerSourceCluster(ptr, endpointId),
            powerSourceClusterCommandInfo);
    clusterMap.put("powerSource", powerSourceClusterInfo);
    Map<String, CommandInfo> pressureMeasurementClusterCommandInfo = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo pressureMeasurementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.PressureMeasurementCluster(ptr, endpointId),
            pressureMeasurementClusterCommandInfo);
    clusterMap.put("pressureMeasurement", pressureMeasurementClusterInfo);
    Map<String, CommandInfo> pumpConfigurationAndControlClusterCommandInfo = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo pumpConfigurationAndControlClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.PumpConfigurationAndControlCluster(ptr, endpointId),
            pumpConfigurationAndControlClusterCommandInfo);
    clusterMap.put("pumpConfigurationAndControl", pumpConfigurationAndControlClusterInfo);
    Map<String, CommandInfo> relativeHumidityMeasurementClusterCommandInfo = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo relativeHumidityMeasurementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.RelativeHumidityMeasurementCluster(ptr, endpointId),
            relativeHumidityMeasurementClusterCommandInfo);
    clusterMap.put("relativeHumidityMeasurement", relativeHumidityMeasurementClusterInfo);
    Map<String, CommandInfo> scenesClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> scenesaddSceneCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter scenesaddSceneCommandParameter =
        new CommandParameter("Scenes", ChipClusters.ScenesCluster.AddSceneResponseCallback.class);
    CommandParameter scenesaddScenegroupIdCommandParameter =
        new CommandParameter("groupId", int.class);
    scenesaddSceneCommandParams.put("groupId", scenesaddScenegroupIdCommandParameter);

    CommandParameter scenesaddScenesceneIdCommandParameter =
        new CommandParameter("sceneId", int.class);
    scenesaddSceneCommandParams.put("sceneId", scenesaddScenesceneIdCommandParameter);

    CommandParameter scenesaddScenetransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    scenesaddSceneCommandParams.put("transitionTime", scenesaddScenetransitionTimeCommandParameter);

    CommandParameter scenesaddScenesceneNameCommandParameter =
        new CommandParameter("sceneName", String.class);
    scenesaddSceneCommandParams.put("sceneName", scenesaddScenesceneNameCommandParameter);

    CommandParameter scenesaddSceneclusterIdCommandParameter =
        new CommandParameter("clusterId", long.class);
    scenesaddSceneCommandParams.put("clusterId", scenesaddSceneclusterIdCommandParameter);

    CommandParameter scenesaddScenelengthCommandParameter =
        new CommandParameter("length", int.class);
    scenesaddSceneCommandParams.put("length", scenesaddScenelengthCommandParameter);

    CommandParameter scenesaddScenevalueCommandParameter = new CommandParameter("value", int.class);
    scenesaddSceneCommandParams.put("value", scenesaddScenevalueCommandParameter);

    // Populate commands
    CommandInfo scenesaddSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .addScene(
                      (ChipClusters.ScenesCluster.AddSceneResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("sceneId"),
                      (Integer) commandArguments.get("transitionTime"),
                      (String) commandArguments.get("sceneName"),
                      (Long) commandArguments.get("clusterId"),
                      (Integer) commandArguments.get("length"),
                      (Integer) commandArguments.get("value"));
            },
            () -> new DelegatedAddSceneResponseCallback(),
            scenesaddSceneCommandParams);
    scenesClusterCommandInfo.put("addScene", scenesaddSceneCommandInfo);
    Map<String, CommandParameter> scenesgetSceneMembershipCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter scenesgetSceneMembershipCommandParameter =
        new CommandParameter(
            "Scenes", ChipClusters.ScenesCluster.GetSceneMembershipResponseCallback.class);
    CommandParameter scenesgetSceneMembershipgroupIdCommandParameter =
        new CommandParameter("groupId", int.class);
    scenesgetSceneMembershipCommandParams.put(
        "groupId", scenesgetSceneMembershipgroupIdCommandParameter);

    // Populate commands
    CommandInfo scenesgetSceneMembershipCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .getSceneMembership(
                      (ChipClusters.ScenesCluster.GetSceneMembershipResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"));
            },
            () -> new DelegatedGetSceneMembershipResponseCallback(),
            scenesgetSceneMembershipCommandParams);
    scenesClusterCommandInfo.put("getSceneMembership", scenesgetSceneMembershipCommandInfo);
    Map<String, CommandParameter> scenesrecallSceneCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter scenesrecallSceneCommandParameter =
        new CommandParameter("Scenes", ChipClusters.DefaultClusterCallback.class);
    CommandParameter scenesrecallScenegroupIdCommandParameter =
        new CommandParameter("groupId", int.class);
    scenesrecallSceneCommandParams.put("groupId", scenesrecallScenegroupIdCommandParameter);

    CommandParameter scenesrecallScenesceneIdCommandParameter =
        new CommandParameter("sceneId", int.class);
    scenesrecallSceneCommandParams.put("sceneId", scenesrecallScenesceneIdCommandParameter);

    CommandParameter scenesrecallScenetransitionTimeCommandParameter =
        new CommandParameter("transitionTime", int.class);
    scenesrecallSceneCommandParams.put(
        "transitionTime", scenesrecallScenetransitionTimeCommandParameter);

    // Populate commands
    CommandInfo scenesrecallSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .recallScene(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("sceneId"),
                      (Integer) commandArguments.get("transitionTime"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            scenesrecallSceneCommandParams);
    scenesClusterCommandInfo.put("recallScene", scenesrecallSceneCommandInfo);
    Map<String, CommandParameter> scenesremoveAllScenesCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter scenesremoveAllScenesCommandParameter =
        new CommandParameter(
            "Scenes", ChipClusters.ScenesCluster.RemoveAllScenesResponseCallback.class);
    CommandParameter scenesremoveAllScenesgroupIdCommandParameter =
        new CommandParameter("groupId", int.class);
    scenesremoveAllScenesCommandParams.put("groupId", scenesremoveAllScenesgroupIdCommandParameter);

    // Populate commands
    CommandInfo scenesremoveAllScenesCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .removeAllScenes(
                      (ChipClusters.ScenesCluster.RemoveAllScenesResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"));
            },
            () -> new DelegatedRemoveAllScenesResponseCallback(),
            scenesremoveAllScenesCommandParams);
    scenesClusterCommandInfo.put("removeAllScenes", scenesremoveAllScenesCommandInfo);
    Map<String, CommandParameter> scenesremoveSceneCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter scenesremoveSceneCommandParameter =
        new CommandParameter(
            "Scenes", ChipClusters.ScenesCluster.RemoveSceneResponseCallback.class);
    CommandParameter scenesremoveScenegroupIdCommandParameter =
        new CommandParameter("groupId", int.class);
    scenesremoveSceneCommandParams.put("groupId", scenesremoveScenegroupIdCommandParameter);

    CommandParameter scenesremoveScenesceneIdCommandParameter =
        new CommandParameter("sceneId", int.class);
    scenesremoveSceneCommandParams.put("sceneId", scenesremoveScenesceneIdCommandParameter);

    // Populate commands
    CommandInfo scenesremoveSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .removeScene(
                      (ChipClusters.ScenesCluster.RemoveSceneResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("sceneId"));
            },
            () -> new DelegatedRemoveSceneResponseCallback(),
            scenesremoveSceneCommandParams);
    scenesClusterCommandInfo.put("removeScene", scenesremoveSceneCommandInfo);
    Map<String, CommandParameter> scenesstoreSceneCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter scenesstoreSceneCommandParameter =
        new CommandParameter("Scenes", ChipClusters.ScenesCluster.StoreSceneResponseCallback.class);
    CommandParameter scenesstoreScenegroupIdCommandParameter =
        new CommandParameter("groupId", int.class);
    scenesstoreSceneCommandParams.put("groupId", scenesstoreScenegroupIdCommandParameter);

    CommandParameter scenesstoreScenesceneIdCommandParameter =
        new CommandParameter("sceneId", int.class);
    scenesstoreSceneCommandParams.put("sceneId", scenesstoreScenesceneIdCommandParameter);

    // Populate commands
    CommandInfo scenesstoreSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .storeScene(
                      (ChipClusters.ScenesCluster.StoreSceneResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("sceneId"));
            },
            () -> new DelegatedStoreSceneResponseCallback(),
            scenesstoreSceneCommandParams);
    scenesClusterCommandInfo.put("storeScene", scenesstoreSceneCommandInfo);
    Map<String, CommandParameter> scenesviewSceneCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter scenesviewSceneCommandParameter =
        new CommandParameter("Scenes", ChipClusters.ScenesCluster.ViewSceneResponseCallback.class);
    CommandParameter scenesviewScenegroupIdCommandParameter =
        new CommandParameter("groupId", int.class);
    scenesviewSceneCommandParams.put("groupId", scenesviewScenegroupIdCommandParameter);

    CommandParameter scenesviewScenesceneIdCommandParameter =
        new CommandParameter("sceneId", int.class);
    scenesviewSceneCommandParams.put("sceneId", scenesviewScenesceneIdCommandParameter);

    // Populate commands
    CommandInfo scenesviewSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .viewScene(
                      (ChipClusters.ScenesCluster.ViewSceneResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("sceneId"));
            },
            () -> new DelegatedViewSceneResponseCallback(),
            scenesviewSceneCommandParams);
    scenesClusterCommandInfo.put("viewScene", scenesviewSceneCommandInfo);
    // Populate cluster
    ClusterInfo scenesClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ScenesCluster(ptr, endpointId),
            scenesClusterCommandInfo);
    clusterMap.put("scenes", scenesClusterInfo);
    Map<String, CommandInfo> softwareDiagnosticsClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> softwareDiagnosticsresetWatermarksCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter softwareDiagnosticsresetWatermarksCommandParameter =
        new CommandParameter("SoftwareDiagnostics", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo softwareDiagnosticsresetWatermarksCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.SoftwareDiagnosticsCluster) cluster)
                  .resetWatermarks((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            softwareDiagnosticsresetWatermarksCommandParams);
    softwareDiagnosticsClusterCommandInfo.put(
        "resetWatermarks", softwareDiagnosticsresetWatermarksCommandInfo);
    // Populate cluster
    ClusterInfo softwareDiagnosticsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.SoftwareDiagnosticsCluster(ptr, endpointId),
            softwareDiagnosticsClusterCommandInfo);
    clusterMap.put("softwareDiagnostics", softwareDiagnosticsClusterInfo);
    Map<String, CommandInfo> switchClusterCommandInfo = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo switchClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.SwitchCluster(ptr, endpointId),
            switchClusterCommandInfo);
    clusterMap.put("switch", switchClusterInfo);
    Map<String, CommandInfo> tvChannelClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> tvChannelchangeChannelCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter tvChannelchangeChannelCommandParameter =
        new CommandParameter(
            "TvChannel", ChipClusters.TvChannelCluster.ChangeChannelResponseCallback.class);
    CommandParameter tvChannelchangeChannelmatchCommandParameter =
        new CommandParameter("match", String.class);
    tvChannelchangeChannelCommandParams.put("match", tvChannelchangeChannelmatchCommandParameter);

    // Populate commands
    CommandInfo tvChannelchangeChannelCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TvChannelCluster) cluster)
                  .changeChannel(
                      (ChipClusters.TvChannelCluster.ChangeChannelResponseCallback) callback,
                      (String) commandArguments.get("match"));
            },
            () -> new DelegatedChangeChannelResponseCallback(),
            tvChannelchangeChannelCommandParams);
    tvChannelClusterCommandInfo.put("changeChannel", tvChannelchangeChannelCommandInfo);
    Map<String, CommandParameter> tvChannelchangeChannelByNumberCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter tvChannelchangeChannelByNumberCommandParameter =
        new CommandParameter("TvChannel", ChipClusters.DefaultClusterCallback.class);
    CommandParameter tvChannelchangeChannelByNumbermajorNumberCommandParameter =
        new CommandParameter("majorNumber", int.class);
    tvChannelchangeChannelByNumberCommandParams.put(
        "majorNumber", tvChannelchangeChannelByNumbermajorNumberCommandParameter);

    CommandParameter tvChannelchangeChannelByNumberminorNumberCommandParameter =
        new CommandParameter("minorNumber", int.class);
    tvChannelchangeChannelByNumberCommandParams.put(
        "minorNumber", tvChannelchangeChannelByNumberminorNumberCommandParameter);

    // Populate commands
    CommandInfo tvChannelchangeChannelByNumberCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TvChannelCluster) cluster)
                  .changeChannelByNumber(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("majorNumber"),
                      (Integer) commandArguments.get("minorNumber"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            tvChannelchangeChannelByNumberCommandParams);
    tvChannelClusterCommandInfo.put(
        "changeChannelByNumber", tvChannelchangeChannelByNumberCommandInfo);
    Map<String, CommandParameter> tvChannelskipChannelCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter tvChannelskipChannelCommandParameter =
        new CommandParameter("TvChannel", ChipClusters.DefaultClusterCallback.class);
    CommandParameter tvChannelskipChannelcountCommandParameter =
        new CommandParameter("count", int.class);
    tvChannelskipChannelCommandParams.put("count", tvChannelskipChannelcountCommandParameter);

    // Populate commands
    CommandInfo tvChannelskipChannelCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TvChannelCluster) cluster)
                  .skipChannel(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("count"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            tvChannelskipChannelCommandParams);
    tvChannelClusterCommandInfo.put("skipChannel", tvChannelskipChannelCommandInfo);
    // Populate cluster
    ClusterInfo tvChannelClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.TvChannelCluster(ptr, endpointId),
            tvChannelClusterCommandInfo);
    clusterMap.put("tvChannel", tvChannelClusterInfo);
    Map<String, CommandInfo> targetNavigatorClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> targetNavigatornavigateTargetCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter targetNavigatornavigateTargetCommandParameter =
        new CommandParameter(
            "TargetNavigator",
            ChipClusters.TargetNavigatorCluster.NavigateTargetResponseCallback.class);
    CommandParameter targetNavigatornavigateTargettargetCommandParameter =
        new CommandParameter("target", int.class);
    targetNavigatornavigateTargetCommandParams.put(
        "target", targetNavigatornavigateTargettargetCommandParameter);

    CommandParameter targetNavigatornavigateTargetdataCommandParameter =
        new CommandParameter("data", String.class);
    targetNavigatornavigateTargetCommandParams.put(
        "data", targetNavigatornavigateTargetdataCommandParameter);

    // Populate commands
    CommandInfo targetNavigatornavigateTargetCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TargetNavigatorCluster) cluster)
                  .navigateTarget(
                      (ChipClusters.TargetNavigatorCluster.NavigateTargetResponseCallback) callback,
                      (Integer) commandArguments.get("target"),
                      (String) commandArguments.get("data"));
            },
            () -> new DelegatedNavigateTargetResponseCallback(),
            targetNavigatornavigateTargetCommandParams);
    targetNavigatorClusterCommandInfo.put(
        "navigateTarget", targetNavigatornavigateTargetCommandInfo);
    // Populate cluster
    ClusterInfo targetNavigatorClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.TargetNavigatorCluster(ptr, endpointId),
            targetNavigatorClusterCommandInfo);
    clusterMap.put("targetNavigator", targetNavigatorClusterInfo);
    Map<String, CommandInfo> temperatureMeasurementClusterCommandInfo = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo temperatureMeasurementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.TemperatureMeasurementCluster(ptr, endpointId),
            temperatureMeasurementClusterCommandInfo);
    clusterMap.put("temperatureMeasurement", temperatureMeasurementClusterInfo);
    Map<String, CommandInfo> testClusterClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> testClustertestCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter testClustertestCommandParameter =
        new CommandParameter("TestCluster", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo testClustertestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster).test((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            testClustertestCommandParams);
    testClusterClusterCommandInfo.put("test", testClustertestCommandInfo);
    Map<String, CommandParameter> testClustertestAddArgumentsCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter testClustertestAddArgumentsCommandParameter =
        new CommandParameter(
            "TestCluster", ChipClusters.TestClusterCluster.TestAddArgumentsResponseCallback.class);
    CommandParameter testClustertestAddArgumentsarg1CommandParameter =
        new CommandParameter("arg1", int.class);
    testClustertestAddArgumentsCommandParams.put(
        "arg1", testClustertestAddArgumentsarg1CommandParameter);

    CommandParameter testClustertestAddArgumentsarg2CommandParameter =
        new CommandParameter("arg2", int.class);
    testClustertestAddArgumentsCommandParams.put(
        "arg2", testClustertestAddArgumentsarg2CommandParameter);

    // Populate commands
    CommandInfo testClustertestAddArgumentsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testAddArguments(
                      (ChipClusters.TestClusterCluster.TestAddArgumentsResponseCallback) callback,
                      (Integer) commandArguments.get("arg1"),
                      (Integer) commandArguments.get("arg2"));
            },
            () -> new DelegatedTestAddArgumentsResponseCallback(),
            testClustertestAddArgumentsCommandParams);
    testClusterClusterCommandInfo.put("testAddArguments", testClustertestAddArgumentsCommandInfo);
    Map<String, CommandParameter> testClustertestNotHandledCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter testClustertestNotHandledCommandParameter =
        new CommandParameter("TestCluster", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo testClustertestNotHandledCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testNotHandled((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            testClustertestNotHandledCommandParams);
    testClusterClusterCommandInfo.put("testNotHandled", testClustertestNotHandledCommandInfo);
    Map<String, CommandParameter> testClustertestSpecificCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter testClustertestSpecificCommandParameter =
        new CommandParameter(
            "TestCluster", ChipClusters.TestClusterCluster.TestSpecificResponseCallback.class);
    // Populate commands
    CommandInfo testClustertestSpecificCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testSpecific(
                      (ChipClusters.TestClusterCluster.TestSpecificResponseCallback) callback);
            },
            () -> new DelegatedTestSpecificResponseCallback(),
            testClustertestSpecificCommandParams);
    testClusterClusterCommandInfo.put("testSpecific", testClustertestSpecificCommandInfo);
    Map<String, CommandParameter> testClustertestUnknownCommandCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter testClustertestUnknownCommandCommandParameter =
        new CommandParameter("TestCluster", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo testClustertestUnknownCommandCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testUnknownCommand((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            testClustertestUnknownCommandCommandParams);
    testClusterClusterCommandInfo.put(
        "testUnknownCommand", testClustertestUnknownCommandCommandInfo);
    // Populate cluster
    ClusterInfo testClusterClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.TestClusterCluster(ptr, endpointId),
            testClusterClusterCommandInfo);
    clusterMap.put("testCluster", testClusterClusterInfo);
    Map<String, CommandInfo> thermostatClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> thermostatclearWeeklyScheduleCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter thermostatclearWeeklyScheduleCommandParameter =
        new CommandParameter("Thermostat", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo thermostatclearWeeklyScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .clearWeeklySchedule((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            thermostatclearWeeklyScheduleCommandParams);
    thermostatClusterCommandInfo.put(
        "clearWeeklySchedule", thermostatclearWeeklyScheduleCommandInfo);
    Map<String, CommandParameter> thermostatgetRelayStatusLogCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter thermostatgetRelayStatusLogCommandParameter =
        new CommandParameter("Thermostat", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo thermostatgetRelayStatusLogCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .getRelayStatusLog((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            thermostatgetRelayStatusLogCommandParams);
    thermostatClusterCommandInfo.put("getRelayStatusLog", thermostatgetRelayStatusLogCommandInfo);
    Map<String, CommandParameter> thermostatgetWeeklyScheduleCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter thermostatgetWeeklyScheduleCommandParameter =
        new CommandParameter("Thermostat", ChipClusters.DefaultClusterCallback.class);
    CommandParameter thermostatgetWeeklyScheduledaysToReturnCommandParameter =
        new CommandParameter("daysToReturn", int.class);
    thermostatgetWeeklyScheduleCommandParams.put(
        "daysToReturn", thermostatgetWeeklyScheduledaysToReturnCommandParameter);

    CommandParameter thermostatgetWeeklySchedulemodeToReturnCommandParameter =
        new CommandParameter("modeToReturn", int.class);
    thermostatgetWeeklyScheduleCommandParams.put(
        "modeToReturn", thermostatgetWeeklySchedulemodeToReturnCommandParameter);

    // Populate commands
    CommandInfo thermostatgetWeeklyScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .getWeeklySchedule(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("daysToReturn"),
                      (Integer) commandArguments.get("modeToReturn"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            thermostatgetWeeklyScheduleCommandParams);
    thermostatClusterCommandInfo.put("getWeeklySchedule", thermostatgetWeeklyScheduleCommandInfo);
    Map<String, CommandParameter> thermostatsetWeeklyScheduleCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter thermostatsetWeeklyScheduleCommandParameter =
        new CommandParameter("Thermostat", ChipClusters.DefaultClusterCallback.class);
    CommandParameter thermostatsetWeeklySchedulenumberOfTransitionsForSequenceCommandParameter =
        new CommandParameter("numberOfTransitionsForSequence", int.class);
    thermostatsetWeeklyScheduleCommandParams.put(
        "numberOfTransitionsForSequence",
        thermostatsetWeeklySchedulenumberOfTransitionsForSequenceCommandParameter);

    CommandParameter thermostatsetWeeklyScheduledayOfWeekForSequenceCommandParameter =
        new CommandParameter("dayOfWeekForSequence", int.class);
    thermostatsetWeeklyScheduleCommandParams.put(
        "dayOfWeekForSequence", thermostatsetWeeklyScheduledayOfWeekForSequenceCommandParameter);

    CommandParameter thermostatsetWeeklySchedulemodeForSequenceCommandParameter =
        new CommandParameter("modeForSequence", int.class);
    thermostatsetWeeklyScheduleCommandParams.put(
        "modeForSequence", thermostatsetWeeklySchedulemodeForSequenceCommandParameter);

    CommandParameter thermostatsetWeeklySchedulepayloadCommandParameter =
        new CommandParameter("payload", int.class);
    thermostatsetWeeklyScheduleCommandParams.put(
        "payload", thermostatsetWeeklySchedulepayloadCommandParameter);

    // Populate commands
    CommandInfo thermostatsetWeeklyScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .setWeeklySchedule(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("numberOfTransitionsForSequence"),
                      (Integer) commandArguments.get("dayOfWeekForSequence"),
                      (Integer) commandArguments.get("modeForSequence"),
                      (Integer) commandArguments.get("payload"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            thermostatsetWeeklyScheduleCommandParams);
    thermostatClusterCommandInfo.put("setWeeklySchedule", thermostatsetWeeklyScheduleCommandInfo);
    Map<String, CommandParameter> thermostatsetpointRaiseLowerCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter thermostatsetpointRaiseLowerCommandParameter =
        new CommandParameter("Thermostat", ChipClusters.DefaultClusterCallback.class);
    CommandParameter thermostatsetpointRaiseLowermodeCommandParameter =
        new CommandParameter("mode", int.class);
    thermostatsetpointRaiseLowerCommandParams.put(
        "mode", thermostatsetpointRaiseLowermodeCommandParameter);

    CommandParameter thermostatsetpointRaiseLoweramountCommandParameter =
        new CommandParameter("amount", int.class);
    thermostatsetpointRaiseLowerCommandParams.put(
        "amount", thermostatsetpointRaiseLoweramountCommandParameter);

    // Populate commands
    CommandInfo thermostatsetpointRaiseLowerCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .setpointRaiseLower(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("mode"),
                      (Integer) commandArguments.get("amount"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            thermostatsetpointRaiseLowerCommandParams);
    thermostatClusterCommandInfo.put("setpointRaiseLower", thermostatsetpointRaiseLowerCommandInfo);
    // Populate cluster
    ClusterInfo thermostatClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ThermostatCluster(ptr, endpointId),
            thermostatClusterCommandInfo);
    clusterMap.put("thermostat", thermostatClusterInfo);
    Map<String, CommandInfo> thermostatUserInterfaceConfigurationClusterCommandInfo =
        new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo thermostatUserInterfaceConfigurationClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.ThermostatUserInterfaceConfigurationCluster(ptr, endpointId),
            thermostatUserInterfaceConfigurationClusterCommandInfo);
    clusterMap.put(
        "thermostatUserInterfaceConfiguration", thermostatUserInterfaceConfigurationClusterInfo);
    Map<String, CommandInfo> threadNetworkDiagnosticsClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> threadNetworkDiagnosticsresetCountsCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter threadNetworkDiagnosticsresetCountsCommandParameter =
        new CommandParameter("ThreadNetworkDiagnostics", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo threadNetworkDiagnosticsresetCountsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .resetCounts((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            threadNetworkDiagnosticsresetCountsCommandParams);
    threadNetworkDiagnosticsClusterCommandInfo.put(
        "resetCounts", threadNetworkDiagnosticsresetCountsCommandInfo);
    // Populate cluster
    ClusterInfo threadNetworkDiagnosticsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ThreadNetworkDiagnosticsCluster(ptr, endpointId),
            threadNetworkDiagnosticsClusterCommandInfo);
    clusterMap.put("threadNetworkDiagnostics", threadNetworkDiagnosticsClusterInfo);
    Map<String, CommandInfo> wakeOnLanClusterCommandInfo = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo wakeOnLanClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.WakeOnLanCluster(ptr, endpointId),
            wakeOnLanClusterCommandInfo);
    clusterMap.put("wakeOnLan", wakeOnLanClusterInfo);
    Map<String, CommandInfo> wiFiNetworkDiagnosticsClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> wiFiNetworkDiagnosticsresetCountsCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter wiFiNetworkDiagnosticsresetCountsCommandParameter =
        new CommandParameter("WiFiNetworkDiagnostics", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo wiFiNetworkDiagnosticsresetCountsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
                  .resetCounts((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            wiFiNetworkDiagnosticsresetCountsCommandParams);
    wiFiNetworkDiagnosticsClusterCommandInfo.put(
        "resetCounts", wiFiNetworkDiagnosticsresetCountsCommandInfo);
    // Populate cluster
    ClusterInfo wiFiNetworkDiagnosticsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.WiFiNetworkDiagnosticsCluster(ptr, endpointId),
            wiFiNetworkDiagnosticsClusterCommandInfo);
    clusterMap.put("wiFiNetworkDiagnostics", wiFiNetworkDiagnosticsClusterInfo);
    Map<String, CommandInfo> windowCoveringClusterCommandInfo = new LinkedHashMap<>();
    Map<String, CommandParameter> windowCoveringdownOrCloseCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter windowCoveringdownOrCloseCommandParameter =
        new CommandParameter("WindowCovering", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo windowCoveringdownOrCloseCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .downOrClose((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringdownOrCloseCommandParams);
    windowCoveringClusterCommandInfo.put("downOrClose", windowCoveringdownOrCloseCommandInfo);
    Map<String, CommandParameter> windowCoveringgoToLiftPercentageCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter windowCoveringgoToLiftPercentageCommandParameter =
        new CommandParameter("WindowCovering", ChipClusters.DefaultClusterCallback.class);
    CommandParameter windowCoveringgoToLiftPercentageliftPercentageValueCommandParameter =
        new CommandParameter("liftPercentageValue", int.class);
    windowCoveringgoToLiftPercentageCommandParams.put(
        "liftPercentageValue", windowCoveringgoToLiftPercentageliftPercentageValueCommandParameter);

    CommandParameter windowCoveringgoToLiftPercentageliftPercent100thsValueCommandParameter =
        new CommandParameter("liftPercent100thsValue", int.class);
    windowCoveringgoToLiftPercentageCommandParams.put(
        "liftPercent100thsValue",
        windowCoveringgoToLiftPercentageliftPercent100thsValueCommandParameter);

    // Populate commands
    CommandInfo windowCoveringgoToLiftPercentageCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .goToLiftPercentage(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("liftPercentageValue"),
                      (Integer) commandArguments.get("liftPercent100thsValue"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringgoToLiftPercentageCommandParams);
    windowCoveringClusterCommandInfo.put(
        "goToLiftPercentage", windowCoveringgoToLiftPercentageCommandInfo);
    Map<String, CommandParameter> windowCoveringgoToLiftValueCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter windowCoveringgoToLiftValueCommandParameter =
        new CommandParameter("WindowCovering", ChipClusters.DefaultClusterCallback.class);
    CommandParameter windowCoveringgoToLiftValueliftValueCommandParameter =
        new CommandParameter("liftValue", int.class);
    windowCoveringgoToLiftValueCommandParams.put(
        "liftValue", windowCoveringgoToLiftValueliftValueCommandParameter);

    // Populate commands
    CommandInfo windowCoveringgoToLiftValueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .goToLiftValue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("liftValue"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringgoToLiftValueCommandParams);
    windowCoveringClusterCommandInfo.put("goToLiftValue", windowCoveringgoToLiftValueCommandInfo);
    Map<String, CommandParameter> windowCoveringgoToTiltPercentageCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter windowCoveringgoToTiltPercentageCommandParameter =
        new CommandParameter("WindowCovering", ChipClusters.DefaultClusterCallback.class);
    CommandParameter windowCoveringgoToTiltPercentagetiltPercentageValueCommandParameter =
        new CommandParameter("tiltPercentageValue", int.class);
    windowCoveringgoToTiltPercentageCommandParams.put(
        "tiltPercentageValue", windowCoveringgoToTiltPercentagetiltPercentageValueCommandParameter);

    CommandParameter windowCoveringgoToTiltPercentagetiltPercent100thsValueCommandParameter =
        new CommandParameter("tiltPercent100thsValue", int.class);
    windowCoveringgoToTiltPercentageCommandParams.put(
        "tiltPercent100thsValue",
        windowCoveringgoToTiltPercentagetiltPercent100thsValueCommandParameter);

    // Populate commands
    CommandInfo windowCoveringgoToTiltPercentageCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .goToTiltPercentage(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("tiltPercentageValue"),
                      (Integer) commandArguments.get("tiltPercent100thsValue"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringgoToTiltPercentageCommandParams);
    windowCoveringClusterCommandInfo.put(
        "goToTiltPercentage", windowCoveringgoToTiltPercentageCommandInfo);
    Map<String, CommandParameter> windowCoveringgoToTiltValueCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter windowCoveringgoToTiltValueCommandParameter =
        new CommandParameter("WindowCovering", ChipClusters.DefaultClusterCallback.class);
    CommandParameter windowCoveringgoToTiltValuetiltValueCommandParameter =
        new CommandParameter("tiltValue", int.class);
    windowCoveringgoToTiltValueCommandParams.put(
        "tiltValue", windowCoveringgoToTiltValuetiltValueCommandParameter);

    // Populate commands
    CommandInfo windowCoveringgoToTiltValueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .goToTiltValue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("tiltValue"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringgoToTiltValueCommandParams);
    windowCoveringClusterCommandInfo.put("goToTiltValue", windowCoveringgoToTiltValueCommandInfo);
    Map<String, CommandParameter> windowCoveringstopMotionCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter windowCoveringstopMotionCommandParameter =
        new CommandParameter("WindowCovering", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo windowCoveringstopMotionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .stopMotion((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringstopMotionCommandParams);
    windowCoveringClusterCommandInfo.put("stopMotion", windowCoveringstopMotionCommandInfo);
    Map<String, CommandParameter> windowCoveringupOrOpenCommandParams =
        new LinkedHashMap<String, CommandParameter>();
    // TODO: fill out parameter types
    CommandParameter windowCoveringupOrOpenCommandParameter =
        new CommandParameter("WindowCovering", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo windowCoveringupOrOpenCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .upOrOpen((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringupOrOpenCommandParams);
    windowCoveringClusterCommandInfo.put("upOrOpen", windowCoveringupOrOpenCommandInfo);
    // Populate cluster
    ClusterInfo windowCoveringClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.WindowCoveringCluster(ptr, endpointId),
            windowCoveringClusterCommandInfo);
    clusterMap.put("windowCovering", windowCoveringClusterInfo);
    return clusterMap;
  }
}
