/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

package chip.devicecontroller;

import chip.clusterinfo.ClusterCommandCallback;
import chip.clusterinfo.ClusterInfo;
import chip.clusterinfo.CommandInfo;
import chip.clusterinfo.CommandParameterInfo;
import chip.clusterinfo.CommandResponseInfo;
import chip.clusterinfo.DelegatedClusterCallback;
import chip.devicecontroller.ChipClusters.DefaultClusterCallback;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class ClusterInfoMapping {

  public class DelegatedCharStringAttributeCallback
      implements ChipClusters.CharStringAttributeCallback, DelegatedClusterCallback {
    /** Indicates a successful read for a CHAR_STRING attribute. */
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(String value) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo setupPINResponseValue = new CommandResponseInfo("value", "String");
      responseValues.put(setupPINResponseValue, value);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedOctetStringAttributeCallback
      implements ChipClusters.OctetStringAttributeCallback, DelegatedClusterCallback {
    /** Indicates a successful read for an OCTET_STRING attribute. */
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(byte[] value) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo setupPINResponseValue = new CommandResponseInfo("value", "byte[]");
      responseValues.put(setupPINResponseValue, value);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedIntegerAttributeCallback
      implements ChipClusters.IntegerAttributeCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int value) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo setupPINResponseValue = new CommandResponseInfo("value", "int");
      responseValues.put(setupPINResponseValue, value);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedLongAttributeCallback
      implements ChipClusters.LongAttributeCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(long value) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo setupPINResponseValue = new CommandResponseInfo("value", "long");
      responseValues.put(setupPINResponseValue, value);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedBooleanAttributeCallback
      implements ChipClusters.BooleanAttributeCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(boolean value) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo setupPINResponseValue = new CommandResponseInfo("value", "boolean");
      responseValues.put(setupPINResponseValue, value);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  class DelegatedDefaultClusterCallback
      implements DefaultClusterCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    // Parameters and list-adds here should be generated - refer to the template code that creates
    // each callback interface.
    @Override
    public void onSuccess() {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception e) {
      callback.onFailure(e);
    }
  }

  public class DelegatedGetSetupPINResponseCallback
      implements ChipClusters.AccountLoginCluster.GetSetupPINResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(String setupPIN) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo setupPINResponseValue = new CommandResponseInfo("setupPIN", "String");
      responseValues.put(setupPINResponseValue, setupPIN);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedLaunchAppResponseCallback
      implements ChipClusters.ApplicationLauncherCluster.LaunchAppResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, String data) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      CommandResponseInfo dataResponseValue = new CommandResponseInfo("data", "String");
      responseValues.put(dataResponseValue, data);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedApplicationLauncherListAttributeCallback
      implements ChipClusters.ApplicationLauncherCluster.ApplicationLauncherListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<Integer> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo("valueList", "List<Integer>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedAudioOutputListAttributeCallback
      implements ChipClusters.AudioOutputCluster.AudioOutputListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        List<ChipClusters.AudioOutputCluster.AudioOutputListAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList", "List<ChipClusters.AudioOutputCluster.AudioOutputListAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedActionListAttributeCallback
      implements ChipClusters.BridgedActionsCluster.ActionListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<ChipClusters.BridgedActionsCluster.ActionListAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList", "List<ChipClusters.BridgedActionsCluster.ActionListAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedEndpointListAttributeCallback
      implements ChipClusters.BridgedActionsCluster.EndpointListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        List<ChipClusters.BridgedActionsCluster.EndpointListAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList", "List<ChipClusters.BridgedActionsCluster.EndpointListAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedLaunchContentResponseCallback
      implements ChipClusters.ContentLauncherCluster.LaunchContentResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(String data, int contentLaunchStatus) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo dataResponseValue = new CommandResponseInfo("data", "String");
      responseValues.put(dataResponseValue, data);
      CommandResponseInfo contentLaunchStatusResponseValue =
          new CommandResponseInfo("contentLaunchStatus", "int");
      responseValues.put(contentLaunchStatusResponseValue, contentLaunchStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedLaunchURLResponseCallback
      implements ChipClusters.ContentLauncherCluster.LaunchURLResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(String data, int contentLaunchStatus) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo dataResponseValue = new CommandResponseInfo("data", "String");
      responseValues.put(dataResponseValue, data);
      CommandResponseInfo contentLaunchStatusResponseValue =
          new CommandResponseInfo("contentLaunchStatus", "int");
      responseValues.put(contentLaunchStatusResponseValue, contentLaunchStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedAcceptsHeaderListAttributeCallback
      implements ChipClusters.ContentLauncherCluster.AcceptsHeaderListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<byte[]> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo("valueList", "List<byte[]>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedSupportedStreamingTypesAttributeCallback
      implements ChipClusters.ContentLauncherCluster.SupportedStreamingTypesAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<Integer> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo("valueList", "List<Integer>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedDeviceListAttributeCallback
      implements ChipClusters.DescriptorCluster.DeviceListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<ChipClusters.DescriptorCluster.DeviceListAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList", "List<ChipClusters.DescriptorCluster.DeviceListAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedServerListAttributeCallback
      implements ChipClusters.DescriptorCluster.ServerListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<Long> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo = new CommandResponseInfo("valueList", "List<Long>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedClientListAttributeCallback
      implements ChipClusters.DescriptorCluster.ClientListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<Long> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo = new CommandResponseInfo("valueList", "List<Long>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedPartsListAttributeCallback
      implements ChipClusters.DescriptorCluster.PartsListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<Integer> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo("valueList", "List<Integer>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedRetrieveLogsResponseCallback
      implements ChipClusters.DiagnosticLogsCluster.RetrieveLogsResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, byte[] content, long timeStamp, long timeSinceBoot) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      CommandResponseInfo contentResponseValue = new CommandResponseInfo("content", "byte[]");
      responseValues.put(contentResponseValue, content);
      CommandResponseInfo timeStampResponseValue = new CommandResponseInfo("timeStamp", "long");
      responseValues.put(timeStampResponseValue, timeStamp);
      CommandResponseInfo timeSinceBootResponseValue =
          new CommandResponseInfo("timeSinceBoot", "long");
      responseValues.put(timeSinceBootResponseValue, timeSinceBoot);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearAllPinsResponseCallback
      implements ChipClusters.DoorLockCluster.ClearAllPinsResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearAllRfidsResponseCallback
      implements ChipClusters.DoorLockCluster.ClearAllRfidsResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearHolidayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.ClearHolidayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearPinResponseCallback
      implements ChipClusters.DoorLockCluster.ClearPinResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearRfidResponseCallback
      implements ChipClusters.DoorLockCluster.ClearRfidResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearWeekdayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.ClearWeekdayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearYeardayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.ClearYeardayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetHolidayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.GetHolidayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        int scheduleId,
        int status,
        long localStartTime,
        long localEndTime,
        int operatingModeDuringHoliday) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo scheduleIdResponseValue = new CommandResponseInfo("scheduleId", "int");
      responseValues.put(scheduleIdResponseValue, scheduleId);
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      CommandResponseInfo localStartTimeResponseValue =
          new CommandResponseInfo("localStartTime", "long");
      responseValues.put(localStartTimeResponseValue, localStartTime);
      CommandResponseInfo localEndTimeResponseValue =
          new CommandResponseInfo("localEndTime", "long");
      responseValues.put(localEndTimeResponseValue, localEndTime);
      CommandResponseInfo operatingModeDuringHolidayResponseValue =
          new CommandResponseInfo("operatingModeDuringHoliday", "int");
      responseValues.put(operatingModeDuringHolidayResponseValue, operatingModeDuringHoliday);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetLogRecordResponseCallback
      implements ChipClusters.DoorLockCluster.GetLogRecordResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        int logEntryId,
        long timestamp,
        int eventType,
        int source,
        int eventIdOrAlarmCode,
        int userId,
        byte[] pin) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo logEntryIdResponseValue = new CommandResponseInfo("logEntryId", "int");
      responseValues.put(logEntryIdResponseValue, logEntryId);
      CommandResponseInfo timestampResponseValue = new CommandResponseInfo("timestamp", "long");
      responseValues.put(timestampResponseValue, timestamp);
      CommandResponseInfo eventTypeResponseValue = new CommandResponseInfo("eventType", "int");
      responseValues.put(eventTypeResponseValue, eventType);
      CommandResponseInfo sourceResponseValue = new CommandResponseInfo("source", "int");
      responseValues.put(sourceResponseValue, source);
      CommandResponseInfo eventIdOrAlarmCodeResponseValue =
          new CommandResponseInfo("eventIdOrAlarmCode", "int");
      responseValues.put(eventIdOrAlarmCodeResponseValue, eventIdOrAlarmCode);
      CommandResponseInfo userIdResponseValue = new CommandResponseInfo("userId", "int");
      responseValues.put(userIdResponseValue, userId);
      CommandResponseInfo pinResponseValue = new CommandResponseInfo("pin", "byte[]");
      responseValues.put(pinResponseValue, pin);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetPinResponseCallback
      implements ChipClusters.DoorLockCluster.GetPinResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int userId, int userStatus, int userType, byte[] pin) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo userIdResponseValue = new CommandResponseInfo("userId", "int");
      responseValues.put(userIdResponseValue, userId);
      CommandResponseInfo userStatusResponseValue = new CommandResponseInfo("userStatus", "int");
      responseValues.put(userStatusResponseValue, userStatus);
      CommandResponseInfo userTypeResponseValue = new CommandResponseInfo("userType", "int");
      responseValues.put(userTypeResponseValue, userType);
      CommandResponseInfo pinResponseValue = new CommandResponseInfo("pin", "byte[]");
      responseValues.put(pinResponseValue, pin);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetRfidResponseCallback
      implements ChipClusters.DoorLockCluster.GetRfidResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int userId, int userStatus, int userType, byte[] rfid) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo userIdResponseValue = new CommandResponseInfo("userId", "int");
      responseValues.put(userIdResponseValue, userId);
      CommandResponseInfo userStatusResponseValue = new CommandResponseInfo("userStatus", "int");
      responseValues.put(userStatusResponseValue, userStatus);
      CommandResponseInfo userTypeResponseValue = new CommandResponseInfo("userType", "int");
      responseValues.put(userTypeResponseValue, userType);
      CommandResponseInfo rfidResponseValue = new CommandResponseInfo("rfid", "byte[]");
      responseValues.put(rfidResponseValue, rfid);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetUserTypeResponseCallback
      implements ChipClusters.DoorLockCluster.GetUserTypeResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int userId, int userType) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo userIdResponseValue = new CommandResponseInfo("userId", "int");
      responseValues.put(userIdResponseValue, userId);
      CommandResponseInfo userTypeResponseValue = new CommandResponseInfo("userType", "int");
      responseValues.put(userTypeResponseValue, userType);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetWeekdayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.GetWeekdayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        int scheduleId,
        int userId,
        int status,
        int daysMask,
        int startHour,
        int startMinute,
        int endHour,
        int endMinute) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo scheduleIdResponseValue = new CommandResponseInfo("scheduleId", "int");
      responseValues.put(scheduleIdResponseValue, scheduleId);
      CommandResponseInfo userIdResponseValue = new CommandResponseInfo("userId", "int");
      responseValues.put(userIdResponseValue, userId);
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      CommandResponseInfo daysMaskResponseValue = new CommandResponseInfo("daysMask", "int");
      responseValues.put(daysMaskResponseValue, daysMask);
      CommandResponseInfo startHourResponseValue = new CommandResponseInfo("startHour", "int");
      responseValues.put(startHourResponseValue, startHour);
      CommandResponseInfo startMinuteResponseValue = new CommandResponseInfo("startMinute", "int");
      responseValues.put(startMinuteResponseValue, startMinute);
      CommandResponseInfo endHourResponseValue = new CommandResponseInfo("endHour", "int");
      responseValues.put(endHourResponseValue, endHour);
      CommandResponseInfo endMinuteResponseValue = new CommandResponseInfo("endMinute", "int");
      responseValues.put(endMinuteResponseValue, endMinute);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetYeardayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.GetYeardayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        int scheduleId, int userId, int status, long localStartTime, long localEndTime) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo scheduleIdResponseValue = new CommandResponseInfo("scheduleId", "int");
      responseValues.put(scheduleIdResponseValue, scheduleId);
      CommandResponseInfo userIdResponseValue = new CommandResponseInfo("userId", "int");
      responseValues.put(userIdResponseValue, userId);
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      CommandResponseInfo localStartTimeResponseValue =
          new CommandResponseInfo("localStartTime", "long");
      responseValues.put(localStartTimeResponseValue, localStartTime);
      CommandResponseInfo localEndTimeResponseValue =
          new CommandResponseInfo("localEndTime", "long");
      responseValues.put(localEndTimeResponseValue, localEndTime);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedLockDoorResponseCallback
      implements ChipClusters.DoorLockCluster.LockDoorResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetHolidayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.SetHolidayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetPinResponseCallback
      implements ChipClusters.DoorLockCluster.SetPinResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetRfidResponseCallback
      implements ChipClusters.DoorLockCluster.SetRfidResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetUserTypeResponseCallback
      implements ChipClusters.DoorLockCluster.SetUserTypeResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetWeekdayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.SetWeekdayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetYeardayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.SetYeardayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedUnlockDoorResponseCallback
      implements ChipClusters.DoorLockCluster.UnlockDoorResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedUnlockWithTimeoutResponseCallback
      implements ChipClusters.DoorLockCluster.UnlockWithTimeoutResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedLabelListAttributeCallback
      implements ChipClusters.FixedLabelCluster.LabelListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<ChipClusters.FixedLabelCluster.LabelListAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList", "List<ChipClusters.FixedLabelCluster.LabelListAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedArmFailSafeResponseCallback
      implements ChipClusters.GeneralCommissioningCluster.ArmFailSafeResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo errorCodeResponseValue = new CommandResponseInfo("errorCode", "int");
      responseValues.put(errorCodeResponseValue, errorCode);
      CommandResponseInfo debugTextResponseValue = new CommandResponseInfo("debugText", "String");
      responseValues.put(debugTextResponseValue, debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedCommissioningCompleteResponseCallback
      implements ChipClusters.GeneralCommissioningCluster.CommissioningCompleteResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo errorCodeResponseValue = new CommandResponseInfo("errorCode", "int");
      responseValues.put(errorCodeResponseValue, errorCode);
      CommandResponseInfo debugTextResponseValue = new CommandResponseInfo("debugText", "String");
      responseValues.put(debugTextResponseValue, debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetRegulatoryConfigResponseCallback
      implements ChipClusters.GeneralCommissioningCluster.SetRegulatoryConfigResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo errorCodeResponseValue = new CommandResponseInfo("errorCode", "int");
      responseValues.put(errorCodeResponseValue, errorCode);
      CommandResponseInfo debugTextResponseValue = new CommandResponseInfo("debugText", "String");
      responseValues.put(debugTextResponseValue, debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedBasicCommissioningInfoListAttributeCallback
      implements ChipClusters.GeneralCommissioningCluster
              .BasicCommissioningInfoListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        List<ChipClusters.GeneralCommissioningCluster.BasicCommissioningInfoListAttribute>
            valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList",
              "List<ChipClusters.GeneralCommissioningCluster.BasicCommissioningInfoListAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedNetworkInterfacesAttributeCallback
      implements ChipClusters.GeneralDiagnosticsCluster.NetworkInterfacesAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        List<ChipClusters.GeneralDiagnosticsCluster.NetworkInterfacesAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList",
              "List<ChipClusters.GeneralDiagnosticsCluster.NetworkInterfacesAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedGroupsAttributeCallback
      implements ChipClusters.GroupKeyManagementCluster.GroupsAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<ChipClusters.GroupKeyManagementCluster.GroupsAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList", "List<ChipClusters.GroupKeyManagementCluster.GroupsAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedGroupKeysAttributeCallback
      implements ChipClusters.GroupKeyManagementCluster.GroupKeysAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        List<ChipClusters.GroupKeyManagementCluster.GroupKeysAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList", "List<ChipClusters.GroupKeyManagementCluster.GroupKeysAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedAddGroupResponseCallback
      implements ChipClusters.GroupsCluster.AddGroupResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      CommandResponseInfo groupIdResponseValue = new CommandResponseInfo("groupId", "int");
      responseValues.put(groupIdResponseValue, groupId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetGroupMembershipResponseCallback
      implements ChipClusters.GroupsCluster.GetGroupMembershipResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int capacity, int groupCount
        // groupList: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        ) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo capacityResponseValue = new CommandResponseInfo("capacity", "int");
      responseValues.put(capacityResponseValue, capacity);
      CommandResponseInfo groupCountResponseValue = new CommandResponseInfo("groupCount", "int");
      responseValues.put(groupCountResponseValue, groupCount);
      // groupList: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedRemoveGroupResponseCallback
      implements ChipClusters.GroupsCluster.RemoveGroupResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      CommandResponseInfo groupIdResponseValue = new CommandResponseInfo("groupId", "int");
      responseValues.put(groupIdResponseValue, groupId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedViewGroupResponseCallback
      implements ChipClusters.GroupsCluster.ViewGroupResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId, String groupName) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      CommandResponseInfo groupIdResponseValue = new CommandResponseInfo("groupId", "int");
      responseValues.put(groupIdResponseValue, groupId);
      CommandResponseInfo groupNameResponseValue = new CommandResponseInfo("groupName", "String");
      responseValues.put(groupNameResponseValue, groupName);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedIdentifyQueryResponseCallback
      implements ChipClusters.IdentifyCluster.IdentifyQueryResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int timeout) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo timeoutResponseValue = new CommandResponseInfo("timeout", "int");
      responseValues.put(timeoutResponseValue, timeout);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSendKeyResponseCallback
      implements ChipClusters.KeypadInputCluster.SendKeyResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaInputListAttributeCallback
      implements ChipClusters.MediaInputCluster.MediaInputListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<ChipClusters.MediaInputCluster.MediaInputListAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList", "List<ChipClusters.MediaInputCluster.MediaInputListAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedMediaFastForwardResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaFastForwardResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo mediaPlaybackStatusResponseValue =
          new CommandResponseInfo("mediaPlaybackStatus", "int");
      responseValues.put(mediaPlaybackStatusResponseValue, mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaNextResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaNextResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo mediaPlaybackStatusResponseValue =
          new CommandResponseInfo("mediaPlaybackStatus", "int");
      responseValues.put(mediaPlaybackStatusResponseValue, mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaPauseResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaPauseResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo mediaPlaybackStatusResponseValue =
          new CommandResponseInfo("mediaPlaybackStatus", "int");
      responseValues.put(mediaPlaybackStatusResponseValue, mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaPlayResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaPlayResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo mediaPlaybackStatusResponseValue =
          new CommandResponseInfo("mediaPlaybackStatus", "int");
      responseValues.put(mediaPlaybackStatusResponseValue, mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaPreviousResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaPreviousResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo mediaPlaybackStatusResponseValue =
          new CommandResponseInfo("mediaPlaybackStatus", "int");
      responseValues.put(mediaPlaybackStatusResponseValue, mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaRewindResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaRewindResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo mediaPlaybackStatusResponseValue =
          new CommandResponseInfo("mediaPlaybackStatus", "int");
      responseValues.put(mediaPlaybackStatusResponseValue, mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaSeekResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaSeekResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo mediaPlaybackStatusResponseValue =
          new CommandResponseInfo("mediaPlaybackStatus", "int");
      responseValues.put(mediaPlaybackStatusResponseValue, mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaSkipBackwardResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaSkipBackwardResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo mediaPlaybackStatusResponseValue =
          new CommandResponseInfo("mediaPlaybackStatus", "int");
      responseValues.put(mediaPlaybackStatusResponseValue, mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaSkipForwardResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaSkipForwardResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo mediaPlaybackStatusResponseValue =
          new CommandResponseInfo("mediaPlaybackStatus", "int");
      responseValues.put(mediaPlaybackStatusResponseValue, mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaStartOverResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaStartOverResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo mediaPlaybackStatusResponseValue =
          new CommandResponseInfo("mediaPlaybackStatus", "int");
      responseValues.put(mediaPlaybackStatusResponseValue, mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaStopResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaStopResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo mediaPlaybackStatusResponseValue =
          new CommandResponseInfo("mediaPlaybackStatus", "int");
      responseValues.put(mediaPlaybackStatusResponseValue, mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSupportedModesAttributeCallback
      implements ChipClusters.ModeSelectCluster.SupportedModesAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<ChipClusters.ModeSelectCluster.SupportedModesAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList", "List<ChipClusters.ModeSelectCluster.SupportedModesAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedAddThreadNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.AddThreadNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo errorCodeResponseValue = new CommandResponseInfo("errorCode", "int");
      responseValues.put(errorCodeResponseValue, errorCode);
      CommandResponseInfo debugTextResponseValue = new CommandResponseInfo("debugText", "String");
      responseValues.put(debugTextResponseValue, debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedAddWiFiNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.AddWiFiNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo errorCodeResponseValue = new CommandResponseInfo("errorCode", "int");
      responseValues.put(errorCodeResponseValue, errorCode);
      CommandResponseInfo debugTextResponseValue = new CommandResponseInfo("debugText", "String");
      responseValues.put(debugTextResponseValue, debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedDisableNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.DisableNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo errorCodeResponseValue = new CommandResponseInfo("errorCode", "int");
      responseValues.put(errorCodeResponseValue, errorCode);
      CommandResponseInfo debugTextResponseValue = new CommandResponseInfo("debugText", "String");
      responseValues.put(debugTextResponseValue, debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedEnableNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.EnableNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo errorCodeResponseValue = new CommandResponseInfo("errorCode", "int");
      responseValues.put(errorCodeResponseValue, errorCode);
      CommandResponseInfo debugTextResponseValue = new CommandResponseInfo("debugText", "String");
      responseValues.put(debugTextResponseValue, debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedRemoveNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.RemoveNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo errorCodeResponseValue = new CommandResponseInfo("errorCode", "int");
      responseValues.put(errorCodeResponseValue, errorCode);
      CommandResponseInfo debugTextResponseValue = new CommandResponseInfo("debugText", "String");
      responseValues.put(debugTextResponseValue, debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedScanNetworksResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.ScanNetworksResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText
        // wifiScanResults: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        // threadScanResults: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        ) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo errorCodeResponseValue = new CommandResponseInfo("errorCode", "int");
      responseValues.put(errorCodeResponseValue, errorCode);
      CommandResponseInfo debugTextResponseValue = new CommandResponseInfo("debugText", "String");
      responseValues.put(debugTextResponseValue, debugText);
      // wifiScanResults: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      // threadScanResults: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedUpdateThreadNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.UpdateThreadNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo errorCodeResponseValue = new CommandResponseInfo("errorCode", "int");
      responseValues.put(errorCodeResponseValue, errorCode);
      CommandResponseInfo debugTextResponseValue = new CommandResponseInfo("debugText", "String");
      responseValues.put(debugTextResponseValue, debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedUpdateWiFiNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.UpdateWiFiNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo errorCodeResponseValue = new CommandResponseInfo("errorCode", "int");
      responseValues.put(errorCodeResponseValue, errorCode);
      CommandResponseInfo debugTextResponseValue = new CommandResponseInfo("debugText", "String");
      responseValues.put(debugTextResponseValue, debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedApplyUpdateResponseCallback
      implements ChipClusters.OtaSoftwareUpdateProviderCluster.ApplyUpdateResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int action, long delayedActionTime) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo actionResponseValue = new CommandResponseInfo("action", "int");
      responseValues.put(actionResponseValue, action);
      CommandResponseInfo delayedActionTimeResponseValue =
          new CommandResponseInfo("delayedActionTime", "long");
      responseValues.put(delayedActionTimeResponseValue, delayedActionTime);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedQueryImageResponseCallback
      implements ChipClusters.OtaSoftwareUpdateProviderCluster.QueryImageResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        int status,
        long delayedActionTime,
        String imageURI,
        long softwareVersion,
        String softwareVersionString,
        byte[] updateToken,
        boolean userConsentNeeded,
        byte[] metadataForRequestor) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      CommandResponseInfo delayedActionTimeResponseValue =
          new CommandResponseInfo("delayedActionTime", "long");
      responseValues.put(delayedActionTimeResponseValue, delayedActionTime);
      CommandResponseInfo imageURIResponseValue = new CommandResponseInfo("imageURI", "String");
      responseValues.put(imageURIResponseValue, imageURI);
      CommandResponseInfo softwareVersionResponseValue =
          new CommandResponseInfo("softwareVersion", "long");
      responseValues.put(softwareVersionResponseValue, softwareVersion);
      CommandResponseInfo softwareVersionStringResponseValue =
          new CommandResponseInfo("softwareVersionString", "String");
      responseValues.put(softwareVersionStringResponseValue, softwareVersionString);
      CommandResponseInfo updateTokenResponseValue =
          new CommandResponseInfo("updateToken", "byte[]");
      responseValues.put(updateTokenResponseValue, updateToken);
      CommandResponseInfo userConsentNeededResponseValue =
          new CommandResponseInfo("userConsentNeeded", "boolean");
      responseValues.put(userConsentNeededResponseValue, userConsentNeeded);
      CommandResponseInfo metadataForRequestorResponseValue =
          new CommandResponseInfo("metadataForRequestor", "byte[]");
      responseValues.put(metadataForRequestorResponseValue, metadataForRequestor);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedAttestationResponseCallback
      implements ChipClusters.OperationalCredentialsCluster.AttestationResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(byte[] AttestationElements, byte[] Signature) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo AttestationElementsResponseValue =
          new CommandResponseInfo("AttestationElements", "byte[]");
      responseValues.put(AttestationElementsResponseValue, AttestationElements);
      CommandResponseInfo SignatureResponseValue = new CommandResponseInfo("Signature", "byte[]");
      responseValues.put(SignatureResponseValue, Signature);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedCertificateChainResponseCallback
      implements ChipClusters.OperationalCredentialsCluster.CertificateChainResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(byte[] Certificate) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo CertificateResponseValue =
          new CommandResponseInfo("Certificate", "byte[]");
      responseValues.put(CertificateResponseValue, Certificate);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedNOCResponseCallback
      implements ChipClusters.OperationalCredentialsCluster.NOCResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int StatusCode, int FabricIndex, String DebugText) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo StatusCodeResponseValue = new CommandResponseInfo("StatusCode", "int");
      responseValues.put(StatusCodeResponseValue, StatusCode);
      CommandResponseInfo FabricIndexResponseValue = new CommandResponseInfo("FabricIndex", "int");
      responseValues.put(FabricIndexResponseValue, FabricIndex);
      CommandResponseInfo DebugTextResponseValue = new CommandResponseInfo("DebugText", "String");
      responseValues.put(DebugTextResponseValue, DebugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedOpCSRResponseCallback
      implements ChipClusters.OperationalCredentialsCluster.OpCSRResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(byte[] NOCSRElements, byte[] AttestationSignature) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo NOCSRElementsResponseValue =
          new CommandResponseInfo("NOCSRElements", "byte[]");
      responseValues.put(NOCSRElementsResponseValue, NOCSRElements);
      CommandResponseInfo AttestationSignatureResponseValue =
          new CommandResponseInfo("AttestationSignature", "byte[]");
      responseValues.put(AttestationSignatureResponseValue, AttestationSignature);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedFabricsListAttributeCallback
      implements ChipClusters.OperationalCredentialsCluster.FabricsListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        List<ChipClusters.OperationalCredentialsCluster.FabricsListAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList", "List<ChipClusters.OperationalCredentialsCluster.FabricsListAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedTrustedRootCertificatesAttributeCallback
      implements ChipClusters.OperationalCredentialsCluster
              .TrustedRootCertificatesAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<byte[]> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo("valueList", "List<byte[]>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedActiveBatteryFaultsAttributeCallback
      implements ChipClusters.PowerSourceCluster.ActiveBatteryFaultsAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<Integer> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo("valueList", "List<Integer>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedAddSceneResponseCallback
      implements ChipClusters.ScenesCluster.AddSceneResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId, int sceneId) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      CommandResponseInfo groupIdResponseValue = new CommandResponseInfo("groupId", "int");
      responseValues.put(groupIdResponseValue, groupId);
      CommandResponseInfo sceneIdResponseValue = new CommandResponseInfo("sceneId", "int");
      responseValues.put(sceneIdResponseValue, sceneId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetSceneMembershipResponseCallback
      implements ChipClusters.ScenesCluster.GetSceneMembershipResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int capacity, int groupId, int sceneCount
        // sceneList: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        ) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      CommandResponseInfo capacityResponseValue = new CommandResponseInfo("capacity", "int");
      responseValues.put(capacityResponseValue, capacity);
      CommandResponseInfo groupIdResponseValue = new CommandResponseInfo("groupId", "int");
      responseValues.put(groupIdResponseValue, groupId);
      CommandResponseInfo sceneCountResponseValue = new CommandResponseInfo("sceneCount", "int");
      responseValues.put(sceneCountResponseValue, sceneCount);
      // sceneList: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedRemoveAllScenesResponseCallback
      implements ChipClusters.ScenesCluster.RemoveAllScenesResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      CommandResponseInfo groupIdResponseValue = new CommandResponseInfo("groupId", "int");
      responseValues.put(groupIdResponseValue, groupId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedRemoveSceneResponseCallback
      implements ChipClusters.ScenesCluster.RemoveSceneResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId, int sceneId) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      CommandResponseInfo groupIdResponseValue = new CommandResponseInfo("groupId", "int");
      responseValues.put(groupIdResponseValue, groupId);
      CommandResponseInfo sceneIdResponseValue = new CommandResponseInfo("sceneId", "int");
      responseValues.put(sceneIdResponseValue, sceneId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedStoreSceneResponseCallback
      implements ChipClusters.ScenesCluster.StoreSceneResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId, int sceneId) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      CommandResponseInfo groupIdResponseValue = new CommandResponseInfo("groupId", "int");
      responseValues.put(groupIdResponseValue, groupId);
      CommandResponseInfo sceneIdResponseValue = new CommandResponseInfo("sceneId", "int");
      responseValues.put(sceneIdResponseValue, sceneId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedViewSceneResponseCallback
      implements ChipClusters.ScenesCluster.ViewSceneResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId, int sceneId, int transitionTime, String sceneName
        // extensionFieldSets: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        ) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      CommandResponseInfo groupIdResponseValue = new CommandResponseInfo("groupId", "int");
      responseValues.put(groupIdResponseValue, groupId);
      CommandResponseInfo sceneIdResponseValue = new CommandResponseInfo("sceneId", "int");
      responseValues.put(sceneIdResponseValue, sceneId);
      CommandResponseInfo transitionTimeResponseValue =
          new CommandResponseInfo("transitionTime", "int");
      responseValues.put(transitionTimeResponseValue, transitionTime);
      CommandResponseInfo sceneNameResponseValue = new CommandResponseInfo("sceneName", "String");
      responseValues.put(sceneNameResponseValue, sceneName);
      // extensionFieldSets: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedThreadMetricsAttributeCallback
      implements ChipClusters.SoftwareDiagnosticsCluster.ThreadMetricsAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        List<ChipClusters.SoftwareDiagnosticsCluster.ThreadMetricsAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList", "List<ChipClusters.SoftwareDiagnosticsCluster.ThreadMetricsAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedChangeChannelResponseCallback
      implements ChipClusters.TvChannelCluster.ChangeChannelResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        // ChannelMatch: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        int ErrorType) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      // ChannelMatch: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      CommandResponseInfo ErrorTypeResponseValue = new CommandResponseInfo("ErrorType", "int");
      responseValues.put(ErrorTypeResponseValue, ErrorType);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedTvChannelListAttributeCallback
      implements ChipClusters.TvChannelCluster.TvChannelListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<ChipClusters.TvChannelCluster.TvChannelListAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList", "List<ChipClusters.TvChannelCluster.TvChannelListAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedNavigateTargetResponseCallback
      implements ChipClusters.TargetNavigatorCluster.NavigateTargetResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, String data) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo statusResponseValue = new CommandResponseInfo("status", "int");
      responseValues.put(statusResponseValue, status);
      CommandResponseInfo dataResponseValue = new CommandResponseInfo("data", "String");
      responseValues.put(dataResponseValue, data);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedTargetNavigatorListAttributeCallback
      implements ChipClusters.TargetNavigatorCluster.TargetNavigatorListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        List<ChipClusters.TargetNavigatorCluster.TargetNavigatorListAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList",
              "List<ChipClusters.TargetNavigatorCluster.TargetNavigatorListAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedBooleanResponseCallback
      implements ChipClusters.TestClusterCluster.BooleanResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(boolean value) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo valueResponseValue = new CommandResponseInfo("value", "boolean");
      responseValues.put(valueResponseValue, value);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedTestAddArgumentsResponseCallback
      implements ChipClusters.TestClusterCluster.TestAddArgumentsResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int returnValue) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo returnValueResponseValue = new CommandResponseInfo("returnValue", "int");
      responseValues.put(returnValueResponseValue, returnValue);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedTestEnumsResponseCallback
      implements ChipClusters.TestClusterCluster.TestEnumsResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int arg1, int arg2) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo arg1ResponseValue = new CommandResponseInfo("arg1", "int");
      responseValues.put(arg1ResponseValue, arg1);
      CommandResponseInfo arg2ResponseValue = new CommandResponseInfo("arg2", "int");
      responseValues.put(arg2ResponseValue, arg2);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedTestListInt8UReverseResponseCallback
      implements ChipClusters.TestClusterCluster.TestListInt8UReverseResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        // arg1: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        ) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      // arg1: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedTestNullableOptionalResponseCallback
      implements ChipClusters.TestClusterCluster.TestNullableOptionalResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(boolean wasPresent, boolean wasNull, int value, int originalValue) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo wasPresentResponseValue =
          new CommandResponseInfo("wasPresent", "boolean");
      responseValues.put(wasPresentResponseValue, wasPresent);
      CommandResponseInfo wasNullResponseValue = new CommandResponseInfo("wasNull", "boolean");
      responseValues.put(wasNullResponseValue, wasNull);
      CommandResponseInfo valueResponseValue = new CommandResponseInfo("value", "int");
      responseValues.put(valueResponseValue, value);
      CommandResponseInfo originalValueResponseValue =
          new CommandResponseInfo("originalValue", "int");
      responseValues.put(originalValueResponseValue, originalValue);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedTestSpecificResponseCallback
      implements ChipClusters.TestClusterCluster.TestSpecificResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int returnValue) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo returnValueResponseValue = new CommandResponseInfo("returnValue", "int");
      responseValues.put(returnValueResponseValue, returnValue);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedListInt8uAttributeCallback
      implements ChipClusters.TestClusterCluster.ListInt8uAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<Integer> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo("valueList", "List<Integer>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedListOctetStringAttributeCallback
      implements ChipClusters.TestClusterCluster.ListOctetStringAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<byte[]> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo("valueList", "List<byte[]>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedListStructOctetStringAttributeCallback
      implements ChipClusters.TestClusterCluster.ListStructOctetStringAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        List<ChipClusters.TestClusterCluster.ListStructOctetStringAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList", "List<ChipClusters.TestClusterCluster.ListStructOctetStringAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedListNullablesAndOptionalsStructAttributeCallback
      implements ChipClusters.TestClusterCluster.ListNullablesAndOptionalsStructAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        List<ChipClusters.TestClusterCluster.ListNullablesAndOptionalsStructAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList",
              "List<ChipClusters.TestClusterCluster.ListNullablesAndOptionalsStructAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedNeighborTableListAttributeCallback
      implements ChipClusters.ThreadNetworkDiagnosticsCluster.NeighborTableListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        List<ChipClusters.ThreadNetworkDiagnosticsCluster.NeighborTableListAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList",
              "List<ChipClusters.ThreadNetworkDiagnosticsCluster.NeighborTableListAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedRouteTableListAttributeCallback
      implements ChipClusters.ThreadNetworkDiagnosticsCluster.RouteTableListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        List<ChipClusters.ThreadNetworkDiagnosticsCluster.RouteTableListAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList",
              "List<ChipClusters.ThreadNetworkDiagnosticsCluster.RouteTableListAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedSecurityPolicyAttributeCallback
      implements ChipClusters.ThreadNetworkDiagnosticsCluster.SecurityPolicyAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        List<ChipClusters.ThreadNetworkDiagnosticsCluster.SecurityPolicyAttribute> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList",
              "List<ChipClusters.ThreadNetworkDiagnosticsCluster.SecurityPolicyAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedOperationalDatasetComponentsAttributeCallback
      implements ChipClusters.ThreadNetworkDiagnosticsCluster
              .OperationalDatasetComponentsAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        List<ChipClusters.ThreadNetworkDiagnosticsCluster.OperationalDatasetComponentsAttribute>
            valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo(
              "valueList",
              "List<ChipClusters.ThreadNetworkDiagnosticsCluster.OperationalDatasetComponentsAttribute>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public class DelegatedActiveNetworkFaultsListAttributeCallback
      implements ChipClusters.ThreadNetworkDiagnosticsCluster
              .ActiveNetworkFaultsListAttributeCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(List<Integer> valueList) {
      Map<CommandResponseInfo, Object> responseValues = new LinkedHashMap<>();
      CommandResponseInfo commandResponseInfo =
          new CommandResponseInfo("valueList", "List<Integer>");

      responseValues.put(commandResponseInfo, valueList);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception ex) {
      callback.onFailure(ex);
    }
  }

  public Map<String, ClusterInfo> getClusterMap() {
    Map<String, ClusterInfo> clusterMap = new HashMap<>();
    getCommandMap(clusterMap);
    getReadAttributeMap(clusterMap);
    return clusterMap;
  }

  public Map<String, ClusterInfo> getCommandMap(Map<String, ClusterInfo> clusterMap) {
    Map<String, CommandInfo> accountLoginClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> accountLogingetSetupPINCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo accountLogingetSetupPINtempAccountIdentifierCommandParameterInfo =
        new CommandParameterInfo("tempAccountIdentifier", String.class);
    accountLogingetSetupPINCommandParams.put(
        "tempAccountIdentifier", accountLogingetSetupPINtempAccountIdentifierCommandParameterInfo);

    // Populate commands
    CommandInfo accountLogingetSetupPINCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AccountLoginCluster) cluster)
                  .getSetupPIN(
                      (ChipClusters.AccountLoginCluster.GetSetupPINResponseCallback) callback,
                      (String) commandArguments.get("tempAccountIdentifier"));
            },
            () -> new DelegatedGetSetupPINResponseCallback(),
            accountLogingetSetupPINCommandParams);
    accountLoginClusterCommandInfoMap.put("getSetupPIN", accountLogingetSetupPINCommandInfo);
    Map<String, CommandParameterInfo> accountLoginloginCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo accountLoginlogintempAccountIdentifierCommandParameterInfo =
        new CommandParameterInfo("tempAccountIdentifier", String.class);
    accountLoginloginCommandParams.put(
        "tempAccountIdentifier", accountLoginlogintempAccountIdentifierCommandParameterInfo);

    CommandParameterInfo accountLoginloginsetupPINCommandParameterInfo =
        new CommandParameterInfo("setupPIN", String.class);
    accountLoginloginCommandParams.put("setupPIN", accountLoginloginsetupPINCommandParameterInfo);

    // Populate commands
    CommandInfo accountLoginloginCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AccountLoginCluster) cluster)
                  .login(
                      (DefaultClusterCallback) callback,
                      (String) commandArguments.get("tempAccountIdentifier"),
                      (String) commandArguments.get("setupPIN"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            accountLoginloginCommandParams);
    accountLoginClusterCommandInfoMap.put("login", accountLoginloginCommandInfo);
    // Populate cluster
    ClusterInfo accountLoginClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.AccountLoginCluster(ptr, endpointId),
            accountLoginClusterCommandInfoMap);
    clusterMap.put("accountLogin", accountLoginClusterInfo);
    Map<String, CommandInfo> administratorCommissioningClusterCommandInfoMap =
        new LinkedHashMap<>();
    Map<String, CommandParameterInfo>
        administratorCommissioningopenBasicCommissioningWindowCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        administratorCommissioningopenBasicCommissioningWindowcommissioningTimeoutCommandParameterInfo =
            new CommandParameterInfo("commissioningTimeout", int.class);
    administratorCommissioningopenBasicCommissioningWindowCommandParams.put(
        "commissioningTimeout",
        administratorCommissioningopenBasicCommissioningWindowcommissioningTimeoutCommandParameterInfo);

    // Populate commands
    CommandInfo administratorCommissioningopenBasicCommissioningWindowCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AdministratorCommissioningCluster) cluster)
                  .openBasicCommissioningWindow(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("commissioningTimeout"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            administratorCommissioningopenBasicCommissioningWindowCommandParams);
    administratorCommissioningClusterCommandInfoMap.put(
        "openBasicCommissioningWindow",
        administratorCommissioningopenBasicCommissioningWindowCommandInfo);
    Map<String, CommandParameterInfo>
        administratorCommissioningopenCommissioningWindowCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        administratorCommissioningopenCommissioningWindowcommissioningTimeoutCommandParameterInfo =
            new CommandParameterInfo("commissioningTimeout", int.class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "commissioningTimeout",
        administratorCommissioningopenCommissioningWindowcommissioningTimeoutCommandParameterInfo);

    CommandParameterInfo
        administratorCommissioningopenCommissioningWindowPAKEVerifierCommandParameterInfo =
            new CommandParameterInfo("PAKEVerifier", byte[].class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "PAKEVerifier",
        administratorCommissioningopenCommissioningWindowPAKEVerifierCommandParameterInfo);

    CommandParameterInfo
        administratorCommissioningopenCommissioningWindowdiscriminatorCommandParameterInfo =
            new CommandParameterInfo("discriminator", int.class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "discriminator",
        administratorCommissioningopenCommissioningWindowdiscriminatorCommandParameterInfo);

    CommandParameterInfo
        administratorCommissioningopenCommissioningWindowiterationsCommandParameterInfo =
            new CommandParameterInfo("iterations", long.class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "iterations",
        administratorCommissioningopenCommissioningWindowiterationsCommandParameterInfo);

    CommandParameterInfo administratorCommissioningopenCommissioningWindowsaltCommandParameterInfo =
        new CommandParameterInfo("salt", byte[].class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "salt", administratorCommissioningopenCommissioningWindowsaltCommandParameterInfo);

    CommandParameterInfo
        administratorCommissioningopenCommissioningWindowpasscodeIDCommandParameterInfo =
            new CommandParameterInfo("passcodeID", int.class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "passcodeID",
        administratorCommissioningopenCommissioningWindowpasscodeIDCommandParameterInfo);

    // Populate commands
    CommandInfo administratorCommissioningopenCommissioningWindowCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AdministratorCommissioningCluster) cluster)
                  .openCommissioningWindow(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("commissioningTimeout"),
                      (byte[]) commandArguments.get("PAKEVerifier"),
                      (Integer) commandArguments.get("discriminator"),
                      (Long) commandArguments.get("iterations"),
                      (byte[]) commandArguments.get("salt"),
                      (Integer) commandArguments.get("passcodeID"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            administratorCommissioningopenCommissioningWindowCommandParams);
    administratorCommissioningClusterCommandInfoMap.put(
        "openCommissioningWindow", administratorCommissioningopenCommissioningWindowCommandInfo);
    Map<String, CommandParameterInfo> administratorCommissioningrevokeCommissioningCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo administratorCommissioningrevokeCommissioningCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AdministratorCommissioningCluster) cluster)
                  .revokeCommissioning((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            administratorCommissioningrevokeCommissioningCommandParams);
    administratorCommissioningClusterCommandInfoMap.put(
        "revokeCommissioning", administratorCommissioningrevokeCommissioningCommandInfo);
    // Populate cluster
    ClusterInfo administratorCommissioningClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.AdministratorCommissioningCluster(ptr, endpointId),
            administratorCommissioningClusterCommandInfoMap);
    clusterMap.put("administratorCommissioning", administratorCommissioningClusterInfo);
    Map<String, CommandInfo> applicationBasicClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> applicationBasicchangeStatusCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo applicationBasicchangeStatusstatusCommandParameterInfo =
        new CommandParameterInfo("status", int.class);
    applicationBasicchangeStatusCommandParams.put(
        "status", applicationBasicchangeStatusstatusCommandParameterInfo);

    // Populate commands
    CommandInfo applicationBasicchangeStatusCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationBasicCluster) cluster)
                  .changeStatus(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("status"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            applicationBasicchangeStatusCommandParams);
    applicationBasicClusterCommandInfoMap.put(
        "changeStatus", applicationBasicchangeStatusCommandInfo);
    // Populate cluster
    ClusterInfo applicationBasicClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ApplicationBasicCluster(ptr, endpointId),
            applicationBasicClusterCommandInfoMap);
    clusterMap.put("applicationBasic", applicationBasicClusterInfo);
    Map<String, CommandInfo> applicationLauncherClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> applicationLauncherlaunchAppCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo applicationLauncherlaunchAppdataCommandParameterInfo =
        new CommandParameterInfo("data", String.class);
    applicationLauncherlaunchAppCommandParams.put(
        "data", applicationLauncherlaunchAppdataCommandParameterInfo);

    CommandParameterInfo applicationLauncherlaunchAppcatalogVendorIdCommandParameterInfo =
        new CommandParameterInfo("catalogVendorId", int.class);
    applicationLauncherlaunchAppCommandParams.put(
        "catalogVendorId", applicationLauncherlaunchAppcatalogVendorIdCommandParameterInfo);

    CommandParameterInfo applicationLauncherlaunchAppapplicationIdCommandParameterInfo =
        new CommandParameterInfo("applicationId", String.class);
    applicationLauncherlaunchAppCommandParams.put(
        "applicationId", applicationLauncherlaunchAppapplicationIdCommandParameterInfo);

    // Populate commands
    CommandInfo applicationLauncherlaunchAppCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationLauncherCluster) cluster)
                  .launchApp(
                      (ChipClusters.ApplicationLauncherCluster.LaunchAppResponseCallback) callback,
                      (String) commandArguments.get("data"),
                      (Integer) commandArguments.get("catalogVendorId"),
                      (String) commandArguments.get("applicationId"));
            },
            () -> new DelegatedLaunchAppResponseCallback(),
            applicationLauncherlaunchAppCommandParams);
    applicationLauncherClusterCommandInfoMap.put(
        "launchApp", applicationLauncherlaunchAppCommandInfo);
    // Populate cluster
    ClusterInfo applicationLauncherClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ApplicationLauncherCluster(ptr, endpointId),
            applicationLauncherClusterCommandInfoMap);
    clusterMap.put("applicationLauncher", applicationLauncherClusterInfo);
    Map<String, CommandInfo> audioOutputClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> audioOutputrenameOutputCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo audioOutputrenameOutputindexCommandParameterInfo =
        new CommandParameterInfo("index", int.class);
    audioOutputrenameOutputCommandParams.put(
        "index", audioOutputrenameOutputindexCommandParameterInfo);

    CommandParameterInfo audioOutputrenameOutputnameCommandParameterInfo =
        new CommandParameterInfo("name", String.class);
    audioOutputrenameOutputCommandParams.put(
        "name", audioOutputrenameOutputnameCommandParameterInfo);

    // Populate commands
    CommandInfo audioOutputrenameOutputCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AudioOutputCluster) cluster)
                  .renameOutput(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("index"),
                      (String) commandArguments.get("name"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            audioOutputrenameOutputCommandParams);
    audioOutputClusterCommandInfoMap.put("renameOutput", audioOutputrenameOutputCommandInfo);
    Map<String, CommandParameterInfo> audioOutputselectOutputCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo audioOutputselectOutputindexCommandParameterInfo =
        new CommandParameterInfo("index", int.class);
    audioOutputselectOutputCommandParams.put(
        "index", audioOutputselectOutputindexCommandParameterInfo);

    // Populate commands
    CommandInfo audioOutputselectOutputCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AudioOutputCluster) cluster)
                  .selectOutput(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("index"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            audioOutputselectOutputCommandParams);
    audioOutputClusterCommandInfoMap.put("selectOutput", audioOutputselectOutputCommandInfo);
    // Populate cluster
    ClusterInfo audioOutputClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.AudioOutputCluster(ptr, endpointId),
            audioOutputClusterCommandInfoMap);
    clusterMap.put("audioOutput", audioOutputClusterInfo);
    Map<String, CommandInfo> barrierControlClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> barrierControlbarrierControlGoToPercentCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo barrierControlbarrierControlGoToPercentpercentOpenCommandParameterInfo =
        new CommandParameterInfo("percentOpen", int.class);
    barrierControlbarrierControlGoToPercentCommandParams.put(
        "percentOpen", barrierControlbarrierControlGoToPercentpercentOpenCommandParameterInfo);

    // Populate commands
    CommandInfo barrierControlbarrierControlGoToPercentCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BarrierControlCluster) cluster)
                  .barrierControlGoToPercent(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("percentOpen"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            barrierControlbarrierControlGoToPercentCommandParams);
    barrierControlClusterCommandInfoMap.put(
        "barrierControlGoToPercent", barrierControlbarrierControlGoToPercentCommandInfo);
    Map<String, CommandParameterInfo> barrierControlbarrierControlStopCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo barrierControlbarrierControlStopCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BarrierControlCluster) cluster)
                  .barrierControlStop((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            barrierControlbarrierControlStopCommandParams);
    barrierControlClusterCommandInfoMap.put(
        "barrierControlStop", barrierControlbarrierControlStopCommandInfo);
    // Populate cluster
    ClusterInfo barrierControlClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BarrierControlCluster(ptr, endpointId),
            barrierControlClusterCommandInfoMap);
    clusterMap.put("barrierControl", barrierControlClusterInfo);
    Map<String, CommandInfo> basicClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> basicmfgSpecificPingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo basicmfgSpecificPingCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .mfgSpecificPing((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            basicmfgSpecificPingCommandParams);
    basicClusterCommandInfoMap.put("mfgSpecificPing", basicmfgSpecificPingCommandInfo);
    // Populate cluster
    ClusterInfo basicClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BasicCluster(ptr, endpointId),
            basicClusterCommandInfoMap);
    clusterMap.put("basic", basicClusterInfo);
    Map<String, CommandInfo> binaryInputBasicClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo binaryInputBasicClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BinaryInputBasicCluster(ptr, endpointId),
            binaryInputBasicClusterCommandInfoMap);
    clusterMap.put("binaryInputBasic", binaryInputBasicClusterInfo);
    Map<String, CommandInfo> bindingClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> bindingbindCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo bindingbindnodeIdCommandParameterInfo =
        new CommandParameterInfo("nodeId", long.class);
    bindingbindCommandParams.put("nodeId", bindingbindnodeIdCommandParameterInfo);

    CommandParameterInfo bindingbindgroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    bindingbindCommandParams.put("groupId", bindingbindgroupIdCommandParameterInfo);

    CommandParameterInfo bindingbindendpointIdCommandParameterInfo =
        new CommandParameterInfo("endpointId", int.class);
    bindingbindCommandParams.put("endpointId", bindingbindendpointIdCommandParameterInfo);

    CommandParameterInfo bindingbindclusterIdCommandParameterInfo =
        new CommandParameterInfo("clusterId", long.class);
    bindingbindCommandParams.put("clusterId", bindingbindclusterIdCommandParameterInfo);

    // Populate commands
    CommandInfo bindingbindCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BindingCluster) cluster)
                  .bind(
                      (DefaultClusterCallback) callback,
                      (Long) commandArguments.get("nodeId"),
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("endpointId"),
                      (Long) commandArguments.get("clusterId"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bindingbindCommandParams);
    bindingClusterCommandInfoMap.put("bind", bindingbindCommandInfo);
    Map<String, CommandParameterInfo> bindingunbindCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo bindingunbindnodeIdCommandParameterInfo =
        new CommandParameterInfo("nodeId", long.class);
    bindingunbindCommandParams.put("nodeId", bindingunbindnodeIdCommandParameterInfo);

    CommandParameterInfo bindingunbindgroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    bindingunbindCommandParams.put("groupId", bindingunbindgroupIdCommandParameterInfo);

    CommandParameterInfo bindingunbindendpointIdCommandParameterInfo =
        new CommandParameterInfo("endpointId", int.class);
    bindingunbindCommandParams.put("endpointId", bindingunbindendpointIdCommandParameterInfo);

    CommandParameterInfo bindingunbindclusterIdCommandParameterInfo =
        new CommandParameterInfo("clusterId", long.class);
    bindingunbindCommandParams.put("clusterId", bindingunbindclusterIdCommandParameterInfo);

    // Populate commands
    CommandInfo bindingunbindCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BindingCluster) cluster)
                  .unbind(
                      (DefaultClusterCallback) callback,
                      (Long) commandArguments.get("nodeId"),
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("endpointId"),
                      (Long) commandArguments.get("clusterId"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bindingunbindCommandParams);
    bindingClusterCommandInfoMap.put("unbind", bindingunbindCommandInfo);
    // Populate cluster
    ClusterInfo bindingClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BindingCluster(ptr, endpointId),
            bindingClusterCommandInfoMap);
    clusterMap.put("binding", bindingClusterInfo);
    Map<String, CommandInfo> booleanStateClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo booleanStateClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BooleanStateCluster(ptr, endpointId),
            booleanStateClusterCommandInfoMap);
    clusterMap.put("booleanState", booleanStateClusterInfo);
    Map<String, CommandInfo> bridgedActionsClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> bridgedActionsdisableActionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo bridgedActionsdisableActionactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsdisableActionCommandParams.put(
        "actionID", bridgedActionsdisableActionactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsdisableActioninvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsdisableActionCommandParams.put(
        "invokeID", bridgedActionsdisableActioninvokeIDCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsdisableActionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .disableAction(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsdisableActionCommandParams);
    bridgedActionsClusterCommandInfoMap.put(
        "disableAction", bridgedActionsdisableActionCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsdisableActionWithDurationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo bridgedActionsdisableActionWithDurationactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsdisableActionWithDurationCommandParams.put(
        "actionID", bridgedActionsdisableActionWithDurationactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsdisableActionWithDurationinvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsdisableActionWithDurationCommandParams.put(
        "invokeID", bridgedActionsdisableActionWithDurationinvokeIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsdisableActionWithDurationdurationCommandParameterInfo =
        new CommandParameterInfo("duration", long.class);
    bridgedActionsdisableActionWithDurationCommandParams.put(
        "duration", bridgedActionsdisableActionWithDurationdurationCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsdisableActionWithDurationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .disableActionWithDuration(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"),
                      (Long) commandArguments.get("duration"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsdisableActionWithDurationCommandParams);
    bridgedActionsClusterCommandInfoMap.put(
        "disableActionWithDuration", bridgedActionsdisableActionWithDurationCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsenableActionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo bridgedActionsenableActionactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsenableActionCommandParams.put(
        "actionID", bridgedActionsenableActionactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsenableActioninvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsenableActionCommandParams.put(
        "invokeID", bridgedActionsenableActioninvokeIDCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsenableActionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .enableAction(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsenableActionCommandParams);
    bridgedActionsClusterCommandInfoMap.put("enableAction", bridgedActionsenableActionCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsenableActionWithDurationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo bridgedActionsenableActionWithDurationactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsenableActionWithDurationCommandParams.put(
        "actionID", bridgedActionsenableActionWithDurationactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsenableActionWithDurationinvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsenableActionWithDurationCommandParams.put(
        "invokeID", bridgedActionsenableActionWithDurationinvokeIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsenableActionWithDurationdurationCommandParameterInfo =
        new CommandParameterInfo("duration", long.class);
    bridgedActionsenableActionWithDurationCommandParams.put(
        "duration", bridgedActionsenableActionWithDurationdurationCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsenableActionWithDurationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .enableActionWithDuration(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"),
                      (Long) commandArguments.get("duration"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsenableActionWithDurationCommandParams);
    bridgedActionsClusterCommandInfoMap.put(
        "enableActionWithDuration", bridgedActionsenableActionWithDurationCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsinstantActionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo bridgedActionsinstantActionactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsinstantActionCommandParams.put(
        "actionID", bridgedActionsinstantActionactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsinstantActioninvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsinstantActionCommandParams.put(
        "invokeID", bridgedActionsinstantActioninvokeIDCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsinstantActionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .instantAction(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsinstantActionCommandParams);
    bridgedActionsClusterCommandInfoMap.put(
        "instantAction", bridgedActionsinstantActionCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsinstantActionWithTransitionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo bridgedActionsinstantActionWithTransitionactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsinstantActionWithTransitionCommandParams.put(
        "actionID", bridgedActionsinstantActionWithTransitionactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsinstantActionWithTransitioninvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsinstantActionWithTransitionCommandParams.put(
        "invokeID", bridgedActionsinstantActionWithTransitioninvokeIDCommandParameterInfo);

    CommandParameterInfo
        bridgedActionsinstantActionWithTransitiontransitionTimeCommandParameterInfo =
            new CommandParameterInfo("transitionTime", int.class);
    bridgedActionsinstantActionWithTransitionCommandParams.put(
        "transitionTime",
        bridgedActionsinstantActionWithTransitiontransitionTimeCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsinstantActionWithTransitionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .instantActionWithTransition(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"),
                      (Integer) commandArguments.get("transitionTime"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsinstantActionWithTransitionCommandParams);
    bridgedActionsClusterCommandInfoMap.put(
        "instantActionWithTransition", bridgedActionsinstantActionWithTransitionCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionspauseActionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo bridgedActionspauseActionactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionspauseActionCommandParams.put(
        "actionID", bridgedActionspauseActionactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionspauseActioninvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionspauseActionCommandParams.put(
        "invokeID", bridgedActionspauseActioninvokeIDCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionspauseActionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .pauseAction(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionspauseActionCommandParams);
    bridgedActionsClusterCommandInfoMap.put("pauseAction", bridgedActionspauseActionCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionspauseActionWithDurationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo bridgedActionspauseActionWithDurationactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionspauseActionWithDurationCommandParams.put(
        "actionID", bridgedActionspauseActionWithDurationactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionspauseActionWithDurationinvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionspauseActionWithDurationCommandParams.put(
        "invokeID", bridgedActionspauseActionWithDurationinvokeIDCommandParameterInfo);

    CommandParameterInfo bridgedActionspauseActionWithDurationdurationCommandParameterInfo =
        new CommandParameterInfo("duration", long.class);
    bridgedActionspauseActionWithDurationCommandParams.put(
        "duration", bridgedActionspauseActionWithDurationdurationCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionspauseActionWithDurationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .pauseActionWithDuration(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"),
                      (Long) commandArguments.get("duration"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionspauseActionWithDurationCommandParams);
    bridgedActionsClusterCommandInfoMap.put(
        "pauseActionWithDuration", bridgedActionspauseActionWithDurationCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsresumeActionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo bridgedActionsresumeActionactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsresumeActionCommandParams.put(
        "actionID", bridgedActionsresumeActionactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsresumeActioninvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsresumeActionCommandParams.put(
        "invokeID", bridgedActionsresumeActioninvokeIDCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsresumeActionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .resumeAction(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsresumeActionCommandParams);
    bridgedActionsClusterCommandInfoMap.put("resumeAction", bridgedActionsresumeActionCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsstartActionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo bridgedActionsstartActionactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsstartActionCommandParams.put(
        "actionID", bridgedActionsstartActionactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsstartActioninvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsstartActionCommandParams.put(
        "invokeID", bridgedActionsstartActioninvokeIDCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsstartActionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .startAction(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsstartActionCommandParams);
    bridgedActionsClusterCommandInfoMap.put("startAction", bridgedActionsstartActionCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsstartActionWithDurationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo bridgedActionsstartActionWithDurationactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsstartActionWithDurationCommandParams.put(
        "actionID", bridgedActionsstartActionWithDurationactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsstartActionWithDurationinvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsstartActionWithDurationCommandParams.put(
        "invokeID", bridgedActionsstartActionWithDurationinvokeIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsstartActionWithDurationdurationCommandParameterInfo =
        new CommandParameterInfo("duration", long.class);
    bridgedActionsstartActionWithDurationCommandParams.put(
        "duration", bridgedActionsstartActionWithDurationdurationCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsstartActionWithDurationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .startActionWithDuration(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"),
                      (Long) commandArguments.get("duration"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsstartActionWithDurationCommandParams);
    bridgedActionsClusterCommandInfoMap.put(
        "startActionWithDuration", bridgedActionsstartActionWithDurationCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsstopActionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo bridgedActionsstopActionactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsstopActionCommandParams.put(
        "actionID", bridgedActionsstopActionactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsstopActioninvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsstopActionCommandParams.put(
        "invokeID", bridgedActionsstopActioninvokeIDCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsstopActionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .stopAction(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsstopActionCommandParams);
    bridgedActionsClusterCommandInfoMap.put("stopAction", bridgedActionsstopActionCommandInfo);
    // Populate cluster
    ClusterInfo bridgedActionsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BridgedActionsCluster(ptr, endpointId),
            bridgedActionsClusterCommandInfoMap);
    clusterMap.put("bridgedActions", bridgedActionsClusterInfo);
    Map<String, CommandInfo> bridgedDeviceBasicClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo bridgedDeviceBasicClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BridgedDeviceBasicCluster(ptr, endpointId),
            bridgedDeviceBasicClusterCommandInfoMap);
    clusterMap.put("bridgedDeviceBasic", bridgedDeviceBasicClusterInfo);
    Map<String, CommandInfo> colorControlClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> colorControlcolorLoopSetCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorLoopSetupdateFlagsCommandParameterInfo =
        new CommandParameterInfo("updateFlags", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "updateFlags", colorControlcolorLoopSetupdateFlagsCommandParameterInfo);

    CommandParameterInfo colorControlcolorLoopSetactionCommandParameterInfo =
        new CommandParameterInfo("action", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "action", colorControlcolorLoopSetactionCommandParameterInfo);

    CommandParameterInfo colorControlcolorLoopSetdirectionCommandParameterInfo =
        new CommandParameterInfo("direction", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "direction", colorControlcolorLoopSetdirectionCommandParameterInfo);

    CommandParameterInfo colorControlcolorLoopSettimeCommandParameterInfo =
        new CommandParameterInfo("time", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "time", colorControlcolorLoopSettimeCommandParameterInfo);

    CommandParameterInfo colorControlcolorLoopSetstartHueCommandParameterInfo =
        new CommandParameterInfo("startHue", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "startHue", colorControlcolorLoopSetstartHueCommandParameterInfo);

    CommandParameterInfo colorControlcolorLoopSetoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "optionsMask", colorControlcolorLoopSetoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlcolorLoopSetoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "optionsOverride", colorControlcolorLoopSetoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlcolorLoopSetCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .colorLoopSet(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("updateFlags"),
                      (Integer) commandArguments.get("action"),
                      (Integer) commandArguments.get("direction"),
                      (Integer) commandArguments.get("time"),
                      (Integer) commandArguments.get("startHue"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlcolorLoopSetCommandParams);
    colorControlClusterCommandInfoMap.put("colorLoopSet", colorControlcolorLoopSetCommandInfo);
    Map<String, CommandParameterInfo> colorControlenhancedMoveHueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlenhancedMoveHuemoveModeCommandParameterInfo =
        new CommandParameterInfo("moveMode", int.class);
    colorControlenhancedMoveHueCommandParams.put(
        "moveMode", colorControlenhancedMoveHuemoveModeCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveHuerateCommandParameterInfo =
        new CommandParameterInfo("rate", int.class);
    colorControlenhancedMoveHueCommandParams.put(
        "rate", colorControlenhancedMoveHuerateCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveHueoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlenhancedMoveHueCommandParams.put(
        "optionsMask", colorControlenhancedMoveHueoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveHueoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlenhancedMoveHueCommandParams.put(
        "optionsOverride", colorControlenhancedMoveHueoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlenhancedMoveHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .enhancedMoveHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlenhancedMoveHueCommandParams);
    colorControlClusterCommandInfoMap.put(
        "enhancedMoveHue", colorControlenhancedMoveHueCommandInfo);
    Map<String, CommandParameterInfo> colorControlenhancedMoveToHueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlenhancedMoveToHueenhancedHueCommandParameterInfo =
        new CommandParameterInfo("enhancedHue", int.class);
    colorControlenhancedMoveToHueCommandParams.put(
        "enhancedHue", colorControlenhancedMoveToHueenhancedHueCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveToHuedirectionCommandParameterInfo =
        new CommandParameterInfo("direction", int.class);
    colorControlenhancedMoveToHueCommandParams.put(
        "direction", colorControlenhancedMoveToHuedirectionCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveToHuetransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlenhancedMoveToHueCommandParams.put(
        "transitionTime", colorControlenhancedMoveToHuetransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveToHueoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlenhancedMoveToHueCommandParams.put(
        "optionsMask", colorControlenhancedMoveToHueoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveToHueoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlenhancedMoveToHueCommandParams.put(
        "optionsOverride", colorControlenhancedMoveToHueoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlenhancedMoveToHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .enhancedMoveToHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("enhancedHue"),
                      (Integer) commandArguments.get("direction"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlenhancedMoveToHueCommandParams);
    colorControlClusterCommandInfoMap.put(
        "enhancedMoveToHue", colorControlenhancedMoveToHueCommandInfo);
    Map<String, CommandParameterInfo> colorControlenhancedMoveToHueAndSaturationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlenhancedMoveToHueAndSaturationenhancedHueCommandParameterInfo =
        new CommandParameterInfo("enhancedHue", int.class);
    colorControlenhancedMoveToHueAndSaturationCommandParams.put(
        "enhancedHue", colorControlenhancedMoveToHueAndSaturationenhancedHueCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveToHueAndSaturationsaturationCommandParameterInfo =
        new CommandParameterInfo("saturation", int.class);
    colorControlenhancedMoveToHueAndSaturationCommandParams.put(
        "saturation", colorControlenhancedMoveToHueAndSaturationsaturationCommandParameterInfo);

    CommandParameterInfo
        colorControlenhancedMoveToHueAndSaturationtransitionTimeCommandParameterInfo =
            new CommandParameterInfo("transitionTime", int.class);
    colorControlenhancedMoveToHueAndSaturationCommandParams.put(
        "transitionTime",
        colorControlenhancedMoveToHueAndSaturationtransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveToHueAndSaturationoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlenhancedMoveToHueAndSaturationCommandParams.put(
        "optionsMask", colorControlenhancedMoveToHueAndSaturationoptionsMaskCommandParameterInfo);

    CommandParameterInfo
        colorControlenhancedMoveToHueAndSaturationoptionsOverrideCommandParameterInfo =
            new CommandParameterInfo("optionsOverride", int.class);
    colorControlenhancedMoveToHueAndSaturationCommandParams.put(
        "optionsOverride",
        colorControlenhancedMoveToHueAndSaturationoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlenhancedMoveToHueAndSaturationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .enhancedMoveToHueAndSaturation(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("enhancedHue"),
                      (Integer) commandArguments.get("saturation"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlenhancedMoveToHueAndSaturationCommandParams);
    colorControlClusterCommandInfoMap.put(
        "enhancedMoveToHueAndSaturation", colorControlenhancedMoveToHueAndSaturationCommandInfo);
    Map<String, CommandParameterInfo> colorControlenhancedStepHueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlenhancedStepHuestepModeCommandParameterInfo =
        new CommandParameterInfo("stepMode", int.class);
    colorControlenhancedStepHueCommandParams.put(
        "stepMode", colorControlenhancedStepHuestepModeCommandParameterInfo);

    CommandParameterInfo colorControlenhancedStepHuestepSizeCommandParameterInfo =
        new CommandParameterInfo("stepSize", int.class);
    colorControlenhancedStepHueCommandParams.put(
        "stepSize", colorControlenhancedStepHuestepSizeCommandParameterInfo);

    CommandParameterInfo colorControlenhancedStepHuetransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlenhancedStepHueCommandParams.put(
        "transitionTime", colorControlenhancedStepHuetransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlenhancedStepHueoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlenhancedStepHueCommandParams.put(
        "optionsMask", colorControlenhancedStepHueoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlenhancedStepHueoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlenhancedStepHueCommandParams.put(
        "optionsOverride", colorControlenhancedStepHueoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlenhancedStepHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .enhancedStepHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlenhancedStepHueCommandParams);
    colorControlClusterCommandInfoMap.put(
        "enhancedStepHue", colorControlenhancedStepHueCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveColorCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlmoveColorrateXCommandParameterInfo =
        new CommandParameterInfo("rateX", int.class);
    colorControlmoveColorCommandParams.put("rateX", colorControlmoveColorrateXCommandParameterInfo);

    CommandParameterInfo colorControlmoveColorrateYCommandParameterInfo =
        new CommandParameterInfo("rateY", int.class);
    colorControlmoveColorCommandParams.put("rateY", colorControlmoveColorrateYCommandParameterInfo);

    CommandParameterInfo colorControlmoveColoroptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveColorCommandParams.put(
        "optionsMask", colorControlmoveColoroptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveColoroptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveColorCommandParams.put(
        "optionsOverride", colorControlmoveColoroptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveColorCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveColor(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("rateX"),
                      (Integer) commandArguments.get("rateY"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveColorCommandParams);
    colorControlClusterCommandInfoMap.put("moveColor", colorControlmoveColorCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveColorTemperatureCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlmoveColorTemperaturemoveModeCommandParameterInfo =
        new CommandParameterInfo("moveMode", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "moveMode", colorControlmoveColorTemperaturemoveModeCommandParameterInfo);

    CommandParameterInfo colorControlmoveColorTemperaturerateCommandParameterInfo =
        new CommandParameterInfo("rate", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "rate", colorControlmoveColorTemperaturerateCommandParameterInfo);

    CommandParameterInfo
        colorControlmoveColorTemperaturecolorTemperatureMinimumCommandParameterInfo =
            new CommandParameterInfo("colorTemperatureMinimum", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "colorTemperatureMinimum",
        colorControlmoveColorTemperaturecolorTemperatureMinimumCommandParameterInfo);

    CommandParameterInfo
        colorControlmoveColorTemperaturecolorTemperatureMaximumCommandParameterInfo =
            new CommandParameterInfo("colorTemperatureMaximum", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "colorTemperatureMaximum",
        colorControlmoveColorTemperaturecolorTemperatureMaximumCommandParameterInfo);

    CommandParameterInfo colorControlmoveColorTemperatureoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "optionsMask", colorControlmoveColorTemperatureoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveColorTemperatureoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "optionsOverride", colorControlmoveColorTemperatureoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveColorTemperatureCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveColorTemperature(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"),
                      (Integer) commandArguments.get("colorTemperatureMinimum"),
                      (Integer) commandArguments.get("colorTemperatureMaximum"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveColorTemperatureCommandParams);
    colorControlClusterCommandInfoMap.put(
        "moveColorTemperature", colorControlmoveColorTemperatureCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveHueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlmoveHuemoveModeCommandParameterInfo =
        new CommandParameterInfo("moveMode", int.class);
    colorControlmoveHueCommandParams.put(
        "moveMode", colorControlmoveHuemoveModeCommandParameterInfo);

    CommandParameterInfo colorControlmoveHuerateCommandParameterInfo =
        new CommandParameterInfo("rate", int.class);
    colorControlmoveHueCommandParams.put("rate", colorControlmoveHuerateCommandParameterInfo);

    CommandParameterInfo colorControlmoveHueoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveHueCommandParams.put(
        "optionsMask", colorControlmoveHueoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveHueoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveHueCommandParams.put(
        "optionsOverride", colorControlmoveHueoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveHueCommandParams);
    colorControlClusterCommandInfoMap.put("moveHue", colorControlmoveHueCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveSaturationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlmoveSaturationmoveModeCommandParameterInfo =
        new CommandParameterInfo("moveMode", int.class);
    colorControlmoveSaturationCommandParams.put(
        "moveMode", colorControlmoveSaturationmoveModeCommandParameterInfo);

    CommandParameterInfo colorControlmoveSaturationrateCommandParameterInfo =
        new CommandParameterInfo("rate", int.class);
    colorControlmoveSaturationCommandParams.put(
        "rate", colorControlmoveSaturationrateCommandParameterInfo);

    CommandParameterInfo colorControlmoveSaturationoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveSaturationCommandParams.put(
        "optionsMask", colorControlmoveSaturationoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveSaturationoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveSaturationCommandParams.put(
        "optionsOverride", colorControlmoveSaturationoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveSaturationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveSaturation(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveSaturationCommandParams);
    colorControlClusterCommandInfoMap.put("moveSaturation", colorControlmoveSaturationCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveToColorCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlmoveToColorcolorXCommandParameterInfo =
        new CommandParameterInfo("colorX", int.class);
    colorControlmoveToColorCommandParams.put(
        "colorX", colorControlmoveToColorcolorXCommandParameterInfo);

    CommandParameterInfo colorControlmoveToColorcolorYCommandParameterInfo =
        new CommandParameterInfo("colorY", int.class);
    colorControlmoveToColorCommandParams.put(
        "colorY", colorControlmoveToColorcolorYCommandParameterInfo);

    CommandParameterInfo colorControlmoveToColortransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlmoveToColorCommandParams.put(
        "transitionTime", colorControlmoveToColortransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlmoveToColoroptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveToColorCommandParams.put(
        "optionsMask", colorControlmoveToColoroptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveToColoroptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveToColorCommandParams.put(
        "optionsOverride", colorControlmoveToColoroptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveToColorCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveToColor(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("colorX"),
                      (Integer) commandArguments.get("colorY"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveToColorCommandParams);
    colorControlClusterCommandInfoMap.put("moveToColor", colorControlmoveToColorCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveToColorTemperatureCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlmoveToColorTemperaturecolorTemperatureCommandParameterInfo =
        new CommandParameterInfo("colorTemperature", int.class);
    colorControlmoveToColorTemperatureCommandParams.put(
        "colorTemperature", colorControlmoveToColorTemperaturecolorTemperatureCommandParameterInfo);

    CommandParameterInfo colorControlmoveToColorTemperaturetransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlmoveToColorTemperatureCommandParams.put(
        "transitionTime", colorControlmoveToColorTemperaturetransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlmoveToColorTemperatureoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveToColorTemperatureCommandParams.put(
        "optionsMask", colorControlmoveToColorTemperatureoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveToColorTemperatureoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveToColorTemperatureCommandParams.put(
        "optionsOverride", colorControlmoveToColorTemperatureoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveToColorTemperatureCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveToColorTemperature(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("colorTemperature"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveToColorTemperatureCommandParams);
    colorControlClusterCommandInfoMap.put(
        "moveToColorTemperature", colorControlmoveToColorTemperatureCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveToHueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlmoveToHuehueCommandParameterInfo =
        new CommandParameterInfo("hue", int.class);
    colorControlmoveToHueCommandParams.put("hue", colorControlmoveToHuehueCommandParameterInfo);

    CommandParameterInfo colorControlmoveToHuedirectionCommandParameterInfo =
        new CommandParameterInfo("direction", int.class);
    colorControlmoveToHueCommandParams.put(
        "direction", colorControlmoveToHuedirectionCommandParameterInfo);

    CommandParameterInfo colorControlmoveToHuetransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlmoveToHueCommandParams.put(
        "transitionTime", colorControlmoveToHuetransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlmoveToHueoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveToHueCommandParams.put(
        "optionsMask", colorControlmoveToHueoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveToHueoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveToHueCommandParams.put(
        "optionsOverride", colorControlmoveToHueoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveToHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveToHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("hue"),
                      (Integer) commandArguments.get("direction"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveToHueCommandParams);
    colorControlClusterCommandInfoMap.put("moveToHue", colorControlmoveToHueCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveToHueAndSaturationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlmoveToHueAndSaturationhueCommandParameterInfo =
        new CommandParameterInfo("hue", int.class);
    colorControlmoveToHueAndSaturationCommandParams.put(
        "hue", colorControlmoveToHueAndSaturationhueCommandParameterInfo);

    CommandParameterInfo colorControlmoveToHueAndSaturationsaturationCommandParameterInfo =
        new CommandParameterInfo("saturation", int.class);
    colorControlmoveToHueAndSaturationCommandParams.put(
        "saturation", colorControlmoveToHueAndSaturationsaturationCommandParameterInfo);

    CommandParameterInfo colorControlmoveToHueAndSaturationtransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlmoveToHueAndSaturationCommandParams.put(
        "transitionTime", colorControlmoveToHueAndSaturationtransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlmoveToHueAndSaturationoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveToHueAndSaturationCommandParams.put(
        "optionsMask", colorControlmoveToHueAndSaturationoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveToHueAndSaturationoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveToHueAndSaturationCommandParams.put(
        "optionsOverride", colorControlmoveToHueAndSaturationoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveToHueAndSaturationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveToHueAndSaturation(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("hue"),
                      (Integer) commandArguments.get("saturation"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveToHueAndSaturationCommandParams);
    colorControlClusterCommandInfoMap.put(
        "moveToHueAndSaturation", colorControlmoveToHueAndSaturationCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveToSaturationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlmoveToSaturationsaturationCommandParameterInfo =
        new CommandParameterInfo("saturation", int.class);
    colorControlmoveToSaturationCommandParams.put(
        "saturation", colorControlmoveToSaturationsaturationCommandParameterInfo);

    CommandParameterInfo colorControlmoveToSaturationtransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlmoveToSaturationCommandParams.put(
        "transitionTime", colorControlmoveToSaturationtransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlmoveToSaturationoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveToSaturationCommandParams.put(
        "optionsMask", colorControlmoveToSaturationoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveToSaturationoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveToSaturationCommandParams.put(
        "optionsOverride", colorControlmoveToSaturationoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveToSaturationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveToSaturation(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("saturation"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveToSaturationCommandParams);
    colorControlClusterCommandInfoMap.put(
        "moveToSaturation", colorControlmoveToSaturationCommandInfo);
    Map<String, CommandParameterInfo> colorControlstepColorCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlstepColorstepXCommandParameterInfo =
        new CommandParameterInfo("stepX", int.class);
    colorControlstepColorCommandParams.put("stepX", colorControlstepColorstepXCommandParameterInfo);

    CommandParameterInfo colorControlstepColorstepYCommandParameterInfo =
        new CommandParameterInfo("stepY", int.class);
    colorControlstepColorCommandParams.put("stepY", colorControlstepColorstepYCommandParameterInfo);

    CommandParameterInfo colorControlstepColortransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlstepColorCommandParams.put(
        "transitionTime", colorControlstepColortransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlstepColoroptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlstepColorCommandParams.put(
        "optionsMask", colorControlstepColoroptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlstepColoroptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlstepColorCommandParams.put(
        "optionsOverride", colorControlstepColoroptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlstepColorCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .stepColor(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepX"),
                      (Integer) commandArguments.get("stepY"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlstepColorCommandParams);
    colorControlClusterCommandInfoMap.put("stepColor", colorControlstepColorCommandInfo);
    Map<String, CommandParameterInfo> colorControlstepColorTemperatureCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlstepColorTemperaturestepModeCommandParameterInfo =
        new CommandParameterInfo("stepMode", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "stepMode", colorControlstepColorTemperaturestepModeCommandParameterInfo);

    CommandParameterInfo colorControlstepColorTemperaturestepSizeCommandParameterInfo =
        new CommandParameterInfo("stepSize", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "stepSize", colorControlstepColorTemperaturestepSizeCommandParameterInfo);

    CommandParameterInfo colorControlstepColorTemperaturetransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "transitionTime", colorControlstepColorTemperaturetransitionTimeCommandParameterInfo);

    CommandParameterInfo
        colorControlstepColorTemperaturecolorTemperatureMinimumCommandParameterInfo =
            new CommandParameterInfo("colorTemperatureMinimum", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "colorTemperatureMinimum",
        colorControlstepColorTemperaturecolorTemperatureMinimumCommandParameterInfo);

    CommandParameterInfo
        colorControlstepColorTemperaturecolorTemperatureMaximumCommandParameterInfo =
            new CommandParameterInfo("colorTemperatureMaximum", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "colorTemperatureMaximum",
        colorControlstepColorTemperaturecolorTemperatureMaximumCommandParameterInfo);

    CommandParameterInfo colorControlstepColorTemperatureoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "optionsMask", colorControlstepColorTemperatureoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlstepColorTemperatureoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "optionsOverride", colorControlstepColorTemperatureoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlstepColorTemperatureCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .stepColorTemperature(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("colorTemperatureMinimum"),
                      (Integer) commandArguments.get("colorTemperatureMaximum"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlstepColorTemperatureCommandParams);
    colorControlClusterCommandInfoMap.put(
        "stepColorTemperature", colorControlstepColorTemperatureCommandInfo);
    Map<String, CommandParameterInfo> colorControlstepHueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlstepHuestepModeCommandParameterInfo =
        new CommandParameterInfo("stepMode", int.class);
    colorControlstepHueCommandParams.put(
        "stepMode", colorControlstepHuestepModeCommandParameterInfo);

    CommandParameterInfo colorControlstepHuestepSizeCommandParameterInfo =
        new CommandParameterInfo("stepSize", int.class);
    colorControlstepHueCommandParams.put(
        "stepSize", colorControlstepHuestepSizeCommandParameterInfo);

    CommandParameterInfo colorControlstepHuetransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlstepHueCommandParams.put(
        "transitionTime", colorControlstepHuetransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlstepHueoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlstepHueCommandParams.put(
        "optionsMask", colorControlstepHueoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlstepHueoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlstepHueCommandParams.put(
        "optionsOverride", colorControlstepHueoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlstepHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .stepHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlstepHueCommandParams);
    colorControlClusterCommandInfoMap.put("stepHue", colorControlstepHueCommandInfo);
    Map<String, CommandParameterInfo> colorControlstepSaturationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlstepSaturationstepModeCommandParameterInfo =
        new CommandParameterInfo("stepMode", int.class);
    colorControlstepSaturationCommandParams.put(
        "stepMode", colorControlstepSaturationstepModeCommandParameterInfo);

    CommandParameterInfo colorControlstepSaturationstepSizeCommandParameterInfo =
        new CommandParameterInfo("stepSize", int.class);
    colorControlstepSaturationCommandParams.put(
        "stepSize", colorControlstepSaturationstepSizeCommandParameterInfo);

    CommandParameterInfo colorControlstepSaturationtransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlstepSaturationCommandParams.put(
        "transitionTime", colorControlstepSaturationtransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlstepSaturationoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlstepSaturationCommandParams.put(
        "optionsMask", colorControlstepSaturationoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlstepSaturationoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlstepSaturationCommandParams.put(
        "optionsOverride", colorControlstepSaturationoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlstepSaturationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .stepSaturation(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlstepSaturationCommandParams);
    colorControlClusterCommandInfoMap.put("stepSaturation", colorControlstepSaturationCommandInfo);
    Map<String, CommandParameterInfo> colorControlstopMoveStepCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlstopMoveStepoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlstopMoveStepCommandParams.put(
        "optionsMask", colorControlstopMoveStepoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlstopMoveStepoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlstopMoveStepCommandParams.put(
        "optionsOverride", colorControlstopMoveStepoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlstopMoveStepCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .stopMoveStep(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlstopMoveStepCommandParams);
    colorControlClusterCommandInfoMap.put("stopMoveStep", colorControlstopMoveStepCommandInfo);
    // Populate cluster
    ClusterInfo colorControlClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ColorControlCluster(ptr, endpointId),
            colorControlClusterCommandInfoMap);
    clusterMap.put("colorControl", colorControlClusterInfo);
    Map<String, CommandInfo> contentLauncherClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> contentLauncherlaunchContentCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo contentLauncherlaunchContentautoPlayCommandParameterInfo =
        new CommandParameterInfo("autoPlay", boolean.class);
    contentLauncherlaunchContentCommandParams.put(
        "autoPlay", contentLauncherlaunchContentautoPlayCommandParameterInfo);

    CommandParameterInfo contentLauncherlaunchContentdataCommandParameterInfo =
        new CommandParameterInfo("data", String.class);
    contentLauncherlaunchContentCommandParams.put(
        "data", contentLauncherlaunchContentdataCommandParameterInfo);

    // Populate commands
    CommandInfo contentLauncherlaunchContentCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ContentLauncherCluster) cluster)
                  .launchContent(
                      (ChipClusters.ContentLauncherCluster.LaunchContentResponseCallback) callback,
                      (Boolean) commandArguments.get("autoPlay"),
                      (String) commandArguments.get("data"));
            },
            () -> new DelegatedLaunchContentResponseCallback(),
            contentLauncherlaunchContentCommandParams);
    contentLauncherClusterCommandInfoMap.put(
        "launchContent", contentLauncherlaunchContentCommandInfo);
    Map<String, CommandParameterInfo> contentLauncherlaunchURLCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo contentLauncherlaunchURLcontentURLCommandParameterInfo =
        new CommandParameterInfo("contentURL", String.class);
    contentLauncherlaunchURLCommandParams.put(
        "contentURL", contentLauncherlaunchURLcontentURLCommandParameterInfo);

    CommandParameterInfo contentLauncherlaunchURLdisplayStringCommandParameterInfo =
        new CommandParameterInfo("displayString", String.class);
    contentLauncherlaunchURLCommandParams.put(
        "displayString", contentLauncherlaunchURLdisplayStringCommandParameterInfo);

    // Populate commands
    CommandInfo contentLauncherlaunchURLCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ContentLauncherCluster) cluster)
                  .launchURL(
                      (ChipClusters.ContentLauncherCluster.LaunchURLResponseCallback) callback,
                      (String) commandArguments.get("contentURL"),
                      (String) commandArguments.get("displayString"));
            },
            () -> new DelegatedLaunchURLResponseCallback(),
            contentLauncherlaunchURLCommandParams);
    contentLauncherClusterCommandInfoMap.put("launchURL", contentLauncherlaunchURLCommandInfo);
    // Populate cluster
    ClusterInfo contentLauncherClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ContentLauncherCluster(ptr, endpointId),
            contentLauncherClusterCommandInfoMap);
    clusterMap.put("contentLauncher", contentLauncherClusterInfo);
    Map<String, CommandInfo> descriptorClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo descriptorClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.DescriptorCluster(ptr, endpointId),
            descriptorClusterCommandInfoMap);
    clusterMap.put("descriptor", descriptorClusterInfo);
    Map<String, CommandInfo> diagnosticLogsClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> diagnosticLogsretrieveLogsRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo diagnosticLogsretrieveLogsRequestintentCommandParameterInfo =
        new CommandParameterInfo("intent", int.class);
    diagnosticLogsretrieveLogsRequestCommandParams.put(
        "intent", diagnosticLogsretrieveLogsRequestintentCommandParameterInfo);

    CommandParameterInfo diagnosticLogsretrieveLogsRequestrequestedProtocolCommandParameterInfo =
        new CommandParameterInfo("requestedProtocol", int.class);
    diagnosticLogsretrieveLogsRequestCommandParams.put(
        "requestedProtocol",
        diagnosticLogsretrieveLogsRequestrequestedProtocolCommandParameterInfo);

    CommandParameterInfo
        diagnosticLogsretrieveLogsRequesttransferFileDesignatorCommandParameterInfo =
            new CommandParameterInfo("transferFileDesignator", byte[].class);
    diagnosticLogsretrieveLogsRequestCommandParams.put(
        "transferFileDesignator",
        diagnosticLogsretrieveLogsRequesttransferFileDesignatorCommandParameterInfo);

    // Populate commands
    CommandInfo diagnosticLogsretrieveLogsRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DiagnosticLogsCluster) cluster)
                  .retrieveLogsRequest(
                      (ChipClusters.DiagnosticLogsCluster.RetrieveLogsResponseCallback) callback,
                      (Integer) commandArguments.get("intent"),
                      (Integer) commandArguments.get("requestedProtocol"),
                      (byte[]) commandArguments.get("transferFileDesignator"));
            },
            () -> new DelegatedRetrieveLogsResponseCallback(),
            diagnosticLogsretrieveLogsRequestCommandParams);
    diagnosticLogsClusterCommandInfoMap.put(
        "retrieveLogsRequest", diagnosticLogsretrieveLogsRequestCommandInfo);
    // Populate cluster
    ClusterInfo diagnosticLogsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.DiagnosticLogsCluster(ptr, endpointId),
            diagnosticLogsClusterCommandInfoMap);
    clusterMap.put("diagnosticLogs", diagnosticLogsClusterInfo);
    Map<String, CommandInfo> doorLockClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> doorLockclearAllPinsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo doorLockclearAllPinsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearAllPins(
                      (ChipClusters.DoorLockCluster.ClearAllPinsResponseCallback) callback);
            },
            () -> new DelegatedClearAllPinsResponseCallback(),
            doorLockclearAllPinsCommandParams);
    doorLockClusterCommandInfoMap.put("clearAllPins", doorLockclearAllPinsCommandInfo);
    Map<String, CommandParameterInfo> doorLockclearAllRfidsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo doorLockclearAllRfidsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearAllRfids(
                      (ChipClusters.DoorLockCluster.ClearAllRfidsResponseCallback) callback);
            },
            () -> new DelegatedClearAllRfidsResponseCallback(),
            doorLockclearAllRfidsCommandParams);
    doorLockClusterCommandInfoMap.put("clearAllRfids", doorLockclearAllRfidsCommandInfo);
    Map<String, CommandParameterInfo> doorLockclearHolidayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockclearHolidaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLockclearHolidayScheduleCommandParams.put(
        "scheduleId", doorLockclearHolidaySchedulescheduleIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockclearHolidayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearHolidaySchedule(
                      (ChipClusters.DoorLockCluster.ClearHolidayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"));
            },
            () -> new DelegatedClearHolidayScheduleResponseCallback(),
            doorLockclearHolidayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put(
        "clearHolidaySchedule", doorLockclearHolidayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLockclearPinCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockclearPinuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockclearPinCommandParams.put("userId", doorLockclearPinuserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockclearPinCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearPin(
                      (ChipClusters.DoorLockCluster.ClearPinResponseCallback) callback,
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedClearPinResponseCallback(),
            doorLockclearPinCommandParams);
    doorLockClusterCommandInfoMap.put("clearPin", doorLockclearPinCommandInfo);
    Map<String, CommandParameterInfo> doorLockclearRfidCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockclearRfiduserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockclearRfidCommandParams.put("userId", doorLockclearRfiduserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockclearRfidCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearRfid(
                      (ChipClusters.DoorLockCluster.ClearRfidResponseCallback) callback,
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedClearRfidResponseCallback(),
            doorLockclearRfidCommandParams);
    doorLockClusterCommandInfoMap.put("clearRfid", doorLockclearRfidCommandInfo);
    Map<String, CommandParameterInfo> doorLockclearWeekdayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockclearWeekdaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLockclearWeekdayScheduleCommandParams.put(
        "scheduleId", doorLockclearWeekdaySchedulescheduleIdCommandParameterInfo);

    CommandParameterInfo doorLockclearWeekdayScheduleuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockclearWeekdayScheduleCommandParams.put(
        "userId", doorLockclearWeekdayScheduleuserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockclearWeekdayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearWeekdaySchedule(
                      (ChipClusters.DoorLockCluster.ClearWeekdayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedClearWeekdayScheduleResponseCallback(),
            doorLockclearWeekdayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put(
        "clearWeekdaySchedule", doorLockclearWeekdayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLockclearYeardayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockclearYeardaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLockclearYeardayScheduleCommandParams.put(
        "scheduleId", doorLockclearYeardaySchedulescheduleIdCommandParameterInfo);

    CommandParameterInfo doorLockclearYeardayScheduleuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockclearYeardayScheduleCommandParams.put(
        "userId", doorLockclearYeardayScheduleuserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockclearYeardayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearYeardaySchedule(
                      (ChipClusters.DoorLockCluster.ClearYeardayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedClearYeardayScheduleResponseCallback(),
            doorLockclearYeardayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put(
        "clearYeardaySchedule", doorLockclearYeardayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLockgetHolidayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockgetHolidaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLockgetHolidayScheduleCommandParams.put(
        "scheduleId", doorLockgetHolidaySchedulescheduleIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockgetHolidayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getHolidaySchedule(
                      (ChipClusters.DoorLockCluster.GetHolidayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"));
            },
            () -> new DelegatedGetHolidayScheduleResponseCallback(),
            doorLockgetHolidayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put("getHolidaySchedule", doorLockgetHolidayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLockgetLogRecordCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockgetLogRecordlogIndexCommandParameterInfo =
        new CommandParameterInfo("logIndex", int.class);
    doorLockgetLogRecordCommandParams.put(
        "logIndex", doorLockgetLogRecordlogIndexCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockgetLogRecordCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getLogRecord(
                      (ChipClusters.DoorLockCluster.GetLogRecordResponseCallback) callback,
                      (Integer) commandArguments.get("logIndex"));
            },
            () -> new DelegatedGetLogRecordResponseCallback(),
            doorLockgetLogRecordCommandParams);
    doorLockClusterCommandInfoMap.put("getLogRecord", doorLockgetLogRecordCommandInfo);
    Map<String, CommandParameterInfo> doorLockgetPinCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockgetPinuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockgetPinCommandParams.put("userId", doorLockgetPinuserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockgetPinCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getPin(
                      (ChipClusters.DoorLockCluster.GetPinResponseCallback) callback,
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedGetPinResponseCallback(),
            doorLockgetPinCommandParams);
    doorLockClusterCommandInfoMap.put("getPin", doorLockgetPinCommandInfo);
    Map<String, CommandParameterInfo> doorLockgetRfidCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockgetRfiduserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockgetRfidCommandParams.put("userId", doorLockgetRfiduserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockgetRfidCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getRfid(
                      (ChipClusters.DoorLockCluster.GetRfidResponseCallback) callback,
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedGetRfidResponseCallback(),
            doorLockgetRfidCommandParams);
    doorLockClusterCommandInfoMap.put("getRfid", doorLockgetRfidCommandInfo);
    Map<String, CommandParameterInfo> doorLockgetUserTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockgetUserTypeuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockgetUserTypeCommandParams.put("userId", doorLockgetUserTypeuserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockgetUserTypeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getUserType(
                      (ChipClusters.DoorLockCluster.GetUserTypeResponseCallback) callback,
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedGetUserTypeResponseCallback(),
            doorLockgetUserTypeCommandParams);
    doorLockClusterCommandInfoMap.put("getUserType", doorLockgetUserTypeCommandInfo);
    Map<String, CommandParameterInfo> doorLockgetWeekdayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockgetWeekdaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLockgetWeekdayScheduleCommandParams.put(
        "scheduleId", doorLockgetWeekdaySchedulescheduleIdCommandParameterInfo);

    CommandParameterInfo doorLockgetWeekdayScheduleuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockgetWeekdayScheduleCommandParams.put(
        "userId", doorLockgetWeekdayScheduleuserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockgetWeekdayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getWeekdaySchedule(
                      (ChipClusters.DoorLockCluster.GetWeekdayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedGetWeekdayScheduleResponseCallback(),
            doorLockgetWeekdayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put("getWeekdaySchedule", doorLockgetWeekdayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLockgetYeardayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockgetYeardaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLockgetYeardayScheduleCommandParams.put(
        "scheduleId", doorLockgetYeardaySchedulescheduleIdCommandParameterInfo);

    CommandParameterInfo doorLockgetYeardayScheduleuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockgetYeardayScheduleCommandParams.put(
        "userId", doorLockgetYeardayScheduleuserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockgetYeardayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getYeardaySchedule(
                      (ChipClusters.DoorLockCluster.GetYeardayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedGetYeardayScheduleResponseCallback(),
            doorLockgetYeardayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put("getYeardaySchedule", doorLockgetYeardayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLocklockDoorCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLocklockDoorpinCommandParameterInfo =
        new CommandParameterInfo("pin", byte[].class);
    doorLocklockDoorCommandParams.put("pin", doorLocklockDoorpinCommandParameterInfo);

    // Populate commands
    CommandInfo doorLocklockDoorCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .lockDoor(
                      (ChipClusters.DoorLockCluster.LockDoorResponseCallback) callback,
                      (byte[]) commandArguments.get("pin"));
            },
            () -> new DelegatedLockDoorResponseCallback(),
            doorLocklockDoorCommandParams);
    doorLockClusterCommandInfoMap.put("lockDoor", doorLocklockDoorCommandInfo);
    Map<String, CommandParameterInfo> doorLocksetHolidayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLocksetHolidaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLocksetHolidayScheduleCommandParams.put(
        "scheduleId", doorLocksetHolidaySchedulescheduleIdCommandParameterInfo);

    CommandParameterInfo doorLocksetHolidaySchedulelocalStartTimeCommandParameterInfo =
        new CommandParameterInfo("localStartTime", long.class);
    doorLocksetHolidayScheduleCommandParams.put(
        "localStartTime", doorLocksetHolidaySchedulelocalStartTimeCommandParameterInfo);

    CommandParameterInfo doorLocksetHolidaySchedulelocalEndTimeCommandParameterInfo =
        new CommandParameterInfo("localEndTime", long.class);
    doorLocksetHolidayScheduleCommandParams.put(
        "localEndTime", doorLocksetHolidaySchedulelocalEndTimeCommandParameterInfo);

    CommandParameterInfo doorLocksetHolidayScheduleoperatingModeDuringHolidayCommandParameterInfo =
        new CommandParameterInfo("operatingModeDuringHoliday", int.class);
    doorLocksetHolidayScheduleCommandParams.put(
        "operatingModeDuringHoliday",
        doorLocksetHolidayScheduleoperatingModeDuringHolidayCommandParameterInfo);

    // Populate commands
    CommandInfo doorLocksetHolidayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setHolidaySchedule(
                      (ChipClusters.DoorLockCluster.SetHolidayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Long) commandArguments.get("localStartTime"),
                      (Long) commandArguments.get("localEndTime"),
                      (Integer) commandArguments.get("operatingModeDuringHoliday"));
            },
            () -> new DelegatedSetHolidayScheduleResponseCallback(),
            doorLocksetHolidayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put("setHolidaySchedule", doorLocksetHolidayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLocksetPinCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLocksetPinuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLocksetPinCommandParams.put("userId", doorLocksetPinuserIdCommandParameterInfo);

    CommandParameterInfo doorLocksetPinuserStatusCommandParameterInfo =
        new CommandParameterInfo("userStatus", int.class);
    doorLocksetPinCommandParams.put("userStatus", doorLocksetPinuserStatusCommandParameterInfo);

    CommandParameterInfo doorLocksetPinuserTypeCommandParameterInfo =
        new CommandParameterInfo("userType", int.class);
    doorLocksetPinCommandParams.put("userType", doorLocksetPinuserTypeCommandParameterInfo);

    CommandParameterInfo doorLocksetPinpinCommandParameterInfo =
        new CommandParameterInfo("pin", byte[].class);
    doorLocksetPinCommandParams.put("pin", doorLocksetPinpinCommandParameterInfo);

    // Populate commands
    CommandInfo doorLocksetPinCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setPin(
                      (ChipClusters.DoorLockCluster.SetPinResponseCallback) callback,
                      (Integer) commandArguments.get("userId"),
                      (Integer) commandArguments.get("userStatus"),
                      (Integer) commandArguments.get("userType"),
                      (byte[]) commandArguments.get("pin"));
            },
            () -> new DelegatedSetPinResponseCallback(),
            doorLocksetPinCommandParams);
    doorLockClusterCommandInfoMap.put("setPin", doorLocksetPinCommandInfo);
    Map<String, CommandParameterInfo> doorLocksetRfidCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLocksetRfiduserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLocksetRfidCommandParams.put("userId", doorLocksetRfiduserIdCommandParameterInfo);

    CommandParameterInfo doorLocksetRfiduserStatusCommandParameterInfo =
        new CommandParameterInfo("userStatus", int.class);
    doorLocksetRfidCommandParams.put("userStatus", doorLocksetRfiduserStatusCommandParameterInfo);

    CommandParameterInfo doorLocksetRfiduserTypeCommandParameterInfo =
        new CommandParameterInfo("userType", int.class);
    doorLocksetRfidCommandParams.put("userType", doorLocksetRfiduserTypeCommandParameterInfo);

    CommandParameterInfo doorLocksetRfididCommandParameterInfo =
        new CommandParameterInfo("id", byte[].class);
    doorLocksetRfidCommandParams.put("id", doorLocksetRfididCommandParameterInfo);

    // Populate commands
    CommandInfo doorLocksetRfidCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setRfid(
                      (ChipClusters.DoorLockCluster.SetRfidResponseCallback) callback,
                      (Integer) commandArguments.get("userId"),
                      (Integer) commandArguments.get("userStatus"),
                      (Integer) commandArguments.get("userType"),
                      (byte[]) commandArguments.get("id"));
            },
            () -> new DelegatedSetRfidResponseCallback(),
            doorLocksetRfidCommandParams);
    doorLockClusterCommandInfoMap.put("setRfid", doorLocksetRfidCommandInfo);
    Map<String, CommandParameterInfo> doorLocksetUserTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLocksetUserTypeuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLocksetUserTypeCommandParams.put("userId", doorLocksetUserTypeuserIdCommandParameterInfo);

    CommandParameterInfo doorLocksetUserTypeuserTypeCommandParameterInfo =
        new CommandParameterInfo("userType", int.class);
    doorLocksetUserTypeCommandParams.put(
        "userType", doorLocksetUserTypeuserTypeCommandParameterInfo);

    // Populate commands
    CommandInfo doorLocksetUserTypeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setUserType(
                      (ChipClusters.DoorLockCluster.SetUserTypeResponseCallback) callback,
                      (Integer) commandArguments.get("userId"),
                      (Integer) commandArguments.get("userType"));
            },
            () -> new DelegatedSetUserTypeResponseCallback(),
            doorLocksetUserTypeCommandParams);
    doorLockClusterCommandInfoMap.put("setUserType", doorLocksetUserTypeCommandInfo);
    Map<String, CommandParameterInfo> doorLocksetWeekdayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLocksetWeekdaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "scheduleId", doorLocksetWeekdaySchedulescheduleIdCommandParameterInfo);

    CommandParameterInfo doorLocksetWeekdayScheduleuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "userId", doorLocksetWeekdayScheduleuserIdCommandParameterInfo);

    CommandParameterInfo doorLocksetWeekdayScheduledaysMaskCommandParameterInfo =
        new CommandParameterInfo("daysMask", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "daysMask", doorLocksetWeekdayScheduledaysMaskCommandParameterInfo);

    CommandParameterInfo doorLocksetWeekdaySchedulestartHourCommandParameterInfo =
        new CommandParameterInfo("startHour", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "startHour", doorLocksetWeekdaySchedulestartHourCommandParameterInfo);

    CommandParameterInfo doorLocksetWeekdaySchedulestartMinuteCommandParameterInfo =
        new CommandParameterInfo("startMinute", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "startMinute", doorLocksetWeekdaySchedulestartMinuteCommandParameterInfo);

    CommandParameterInfo doorLocksetWeekdayScheduleendHourCommandParameterInfo =
        new CommandParameterInfo("endHour", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "endHour", doorLocksetWeekdayScheduleendHourCommandParameterInfo);

    CommandParameterInfo doorLocksetWeekdayScheduleendMinuteCommandParameterInfo =
        new CommandParameterInfo("endMinute", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "endMinute", doorLocksetWeekdayScheduleendMinuteCommandParameterInfo);

    // Populate commands
    CommandInfo doorLocksetWeekdayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setWeekdaySchedule(
                      (ChipClusters.DoorLockCluster.SetWeekdayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"),
                      (Integer) commandArguments.get("daysMask"),
                      (Integer) commandArguments.get("startHour"),
                      (Integer) commandArguments.get("startMinute"),
                      (Integer) commandArguments.get("endHour"),
                      (Integer) commandArguments.get("endMinute"));
            },
            () -> new DelegatedSetWeekdayScheduleResponseCallback(),
            doorLocksetWeekdayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put("setWeekdaySchedule", doorLocksetWeekdayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLocksetYeardayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLocksetYeardaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLocksetYeardayScheduleCommandParams.put(
        "scheduleId", doorLocksetYeardaySchedulescheduleIdCommandParameterInfo);

    CommandParameterInfo doorLocksetYeardayScheduleuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLocksetYeardayScheduleCommandParams.put(
        "userId", doorLocksetYeardayScheduleuserIdCommandParameterInfo);

    CommandParameterInfo doorLocksetYeardaySchedulelocalStartTimeCommandParameterInfo =
        new CommandParameterInfo("localStartTime", long.class);
    doorLocksetYeardayScheduleCommandParams.put(
        "localStartTime", doorLocksetYeardaySchedulelocalStartTimeCommandParameterInfo);

    CommandParameterInfo doorLocksetYeardaySchedulelocalEndTimeCommandParameterInfo =
        new CommandParameterInfo("localEndTime", long.class);
    doorLocksetYeardayScheduleCommandParams.put(
        "localEndTime", doorLocksetYeardaySchedulelocalEndTimeCommandParameterInfo);

    // Populate commands
    CommandInfo doorLocksetYeardayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setYeardaySchedule(
                      (ChipClusters.DoorLockCluster.SetYeardayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"),
                      (Long) commandArguments.get("localStartTime"),
                      (Long) commandArguments.get("localEndTime"));
            },
            () -> new DelegatedSetYeardayScheduleResponseCallback(),
            doorLocksetYeardayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put("setYeardaySchedule", doorLocksetYeardayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLockunlockDoorCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockunlockDoorpinCommandParameterInfo =
        new CommandParameterInfo("pin", byte[].class);
    doorLockunlockDoorCommandParams.put("pin", doorLockunlockDoorpinCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockunlockDoorCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .unlockDoor(
                      (ChipClusters.DoorLockCluster.UnlockDoorResponseCallback) callback,
                      (byte[]) commandArguments.get("pin"));
            },
            () -> new DelegatedUnlockDoorResponseCallback(),
            doorLockunlockDoorCommandParams);
    doorLockClusterCommandInfoMap.put("unlockDoor", doorLockunlockDoorCommandInfo);
    Map<String, CommandParameterInfo> doorLockunlockWithTimeoutCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockunlockWithTimeouttimeoutInSecondsCommandParameterInfo =
        new CommandParameterInfo("timeoutInSeconds", int.class);
    doorLockunlockWithTimeoutCommandParams.put(
        "timeoutInSeconds", doorLockunlockWithTimeouttimeoutInSecondsCommandParameterInfo);

    CommandParameterInfo doorLockunlockWithTimeoutpinCommandParameterInfo =
        new CommandParameterInfo("pin", byte[].class);
    doorLockunlockWithTimeoutCommandParams.put(
        "pin", doorLockunlockWithTimeoutpinCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockunlockWithTimeoutCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .unlockWithTimeout(
                      (ChipClusters.DoorLockCluster.UnlockWithTimeoutResponseCallback) callback,
                      (Integer) commandArguments.get("timeoutInSeconds"),
                      (byte[]) commandArguments.get("pin"));
            },
            () -> new DelegatedUnlockWithTimeoutResponseCallback(),
            doorLockunlockWithTimeoutCommandParams);
    doorLockClusterCommandInfoMap.put("unlockWithTimeout", doorLockunlockWithTimeoutCommandInfo);
    // Populate cluster
    ClusterInfo doorLockClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.DoorLockCluster(ptr, endpointId),
            doorLockClusterCommandInfoMap);
    clusterMap.put("doorLock", doorLockClusterInfo);
    Map<String, CommandInfo> electricalMeasurementClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo electricalMeasurementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ElectricalMeasurementCluster(ptr, endpointId),
            electricalMeasurementClusterCommandInfoMap);
    clusterMap.put("electricalMeasurement", electricalMeasurementClusterInfo);
    Map<String, CommandInfo> ethernetNetworkDiagnosticsClusterCommandInfoMap =
        new LinkedHashMap<>();
    Map<String, CommandParameterInfo> ethernetNetworkDiagnosticsresetCountsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo ethernetNetworkDiagnosticsresetCountsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster)
                  .resetCounts((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            ethernetNetworkDiagnosticsresetCountsCommandParams);
    ethernetNetworkDiagnosticsClusterCommandInfoMap.put(
        "resetCounts", ethernetNetworkDiagnosticsresetCountsCommandInfo);
    // Populate cluster
    ClusterInfo ethernetNetworkDiagnosticsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.EthernetNetworkDiagnosticsCluster(ptr, endpointId),
            ethernetNetworkDiagnosticsClusterCommandInfoMap);
    clusterMap.put("ethernetNetworkDiagnostics", ethernetNetworkDiagnosticsClusterInfo);
    Map<String, CommandInfo> fixedLabelClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo fixedLabelClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.FixedLabelCluster(ptr, endpointId),
            fixedLabelClusterCommandInfoMap);
    clusterMap.put("fixedLabel", fixedLabelClusterInfo);
    Map<String, CommandInfo> flowMeasurementClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo flowMeasurementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.FlowMeasurementCluster(ptr, endpointId),
            flowMeasurementClusterCommandInfoMap);
    clusterMap.put("flowMeasurement", flowMeasurementClusterInfo);
    Map<String, CommandInfo> generalCommissioningClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> generalCommissioningarmFailSafeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo generalCommissioningarmFailSafeexpiryLengthSecondsCommandParameterInfo =
        new CommandParameterInfo("expiryLengthSeconds", int.class);
    generalCommissioningarmFailSafeCommandParams.put(
        "expiryLengthSeconds",
        generalCommissioningarmFailSafeexpiryLengthSecondsCommandParameterInfo);

    CommandParameterInfo generalCommissioningarmFailSafebreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    generalCommissioningarmFailSafeCommandParams.put(
        "breadcrumb", generalCommissioningarmFailSafebreadcrumbCommandParameterInfo);

    CommandParameterInfo generalCommissioningarmFailSafetimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    generalCommissioningarmFailSafeCommandParams.put(
        "timeoutMs", generalCommissioningarmFailSafetimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo generalCommissioningarmFailSafeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralCommissioningCluster) cluster)
                  .armFailSafe(
                      (ChipClusters.GeneralCommissioningCluster.ArmFailSafeResponseCallback)
                          callback,
                      (Integer) commandArguments.get("expiryLengthSeconds"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedArmFailSafeResponseCallback(),
            generalCommissioningarmFailSafeCommandParams);
    generalCommissioningClusterCommandInfoMap.put(
        "armFailSafe", generalCommissioningarmFailSafeCommandInfo);
    Map<String, CommandParameterInfo> generalCommissioningcommissioningCompleteCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo generalCommissioningcommissioningCompleteCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralCommissioningCluster) cluster)
                  .commissioningComplete(
                      (ChipClusters.GeneralCommissioningCluster
                              .CommissioningCompleteResponseCallback)
                          callback);
            },
            () -> new DelegatedCommissioningCompleteResponseCallback(),
            generalCommissioningcommissioningCompleteCommandParams);
    generalCommissioningClusterCommandInfoMap.put(
        "commissioningComplete", generalCommissioningcommissioningCompleteCommandInfo);
    Map<String, CommandParameterInfo> generalCommissioningsetRegulatoryConfigCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo generalCommissioningsetRegulatoryConfiglocationCommandParameterInfo =
        new CommandParameterInfo("location", int.class);
    generalCommissioningsetRegulatoryConfigCommandParams.put(
        "location", generalCommissioningsetRegulatoryConfiglocationCommandParameterInfo);

    CommandParameterInfo generalCommissioningsetRegulatoryConfigcountryCodeCommandParameterInfo =
        new CommandParameterInfo("countryCode", String.class);
    generalCommissioningsetRegulatoryConfigCommandParams.put(
        "countryCode", generalCommissioningsetRegulatoryConfigcountryCodeCommandParameterInfo);

    CommandParameterInfo generalCommissioningsetRegulatoryConfigbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    generalCommissioningsetRegulatoryConfigCommandParams.put(
        "breadcrumb", generalCommissioningsetRegulatoryConfigbreadcrumbCommandParameterInfo);

    CommandParameterInfo generalCommissioningsetRegulatoryConfigtimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    generalCommissioningsetRegulatoryConfigCommandParams.put(
        "timeoutMs", generalCommissioningsetRegulatoryConfigtimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo generalCommissioningsetRegulatoryConfigCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralCommissioningCluster) cluster)
                  .setRegulatoryConfig(
                      (ChipClusters.GeneralCommissioningCluster.SetRegulatoryConfigResponseCallback)
                          callback,
                      (Integer) commandArguments.get("location"),
                      (String) commandArguments.get("countryCode"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedSetRegulatoryConfigResponseCallback(),
            generalCommissioningsetRegulatoryConfigCommandParams);
    generalCommissioningClusterCommandInfoMap.put(
        "setRegulatoryConfig", generalCommissioningsetRegulatoryConfigCommandInfo);
    // Populate cluster
    ClusterInfo generalCommissioningClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.GeneralCommissioningCluster(ptr, endpointId),
            generalCommissioningClusterCommandInfoMap);
    clusterMap.put("generalCommissioning", generalCommissioningClusterInfo);
    Map<String, CommandInfo> generalDiagnosticsClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo generalDiagnosticsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.GeneralDiagnosticsCluster(ptr, endpointId),
            generalDiagnosticsClusterCommandInfoMap);
    clusterMap.put("generalDiagnostics", generalDiagnosticsClusterInfo);
    Map<String, CommandInfo> groupKeyManagementClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo groupKeyManagementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.GroupKeyManagementCluster(ptr, endpointId),
            groupKeyManagementClusterCommandInfoMap);
    clusterMap.put("groupKeyManagement", groupKeyManagementClusterInfo);
    Map<String, CommandInfo> groupsClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> groupsaddGroupCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo groupsaddGroupgroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    groupsaddGroupCommandParams.put("groupId", groupsaddGroupgroupIdCommandParameterInfo);

    CommandParameterInfo groupsaddGroupgroupNameCommandParameterInfo =
        new CommandParameterInfo("groupName", String.class);
    groupsaddGroupCommandParams.put("groupName", groupsaddGroupgroupNameCommandParameterInfo);

    // Populate commands
    CommandInfo groupsaddGroupCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .addGroup(
                      (ChipClusters.GroupsCluster.AddGroupResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (String) commandArguments.get("groupName"));
            },
            () -> new DelegatedAddGroupResponseCallback(),
            groupsaddGroupCommandParams);
    groupsClusterCommandInfoMap.put("addGroup", groupsaddGroupCommandInfo);
    Map<String, CommandParameterInfo> groupsaddGroupIfIdentifyingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo groupsaddGroupIfIdentifyinggroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    groupsaddGroupIfIdentifyingCommandParams.put(
        "groupId", groupsaddGroupIfIdentifyinggroupIdCommandParameterInfo);

    CommandParameterInfo groupsaddGroupIfIdentifyinggroupNameCommandParameterInfo =
        new CommandParameterInfo("groupName", String.class);
    groupsaddGroupIfIdentifyingCommandParams.put(
        "groupName", groupsaddGroupIfIdentifyinggroupNameCommandParameterInfo);

    // Populate commands
    CommandInfo groupsaddGroupIfIdentifyingCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .addGroupIfIdentifying(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (String) commandArguments.get("groupName"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            groupsaddGroupIfIdentifyingCommandParams);
    groupsClusterCommandInfoMap.put(
        "addGroupIfIdentifying", groupsaddGroupIfIdentifyingCommandInfo);
    Map<String, CommandParameterInfo> groupsgetGroupMembershipCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo groupsgetGroupMembershipgroupCountCommandParameterInfo =
        new CommandParameterInfo("groupCount", int.class);
    groupsgetGroupMembershipCommandParams.put(
        "groupCount", groupsgetGroupMembershipgroupCountCommandParameterInfo);

    CommandParameterInfo groupsgetGroupMembershipgroupListCommandParameterInfo =
        new CommandParameterInfo("groupList", int.class);
    groupsgetGroupMembershipCommandParams.put(
        "groupList", groupsgetGroupMembershipgroupListCommandParameterInfo);

    // Populate commands
    CommandInfo groupsgetGroupMembershipCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .getGroupMembership(
                      (ChipClusters.GroupsCluster.GetGroupMembershipResponseCallback) callback,
                      (Integer) commandArguments.get("groupCount"),
                      (Integer) commandArguments.get("groupList"));
            },
            () -> new DelegatedGetGroupMembershipResponseCallback(),
            groupsgetGroupMembershipCommandParams);
    groupsClusterCommandInfoMap.put("getGroupMembership", groupsgetGroupMembershipCommandInfo);
    Map<String, CommandParameterInfo> groupsremoveAllGroupsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo groupsremoveAllGroupsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .removeAllGroups((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            groupsremoveAllGroupsCommandParams);
    groupsClusterCommandInfoMap.put("removeAllGroups", groupsremoveAllGroupsCommandInfo);
    Map<String, CommandParameterInfo> groupsremoveGroupCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo groupsremoveGroupgroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    groupsremoveGroupCommandParams.put("groupId", groupsremoveGroupgroupIdCommandParameterInfo);

    // Populate commands
    CommandInfo groupsremoveGroupCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .removeGroup(
                      (ChipClusters.GroupsCluster.RemoveGroupResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"));
            },
            () -> new DelegatedRemoveGroupResponseCallback(),
            groupsremoveGroupCommandParams);
    groupsClusterCommandInfoMap.put("removeGroup", groupsremoveGroupCommandInfo);
    Map<String, CommandParameterInfo> groupsviewGroupCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo groupsviewGroupgroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    groupsviewGroupCommandParams.put("groupId", groupsviewGroupgroupIdCommandParameterInfo);

    // Populate commands
    CommandInfo groupsviewGroupCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .viewGroup(
                      (ChipClusters.GroupsCluster.ViewGroupResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"));
            },
            () -> new DelegatedViewGroupResponseCallback(),
            groupsviewGroupCommandParams);
    groupsClusterCommandInfoMap.put("viewGroup", groupsviewGroupCommandInfo);
    // Populate cluster
    ClusterInfo groupsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.GroupsCluster(ptr, endpointId),
            groupsClusterCommandInfoMap);
    clusterMap.put("groups", groupsClusterInfo);
    Map<String, CommandInfo> identifyClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> identifyidentifyCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo identifyidentifyidentifyTimeCommandParameterInfo =
        new CommandParameterInfo("identifyTime", int.class);
    identifyidentifyCommandParams.put(
        "identifyTime", identifyidentifyidentifyTimeCommandParameterInfo);

    // Populate commands
    CommandInfo identifyidentifyCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IdentifyCluster) cluster)
                  .identify(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("identifyTime"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            identifyidentifyCommandParams);
    identifyClusterCommandInfoMap.put("identify", identifyidentifyCommandInfo);
    Map<String, CommandParameterInfo> identifyidentifyQueryCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo identifyidentifyQueryCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IdentifyCluster) cluster)
                  .identifyQuery(
                      (ChipClusters.IdentifyCluster.IdentifyQueryResponseCallback) callback);
            },
            () -> new DelegatedIdentifyQueryResponseCallback(),
            identifyidentifyQueryCommandParams);
    identifyClusterCommandInfoMap.put("identifyQuery", identifyidentifyQueryCommandInfo);
    Map<String, CommandParameterInfo> identifytriggerEffectCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo identifytriggerEffecteffectIdentifierCommandParameterInfo =
        new CommandParameterInfo("effectIdentifier", int.class);
    identifytriggerEffectCommandParams.put(
        "effectIdentifier", identifytriggerEffecteffectIdentifierCommandParameterInfo);

    CommandParameterInfo identifytriggerEffecteffectVariantCommandParameterInfo =
        new CommandParameterInfo("effectVariant", int.class);
    identifytriggerEffectCommandParams.put(
        "effectVariant", identifytriggerEffecteffectVariantCommandParameterInfo);

    // Populate commands
    CommandInfo identifytriggerEffectCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IdentifyCluster) cluster)
                  .triggerEffect(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("effectIdentifier"),
                      (Integer) commandArguments.get("effectVariant"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            identifytriggerEffectCommandParams);
    identifyClusterCommandInfoMap.put("triggerEffect", identifytriggerEffectCommandInfo);
    // Populate cluster
    ClusterInfo identifyClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.IdentifyCluster(ptr, endpointId),
            identifyClusterCommandInfoMap);
    clusterMap.put("identify", identifyClusterInfo);
    Map<String, CommandInfo> illuminanceMeasurementClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo illuminanceMeasurementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.IlluminanceMeasurementCluster(ptr, endpointId),
            illuminanceMeasurementClusterCommandInfoMap);
    clusterMap.put("illuminanceMeasurement", illuminanceMeasurementClusterInfo);
    Map<String, CommandInfo> keypadInputClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> keypadInputsendKeyCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo keypadInputsendKeykeyCodeCommandParameterInfo =
        new CommandParameterInfo("keyCode", int.class);
    keypadInputsendKeyCommandParams.put("keyCode", keypadInputsendKeykeyCodeCommandParameterInfo);

    // Populate commands
    CommandInfo keypadInputsendKeyCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.KeypadInputCluster) cluster)
                  .sendKey(
                      (ChipClusters.KeypadInputCluster.SendKeyResponseCallback) callback,
                      (Integer) commandArguments.get("keyCode"));
            },
            () -> new DelegatedSendKeyResponseCallback(),
            keypadInputsendKeyCommandParams);
    keypadInputClusterCommandInfoMap.put("sendKey", keypadInputsendKeyCommandInfo);
    // Populate cluster
    ClusterInfo keypadInputClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.KeypadInputCluster(ptr, endpointId),
            keypadInputClusterCommandInfoMap);
    clusterMap.put("keypadInput", keypadInputClusterInfo);
    Map<String, CommandInfo> levelControlClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> levelControlmoveCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControlmovemoveModeCommandParameterInfo =
        new CommandParameterInfo("moveMode", int.class);
    levelControlmoveCommandParams.put("moveMode", levelControlmovemoveModeCommandParameterInfo);

    CommandParameterInfo levelControlmoverateCommandParameterInfo =
        new CommandParameterInfo("rate", int.class);
    levelControlmoveCommandParams.put("rate", levelControlmoverateCommandParameterInfo);

    CommandParameterInfo levelControlmoveoptionMaskCommandParameterInfo =
        new CommandParameterInfo("optionMask", int.class);
    levelControlmoveCommandParams.put("optionMask", levelControlmoveoptionMaskCommandParameterInfo);

    CommandParameterInfo levelControlmoveoptionOverrideCommandParameterInfo =
        new CommandParameterInfo("optionOverride", int.class);
    levelControlmoveCommandParams.put(
        "optionOverride", levelControlmoveoptionOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo levelControlmoveCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .move(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"),
                      (Integer) commandArguments.get("optionMask"),
                      (Integer) commandArguments.get("optionOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlmoveCommandParams);
    levelControlClusterCommandInfoMap.put("move", levelControlmoveCommandInfo);
    Map<String, CommandParameterInfo> levelControlmoveToLevelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControlmoveToLevellevelCommandParameterInfo =
        new CommandParameterInfo("level", int.class);
    levelControlmoveToLevelCommandParams.put(
        "level", levelControlmoveToLevellevelCommandParameterInfo);

    CommandParameterInfo levelControlmoveToLeveltransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    levelControlmoveToLevelCommandParams.put(
        "transitionTime", levelControlmoveToLeveltransitionTimeCommandParameterInfo);

    CommandParameterInfo levelControlmoveToLeveloptionMaskCommandParameterInfo =
        new CommandParameterInfo("optionMask", int.class);
    levelControlmoveToLevelCommandParams.put(
        "optionMask", levelControlmoveToLeveloptionMaskCommandParameterInfo);

    CommandParameterInfo levelControlmoveToLeveloptionOverrideCommandParameterInfo =
        new CommandParameterInfo("optionOverride", int.class);
    levelControlmoveToLevelCommandParams.put(
        "optionOverride", levelControlmoveToLeveloptionOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo levelControlmoveToLevelCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .moveToLevel(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("level"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionMask"),
                      (Integer) commandArguments.get("optionOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlmoveToLevelCommandParams);
    levelControlClusterCommandInfoMap.put("moveToLevel", levelControlmoveToLevelCommandInfo);
    Map<String, CommandParameterInfo> levelControlmoveToLevelWithOnOffCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControlmoveToLevelWithOnOfflevelCommandParameterInfo =
        new CommandParameterInfo("level", int.class);
    levelControlmoveToLevelWithOnOffCommandParams.put(
        "level", levelControlmoveToLevelWithOnOfflevelCommandParameterInfo);

    CommandParameterInfo levelControlmoveToLevelWithOnOfftransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    levelControlmoveToLevelWithOnOffCommandParams.put(
        "transitionTime", levelControlmoveToLevelWithOnOfftransitionTimeCommandParameterInfo);

    // Populate commands
    CommandInfo levelControlmoveToLevelWithOnOffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .moveToLevelWithOnOff(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("level"),
                      (Integer) commandArguments.get("transitionTime"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlmoveToLevelWithOnOffCommandParams);
    levelControlClusterCommandInfoMap.put(
        "moveToLevelWithOnOff", levelControlmoveToLevelWithOnOffCommandInfo);
    Map<String, CommandParameterInfo> levelControlmoveWithOnOffCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControlmoveWithOnOffmoveModeCommandParameterInfo =
        new CommandParameterInfo("moveMode", int.class);
    levelControlmoveWithOnOffCommandParams.put(
        "moveMode", levelControlmoveWithOnOffmoveModeCommandParameterInfo);

    CommandParameterInfo levelControlmoveWithOnOffrateCommandParameterInfo =
        new CommandParameterInfo("rate", int.class);
    levelControlmoveWithOnOffCommandParams.put(
        "rate", levelControlmoveWithOnOffrateCommandParameterInfo);

    // Populate commands
    CommandInfo levelControlmoveWithOnOffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .moveWithOnOff(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlmoveWithOnOffCommandParams);
    levelControlClusterCommandInfoMap.put("moveWithOnOff", levelControlmoveWithOnOffCommandInfo);
    Map<String, CommandParameterInfo> levelControlstepCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControlstepstepModeCommandParameterInfo =
        new CommandParameterInfo("stepMode", int.class);
    levelControlstepCommandParams.put("stepMode", levelControlstepstepModeCommandParameterInfo);

    CommandParameterInfo levelControlstepstepSizeCommandParameterInfo =
        new CommandParameterInfo("stepSize", int.class);
    levelControlstepCommandParams.put("stepSize", levelControlstepstepSizeCommandParameterInfo);

    CommandParameterInfo levelControlsteptransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    levelControlstepCommandParams.put(
        "transitionTime", levelControlsteptransitionTimeCommandParameterInfo);

    CommandParameterInfo levelControlstepoptionMaskCommandParameterInfo =
        new CommandParameterInfo("optionMask", int.class);
    levelControlstepCommandParams.put("optionMask", levelControlstepoptionMaskCommandParameterInfo);

    CommandParameterInfo levelControlstepoptionOverrideCommandParameterInfo =
        new CommandParameterInfo("optionOverride", int.class);
    levelControlstepCommandParams.put(
        "optionOverride", levelControlstepoptionOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo levelControlstepCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .step(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionMask"),
                      (Integer) commandArguments.get("optionOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlstepCommandParams);
    levelControlClusterCommandInfoMap.put("step", levelControlstepCommandInfo);
    Map<String, CommandParameterInfo> levelControlstepWithOnOffCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControlstepWithOnOffstepModeCommandParameterInfo =
        new CommandParameterInfo("stepMode", int.class);
    levelControlstepWithOnOffCommandParams.put(
        "stepMode", levelControlstepWithOnOffstepModeCommandParameterInfo);

    CommandParameterInfo levelControlstepWithOnOffstepSizeCommandParameterInfo =
        new CommandParameterInfo("stepSize", int.class);
    levelControlstepWithOnOffCommandParams.put(
        "stepSize", levelControlstepWithOnOffstepSizeCommandParameterInfo);

    CommandParameterInfo levelControlstepWithOnOfftransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    levelControlstepWithOnOffCommandParams.put(
        "transitionTime", levelControlstepWithOnOfftransitionTimeCommandParameterInfo);

    // Populate commands
    CommandInfo levelControlstepWithOnOffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .stepWithOnOff(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlstepWithOnOffCommandParams);
    levelControlClusterCommandInfoMap.put("stepWithOnOff", levelControlstepWithOnOffCommandInfo);
    Map<String, CommandParameterInfo> levelControlstopCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControlstopoptionMaskCommandParameterInfo =
        new CommandParameterInfo("optionMask", int.class);
    levelControlstopCommandParams.put("optionMask", levelControlstopoptionMaskCommandParameterInfo);

    CommandParameterInfo levelControlstopoptionOverrideCommandParameterInfo =
        new CommandParameterInfo("optionOverride", int.class);
    levelControlstopCommandParams.put(
        "optionOverride", levelControlstopoptionOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo levelControlstopCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .stop(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("optionMask"),
                      (Integer) commandArguments.get("optionOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlstopCommandParams);
    levelControlClusterCommandInfoMap.put("stop", levelControlstopCommandInfo);
    Map<String, CommandParameterInfo> levelControlstopWithOnOffCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo levelControlstopWithOnOffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .stopWithOnOff((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlstopWithOnOffCommandParams);
    levelControlClusterCommandInfoMap.put("stopWithOnOff", levelControlstopWithOnOffCommandInfo);
    // Populate cluster
    ClusterInfo levelControlClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.LevelControlCluster(ptr, endpointId),
            levelControlClusterCommandInfoMap);
    clusterMap.put("levelControl", levelControlClusterInfo);
    Map<String, CommandInfo> lowPowerClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> lowPowersleepCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo lowPowersleepCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LowPowerCluster) cluster).sleep((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            lowPowersleepCommandParams);
    lowPowerClusterCommandInfoMap.put("sleep", lowPowersleepCommandInfo);
    // Populate cluster
    ClusterInfo lowPowerClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.LowPowerCluster(ptr, endpointId),
            lowPowerClusterCommandInfoMap);
    clusterMap.put("lowPower", lowPowerClusterInfo);
    Map<String, CommandInfo> mediaInputClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> mediaInputhideInputStatusCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo mediaInputhideInputStatusCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaInputCluster) cluster)
                  .hideInputStatus((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            mediaInputhideInputStatusCommandParams);
    mediaInputClusterCommandInfoMap.put("hideInputStatus", mediaInputhideInputStatusCommandInfo);
    Map<String, CommandParameterInfo> mediaInputrenameInputCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo mediaInputrenameInputindexCommandParameterInfo =
        new CommandParameterInfo("index", int.class);
    mediaInputrenameInputCommandParams.put("index", mediaInputrenameInputindexCommandParameterInfo);

    CommandParameterInfo mediaInputrenameInputnameCommandParameterInfo =
        new CommandParameterInfo("name", String.class);
    mediaInputrenameInputCommandParams.put("name", mediaInputrenameInputnameCommandParameterInfo);

    // Populate commands
    CommandInfo mediaInputrenameInputCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaInputCluster) cluster)
                  .renameInput(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("index"),
                      (String) commandArguments.get("name"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            mediaInputrenameInputCommandParams);
    mediaInputClusterCommandInfoMap.put("renameInput", mediaInputrenameInputCommandInfo);
    Map<String, CommandParameterInfo> mediaInputselectInputCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo mediaInputselectInputindexCommandParameterInfo =
        new CommandParameterInfo("index", int.class);
    mediaInputselectInputCommandParams.put("index", mediaInputselectInputindexCommandParameterInfo);

    // Populate commands
    CommandInfo mediaInputselectInputCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaInputCluster) cluster)
                  .selectInput(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("index"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            mediaInputselectInputCommandParams);
    mediaInputClusterCommandInfoMap.put("selectInput", mediaInputselectInputCommandInfo);
    Map<String, CommandParameterInfo> mediaInputshowInputStatusCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo mediaInputshowInputStatusCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaInputCluster) cluster)
                  .showInputStatus((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            mediaInputshowInputStatusCommandParams);
    mediaInputClusterCommandInfoMap.put("showInputStatus", mediaInputshowInputStatusCommandInfo);
    // Populate cluster
    ClusterInfo mediaInputClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.MediaInputCluster(ptr, endpointId),
            mediaInputClusterCommandInfoMap);
    clusterMap.put("mediaInput", mediaInputClusterInfo);
    Map<String, CommandInfo> mediaPlaybackClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> mediaPlaybackmediaFastForwardCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo mediaPlaybackmediaFastForwardCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaFastForward(
                      (ChipClusters.MediaPlaybackCluster.MediaFastForwardResponseCallback)
                          callback);
            },
            () -> new DelegatedMediaFastForwardResponseCallback(),
            mediaPlaybackmediaFastForwardCommandParams);
    mediaPlaybackClusterCommandInfoMap.put(
        "mediaFastForward", mediaPlaybackmediaFastForwardCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaNextCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo mediaPlaybackmediaNextCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaNext(
                      (ChipClusters.MediaPlaybackCluster.MediaNextResponseCallback) callback);
            },
            () -> new DelegatedMediaNextResponseCallback(),
            mediaPlaybackmediaNextCommandParams);
    mediaPlaybackClusterCommandInfoMap.put("mediaNext", mediaPlaybackmediaNextCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaPauseCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo mediaPlaybackmediaPauseCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaPause(
                      (ChipClusters.MediaPlaybackCluster.MediaPauseResponseCallback) callback);
            },
            () -> new DelegatedMediaPauseResponseCallback(),
            mediaPlaybackmediaPauseCommandParams);
    mediaPlaybackClusterCommandInfoMap.put("mediaPause", mediaPlaybackmediaPauseCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaPlayCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo mediaPlaybackmediaPlayCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaPlay(
                      (ChipClusters.MediaPlaybackCluster.MediaPlayResponseCallback) callback);
            },
            () -> new DelegatedMediaPlayResponseCallback(),
            mediaPlaybackmediaPlayCommandParams);
    mediaPlaybackClusterCommandInfoMap.put("mediaPlay", mediaPlaybackmediaPlayCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaPreviousCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo mediaPlaybackmediaPreviousCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaPrevious(
                      (ChipClusters.MediaPlaybackCluster.MediaPreviousResponseCallback) callback);
            },
            () -> new DelegatedMediaPreviousResponseCallback(),
            mediaPlaybackmediaPreviousCommandParams);
    mediaPlaybackClusterCommandInfoMap.put("mediaPrevious", mediaPlaybackmediaPreviousCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaRewindCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo mediaPlaybackmediaRewindCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaRewind(
                      (ChipClusters.MediaPlaybackCluster.MediaRewindResponseCallback) callback);
            },
            () -> new DelegatedMediaRewindResponseCallback(),
            mediaPlaybackmediaRewindCommandParams);
    mediaPlaybackClusterCommandInfoMap.put("mediaRewind", mediaPlaybackmediaRewindCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaSeekCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo mediaPlaybackmediaSeekpositionCommandParameterInfo =
        new CommandParameterInfo("position", long.class);
    mediaPlaybackmediaSeekCommandParams.put(
        "position", mediaPlaybackmediaSeekpositionCommandParameterInfo);

    // Populate commands
    CommandInfo mediaPlaybackmediaSeekCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaSeek(
                      (ChipClusters.MediaPlaybackCluster.MediaSeekResponseCallback) callback,
                      (Long) commandArguments.get("position"));
            },
            () -> new DelegatedMediaSeekResponseCallback(),
            mediaPlaybackmediaSeekCommandParams);
    mediaPlaybackClusterCommandInfoMap.put("mediaSeek", mediaPlaybackmediaSeekCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaSkipBackwardCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        mediaPlaybackmediaSkipBackwarddeltaPositionMillisecondsCommandParameterInfo =
            new CommandParameterInfo("deltaPositionMilliseconds", long.class);
    mediaPlaybackmediaSkipBackwardCommandParams.put(
        "deltaPositionMilliseconds",
        mediaPlaybackmediaSkipBackwarddeltaPositionMillisecondsCommandParameterInfo);

    // Populate commands
    CommandInfo mediaPlaybackmediaSkipBackwardCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaSkipBackward(
                      (ChipClusters.MediaPlaybackCluster.MediaSkipBackwardResponseCallback)
                          callback,
                      (Long) commandArguments.get("deltaPositionMilliseconds"));
            },
            () -> new DelegatedMediaSkipBackwardResponseCallback(),
            mediaPlaybackmediaSkipBackwardCommandParams);
    mediaPlaybackClusterCommandInfoMap.put(
        "mediaSkipBackward", mediaPlaybackmediaSkipBackwardCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaSkipForwardCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        mediaPlaybackmediaSkipForwarddeltaPositionMillisecondsCommandParameterInfo =
            new CommandParameterInfo("deltaPositionMilliseconds", long.class);
    mediaPlaybackmediaSkipForwardCommandParams.put(
        "deltaPositionMilliseconds",
        mediaPlaybackmediaSkipForwarddeltaPositionMillisecondsCommandParameterInfo);

    // Populate commands
    CommandInfo mediaPlaybackmediaSkipForwardCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaSkipForward(
                      (ChipClusters.MediaPlaybackCluster.MediaSkipForwardResponseCallback) callback,
                      (Long) commandArguments.get("deltaPositionMilliseconds"));
            },
            () -> new DelegatedMediaSkipForwardResponseCallback(),
            mediaPlaybackmediaSkipForwardCommandParams);
    mediaPlaybackClusterCommandInfoMap.put(
        "mediaSkipForward", mediaPlaybackmediaSkipForwardCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaStartOverCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo mediaPlaybackmediaStartOverCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaStartOver(
                      (ChipClusters.MediaPlaybackCluster.MediaStartOverResponseCallback) callback);
            },
            () -> new DelegatedMediaStartOverResponseCallback(),
            mediaPlaybackmediaStartOverCommandParams);
    mediaPlaybackClusterCommandInfoMap.put(
        "mediaStartOver", mediaPlaybackmediaStartOverCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaStopCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo mediaPlaybackmediaStopCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaStop(
                      (ChipClusters.MediaPlaybackCluster.MediaStopResponseCallback) callback);
            },
            () -> new DelegatedMediaStopResponseCallback(),
            mediaPlaybackmediaStopCommandParams);
    mediaPlaybackClusterCommandInfoMap.put("mediaStop", mediaPlaybackmediaStopCommandInfo);
    // Populate cluster
    ClusterInfo mediaPlaybackClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.MediaPlaybackCluster(ptr, endpointId),
            mediaPlaybackClusterCommandInfoMap);
    clusterMap.put("mediaPlayback", mediaPlaybackClusterInfo);
    Map<String, CommandInfo> modeSelectClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> modeSelectchangeToModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo modeSelectchangeToModenewModeCommandParameterInfo =
        new CommandParameterInfo("newMode", int.class);
    modeSelectchangeToModeCommandParams.put(
        "newMode", modeSelectchangeToModenewModeCommandParameterInfo);

    // Populate commands
    CommandInfo modeSelectchangeToModeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ModeSelectCluster) cluster)
                  .changeToMode(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("newMode"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            modeSelectchangeToModeCommandParams);
    modeSelectClusterCommandInfoMap.put("changeToMode", modeSelectchangeToModeCommandInfo);
    // Populate cluster
    ClusterInfo modeSelectClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ModeSelectCluster(ptr, endpointId),
            modeSelectClusterCommandInfoMap);
    clusterMap.put("modeSelect", modeSelectClusterInfo);
    Map<String, CommandInfo> networkCommissioningClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> networkCommissioningaddThreadNetworkCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        networkCommissioningaddThreadNetworkoperationalDatasetCommandParameterInfo =
            new CommandParameterInfo("operationalDataset", byte[].class);
    networkCommissioningaddThreadNetworkCommandParams.put(
        "operationalDataset",
        networkCommissioningaddThreadNetworkoperationalDatasetCommandParameterInfo);

    CommandParameterInfo networkCommissioningaddThreadNetworkbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    networkCommissioningaddThreadNetworkCommandParams.put(
        "breadcrumb", networkCommissioningaddThreadNetworkbreadcrumbCommandParameterInfo);

    CommandParameterInfo networkCommissioningaddThreadNetworktimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    networkCommissioningaddThreadNetworkCommandParams.put(
        "timeoutMs", networkCommissioningaddThreadNetworktimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo networkCommissioningaddThreadNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .addThreadNetwork(
                      (ChipClusters.NetworkCommissioningCluster.AddThreadNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("operationalDataset"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedAddThreadNetworkResponseCallback(),
            networkCommissioningaddThreadNetworkCommandParams);
    networkCommissioningClusterCommandInfoMap.put(
        "addThreadNetwork", networkCommissioningaddThreadNetworkCommandInfo);
    Map<String, CommandParameterInfo> networkCommissioningaddWiFiNetworkCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo networkCommissioningaddWiFiNetworkssidCommandParameterInfo =
        new CommandParameterInfo("ssid", byte[].class);
    networkCommissioningaddWiFiNetworkCommandParams.put(
        "ssid", networkCommissioningaddWiFiNetworkssidCommandParameterInfo);

    CommandParameterInfo networkCommissioningaddWiFiNetworkcredentialsCommandParameterInfo =
        new CommandParameterInfo("credentials", byte[].class);
    networkCommissioningaddWiFiNetworkCommandParams.put(
        "credentials", networkCommissioningaddWiFiNetworkcredentialsCommandParameterInfo);

    CommandParameterInfo networkCommissioningaddWiFiNetworkbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    networkCommissioningaddWiFiNetworkCommandParams.put(
        "breadcrumb", networkCommissioningaddWiFiNetworkbreadcrumbCommandParameterInfo);

    CommandParameterInfo networkCommissioningaddWiFiNetworktimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    networkCommissioningaddWiFiNetworkCommandParams.put(
        "timeoutMs", networkCommissioningaddWiFiNetworktimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo networkCommissioningaddWiFiNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .addWiFiNetwork(
                      (ChipClusters.NetworkCommissioningCluster.AddWiFiNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("ssid"),
                      (byte[]) commandArguments.get("credentials"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedAddWiFiNetworkResponseCallback(),
            networkCommissioningaddWiFiNetworkCommandParams);
    networkCommissioningClusterCommandInfoMap.put(
        "addWiFiNetwork", networkCommissioningaddWiFiNetworkCommandInfo);
    Map<String, CommandParameterInfo> networkCommissioningdisableNetworkCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo networkCommissioningdisableNetworknetworkIDCommandParameterInfo =
        new CommandParameterInfo("networkID", byte[].class);
    networkCommissioningdisableNetworkCommandParams.put(
        "networkID", networkCommissioningdisableNetworknetworkIDCommandParameterInfo);

    CommandParameterInfo networkCommissioningdisableNetworkbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    networkCommissioningdisableNetworkCommandParams.put(
        "breadcrumb", networkCommissioningdisableNetworkbreadcrumbCommandParameterInfo);

    CommandParameterInfo networkCommissioningdisableNetworktimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    networkCommissioningdisableNetworkCommandParams.put(
        "timeoutMs", networkCommissioningdisableNetworktimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo networkCommissioningdisableNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .disableNetwork(
                      (ChipClusters.NetworkCommissioningCluster.DisableNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("networkID"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedDisableNetworkResponseCallback(),
            networkCommissioningdisableNetworkCommandParams);
    networkCommissioningClusterCommandInfoMap.put(
        "disableNetwork", networkCommissioningdisableNetworkCommandInfo);
    Map<String, CommandParameterInfo> networkCommissioningenableNetworkCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo networkCommissioningenableNetworknetworkIDCommandParameterInfo =
        new CommandParameterInfo("networkID", byte[].class);
    networkCommissioningenableNetworkCommandParams.put(
        "networkID", networkCommissioningenableNetworknetworkIDCommandParameterInfo);

    CommandParameterInfo networkCommissioningenableNetworkbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    networkCommissioningenableNetworkCommandParams.put(
        "breadcrumb", networkCommissioningenableNetworkbreadcrumbCommandParameterInfo);

    CommandParameterInfo networkCommissioningenableNetworktimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    networkCommissioningenableNetworkCommandParams.put(
        "timeoutMs", networkCommissioningenableNetworktimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo networkCommissioningenableNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .enableNetwork(
                      (ChipClusters.NetworkCommissioningCluster.EnableNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("networkID"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedEnableNetworkResponseCallback(),
            networkCommissioningenableNetworkCommandParams);
    networkCommissioningClusterCommandInfoMap.put(
        "enableNetwork", networkCommissioningenableNetworkCommandInfo);
    Map<String, CommandParameterInfo> networkCommissioningremoveNetworkCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo networkCommissioningremoveNetworknetworkIDCommandParameterInfo =
        new CommandParameterInfo("networkID", byte[].class);
    networkCommissioningremoveNetworkCommandParams.put(
        "networkID", networkCommissioningremoveNetworknetworkIDCommandParameterInfo);

    CommandParameterInfo networkCommissioningremoveNetworkbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    networkCommissioningremoveNetworkCommandParams.put(
        "breadcrumb", networkCommissioningremoveNetworkbreadcrumbCommandParameterInfo);

    CommandParameterInfo networkCommissioningremoveNetworktimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    networkCommissioningremoveNetworkCommandParams.put(
        "timeoutMs", networkCommissioningremoveNetworktimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo networkCommissioningremoveNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .removeNetwork(
                      (ChipClusters.NetworkCommissioningCluster.RemoveNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("networkID"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedRemoveNetworkResponseCallback(),
            networkCommissioningremoveNetworkCommandParams);
    networkCommissioningClusterCommandInfoMap.put(
        "removeNetwork", networkCommissioningremoveNetworkCommandInfo);
    Map<String, CommandParameterInfo> networkCommissioningscanNetworksCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo networkCommissioningscanNetworksssidCommandParameterInfo =
        new CommandParameterInfo("ssid", byte[].class);
    networkCommissioningscanNetworksCommandParams.put(
        "ssid", networkCommissioningscanNetworksssidCommandParameterInfo);

    CommandParameterInfo networkCommissioningscanNetworksbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    networkCommissioningscanNetworksCommandParams.put(
        "breadcrumb", networkCommissioningscanNetworksbreadcrumbCommandParameterInfo);

    CommandParameterInfo networkCommissioningscanNetworkstimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    networkCommissioningscanNetworksCommandParams.put(
        "timeoutMs", networkCommissioningscanNetworkstimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo networkCommissioningscanNetworksCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .scanNetworks(
                      (ChipClusters.NetworkCommissioningCluster.ScanNetworksResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("ssid"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedScanNetworksResponseCallback(),
            networkCommissioningscanNetworksCommandParams);
    networkCommissioningClusterCommandInfoMap.put(
        "scanNetworks", networkCommissioningscanNetworksCommandInfo);
    Map<String, CommandParameterInfo> networkCommissioningupdateThreadNetworkCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        networkCommissioningupdateThreadNetworkoperationalDatasetCommandParameterInfo =
            new CommandParameterInfo("operationalDataset", byte[].class);
    networkCommissioningupdateThreadNetworkCommandParams.put(
        "operationalDataset",
        networkCommissioningupdateThreadNetworkoperationalDatasetCommandParameterInfo);

    CommandParameterInfo networkCommissioningupdateThreadNetworkbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    networkCommissioningupdateThreadNetworkCommandParams.put(
        "breadcrumb", networkCommissioningupdateThreadNetworkbreadcrumbCommandParameterInfo);

    CommandParameterInfo networkCommissioningupdateThreadNetworktimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    networkCommissioningupdateThreadNetworkCommandParams.put(
        "timeoutMs", networkCommissioningupdateThreadNetworktimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo networkCommissioningupdateThreadNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .updateThreadNetwork(
                      (ChipClusters.NetworkCommissioningCluster.UpdateThreadNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("operationalDataset"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedUpdateThreadNetworkResponseCallback(),
            networkCommissioningupdateThreadNetworkCommandParams);
    networkCommissioningClusterCommandInfoMap.put(
        "updateThreadNetwork", networkCommissioningupdateThreadNetworkCommandInfo);
    Map<String, CommandParameterInfo> networkCommissioningupdateWiFiNetworkCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo networkCommissioningupdateWiFiNetworkssidCommandParameterInfo =
        new CommandParameterInfo("ssid", byte[].class);
    networkCommissioningupdateWiFiNetworkCommandParams.put(
        "ssid", networkCommissioningupdateWiFiNetworkssidCommandParameterInfo);

    CommandParameterInfo networkCommissioningupdateWiFiNetworkcredentialsCommandParameterInfo =
        new CommandParameterInfo("credentials", byte[].class);
    networkCommissioningupdateWiFiNetworkCommandParams.put(
        "credentials", networkCommissioningupdateWiFiNetworkcredentialsCommandParameterInfo);

    CommandParameterInfo networkCommissioningupdateWiFiNetworkbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    networkCommissioningupdateWiFiNetworkCommandParams.put(
        "breadcrumb", networkCommissioningupdateWiFiNetworkbreadcrumbCommandParameterInfo);

    CommandParameterInfo networkCommissioningupdateWiFiNetworktimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    networkCommissioningupdateWiFiNetworkCommandParams.put(
        "timeoutMs", networkCommissioningupdateWiFiNetworktimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo networkCommissioningupdateWiFiNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .updateWiFiNetwork(
                      (ChipClusters.NetworkCommissioningCluster.UpdateWiFiNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("ssid"),
                      (byte[]) commandArguments.get("credentials"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedUpdateWiFiNetworkResponseCallback(),
            networkCommissioningupdateWiFiNetworkCommandParams);
    networkCommissioningClusterCommandInfoMap.put(
        "updateWiFiNetwork", networkCommissioningupdateWiFiNetworkCommandInfo);
    // Populate cluster
    ClusterInfo networkCommissioningClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.NetworkCommissioningCluster(ptr, endpointId),
            networkCommissioningClusterCommandInfoMap);
    clusterMap.put("networkCommissioning", networkCommissioningClusterInfo);
    Map<String, CommandInfo> otaSoftwareUpdateProviderClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> otaSoftwareUpdateProviderapplyUpdateRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        otaSoftwareUpdateProviderapplyUpdateRequestupdateTokenCommandParameterInfo =
            new CommandParameterInfo("updateToken", byte[].class);
    otaSoftwareUpdateProviderapplyUpdateRequestCommandParams.put(
        "updateToken", otaSoftwareUpdateProviderapplyUpdateRequestupdateTokenCommandParameterInfo);

    CommandParameterInfo otaSoftwareUpdateProviderapplyUpdateRequestnewVersionCommandParameterInfo =
        new CommandParameterInfo("newVersion", long.class);
    otaSoftwareUpdateProviderapplyUpdateRequestCommandParams.put(
        "newVersion", otaSoftwareUpdateProviderapplyUpdateRequestnewVersionCommandParameterInfo);

    // Populate commands
    CommandInfo otaSoftwareUpdateProviderapplyUpdateRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster)
                  .applyUpdateRequest(
                      (ChipClusters.OtaSoftwareUpdateProviderCluster.ApplyUpdateResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("updateToken"),
                      (Long) commandArguments.get("newVersion"));
            },
            () -> new DelegatedApplyUpdateResponseCallback(),
            otaSoftwareUpdateProviderapplyUpdateRequestCommandParams);
    otaSoftwareUpdateProviderClusterCommandInfoMap.put(
        "applyUpdateRequest", otaSoftwareUpdateProviderapplyUpdateRequestCommandInfo);
    Map<String, CommandParameterInfo> otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        otaSoftwareUpdateProvidernotifyUpdateAppliedupdateTokenCommandParameterInfo =
            new CommandParameterInfo("updateToken", byte[].class);
    otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParams.put(
        "updateToken", otaSoftwareUpdateProvidernotifyUpdateAppliedupdateTokenCommandParameterInfo);

    CommandParameterInfo
        otaSoftwareUpdateProvidernotifyUpdateAppliedsoftwareVersionCommandParameterInfo =
            new CommandParameterInfo("softwareVersion", long.class);
    otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParams.put(
        "softwareVersion",
        otaSoftwareUpdateProvidernotifyUpdateAppliedsoftwareVersionCommandParameterInfo);

    // Populate commands
    CommandInfo otaSoftwareUpdateProvidernotifyUpdateAppliedCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster)
                  .notifyUpdateApplied(
                      (DefaultClusterCallback) callback,
                      (byte[]) commandArguments.get("updateToken"),
                      (Long) commandArguments.get("softwareVersion"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParams);
    otaSoftwareUpdateProviderClusterCommandInfoMap.put(
        "notifyUpdateApplied", otaSoftwareUpdateProvidernotifyUpdateAppliedCommandInfo);
    Map<String, CommandParameterInfo> otaSoftwareUpdateProviderqueryImageCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo otaSoftwareUpdateProviderqueryImagevendorIdCommandParameterInfo =
        new CommandParameterInfo("vendorId", int.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "vendorId", otaSoftwareUpdateProviderqueryImagevendorIdCommandParameterInfo);

    CommandParameterInfo otaSoftwareUpdateProviderqueryImageproductIdCommandParameterInfo =
        new CommandParameterInfo("productId", int.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "productId", otaSoftwareUpdateProviderqueryImageproductIdCommandParameterInfo);

    CommandParameterInfo otaSoftwareUpdateProviderqueryImagesoftwareVersionCommandParameterInfo =
        new CommandParameterInfo("softwareVersion", long.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "softwareVersion", otaSoftwareUpdateProviderqueryImagesoftwareVersionCommandParameterInfo);

    CommandParameterInfo otaSoftwareUpdateProviderqueryImageprotocolsSupportedCommandParameterInfo =
        new CommandParameterInfo("protocolsSupported", int.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "protocolsSupported",
        otaSoftwareUpdateProviderqueryImageprotocolsSupportedCommandParameterInfo);

    CommandParameterInfo otaSoftwareUpdateProviderqueryImagehardwareVersionCommandParameterInfo =
        new CommandParameterInfo("hardwareVersion", int.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "hardwareVersion", otaSoftwareUpdateProviderqueryImagehardwareVersionCommandParameterInfo);

    CommandParameterInfo otaSoftwareUpdateProviderqueryImagelocationCommandParameterInfo =
        new CommandParameterInfo("location", String.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "location", otaSoftwareUpdateProviderqueryImagelocationCommandParameterInfo);

    CommandParameterInfo
        otaSoftwareUpdateProviderqueryImagerequestorCanConsentCommandParameterInfo =
            new CommandParameterInfo("requestorCanConsent", boolean.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "requestorCanConsent",
        otaSoftwareUpdateProviderqueryImagerequestorCanConsentCommandParameterInfo);

    CommandParameterInfo
        otaSoftwareUpdateProviderqueryImagemetadataForProviderCommandParameterInfo =
            new CommandParameterInfo("metadataForProvider", byte[].class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "metadataForProvider",
        otaSoftwareUpdateProviderqueryImagemetadataForProviderCommandParameterInfo);

    // Populate commands
    CommandInfo otaSoftwareUpdateProviderqueryImageCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster)
                  .queryImage(
                      (ChipClusters.OtaSoftwareUpdateProviderCluster.QueryImageResponseCallback)
                          callback,
                      (Integer) commandArguments.get("vendorId"),
                      (Integer) commandArguments.get("productId"),
                      (Long) commandArguments.get("softwareVersion"),
                      (Integer) commandArguments.get("protocolsSupported"),
                      (Integer) commandArguments.get("hardwareVersion"),
                      (String) commandArguments.get("location"),
                      (Boolean) commandArguments.get("requestorCanConsent"),
                      (byte[]) commandArguments.get("metadataForProvider"));
            },
            () -> new DelegatedQueryImageResponseCallback(),
            otaSoftwareUpdateProviderqueryImageCommandParams);
    otaSoftwareUpdateProviderClusterCommandInfoMap.put(
        "queryImage", otaSoftwareUpdateProviderqueryImageCommandInfo);
    // Populate cluster
    ClusterInfo otaSoftwareUpdateProviderClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.OtaSoftwareUpdateProviderCluster(ptr, endpointId),
            otaSoftwareUpdateProviderClusterCommandInfoMap);
    clusterMap.put("otaSoftwareUpdateProvider", otaSoftwareUpdateProviderClusterInfo);
    Map<String, CommandInfo> otaSoftwareUpdateRequestorClusterCommandInfoMap =
        new LinkedHashMap<>();
    Map<String, CommandParameterInfo> otaSoftwareUpdateRequestorannounceOtaProviderCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        otaSoftwareUpdateRequestorannounceOtaProviderproviderLocationCommandParameterInfo =
            new CommandParameterInfo("providerLocation", long.class);
    otaSoftwareUpdateRequestorannounceOtaProviderCommandParams.put(
        "providerLocation",
        otaSoftwareUpdateRequestorannounceOtaProviderproviderLocationCommandParameterInfo);

    CommandParameterInfo otaSoftwareUpdateRequestorannounceOtaProvidervendorIdCommandParameterInfo =
        new CommandParameterInfo("vendorId", int.class);
    otaSoftwareUpdateRequestorannounceOtaProviderCommandParams.put(
        "vendorId", otaSoftwareUpdateRequestorannounceOtaProvidervendorIdCommandParameterInfo);

    CommandParameterInfo
        otaSoftwareUpdateRequestorannounceOtaProviderannouncementReasonCommandParameterInfo =
            new CommandParameterInfo("announcementReason", int.class);
    otaSoftwareUpdateRequestorannounceOtaProviderCommandParams.put(
        "announcementReason",
        otaSoftwareUpdateRequestorannounceOtaProviderannouncementReasonCommandParameterInfo);

    CommandParameterInfo
        otaSoftwareUpdateRequestorannounceOtaProvidermetadataForNodeCommandParameterInfo =
            new CommandParameterInfo("metadataForNode", byte[].class);
    otaSoftwareUpdateRequestorannounceOtaProviderCommandParams.put(
        "metadataForNode",
        otaSoftwareUpdateRequestorannounceOtaProvidermetadataForNodeCommandParameterInfo);

    // Populate commands
    CommandInfo otaSoftwareUpdateRequestorannounceOtaProviderCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OtaSoftwareUpdateRequestorCluster) cluster)
                  .announceOtaProvider(
                      (DefaultClusterCallback) callback,
                      (Long) commandArguments.get("providerLocation"),
                      (Integer) commandArguments.get("vendorId"),
                      (Integer) commandArguments.get("announcementReason"),
                      (byte[]) commandArguments.get("metadataForNode"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            otaSoftwareUpdateRequestorannounceOtaProviderCommandParams);
    otaSoftwareUpdateRequestorClusterCommandInfoMap.put(
        "announceOtaProvider", otaSoftwareUpdateRequestorannounceOtaProviderCommandInfo);
    // Populate cluster
    ClusterInfo otaSoftwareUpdateRequestorClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.OtaSoftwareUpdateRequestorCluster(ptr, endpointId),
            otaSoftwareUpdateRequestorClusterCommandInfoMap);
    clusterMap.put("otaSoftwareUpdateRequestor", otaSoftwareUpdateRequestorClusterInfo);
    Map<String, CommandInfo> occupancySensingClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo occupancySensingClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.OccupancySensingCluster(ptr, endpointId),
            occupancySensingClusterCommandInfoMap);
    clusterMap.put("occupancySensing", occupancySensingClusterInfo);
    Map<String, CommandInfo> onOffClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> onOffoffCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo onOffoffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster).off((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOffoffCommandParams);
    onOffClusterCommandInfoMap.put("off", onOffoffCommandInfo);
    Map<String, CommandParameterInfo> onOffoffWithEffectCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo onOffoffWithEffecteffectIdCommandParameterInfo =
        new CommandParameterInfo("effectId", int.class);
    onOffoffWithEffectCommandParams.put("effectId", onOffoffWithEffecteffectIdCommandParameterInfo);

    CommandParameterInfo onOffoffWithEffecteffectVariantCommandParameterInfo =
        new CommandParameterInfo("effectVariant", int.class);
    onOffoffWithEffectCommandParams.put(
        "effectVariant", onOffoffWithEffecteffectVariantCommandParameterInfo);

    // Populate commands
    CommandInfo onOffoffWithEffectCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .offWithEffect(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("effectId"),
                      (Integer) commandArguments.get("effectVariant"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOffoffWithEffectCommandParams);
    onOffClusterCommandInfoMap.put("offWithEffect", onOffoffWithEffectCommandInfo);
    Map<String, CommandParameterInfo> onOffonCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo onOffonCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster).on((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOffonCommandParams);
    onOffClusterCommandInfoMap.put("on", onOffonCommandInfo);
    Map<String, CommandParameterInfo> onOffonWithRecallGlobalSceneCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo onOffonWithRecallGlobalSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .onWithRecallGlobalScene((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOffonWithRecallGlobalSceneCommandParams);
    onOffClusterCommandInfoMap.put(
        "onWithRecallGlobalScene", onOffonWithRecallGlobalSceneCommandInfo);
    Map<String, CommandParameterInfo> onOffonWithTimedOffCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo onOffonWithTimedOffonOffControlCommandParameterInfo =
        new CommandParameterInfo("onOffControl", int.class);
    onOffonWithTimedOffCommandParams.put(
        "onOffControl", onOffonWithTimedOffonOffControlCommandParameterInfo);

    CommandParameterInfo onOffonWithTimedOffonTimeCommandParameterInfo =
        new CommandParameterInfo("onTime", int.class);
    onOffonWithTimedOffCommandParams.put("onTime", onOffonWithTimedOffonTimeCommandParameterInfo);

    CommandParameterInfo onOffonWithTimedOffoffWaitTimeCommandParameterInfo =
        new CommandParameterInfo("offWaitTime", int.class);
    onOffonWithTimedOffCommandParams.put(
        "offWaitTime", onOffonWithTimedOffoffWaitTimeCommandParameterInfo);

    // Populate commands
    CommandInfo onOffonWithTimedOffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .onWithTimedOff(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("onOffControl"),
                      (Integer) commandArguments.get("onTime"),
                      (Integer) commandArguments.get("offWaitTime"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOffonWithTimedOffCommandParams);
    onOffClusterCommandInfoMap.put("onWithTimedOff", onOffonWithTimedOffCommandInfo);
    Map<String, CommandParameterInfo> onOfftoggleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo onOfftoggleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster).toggle((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOfftoggleCommandParams);
    onOffClusterCommandInfoMap.put("toggle", onOfftoggleCommandInfo);
    // Populate cluster
    ClusterInfo onOffClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.OnOffCluster(ptr, endpointId),
            onOffClusterCommandInfoMap);
    clusterMap.put("onOff", onOffClusterInfo);
    Map<String, CommandInfo> onOffSwitchConfigurationClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo onOffSwitchConfigurationClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.OnOffSwitchConfigurationCluster(ptr, endpointId),
            onOffSwitchConfigurationClusterCommandInfoMap);
    clusterMap.put("onOffSwitchConfiguration", onOffSwitchConfigurationClusterInfo);
    Map<String, CommandInfo> operationalCredentialsClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> operationalCredentialsaddNOCCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo operationalCredentialsaddNOCNOCValueCommandParameterInfo =
        new CommandParameterInfo("NOCValue", byte[].class);
    operationalCredentialsaddNOCCommandParams.put(
        "NOCValue", operationalCredentialsaddNOCNOCValueCommandParameterInfo);

    CommandParameterInfo operationalCredentialsaddNOCICACValueCommandParameterInfo =
        new CommandParameterInfo("ICACValue", byte[].class);
    operationalCredentialsaddNOCCommandParams.put(
        "ICACValue", operationalCredentialsaddNOCICACValueCommandParameterInfo);

    CommandParameterInfo operationalCredentialsaddNOCIPKValueCommandParameterInfo =
        new CommandParameterInfo("IPKValue", byte[].class);
    operationalCredentialsaddNOCCommandParams.put(
        "IPKValue", operationalCredentialsaddNOCIPKValueCommandParameterInfo);

    CommandParameterInfo operationalCredentialsaddNOCcaseAdminNodeCommandParameterInfo =
        new CommandParameterInfo("caseAdminNode", long.class);
    operationalCredentialsaddNOCCommandParams.put(
        "caseAdminNode", operationalCredentialsaddNOCcaseAdminNodeCommandParameterInfo);

    CommandParameterInfo operationalCredentialsaddNOCadminVendorIdCommandParameterInfo =
        new CommandParameterInfo("adminVendorId", int.class);
    operationalCredentialsaddNOCCommandParams.put(
        "adminVendorId", operationalCredentialsaddNOCadminVendorIdCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialsaddNOCCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .addNOC(
                      (ChipClusters.OperationalCredentialsCluster.NOCResponseCallback) callback,
                      (byte[]) commandArguments.get("NOCValue"),
                      (byte[]) commandArguments.get("ICACValue"),
                      (byte[]) commandArguments.get("IPKValue"),
                      (Long) commandArguments.get("caseAdminNode"),
                      (Integer) commandArguments.get("adminVendorId"));
            },
            () -> new DelegatedNOCResponseCallback(),
            operationalCredentialsaddNOCCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "addNOC", operationalCredentialsaddNOCCommandInfo);
    Map<String, CommandParameterInfo> operationalCredentialsaddTrustedRootCertificateCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        operationalCredentialsaddTrustedRootCertificaterootCertificateCommandParameterInfo =
            new CommandParameterInfo("rootCertificate", byte[].class);
    operationalCredentialsaddTrustedRootCertificateCommandParams.put(
        "rootCertificate",
        operationalCredentialsaddTrustedRootCertificaterootCertificateCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialsaddTrustedRootCertificateCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .addTrustedRootCertificate(
                      (DefaultClusterCallback) callback,
                      (byte[]) commandArguments.get("rootCertificate"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            operationalCredentialsaddTrustedRootCertificateCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "addTrustedRootCertificate", operationalCredentialsaddTrustedRootCertificateCommandInfo);
    Map<String, CommandParameterInfo> operationalCredentialsattestationRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        operationalCredentialsattestationRequestattestationNonceCommandParameterInfo =
            new CommandParameterInfo("attestationNonce", byte[].class);
    operationalCredentialsattestationRequestCommandParams.put(
        "attestationNonce",
        operationalCredentialsattestationRequestattestationNonceCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialsattestationRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .attestationRequest(
                      (ChipClusters.OperationalCredentialsCluster.AttestationResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("attestationNonce"));
            },
            () -> new DelegatedAttestationResponseCallback(),
            operationalCredentialsattestationRequestCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "attestationRequest", operationalCredentialsattestationRequestCommandInfo);
    Map<String, CommandParameterInfo> operationalCredentialscertificateChainRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        operationalCredentialscertificateChainRequestcertificateTypeCommandParameterInfo =
            new CommandParameterInfo("certificateType", int.class);
    operationalCredentialscertificateChainRequestCommandParams.put(
        "certificateType",
        operationalCredentialscertificateChainRequestcertificateTypeCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialscertificateChainRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .certificateChainRequest(
                      (ChipClusters.OperationalCredentialsCluster.CertificateChainResponseCallback)
                          callback,
                      (Integer) commandArguments.get("certificateType"));
            },
            () -> new DelegatedCertificateChainResponseCallback(),
            operationalCredentialscertificateChainRequestCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "certificateChainRequest", operationalCredentialscertificateChainRequestCommandInfo);
    Map<String, CommandParameterInfo> operationalCredentialsopCSRRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo operationalCredentialsopCSRRequestCSRNonceCommandParameterInfo =
        new CommandParameterInfo("CSRNonce", byte[].class);
    operationalCredentialsopCSRRequestCommandParams.put(
        "CSRNonce", operationalCredentialsopCSRRequestCSRNonceCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialsopCSRRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .opCSRRequest(
                      (ChipClusters.OperationalCredentialsCluster.OpCSRResponseCallback) callback,
                      (byte[]) commandArguments.get("CSRNonce"));
            },
            () -> new DelegatedOpCSRResponseCallback(),
            operationalCredentialsopCSRRequestCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "opCSRRequest", operationalCredentialsopCSRRequestCommandInfo);
    Map<String, CommandParameterInfo> operationalCredentialsremoveFabricCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo operationalCredentialsremoveFabricfabricIndexCommandParameterInfo =
        new CommandParameterInfo("fabricIndex", int.class);
    operationalCredentialsremoveFabricCommandParams.put(
        "fabricIndex", operationalCredentialsremoveFabricfabricIndexCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialsremoveFabricCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .removeFabric(
                      (ChipClusters.OperationalCredentialsCluster.NOCResponseCallback) callback,
                      (Integer) commandArguments.get("fabricIndex"));
            },
            () -> new DelegatedNOCResponseCallback(),
            operationalCredentialsremoveFabricCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "removeFabric", operationalCredentialsremoveFabricCommandInfo);
    Map<String, CommandParameterInfo>
        operationalCredentialsremoveTrustedRootCertificateCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        operationalCredentialsremoveTrustedRootCertificatetrustedRootIdentifierCommandParameterInfo =
            new CommandParameterInfo("trustedRootIdentifier", byte[].class);
    operationalCredentialsremoveTrustedRootCertificateCommandParams.put(
        "trustedRootIdentifier",
        operationalCredentialsremoveTrustedRootCertificatetrustedRootIdentifierCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialsremoveTrustedRootCertificateCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .removeTrustedRootCertificate(
                      (DefaultClusterCallback) callback,
                      (byte[]) commandArguments.get("trustedRootIdentifier"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            operationalCredentialsremoveTrustedRootCertificateCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "removeTrustedRootCertificate",
        operationalCredentialsremoveTrustedRootCertificateCommandInfo);
    Map<String, CommandParameterInfo> operationalCredentialsupdateFabricLabelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo operationalCredentialsupdateFabricLabellabelCommandParameterInfo =
        new CommandParameterInfo("label", String.class);
    operationalCredentialsupdateFabricLabelCommandParams.put(
        "label", operationalCredentialsupdateFabricLabellabelCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialsupdateFabricLabelCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .updateFabricLabel(
                      (ChipClusters.OperationalCredentialsCluster.NOCResponseCallback) callback,
                      (String) commandArguments.get("label"));
            },
            () -> new DelegatedNOCResponseCallback(),
            operationalCredentialsupdateFabricLabelCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "updateFabricLabel", operationalCredentialsupdateFabricLabelCommandInfo);
    Map<String, CommandParameterInfo> operationalCredentialsupdateNOCCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo operationalCredentialsupdateNOCNOCValueCommandParameterInfo =
        new CommandParameterInfo("NOCValue", byte[].class);
    operationalCredentialsupdateNOCCommandParams.put(
        "NOCValue", operationalCredentialsupdateNOCNOCValueCommandParameterInfo);

    CommandParameterInfo operationalCredentialsupdateNOCICACValueCommandParameterInfo =
        new CommandParameterInfo("ICACValue", byte[].class);
    operationalCredentialsupdateNOCCommandParams.put(
        "ICACValue", operationalCredentialsupdateNOCICACValueCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialsupdateNOCCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .updateNOC(
                      (ChipClusters.OperationalCredentialsCluster.NOCResponseCallback) callback,
                      (byte[]) commandArguments.get("NOCValue"),
                      (byte[]) commandArguments.get("ICACValue"));
            },
            () -> new DelegatedNOCResponseCallback(),
            operationalCredentialsupdateNOCCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "updateNOC", operationalCredentialsupdateNOCCommandInfo);
    // Populate cluster
    ClusterInfo operationalCredentialsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.OperationalCredentialsCluster(ptr, endpointId),
            operationalCredentialsClusterCommandInfoMap);
    clusterMap.put("operationalCredentials", operationalCredentialsClusterInfo);
    Map<String, CommandInfo> powerSourceClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo powerSourceClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.PowerSourceCluster(ptr, endpointId),
            powerSourceClusterCommandInfoMap);
    clusterMap.put("powerSource", powerSourceClusterInfo);
    Map<String, CommandInfo> pressureMeasurementClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo pressureMeasurementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.PressureMeasurementCluster(ptr, endpointId),
            pressureMeasurementClusterCommandInfoMap);
    clusterMap.put("pressureMeasurement", pressureMeasurementClusterInfo);
    Map<String, CommandInfo> pumpConfigurationAndControlClusterCommandInfoMap =
        new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo pumpConfigurationAndControlClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.PumpConfigurationAndControlCluster(ptr, endpointId),
            pumpConfigurationAndControlClusterCommandInfoMap);
    clusterMap.put("pumpConfigurationAndControl", pumpConfigurationAndControlClusterInfo);
    Map<String, CommandInfo> relativeHumidityMeasurementClusterCommandInfoMap =
        new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo relativeHumidityMeasurementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.RelativeHumidityMeasurementCluster(ptr, endpointId),
            relativeHumidityMeasurementClusterCommandInfoMap);
    clusterMap.put("relativeHumidityMeasurement", relativeHumidityMeasurementClusterInfo);
    Map<String, CommandInfo> scenesClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> scenesaddSceneCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo scenesaddScenegroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    scenesaddSceneCommandParams.put("groupId", scenesaddScenegroupIdCommandParameterInfo);

    CommandParameterInfo scenesaddScenesceneIdCommandParameterInfo =
        new CommandParameterInfo("sceneId", int.class);
    scenesaddSceneCommandParams.put("sceneId", scenesaddScenesceneIdCommandParameterInfo);

    CommandParameterInfo scenesaddScenetransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    scenesaddSceneCommandParams.put(
        "transitionTime", scenesaddScenetransitionTimeCommandParameterInfo);

    CommandParameterInfo scenesaddScenesceneNameCommandParameterInfo =
        new CommandParameterInfo("sceneName", String.class);
    scenesaddSceneCommandParams.put("sceneName", scenesaddScenesceneNameCommandParameterInfo);

    CommandParameterInfo scenesaddSceneclusterIdCommandParameterInfo =
        new CommandParameterInfo("clusterId", long.class);
    scenesaddSceneCommandParams.put("clusterId", scenesaddSceneclusterIdCommandParameterInfo);

    CommandParameterInfo scenesaddScenelengthCommandParameterInfo =
        new CommandParameterInfo("length", int.class);
    scenesaddSceneCommandParams.put("length", scenesaddScenelengthCommandParameterInfo);

    CommandParameterInfo scenesaddScenevalueCommandParameterInfo =
        new CommandParameterInfo("value", int.class);
    scenesaddSceneCommandParams.put("value", scenesaddScenevalueCommandParameterInfo);

    // Populate commands
    CommandInfo scenesaddSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .addScene(
                      (ChipClusters.ScenesCluster.AddSceneResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("sceneId"),
                      (Integer) commandArguments.get("transitionTime"),
                      (String) commandArguments.get("sceneName"),
                      (Long) commandArguments.get("clusterId"),
                      (Integer) commandArguments.get("length"),
                      (Integer) commandArguments.get("value"));
            },
            () -> new DelegatedAddSceneResponseCallback(),
            scenesaddSceneCommandParams);
    scenesClusterCommandInfoMap.put("addScene", scenesaddSceneCommandInfo);
    Map<String, CommandParameterInfo> scenesgetSceneMembershipCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo scenesgetSceneMembershipgroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    scenesgetSceneMembershipCommandParams.put(
        "groupId", scenesgetSceneMembershipgroupIdCommandParameterInfo);

    // Populate commands
    CommandInfo scenesgetSceneMembershipCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .getSceneMembership(
                      (ChipClusters.ScenesCluster.GetSceneMembershipResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"));
            },
            () -> new DelegatedGetSceneMembershipResponseCallback(),
            scenesgetSceneMembershipCommandParams);
    scenesClusterCommandInfoMap.put("getSceneMembership", scenesgetSceneMembershipCommandInfo);
    Map<String, CommandParameterInfo> scenesrecallSceneCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo scenesrecallScenegroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    scenesrecallSceneCommandParams.put("groupId", scenesrecallScenegroupIdCommandParameterInfo);

    CommandParameterInfo scenesrecallScenesceneIdCommandParameterInfo =
        new CommandParameterInfo("sceneId", int.class);
    scenesrecallSceneCommandParams.put("sceneId", scenesrecallScenesceneIdCommandParameterInfo);

    CommandParameterInfo scenesrecallScenetransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    scenesrecallSceneCommandParams.put(
        "transitionTime", scenesrecallScenetransitionTimeCommandParameterInfo);

    // Populate commands
    CommandInfo scenesrecallSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .recallScene(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("sceneId"),
                      (Integer) commandArguments.get("transitionTime"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            scenesrecallSceneCommandParams);
    scenesClusterCommandInfoMap.put("recallScene", scenesrecallSceneCommandInfo);
    Map<String, CommandParameterInfo> scenesremoveAllScenesCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo scenesremoveAllScenesgroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    scenesremoveAllScenesCommandParams.put(
        "groupId", scenesremoveAllScenesgroupIdCommandParameterInfo);

    // Populate commands
    CommandInfo scenesremoveAllScenesCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .removeAllScenes(
                      (ChipClusters.ScenesCluster.RemoveAllScenesResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"));
            },
            () -> new DelegatedRemoveAllScenesResponseCallback(),
            scenesremoveAllScenesCommandParams);
    scenesClusterCommandInfoMap.put("removeAllScenes", scenesremoveAllScenesCommandInfo);
    Map<String, CommandParameterInfo> scenesremoveSceneCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo scenesremoveScenegroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    scenesremoveSceneCommandParams.put("groupId", scenesremoveScenegroupIdCommandParameterInfo);

    CommandParameterInfo scenesremoveScenesceneIdCommandParameterInfo =
        new CommandParameterInfo("sceneId", int.class);
    scenesremoveSceneCommandParams.put("sceneId", scenesremoveScenesceneIdCommandParameterInfo);

    // Populate commands
    CommandInfo scenesremoveSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .removeScene(
                      (ChipClusters.ScenesCluster.RemoveSceneResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("sceneId"));
            },
            () -> new DelegatedRemoveSceneResponseCallback(),
            scenesremoveSceneCommandParams);
    scenesClusterCommandInfoMap.put("removeScene", scenesremoveSceneCommandInfo);
    Map<String, CommandParameterInfo> scenesstoreSceneCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo scenesstoreScenegroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    scenesstoreSceneCommandParams.put("groupId", scenesstoreScenegroupIdCommandParameterInfo);

    CommandParameterInfo scenesstoreScenesceneIdCommandParameterInfo =
        new CommandParameterInfo("sceneId", int.class);
    scenesstoreSceneCommandParams.put("sceneId", scenesstoreScenesceneIdCommandParameterInfo);

    // Populate commands
    CommandInfo scenesstoreSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .storeScene(
                      (ChipClusters.ScenesCluster.StoreSceneResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("sceneId"));
            },
            () -> new DelegatedStoreSceneResponseCallback(),
            scenesstoreSceneCommandParams);
    scenesClusterCommandInfoMap.put("storeScene", scenesstoreSceneCommandInfo);
    Map<String, CommandParameterInfo> scenesviewSceneCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo scenesviewScenegroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    scenesviewSceneCommandParams.put("groupId", scenesviewScenegroupIdCommandParameterInfo);

    CommandParameterInfo scenesviewScenesceneIdCommandParameterInfo =
        new CommandParameterInfo("sceneId", int.class);
    scenesviewSceneCommandParams.put("sceneId", scenesviewScenesceneIdCommandParameterInfo);

    // Populate commands
    CommandInfo scenesviewSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .viewScene(
                      (ChipClusters.ScenesCluster.ViewSceneResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("sceneId"));
            },
            () -> new DelegatedViewSceneResponseCallback(),
            scenesviewSceneCommandParams);
    scenesClusterCommandInfoMap.put("viewScene", scenesviewSceneCommandInfo);
    // Populate cluster
    ClusterInfo scenesClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ScenesCluster(ptr, endpointId),
            scenesClusterCommandInfoMap);
    clusterMap.put("scenes", scenesClusterInfo);
    Map<String, CommandInfo> softwareDiagnosticsClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> softwareDiagnosticsresetWatermarksCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo softwareDiagnosticsresetWatermarksCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.SoftwareDiagnosticsCluster) cluster)
                  .resetWatermarks((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            softwareDiagnosticsresetWatermarksCommandParams);
    softwareDiagnosticsClusterCommandInfoMap.put(
        "resetWatermarks", softwareDiagnosticsresetWatermarksCommandInfo);
    // Populate cluster
    ClusterInfo softwareDiagnosticsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.SoftwareDiagnosticsCluster(ptr, endpointId),
            softwareDiagnosticsClusterCommandInfoMap);
    clusterMap.put("softwareDiagnostics", softwareDiagnosticsClusterInfo);
    Map<String, CommandInfo> switchClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo switchClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.SwitchCluster(ptr, endpointId),
            switchClusterCommandInfoMap);
    clusterMap.put("switch", switchClusterInfo);
    Map<String, CommandInfo> tvChannelClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> tvChannelchangeChannelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo tvChannelchangeChannelmatchCommandParameterInfo =
        new CommandParameterInfo("match", String.class);
    tvChannelchangeChannelCommandParams.put(
        "match", tvChannelchangeChannelmatchCommandParameterInfo);

    // Populate commands
    CommandInfo tvChannelchangeChannelCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TvChannelCluster) cluster)
                  .changeChannel(
                      (ChipClusters.TvChannelCluster.ChangeChannelResponseCallback) callback,
                      (String) commandArguments.get("match"));
            },
            () -> new DelegatedChangeChannelResponseCallback(),
            tvChannelchangeChannelCommandParams);
    tvChannelClusterCommandInfoMap.put("changeChannel", tvChannelchangeChannelCommandInfo);
    Map<String, CommandParameterInfo> tvChannelchangeChannelByNumberCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo tvChannelchangeChannelByNumbermajorNumberCommandParameterInfo =
        new CommandParameterInfo("majorNumber", int.class);
    tvChannelchangeChannelByNumberCommandParams.put(
        "majorNumber", tvChannelchangeChannelByNumbermajorNumberCommandParameterInfo);

    CommandParameterInfo tvChannelchangeChannelByNumberminorNumberCommandParameterInfo =
        new CommandParameterInfo("minorNumber", int.class);
    tvChannelchangeChannelByNumberCommandParams.put(
        "minorNumber", tvChannelchangeChannelByNumberminorNumberCommandParameterInfo);

    // Populate commands
    CommandInfo tvChannelchangeChannelByNumberCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TvChannelCluster) cluster)
                  .changeChannelByNumber(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("majorNumber"),
                      (Integer) commandArguments.get("minorNumber"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            tvChannelchangeChannelByNumberCommandParams);
    tvChannelClusterCommandInfoMap.put(
        "changeChannelByNumber", tvChannelchangeChannelByNumberCommandInfo);
    Map<String, CommandParameterInfo> tvChannelskipChannelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo tvChannelskipChannelcountCommandParameterInfo =
        new CommandParameterInfo("count", int.class);
    tvChannelskipChannelCommandParams.put("count", tvChannelskipChannelcountCommandParameterInfo);

    // Populate commands
    CommandInfo tvChannelskipChannelCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TvChannelCluster) cluster)
                  .skipChannel(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("count"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            tvChannelskipChannelCommandParams);
    tvChannelClusterCommandInfoMap.put("skipChannel", tvChannelskipChannelCommandInfo);
    // Populate cluster
    ClusterInfo tvChannelClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.TvChannelCluster(ptr, endpointId),
            tvChannelClusterCommandInfoMap);
    clusterMap.put("tvChannel", tvChannelClusterInfo);
    Map<String, CommandInfo> targetNavigatorClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> targetNavigatornavigateTargetCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo targetNavigatornavigateTargettargetCommandParameterInfo =
        new CommandParameterInfo("target", int.class);
    targetNavigatornavigateTargetCommandParams.put(
        "target", targetNavigatornavigateTargettargetCommandParameterInfo);

    CommandParameterInfo targetNavigatornavigateTargetdataCommandParameterInfo =
        new CommandParameterInfo("data", String.class);
    targetNavigatornavigateTargetCommandParams.put(
        "data", targetNavigatornavigateTargetdataCommandParameterInfo);

    // Populate commands
    CommandInfo targetNavigatornavigateTargetCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TargetNavigatorCluster) cluster)
                  .navigateTarget(
                      (ChipClusters.TargetNavigatorCluster.NavigateTargetResponseCallback) callback,
                      (Integer) commandArguments.get("target"),
                      (String) commandArguments.get("data"));
            },
            () -> new DelegatedNavigateTargetResponseCallback(),
            targetNavigatornavigateTargetCommandParams);
    targetNavigatorClusterCommandInfoMap.put(
        "navigateTarget", targetNavigatornavigateTargetCommandInfo);
    // Populate cluster
    ClusterInfo targetNavigatorClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.TargetNavigatorCluster(ptr, endpointId),
            targetNavigatorClusterCommandInfoMap);
    clusterMap.put("targetNavigator", targetNavigatorClusterInfo);
    Map<String, CommandInfo> temperatureMeasurementClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo temperatureMeasurementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.TemperatureMeasurementCluster(ptr, endpointId),
            temperatureMeasurementClusterCommandInfoMap);
    clusterMap.put("temperatureMeasurement", temperatureMeasurementClusterInfo);
    Map<String, CommandInfo> testClusterClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> testClustertestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo testClustertestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster).test((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            testClustertestCommandParams);
    testClusterClusterCommandInfoMap.put("test", testClustertestCommandInfo);
    Map<String, CommandParameterInfo> testClustertestAddArgumentsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClustertestAddArgumentsarg1CommandParameterInfo =
        new CommandParameterInfo("arg1", int.class);
    testClustertestAddArgumentsCommandParams.put(
        "arg1", testClustertestAddArgumentsarg1CommandParameterInfo);

    CommandParameterInfo testClustertestAddArgumentsarg2CommandParameterInfo =
        new CommandParameterInfo("arg2", int.class);
    testClustertestAddArgumentsCommandParams.put(
        "arg2", testClustertestAddArgumentsarg2CommandParameterInfo);

    // Populate commands
    CommandInfo testClustertestAddArgumentsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testAddArguments(
                      (ChipClusters.TestClusterCluster.TestAddArgumentsResponseCallback) callback,
                      (Integer) commandArguments.get("arg1"),
                      (Integer) commandArguments.get("arg2"));
            },
            () -> new DelegatedTestAddArgumentsResponseCallback(),
            testClustertestAddArgumentsCommandParams);
    testClusterClusterCommandInfoMap.put(
        "testAddArguments", testClustertestAddArgumentsCommandInfo);
    Map<String, CommandParameterInfo> testClustertestEnumsRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClustertestEnumsRequestarg1CommandParameterInfo =
        new CommandParameterInfo("arg1", int.class);
    testClustertestEnumsRequestCommandParams.put(
        "arg1", testClustertestEnumsRequestarg1CommandParameterInfo);

    CommandParameterInfo testClustertestEnumsRequestarg2CommandParameterInfo =
        new CommandParameterInfo("arg2", int.class);
    testClustertestEnumsRequestCommandParams.put(
        "arg2", testClustertestEnumsRequestarg2CommandParameterInfo);

    // Populate commands
    CommandInfo testClustertestEnumsRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testEnumsRequest(
                      (ChipClusters.TestClusterCluster.TestEnumsResponseCallback) callback,
                      (Integer) commandArguments.get("arg1"),
                      (Integer) commandArguments.get("arg2"));
            },
            () -> new DelegatedTestEnumsResponseCallback(),
            testClustertestEnumsRequestCommandParams);
    testClusterClusterCommandInfoMap.put(
        "testEnumsRequest", testClustertestEnumsRequestCommandInfo);
    Map<String, CommandParameterInfo> testClustertestListInt8UArgumentRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClustertestListInt8UArgumentRequestarg1CommandParameterInfo =
        new CommandParameterInfo("arg1", int.class);
    testClustertestListInt8UArgumentRequestCommandParams.put(
        "arg1", testClustertestListInt8UArgumentRequestarg1CommandParameterInfo);

    // Populate commands
    CommandInfo testClustertestListInt8UArgumentRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testListInt8UArgumentRequest(
                      (ChipClusters.TestClusterCluster.BooleanResponseCallback) callback,
                      (Integer) commandArguments.get("arg1"));
            },
            () -> new DelegatedBooleanResponseCallback(),
            testClustertestListInt8UArgumentRequestCommandParams);
    testClusterClusterCommandInfoMap.put(
        "testListInt8UArgumentRequest", testClustertestListInt8UArgumentRequestCommandInfo);
    Map<String, CommandParameterInfo> testClustertestListInt8UReverseRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClustertestListInt8UReverseRequestarg1CommandParameterInfo =
        new CommandParameterInfo("arg1", int.class);
    testClustertestListInt8UReverseRequestCommandParams.put(
        "arg1", testClustertestListInt8UReverseRequestarg1CommandParameterInfo);

    // Populate commands
    CommandInfo testClustertestListInt8UReverseRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testListInt8UReverseRequest(
                      (ChipClusters.TestClusterCluster.TestListInt8UReverseResponseCallback)
                          callback,
                      (Integer) commandArguments.get("arg1"));
            },
            () -> new DelegatedTestListInt8UReverseResponseCallback(),
            testClustertestListInt8UReverseRequestCommandParams);
    testClusterClusterCommandInfoMap.put(
        "testListInt8UReverseRequest", testClustertestListInt8UReverseRequestCommandInfo);
    Map<String, CommandParameterInfo> testClustertestListStructArgumentRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClustertestListStructArgumentRequestaCommandParameterInfo =
        new CommandParameterInfo("a", int.class);
    testClustertestListStructArgumentRequestCommandParams.put(
        "a", testClustertestListStructArgumentRequestaCommandParameterInfo);

    CommandParameterInfo testClustertestListStructArgumentRequestbCommandParameterInfo =
        new CommandParameterInfo("b", boolean.class);
    testClustertestListStructArgumentRequestCommandParams.put(
        "b", testClustertestListStructArgumentRequestbCommandParameterInfo);

    CommandParameterInfo testClustertestListStructArgumentRequestcCommandParameterInfo =
        new CommandParameterInfo("c", int.class);
    testClustertestListStructArgumentRequestCommandParams.put(
        "c", testClustertestListStructArgumentRequestcCommandParameterInfo);

    CommandParameterInfo testClustertestListStructArgumentRequestdCommandParameterInfo =
        new CommandParameterInfo("d", byte[].class);
    testClustertestListStructArgumentRequestCommandParams.put(
        "d", testClustertestListStructArgumentRequestdCommandParameterInfo);

    CommandParameterInfo testClustertestListStructArgumentRequesteCommandParameterInfo =
        new CommandParameterInfo("e", String.class);
    testClustertestListStructArgumentRequestCommandParams.put(
        "e", testClustertestListStructArgumentRequesteCommandParameterInfo);

    CommandParameterInfo testClustertestListStructArgumentRequestfCommandParameterInfo =
        new CommandParameterInfo("f", int.class);
    testClustertestListStructArgumentRequestCommandParams.put(
        "f", testClustertestListStructArgumentRequestfCommandParameterInfo);

    // Populate commands
    CommandInfo testClustertestListStructArgumentRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testListStructArgumentRequest(
                      (ChipClusters.TestClusterCluster.BooleanResponseCallback) callback,
                      (Integer) commandArguments.get("a"),
                      (Boolean) commandArguments.get("b"),
                      (Integer) commandArguments.get("c"),
                      (byte[]) commandArguments.get("d"),
                      (String) commandArguments.get("e"),
                      (Integer) commandArguments.get("f"));
            },
            () -> new DelegatedBooleanResponseCallback(),
            testClustertestListStructArgumentRequestCommandParams);
    testClusterClusterCommandInfoMap.put(
        "testListStructArgumentRequest", testClustertestListStructArgumentRequestCommandInfo);
    Map<String, CommandParameterInfo> testClustertestNotHandledCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo testClustertestNotHandledCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testNotHandled((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            testClustertestNotHandledCommandParams);
    testClusterClusterCommandInfoMap.put("testNotHandled", testClustertestNotHandledCommandInfo);
    Map<String, CommandParameterInfo> testClustertestNullableOptionalRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClustertestNullableOptionalRequestarg1CommandParameterInfo =
        new CommandParameterInfo("arg1", int.class);
    testClustertestNullableOptionalRequestCommandParams.put(
        "arg1", testClustertestNullableOptionalRequestarg1CommandParameterInfo);

    // Populate commands
    CommandInfo testClustertestNullableOptionalRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testNullableOptionalRequest(
                      (ChipClusters.TestClusterCluster.TestNullableOptionalResponseCallback)
                          callback,
                      (Integer) commandArguments.get("arg1"));
            },
            () -> new DelegatedTestNullableOptionalResponseCallback(),
            testClustertestNullableOptionalRequestCommandParams);
    testClusterClusterCommandInfoMap.put(
        "testNullableOptionalRequest", testClustertestNullableOptionalRequestCommandInfo);
    Map<String, CommandParameterInfo> testClustertestSpecificCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo testClustertestSpecificCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testSpecific(
                      (ChipClusters.TestClusterCluster.TestSpecificResponseCallback) callback);
            },
            () -> new DelegatedTestSpecificResponseCallback(),
            testClustertestSpecificCommandParams);
    testClusterClusterCommandInfoMap.put("testSpecific", testClustertestSpecificCommandInfo);
    Map<String, CommandParameterInfo> testClustertestStructArgumentRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClustertestStructArgumentRequestaCommandParameterInfo =
        new CommandParameterInfo("a", int.class);
    testClustertestStructArgumentRequestCommandParams.put(
        "a", testClustertestStructArgumentRequestaCommandParameterInfo);

    CommandParameterInfo testClustertestStructArgumentRequestbCommandParameterInfo =
        new CommandParameterInfo("b", boolean.class);
    testClustertestStructArgumentRequestCommandParams.put(
        "b", testClustertestStructArgumentRequestbCommandParameterInfo);

    CommandParameterInfo testClustertestStructArgumentRequestcCommandParameterInfo =
        new CommandParameterInfo("c", int.class);
    testClustertestStructArgumentRequestCommandParams.put(
        "c", testClustertestStructArgumentRequestcCommandParameterInfo);

    CommandParameterInfo testClustertestStructArgumentRequestdCommandParameterInfo =
        new CommandParameterInfo("d", byte[].class);
    testClustertestStructArgumentRequestCommandParams.put(
        "d", testClustertestStructArgumentRequestdCommandParameterInfo);

    CommandParameterInfo testClustertestStructArgumentRequesteCommandParameterInfo =
        new CommandParameterInfo("e", String.class);
    testClustertestStructArgumentRequestCommandParams.put(
        "e", testClustertestStructArgumentRequesteCommandParameterInfo);

    CommandParameterInfo testClustertestStructArgumentRequestfCommandParameterInfo =
        new CommandParameterInfo("f", int.class);
    testClustertestStructArgumentRequestCommandParams.put(
        "f", testClustertestStructArgumentRequestfCommandParameterInfo);

    // Populate commands
    CommandInfo testClustertestStructArgumentRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testStructArgumentRequest(
                      (ChipClusters.TestClusterCluster.BooleanResponseCallback) callback,
                      (Integer) commandArguments.get("a"),
                      (Boolean) commandArguments.get("b"),
                      (Integer) commandArguments.get("c"),
                      (byte[]) commandArguments.get("d"),
                      (String) commandArguments.get("e"),
                      (Integer) commandArguments.get("f"));
            },
            () -> new DelegatedBooleanResponseCallback(),
            testClustertestStructArgumentRequestCommandParams);
    testClusterClusterCommandInfoMap.put(
        "testStructArgumentRequest", testClustertestStructArgumentRequestCommandInfo);
    Map<String, CommandParameterInfo> testClustertestUnknownCommandCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo testClustertestUnknownCommandCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testUnknownCommand((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            testClustertestUnknownCommandCommandParams);
    testClusterClusterCommandInfoMap.put(
        "testUnknownCommand", testClustertestUnknownCommandCommandInfo);
    // Populate cluster
    ClusterInfo testClusterClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.TestClusterCluster(ptr, endpointId),
            testClusterClusterCommandInfoMap);
    clusterMap.put("testCluster", testClusterClusterInfo);
    Map<String, CommandInfo> thermostatClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> thermostatclearWeeklyScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo thermostatclearWeeklyScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .clearWeeklySchedule((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            thermostatclearWeeklyScheduleCommandParams);
    thermostatClusterCommandInfoMap.put(
        "clearWeeklySchedule", thermostatclearWeeklyScheduleCommandInfo);
    Map<String, CommandParameterInfo> thermostatgetRelayStatusLogCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo thermostatgetRelayStatusLogCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .getRelayStatusLog((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            thermostatgetRelayStatusLogCommandParams);
    thermostatClusterCommandInfoMap.put(
        "getRelayStatusLog", thermostatgetRelayStatusLogCommandInfo);
    Map<String, CommandParameterInfo> thermostatgetWeeklyScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatgetWeeklyScheduledaysToReturnCommandParameterInfo =
        new CommandParameterInfo("daysToReturn", int.class);
    thermostatgetWeeklyScheduleCommandParams.put(
        "daysToReturn", thermostatgetWeeklyScheduledaysToReturnCommandParameterInfo);

    CommandParameterInfo thermostatgetWeeklySchedulemodeToReturnCommandParameterInfo =
        new CommandParameterInfo("modeToReturn", int.class);
    thermostatgetWeeklyScheduleCommandParams.put(
        "modeToReturn", thermostatgetWeeklySchedulemodeToReturnCommandParameterInfo);

    // Populate commands
    CommandInfo thermostatgetWeeklyScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .getWeeklySchedule(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("daysToReturn"),
                      (Integer) commandArguments.get("modeToReturn"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            thermostatgetWeeklyScheduleCommandParams);
    thermostatClusterCommandInfoMap.put(
        "getWeeklySchedule", thermostatgetWeeklyScheduleCommandInfo);
    Map<String, CommandParameterInfo> thermostatsetWeeklyScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        thermostatsetWeeklySchedulenumberOfTransitionsForSequenceCommandParameterInfo =
            new CommandParameterInfo("numberOfTransitionsForSequence", int.class);
    thermostatsetWeeklyScheduleCommandParams.put(
        "numberOfTransitionsForSequence",
        thermostatsetWeeklySchedulenumberOfTransitionsForSequenceCommandParameterInfo);

    CommandParameterInfo thermostatsetWeeklyScheduledayOfWeekForSequenceCommandParameterInfo =
        new CommandParameterInfo("dayOfWeekForSequence", int.class);
    thermostatsetWeeklyScheduleCommandParams.put(
        "dayOfWeekForSequence",
        thermostatsetWeeklyScheduledayOfWeekForSequenceCommandParameterInfo);

    CommandParameterInfo thermostatsetWeeklySchedulemodeForSequenceCommandParameterInfo =
        new CommandParameterInfo("modeForSequence", int.class);
    thermostatsetWeeklyScheduleCommandParams.put(
        "modeForSequence", thermostatsetWeeklySchedulemodeForSequenceCommandParameterInfo);

    CommandParameterInfo thermostatsetWeeklySchedulepayloadCommandParameterInfo =
        new CommandParameterInfo("payload", int.class);
    thermostatsetWeeklyScheduleCommandParams.put(
        "payload", thermostatsetWeeklySchedulepayloadCommandParameterInfo);

    // Populate commands
    CommandInfo thermostatsetWeeklyScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .setWeeklySchedule(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("numberOfTransitionsForSequence"),
                      (Integer) commandArguments.get("dayOfWeekForSequence"),
                      (Integer) commandArguments.get("modeForSequence"),
                      (Integer) commandArguments.get("payload"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            thermostatsetWeeklyScheduleCommandParams);
    thermostatClusterCommandInfoMap.put(
        "setWeeklySchedule", thermostatsetWeeklyScheduleCommandInfo);
    Map<String, CommandParameterInfo> thermostatsetpointRaiseLowerCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatsetpointRaiseLowermodeCommandParameterInfo =
        new CommandParameterInfo("mode", int.class);
    thermostatsetpointRaiseLowerCommandParams.put(
        "mode", thermostatsetpointRaiseLowermodeCommandParameterInfo);

    CommandParameterInfo thermostatsetpointRaiseLoweramountCommandParameterInfo =
        new CommandParameterInfo("amount", int.class);
    thermostatsetpointRaiseLowerCommandParams.put(
        "amount", thermostatsetpointRaiseLoweramountCommandParameterInfo);

    // Populate commands
    CommandInfo thermostatsetpointRaiseLowerCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .setpointRaiseLower(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("mode"),
                      (Integer) commandArguments.get("amount"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            thermostatsetpointRaiseLowerCommandParams);
    thermostatClusterCommandInfoMap.put(
        "setpointRaiseLower", thermostatsetpointRaiseLowerCommandInfo);
    // Populate cluster
    ClusterInfo thermostatClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ThermostatCluster(ptr, endpointId),
            thermostatClusterCommandInfoMap);
    clusterMap.put("thermostat", thermostatClusterInfo);
    Map<String, CommandInfo> thermostatUserInterfaceConfigurationClusterCommandInfoMap =
        new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo thermostatUserInterfaceConfigurationClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.ThermostatUserInterfaceConfigurationCluster(ptr, endpointId),
            thermostatUserInterfaceConfigurationClusterCommandInfoMap);
    clusterMap.put(
        "thermostatUserInterfaceConfiguration", thermostatUserInterfaceConfigurationClusterInfo);
    Map<String, CommandInfo> threadNetworkDiagnosticsClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> threadNetworkDiagnosticsresetCountsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo threadNetworkDiagnosticsresetCountsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .resetCounts((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            threadNetworkDiagnosticsresetCountsCommandParams);
    threadNetworkDiagnosticsClusterCommandInfoMap.put(
        "resetCounts", threadNetworkDiagnosticsresetCountsCommandInfo);
    // Populate cluster
    ClusterInfo threadNetworkDiagnosticsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ThreadNetworkDiagnosticsCluster(ptr, endpointId),
            threadNetworkDiagnosticsClusterCommandInfoMap);
    clusterMap.put("threadNetworkDiagnostics", threadNetworkDiagnosticsClusterInfo);
    Map<String, CommandInfo> wakeOnLanClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo wakeOnLanClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.WakeOnLanCluster(ptr, endpointId),
            wakeOnLanClusterCommandInfoMap);
    clusterMap.put("wakeOnLan", wakeOnLanClusterInfo);
    Map<String, CommandInfo> wiFiNetworkDiagnosticsClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> wiFiNetworkDiagnosticsresetCountsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo wiFiNetworkDiagnosticsresetCountsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
                  .resetCounts((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            wiFiNetworkDiagnosticsresetCountsCommandParams);
    wiFiNetworkDiagnosticsClusterCommandInfoMap.put(
        "resetCounts", wiFiNetworkDiagnosticsresetCountsCommandInfo);
    // Populate cluster
    ClusterInfo wiFiNetworkDiagnosticsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.WiFiNetworkDiagnosticsCluster(ptr, endpointId),
            wiFiNetworkDiagnosticsClusterCommandInfoMap);
    clusterMap.put("wiFiNetworkDiagnostics", wiFiNetworkDiagnosticsClusterInfo);
    Map<String, CommandInfo> windowCoveringClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> windowCoveringdownOrCloseCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo windowCoveringdownOrCloseCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .downOrClose((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringdownOrCloseCommandParams);
    windowCoveringClusterCommandInfoMap.put("downOrClose", windowCoveringdownOrCloseCommandInfo);
    Map<String, CommandParameterInfo> windowCoveringgoToLiftPercentageCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo windowCoveringgoToLiftPercentageliftPercentageValueCommandParameterInfo =
        new CommandParameterInfo("liftPercentageValue", int.class);
    windowCoveringgoToLiftPercentageCommandParams.put(
        "liftPercentageValue",
        windowCoveringgoToLiftPercentageliftPercentageValueCommandParameterInfo);

    CommandParameterInfo
        windowCoveringgoToLiftPercentageliftPercent100thsValueCommandParameterInfo =
            new CommandParameterInfo("liftPercent100thsValue", int.class);
    windowCoveringgoToLiftPercentageCommandParams.put(
        "liftPercent100thsValue",
        windowCoveringgoToLiftPercentageliftPercent100thsValueCommandParameterInfo);

    // Populate commands
    CommandInfo windowCoveringgoToLiftPercentageCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .goToLiftPercentage(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("liftPercentageValue"),
                      (Integer) commandArguments.get("liftPercent100thsValue"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringgoToLiftPercentageCommandParams);
    windowCoveringClusterCommandInfoMap.put(
        "goToLiftPercentage", windowCoveringgoToLiftPercentageCommandInfo);
    Map<String, CommandParameterInfo> windowCoveringgoToLiftValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo windowCoveringgoToLiftValueliftValueCommandParameterInfo =
        new CommandParameterInfo("liftValue", int.class);
    windowCoveringgoToLiftValueCommandParams.put(
        "liftValue", windowCoveringgoToLiftValueliftValueCommandParameterInfo);

    // Populate commands
    CommandInfo windowCoveringgoToLiftValueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .goToLiftValue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("liftValue"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringgoToLiftValueCommandParams);
    windowCoveringClusterCommandInfoMap.put(
        "goToLiftValue", windowCoveringgoToLiftValueCommandInfo);
    Map<String, CommandParameterInfo> windowCoveringgoToTiltPercentageCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo windowCoveringgoToTiltPercentagetiltPercentageValueCommandParameterInfo =
        new CommandParameterInfo("tiltPercentageValue", int.class);
    windowCoveringgoToTiltPercentageCommandParams.put(
        "tiltPercentageValue",
        windowCoveringgoToTiltPercentagetiltPercentageValueCommandParameterInfo);

    CommandParameterInfo
        windowCoveringgoToTiltPercentagetiltPercent100thsValueCommandParameterInfo =
            new CommandParameterInfo("tiltPercent100thsValue", int.class);
    windowCoveringgoToTiltPercentageCommandParams.put(
        "tiltPercent100thsValue",
        windowCoveringgoToTiltPercentagetiltPercent100thsValueCommandParameterInfo);

    // Populate commands
    CommandInfo windowCoveringgoToTiltPercentageCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .goToTiltPercentage(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("tiltPercentageValue"),
                      (Integer) commandArguments.get("tiltPercent100thsValue"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringgoToTiltPercentageCommandParams);
    windowCoveringClusterCommandInfoMap.put(
        "goToTiltPercentage", windowCoveringgoToTiltPercentageCommandInfo);
    Map<String, CommandParameterInfo> windowCoveringgoToTiltValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo windowCoveringgoToTiltValuetiltValueCommandParameterInfo =
        new CommandParameterInfo("tiltValue", int.class);
    windowCoveringgoToTiltValueCommandParams.put(
        "tiltValue", windowCoveringgoToTiltValuetiltValueCommandParameterInfo);

    // Populate commands
    CommandInfo windowCoveringgoToTiltValueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .goToTiltValue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("tiltValue"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringgoToTiltValueCommandParams);
    windowCoveringClusterCommandInfoMap.put(
        "goToTiltValue", windowCoveringgoToTiltValueCommandInfo);
    Map<String, CommandParameterInfo> windowCoveringstopMotionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo windowCoveringstopMotionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .stopMotion((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringstopMotionCommandParams);
    windowCoveringClusterCommandInfoMap.put("stopMotion", windowCoveringstopMotionCommandInfo);
    Map<String, CommandParameterInfo> windowCoveringupOrOpenCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // Populate commands
    CommandInfo windowCoveringupOrOpenCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .upOrOpen((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringupOrOpenCommandParams);
    windowCoveringClusterCommandInfoMap.put("upOrOpen", windowCoveringupOrOpenCommandInfo);
    // Populate cluster
    ClusterInfo windowCoveringClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.WindowCoveringCluster(ptr, endpointId),
            windowCoveringClusterCommandInfoMap);
    clusterMap.put("windowCovering", windowCoveringClusterInfo);
    return clusterMap;
  }

  public Map<String, ClusterInfo> getReadAttributeMap(Map<String, ClusterInfo> clusterMap) {
    Map<String, CommandInfo> readAccountLoginCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readAccountLoginClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readAccountLoginClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AccountLoginCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readAccountLoginClusterRevisionCommandParams);
    readAccountLoginCommandInfo.put(
        "readClusterRevisionAttribute", readAccountLoginClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("accountLogin").combineCommands(readAccountLoginCommandInfo);
    Map<String, CommandInfo> readAdministratorCommissioningCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readAdministratorCommissioningClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readAdministratorCommissioningClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AdministratorCommissioningCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readAdministratorCommissioningClusterRevisionCommandParams);
    readAdministratorCommissioningCommandInfo.put(
        "readClusterRevisionAttribute",
        readAdministratorCommissioningClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap
        .get("administratorCommissioning")
        .combineCommands(readAdministratorCommissioningCommandInfo);
    Map<String, CommandInfo> readApplicationBasicCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readApplicationBasicVendorNameCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readApplicationBasicVendorNameAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationBasicCluster) cluster)
                  .readVendorNameAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readApplicationBasicVendorNameCommandParams);
    readApplicationBasicCommandInfo.put(
        "readVendorNameAttribute", readApplicationBasicVendorNameAttributeCommandInfo);
    Map<String, CommandParameterInfo> readApplicationBasicVendorIdCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readApplicationBasicVendorIdAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationBasicCluster) cluster)
                  .readVendorIdAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readApplicationBasicVendorIdCommandParams);
    readApplicationBasicCommandInfo.put(
        "readVendorIdAttribute", readApplicationBasicVendorIdAttributeCommandInfo);
    Map<String, CommandParameterInfo> readApplicationBasicApplicationNameCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readApplicationBasicApplicationNameAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationBasicCluster) cluster)
                  .readApplicationNameAttribute(
                      (ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readApplicationBasicApplicationNameCommandParams);
    readApplicationBasicCommandInfo.put(
        "readApplicationNameAttribute", readApplicationBasicApplicationNameAttributeCommandInfo);
    Map<String, CommandParameterInfo> readApplicationBasicProductIdCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readApplicationBasicProductIdAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationBasicCluster) cluster)
                  .readProductIdAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readApplicationBasicProductIdCommandParams);
    readApplicationBasicCommandInfo.put(
        "readProductIdAttribute", readApplicationBasicProductIdAttributeCommandInfo);
    Map<String, CommandParameterInfo> readApplicationBasicApplicationIdCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readApplicationBasicApplicationIdAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationBasicCluster) cluster)
                  .readApplicationIdAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readApplicationBasicApplicationIdCommandParams);
    readApplicationBasicCommandInfo.put(
        "readApplicationIdAttribute", readApplicationBasicApplicationIdAttributeCommandInfo);
    Map<String, CommandParameterInfo> readApplicationBasicCatalogVendorIdCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readApplicationBasicCatalogVendorIdAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationBasicCluster) cluster)
                  .readCatalogVendorIdAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readApplicationBasicCatalogVendorIdCommandParams);
    readApplicationBasicCommandInfo.put(
        "readCatalogVendorIdAttribute", readApplicationBasicCatalogVendorIdAttributeCommandInfo);
    Map<String, CommandParameterInfo> readApplicationBasicApplicationStatusCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readApplicationBasicApplicationStatusAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationBasicCluster) cluster)
                  .readApplicationStatusAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readApplicationBasicApplicationStatusCommandParams);
    readApplicationBasicCommandInfo.put(
        "readApplicationStatusAttribute",
        readApplicationBasicApplicationStatusAttributeCommandInfo);
    Map<String, CommandParameterInfo> readApplicationBasicClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readApplicationBasicClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationBasicCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readApplicationBasicClusterRevisionCommandParams);
    readApplicationBasicCommandInfo.put(
        "readClusterRevisionAttribute", readApplicationBasicClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("applicationBasic").combineCommands(readApplicationBasicCommandInfo);
    Map<String, CommandInfo> readApplicationLauncherCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readApplicationLauncherApplicationLauncherListCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readApplicationLauncherApplicationLauncherListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationLauncherCluster) cluster)
                  .readApplicationLauncherListAttribute(
                      (ChipClusters.ApplicationLauncherCluster
                              .ApplicationLauncherListAttributeCallback)
                          callback);
            },
            () -> new DelegatedApplicationLauncherListAttributeCallback(),
            readApplicationLauncherApplicationLauncherListCommandParams);
    readApplicationLauncherCommandInfo.put(
        "readApplicationLauncherListAttribute",
        readApplicationLauncherApplicationLauncherListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readApplicationLauncherCatalogVendorIdCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readApplicationLauncherCatalogVendorIdAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationLauncherCluster) cluster)
                  .readCatalogVendorIdAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readApplicationLauncherCatalogVendorIdCommandParams);
    readApplicationLauncherCommandInfo.put(
        "readCatalogVendorIdAttribute", readApplicationLauncherCatalogVendorIdAttributeCommandInfo);
    Map<String, CommandParameterInfo> readApplicationLauncherApplicationIdCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readApplicationLauncherApplicationIdAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationLauncherCluster) cluster)
                  .readApplicationIdAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readApplicationLauncherApplicationIdCommandParams);
    readApplicationLauncherCommandInfo.put(
        "readApplicationIdAttribute", readApplicationLauncherApplicationIdAttributeCommandInfo);
    Map<String, CommandParameterInfo> readApplicationLauncherClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readApplicationLauncherClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationLauncherCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readApplicationLauncherClusterRevisionCommandParams);
    readApplicationLauncherCommandInfo.put(
        "readClusterRevisionAttribute", readApplicationLauncherClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("applicationLauncher").combineCommands(readApplicationLauncherCommandInfo);
    Map<String, CommandInfo> readAudioOutputCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readAudioOutputAudioOutputListCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readAudioOutputAudioOutputListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AudioOutputCluster) cluster)
                  .readAudioOutputListAttribute(
                      (ChipClusters.AudioOutputCluster.AudioOutputListAttributeCallback) callback);
            },
            () -> new DelegatedAudioOutputListAttributeCallback(),
            readAudioOutputAudioOutputListCommandParams);
    readAudioOutputCommandInfo.put(
        "readAudioOutputListAttribute", readAudioOutputAudioOutputListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readAudioOutputCurrentAudioOutputCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readAudioOutputCurrentAudioOutputAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AudioOutputCluster) cluster)
                  .readCurrentAudioOutputAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readAudioOutputCurrentAudioOutputCommandParams);
    readAudioOutputCommandInfo.put(
        "readCurrentAudioOutputAttribute", readAudioOutputCurrentAudioOutputAttributeCommandInfo);
    Map<String, CommandParameterInfo> readAudioOutputClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readAudioOutputClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AudioOutputCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readAudioOutputClusterRevisionCommandParams);
    readAudioOutputCommandInfo.put(
        "readClusterRevisionAttribute", readAudioOutputClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("audioOutput").combineCommands(readAudioOutputCommandInfo);
    Map<String, CommandInfo> readBarrierControlCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readBarrierControlBarrierMovingStateCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBarrierControlBarrierMovingStateAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BarrierControlCluster) cluster)
                  .readBarrierMovingStateAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBarrierControlBarrierMovingStateCommandParams);
    readBarrierControlCommandInfo.put(
        "readBarrierMovingStateAttribute",
        readBarrierControlBarrierMovingStateAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBarrierControlBarrierSafetyStatusCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBarrierControlBarrierSafetyStatusAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BarrierControlCluster) cluster)
                  .readBarrierSafetyStatusAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBarrierControlBarrierSafetyStatusCommandParams);
    readBarrierControlCommandInfo.put(
        "readBarrierSafetyStatusAttribute",
        readBarrierControlBarrierSafetyStatusAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBarrierControlBarrierCapabilitiesCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBarrierControlBarrierCapabilitiesAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BarrierControlCluster) cluster)
                  .readBarrierCapabilitiesAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBarrierControlBarrierCapabilitiesCommandParams);
    readBarrierControlCommandInfo.put(
        "readBarrierCapabilitiesAttribute",
        readBarrierControlBarrierCapabilitiesAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBarrierControlBarrierPositionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBarrierControlBarrierPositionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BarrierControlCluster) cluster)
                  .readBarrierPositionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBarrierControlBarrierPositionCommandParams);
    readBarrierControlCommandInfo.put(
        "readBarrierPositionAttribute", readBarrierControlBarrierPositionAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBarrierControlClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBarrierControlClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BarrierControlCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBarrierControlClusterRevisionCommandParams);
    readBarrierControlCommandInfo.put(
        "readClusterRevisionAttribute", readBarrierControlClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("barrierControl").combineCommands(readBarrierControlCommandInfo);
    Map<String, CommandInfo> readBasicCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readBasicInteractionModelVersionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicInteractionModelVersionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readInteractionModelVersionAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBasicInteractionModelVersionCommandParams);
    readBasicCommandInfo.put(
        "readInteractionModelVersionAttribute",
        readBasicInteractionModelVersionAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicVendorNameCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicVendorNameAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readVendorNameAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBasicVendorNameCommandParams);
    readBasicCommandInfo.put("readVendorNameAttribute", readBasicVendorNameAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicVendorIDCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicVendorIDAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readVendorIDAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBasicVendorIDCommandParams);
    readBasicCommandInfo.put("readVendorIDAttribute", readBasicVendorIDAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicProductNameCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicProductNameAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readProductNameAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBasicProductNameCommandParams);
    readBasicCommandInfo.put("readProductNameAttribute", readBasicProductNameAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicProductIDCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicProductIDAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readProductIDAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBasicProductIDCommandParams);
    readBasicCommandInfo.put("readProductIDAttribute", readBasicProductIDAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicUserLabelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicUserLabelAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readUserLabelAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBasicUserLabelCommandParams);
    readBasicCommandInfo.put("readUserLabelAttribute", readBasicUserLabelAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicLocationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicLocationAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readLocationAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBasicLocationCommandParams);
    readBasicCommandInfo.put("readLocationAttribute", readBasicLocationAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicHardwareVersionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicHardwareVersionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readHardwareVersionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBasicHardwareVersionCommandParams);
    readBasicCommandInfo.put(
        "readHardwareVersionAttribute", readBasicHardwareVersionAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicHardwareVersionStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicHardwareVersionStringAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readHardwareVersionStringAttribute(
                      (ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBasicHardwareVersionStringCommandParams);
    readBasicCommandInfo.put(
        "readHardwareVersionStringAttribute", readBasicHardwareVersionStringAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicSoftwareVersionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicSoftwareVersionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readSoftwareVersionAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readBasicSoftwareVersionCommandParams);
    readBasicCommandInfo.put(
        "readSoftwareVersionAttribute", readBasicSoftwareVersionAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicSoftwareVersionStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicSoftwareVersionStringAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readSoftwareVersionStringAttribute(
                      (ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBasicSoftwareVersionStringCommandParams);
    readBasicCommandInfo.put(
        "readSoftwareVersionStringAttribute", readBasicSoftwareVersionStringAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicManufacturingDateCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicManufacturingDateAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readManufacturingDateAttribute(
                      (ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBasicManufacturingDateCommandParams);
    readBasicCommandInfo.put(
        "readManufacturingDateAttribute", readBasicManufacturingDateAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicPartNumberCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicPartNumberAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readPartNumberAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBasicPartNumberCommandParams);
    readBasicCommandInfo.put("readPartNumberAttribute", readBasicPartNumberAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicProductURLCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicProductURLAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readProductURLAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBasicProductURLCommandParams);
    readBasicCommandInfo.put("readProductURLAttribute", readBasicProductURLAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicProductLabelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicProductLabelAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readProductLabelAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBasicProductLabelCommandParams);
    readBasicCommandInfo.put(
        "readProductLabelAttribute", readBasicProductLabelAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicSerialNumberCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicSerialNumberAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readSerialNumberAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBasicSerialNumberCommandParams);
    readBasicCommandInfo.put(
        "readSerialNumberAttribute", readBasicSerialNumberAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicLocalConfigDisabledCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicLocalConfigDisabledAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readLocalConfigDisabledAttribute(
                      (ChipClusters.BooleanAttributeCallback) callback);
            },
            () -> new DelegatedBooleanAttributeCallback(),
            readBasicLocalConfigDisabledCommandParams);
    readBasicCommandInfo.put(
        "readLocalConfigDisabledAttribute", readBasicLocalConfigDisabledAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicReachableCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicReachableAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readReachableAttribute((ChipClusters.BooleanAttributeCallback) callback);
            },
            () -> new DelegatedBooleanAttributeCallback(),
            readBasicReachableCommandParams);
    readBasicCommandInfo.put("readReachableAttribute", readBasicReachableAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBasicClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBasicClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBasicClusterRevisionCommandParams);
    readBasicCommandInfo.put(
        "readClusterRevisionAttribute", readBasicClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("basic").combineCommands(readBasicCommandInfo);
    Map<String, CommandInfo> readBinaryInputBasicCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readBinaryInputBasicOutOfServiceCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBinaryInputBasicOutOfServiceAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BinaryInputBasicCluster) cluster)
                  .readOutOfServiceAttribute((ChipClusters.BooleanAttributeCallback) callback);
            },
            () -> new DelegatedBooleanAttributeCallback(),
            readBinaryInputBasicOutOfServiceCommandParams);
    readBinaryInputBasicCommandInfo.put(
        "readOutOfServiceAttribute", readBinaryInputBasicOutOfServiceAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBinaryInputBasicPresentValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBinaryInputBasicPresentValueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BinaryInputBasicCluster) cluster)
                  .readPresentValueAttribute((ChipClusters.BooleanAttributeCallback) callback);
            },
            () -> new DelegatedBooleanAttributeCallback(),
            readBinaryInputBasicPresentValueCommandParams);
    readBinaryInputBasicCommandInfo.put(
        "readPresentValueAttribute", readBinaryInputBasicPresentValueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBinaryInputBasicStatusFlagsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBinaryInputBasicStatusFlagsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BinaryInputBasicCluster) cluster)
                  .readStatusFlagsAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBinaryInputBasicStatusFlagsCommandParams);
    readBinaryInputBasicCommandInfo.put(
        "readStatusFlagsAttribute", readBinaryInputBasicStatusFlagsAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBinaryInputBasicClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBinaryInputBasicClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BinaryInputBasicCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBinaryInputBasicClusterRevisionCommandParams);
    readBinaryInputBasicCommandInfo.put(
        "readClusterRevisionAttribute", readBinaryInputBasicClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("binaryInputBasic").combineCommands(readBinaryInputBasicCommandInfo);
    Map<String, CommandInfo> readBindingCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readBindingClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBindingClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BindingCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBindingClusterRevisionCommandParams);
    readBindingCommandInfo.put(
        "readClusterRevisionAttribute", readBindingClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("binding").combineCommands(readBindingCommandInfo);
    Map<String, CommandInfo> readBooleanStateCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readBooleanStateStateValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBooleanStateStateValueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BooleanStateCluster) cluster)
                  .readStateValueAttribute((ChipClusters.BooleanAttributeCallback) callback);
            },
            () -> new DelegatedBooleanAttributeCallback(),
            readBooleanStateStateValueCommandParams);
    readBooleanStateCommandInfo.put(
        "readStateValueAttribute", readBooleanStateStateValueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBooleanStateClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBooleanStateClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BooleanStateCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBooleanStateClusterRevisionCommandParams);
    readBooleanStateCommandInfo.put(
        "readClusterRevisionAttribute", readBooleanStateClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("booleanState").combineCommands(readBooleanStateCommandInfo);
    Map<String, CommandInfo> readBridgedActionsCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readBridgedActionsActionListCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedActionsActionListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .readActionListAttribute(
                      (ChipClusters.BridgedActionsCluster.ActionListAttributeCallback) callback);
            },
            () -> new DelegatedActionListAttributeCallback(),
            readBridgedActionsActionListCommandParams);
    readBridgedActionsCommandInfo.put(
        "readActionListAttribute", readBridgedActionsActionListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBridgedActionsEndpointListCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedActionsEndpointListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .readEndpointListAttribute(
                      (ChipClusters.BridgedActionsCluster.EndpointListAttributeCallback) callback);
            },
            () -> new DelegatedEndpointListAttributeCallback(),
            readBridgedActionsEndpointListCommandParams);
    readBridgedActionsCommandInfo.put(
        "readEndpointListAttribute", readBridgedActionsEndpointListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBridgedActionsSetupUrlCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedActionsSetupUrlAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .readSetupUrlAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBridgedActionsSetupUrlCommandParams);
    readBridgedActionsCommandInfo.put(
        "readSetupUrlAttribute", readBridgedActionsSetupUrlAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBridgedActionsClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedActionsClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBridgedActionsClusterRevisionCommandParams);
    readBridgedActionsCommandInfo.put(
        "readClusterRevisionAttribute", readBridgedActionsClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("bridgedActions").combineCommands(readBridgedActionsCommandInfo);
    Map<String, CommandInfo> readBridgedDeviceBasicCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readBridgedDeviceBasicVendorNameCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedDeviceBasicVendorNameAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedDeviceBasicCluster) cluster)
                  .readVendorNameAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBridgedDeviceBasicVendorNameCommandParams);
    readBridgedDeviceBasicCommandInfo.put(
        "readVendorNameAttribute", readBridgedDeviceBasicVendorNameAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBridgedDeviceBasicVendorIDCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedDeviceBasicVendorIDAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedDeviceBasicCluster) cluster)
                  .readVendorIDAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBridgedDeviceBasicVendorIDCommandParams);
    readBridgedDeviceBasicCommandInfo.put(
        "readVendorIDAttribute", readBridgedDeviceBasicVendorIDAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBridgedDeviceBasicProductNameCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedDeviceBasicProductNameAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedDeviceBasicCluster) cluster)
                  .readProductNameAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBridgedDeviceBasicProductNameCommandParams);
    readBridgedDeviceBasicCommandInfo.put(
        "readProductNameAttribute", readBridgedDeviceBasicProductNameAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBridgedDeviceBasicUserLabelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedDeviceBasicUserLabelAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedDeviceBasicCluster) cluster)
                  .readUserLabelAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBridgedDeviceBasicUserLabelCommandParams);
    readBridgedDeviceBasicCommandInfo.put(
        "readUserLabelAttribute", readBridgedDeviceBasicUserLabelAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBridgedDeviceBasicHardwareVersionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedDeviceBasicHardwareVersionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedDeviceBasicCluster) cluster)
                  .readHardwareVersionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBridgedDeviceBasicHardwareVersionCommandParams);
    readBridgedDeviceBasicCommandInfo.put(
        "readHardwareVersionAttribute", readBridgedDeviceBasicHardwareVersionAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBridgedDeviceBasicHardwareVersionStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedDeviceBasicHardwareVersionStringAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedDeviceBasicCluster) cluster)
                  .readHardwareVersionStringAttribute(
                      (ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBridgedDeviceBasicHardwareVersionStringCommandParams);
    readBridgedDeviceBasicCommandInfo.put(
        "readHardwareVersionStringAttribute",
        readBridgedDeviceBasicHardwareVersionStringAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBridgedDeviceBasicSoftwareVersionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedDeviceBasicSoftwareVersionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedDeviceBasicCluster) cluster)
                  .readSoftwareVersionAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readBridgedDeviceBasicSoftwareVersionCommandParams);
    readBridgedDeviceBasicCommandInfo.put(
        "readSoftwareVersionAttribute", readBridgedDeviceBasicSoftwareVersionAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBridgedDeviceBasicSoftwareVersionStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedDeviceBasicSoftwareVersionStringAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedDeviceBasicCluster) cluster)
                  .readSoftwareVersionStringAttribute(
                      (ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBridgedDeviceBasicSoftwareVersionStringCommandParams);
    readBridgedDeviceBasicCommandInfo.put(
        "readSoftwareVersionStringAttribute",
        readBridgedDeviceBasicSoftwareVersionStringAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBridgedDeviceBasicManufacturingDateCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedDeviceBasicManufacturingDateAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedDeviceBasicCluster) cluster)
                  .readManufacturingDateAttribute(
                      (ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBridgedDeviceBasicManufacturingDateCommandParams);
    readBridgedDeviceBasicCommandInfo.put(
        "readManufacturingDateAttribute",
        readBridgedDeviceBasicManufacturingDateAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBridgedDeviceBasicPartNumberCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedDeviceBasicPartNumberAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedDeviceBasicCluster) cluster)
                  .readPartNumberAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBridgedDeviceBasicPartNumberCommandParams);
    readBridgedDeviceBasicCommandInfo.put(
        "readPartNumberAttribute", readBridgedDeviceBasicPartNumberAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBridgedDeviceBasicProductURLCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedDeviceBasicProductURLAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedDeviceBasicCluster) cluster)
                  .readProductURLAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBridgedDeviceBasicProductURLCommandParams);
    readBridgedDeviceBasicCommandInfo.put(
        "readProductURLAttribute", readBridgedDeviceBasicProductURLAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBridgedDeviceBasicProductLabelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedDeviceBasicProductLabelAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedDeviceBasicCluster) cluster)
                  .readProductLabelAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBridgedDeviceBasicProductLabelCommandParams);
    readBridgedDeviceBasicCommandInfo.put(
        "readProductLabelAttribute", readBridgedDeviceBasicProductLabelAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBridgedDeviceBasicSerialNumberCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedDeviceBasicSerialNumberAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedDeviceBasicCluster) cluster)
                  .readSerialNumberAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readBridgedDeviceBasicSerialNumberCommandParams);
    readBridgedDeviceBasicCommandInfo.put(
        "readSerialNumberAttribute", readBridgedDeviceBasicSerialNumberAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBridgedDeviceBasicReachableCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedDeviceBasicReachableAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedDeviceBasicCluster) cluster)
                  .readReachableAttribute((ChipClusters.BooleanAttributeCallback) callback);
            },
            () -> new DelegatedBooleanAttributeCallback(),
            readBridgedDeviceBasicReachableCommandParams);
    readBridgedDeviceBasicCommandInfo.put(
        "readReachableAttribute", readBridgedDeviceBasicReachableAttributeCommandInfo);
    Map<String, CommandParameterInfo> readBridgedDeviceBasicClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readBridgedDeviceBasicClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedDeviceBasicCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readBridgedDeviceBasicClusterRevisionCommandParams);
    readBridgedDeviceBasicCommandInfo.put(
        "readClusterRevisionAttribute", readBridgedDeviceBasicClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("bridgedDeviceBasic").combineCommands(readBridgedDeviceBasicCommandInfo);
    Map<String, CommandInfo> readColorControlCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readColorControlCurrentHueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlCurrentHueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readCurrentHueAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlCurrentHueCommandParams);
    readColorControlCommandInfo.put(
        "readCurrentHueAttribute", readColorControlCurrentHueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlCurrentSaturationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlCurrentSaturationAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readCurrentSaturationAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlCurrentSaturationCommandParams);
    readColorControlCommandInfo.put(
        "readCurrentSaturationAttribute", readColorControlCurrentSaturationAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlRemainingTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlRemainingTimeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readRemainingTimeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlRemainingTimeCommandParams);
    readColorControlCommandInfo.put(
        "readRemainingTimeAttribute", readColorControlRemainingTimeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlCurrentXCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlCurrentXAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readCurrentXAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlCurrentXCommandParams);
    readColorControlCommandInfo.put(
        "readCurrentXAttribute", readColorControlCurrentXAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlCurrentYCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlCurrentYAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readCurrentYAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlCurrentYCommandParams);
    readColorControlCommandInfo.put(
        "readCurrentYAttribute", readColorControlCurrentYAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlDriftCompensationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlDriftCompensationAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readDriftCompensationAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlDriftCompensationCommandParams);
    readColorControlCommandInfo.put(
        "readDriftCompensationAttribute", readColorControlDriftCompensationAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlCompensationTextCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlCompensationTextAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readCompensationTextAttribute(
                      (ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readColorControlCompensationTextCommandParams);
    readColorControlCommandInfo.put(
        "readCompensationTextAttribute", readColorControlCompensationTextAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorTemperatureCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorTemperatureAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorTemperatureAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorTemperatureCommandParams);
    readColorControlCommandInfo.put(
        "readColorTemperatureAttribute", readColorControlColorTemperatureAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorModeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorModeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorModeCommandParams);
    readColorControlCommandInfo.put(
        "readColorModeAttribute", readColorControlColorModeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorControlOptionsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorControlOptionsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorControlOptionsAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorControlOptionsCommandParams);
    readColorControlCommandInfo.put(
        "readColorControlOptionsAttribute",
        readColorControlColorControlOptionsAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlNumberOfPrimariesCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlNumberOfPrimariesAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readNumberOfPrimariesAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlNumberOfPrimariesCommandParams);
    readColorControlCommandInfo.put(
        "readNumberOfPrimariesAttribute", readColorControlNumberOfPrimariesAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary1XCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary1XAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary1XAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary1XCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary1XAttribute", readColorControlPrimary1XAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary1YCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary1YAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary1YAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary1YCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary1YAttribute", readColorControlPrimary1YAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary1IntensityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary1IntensityAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary1IntensityAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary1IntensityCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary1IntensityAttribute", readColorControlPrimary1IntensityAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary2XCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary2XAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary2XAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary2XCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary2XAttribute", readColorControlPrimary2XAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary2YCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary2YAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary2YAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary2YCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary2YAttribute", readColorControlPrimary2YAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary2IntensityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary2IntensityAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary2IntensityAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary2IntensityCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary2IntensityAttribute", readColorControlPrimary2IntensityAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary3XCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary3XAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary3XAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary3XCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary3XAttribute", readColorControlPrimary3XAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary3YCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary3YAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary3YAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary3YCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary3YAttribute", readColorControlPrimary3YAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary3IntensityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary3IntensityAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary3IntensityAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary3IntensityCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary3IntensityAttribute", readColorControlPrimary3IntensityAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary4XCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary4XAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary4XAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary4XCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary4XAttribute", readColorControlPrimary4XAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary4YCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary4YAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary4YAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary4YCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary4YAttribute", readColorControlPrimary4YAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary4IntensityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary4IntensityAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary4IntensityAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary4IntensityCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary4IntensityAttribute", readColorControlPrimary4IntensityAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary5XCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary5XAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary5XAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary5XCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary5XAttribute", readColorControlPrimary5XAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary5YCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary5YAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary5YAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary5YCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary5YAttribute", readColorControlPrimary5YAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary5IntensityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary5IntensityAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary5IntensityAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary5IntensityCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary5IntensityAttribute", readColorControlPrimary5IntensityAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary6XCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary6XAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary6XAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary6XCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary6XAttribute", readColorControlPrimary6XAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary6YCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary6YAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary6YAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary6YCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary6YAttribute", readColorControlPrimary6YAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlPrimary6IntensityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlPrimary6IntensityAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readPrimary6IntensityAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlPrimary6IntensityCommandParams);
    readColorControlCommandInfo.put(
        "readPrimary6IntensityAttribute", readColorControlPrimary6IntensityAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlWhitePointXCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlWhitePointXAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readWhitePointXAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlWhitePointXCommandParams);
    readColorControlCommandInfo.put(
        "readWhitePointXAttribute", readColorControlWhitePointXAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlWhitePointYCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlWhitePointYAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readWhitePointYAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlWhitePointYCommandParams);
    readColorControlCommandInfo.put(
        "readWhitePointYAttribute", readColorControlWhitePointYAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorPointRXCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorPointRXAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorPointRXAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorPointRXCommandParams);
    readColorControlCommandInfo.put(
        "readColorPointRXAttribute", readColorControlColorPointRXAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorPointRYCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorPointRYAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorPointRYAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorPointRYCommandParams);
    readColorControlCommandInfo.put(
        "readColorPointRYAttribute", readColorControlColorPointRYAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorPointRIntensityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorPointRIntensityAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorPointRIntensityAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorPointRIntensityCommandParams);
    readColorControlCommandInfo.put(
        "readColorPointRIntensityAttribute",
        readColorControlColorPointRIntensityAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorPointGXCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorPointGXAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorPointGXAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorPointGXCommandParams);
    readColorControlCommandInfo.put(
        "readColorPointGXAttribute", readColorControlColorPointGXAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorPointGYCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorPointGYAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorPointGYAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorPointGYCommandParams);
    readColorControlCommandInfo.put(
        "readColorPointGYAttribute", readColorControlColorPointGYAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorPointGIntensityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorPointGIntensityAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorPointGIntensityAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorPointGIntensityCommandParams);
    readColorControlCommandInfo.put(
        "readColorPointGIntensityAttribute",
        readColorControlColorPointGIntensityAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorPointBXCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorPointBXAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorPointBXAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorPointBXCommandParams);
    readColorControlCommandInfo.put(
        "readColorPointBXAttribute", readColorControlColorPointBXAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorPointBYCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorPointBYAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorPointBYAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorPointBYCommandParams);
    readColorControlCommandInfo.put(
        "readColorPointBYAttribute", readColorControlColorPointBYAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorPointBIntensityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorPointBIntensityAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorPointBIntensityAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorPointBIntensityCommandParams);
    readColorControlCommandInfo.put(
        "readColorPointBIntensityAttribute",
        readColorControlColorPointBIntensityAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlEnhancedCurrentHueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlEnhancedCurrentHueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readEnhancedCurrentHueAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlEnhancedCurrentHueCommandParams);
    readColorControlCommandInfo.put(
        "readEnhancedCurrentHueAttribute", readColorControlEnhancedCurrentHueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlEnhancedColorModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlEnhancedColorModeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readEnhancedColorModeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlEnhancedColorModeCommandParams);
    readColorControlCommandInfo.put(
        "readEnhancedColorModeAttribute", readColorControlEnhancedColorModeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorLoopActiveCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorLoopActiveAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorLoopActiveAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorLoopActiveCommandParams);
    readColorControlCommandInfo.put(
        "readColorLoopActiveAttribute", readColorControlColorLoopActiveAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorLoopDirectionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorLoopDirectionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorLoopDirectionAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorLoopDirectionCommandParams);
    readColorControlCommandInfo.put(
        "readColorLoopDirectionAttribute", readColorControlColorLoopDirectionAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorLoopTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorLoopTimeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorLoopTimeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorLoopTimeCommandParams);
    readColorControlCommandInfo.put(
        "readColorLoopTimeAttribute", readColorControlColorLoopTimeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorLoopStartEnhancedHueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorLoopStartEnhancedHueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorLoopStartEnhancedHueAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorLoopStartEnhancedHueCommandParams);
    readColorControlCommandInfo.put(
        "readColorLoopStartEnhancedHueAttribute",
        readColorControlColorLoopStartEnhancedHueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorLoopStoredEnhancedHueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorLoopStoredEnhancedHueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorLoopStoredEnhancedHueAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorLoopStoredEnhancedHueCommandParams);
    readColorControlCommandInfo.put(
        "readColorLoopStoredEnhancedHueAttribute",
        readColorControlColorLoopStoredEnhancedHueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorCapabilitiesCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorCapabilitiesAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorCapabilitiesAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorCapabilitiesCommandParams);
    readColorControlCommandInfo.put(
        "readColorCapabilitiesAttribute", readColorControlColorCapabilitiesAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorTempPhysicalMinCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorTempPhysicalMinAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorTempPhysicalMinAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorTempPhysicalMinCommandParams);
    readColorControlCommandInfo.put(
        "readColorTempPhysicalMinAttribute",
        readColorControlColorTempPhysicalMinAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlColorTempPhysicalMaxCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlColorTempPhysicalMaxAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readColorTempPhysicalMaxAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlColorTempPhysicalMaxCommandParams);
    readColorControlCommandInfo.put(
        "readColorTempPhysicalMaxAttribute",
        readColorControlColorTempPhysicalMaxAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlCoupleColorTempToLevelMinMiredsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlCoupleColorTempToLevelMinMiredsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readCoupleColorTempToLevelMinMiredsAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlCoupleColorTempToLevelMinMiredsCommandParams);
    readColorControlCommandInfo.put(
        "readCoupleColorTempToLevelMinMiredsAttribute",
        readColorControlCoupleColorTempToLevelMinMiredsAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlStartUpColorTemperatureMiredsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlStartUpColorTemperatureMiredsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readStartUpColorTemperatureMiredsAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlStartUpColorTemperatureMiredsCommandParams);
    readColorControlCommandInfo.put(
        "readStartUpColorTemperatureMiredsAttribute",
        readColorControlStartUpColorTemperatureMiredsAttributeCommandInfo);
    Map<String, CommandParameterInfo> readColorControlClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readColorControlClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readColorControlClusterRevisionCommandParams);
    readColorControlCommandInfo.put(
        "readClusterRevisionAttribute", readColorControlClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("colorControl").combineCommands(readColorControlCommandInfo);
    Map<String, CommandInfo> readContentLauncherCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readContentLauncherAcceptsHeaderListCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readContentLauncherAcceptsHeaderListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ContentLauncherCluster) cluster)
                  .readAcceptsHeaderListAttribute(
                      (ChipClusters.ContentLauncherCluster.AcceptsHeaderListAttributeCallback)
                          callback);
            },
            () -> new DelegatedAcceptsHeaderListAttributeCallback(),
            readContentLauncherAcceptsHeaderListCommandParams);
    readContentLauncherCommandInfo.put(
        "readAcceptsHeaderListAttribute", readContentLauncherAcceptsHeaderListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readContentLauncherSupportedStreamingTypesCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readContentLauncherSupportedStreamingTypesAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ContentLauncherCluster) cluster)
                  .readSupportedStreamingTypesAttribute(
                      (ChipClusters.ContentLauncherCluster.SupportedStreamingTypesAttributeCallback)
                          callback);
            },
            () -> new DelegatedSupportedStreamingTypesAttributeCallback(),
            readContentLauncherSupportedStreamingTypesCommandParams);
    readContentLauncherCommandInfo.put(
        "readSupportedStreamingTypesAttribute",
        readContentLauncherSupportedStreamingTypesAttributeCommandInfo);
    Map<String, CommandParameterInfo> readContentLauncherClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readContentLauncherClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ContentLauncherCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readContentLauncherClusterRevisionCommandParams);
    readContentLauncherCommandInfo.put(
        "readClusterRevisionAttribute", readContentLauncherClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("contentLauncher").combineCommands(readContentLauncherCommandInfo);
    Map<String, CommandInfo> readDescriptorCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readDescriptorDeviceListCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readDescriptorDeviceListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DescriptorCluster) cluster)
                  .readDeviceListAttribute(
                      (ChipClusters.DescriptorCluster.DeviceListAttributeCallback) callback);
            },
            () -> new DelegatedDeviceListAttributeCallback(),
            readDescriptorDeviceListCommandParams);
    readDescriptorCommandInfo.put(
        "readDeviceListAttribute", readDescriptorDeviceListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readDescriptorServerListCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readDescriptorServerListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DescriptorCluster) cluster)
                  .readServerListAttribute(
                      (ChipClusters.DescriptorCluster.ServerListAttributeCallback) callback);
            },
            () -> new DelegatedServerListAttributeCallback(),
            readDescriptorServerListCommandParams);
    readDescriptorCommandInfo.put(
        "readServerListAttribute", readDescriptorServerListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readDescriptorClientListCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readDescriptorClientListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DescriptorCluster) cluster)
                  .readClientListAttribute(
                      (ChipClusters.DescriptorCluster.ClientListAttributeCallback) callback);
            },
            () -> new DelegatedClientListAttributeCallback(),
            readDescriptorClientListCommandParams);
    readDescriptorCommandInfo.put(
        "readClientListAttribute", readDescriptorClientListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readDescriptorPartsListCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readDescriptorPartsListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DescriptorCluster) cluster)
                  .readPartsListAttribute(
                      (ChipClusters.DescriptorCluster.PartsListAttributeCallback) callback);
            },
            () -> new DelegatedPartsListAttributeCallback(),
            readDescriptorPartsListCommandParams);
    readDescriptorCommandInfo.put(
        "readPartsListAttribute", readDescriptorPartsListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readDescriptorClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readDescriptorClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DescriptorCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readDescriptorClusterRevisionCommandParams);
    readDescriptorCommandInfo.put(
        "readClusterRevisionAttribute", readDescriptorClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("descriptor").combineCommands(readDescriptorCommandInfo);
    Map<String, CommandInfo> readDiagnosticLogsCommandInfo = new LinkedHashMap<>();
    // read attribute
    // combine the read Attribute into the original commands
    clusterMap.get("diagnosticLogs").combineCommands(readDiagnosticLogsCommandInfo);
    Map<String, CommandInfo> readDoorLockCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readDoorLockLockStateCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readDoorLockLockStateAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .readLockStateAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readDoorLockLockStateCommandParams);
    readDoorLockCommandInfo.put(
        "readLockStateAttribute", readDoorLockLockStateAttributeCommandInfo);
    Map<String, CommandParameterInfo> readDoorLockLockTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readDoorLockLockTypeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .readLockTypeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readDoorLockLockTypeCommandParams);
    readDoorLockCommandInfo.put("readLockTypeAttribute", readDoorLockLockTypeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readDoorLockActuatorEnabledCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readDoorLockActuatorEnabledAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .readActuatorEnabledAttribute((ChipClusters.BooleanAttributeCallback) callback);
            },
            () -> new DelegatedBooleanAttributeCallback(),
            readDoorLockActuatorEnabledCommandParams);
    readDoorLockCommandInfo.put(
        "readActuatorEnabledAttribute", readDoorLockActuatorEnabledAttributeCommandInfo);
    Map<String, CommandParameterInfo> readDoorLockClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readDoorLockClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readDoorLockClusterRevisionCommandParams);
    readDoorLockCommandInfo.put(
        "readClusterRevisionAttribute", readDoorLockClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("doorLock").combineCommands(readDoorLockCommandInfo);
    Map<String, CommandInfo> readElectricalMeasurementCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readElectricalMeasurementMeasurementTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readElectricalMeasurementMeasurementTypeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .readMeasurementTypeAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readElectricalMeasurementMeasurementTypeCommandParams);
    readElectricalMeasurementCommandInfo.put(
        "readMeasurementTypeAttribute",
        readElectricalMeasurementMeasurementTypeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readElectricalMeasurementTotalActivePowerCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readElectricalMeasurementTotalActivePowerAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .readTotalActivePowerAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readElectricalMeasurementTotalActivePowerCommandParams);
    readElectricalMeasurementCommandInfo.put(
        "readTotalActivePowerAttribute",
        readElectricalMeasurementTotalActivePowerAttributeCommandInfo);
    Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readElectricalMeasurementRmsVoltageAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .readRmsVoltageAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readElectricalMeasurementRmsVoltageCommandParams);
    readElectricalMeasurementCommandInfo.put(
        "readRmsVoltageAttribute", readElectricalMeasurementRmsVoltageAttributeCommandInfo);
    Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageMinCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readElectricalMeasurementRmsVoltageMinAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .readRmsVoltageMinAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readElectricalMeasurementRmsVoltageMinCommandParams);
    readElectricalMeasurementCommandInfo.put(
        "readRmsVoltageMinAttribute", readElectricalMeasurementRmsVoltageMinAttributeCommandInfo);
    Map<String, CommandParameterInfo> readElectricalMeasurementRmsVoltageMaxCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readElectricalMeasurementRmsVoltageMaxAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .readRmsVoltageMaxAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readElectricalMeasurementRmsVoltageMaxCommandParams);
    readElectricalMeasurementCommandInfo.put(
        "readRmsVoltageMaxAttribute", readElectricalMeasurementRmsVoltageMaxAttributeCommandInfo);
    Map<String, CommandParameterInfo> readElectricalMeasurementRmsCurrentCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readElectricalMeasurementRmsCurrentAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .readRmsCurrentAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readElectricalMeasurementRmsCurrentCommandParams);
    readElectricalMeasurementCommandInfo.put(
        "readRmsCurrentAttribute", readElectricalMeasurementRmsCurrentAttributeCommandInfo);
    Map<String, CommandParameterInfo> readElectricalMeasurementRmsCurrentMinCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readElectricalMeasurementRmsCurrentMinAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .readRmsCurrentMinAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readElectricalMeasurementRmsCurrentMinCommandParams);
    readElectricalMeasurementCommandInfo.put(
        "readRmsCurrentMinAttribute", readElectricalMeasurementRmsCurrentMinAttributeCommandInfo);
    Map<String, CommandParameterInfo> readElectricalMeasurementRmsCurrentMaxCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readElectricalMeasurementRmsCurrentMaxAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .readRmsCurrentMaxAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readElectricalMeasurementRmsCurrentMaxCommandParams);
    readElectricalMeasurementCommandInfo.put(
        "readRmsCurrentMaxAttribute", readElectricalMeasurementRmsCurrentMaxAttributeCommandInfo);
    Map<String, CommandParameterInfo> readElectricalMeasurementActivePowerCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readElectricalMeasurementActivePowerAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .readActivePowerAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readElectricalMeasurementActivePowerCommandParams);
    readElectricalMeasurementCommandInfo.put(
        "readActivePowerAttribute", readElectricalMeasurementActivePowerAttributeCommandInfo);
    Map<String, CommandParameterInfo> readElectricalMeasurementActivePowerMinCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readElectricalMeasurementActivePowerMinAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .readActivePowerMinAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readElectricalMeasurementActivePowerMinCommandParams);
    readElectricalMeasurementCommandInfo.put(
        "readActivePowerMinAttribute", readElectricalMeasurementActivePowerMinAttributeCommandInfo);
    Map<String, CommandParameterInfo> readElectricalMeasurementActivePowerMaxCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readElectricalMeasurementActivePowerMaxAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .readActivePowerMaxAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readElectricalMeasurementActivePowerMaxCommandParams);
    readElectricalMeasurementCommandInfo.put(
        "readActivePowerMaxAttribute", readElectricalMeasurementActivePowerMaxAttributeCommandInfo);
    Map<String, CommandParameterInfo> readElectricalMeasurementClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readElectricalMeasurementClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readElectricalMeasurementClusterRevisionCommandParams);
    readElectricalMeasurementCommandInfo.put(
        "readClusterRevisionAttribute",
        readElectricalMeasurementClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("electricalMeasurement").combineCommands(readElectricalMeasurementCommandInfo);
    Map<String, CommandInfo> readEthernetNetworkDiagnosticsCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsPHYRateCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readEthernetNetworkDiagnosticsPHYRateAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster)
                  .readPHYRateAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readEthernetNetworkDiagnosticsPHYRateCommandParams);
    readEthernetNetworkDiagnosticsCommandInfo.put(
        "readPHYRateAttribute", readEthernetNetworkDiagnosticsPHYRateAttributeCommandInfo);
    Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsFullDuplexCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readEthernetNetworkDiagnosticsFullDuplexAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster)
                  .readFullDuplexAttribute((ChipClusters.BooleanAttributeCallback) callback);
            },
            () -> new DelegatedBooleanAttributeCallback(),
            readEthernetNetworkDiagnosticsFullDuplexCommandParams);
    readEthernetNetworkDiagnosticsCommandInfo.put(
        "readFullDuplexAttribute", readEthernetNetworkDiagnosticsFullDuplexAttributeCommandInfo);
    Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsPacketRxCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readEthernetNetworkDiagnosticsPacketRxCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster)
                  .readPacketRxCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readEthernetNetworkDiagnosticsPacketRxCountCommandParams);
    readEthernetNetworkDiagnosticsCommandInfo.put(
        "readPacketRxCountAttribute",
        readEthernetNetworkDiagnosticsPacketRxCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsPacketTxCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readEthernetNetworkDiagnosticsPacketTxCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster)
                  .readPacketTxCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readEthernetNetworkDiagnosticsPacketTxCountCommandParams);
    readEthernetNetworkDiagnosticsCommandInfo.put(
        "readPacketTxCountAttribute",
        readEthernetNetworkDiagnosticsPacketTxCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsTxErrCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readEthernetNetworkDiagnosticsTxErrCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster)
                  .readTxErrCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readEthernetNetworkDiagnosticsTxErrCountCommandParams);
    readEthernetNetworkDiagnosticsCommandInfo.put(
        "readTxErrCountAttribute", readEthernetNetworkDiagnosticsTxErrCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsCollisionCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readEthernetNetworkDiagnosticsCollisionCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster)
                  .readCollisionCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readEthernetNetworkDiagnosticsCollisionCountCommandParams);
    readEthernetNetworkDiagnosticsCommandInfo.put(
        "readCollisionCountAttribute",
        readEthernetNetworkDiagnosticsCollisionCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsOverrunCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readEthernetNetworkDiagnosticsOverrunCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster)
                  .readOverrunCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readEthernetNetworkDiagnosticsOverrunCountCommandParams);
    readEthernetNetworkDiagnosticsCommandInfo.put(
        "readOverrunCountAttribute",
        readEthernetNetworkDiagnosticsOverrunCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsCarrierDetectCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readEthernetNetworkDiagnosticsCarrierDetectAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster)
                  .readCarrierDetectAttribute((ChipClusters.BooleanAttributeCallback) callback);
            },
            () -> new DelegatedBooleanAttributeCallback(),
            readEthernetNetworkDiagnosticsCarrierDetectCommandParams);
    readEthernetNetworkDiagnosticsCommandInfo.put(
        "readCarrierDetectAttribute",
        readEthernetNetworkDiagnosticsCarrierDetectAttributeCommandInfo);
    Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsTimeSinceResetCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readEthernetNetworkDiagnosticsTimeSinceResetAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster)
                  .readTimeSinceResetAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readEthernetNetworkDiagnosticsTimeSinceResetCommandParams);
    readEthernetNetworkDiagnosticsCommandInfo.put(
        "readTimeSinceResetAttribute",
        readEthernetNetworkDiagnosticsTimeSinceResetAttributeCommandInfo);
    Map<String, CommandParameterInfo> readEthernetNetworkDiagnosticsClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readEthernetNetworkDiagnosticsClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readEthernetNetworkDiagnosticsClusterRevisionCommandParams);
    readEthernetNetworkDiagnosticsCommandInfo.put(
        "readClusterRevisionAttribute",
        readEthernetNetworkDiagnosticsClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap
        .get("ethernetNetworkDiagnostics")
        .combineCommands(readEthernetNetworkDiagnosticsCommandInfo);
    Map<String, CommandInfo> readFixedLabelCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readFixedLabelLabelListCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readFixedLabelLabelListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FixedLabelCluster) cluster)
                  .readLabelListAttribute(
                      (ChipClusters.FixedLabelCluster.LabelListAttributeCallback) callback);
            },
            () -> new DelegatedLabelListAttributeCallback(),
            readFixedLabelLabelListCommandParams);
    readFixedLabelCommandInfo.put(
        "readLabelListAttribute", readFixedLabelLabelListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readFixedLabelClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readFixedLabelClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FixedLabelCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readFixedLabelClusterRevisionCommandParams);
    readFixedLabelCommandInfo.put(
        "readClusterRevisionAttribute", readFixedLabelClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("fixedLabel").combineCommands(readFixedLabelCommandInfo);
    Map<String, CommandInfo> readFlowMeasurementCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readFlowMeasurementMeasuredValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readFlowMeasurementMeasuredValueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FlowMeasurementCluster) cluster)
                  .readMeasuredValueAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readFlowMeasurementMeasuredValueCommandParams);
    readFlowMeasurementCommandInfo.put(
        "readMeasuredValueAttribute", readFlowMeasurementMeasuredValueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readFlowMeasurementMinMeasuredValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readFlowMeasurementMinMeasuredValueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FlowMeasurementCluster) cluster)
                  .readMinMeasuredValueAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readFlowMeasurementMinMeasuredValueCommandParams);
    readFlowMeasurementCommandInfo.put(
        "readMinMeasuredValueAttribute", readFlowMeasurementMinMeasuredValueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readFlowMeasurementMaxMeasuredValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readFlowMeasurementMaxMeasuredValueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FlowMeasurementCluster) cluster)
                  .readMaxMeasuredValueAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readFlowMeasurementMaxMeasuredValueCommandParams);
    readFlowMeasurementCommandInfo.put(
        "readMaxMeasuredValueAttribute", readFlowMeasurementMaxMeasuredValueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readFlowMeasurementToleranceCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readFlowMeasurementToleranceAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FlowMeasurementCluster) cluster)
                  .readToleranceAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readFlowMeasurementToleranceCommandParams);
    readFlowMeasurementCommandInfo.put(
        "readToleranceAttribute", readFlowMeasurementToleranceAttributeCommandInfo);
    Map<String, CommandParameterInfo> readFlowMeasurementClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readFlowMeasurementClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FlowMeasurementCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readFlowMeasurementClusterRevisionCommandParams);
    readFlowMeasurementCommandInfo.put(
        "readClusterRevisionAttribute", readFlowMeasurementClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("flowMeasurement").combineCommands(readFlowMeasurementCommandInfo);
    Map<String, CommandInfo> readGeneralCommissioningCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readGeneralCommissioningBreadcrumbCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readGeneralCommissioningBreadcrumbAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralCommissioningCluster) cluster)
                  .readBreadcrumbAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readGeneralCommissioningBreadcrumbCommandParams);
    readGeneralCommissioningCommandInfo.put(
        "readBreadcrumbAttribute", readGeneralCommissioningBreadcrumbAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readGeneralCommissioningBasicCommissioningInfoListCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readGeneralCommissioningBasicCommissioningInfoListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralCommissioningCluster) cluster)
                  .readBasicCommissioningInfoListAttribute(
                      (ChipClusters.GeneralCommissioningCluster
                              .BasicCommissioningInfoListAttributeCallback)
                          callback);
            },
            () -> new DelegatedBasicCommissioningInfoListAttributeCallback(),
            readGeneralCommissioningBasicCommissioningInfoListCommandParams);
    readGeneralCommissioningCommandInfo.put(
        "readBasicCommissioningInfoListAttribute",
        readGeneralCommissioningBasicCommissioningInfoListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readGeneralCommissioningClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readGeneralCommissioningClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralCommissioningCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readGeneralCommissioningClusterRevisionCommandParams);
    readGeneralCommissioningCommandInfo.put(
        "readClusterRevisionAttribute",
        readGeneralCommissioningClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("generalCommissioning").combineCommands(readGeneralCommissioningCommandInfo);
    Map<String, CommandInfo> readGeneralDiagnosticsCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readGeneralDiagnosticsNetworkInterfacesCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readGeneralDiagnosticsNetworkInterfacesAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralDiagnosticsCluster) cluster)
                  .readNetworkInterfacesAttribute(
                      (ChipClusters.GeneralDiagnosticsCluster.NetworkInterfacesAttributeCallback)
                          callback);
            },
            () -> new DelegatedNetworkInterfacesAttributeCallback(),
            readGeneralDiagnosticsNetworkInterfacesCommandParams);
    readGeneralDiagnosticsCommandInfo.put(
        "readNetworkInterfacesAttribute",
        readGeneralDiagnosticsNetworkInterfacesAttributeCommandInfo);
    Map<String, CommandParameterInfo> readGeneralDiagnosticsRebootCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readGeneralDiagnosticsRebootCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralDiagnosticsCluster) cluster)
                  .readRebootCountAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readGeneralDiagnosticsRebootCountCommandParams);
    readGeneralDiagnosticsCommandInfo.put(
        "readRebootCountAttribute", readGeneralDiagnosticsRebootCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readGeneralDiagnosticsUpTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readGeneralDiagnosticsUpTimeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralDiagnosticsCluster) cluster)
                  .readUpTimeAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readGeneralDiagnosticsUpTimeCommandParams);
    readGeneralDiagnosticsCommandInfo.put(
        "readUpTimeAttribute", readGeneralDiagnosticsUpTimeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readGeneralDiagnosticsTotalOperationalHoursCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readGeneralDiagnosticsTotalOperationalHoursAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralDiagnosticsCluster) cluster)
                  .readTotalOperationalHoursAttribute(
                      (ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readGeneralDiagnosticsTotalOperationalHoursCommandParams);
    readGeneralDiagnosticsCommandInfo.put(
        "readTotalOperationalHoursAttribute",
        readGeneralDiagnosticsTotalOperationalHoursAttributeCommandInfo);
    Map<String, CommandParameterInfo> readGeneralDiagnosticsBootReasonsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readGeneralDiagnosticsBootReasonsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralDiagnosticsCluster) cluster)
                  .readBootReasonsAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readGeneralDiagnosticsBootReasonsCommandParams);
    readGeneralDiagnosticsCommandInfo.put(
        "readBootReasonsAttribute", readGeneralDiagnosticsBootReasonsAttributeCommandInfo);
    Map<String, CommandParameterInfo> readGeneralDiagnosticsClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readGeneralDiagnosticsClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralDiagnosticsCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readGeneralDiagnosticsClusterRevisionCommandParams);
    readGeneralDiagnosticsCommandInfo.put(
        "readClusterRevisionAttribute", readGeneralDiagnosticsClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("generalDiagnostics").combineCommands(readGeneralDiagnosticsCommandInfo);
    Map<String, CommandInfo> readGroupKeyManagementCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readGroupKeyManagementGroupsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readGroupKeyManagementGroupsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupKeyManagementCluster) cluster)
                  .readGroupsAttribute(
                      (ChipClusters.GroupKeyManagementCluster.GroupsAttributeCallback) callback);
            },
            () -> new DelegatedGroupsAttributeCallback(),
            readGroupKeyManagementGroupsCommandParams);
    readGroupKeyManagementCommandInfo.put(
        "readGroupsAttribute", readGroupKeyManagementGroupsAttributeCommandInfo);
    Map<String, CommandParameterInfo> readGroupKeyManagementGroupKeysCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readGroupKeyManagementGroupKeysAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupKeyManagementCluster) cluster)
                  .readGroupKeysAttribute(
                      (ChipClusters.GroupKeyManagementCluster.GroupKeysAttributeCallback) callback);
            },
            () -> new DelegatedGroupKeysAttributeCallback(),
            readGroupKeyManagementGroupKeysCommandParams);
    readGroupKeyManagementCommandInfo.put(
        "readGroupKeysAttribute", readGroupKeyManagementGroupKeysAttributeCommandInfo);
    Map<String, CommandParameterInfo> readGroupKeyManagementClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readGroupKeyManagementClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupKeyManagementCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readGroupKeyManagementClusterRevisionCommandParams);
    readGroupKeyManagementCommandInfo.put(
        "readClusterRevisionAttribute", readGroupKeyManagementClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("groupKeyManagement").combineCommands(readGroupKeyManagementCommandInfo);
    Map<String, CommandInfo> readGroupsCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readGroupsNameSupportCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readGroupsNameSupportAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .readNameSupportAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readGroupsNameSupportCommandParams);
    readGroupsCommandInfo.put(
        "readNameSupportAttribute", readGroupsNameSupportAttributeCommandInfo);
    Map<String, CommandParameterInfo> readGroupsClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readGroupsClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readGroupsClusterRevisionCommandParams);
    readGroupsCommandInfo.put(
        "readClusterRevisionAttribute", readGroupsClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("groups").combineCommands(readGroupsCommandInfo);
    Map<String, CommandInfo> readIdentifyCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readIdentifyIdentifyTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readIdentifyIdentifyTimeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IdentifyCluster) cluster)
                  .readIdentifyTimeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readIdentifyIdentifyTimeCommandParams);
    readIdentifyCommandInfo.put(
        "readIdentifyTimeAttribute", readIdentifyIdentifyTimeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readIdentifyIdentifyTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readIdentifyIdentifyTypeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IdentifyCluster) cluster)
                  .readIdentifyTypeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readIdentifyIdentifyTypeCommandParams);
    readIdentifyCommandInfo.put(
        "readIdentifyTypeAttribute", readIdentifyIdentifyTypeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readIdentifyClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readIdentifyClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IdentifyCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readIdentifyClusterRevisionCommandParams);
    readIdentifyCommandInfo.put(
        "readClusterRevisionAttribute", readIdentifyClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("identify").combineCommands(readIdentifyCommandInfo);
    Map<String, CommandInfo> readIlluminanceMeasurementCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readIlluminanceMeasurementMeasuredValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readIlluminanceMeasurementMeasuredValueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IlluminanceMeasurementCluster) cluster)
                  .readMeasuredValueAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readIlluminanceMeasurementMeasuredValueCommandParams);
    readIlluminanceMeasurementCommandInfo.put(
        "readMeasuredValueAttribute", readIlluminanceMeasurementMeasuredValueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readIlluminanceMeasurementMinMeasuredValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readIlluminanceMeasurementMinMeasuredValueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IlluminanceMeasurementCluster) cluster)
                  .readMinMeasuredValueAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readIlluminanceMeasurementMinMeasuredValueCommandParams);
    readIlluminanceMeasurementCommandInfo.put(
        "readMinMeasuredValueAttribute",
        readIlluminanceMeasurementMinMeasuredValueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readIlluminanceMeasurementMaxMeasuredValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readIlluminanceMeasurementMaxMeasuredValueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IlluminanceMeasurementCluster) cluster)
                  .readMaxMeasuredValueAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readIlluminanceMeasurementMaxMeasuredValueCommandParams);
    readIlluminanceMeasurementCommandInfo.put(
        "readMaxMeasuredValueAttribute",
        readIlluminanceMeasurementMaxMeasuredValueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readIlluminanceMeasurementToleranceCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readIlluminanceMeasurementToleranceAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IlluminanceMeasurementCluster) cluster)
                  .readToleranceAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readIlluminanceMeasurementToleranceCommandParams);
    readIlluminanceMeasurementCommandInfo.put(
        "readToleranceAttribute", readIlluminanceMeasurementToleranceAttributeCommandInfo);
    Map<String, CommandParameterInfo> readIlluminanceMeasurementLightSensorTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readIlluminanceMeasurementLightSensorTypeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IlluminanceMeasurementCluster) cluster)
                  .readLightSensorTypeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readIlluminanceMeasurementLightSensorTypeCommandParams);
    readIlluminanceMeasurementCommandInfo.put(
        "readLightSensorTypeAttribute",
        readIlluminanceMeasurementLightSensorTypeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readIlluminanceMeasurementClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readIlluminanceMeasurementClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IlluminanceMeasurementCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readIlluminanceMeasurementClusterRevisionCommandParams);
    readIlluminanceMeasurementCommandInfo.put(
        "readClusterRevisionAttribute",
        readIlluminanceMeasurementClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("illuminanceMeasurement").combineCommands(readIlluminanceMeasurementCommandInfo);
    Map<String, CommandInfo> readKeypadInputCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readKeypadInputClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readKeypadInputClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.KeypadInputCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readKeypadInputClusterRevisionCommandParams);
    readKeypadInputCommandInfo.put(
        "readClusterRevisionAttribute", readKeypadInputClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("keypadInput").combineCommands(readKeypadInputCommandInfo);
    Map<String, CommandInfo> readLevelControlCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readLevelControlCurrentLevelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readLevelControlCurrentLevelAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .readCurrentLevelAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readLevelControlCurrentLevelCommandParams);
    readLevelControlCommandInfo.put(
        "readCurrentLevelAttribute", readLevelControlCurrentLevelAttributeCommandInfo);
    Map<String, CommandParameterInfo> readLevelControlRemainingTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readLevelControlRemainingTimeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .readRemainingTimeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readLevelControlRemainingTimeCommandParams);
    readLevelControlCommandInfo.put(
        "readRemainingTimeAttribute", readLevelControlRemainingTimeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readLevelControlMinLevelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readLevelControlMinLevelAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .readMinLevelAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readLevelControlMinLevelCommandParams);
    readLevelControlCommandInfo.put(
        "readMinLevelAttribute", readLevelControlMinLevelAttributeCommandInfo);
    Map<String, CommandParameterInfo> readLevelControlMaxLevelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readLevelControlMaxLevelAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .readMaxLevelAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readLevelControlMaxLevelCommandParams);
    readLevelControlCommandInfo.put(
        "readMaxLevelAttribute", readLevelControlMaxLevelAttributeCommandInfo);
    Map<String, CommandParameterInfo> readLevelControlCurrentFrequencyCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readLevelControlCurrentFrequencyAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .readCurrentFrequencyAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readLevelControlCurrentFrequencyCommandParams);
    readLevelControlCommandInfo.put(
        "readCurrentFrequencyAttribute", readLevelControlCurrentFrequencyAttributeCommandInfo);
    Map<String, CommandParameterInfo> readLevelControlMinFrequencyCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readLevelControlMinFrequencyAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .readMinFrequencyAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readLevelControlMinFrequencyCommandParams);
    readLevelControlCommandInfo.put(
        "readMinFrequencyAttribute", readLevelControlMinFrequencyAttributeCommandInfo);
    Map<String, CommandParameterInfo> readLevelControlMaxFrequencyCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readLevelControlMaxFrequencyAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .readMaxFrequencyAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readLevelControlMaxFrequencyCommandParams);
    readLevelControlCommandInfo.put(
        "readMaxFrequencyAttribute", readLevelControlMaxFrequencyAttributeCommandInfo);
    Map<String, CommandParameterInfo> readLevelControlOptionsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readLevelControlOptionsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .readOptionsAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readLevelControlOptionsCommandParams);
    readLevelControlCommandInfo.put(
        "readOptionsAttribute", readLevelControlOptionsAttributeCommandInfo);
    Map<String, CommandParameterInfo> readLevelControlOnOffTransitionTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readLevelControlOnOffTransitionTimeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .readOnOffTransitionTimeAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readLevelControlOnOffTransitionTimeCommandParams);
    readLevelControlCommandInfo.put(
        "readOnOffTransitionTimeAttribute",
        readLevelControlOnOffTransitionTimeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readLevelControlOnLevelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readLevelControlOnLevelAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .readOnLevelAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readLevelControlOnLevelCommandParams);
    readLevelControlCommandInfo.put(
        "readOnLevelAttribute", readLevelControlOnLevelAttributeCommandInfo);
    Map<String, CommandParameterInfo> readLevelControlOnTransitionTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readLevelControlOnTransitionTimeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .readOnTransitionTimeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readLevelControlOnTransitionTimeCommandParams);
    readLevelControlCommandInfo.put(
        "readOnTransitionTimeAttribute", readLevelControlOnTransitionTimeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readLevelControlOffTransitionTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readLevelControlOffTransitionTimeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .readOffTransitionTimeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readLevelControlOffTransitionTimeCommandParams);
    readLevelControlCommandInfo.put(
        "readOffTransitionTimeAttribute", readLevelControlOffTransitionTimeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readLevelControlDefaultMoveRateCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readLevelControlDefaultMoveRateAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .readDefaultMoveRateAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readLevelControlDefaultMoveRateCommandParams);
    readLevelControlCommandInfo.put(
        "readDefaultMoveRateAttribute", readLevelControlDefaultMoveRateAttributeCommandInfo);
    Map<String, CommandParameterInfo> readLevelControlStartUpCurrentLevelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readLevelControlStartUpCurrentLevelAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .readStartUpCurrentLevelAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readLevelControlStartUpCurrentLevelCommandParams);
    readLevelControlCommandInfo.put(
        "readStartUpCurrentLevelAttribute",
        readLevelControlStartUpCurrentLevelAttributeCommandInfo);
    Map<String, CommandParameterInfo> readLevelControlClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readLevelControlClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readLevelControlClusterRevisionCommandParams);
    readLevelControlCommandInfo.put(
        "readClusterRevisionAttribute", readLevelControlClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("levelControl").combineCommands(readLevelControlCommandInfo);
    Map<String, CommandInfo> readLowPowerCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readLowPowerClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readLowPowerClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LowPowerCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readLowPowerClusterRevisionCommandParams);
    readLowPowerCommandInfo.put(
        "readClusterRevisionAttribute", readLowPowerClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("lowPower").combineCommands(readLowPowerCommandInfo);
    Map<String, CommandInfo> readMediaInputCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readMediaInputMediaInputListCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readMediaInputMediaInputListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaInputCluster) cluster)
                  .readMediaInputListAttribute(
                      (ChipClusters.MediaInputCluster.MediaInputListAttributeCallback) callback);
            },
            () -> new DelegatedMediaInputListAttributeCallback(),
            readMediaInputMediaInputListCommandParams);
    readMediaInputCommandInfo.put(
        "readMediaInputListAttribute", readMediaInputMediaInputListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readMediaInputCurrentMediaInputCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readMediaInputCurrentMediaInputAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaInputCluster) cluster)
                  .readCurrentMediaInputAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readMediaInputCurrentMediaInputCommandParams);
    readMediaInputCommandInfo.put(
        "readCurrentMediaInputAttribute", readMediaInputCurrentMediaInputAttributeCommandInfo);
    Map<String, CommandParameterInfo> readMediaInputClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readMediaInputClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaInputCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readMediaInputClusterRevisionCommandParams);
    readMediaInputCommandInfo.put(
        "readClusterRevisionAttribute", readMediaInputClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("mediaInput").combineCommands(readMediaInputCommandInfo);
    Map<String, CommandInfo> readMediaPlaybackCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readMediaPlaybackPlaybackStateCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readMediaPlaybackPlaybackStateAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .readPlaybackStateAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readMediaPlaybackPlaybackStateCommandParams);
    readMediaPlaybackCommandInfo.put(
        "readPlaybackStateAttribute", readMediaPlaybackPlaybackStateAttributeCommandInfo);
    Map<String, CommandParameterInfo> readMediaPlaybackStartTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readMediaPlaybackStartTimeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .readStartTimeAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readMediaPlaybackStartTimeCommandParams);
    readMediaPlaybackCommandInfo.put(
        "readStartTimeAttribute", readMediaPlaybackStartTimeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readMediaPlaybackDurationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readMediaPlaybackDurationAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .readDurationAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readMediaPlaybackDurationCommandParams);
    readMediaPlaybackCommandInfo.put(
        "readDurationAttribute", readMediaPlaybackDurationAttributeCommandInfo);
    Map<String, CommandParameterInfo> readMediaPlaybackPositionUpdatedAtCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readMediaPlaybackPositionUpdatedAtAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .readPositionUpdatedAtAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readMediaPlaybackPositionUpdatedAtCommandParams);
    readMediaPlaybackCommandInfo.put(
        "readPositionUpdatedAtAttribute", readMediaPlaybackPositionUpdatedAtAttributeCommandInfo);
    Map<String, CommandParameterInfo> readMediaPlaybackPositionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readMediaPlaybackPositionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .readPositionAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readMediaPlaybackPositionCommandParams);
    readMediaPlaybackCommandInfo.put(
        "readPositionAttribute", readMediaPlaybackPositionAttributeCommandInfo);
    Map<String, CommandParameterInfo> readMediaPlaybackPlaybackSpeedCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readMediaPlaybackPlaybackSpeedAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .readPlaybackSpeedAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readMediaPlaybackPlaybackSpeedCommandParams);
    readMediaPlaybackCommandInfo.put(
        "readPlaybackSpeedAttribute", readMediaPlaybackPlaybackSpeedAttributeCommandInfo);
    Map<String, CommandParameterInfo> readMediaPlaybackSeekRangeEndCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readMediaPlaybackSeekRangeEndAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .readSeekRangeEndAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readMediaPlaybackSeekRangeEndCommandParams);
    readMediaPlaybackCommandInfo.put(
        "readSeekRangeEndAttribute", readMediaPlaybackSeekRangeEndAttributeCommandInfo);
    Map<String, CommandParameterInfo> readMediaPlaybackSeekRangeStartCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readMediaPlaybackSeekRangeStartAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .readSeekRangeStartAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readMediaPlaybackSeekRangeStartCommandParams);
    readMediaPlaybackCommandInfo.put(
        "readSeekRangeStartAttribute", readMediaPlaybackSeekRangeStartAttributeCommandInfo);
    Map<String, CommandParameterInfo> readMediaPlaybackClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readMediaPlaybackClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readMediaPlaybackClusterRevisionCommandParams);
    readMediaPlaybackCommandInfo.put(
        "readClusterRevisionAttribute", readMediaPlaybackClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("mediaPlayback").combineCommands(readMediaPlaybackCommandInfo);
    Map<String, CommandInfo> readModeSelectCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readModeSelectCurrentModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readModeSelectCurrentModeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ModeSelectCluster) cluster)
                  .readCurrentModeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readModeSelectCurrentModeCommandParams);
    readModeSelectCommandInfo.put(
        "readCurrentModeAttribute", readModeSelectCurrentModeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readModeSelectSupportedModesCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readModeSelectSupportedModesAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ModeSelectCluster) cluster)
                  .readSupportedModesAttribute(
                      (ChipClusters.ModeSelectCluster.SupportedModesAttributeCallback) callback);
            },
            () -> new DelegatedSupportedModesAttributeCallback(),
            readModeSelectSupportedModesCommandParams);
    readModeSelectCommandInfo.put(
        "readSupportedModesAttribute", readModeSelectSupportedModesAttributeCommandInfo);
    Map<String, CommandParameterInfo> readModeSelectOnModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readModeSelectOnModeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ModeSelectCluster) cluster)
                  .readOnModeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readModeSelectOnModeCommandParams);
    readModeSelectCommandInfo.put("readOnModeAttribute", readModeSelectOnModeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readModeSelectStartUpModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readModeSelectStartUpModeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ModeSelectCluster) cluster)
                  .readStartUpModeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readModeSelectStartUpModeCommandParams);
    readModeSelectCommandInfo.put(
        "readStartUpModeAttribute", readModeSelectStartUpModeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readModeSelectDescriptionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readModeSelectDescriptionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ModeSelectCluster) cluster)
                  .readDescriptionAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readModeSelectDescriptionCommandParams);
    readModeSelectCommandInfo.put(
        "readDescriptionAttribute", readModeSelectDescriptionAttributeCommandInfo);
    Map<String, CommandParameterInfo> readModeSelectClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readModeSelectClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ModeSelectCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readModeSelectClusterRevisionCommandParams);
    readModeSelectCommandInfo.put(
        "readClusterRevisionAttribute", readModeSelectClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("modeSelect").combineCommands(readModeSelectCommandInfo);
    Map<String, CommandInfo> readNetworkCommissioningCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readNetworkCommissioningFeatureMapCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readNetworkCommissioningFeatureMapAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .readFeatureMapAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readNetworkCommissioningFeatureMapCommandParams);
    readNetworkCommissioningCommandInfo.put(
        "readFeatureMapAttribute", readNetworkCommissioningFeatureMapAttributeCommandInfo);
    Map<String, CommandParameterInfo> readNetworkCommissioningClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readNetworkCommissioningClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readNetworkCommissioningClusterRevisionCommandParams);
    readNetworkCommissioningCommandInfo.put(
        "readClusterRevisionAttribute",
        readNetworkCommissioningClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("networkCommissioning").combineCommands(readNetworkCommissioningCommandInfo);
    Map<String, CommandInfo> readOtaSoftwareUpdateProviderCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readOtaSoftwareUpdateProviderClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOtaSoftwareUpdateProviderClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readOtaSoftwareUpdateProviderClusterRevisionCommandParams);
    readOtaSoftwareUpdateProviderCommandInfo.put(
        "readClusterRevisionAttribute",
        readOtaSoftwareUpdateProviderClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap
        .get("otaSoftwareUpdateProvider")
        .combineCommands(readOtaSoftwareUpdateProviderCommandInfo);
    Map<String, CommandInfo> readOtaSoftwareUpdateRequestorCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo>
        readOtaSoftwareUpdateRequestorDefaultOtaProviderCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOtaSoftwareUpdateRequestorDefaultOtaProviderAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OtaSoftwareUpdateRequestorCluster) cluster)
                  .readDefaultOtaProviderAttribute(
                      (ChipClusters.OctetStringAttributeCallback) callback);
            },
            () -> new DelegatedOctetStringAttributeCallback(),
            readOtaSoftwareUpdateRequestorDefaultOtaProviderCommandParams);
    readOtaSoftwareUpdateRequestorCommandInfo.put(
        "readDefaultOtaProviderAttribute",
        readOtaSoftwareUpdateRequestorDefaultOtaProviderAttributeCommandInfo);
    Map<String, CommandParameterInfo> readOtaSoftwareUpdateRequestorUpdatePossibleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOtaSoftwareUpdateRequestorUpdatePossibleAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OtaSoftwareUpdateRequestorCluster) cluster)
                  .readUpdatePossibleAttribute((ChipClusters.BooleanAttributeCallback) callback);
            },
            () -> new DelegatedBooleanAttributeCallback(),
            readOtaSoftwareUpdateRequestorUpdatePossibleCommandParams);
    readOtaSoftwareUpdateRequestorCommandInfo.put(
        "readUpdatePossibleAttribute",
        readOtaSoftwareUpdateRequestorUpdatePossibleAttributeCommandInfo);
    Map<String, CommandParameterInfo> readOtaSoftwareUpdateRequestorClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOtaSoftwareUpdateRequestorClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OtaSoftwareUpdateRequestorCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readOtaSoftwareUpdateRequestorClusterRevisionCommandParams);
    readOtaSoftwareUpdateRequestorCommandInfo.put(
        "readClusterRevisionAttribute",
        readOtaSoftwareUpdateRequestorClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap
        .get("otaSoftwareUpdateRequestor")
        .combineCommands(readOtaSoftwareUpdateRequestorCommandInfo);
    Map<String, CommandInfo> readOccupancySensingCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readOccupancySensingOccupancyCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOccupancySensingOccupancyAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OccupancySensingCluster) cluster)
                  .readOccupancyAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readOccupancySensingOccupancyCommandParams);
    readOccupancySensingCommandInfo.put(
        "readOccupancyAttribute", readOccupancySensingOccupancyAttributeCommandInfo);
    Map<String, CommandParameterInfo> readOccupancySensingOccupancySensorTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOccupancySensingOccupancySensorTypeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OccupancySensingCluster) cluster)
                  .readOccupancySensorTypeAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readOccupancySensingOccupancySensorTypeCommandParams);
    readOccupancySensingCommandInfo.put(
        "readOccupancySensorTypeAttribute",
        readOccupancySensingOccupancySensorTypeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readOccupancySensingOccupancySensorTypeBitmapCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOccupancySensingOccupancySensorTypeBitmapAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OccupancySensingCluster) cluster)
                  .readOccupancySensorTypeBitmapAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readOccupancySensingOccupancySensorTypeBitmapCommandParams);
    readOccupancySensingCommandInfo.put(
        "readOccupancySensorTypeBitmapAttribute",
        readOccupancySensingOccupancySensorTypeBitmapAttributeCommandInfo);
    Map<String, CommandParameterInfo> readOccupancySensingClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOccupancySensingClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OccupancySensingCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readOccupancySensingClusterRevisionCommandParams);
    readOccupancySensingCommandInfo.put(
        "readClusterRevisionAttribute", readOccupancySensingClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("occupancySensing").combineCommands(readOccupancySensingCommandInfo);
    Map<String, CommandInfo> readOnOffCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readOnOffOnOffCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOnOffOnOffAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .readOnOffAttribute((ChipClusters.BooleanAttributeCallback) callback);
            },
            () -> new DelegatedBooleanAttributeCallback(),
            readOnOffOnOffCommandParams);
    readOnOffCommandInfo.put("readOnOffAttribute", readOnOffOnOffAttributeCommandInfo);
    Map<String, CommandParameterInfo> readOnOffGlobalSceneControlCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOnOffGlobalSceneControlAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .readGlobalSceneControlAttribute(
                      (ChipClusters.BooleanAttributeCallback) callback);
            },
            () -> new DelegatedBooleanAttributeCallback(),
            readOnOffGlobalSceneControlCommandParams);
    readOnOffCommandInfo.put(
        "readGlobalSceneControlAttribute", readOnOffGlobalSceneControlAttributeCommandInfo);
    Map<String, CommandParameterInfo> readOnOffOnTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOnOffOnTimeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .readOnTimeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readOnOffOnTimeCommandParams);
    readOnOffCommandInfo.put("readOnTimeAttribute", readOnOffOnTimeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readOnOffOffWaitTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOnOffOffWaitTimeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .readOffWaitTimeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readOnOffOffWaitTimeCommandParams);
    readOnOffCommandInfo.put("readOffWaitTimeAttribute", readOnOffOffWaitTimeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readOnOffStartUpOnOffCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOnOffStartUpOnOffAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .readStartUpOnOffAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readOnOffStartUpOnOffCommandParams);
    readOnOffCommandInfo.put(
        "readStartUpOnOffAttribute", readOnOffStartUpOnOffAttributeCommandInfo);
    Map<String, CommandParameterInfo> readOnOffFeatureMapCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOnOffFeatureMapAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .readFeatureMapAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readOnOffFeatureMapCommandParams);
    readOnOffCommandInfo.put("readFeatureMapAttribute", readOnOffFeatureMapAttributeCommandInfo);
    Map<String, CommandParameterInfo> readOnOffClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOnOffClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readOnOffClusterRevisionCommandParams);
    readOnOffCommandInfo.put(
        "readClusterRevisionAttribute", readOnOffClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("onOff").combineCommands(readOnOffCommandInfo);
    Map<String, CommandInfo> readOnOffSwitchConfigurationCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readOnOffSwitchConfigurationSwitchTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOnOffSwitchConfigurationSwitchTypeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffSwitchConfigurationCluster) cluster)
                  .readSwitchTypeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readOnOffSwitchConfigurationSwitchTypeCommandParams);
    readOnOffSwitchConfigurationCommandInfo.put(
        "readSwitchTypeAttribute", readOnOffSwitchConfigurationSwitchTypeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readOnOffSwitchConfigurationSwitchActionsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOnOffSwitchConfigurationSwitchActionsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffSwitchConfigurationCluster) cluster)
                  .readSwitchActionsAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readOnOffSwitchConfigurationSwitchActionsCommandParams);
    readOnOffSwitchConfigurationCommandInfo.put(
        "readSwitchActionsAttribute",
        readOnOffSwitchConfigurationSwitchActionsAttributeCommandInfo);
    Map<String, CommandParameterInfo> readOnOffSwitchConfigurationClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOnOffSwitchConfigurationClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffSwitchConfigurationCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readOnOffSwitchConfigurationClusterRevisionCommandParams);
    readOnOffSwitchConfigurationCommandInfo.put(
        "readClusterRevisionAttribute",
        readOnOffSwitchConfigurationClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap
        .get("onOffSwitchConfiguration")
        .combineCommands(readOnOffSwitchConfigurationCommandInfo);
    Map<String, CommandInfo> readOperationalCredentialsCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readOperationalCredentialsFabricsListCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOperationalCredentialsFabricsListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .readFabricsListAttribute(
                      (ChipClusters.OperationalCredentialsCluster.FabricsListAttributeCallback)
                          callback);
            },
            () -> new DelegatedFabricsListAttributeCallback(),
            readOperationalCredentialsFabricsListCommandParams);
    readOperationalCredentialsCommandInfo.put(
        "readFabricsListAttribute", readOperationalCredentialsFabricsListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readOperationalCredentialsSupportedFabricsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOperationalCredentialsSupportedFabricsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .readSupportedFabricsAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readOperationalCredentialsSupportedFabricsCommandParams);
    readOperationalCredentialsCommandInfo.put(
        "readSupportedFabricsAttribute",
        readOperationalCredentialsSupportedFabricsAttributeCommandInfo);
    Map<String, CommandParameterInfo> readOperationalCredentialsCommissionedFabricsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOperationalCredentialsCommissionedFabricsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .readCommissionedFabricsAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readOperationalCredentialsCommissionedFabricsCommandParams);
    readOperationalCredentialsCommandInfo.put(
        "readCommissionedFabricsAttribute",
        readOperationalCredentialsCommissionedFabricsAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readOperationalCredentialsTrustedRootCertificatesCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOperationalCredentialsTrustedRootCertificatesAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .readTrustedRootCertificatesAttribute(
                      (ChipClusters.OperationalCredentialsCluster
                              .TrustedRootCertificatesAttributeCallback)
                          callback);
            },
            () -> new DelegatedTrustedRootCertificatesAttributeCallback(),
            readOperationalCredentialsTrustedRootCertificatesCommandParams);
    readOperationalCredentialsCommandInfo.put(
        "readTrustedRootCertificatesAttribute",
        readOperationalCredentialsTrustedRootCertificatesAttributeCommandInfo);
    Map<String, CommandParameterInfo> readOperationalCredentialsCurrentFabricIndexCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOperationalCredentialsCurrentFabricIndexAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .readCurrentFabricIndexAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readOperationalCredentialsCurrentFabricIndexCommandParams);
    readOperationalCredentialsCommandInfo.put(
        "readCurrentFabricIndexAttribute",
        readOperationalCredentialsCurrentFabricIndexAttributeCommandInfo);
    Map<String, CommandParameterInfo> readOperationalCredentialsClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readOperationalCredentialsClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readOperationalCredentialsClusterRevisionCommandParams);
    readOperationalCredentialsCommandInfo.put(
        "readClusterRevisionAttribute",
        readOperationalCredentialsClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("operationalCredentials").combineCommands(readOperationalCredentialsCommandInfo);
    Map<String, CommandInfo> readPowerSourceCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readPowerSourceStatusCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPowerSourceStatusAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PowerSourceCluster) cluster)
                  .readStatusAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPowerSourceStatusCommandParams);
    readPowerSourceCommandInfo.put(
        "readStatusAttribute", readPowerSourceStatusAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPowerSourceOrderCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPowerSourceOrderAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PowerSourceCluster) cluster)
                  .readOrderAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPowerSourceOrderCommandParams);
    readPowerSourceCommandInfo.put("readOrderAttribute", readPowerSourceOrderAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPowerSourceDescriptionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPowerSourceDescriptionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PowerSourceCluster) cluster)
                  .readDescriptionAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readPowerSourceDescriptionCommandParams);
    readPowerSourceCommandInfo.put(
        "readDescriptionAttribute", readPowerSourceDescriptionAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPowerSourceBatteryVoltageCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPowerSourceBatteryVoltageAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PowerSourceCluster) cluster)
                  .readBatteryVoltageAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readPowerSourceBatteryVoltageCommandParams);
    readPowerSourceCommandInfo.put(
        "readBatteryVoltageAttribute", readPowerSourceBatteryVoltageAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPowerSourceBatteryPercentRemainingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPowerSourceBatteryPercentRemainingAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PowerSourceCluster) cluster)
                  .readBatteryPercentRemainingAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPowerSourceBatteryPercentRemainingCommandParams);
    readPowerSourceCommandInfo.put(
        "readBatteryPercentRemainingAttribute",
        readPowerSourceBatteryPercentRemainingAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPowerSourceBatteryTimeRemainingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPowerSourceBatteryTimeRemainingAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PowerSourceCluster) cluster)
                  .readBatteryTimeRemainingAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readPowerSourceBatteryTimeRemainingCommandParams);
    readPowerSourceCommandInfo.put(
        "readBatteryTimeRemainingAttribute",
        readPowerSourceBatteryTimeRemainingAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPowerSourceBatteryChargeLevelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPowerSourceBatteryChargeLevelAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PowerSourceCluster) cluster)
                  .readBatteryChargeLevelAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPowerSourceBatteryChargeLevelCommandParams);
    readPowerSourceCommandInfo.put(
        "readBatteryChargeLevelAttribute", readPowerSourceBatteryChargeLevelAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPowerSourceActiveBatteryFaultsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPowerSourceActiveBatteryFaultsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PowerSourceCluster) cluster)
                  .readActiveBatteryFaultsAttribute(
                      (ChipClusters.PowerSourceCluster.ActiveBatteryFaultsAttributeCallback)
                          callback);
            },
            () -> new DelegatedActiveBatteryFaultsAttributeCallback(),
            readPowerSourceActiveBatteryFaultsCommandParams);
    readPowerSourceCommandInfo.put(
        "readActiveBatteryFaultsAttribute", readPowerSourceActiveBatteryFaultsAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPowerSourceBatteryChargeStateCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPowerSourceBatteryChargeStateAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PowerSourceCluster) cluster)
                  .readBatteryChargeStateAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPowerSourceBatteryChargeStateCommandParams);
    readPowerSourceCommandInfo.put(
        "readBatteryChargeStateAttribute", readPowerSourceBatteryChargeStateAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPowerSourceFeatureMapCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPowerSourceFeatureMapAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PowerSourceCluster) cluster)
                  .readFeatureMapAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readPowerSourceFeatureMapCommandParams);
    readPowerSourceCommandInfo.put(
        "readFeatureMapAttribute", readPowerSourceFeatureMapAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPowerSourceClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPowerSourceClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PowerSourceCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPowerSourceClusterRevisionCommandParams);
    readPowerSourceCommandInfo.put(
        "readClusterRevisionAttribute", readPowerSourceClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("powerSource").combineCommands(readPowerSourceCommandInfo);
    Map<String, CommandInfo> readPressureMeasurementCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readPressureMeasurementMeasuredValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPressureMeasurementMeasuredValueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PressureMeasurementCluster) cluster)
                  .readMeasuredValueAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPressureMeasurementMeasuredValueCommandParams);
    readPressureMeasurementCommandInfo.put(
        "readMeasuredValueAttribute", readPressureMeasurementMeasuredValueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPressureMeasurementMinMeasuredValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPressureMeasurementMinMeasuredValueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PressureMeasurementCluster) cluster)
                  .readMinMeasuredValueAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPressureMeasurementMinMeasuredValueCommandParams);
    readPressureMeasurementCommandInfo.put(
        "readMinMeasuredValueAttribute",
        readPressureMeasurementMinMeasuredValueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPressureMeasurementMaxMeasuredValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPressureMeasurementMaxMeasuredValueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PressureMeasurementCluster) cluster)
                  .readMaxMeasuredValueAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPressureMeasurementMaxMeasuredValueCommandParams);
    readPressureMeasurementCommandInfo.put(
        "readMaxMeasuredValueAttribute",
        readPressureMeasurementMaxMeasuredValueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPressureMeasurementClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPressureMeasurementClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PressureMeasurementCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPressureMeasurementClusterRevisionCommandParams);
    readPressureMeasurementCommandInfo.put(
        "readClusterRevisionAttribute", readPressureMeasurementClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("pressureMeasurement").combineCommands(readPressureMeasurementCommandInfo);
    Map<String, CommandInfo> readPumpConfigurationAndControlCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlMaxPressureCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlMaxPressureAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readMaxPressureAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlMaxPressureCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readMaxPressureAttribute", readPumpConfigurationAndControlMaxPressureAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlMaxSpeedCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlMaxSpeedAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readMaxSpeedAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlMaxSpeedCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readMaxSpeedAttribute", readPumpConfigurationAndControlMaxSpeedAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlMaxFlowCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlMaxFlowAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readMaxFlowAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlMaxFlowCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readMaxFlowAttribute", readPumpConfigurationAndControlMaxFlowAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlMinConstPressureCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlMinConstPressureAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readMinConstPressureAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlMinConstPressureCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readMinConstPressureAttribute",
        readPumpConfigurationAndControlMinConstPressureAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlMaxConstPressureCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlMaxConstPressureAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readMaxConstPressureAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlMaxConstPressureCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readMaxConstPressureAttribute",
        readPumpConfigurationAndControlMaxConstPressureAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlMinCompPressureCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlMinCompPressureAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readMinCompPressureAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlMinCompPressureCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readMinCompPressureAttribute",
        readPumpConfigurationAndControlMinCompPressureAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlMaxCompPressureCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlMaxCompPressureAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readMaxCompPressureAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlMaxCompPressureCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readMaxCompPressureAttribute",
        readPumpConfigurationAndControlMaxCompPressureAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlMinConstSpeedCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlMinConstSpeedAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readMinConstSpeedAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlMinConstSpeedCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readMinConstSpeedAttribute",
        readPumpConfigurationAndControlMinConstSpeedAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlMaxConstSpeedCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlMaxConstSpeedAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readMaxConstSpeedAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlMaxConstSpeedCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readMaxConstSpeedAttribute",
        readPumpConfigurationAndControlMaxConstSpeedAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlMinConstFlowCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlMinConstFlowAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readMinConstFlowAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlMinConstFlowCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readMinConstFlowAttribute",
        readPumpConfigurationAndControlMinConstFlowAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlMaxConstFlowCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlMaxConstFlowAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readMaxConstFlowAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlMaxConstFlowCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readMaxConstFlowAttribute",
        readPumpConfigurationAndControlMaxConstFlowAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlMinConstTempCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlMinConstTempAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readMinConstTempAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlMinConstTempCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readMinConstTempAttribute",
        readPumpConfigurationAndControlMinConstTempAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlMaxConstTempCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlMaxConstTempAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readMaxConstTempAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlMaxConstTempCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readMaxConstTempAttribute",
        readPumpConfigurationAndControlMaxConstTempAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlPumpStatusCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlPumpStatusAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readPumpStatusAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlPumpStatusCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readPumpStatusAttribute", readPumpConfigurationAndControlPumpStatusAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readPumpConfigurationAndControlEffectiveOperationModeCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlEffectiveOperationModeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readEffectiveOperationModeAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlEffectiveOperationModeCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readEffectiveOperationModeAttribute",
        readPumpConfigurationAndControlEffectiveOperationModeAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readPumpConfigurationAndControlEffectiveControlModeCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlEffectiveControlModeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readEffectiveControlModeAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlEffectiveControlModeCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readEffectiveControlModeAttribute",
        readPumpConfigurationAndControlEffectiveControlModeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlCapacityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlCapacityAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readCapacityAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlCapacityCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readCapacityAttribute", readPumpConfigurationAndControlCapacityAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlSpeedCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlSpeedAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readSpeedAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlSpeedCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readSpeedAttribute", readPumpConfigurationAndControlSpeedAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readPumpConfigurationAndControlLifetimeEnergyConsumedCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlLifetimeEnergyConsumedAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readLifetimeEnergyConsumedAttribute(
                      (ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readPumpConfigurationAndControlLifetimeEnergyConsumedCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readLifetimeEnergyConsumedAttribute",
        readPumpConfigurationAndControlLifetimeEnergyConsumedAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlOperationModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlOperationModeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readOperationModeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlOperationModeCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readOperationModeAttribute",
        readPumpConfigurationAndControlOperationModeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlControlModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlControlModeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readControlModeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlControlModeCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readControlModeAttribute", readPumpConfigurationAndControlControlModeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlAlarmMaskCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlAlarmMaskAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readAlarmMaskAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlAlarmMaskCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readAlarmMaskAttribute", readPumpConfigurationAndControlAlarmMaskAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlFeatureMapCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlFeatureMapAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readFeatureMapAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readPumpConfigurationAndControlFeatureMapCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readFeatureMapAttribute", readPumpConfigurationAndControlFeatureMapAttributeCommandInfo);
    Map<String, CommandParameterInfo> readPumpConfigurationAndControlClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readPumpConfigurationAndControlClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readPumpConfigurationAndControlClusterRevisionCommandParams);
    readPumpConfigurationAndControlCommandInfo.put(
        "readClusterRevisionAttribute",
        readPumpConfigurationAndControlClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap
        .get("pumpConfigurationAndControl")
        .combineCommands(readPumpConfigurationAndControlCommandInfo);
    Map<String, CommandInfo> readRelativeHumidityMeasurementCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readRelativeHumidityMeasurementMeasuredValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readRelativeHumidityMeasurementMeasuredValueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.RelativeHumidityMeasurementCluster) cluster)
                  .readMeasuredValueAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readRelativeHumidityMeasurementMeasuredValueCommandParams);
    readRelativeHumidityMeasurementCommandInfo.put(
        "readMeasuredValueAttribute",
        readRelativeHumidityMeasurementMeasuredValueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readRelativeHumidityMeasurementMinMeasuredValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readRelativeHumidityMeasurementMinMeasuredValueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.RelativeHumidityMeasurementCluster) cluster)
                  .readMinMeasuredValueAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readRelativeHumidityMeasurementMinMeasuredValueCommandParams);
    readRelativeHumidityMeasurementCommandInfo.put(
        "readMinMeasuredValueAttribute",
        readRelativeHumidityMeasurementMinMeasuredValueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readRelativeHumidityMeasurementMaxMeasuredValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readRelativeHumidityMeasurementMaxMeasuredValueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.RelativeHumidityMeasurementCluster) cluster)
                  .readMaxMeasuredValueAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readRelativeHumidityMeasurementMaxMeasuredValueCommandParams);
    readRelativeHumidityMeasurementCommandInfo.put(
        "readMaxMeasuredValueAttribute",
        readRelativeHumidityMeasurementMaxMeasuredValueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readRelativeHumidityMeasurementToleranceCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readRelativeHumidityMeasurementToleranceAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.RelativeHumidityMeasurementCluster) cluster)
                  .readToleranceAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readRelativeHumidityMeasurementToleranceCommandParams);
    readRelativeHumidityMeasurementCommandInfo.put(
        "readToleranceAttribute", readRelativeHumidityMeasurementToleranceAttributeCommandInfo);
    Map<String, CommandParameterInfo> readRelativeHumidityMeasurementClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readRelativeHumidityMeasurementClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.RelativeHumidityMeasurementCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readRelativeHumidityMeasurementClusterRevisionCommandParams);
    readRelativeHumidityMeasurementCommandInfo.put(
        "readClusterRevisionAttribute",
        readRelativeHumidityMeasurementClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap
        .get("relativeHumidityMeasurement")
        .combineCommands(readRelativeHumidityMeasurementCommandInfo);
    Map<String, CommandInfo> readScenesCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readScenesSceneCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readScenesSceneCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .readSceneCountAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readScenesSceneCountCommandParams);
    readScenesCommandInfo.put("readSceneCountAttribute", readScenesSceneCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readScenesCurrentSceneCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readScenesCurrentSceneAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .readCurrentSceneAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readScenesCurrentSceneCommandParams);
    readScenesCommandInfo.put(
        "readCurrentSceneAttribute", readScenesCurrentSceneAttributeCommandInfo);
    Map<String, CommandParameterInfo> readScenesCurrentGroupCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readScenesCurrentGroupAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .readCurrentGroupAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readScenesCurrentGroupCommandParams);
    readScenesCommandInfo.put(
        "readCurrentGroupAttribute", readScenesCurrentGroupAttributeCommandInfo);
    Map<String, CommandParameterInfo> readScenesSceneValidCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readScenesSceneValidAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .readSceneValidAttribute((ChipClusters.BooleanAttributeCallback) callback);
            },
            () -> new DelegatedBooleanAttributeCallback(),
            readScenesSceneValidCommandParams);
    readScenesCommandInfo.put("readSceneValidAttribute", readScenesSceneValidAttributeCommandInfo);
    Map<String, CommandParameterInfo> readScenesNameSupportCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readScenesNameSupportAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .readNameSupportAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readScenesNameSupportCommandParams);
    readScenesCommandInfo.put(
        "readNameSupportAttribute", readScenesNameSupportAttributeCommandInfo);
    Map<String, CommandParameterInfo> readScenesClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readScenesClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readScenesClusterRevisionCommandParams);
    readScenesCommandInfo.put(
        "readClusterRevisionAttribute", readScenesClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("scenes").combineCommands(readScenesCommandInfo);
    Map<String, CommandInfo> readSoftwareDiagnosticsCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readSoftwareDiagnosticsThreadMetricsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readSoftwareDiagnosticsThreadMetricsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.SoftwareDiagnosticsCluster) cluster)
                  .readThreadMetricsAttribute(
                      (ChipClusters.SoftwareDiagnosticsCluster.ThreadMetricsAttributeCallback)
                          callback);
            },
            () -> new DelegatedThreadMetricsAttributeCallback(),
            readSoftwareDiagnosticsThreadMetricsCommandParams);
    readSoftwareDiagnosticsCommandInfo.put(
        "readThreadMetricsAttribute", readSoftwareDiagnosticsThreadMetricsAttributeCommandInfo);
    Map<String, CommandParameterInfo> readSoftwareDiagnosticsCurrentHeapFreeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readSoftwareDiagnosticsCurrentHeapFreeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.SoftwareDiagnosticsCluster) cluster)
                  .readCurrentHeapFreeAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readSoftwareDiagnosticsCurrentHeapFreeCommandParams);
    readSoftwareDiagnosticsCommandInfo.put(
        "readCurrentHeapFreeAttribute", readSoftwareDiagnosticsCurrentHeapFreeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readSoftwareDiagnosticsCurrentHeapUsedCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readSoftwareDiagnosticsCurrentHeapUsedAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.SoftwareDiagnosticsCluster) cluster)
                  .readCurrentHeapUsedAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readSoftwareDiagnosticsCurrentHeapUsedCommandParams);
    readSoftwareDiagnosticsCommandInfo.put(
        "readCurrentHeapUsedAttribute", readSoftwareDiagnosticsCurrentHeapUsedAttributeCommandInfo);
    Map<String, CommandParameterInfo> readSoftwareDiagnosticsCurrentHeapHighWatermarkCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readSoftwareDiagnosticsCurrentHeapHighWatermarkAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.SoftwareDiagnosticsCluster) cluster)
                  .readCurrentHeapHighWatermarkAttribute(
                      (ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readSoftwareDiagnosticsCurrentHeapHighWatermarkCommandParams);
    readSoftwareDiagnosticsCommandInfo.put(
        "readCurrentHeapHighWatermarkAttribute",
        readSoftwareDiagnosticsCurrentHeapHighWatermarkAttributeCommandInfo);
    Map<String, CommandParameterInfo> readSoftwareDiagnosticsClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readSoftwareDiagnosticsClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.SoftwareDiagnosticsCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readSoftwareDiagnosticsClusterRevisionCommandParams);
    readSoftwareDiagnosticsCommandInfo.put(
        "readClusterRevisionAttribute", readSoftwareDiagnosticsClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("softwareDiagnostics").combineCommands(readSoftwareDiagnosticsCommandInfo);
    Map<String, CommandInfo> readSwitchCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readSwitchNumberOfPositionsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readSwitchNumberOfPositionsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.SwitchCluster) cluster)
                  .readNumberOfPositionsAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readSwitchNumberOfPositionsCommandParams);
    readSwitchCommandInfo.put(
        "readNumberOfPositionsAttribute", readSwitchNumberOfPositionsAttributeCommandInfo);
    Map<String, CommandParameterInfo> readSwitchCurrentPositionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readSwitchCurrentPositionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.SwitchCluster) cluster)
                  .readCurrentPositionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readSwitchCurrentPositionCommandParams);
    readSwitchCommandInfo.put(
        "readCurrentPositionAttribute", readSwitchCurrentPositionAttributeCommandInfo);
    Map<String, CommandParameterInfo> readSwitchMultiPressMaxCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readSwitchMultiPressMaxAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.SwitchCluster) cluster)
                  .readMultiPressMaxAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readSwitchMultiPressMaxCommandParams);
    readSwitchCommandInfo.put(
        "readMultiPressMaxAttribute", readSwitchMultiPressMaxAttributeCommandInfo);
    Map<String, CommandParameterInfo> readSwitchFeatureMapCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readSwitchFeatureMapAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.SwitchCluster) cluster)
                  .readFeatureMapAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readSwitchFeatureMapCommandParams);
    readSwitchCommandInfo.put("readFeatureMapAttribute", readSwitchFeatureMapAttributeCommandInfo);
    Map<String, CommandParameterInfo> readSwitchClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readSwitchClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.SwitchCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readSwitchClusterRevisionCommandParams);
    readSwitchCommandInfo.put(
        "readClusterRevisionAttribute", readSwitchClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("switch").combineCommands(readSwitchCommandInfo);
    Map<String, CommandInfo> readTvChannelCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readTvChannelTvChannelListCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTvChannelTvChannelListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TvChannelCluster) cluster)
                  .readTvChannelListAttribute(
                      (ChipClusters.TvChannelCluster.TvChannelListAttributeCallback) callback);
            },
            () -> new DelegatedTvChannelListAttributeCallback(),
            readTvChannelTvChannelListCommandParams);
    readTvChannelCommandInfo.put(
        "readTvChannelListAttribute", readTvChannelTvChannelListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTvChannelTvChannelLineupCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTvChannelTvChannelLineupAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TvChannelCluster) cluster)
                  .readTvChannelLineupAttribute(
                      (ChipClusters.OctetStringAttributeCallback) callback);
            },
            () -> new DelegatedOctetStringAttributeCallback(),
            readTvChannelTvChannelLineupCommandParams);
    readTvChannelCommandInfo.put(
        "readTvChannelLineupAttribute", readTvChannelTvChannelLineupAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTvChannelCurrentTvChannelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTvChannelCurrentTvChannelAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TvChannelCluster) cluster)
                  .readCurrentTvChannelAttribute(
                      (ChipClusters.OctetStringAttributeCallback) callback);
            },
            () -> new DelegatedOctetStringAttributeCallback(),
            readTvChannelCurrentTvChannelCommandParams);
    readTvChannelCommandInfo.put(
        "readCurrentTvChannelAttribute", readTvChannelCurrentTvChannelAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTvChannelClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTvChannelClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TvChannelCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readTvChannelClusterRevisionCommandParams);
    readTvChannelCommandInfo.put(
        "readClusterRevisionAttribute", readTvChannelClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("tvChannel").combineCommands(readTvChannelCommandInfo);
    Map<String, CommandInfo> readTargetNavigatorCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readTargetNavigatorTargetNavigatorListCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTargetNavigatorTargetNavigatorListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TargetNavigatorCluster) cluster)
                  .readTargetNavigatorListAttribute(
                      (ChipClusters.TargetNavigatorCluster.TargetNavigatorListAttributeCallback)
                          callback);
            },
            () -> new DelegatedTargetNavigatorListAttributeCallback(),
            readTargetNavigatorTargetNavigatorListCommandParams);
    readTargetNavigatorCommandInfo.put(
        "readTargetNavigatorListAttribute",
        readTargetNavigatorTargetNavigatorListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTargetNavigatorClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTargetNavigatorClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TargetNavigatorCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readTargetNavigatorClusterRevisionCommandParams);
    readTargetNavigatorCommandInfo.put(
        "readClusterRevisionAttribute", readTargetNavigatorClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("targetNavigator").combineCommands(readTargetNavigatorCommandInfo);
    Map<String, CommandInfo> readTemperatureMeasurementCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readTemperatureMeasurementMeasuredValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTemperatureMeasurementMeasuredValueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TemperatureMeasurementCluster) cluster)
                  .readMeasuredValueAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readTemperatureMeasurementMeasuredValueCommandParams);
    readTemperatureMeasurementCommandInfo.put(
        "readMeasuredValueAttribute", readTemperatureMeasurementMeasuredValueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTemperatureMeasurementMinMeasuredValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTemperatureMeasurementMinMeasuredValueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TemperatureMeasurementCluster) cluster)
                  .readMinMeasuredValueAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readTemperatureMeasurementMinMeasuredValueCommandParams);
    readTemperatureMeasurementCommandInfo.put(
        "readMinMeasuredValueAttribute",
        readTemperatureMeasurementMinMeasuredValueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTemperatureMeasurementMaxMeasuredValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTemperatureMeasurementMaxMeasuredValueAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TemperatureMeasurementCluster) cluster)
                  .readMaxMeasuredValueAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readTemperatureMeasurementMaxMeasuredValueCommandParams);
    readTemperatureMeasurementCommandInfo.put(
        "readMaxMeasuredValueAttribute",
        readTemperatureMeasurementMaxMeasuredValueAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTemperatureMeasurementToleranceCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTemperatureMeasurementToleranceAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TemperatureMeasurementCluster) cluster)
                  .readToleranceAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readTemperatureMeasurementToleranceCommandParams);
    readTemperatureMeasurementCommandInfo.put(
        "readToleranceAttribute", readTemperatureMeasurementToleranceAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTemperatureMeasurementClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTemperatureMeasurementClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TemperatureMeasurementCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readTemperatureMeasurementClusterRevisionCommandParams);
    readTemperatureMeasurementCommandInfo.put(
        "readClusterRevisionAttribute",
        readTemperatureMeasurementClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("temperatureMeasurement").combineCommands(readTemperatureMeasurementCommandInfo);
    Map<String, CommandInfo> readTestClusterCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readTestClusterBooleanCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterBooleanAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readBooleanAttribute((ChipClusters.BooleanAttributeCallback) callback);
            },
            () -> new DelegatedBooleanAttributeCallback(),
            readTestClusterBooleanCommandParams);
    readTestClusterCommandInfo.put(
        "readBooleanAttribute", readTestClusterBooleanAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterBitmap8CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterBitmap8AttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readBitmap8Attribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readTestClusterBitmap8CommandParams);
    readTestClusterCommandInfo.put(
        "readBitmap8Attribute", readTestClusterBitmap8AttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterBitmap16CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterBitmap16AttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readBitmap16Attribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readTestClusterBitmap16CommandParams);
    readTestClusterCommandInfo.put(
        "readBitmap16Attribute", readTestClusterBitmap16AttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterBitmap32CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterBitmap32AttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readBitmap32Attribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readTestClusterBitmap32CommandParams);
    readTestClusterCommandInfo.put(
        "readBitmap32Attribute", readTestClusterBitmap32AttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterBitmap64CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterBitmap64AttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readBitmap64Attribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readTestClusterBitmap64CommandParams);
    readTestClusterCommandInfo.put(
        "readBitmap64Attribute", readTestClusterBitmap64AttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterInt8uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterInt8uAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readInt8uAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readTestClusterInt8uCommandParams);
    readTestClusterCommandInfo.put("readInt8uAttribute", readTestClusterInt8uAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterInt16uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterInt16uAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readInt16uAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readTestClusterInt16uCommandParams);
    readTestClusterCommandInfo.put(
        "readInt16uAttribute", readTestClusterInt16uAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterInt32uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterInt32uAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readInt32uAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readTestClusterInt32uCommandParams);
    readTestClusterCommandInfo.put(
        "readInt32uAttribute", readTestClusterInt32uAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterInt64uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterInt64uAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readInt64uAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readTestClusterInt64uCommandParams);
    readTestClusterCommandInfo.put(
        "readInt64uAttribute", readTestClusterInt64uAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterInt8sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterInt8sAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readInt8sAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readTestClusterInt8sCommandParams);
    readTestClusterCommandInfo.put("readInt8sAttribute", readTestClusterInt8sAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterInt16sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterInt16sAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readInt16sAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readTestClusterInt16sCommandParams);
    readTestClusterCommandInfo.put(
        "readInt16sAttribute", readTestClusterInt16sAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterInt32sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterInt32sAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readInt32sAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readTestClusterInt32sCommandParams);
    readTestClusterCommandInfo.put(
        "readInt32sAttribute", readTestClusterInt32sAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterInt64sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterInt64sAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readInt64sAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readTestClusterInt64sCommandParams);
    readTestClusterCommandInfo.put(
        "readInt64sAttribute", readTestClusterInt64sAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterEnum8CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterEnum8AttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readEnum8Attribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readTestClusterEnum8CommandParams);
    readTestClusterCommandInfo.put("readEnum8Attribute", readTestClusterEnum8AttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterEnum16CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterEnum16AttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readEnum16Attribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readTestClusterEnum16CommandParams);
    readTestClusterCommandInfo.put(
        "readEnum16Attribute", readTestClusterEnum16AttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterOctetStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterOctetStringAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readOctetStringAttribute((ChipClusters.OctetStringAttributeCallback) callback);
            },
            () -> new DelegatedOctetStringAttributeCallback(),
            readTestClusterOctetStringCommandParams);
    readTestClusterCommandInfo.put(
        "readOctetStringAttribute", readTestClusterOctetStringAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterListInt8uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterListInt8uAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readListInt8uAttribute(
                      (ChipClusters.TestClusterCluster.ListInt8uAttributeCallback) callback);
            },
            () -> new DelegatedListInt8uAttributeCallback(),
            readTestClusterListInt8uCommandParams);
    readTestClusterCommandInfo.put(
        "readListInt8uAttribute", readTestClusterListInt8uAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterListOctetStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterListOctetStringAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readListOctetStringAttribute(
                      (ChipClusters.TestClusterCluster.ListOctetStringAttributeCallback) callback);
            },
            () -> new DelegatedListOctetStringAttributeCallback(),
            readTestClusterListOctetStringCommandParams);
    readTestClusterCommandInfo.put(
        "readListOctetStringAttribute", readTestClusterListOctetStringAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterListStructOctetStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterListStructOctetStringAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readListStructOctetStringAttribute(
                      (ChipClusters.TestClusterCluster.ListStructOctetStringAttributeCallback)
                          callback);
            },
            () -> new DelegatedListStructOctetStringAttributeCallback(),
            readTestClusterListStructOctetStringCommandParams);
    readTestClusterCommandInfo.put(
        "readListStructOctetStringAttribute",
        readTestClusterListStructOctetStringAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterLongOctetStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterLongOctetStringAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readLongOctetStringAttribute(
                      (ChipClusters.OctetStringAttributeCallback) callback);
            },
            () -> new DelegatedOctetStringAttributeCallback(),
            readTestClusterLongOctetStringCommandParams);
    readTestClusterCommandInfo.put(
        "readLongOctetStringAttribute", readTestClusterLongOctetStringAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterCharStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterCharStringAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readCharStringAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readTestClusterCharStringCommandParams);
    readTestClusterCommandInfo.put(
        "readCharStringAttribute", readTestClusterCharStringAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterLongCharStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterLongCharStringAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readLongCharStringAttribute((ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readTestClusterLongCharStringCommandParams);
    readTestClusterCommandInfo.put(
        "readLongCharStringAttribute", readTestClusterLongCharStringAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterEpochUsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterEpochUsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readEpochUsAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readTestClusterEpochUsCommandParams);
    readTestClusterCommandInfo.put(
        "readEpochUsAttribute", readTestClusterEpochUsAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterEpochSCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterEpochSAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readEpochSAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readTestClusterEpochSCommandParams);
    readTestClusterCommandInfo.put(
        "readEpochSAttribute", readTestClusterEpochSAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterVendorIdCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterVendorIdAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readVendorIdAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readTestClusterVendorIdCommandParams);
    readTestClusterCommandInfo.put(
        "readVendorIdAttribute", readTestClusterVendorIdAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterListNullablesAndOptionalsStructCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterListNullablesAndOptionalsStructAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readListNullablesAndOptionalsStructAttribute(
                      (ChipClusters.TestClusterCluster
                              .ListNullablesAndOptionalsStructAttributeCallback)
                          callback);
            },
            () -> new DelegatedListNullablesAndOptionalsStructAttributeCallback(),
            readTestClusterListNullablesAndOptionalsStructCommandParams);
    readTestClusterCommandInfo.put(
        "readListNullablesAndOptionalsStructAttribute",
        readTestClusterListNullablesAndOptionalsStructAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterUnsupportedCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterUnsupportedAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readUnsupportedAttribute((ChipClusters.BooleanAttributeCallback) callback);
            },
            () -> new DelegatedBooleanAttributeCallback(),
            readTestClusterUnsupportedCommandParams);
    readTestClusterCommandInfo.put(
        "readUnsupportedAttribute", readTestClusterUnsupportedAttributeCommandInfo);
    Map<String, CommandParameterInfo> readTestClusterClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readTestClusterClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readTestClusterClusterRevisionCommandParams);
    readTestClusterCommandInfo.put(
        "readClusterRevisionAttribute", readTestClusterClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("testCluster").combineCommands(readTestClusterCommandInfo);
    Map<String, CommandInfo> readThermostatCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readThermostatLocalTemperatureCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatLocalTemperatureAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readLocalTemperatureAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatLocalTemperatureCommandParams);
    readThermostatCommandInfo.put(
        "readLocalTemperatureAttribute", readThermostatLocalTemperatureAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatAbsMinHeatSetpointLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatAbsMinHeatSetpointLimitAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readAbsMinHeatSetpointLimitAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatAbsMinHeatSetpointLimitCommandParams);
    readThermostatCommandInfo.put(
        "readAbsMinHeatSetpointLimitAttribute",
        readThermostatAbsMinHeatSetpointLimitAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatAbsMaxHeatSetpointLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatAbsMaxHeatSetpointLimitAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readAbsMaxHeatSetpointLimitAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatAbsMaxHeatSetpointLimitCommandParams);
    readThermostatCommandInfo.put(
        "readAbsMaxHeatSetpointLimitAttribute",
        readThermostatAbsMaxHeatSetpointLimitAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatAbsMinCoolSetpointLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatAbsMinCoolSetpointLimitAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readAbsMinCoolSetpointLimitAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatAbsMinCoolSetpointLimitCommandParams);
    readThermostatCommandInfo.put(
        "readAbsMinCoolSetpointLimitAttribute",
        readThermostatAbsMinCoolSetpointLimitAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatAbsMaxCoolSetpointLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatAbsMaxCoolSetpointLimitAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readAbsMaxCoolSetpointLimitAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatAbsMaxCoolSetpointLimitCommandParams);
    readThermostatCommandInfo.put(
        "readAbsMaxCoolSetpointLimitAttribute",
        readThermostatAbsMaxCoolSetpointLimitAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatOccupiedCoolingSetpointCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatOccupiedCoolingSetpointAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readOccupiedCoolingSetpointAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatOccupiedCoolingSetpointCommandParams);
    readThermostatCommandInfo.put(
        "readOccupiedCoolingSetpointAttribute",
        readThermostatOccupiedCoolingSetpointAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatOccupiedHeatingSetpointCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatOccupiedHeatingSetpointAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readOccupiedHeatingSetpointAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatOccupiedHeatingSetpointCommandParams);
    readThermostatCommandInfo.put(
        "readOccupiedHeatingSetpointAttribute",
        readThermostatOccupiedHeatingSetpointAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatMinHeatSetpointLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatMinHeatSetpointLimitAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readMinHeatSetpointLimitAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatMinHeatSetpointLimitCommandParams);
    readThermostatCommandInfo.put(
        "readMinHeatSetpointLimitAttribute",
        readThermostatMinHeatSetpointLimitAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatMaxHeatSetpointLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatMaxHeatSetpointLimitAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readMaxHeatSetpointLimitAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatMaxHeatSetpointLimitCommandParams);
    readThermostatCommandInfo.put(
        "readMaxHeatSetpointLimitAttribute",
        readThermostatMaxHeatSetpointLimitAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatMinCoolSetpointLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatMinCoolSetpointLimitAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readMinCoolSetpointLimitAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatMinCoolSetpointLimitCommandParams);
    readThermostatCommandInfo.put(
        "readMinCoolSetpointLimitAttribute",
        readThermostatMinCoolSetpointLimitAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatMaxCoolSetpointLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatMaxCoolSetpointLimitAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readMaxCoolSetpointLimitAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatMaxCoolSetpointLimitCommandParams);
    readThermostatCommandInfo.put(
        "readMaxCoolSetpointLimitAttribute",
        readThermostatMaxCoolSetpointLimitAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatMinSetpointDeadBandCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatMinSetpointDeadBandAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readMinSetpointDeadBandAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatMinSetpointDeadBandCommandParams);
    readThermostatCommandInfo.put(
        "readMinSetpointDeadBandAttribute", readThermostatMinSetpointDeadBandAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatControlSequenceOfOperationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatControlSequenceOfOperationAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readControlSequenceOfOperationAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatControlSequenceOfOperationCommandParams);
    readThermostatCommandInfo.put(
        "readControlSequenceOfOperationAttribute",
        readThermostatControlSequenceOfOperationAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatSystemModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatSystemModeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readSystemModeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatSystemModeCommandParams);
    readThermostatCommandInfo.put(
        "readSystemModeAttribute", readThermostatSystemModeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatStartOfWeekCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatStartOfWeekAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readStartOfWeekAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatStartOfWeekCommandParams);
    readThermostatCommandInfo.put(
        "readStartOfWeekAttribute", readThermostatStartOfWeekAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatNumberOfWeeklyTransitionsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatNumberOfWeeklyTransitionsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readNumberOfWeeklyTransitionsAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatNumberOfWeeklyTransitionsCommandParams);
    readThermostatCommandInfo.put(
        "readNumberOfWeeklyTransitionsAttribute",
        readThermostatNumberOfWeeklyTransitionsAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatNumberOfDailyTransitionsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatNumberOfDailyTransitionsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readNumberOfDailyTransitionsAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatNumberOfDailyTransitionsCommandParams);
    readThermostatCommandInfo.put(
        "readNumberOfDailyTransitionsAttribute",
        readThermostatNumberOfDailyTransitionsAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatFeatureMapCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatFeatureMapAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readFeatureMapAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThermostatFeatureMapCommandParams);
    readThermostatCommandInfo.put(
        "readFeatureMapAttribute", readThermostatFeatureMapAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThermostatClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatClusterRevisionCommandParams);
    readThermostatCommandInfo.put(
        "readClusterRevisionAttribute", readThermostatClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("thermostat").combineCommands(readThermostatCommandInfo);
    Map<String, CommandInfo> readThermostatUserInterfaceConfigurationCommandInfo =
        new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo>
        readThermostatUserInterfaceConfigurationTemperatureDisplayModeCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatUserInterfaceConfigurationTemperatureDisplayModeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster)
                  .readTemperatureDisplayModeAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatUserInterfaceConfigurationTemperatureDisplayModeCommandParams);
    readThermostatUserInterfaceConfigurationCommandInfo.put(
        "readTemperatureDisplayModeAttribute",
        readThermostatUserInterfaceConfigurationTemperatureDisplayModeAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readThermostatUserInterfaceConfigurationKeypadLockoutCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatUserInterfaceConfigurationKeypadLockoutAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster)
                  .readKeypadLockoutAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatUserInterfaceConfigurationKeypadLockoutCommandParams);
    readThermostatUserInterfaceConfigurationCommandInfo.put(
        "readKeypadLockoutAttribute",
        readThermostatUserInterfaceConfigurationKeypadLockoutAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo
        readThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityAttributeCommandInfo =
            new CommandInfo(
                (cluster, callback, commandArguments) -> {
                  ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster)
                      .readScheduleProgrammingVisibilityAttribute(
                          (ChipClusters.IntegerAttributeCallback) callback);
                },
                () -> new DelegatedIntegerAttributeCallback(),
                readThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityCommandParams);
    readThermostatUserInterfaceConfigurationCommandInfo.put(
        "readScheduleProgrammingVisibilityAttribute",
        readThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readThermostatUserInterfaceConfigurationClusterRevisionCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThermostatUserInterfaceConfigurationClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThermostatUserInterfaceConfigurationClusterRevisionCommandParams);
    readThermostatUserInterfaceConfigurationCommandInfo.put(
        "readClusterRevisionAttribute",
        readThermostatUserInterfaceConfigurationClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap
        .get("thermostatUserInterfaceConfiguration")
        .combineCommands(readThermostatUserInterfaceConfigurationCommandInfo);
    Map<String, CommandInfo> readThreadNetworkDiagnosticsCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsChannelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsChannelAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readChannelAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThreadNetworkDiagnosticsChannelCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readChannelAttribute", readThreadNetworkDiagnosticsChannelAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRoutingRoleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRoutingRoleAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRoutingRoleAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThreadNetworkDiagnosticsRoutingRoleCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRoutingRoleAttribute", readThreadNetworkDiagnosticsRoutingRoleAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsNetworkNameCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsNetworkNameAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readNetworkNameAttribute((ChipClusters.OctetStringAttributeCallback) callback);
            },
            () -> new DelegatedOctetStringAttributeCallback(),
            readThreadNetworkDiagnosticsNetworkNameCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readNetworkNameAttribute", readThreadNetworkDiagnosticsNetworkNameAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsPanIdCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsPanIdAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readPanIdAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThreadNetworkDiagnosticsPanIdCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readPanIdAttribute", readThreadNetworkDiagnosticsPanIdAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsExtendedPanIdCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsExtendedPanIdAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readExtendedPanIdAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsExtendedPanIdCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readExtendedPanIdAttribute",
        readThreadNetworkDiagnosticsExtendedPanIdAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsMeshLocalPrefixCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsMeshLocalPrefixAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readMeshLocalPrefixAttribute(
                      (ChipClusters.OctetStringAttributeCallback) callback);
            },
            () -> new DelegatedOctetStringAttributeCallback(),
            readThreadNetworkDiagnosticsMeshLocalPrefixCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readMeshLocalPrefixAttribute",
        readThreadNetworkDiagnosticsMeshLocalPrefixAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsOverrunCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsOverrunCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readOverrunCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsOverrunCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readOverrunCountAttribute", readThreadNetworkDiagnosticsOverrunCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsNeighborTableListCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsNeighborTableListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readNeighborTableListAttribute(
                      (ChipClusters.ThreadNetworkDiagnosticsCluster
                              .NeighborTableListAttributeCallback)
                          callback);
            },
            () -> new DelegatedNeighborTableListAttributeCallback(),
            readThreadNetworkDiagnosticsNeighborTableListCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readNeighborTableListAttribute",
        readThreadNetworkDiagnosticsNeighborTableListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRouteTableListCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRouteTableListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRouteTableListAttribute(
                      (ChipClusters.ThreadNetworkDiagnosticsCluster.RouteTableListAttributeCallback)
                          callback);
            },
            () -> new DelegatedRouteTableListAttributeCallback(),
            readThreadNetworkDiagnosticsRouteTableListCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRouteTableListAttribute",
        readThreadNetworkDiagnosticsRouteTableListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsPartitionIdCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsPartitionIdAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readPartitionIdAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsPartitionIdCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readPartitionIdAttribute", readThreadNetworkDiagnosticsPartitionIdAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsWeightingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsWeightingAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readWeightingAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThreadNetworkDiagnosticsWeightingCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readWeightingAttribute", readThreadNetworkDiagnosticsWeightingAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsDataVersionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsDataVersionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readDataVersionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThreadNetworkDiagnosticsDataVersionCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readDataVersionAttribute", readThreadNetworkDiagnosticsDataVersionAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsStableDataVersionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsStableDataVersionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readStableDataVersionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThreadNetworkDiagnosticsStableDataVersionCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readStableDataVersionAttribute",
        readThreadNetworkDiagnosticsStableDataVersionAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsLeaderRouterIdCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsLeaderRouterIdAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readLeaderRouterIdAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThreadNetworkDiagnosticsLeaderRouterIdCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readLeaderRouterIdAttribute",
        readThreadNetworkDiagnosticsLeaderRouterIdAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsDetachedRoleCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsDetachedRoleCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readDetachedRoleCountAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThreadNetworkDiagnosticsDetachedRoleCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readDetachedRoleCountAttribute",
        readThreadNetworkDiagnosticsDetachedRoleCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsChildRoleCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsChildRoleCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readChildRoleCountAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThreadNetworkDiagnosticsChildRoleCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readChildRoleCountAttribute",
        readThreadNetworkDiagnosticsChildRoleCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRouterRoleCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRouterRoleCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRouterRoleCountAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThreadNetworkDiagnosticsRouterRoleCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRouterRoleCountAttribute",
        readThreadNetworkDiagnosticsRouterRoleCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsLeaderRoleCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsLeaderRoleCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readLeaderRoleCountAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThreadNetworkDiagnosticsLeaderRoleCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readLeaderRoleCountAttribute",
        readThreadNetworkDiagnosticsLeaderRoleCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsAttachAttemptCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsAttachAttemptCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readAttachAttemptCountAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThreadNetworkDiagnosticsAttachAttemptCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readAttachAttemptCountAttribute",
        readThreadNetworkDiagnosticsAttachAttemptCountAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readThreadNetworkDiagnosticsPartitionIdChangeCountCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsPartitionIdChangeCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readPartitionIdChangeCountAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThreadNetworkDiagnosticsPartitionIdChangeCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readPartitionIdChangeCountAttribute",
        readThreadNetworkDiagnosticsPartitionIdChangeCountAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readThreadNetworkDiagnosticsBetterPartitionAttachAttemptCountCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsBetterPartitionAttachAttemptCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readBetterPartitionAttachAttemptCountAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThreadNetworkDiagnosticsBetterPartitionAttachAttemptCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readBetterPartitionAttachAttemptCountAttribute",
        readThreadNetworkDiagnosticsBetterPartitionAttachAttemptCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsParentChangeCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsParentChangeCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readParentChangeCountAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThreadNetworkDiagnosticsParentChangeCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readParentChangeCountAttribute",
        readThreadNetworkDiagnosticsParentChangeCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxTotalCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsTxTotalCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readTxTotalCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsTxTotalCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readTxTotalCountAttribute", readThreadNetworkDiagnosticsTxTotalCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxUnicastCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsTxUnicastCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readTxUnicastCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsTxUnicastCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readTxUnicastCountAttribute",
        readThreadNetworkDiagnosticsTxUnicastCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxBroadcastCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsTxBroadcastCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readTxBroadcastCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsTxBroadcastCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readTxBroadcastCountAttribute",
        readThreadNetworkDiagnosticsTxBroadcastCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxAckRequestedCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsTxAckRequestedCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readTxAckRequestedCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsTxAckRequestedCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readTxAckRequestedCountAttribute",
        readThreadNetworkDiagnosticsTxAckRequestedCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxAckedCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsTxAckedCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readTxAckedCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsTxAckedCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readTxAckedCountAttribute", readThreadNetworkDiagnosticsTxAckedCountAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readThreadNetworkDiagnosticsTxNoAckRequestedCountCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsTxNoAckRequestedCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readTxNoAckRequestedCountAttribute(
                      (ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsTxNoAckRequestedCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readTxNoAckRequestedCountAttribute",
        readThreadNetworkDiagnosticsTxNoAckRequestedCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxDataCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsTxDataCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readTxDataCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsTxDataCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readTxDataCountAttribute", readThreadNetworkDiagnosticsTxDataCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxDataPollCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsTxDataPollCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readTxDataPollCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsTxDataPollCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readTxDataPollCountAttribute",
        readThreadNetworkDiagnosticsTxDataPollCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxBeaconCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsTxBeaconCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readTxBeaconCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsTxBeaconCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readTxBeaconCountAttribute",
        readThreadNetworkDiagnosticsTxBeaconCountAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readThreadNetworkDiagnosticsTxBeaconRequestCountCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsTxBeaconRequestCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readTxBeaconRequestCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsTxBeaconRequestCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readTxBeaconRequestCountAttribute",
        readThreadNetworkDiagnosticsTxBeaconRequestCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxOtherCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsTxOtherCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readTxOtherCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsTxOtherCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readTxOtherCountAttribute", readThreadNetworkDiagnosticsTxOtherCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxRetryCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsTxRetryCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readTxRetryCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsTxRetryCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readTxRetryCountAttribute", readThreadNetworkDiagnosticsTxRetryCountAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readThreadNetworkDiagnosticsTxDirectMaxRetryExpiryCountCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsTxDirectMaxRetryExpiryCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readTxDirectMaxRetryExpiryCountAttribute(
                      (ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsTxDirectMaxRetryExpiryCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readTxDirectMaxRetryExpiryCountAttribute",
        readThreadNetworkDiagnosticsTxDirectMaxRetryExpiryCountAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readThreadNetworkDiagnosticsTxIndirectMaxRetryExpiryCountCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsTxIndirectMaxRetryExpiryCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readTxIndirectMaxRetryExpiryCountAttribute(
                      (ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsTxIndirectMaxRetryExpiryCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readTxIndirectMaxRetryExpiryCountAttribute",
        readThreadNetworkDiagnosticsTxIndirectMaxRetryExpiryCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxErrCcaCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsTxErrCcaCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readTxErrCcaCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsTxErrCcaCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readTxErrCcaCountAttribute",
        readThreadNetworkDiagnosticsTxErrCcaCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsTxErrAbortCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsTxErrAbortCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readTxErrAbortCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsTxErrAbortCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readTxErrAbortCountAttribute",
        readThreadNetworkDiagnosticsTxErrAbortCountAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readThreadNetworkDiagnosticsTxErrBusyChannelCountCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsTxErrBusyChannelCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readTxErrBusyChannelCountAttribute(
                      (ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsTxErrBusyChannelCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readTxErrBusyChannelCountAttribute",
        readThreadNetworkDiagnosticsTxErrBusyChannelCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxTotalCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRxTotalCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRxTotalCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsRxTotalCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRxTotalCountAttribute", readThreadNetworkDiagnosticsRxTotalCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxUnicastCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRxUnicastCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRxUnicastCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsRxUnicastCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRxUnicastCountAttribute",
        readThreadNetworkDiagnosticsRxUnicastCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxBroadcastCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRxBroadcastCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRxBroadcastCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsRxBroadcastCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRxBroadcastCountAttribute",
        readThreadNetworkDiagnosticsRxBroadcastCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxDataCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRxDataCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRxDataCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsRxDataCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRxDataCountAttribute", readThreadNetworkDiagnosticsRxDataCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxDataPollCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRxDataPollCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRxDataPollCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsRxDataPollCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRxDataPollCountAttribute",
        readThreadNetworkDiagnosticsRxDataPollCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxBeaconCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRxBeaconCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRxBeaconCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsRxBeaconCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRxBeaconCountAttribute",
        readThreadNetworkDiagnosticsRxBeaconCountAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readThreadNetworkDiagnosticsRxBeaconRequestCountCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRxBeaconRequestCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRxBeaconRequestCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsRxBeaconRequestCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRxBeaconRequestCountAttribute",
        readThreadNetworkDiagnosticsRxBeaconRequestCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxOtherCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRxOtherCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRxOtherCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsRxOtherCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRxOtherCountAttribute", readThreadNetworkDiagnosticsRxOtherCountAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readThreadNetworkDiagnosticsRxAddressFilteredCountCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRxAddressFilteredCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRxAddressFilteredCountAttribute(
                      (ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsRxAddressFilteredCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRxAddressFilteredCountAttribute",
        readThreadNetworkDiagnosticsRxAddressFilteredCountAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readThreadNetworkDiagnosticsRxDestAddrFilteredCountCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRxDestAddrFilteredCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRxDestAddrFilteredCountAttribute(
                      (ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsRxDestAddrFilteredCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRxDestAddrFilteredCountAttribute",
        readThreadNetworkDiagnosticsRxDestAddrFilteredCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxDuplicatedCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRxDuplicatedCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRxDuplicatedCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsRxDuplicatedCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRxDuplicatedCountAttribute",
        readThreadNetworkDiagnosticsRxDuplicatedCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxErrNoFrameCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRxErrNoFrameCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRxErrNoFrameCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsRxErrNoFrameCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRxErrNoFrameCountAttribute",
        readThreadNetworkDiagnosticsRxErrNoFrameCountAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readThreadNetworkDiagnosticsRxErrUnknownNeighborCountCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRxErrUnknownNeighborCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRxErrUnknownNeighborCountAttribute(
                      (ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsRxErrUnknownNeighborCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRxErrUnknownNeighborCountAttribute",
        readThreadNetworkDiagnosticsRxErrUnknownNeighborCountAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readThreadNetworkDiagnosticsRxErrInvalidSrcAddrCountCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRxErrInvalidSrcAddrCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRxErrInvalidSrcAddrCountAttribute(
                      (ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsRxErrInvalidSrcAddrCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRxErrInvalidSrcAddrCountAttribute",
        readThreadNetworkDiagnosticsRxErrInvalidSrcAddrCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxErrSecCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRxErrSecCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRxErrSecCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsRxErrSecCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRxErrSecCountAttribute",
        readThreadNetworkDiagnosticsRxErrSecCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxErrFcsCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRxErrFcsCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRxErrFcsCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsRxErrFcsCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRxErrFcsCountAttribute",
        readThreadNetworkDiagnosticsRxErrFcsCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsRxErrOtherCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsRxErrOtherCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readRxErrOtherCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsRxErrOtherCountCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readRxErrOtherCountAttribute",
        readThreadNetworkDiagnosticsRxErrOtherCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsActiveTimestampCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsActiveTimestampAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readActiveTimestampAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsActiveTimestampCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readActiveTimestampAttribute",
        readThreadNetworkDiagnosticsActiveTimestampAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsPendingTimestampCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsPendingTimestampAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readPendingTimestampAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsPendingTimestampCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readPendingTimestampAttribute",
        readThreadNetworkDiagnosticsPendingTimestampAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsDelayCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsDelayAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readDelayAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readThreadNetworkDiagnosticsDelayCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readDelayAttribute", readThreadNetworkDiagnosticsDelayAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsSecurityPolicyCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsSecurityPolicyAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readSecurityPolicyAttribute(
                      (ChipClusters.ThreadNetworkDiagnosticsCluster.SecurityPolicyAttributeCallback)
                          callback);
            },
            () -> new DelegatedSecurityPolicyAttributeCallback(),
            readThreadNetworkDiagnosticsSecurityPolicyCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readSecurityPolicyAttribute",
        readThreadNetworkDiagnosticsSecurityPolicyAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsChannelMaskCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsChannelMaskAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readChannelMaskAttribute((ChipClusters.OctetStringAttributeCallback) callback);
            },
            () -> new DelegatedOctetStringAttributeCallback(),
            readThreadNetworkDiagnosticsChannelMaskCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readChannelMaskAttribute", readThreadNetworkDiagnosticsChannelMaskAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readThreadNetworkDiagnosticsOperationalDatasetComponentsCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsOperationalDatasetComponentsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readOperationalDatasetComponentsAttribute(
                      (ChipClusters.ThreadNetworkDiagnosticsCluster
                              .OperationalDatasetComponentsAttributeCallback)
                          callback);
            },
            () -> new DelegatedOperationalDatasetComponentsAttributeCallback(),
            readThreadNetworkDiagnosticsOperationalDatasetComponentsCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readOperationalDatasetComponentsAttribute",
        readThreadNetworkDiagnosticsOperationalDatasetComponentsAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readThreadNetworkDiagnosticsActiveNetworkFaultsListCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsActiveNetworkFaultsListAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readActiveNetworkFaultsListAttribute(
                      (ChipClusters.ThreadNetworkDiagnosticsCluster
                              .ActiveNetworkFaultsListAttributeCallback)
                          callback);
            },
            () -> new DelegatedActiveNetworkFaultsListAttributeCallback(),
            readThreadNetworkDiagnosticsActiveNetworkFaultsListCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readActiveNetworkFaultsListAttribute",
        readThreadNetworkDiagnosticsActiveNetworkFaultsListAttributeCommandInfo);
    Map<String, CommandParameterInfo> readThreadNetworkDiagnosticsClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readThreadNetworkDiagnosticsClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readThreadNetworkDiagnosticsClusterRevisionCommandParams);
    readThreadNetworkDiagnosticsCommandInfo.put(
        "readClusterRevisionAttribute",
        readThreadNetworkDiagnosticsClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap
        .get("threadNetworkDiagnostics")
        .combineCommands(readThreadNetworkDiagnosticsCommandInfo);
    Map<String, CommandInfo> readWakeOnLanCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readWakeOnLanWakeOnLanMacAddressCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWakeOnLanWakeOnLanMacAddressAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WakeOnLanCluster) cluster)
                  .readWakeOnLanMacAddressAttribute(
                      (ChipClusters.CharStringAttributeCallback) callback);
            },
            () -> new DelegatedCharStringAttributeCallback(),
            readWakeOnLanWakeOnLanMacAddressCommandParams);
    readWakeOnLanCommandInfo.put(
        "readWakeOnLanMacAddressAttribute", readWakeOnLanWakeOnLanMacAddressAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWakeOnLanClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWakeOnLanClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WakeOnLanCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWakeOnLanClusterRevisionCommandParams);
    readWakeOnLanCommandInfo.put(
        "readClusterRevisionAttribute", readWakeOnLanClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("wakeOnLan").combineCommands(readWakeOnLanCommandInfo);
    Map<String, CommandInfo> readWiFiNetworkDiagnosticsCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsBssidCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWiFiNetworkDiagnosticsBssidAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
                  .readBssidAttribute((ChipClusters.OctetStringAttributeCallback) callback);
            },
            () -> new DelegatedOctetStringAttributeCallback(),
            readWiFiNetworkDiagnosticsBssidCommandParams);
    readWiFiNetworkDiagnosticsCommandInfo.put(
        "readBssidAttribute", readWiFiNetworkDiagnosticsBssidAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsSecurityTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWiFiNetworkDiagnosticsSecurityTypeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
                  .readSecurityTypeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWiFiNetworkDiagnosticsSecurityTypeCommandParams);
    readWiFiNetworkDiagnosticsCommandInfo.put(
        "readSecurityTypeAttribute", readWiFiNetworkDiagnosticsSecurityTypeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsWiFiVersionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWiFiNetworkDiagnosticsWiFiVersionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
                  .readWiFiVersionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWiFiNetworkDiagnosticsWiFiVersionCommandParams);
    readWiFiNetworkDiagnosticsCommandInfo.put(
        "readWiFiVersionAttribute", readWiFiNetworkDiagnosticsWiFiVersionAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsChannelNumberCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWiFiNetworkDiagnosticsChannelNumberAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
                  .readChannelNumberAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWiFiNetworkDiagnosticsChannelNumberCommandParams);
    readWiFiNetworkDiagnosticsCommandInfo.put(
        "readChannelNumberAttribute", readWiFiNetworkDiagnosticsChannelNumberAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsRssiCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWiFiNetworkDiagnosticsRssiAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
                  .readRssiAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWiFiNetworkDiagnosticsRssiCommandParams);
    readWiFiNetworkDiagnosticsCommandInfo.put(
        "readRssiAttribute", readWiFiNetworkDiagnosticsRssiAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsBeaconLostCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWiFiNetworkDiagnosticsBeaconLostCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
                  .readBeaconLostCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readWiFiNetworkDiagnosticsBeaconLostCountCommandParams);
    readWiFiNetworkDiagnosticsCommandInfo.put(
        "readBeaconLostCountAttribute",
        readWiFiNetworkDiagnosticsBeaconLostCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsBeaconRxCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWiFiNetworkDiagnosticsBeaconRxCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
                  .readBeaconRxCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readWiFiNetworkDiagnosticsBeaconRxCountCommandParams);
    readWiFiNetworkDiagnosticsCommandInfo.put(
        "readBeaconRxCountAttribute", readWiFiNetworkDiagnosticsBeaconRxCountAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readWiFiNetworkDiagnosticsPacketMulticastRxCountCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWiFiNetworkDiagnosticsPacketMulticastRxCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
                  .readPacketMulticastRxCountAttribute(
                      (ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readWiFiNetworkDiagnosticsPacketMulticastRxCountCommandParams);
    readWiFiNetworkDiagnosticsCommandInfo.put(
        "readPacketMulticastRxCountAttribute",
        readWiFiNetworkDiagnosticsPacketMulticastRxCountAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readWiFiNetworkDiagnosticsPacketMulticastTxCountCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWiFiNetworkDiagnosticsPacketMulticastTxCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
                  .readPacketMulticastTxCountAttribute(
                      (ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readWiFiNetworkDiagnosticsPacketMulticastTxCountCommandParams);
    readWiFiNetworkDiagnosticsCommandInfo.put(
        "readPacketMulticastTxCountAttribute",
        readWiFiNetworkDiagnosticsPacketMulticastTxCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsPacketUnicastRxCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWiFiNetworkDiagnosticsPacketUnicastRxCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
                  .readPacketUnicastRxCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readWiFiNetworkDiagnosticsPacketUnicastRxCountCommandParams);
    readWiFiNetworkDiagnosticsCommandInfo.put(
        "readPacketUnicastRxCountAttribute",
        readWiFiNetworkDiagnosticsPacketUnicastRxCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsPacketUnicastTxCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWiFiNetworkDiagnosticsPacketUnicastTxCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
                  .readPacketUnicastTxCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readWiFiNetworkDiagnosticsPacketUnicastTxCountCommandParams);
    readWiFiNetworkDiagnosticsCommandInfo.put(
        "readPacketUnicastTxCountAttribute",
        readWiFiNetworkDiagnosticsPacketUnicastTxCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsCurrentMaxRateCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWiFiNetworkDiagnosticsCurrentMaxRateAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
                  .readCurrentMaxRateAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readWiFiNetworkDiagnosticsCurrentMaxRateCommandParams);
    readWiFiNetworkDiagnosticsCommandInfo.put(
        "readCurrentMaxRateAttribute",
        readWiFiNetworkDiagnosticsCurrentMaxRateAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsOverrunCountCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWiFiNetworkDiagnosticsOverrunCountAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
                  .readOverrunCountAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readWiFiNetworkDiagnosticsOverrunCountCommandParams);
    readWiFiNetworkDiagnosticsCommandInfo.put(
        "readOverrunCountAttribute", readWiFiNetworkDiagnosticsOverrunCountAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWiFiNetworkDiagnosticsClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWiFiNetworkDiagnosticsClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWiFiNetworkDiagnosticsClusterRevisionCommandParams);
    readWiFiNetworkDiagnosticsCommandInfo.put(
        "readClusterRevisionAttribute",
        readWiFiNetworkDiagnosticsClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("wiFiNetworkDiagnostics").combineCommands(readWiFiNetworkDiagnosticsCommandInfo);
    Map<String, CommandInfo> readWindowCoveringCommandInfo = new LinkedHashMap<>();
    // read attribute
    Map<String, CommandParameterInfo> readWindowCoveringTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringTypeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readTypeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringTypeCommandParams);
    readWindowCoveringCommandInfo.put(
        "readTypeAttribute", readWindowCoveringTypeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWindowCoveringCurrentPositionLiftCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringCurrentPositionLiftAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readCurrentPositionLiftAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringCurrentPositionLiftCommandParams);
    readWindowCoveringCommandInfo.put(
        "readCurrentPositionLiftAttribute",
        readWindowCoveringCurrentPositionLiftAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWindowCoveringCurrentPositionTiltCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringCurrentPositionTiltAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readCurrentPositionTiltAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringCurrentPositionTiltCommandParams);
    readWindowCoveringCommandInfo.put(
        "readCurrentPositionTiltAttribute",
        readWindowCoveringCurrentPositionTiltAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWindowCoveringConfigStatusCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringConfigStatusAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readConfigStatusAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringConfigStatusCommandParams);
    readWindowCoveringCommandInfo.put(
        "readConfigStatusAttribute", readWindowCoveringConfigStatusAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWindowCoveringCurrentPositionLiftPercentageCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringCurrentPositionLiftPercentageAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readCurrentPositionLiftPercentageAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringCurrentPositionLiftPercentageCommandParams);
    readWindowCoveringCommandInfo.put(
        "readCurrentPositionLiftPercentageAttribute",
        readWindowCoveringCurrentPositionLiftPercentageAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWindowCoveringCurrentPositionTiltPercentageCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringCurrentPositionTiltPercentageAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readCurrentPositionTiltPercentageAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringCurrentPositionTiltPercentageCommandParams);
    readWindowCoveringCommandInfo.put(
        "readCurrentPositionTiltPercentageAttribute",
        readWindowCoveringCurrentPositionTiltPercentageAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWindowCoveringOperationalStatusCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringOperationalStatusAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readOperationalStatusAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringOperationalStatusCommandParams);
    readWindowCoveringCommandInfo.put(
        "readOperationalStatusAttribute", readWindowCoveringOperationalStatusAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readWindowCoveringTargetPositionLiftPercent100thsCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringTargetPositionLiftPercent100thsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readTargetPositionLiftPercent100thsAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringTargetPositionLiftPercent100thsCommandParams);
    readWindowCoveringCommandInfo.put(
        "readTargetPositionLiftPercent100thsAttribute",
        readWindowCoveringTargetPositionLiftPercent100thsAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readWindowCoveringTargetPositionTiltPercent100thsCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringTargetPositionTiltPercent100thsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readTargetPositionTiltPercent100thsAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringTargetPositionTiltPercent100thsCommandParams);
    readWindowCoveringCommandInfo.put(
        "readTargetPositionTiltPercent100thsAttribute",
        readWindowCoveringTargetPositionTiltPercent100thsAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWindowCoveringEndProductTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringEndProductTypeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readEndProductTypeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringEndProductTypeCommandParams);
    readWindowCoveringCommandInfo.put(
        "readEndProductTypeAttribute", readWindowCoveringEndProductTypeAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readWindowCoveringCurrentPositionLiftPercent100thsCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringCurrentPositionLiftPercent100thsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readCurrentPositionLiftPercent100thsAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringCurrentPositionLiftPercent100thsCommandParams);
    readWindowCoveringCommandInfo.put(
        "readCurrentPositionLiftPercent100thsAttribute",
        readWindowCoveringCurrentPositionLiftPercent100thsAttributeCommandInfo);
    Map<String, CommandParameterInfo>
        readWindowCoveringCurrentPositionTiltPercent100thsCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringCurrentPositionTiltPercent100thsAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readCurrentPositionTiltPercent100thsAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringCurrentPositionTiltPercent100thsCommandParams);
    readWindowCoveringCommandInfo.put(
        "readCurrentPositionTiltPercent100thsAttribute",
        readWindowCoveringCurrentPositionTiltPercent100thsAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWindowCoveringInstalledOpenLimitLiftCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringInstalledOpenLimitLiftAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readInstalledOpenLimitLiftAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringInstalledOpenLimitLiftCommandParams);
    readWindowCoveringCommandInfo.put(
        "readInstalledOpenLimitLiftAttribute",
        readWindowCoveringInstalledOpenLimitLiftAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWindowCoveringInstalledClosedLimitLiftCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringInstalledClosedLimitLiftAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readInstalledClosedLimitLiftAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringInstalledClosedLimitLiftCommandParams);
    readWindowCoveringCommandInfo.put(
        "readInstalledClosedLimitLiftAttribute",
        readWindowCoveringInstalledClosedLimitLiftAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWindowCoveringInstalledOpenLimitTiltCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringInstalledOpenLimitTiltAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readInstalledOpenLimitTiltAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringInstalledOpenLimitTiltCommandParams);
    readWindowCoveringCommandInfo.put(
        "readInstalledOpenLimitTiltAttribute",
        readWindowCoveringInstalledOpenLimitTiltAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWindowCoveringInstalledClosedLimitTiltCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringInstalledClosedLimitTiltAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readInstalledClosedLimitTiltAttribute(
                      (ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringInstalledClosedLimitTiltCommandParams);
    readWindowCoveringCommandInfo.put(
        "readInstalledClosedLimitTiltAttribute",
        readWindowCoveringInstalledClosedLimitTiltAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWindowCoveringModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringModeAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readModeAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringModeCommandParams);
    readWindowCoveringCommandInfo.put(
        "readModeAttribute", readWindowCoveringModeAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWindowCoveringSafetyStatusCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringSafetyStatusAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readSafetyStatusAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringSafetyStatusCommandParams);
    readWindowCoveringCommandInfo.put(
        "readSafetyStatusAttribute", readWindowCoveringSafetyStatusAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWindowCoveringFeatureMapCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringFeatureMapAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readFeatureMapAttribute((ChipClusters.LongAttributeCallback) callback);
            },
            () -> new DelegatedLongAttributeCallback(),
            readWindowCoveringFeatureMapCommandParams);
    readWindowCoveringCommandInfo.put(
        "readFeatureMapAttribute", readWindowCoveringFeatureMapAttributeCommandInfo);
    Map<String, CommandParameterInfo> readWindowCoveringClusterRevisionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandInfo readWindowCoveringClusterRevisionAttributeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .readClusterRevisionAttribute((ChipClusters.IntegerAttributeCallback) callback);
            },
            () -> new DelegatedIntegerAttributeCallback(),
            readWindowCoveringClusterRevisionCommandParams);
    readWindowCoveringCommandInfo.put(
        "readClusterRevisionAttribute", readWindowCoveringClusterRevisionAttributeCommandInfo);
    // combine the read Attribute into the original commands
    clusterMap.get("windowCovering").combineCommands(readWindowCoveringCommandInfo);
    return clusterMap;
  }
}
