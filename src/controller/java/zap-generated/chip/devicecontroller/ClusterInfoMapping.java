/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

package chip.devicecontroller;

<<<<<<< HEAD
import chip.clusterinfo.ClusterCommandCallback;
import chip.clusterinfo.ClusterInfo;
import chip.clusterinfo.CommandInfo;
import chip.clusterinfo.CommandParameterInfo;
import chip.clusterinfo.DelegatedClusterCallback;
import chip.devicecontroller.ChipClusters.DefaultClusterCallback;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class ClusterInfoMapping {

  class DelegatedDefaultClusterCallback
      implements DefaultClusterCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    // Parameters and list-adds here should be generated - refer to the template code that creates
    // each callback interface.
    @Override
    public void onSuccess() {
      List<Object> responseValues = new ArrayList<>();
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception e) {
      callback.onFailure(e);
    }
  }

  public class DelegatedGetSetupPINResponseCallback
      implements ChipClusters.AccountLoginCluster.GetSetupPINResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(String setupPIN) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(setupPIN);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedLaunchAppResponseCallback
      implements ChipClusters.ApplicationLauncherCluster.LaunchAppResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, String data) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(data);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedLaunchContentResponseCallback
      implements ChipClusters.ContentLauncherCluster.LaunchContentResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(String data, int contentLaunchStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(data);
      responseValues.add(contentLaunchStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedLaunchURLResponseCallback
      implements ChipClusters.ContentLauncherCluster.LaunchURLResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(String data, int contentLaunchStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(data);
      responseValues.add(contentLaunchStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedRetrieveLogsResponseCallback
      implements ChipClusters.DiagnosticLogsCluster.RetrieveLogsResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, byte[] content, long timeStamp, long timeSinceBoot) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(content);
      responseValues.add(timeStamp);
      responseValues.add(timeSinceBoot);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearAllPinsResponseCallback
      implements ChipClusters.DoorLockCluster.ClearAllPinsResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearAllRfidsResponseCallback
      implements ChipClusters.DoorLockCluster.ClearAllRfidsResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearHolidayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.ClearHolidayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearPinResponseCallback
      implements ChipClusters.DoorLockCluster.ClearPinResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearRfidResponseCallback
      implements ChipClusters.DoorLockCluster.ClearRfidResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearWeekdayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.ClearWeekdayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedClearYeardayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.ClearYeardayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetHolidayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.GetHolidayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        int scheduleId,
        int status,
        long localStartTime,
        long localEndTime,
        int operatingModeDuringHoliday) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(scheduleId);
      responseValues.add(status);
      responseValues.add(localStartTime);
      responseValues.add(localEndTime);
      responseValues.add(operatingModeDuringHoliday);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetLogRecordResponseCallback
      implements ChipClusters.DoorLockCluster.GetLogRecordResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        int logEntryId,
        long timestamp,
        int eventType,
        int source,
        int eventIdOrAlarmCode,
        int userId,
        byte[] pin) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(logEntryId);
      responseValues.add(timestamp);
      responseValues.add(eventType);
      responseValues.add(source);
      responseValues.add(eventIdOrAlarmCode);
      responseValues.add(userId);
      responseValues.add(pin);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetPinResponseCallback
      implements ChipClusters.DoorLockCluster.GetPinResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int userId, int userStatus, int userType, byte[] pin) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(userId);
      responseValues.add(userStatus);
      responseValues.add(userType);
      responseValues.add(pin);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetRfidResponseCallback
      implements ChipClusters.DoorLockCluster.GetRfidResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int userId, int userStatus, int userType, byte[] rfid) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(userId);
      responseValues.add(userStatus);
      responseValues.add(userType);
      responseValues.add(rfid);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetUserTypeResponseCallback
      implements ChipClusters.DoorLockCluster.GetUserTypeResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int userId, int userType) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(userId);
      responseValues.add(userType);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetWeekdayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.GetWeekdayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        int scheduleId,
        int userId,
        int status,
        int daysMask,
        int startHour,
        int startMinute,
        int endHour,
        int endMinute) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(scheduleId);
      responseValues.add(userId);
      responseValues.add(status);
      responseValues.add(daysMask);
      responseValues.add(startHour);
      responseValues.add(startMinute);
      responseValues.add(endHour);
      responseValues.add(endMinute);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetYeardayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.GetYeardayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        int scheduleId, int userId, int status, long localStartTime, long localEndTime) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(scheduleId);
      responseValues.add(userId);
      responseValues.add(status);
      responseValues.add(localStartTime);
      responseValues.add(localEndTime);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedLockDoorResponseCallback
      implements ChipClusters.DoorLockCluster.LockDoorResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetHolidayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.SetHolidayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetPinResponseCallback
      implements ChipClusters.DoorLockCluster.SetPinResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetRfidResponseCallback
      implements ChipClusters.DoorLockCluster.SetRfidResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetUserTypeResponseCallback
      implements ChipClusters.DoorLockCluster.SetUserTypeResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetWeekdayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.SetWeekdayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetYeardayScheduleResponseCallback
      implements ChipClusters.DoorLockCluster.SetYeardayScheduleResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedUnlockDoorResponseCallback
      implements ChipClusters.DoorLockCluster.UnlockDoorResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedUnlockWithTimeoutResponseCallback
      implements ChipClusters.DoorLockCluster.UnlockWithTimeoutResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedArmFailSafeResponseCallback
      implements ChipClusters.GeneralCommissioningCluster.ArmFailSafeResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedCommissioningCompleteResponseCallback
      implements ChipClusters.GeneralCommissioningCluster.CommissioningCompleteResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSetRegulatoryConfigResponseCallback
      implements ChipClusters.GeneralCommissioningCluster.SetRegulatoryConfigResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedAddGroupResponseCallback
      implements ChipClusters.GroupsCluster.AddGroupResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(groupId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetGroupMembershipResponseCallback
      implements ChipClusters.GroupsCluster.GetGroupMembershipResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int capacity, int groupCount
        // groupList: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        ) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(capacity);
      responseValues.add(groupCount);
      // groupList: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedRemoveGroupResponseCallback
      implements ChipClusters.GroupsCluster.RemoveGroupResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(groupId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedViewGroupResponseCallback
      implements ChipClusters.GroupsCluster.ViewGroupResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId, String groupName) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(groupId);
      responseValues.add(groupName);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedIdentifyQueryResponseCallback
      implements ChipClusters.IdentifyCluster.IdentifyQueryResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int timeout) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(timeout);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedSendKeyResponseCallback
      implements ChipClusters.KeypadInputCluster.SendKeyResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaFastForwardResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaFastForwardResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaNextResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaNextResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaPauseResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaPauseResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaPlayResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaPlayResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaPreviousResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaPreviousResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaRewindResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaRewindResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaSeekResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaSeekResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaSkipBackwardResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaSkipBackwardResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaSkipForwardResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaSkipForwardResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaStartOverResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaStartOverResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedMediaStopResponseCallback
      implements ChipClusters.MediaPlaybackCluster.MediaStopResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int mediaPlaybackStatus) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(mediaPlaybackStatus);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedAddThreadNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.AddThreadNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedAddWiFiNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.AddWiFiNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedDisableNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.DisableNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedEnableNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.EnableNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedRemoveNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.RemoveNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedScanNetworksResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.ScanNetworksResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText
        // wifiScanResults: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        // threadScanResults: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        ) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      // wifiScanResults: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      // threadScanResults: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedUpdateThreadNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.UpdateThreadNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedUpdateWiFiNetworkResponseCallback
      implements ChipClusters.NetworkCommissioningCluster.UpdateWiFiNetworkResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int errorCode, String debugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(errorCode);
      responseValues.add(debugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedApplyUpdateRequestResponseCallback
      implements ChipClusters.OtaSoftwareUpdateProviderCluster.ApplyUpdateRequestResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int action, long delayedActionTime) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(action);
      responseValues.add(delayedActionTime);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedQueryImageResponseCallback
      implements ChipClusters.OtaSoftwareUpdateProviderCluster.QueryImageResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        int status,
        long delayedActionTime,
        String imageURI,
        long softwareVersion,
        String softwareVersionString,
        byte[] updateToken,
        boolean userConsentNeeded,
        byte[] metadataForRequestor) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(delayedActionTime);
      responseValues.add(imageURI);
      responseValues.add(softwareVersion);
      responseValues.add(softwareVersionString);
      responseValues.add(updateToken);
      responseValues.add(userConsentNeeded);
      responseValues.add(metadataForRequestor);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedAttestationResponseCallback
      implements ChipClusters.OperationalCredentialsCluster.AttestationResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(byte[] AttestationElements, byte[] Signature) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(AttestationElements);
      responseValues.add(Signature);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedCertificateChainResponseCallback
      implements ChipClusters.OperationalCredentialsCluster.CertificateChainResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(byte[] Certificate) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(Certificate);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedNOCResponseCallback
      implements ChipClusters.OperationalCredentialsCluster.NOCResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int StatusCode, int FabricIndex, String DebugText) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(StatusCode);
      responseValues.add(FabricIndex);
      responseValues.add(DebugText);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedOpCSRResponseCallback
      implements ChipClusters.OperationalCredentialsCluster.OpCSRResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(byte[] NOCSRElements, byte[] AttestationSignature) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(NOCSRElements);
      responseValues.add(AttestationSignature);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedAddSceneResponseCallback
      implements ChipClusters.ScenesCluster.AddSceneResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId, int sceneId) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(groupId);
      responseValues.add(sceneId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedGetSceneMembershipResponseCallback
      implements ChipClusters.ScenesCluster.GetSceneMembershipResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int capacity, int groupId, int sceneCount
        // sceneList: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        ) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(capacity);
      responseValues.add(groupId);
      responseValues.add(sceneCount);
      // sceneList: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedRemoveAllScenesResponseCallback
      implements ChipClusters.ScenesCluster.RemoveAllScenesResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(groupId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedRemoveSceneResponseCallback
      implements ChipClusters.ScenesCluster.RemoveSceneResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId, int sceneId) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(groupId);
      responseValues.add(sceneId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedStoreSceneResponseCallback
      implements ChipClusters.ScenesCluster.StoreSceneResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId, int sceneId) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(groupId);
      responseValues.add(sceneId);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedViewSceneResponseCallback
      implements ChipClusters.ScenesCluster.ViewSceneResponseCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, int groupId, int sceneId, int transitionTime, String sceneName
        // extensionFieldSets: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        ) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(groupId);
      responseValues.add(sceneId);
      responseValues.add(transitionTime);
      responseValues.add(sceneName);
      // extensionFieldSets: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedChangeChannelResponseCallback
      implements ChipClusters.TvChannelCluster.ChangeChannelResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        // ChannelMatch: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        int ErrorType) {
      List<Object> responseValues = new ArrayList<>();
      // ChannelMatch: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      responseValues.add(ErrorType);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedNavigateTargetResponseCallback
      implements ChipClusters.TargetNavigatorCluster.NavigateTargetResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int status, String data) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(status);
      responseValues.add(data);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedTestAddArgumentsResponseCallback
      implements ChipClusters.TestClusterCluster.TestAddArgumentsResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int returnValue) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(returnValue);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedTestEnumsResponseCallback
      implements ChipClusters.TestClusterCluster.TestEnumsResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int arg1, int arg2) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(arg1);
      responseValues.add(arg2);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedTestListInt8UReverseResponseCallback
      implements ChipClusters.TestClusterCluster.TestListInt8UReverseResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(
        // arg1: /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Java is not properly implemented yet
        ) {
      List<Object> responseValues = new ArrayList<>();
      // arg1: /* TYPE WARNING: array array defaults to */ uint8_t *
      // Conversion from this type to Java is not properly implemented yet
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedTestNullableOptionalResponseCallback
      implements ChipClusters.TestClusterCluster.TestNullableOptionalResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(boolean wasPresent, boolean wasNull, int value) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(wasPresent);
      responseValues.add(wasNull);
      responseValues.add(value);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public class DelegatedTestSpecificResponseCallback
      implements ChipClusters.TestClusterCluster.TestSpecificResponseCallback,
          DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onSuccess(int returnValue) {
      List<Object> responseValues = new ArrayList<>();
      responseValues.add(returnValue);
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception error) {
      callback.onFailure(error);
    }
  }

  public Map<String, ClusterInfo> getClusterMap() {
    Map<String, ClusterInfo> clusterMap = new HashMap<>();
    Map<String, CommandInfo> accountLoginClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> accountLogingetSetupPINCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo accountLogingetSetupPINCommandParameterInfo =
        new CommandParameterInfo(
            "AccountLogin", ChipClusters.AccountLoginCluster.GetSetupPINResponseCallback.class);
    CommandParameterInfo accountLogingetSetupPINtempAccountIdentifierCommandParameterInfo =
        new CommandParameterInfo("tempAccountIdentifier", String.class);
    accountLogingetSetupPINCommandParams.put(
        "tempAccountIdentifier", accountLogingetSetupPINtempAccountIdentifierCommandParameterInfo);

    // Populate commands
    CommandInfo accountLogingetSetupPINCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AccountLoginCluster) cluster)
                  .getSetupPIN(
                      (ChipClusters.AccountLoginCluster.GetSetupPINResponseCallback) callback,
                      (String) commandArguments.get("tempAccountIdentifier"));
            },
            () -> new DelegatedGetSetupPINResponseCallback(),
            accountLogingetSetupPINCommandParams);
    accountLoginClusterCommandInfoMap.put("getSetupPIN", accountLogingetSetupPINCommandInfo);
    Map<String, CommandParameterInfo> accountLoginloginCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo accountLoginloginCommandParameterInfo =
        new CommandParameterInfo("AccountLogin", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo accountLoginlogintempAccountIdentifierCommandParameterInfo =
        new CommandParameterInfo("tempAccountIdentifier", String.class);
    accountLoginloginCommandParams.put(
        "tempAccountIdentifier", accountLoginlogintempAccountIdentifierCommandParameterInfo);

    CommandParameterInfo accountLoginloginsetupPINCommandParameterInfo =
        new CommandParameterInfo("setupPIN", String.class);
    accountLoginloginCommandParams.put("setupPIN", accountLoginloginsetupPINCommandParameterInfo);

    // Populate commands
    CommandInfo accountLoginloginCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AccountLoginCluster) cluster)
                  .login(
                      (DefaultClusterCallback) callback,
                      (String) commandArguments.get("tempAccountIdentifier"),
                      (String) commandArguments.get("setupPIN"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            accountLoginloginCommandParams);
    accountLoginClusterCommandInfoMap.put("login", accountLoginloginCommandInfo);
    // Populate cluster
    ClusterInfo accountLoginClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.AccountLoginCluster(ptr, endpointId),
            accountLoginClusterCommandInfoMap);
    clusterMap.put("accountLogin", accountLoginClusterInfo);
    Map<String, CommandInfo> administratorCommissioningClusterCommandInfoMap =
        new LinkedHashMap<>();
    Map<String, CommandParameterInfo>
        administratorCommissioningopenBasicCommissioningWindowCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo
        administratorCommissioningopenBasicCommissioningWindowCommandParameterInfo =
            new CommandParameterInfo(
                "AdministratorCommissioning", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo
        administratorCommissioningopenBasicCommissioningWindowcommissioningTimeoutCommandParameterInfo =
            new CommandParameterInfo("commissioningTimeout", int.class);
    administratorCommissioningopenBasicCommissioningWindowCommandParams.put(
        "commissioningTimeout",
        administratorCommissioningopenBasicCommissioningWindowcommissioningTimeoutCommandParameterInfo);

    // Populate commands
    CommandInfo administratorCommissioningopenBasicCommissioningWindowCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AdministratorCommissioningCluster) cluster)
                  .openBasicCommissioningWindow(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("commissioningTimeout"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            administratorCommissioningopenBasicCommissioningWindowCommandParams);
    administratorCommissioningClusterCommandInfoMap.put(
        "openBasicCommissioningWindow",
        administratorCommissioningopenBasicCommissioningWindowCommandInfo);
    Map<String, CommandParameterInfo>
        administratorCommissioningopenCommissioningWindowCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo administratorCommissioningopenCommissioningWindowCommandParameterInfo =
        new CommandParameterInfo(
            "AdministratorCommissioning", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo
        administratorCommissioningopenCommissioningWindowcommissioningTimeoutCommandParameterInfo =
            new CommandParameterInfo("commissioningTimeout", int.class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "commissioningTimeout",
        administratorCommissioningopenCommissioningWindowcommissioningTimeoutCommandParameterInfo);

    CommandParameterInfo
        administratorCommissioningopenCommissioningWindowPAKEVerifierCommandParameterInfo =
            new CommandParameterInfo("PAKEVerifier", byte[].class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "PAKEVerifier",
        administratorCommissioningopenCommissioningWindowPAKEVerifierCommandParameterInfo);

    CommandParameterInfo
        administratorCommissioningopenCommissioningWindowdiscriminatorCommandParameterInfo =
            new CommandParameterInfo("discriminator", int.class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "discriminator",
        administratorCommissioningopenCommissioningWindowdiscriminatorCommandParameterInfo);

    CommandParameterInfo
        administratorCommissioningopenCommissioningWindowiterationsCommandParameterInfo =
            new CommandParameterInfo("iterations", long.class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "iterations",
        administratorCommissioningopenCommissioningWindowiterationsCommandParameterInfo);

    CommandParameterInfo administratorCommissioningopenCommissioningWindowsaltCommandParameterInfo =
        new CommandParameterInfo("salt", byte[].class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "salt", administratorCommissioningopenCommissioningWindowsaltCommandParameterInfo);

    CommandParameterInfo
        administratorCommissioningopenCommissioningWindowpasscodeIDCommandParameterInfo =
            new CommandParameterInfo("passcodeID", int.class);
    administratorCommissioningopenCommissioningWindowCommandParams.put(
        "passcodeID",
        administratorCommissioningopenCommissioningWindowpasscodeIDCommandParameterInfo);

    // Populate commands
    CommandInfo administratorCommissioningopenCommissioningWindowCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AdministratorCommissioningCluster) cluster)
                  .openCommissioningWindow(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("commissioningTimeout"),
                      (byte[]) commandArguments.get("PAKEVerifier"),
                      (Integer) commandArguments.get("discriminator"),
                      (Long) commandArguments.get("iterations"),
                      (byte[]) commandArguments.get("salt"),
                      (Integer) commandArguments.get("passcodeID"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            administratorCommissioningopenCommissioningWindowCommandParams);
    administratorCommissioningClusterCommandInfoMap.put(
        "openCommissioningWindow", administratorCommissioningopenCommissioningWindowCommandInfo);
    Map<String, CommandParameterInfo> administratorCommissioningrevokeCommissioningCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo administratorCommissioningrevokeCommissioningCommandParameterInfo =
        new CommandParameterInfo(
            "AdministratorCommissioning", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo administratorCommissioningrevokeCommissioningCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AdministratorCommissioningCluster) cluster)
                  .revokeCommissioning((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            administratorCommissioningrevokeCommissioningCommandParams);
    administratorCommissioningClusterCommandInfoMap.put(
        "revokeCommissioning", administratorCommissioningrevokeCommissioningCommandInfo);
    // Populate cluster
    ClusterInfo administratorCommissioningClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.AdministratorCommissioningCluster(ptr, endpointId),
            administratorCommissioningClusterCommandInfoMap);
    clusterMap.put("administratorCommissioning", administratorCommissioningClusterInfo);
    Map<String, CommandInfo> applicationBasicClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> applicationBasicchangeStatusCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo applicationBasicchangeStatusCommandParameterInfo =
        new CommandParameterInfo("ApplicationBasic", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo applicationBasicchangeStatusstatusCommandParameterInfo =
        new CommandParameterInfo("status", int.class);
    applicationBasicchangeStatusCommandParams.put(
        "status", applicationBasicchangeStatusstatusCommandParameterInfo);

    // Populate commands
    CommandInfo applicationBasicchangeStatusCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationBasicCluster) cluster)
                  .changeStatus(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("status"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            applicationBasicchangeStatusCommandParams);
    applicationBasicClusterCommandInfoMap.put(
        "changeStatus", applicationBasicchangeStatusCommandInfo);
    // Populate cluster
    ClusterInfo applicationBasicClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ApplicationBasicCluster(ptr, endpointId),
            applicationBasicClusterCommandInfoMap);
    clusterMap.put("applicationBasic", applicationBasicClusterInfo);
    Map<String, CommandInfo> applicationLauncherClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> applicationLauncherlaunchAppCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo applicationLauncherlaunchAppCommandParameterInfo =
        new CommandParameterInfo(
            "ApplicationLauncher",
            ChipClusters.ApplicationLauncherCluster.LaunchAppResponseCallback.class);
    CommandParameterInfo applicationLauncherlaunchAppdataCommandParameterInfo =
        new CommandParameterInfo("data", String.class);
    applicationLauncherlaunchAppCommandParams.put(
        "data", applicationLauncherlaunchAppdataCommandParameterInfo);

    CommandParameterInfo applicationLauncherlaunchAppcatalogVendorIdCommandParameterInfo =
        new CommandParameterInfo("catalogVendorId", int.class);
    applicationLauncherlaunchAppCommandParams.put(
        "catalogVendorId", applicationLauncherlaunchAppcatalogVendorIdCommandParameterInfo);

    CommandParameterInfo applicationLauncherlaunchAppapplicationIdCommandParameterInfo =
        new CommandParameterInfo("applicationId", String.class);
    applicationLauncherlaunchAppCommandParams.put(
        "applicationId", applicationLauncherlaunchAppapplicationIdCommandParameterInfo);

    // Populate commands
    CommandInfo applicationLauncherlaunchAppCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ApplicationLauncherCluster) cluster)
                  .launchApp(
                      (ChipClusters.ApplicationLauncherCluster.LaunchAppResponseCallback) callback,
                      (String) commandArguments.get("data"),
                      (Integer) commandArguments.get("catalogVendorId"),
                      (String) commandArguments.get("applicationId"));
            },
            () -> new DelegatedLaunchAppResponseCallback(),
            applicationLauncherlaunchAppCommandParams);
    applicationLauncherClusterCommandInfoMap.put(
        "launchApp", applicationLauncherlaunchAppCommandInfo);
    // Populate cluster
    ClusterInfo applicationLauncherClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ApplicationLauncherCluster(ptr, endpointId),
            applicationLauncherClusterCommandInfoMap);
    clusterMap.put("applicationLauncher", applicationLauncherClusterInfo);
    Map<String, CommandInfo> audioOutputClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> audioOutputrenameOutputCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo audioOutputrenameOutputCommandParameterInfo =
        new CommandParameterInfo("AudioOutput", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo audioOutputrenameOutputindexCommandParameterInfo =
        new CommandParameterInfo("index", int.class);
    audioOutputrenameOutputCommandParams.put(
        "index", audioOutputrenameOutputindexCommandParameterInfo);

    CommandParameterInfo audioOutputrenameOutputnameCommandParameterInfo =
        new CommandParameterInfo("name", String.class);
    audioOutputrenameOutputCommandParams.put(
        "name", audioOutputrenameOutputnameCommandParameterInfo);

    // Populate commands
    CommandInfo audioOutputrenameOutputCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AudioOutputCluster) cluster)
                  .renameOutput(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("index"),
                      (String) commandArguments.get("name"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            audioOutputrenameOutputCommandParams);
    audioOutputClusterCommandInfoMap.put("renameOutput", audioOutputrenameOutputCommandInfo);
    Map<String, CommandParameterInfo> audioOutputselectOutputCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo audioOutputselectOutputCommandParameterInfo =
        new CommandParameterInfo("AudioOutput", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo audioOutputselectOutputindexCommandParameterInfo =
        new CommandParameterInfo("index", int.class);
    audioOutputselectOutputCommandParams.put(
        "index", audioOutputselectOutputindexCommandParameterInfo);

    // Populate commands
    CommandInfo audioOutputselectOutputCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.AudioOutputCluster) cluster)
                  .selectOutput(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("index"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            audioOutputselectOutputCommandParams);
    audioOutputClusterCommandInfoMap.put("selectOutput", audioOutputselectOutputCommandInfo);
    // Populate cluster
    ClusterInfo audioOutputClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.AudioOutputCluster(ptr, endpointId),
            audioOutputClusterCommandInfoMap);
    clusterMap.put("audioOutput", audioOutputClusterInfo);
    Map<String, CommandInfo> barrierControlClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> barrierControlbarrierControlGoToPercentCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo barrierControlbarrierControlGoToPercentCommandParameterInfo =
        new CommandParameterInfo("BarrierControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo barrierControlbarrierControlGoToPercentpercentOpenCommandParameterInfo =
        new CommandParameterInfo("percentOpen", int.class);
    barrierControlbarrierControlGoToPercentCommandParams.put(
        "percentOpen", barrierControlbarrierControlGoToPercentpercentOpenCommandParameterInfo);

    // Populate commands
    CommandInfo barrierControlbarrierControlGoToPercentCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BarrierControlCluster) cluster)
                  .barrierControlGoToPercent(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("percentOpen"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            barrierControlbarrierControlGoToPercentCommandParams);
    barrierControlClusterCommandInfoMap.put(
        "barrierControlGoToPercent", barrierControlbarrierControlGoToPercentCommandInfo);
    Map<String, CommandParameterInfo> barrierControlbarrierControlStopCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo barrierControlbarrierControlStopCommandParameterInfo =
        new CommandParameterInfo("BarrierControl", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo barrierControlbarrierControlStopCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BarrierControlCluster) cluster)
                  .barrierControlStop((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            barrierControlbarrierControlStopCommandParams);
    barrierControlClusterCommandInfoMap.put(
        "barrierControlStop", barrierControlbarrierControlStopCommandInfo);
    // Populate cluster
    ClusterInfo barrierControlClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BarrierControlCluster(ptr, endpointId),
            barrierControlClusterCommandInfoMap);
    clusterMap.put("barrierControl", barrierControlClusterInfo);
    Map<String, CommandInfo> basicClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> basicmfgSpecificPingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo basicmfgSpecificPingCommandParameterInfo =
        new CommandParameterInfo("Basic", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo basicmfgSpecificPingCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .mfgSpecificPing((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            basicmfgSpecificPingCommandParams);
    basicClusterCommandInfoMap.put("mfgSpecificPing", basicmfgSpecificPingCommandInfo);
    // Populate cluster
    ClusterInfo basicClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BasicCluster(ptr, endpointId),
            basicClusterCommandInfoMap);
    clusterMap.put("basic", basicClusterInfo);
    Map<String, CommandInfo> binaryInputBasicClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo binaryInputBasicClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BinaryInputBasicCluster(ptr, endpointId),
            binaryInputBasicClusterCommandInfoMap);
    clusterMap.put("binaryInputBasic", binaryInputBasicClusterInfo);
    Map<String, CommandInfo> bindingClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> bindingbindCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo bindingbindCommandParameterInfo =
        new CommandParameterInfo("Binding", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo bindingbindnodeIdCommandParameterInfo =
        new CommandParameterInfo("nodeId", long.class);
    bindingbindCommandParams.put("nodeId", bindingbindnodeIdCommandParameterInfo);

    CommandParameterInfo bindingbindgroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    bindingbindCommandParams.put("groupId", bindingbindgroupIdCommandParameterInfo);

    CommandParameterInfo bindingbindendpointIdCommandParameterInfo =
        new CommandParameterInfo("endpointId", int.class);
    bindingbindCommandParams.put("endpointId", bindingbindendpointIdCommandParameterInfo);

    CommandParameterInfo bindingbindclusterIdCommandParameterInfo =
        new CommandParameterInfo("clusterId", long.class);
    bindingbindCommandParams.put("clusterId", bindingbindclusterIdCommandParameterInfo);

    // Populate commands
    CommandInfo bindingbindCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BindingCluster) cluster)
                  .bind(
                      (DefaultClusterCallback) callback,
                      (Long) commandArguments.get("nodeId"),
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("endpointId"),
                      (Long) commandArguments.get("clusterId"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bindingbindCommandParams);
    bindingClusterCommandInfoMap.put("bind", bindingbindCommandInfo);
    Map<String, CommandParameterInfo> bindingunbindCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo bindingunbindCommandParameterInfo =
        new CommandParameterInfo("Binding", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo bindingunbindnodeIdCommandParameterInfo =
        new CommandParameterInfo("nodeId", long.class);
    bindingunbindCommandParams.put("nodeId", bindingunbindnodeIdCommandParameterInfo);

    CommandParameterInfo bindingunbindgroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    bindingunbindCommandParams.put("groupId", bindingunbindgroupIdCommandParameterInfo);

    CommandParameterInfo bindingunbindendpointIdCommandParameterInfo =
        new CommandParameterInfo("endpointId", int.class);
    bindingunbindCommandParams.put("endpointId", bindingunbindendpointIdCommandParameterInfo);

    CommandParameterInfo bindingunbindclusterIdCommandParameterInfo =
        new CommandParameterInfo("clusterId", long.class);
    bindingunbindCommandParams.put("clusterId", bindingunbindclusterIdCommandParameterInfo);

    // Populate commands
    CommandInfo bindingunbindCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BindingCluster) cluster)
                  .unbind(
                      (DefaultClusterCallback) callback,
                      (Long) commandArguments.get("nodeId"),
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("endpointId"),
                      (Long) commandArguments.get("clusterId"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bindingunbindCommandParams);
    bindingClusterCommandInfoMap.put("unbind", bindingunbindCommandInfo);
    // Populate cluster
    ClusterInfo bindingClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BindingCluster(ptr, endpointId),
            bindingClusterCommandInfoMap);
    clusterMap.put("binding", bindingClusterInfo);
    Map<String, CommandInfo> booleanStateClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo booleanStateClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BooleanStateCluster(ptr, endpointId),
            booleanStateClusterCommandInfoMap);
    clusterMap.put("booleanState", booleanStateClusterInfo);
    Map<String, CommandInfo> bridgedActionsClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> bridgedActionsdisableActionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo bridgedActionsdisableActionCommandParameterInfo =
        new CommandParameterInfo("BridgedActions", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo bridgedActionsdisableActionactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsdisableActionCommandParams.put(
        "actionID", bridgedActionsdisableActionactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsdisableActioninvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsdisableActionCommandParams.put(
        "invokeID", bridgedActionsdisableActioninvokeIDCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsdisableActionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .disableAction(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsdisableActionCommandParams);
    bridgedActionsClusterCommandInfoMap.put(
        "disableAction", bridgedActionsdisableActionCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsdisableActionWithDurationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo bridgedActionsdisableActionWithDurationCommandParameterInfo =
        new CommandParameterInfo("BridgedActions", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo bridgedActionsdisableActionWithDurationactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsdisableActionWithDurationCommandParams.put(
        "actionID", bridgedActionsdisableActionWithDurationactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsdisableActionWithDurationinvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsdisableActionWithDurationCommandParams.put(
        "invokeID", bridgedActionsdisableActionWithDurationinvokeIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsdisableActionWithDurationdurationCommandParameterInfo =
        new CommandParameterInfo("duration", long.class);
    bridgedActionsdisableActionWithDurationCommandParams.put(
        "duration", bridgedActionsdisableActionWithDurationdurationCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsdisableActionWithDurationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .disableActionWithDuration(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"),
                      (Long) commandArguments.get("duration"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsdisableActionWithDurationCommandParams);
    bridgedActionsClusterCommandInfoMap.put(
        "disableActionWithDuration", bridgedActionsdisableActionWithDurationCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsenableActionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo bridgedActionsenableActionCommandParameterInfo =
        new CommandParameterInfo("BridgedActions", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo bridgedActionsenableActionactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsenableActionCommandParams.put(
        "actionID", bridgedActionsenableActionactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsenableActioninvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsenableActionCommandParams.put(
        "invokeID", bridgedActionsenableActioninvokeIDCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsenableActionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .enableAction(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsenableActionCommandParams);
    bridgedActionsClusterCommandInfoMap.put("enableAction", bridgedActionsenableActionCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsenableActionWithDurationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo bridgedActionsenableActionWithDurationCommandParameterInfo =
        new CommandParameterInfo("BridgedActions", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo bridgedActionsenableActionWithDurationactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsenableActionWithDurationCommandParams.put(
        "actionID", bridgedActionsenableActionWithDurationactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsenableActionWithDurationinvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsenableActionWithDurationCommandParams.put(
        "invokeID", bridgedActionsenableActionWithDurationinvokeIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsenableActionWithDurationdurationCommandParameterInfo =
        new CommandParameterInfo("duration", long.class);
    bridgedActionsenableActionWithDurationCommandParams.put(
        "duration", bridgedActionsenableActionWithDurationdurationCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsenableActionWithDurationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .enableActionWithDuration(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"),
                      (Long) commandArguments.get("duration"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsenableActionWithDurationCommandParams);
    bridgedActionsClusterCommandInfoMap.put(
        "enableActionWithDuration", bridgedActionsenableActionWithDurationCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsinstantActionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo bridgedActionsinstantActionCommandParameterInfo =
        new CommandParameterInfo("BridgedActions", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo bridgedActionsinstantActionactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsinstantActionCommandParams.put(
        "actionID", bridgedActionsinstantActionactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsinstantActioninvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsinstantActionCommandParams.put(
        "invokeID", bridgedActionsinstantActioninvokeIDCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsinstantActionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .instantAction(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsinstantActionCommandParams);
    bridgedActionsClusterCommandInfoMap.put(
        "instantAction", bridgedActionsinstantActionCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsinstantActionWithTransitionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo bridgedActionsinstantActionWithTransitionCommandParameterInfo =
        new CommandParameterInfo("BridgedActions", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo bridgedActionsinstantActionWithTransitionactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsinstantActionWithTransitionCommandParams.put(
        "actionID", bridgedActionsinstantActionWithTransitionactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsinstantActionWithTransitioninvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsinstantActionWithTransitionCommandParams.put(
        "invokeID", bridgedActionsinstantActionWithTransitioninvokeIDCommandParameterInfo);

    CommandParameterInfo
        bridgedActionsinstantActionWithTransitiontransitionTimeCommandParameterInfo =
            new CommandParameterInfo("transitionTime", int.class);
    bridgedActionsinstantActionWithTransitionCommandParams.put(
        "transitionTime",
        bridgedActionsinstantActionWithTransitiontransitionTimeCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsinstantActionWithTransitionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .instantActionWithTransition(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"),
                      (Integer) commandArguments.get("transitionTime"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsinstantActionWithTransitionCommandParams);
    bridgedActionsClusterCommandInfoMap.put(
        "instantActionWithTransition", bridgedActionsinstantActionWithTransitionCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionspauseActionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo bridgedActionspauseActionCommandParameterInfo =
        new CommandParameterInfo("BridgedActions", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo bridgedActionspauseActionactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionspauseActionCommandParams.put(
        "actionID", bridgedActionspauseActionactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionspauseActioninvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionspauseActionCommandParams.put(
        "invokeID", bridgedActionspauseActioninvokeIDCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionspauseActionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .pauseAction(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionspauseActionCommandParams);
    bridgedActionsClusterCommandInfoMap.put("pauseAction", bridgedActionspauseActionCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionspauseActionWithDurationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo bridgedActionspauseActionWithDurationCommandParameterInfo =
        new CommandParameterInfo("BridgedActions", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo bridgedActionspauseActionWithDurationactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionspauseActionWithDurationCommandParams.put(
        "actionID", bridgedActionspauseActionWithDurationactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionspauseActionWithDurationinvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionspauseActionWithDurationCommandParams.put(
        "invokeID", bridgedActionspauseActionWithDurationinvokeIDCommandParameterInfo);

    CommandParameterInfo bridgedActionspauseActionWithDurationdurationCommandParameterInfo =
        new CommandParameterInfo("duration", long.class);
    bridgedActionspauseActionWithDurationCommandParams.put(
        "duration", bridgedActionspauseActionWithDurationdurationCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionspauseActionWithDurationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .pauseActionWithDuration(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"),
                      (Long) commandArguments.get("duration"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionspauseActionWithDurationCommandParams);
    bridgedActionsClusterCommandInfoMap.put(
        "pauseActionWithDuration", bridgedActionspauseActionWithDurationCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsresumeActionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo bridgedActionsresumeActionCommandParameterInfo =
        new CommandParameterInfo("BridgedActions", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo bridgedActionsresumeActionactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsresumeActionCommandParams.put(
        "actionID", bridgedActionsresumeActionactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsresumeActioninvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsresumeActionCommandParams.put(
        "invokeID", bridgedActionsresumeActioninvokeIDCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsresumeActionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .resumeAction(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsresumeActionCommandParams);
    bridgedActionsClusterCommandInfoMap.put("resumeAction", bridgedActionsresumeActionCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsstartActionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo bridgedActionsstartActionCommandParameterInfo =
        new CommandParameterInfo("BridgedActions", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo bridgedActionsstartActionactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsstartActionCommandParams.put(
        "actionID", bridgedActionsstartActionactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsstartActioninvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsstartActionCommandParams.put(
        "invokeID", bridgedActionsstartActioninvokeIDCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsstartActionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .startAction(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsstartActionCommandParams);
    bridgedActionsClusterCommandInfoMap.put("startAction", bridgedActionsstartActionCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsstartActionWithDurationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo bridgedActionsstartActionWithDurationCommandParameterInfo =
        new CommandParameterInfo("BridgedActions", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo bridgedActionsstartActionWithDurationactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsstartActionWithDurationCommandParams.put(
        "actionID", bridgedActionsstartActionWithDurationactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsstartActionWithDurationinvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsstartActionWithDurationCommandParams.put(
        "invokeID", bridgedActionsstartActionWithDurationinvokeIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsstartActionWithDurationdurationCommandParameterInfo =
        new CommandParameterInfo("duration", long.class);
    bridgedActionsstartActionWithDurationCommandParams.put(
        "duration", bridgedActionsstartActionWithDurationdurationCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsstartActionWithDurationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .startActionWithDuration(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"),
                      (Long) commandArguments.get("duration"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsstartActionWithDurationCommandParams);
    bridgedActionsClusterCommandInfoMap.put(
        "startActionWithDuration", bridgedActionsstartActionWithDurationCommandInfo);
    Map<String, CommandParameterInfo> bridgedActionsstopActionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo bridgedActionsstopActionCommandParameterInfo =
        new CommandParameterInfo("BridgedActions", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo bridgedActionsstopActionactionIDCommandParameterInfo =
        new CommandParameterInfo("actionID", int.class);
    bridgedActionsstopActionCommandParams.put(
        "actionID", bridgedActionsstopActionactionIDCommandParameterInfo);

    CommandParameterInfo bridgedActionsstopActioninvokeIDCommandParameterInfo =
        new CommandParameterInfo("invokeID", long.class);
    bridgedActionsstopActionCommandParams.put(
        "invokeID", bridgedActionsstopActioninvokeIDCommandParameterInfo);

    // Populate commands
    CommandInfo bridgedActionsstopActionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedActionsCluster) cluster)
                  .stopAction(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("actionID"),
                      (Long) commandArguments.get("invokeID"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            bridgedActionsstopActionCommandParams);
    bridgedActionsClusterCommandInfoMap.put("stopAction", bridgedActionsstopActionCommandInfo);
    // Populate cluster
    ClusterInfo bridgedActionsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BridgedActionsCluster(ptr, endpointId),
            bridgedActionsClusterCommandInfoMap);
    clusterMap.put("bridgedActions", bridgedActionsClusterInfo);
    Map<String, CommandInfo> bridgedDeviceBasicClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo bridgedDeviceBasicClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.BridgedDeviceBasicCluster(ptr, endpointId),
            bridgedDeviceBasicClusterCommandInfoMap);
    clusterMap.put("bridgedDeviceBasic", bridgedDeviceBasicClusterInfo);
    Map<String, CommandInfo> colorControlClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> colorControlcolorLoopSetCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlcolorLoopSetCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlcolorLoopSetupdateFlagsCommandParameterInfo =
        new CommandParameterInfo("updateFlags", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "updateFlags", colorControlcolorLoopSetupdateFlagsCommandParameterInfo);

    CommandParameterInfo colorControlcolorLoopSetactionCommandParameterInfo =
        new CommandParameterInfo("action", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "action", colorControlcolorLoopSetactionCommandParameterInfo);

    CommandParameterInfo colorControlcolorLoopSetdirectionCommandParameterInfo =
        new CommandParameterInfo("direction", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "direction", colorControlcolorLoopSetdirectionCommandParameterInfo);

    CommandParameterInfo colorControlcolorLoopSettimeCommandParameterInfo =
        new CommandParameterInfo("time", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "time", colorControlcolorLoopSettimeCommandParameterInfo);

    CommandParameterInfo colorControlcolorLoopSetstartHueCommandParameterInfo =
        new CommandParameterInfo("startHue", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "startHue", colorControlcolorLoopSetstartHueCommandParameterInfo);

    CommandParameterInfo colorControlcolorLoopSetoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "optionsMask", colorControlcolorLoopSetoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlcolorLoopSetoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlcolorLoopSetCommandParams.put(
        "optionsOverride", colorControlcolorLoopSetoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlcolorLoopSetCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .colorLoopSet(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("updateFlags"),
                      (Integer) commandArguments.get("action"),
                      (Integer) commandArguments.get("direction"),
                      (Integer) commandArguments.get("time"),
                      (Integer) commandArguments.get("startHue"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlcolorLoopSetCommandParams);
    colorControlClusterCommandInfoMap.put("colorLoopSet", colorControlcolorLoopSetCommandInfo);
    Map<String, CommandParameterInfo> colorControlenhancedMoveHueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlenhancedMoveHueCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlenhancedMoveHuemoveModeCommandParameterInfo =
        new CommandParameterInfo("moveMode", int.class);
    colorControlenhancedMoveHueCommandParams.put(
        "moveMode", colorControlenhancedMoveHuemoveModeCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveHuerateCommandParameterInfo =
        new CommandParameterInfo("rate", int.class);
    colorControlenhancedMoveHueCommandParams.put(
        "rate", colorControlenhancedMoveHuerateCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveHueoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlenhancedMoveHueCommandParams.put(
        "optionsMask", colorControlenhancedMoveHueoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveHueoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlenhancedMoveHueCommandParams.put(
        "optionsOverride", colorControlenhancedMoveHueoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlenhancedMoveHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .enhancedMoveHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlenhancedMoveHueCommandParams);
    colorControlClusterCommandInfoMap.put(
        "enhancedMoveHue", colorControlenhancedMoveHueCommandInfo);
    Map<String, CommandParameterInfo> colorControlenhancedMoveToHueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlenhancedMoveToHueCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlenhancedMoveToHueenhancedHueCommandParameterInfo =
        new CommandParameterInfo("enhancedHue", int.class);
    colorControlenhancedMoveToHueCommandParams.put(
        "enhancedHue", colorControlenhancedMoveToHueenhancedHueCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveToHuedirectionCommandParameterInfo =
        new CommandParameterInfo("direction", int.class);
    colorControlenhancedMoveToHueCommandParams.put(
        "direction", colorControlenhancedMoveToHuedirectionCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveToHuetransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlenhancedMoveToHueCommandParams.put(
        "transitionTime", colorControlenhancedMoveToHuetransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveToHueoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlenhancedMoveToHueCommandParams.put(
        "optionsMask", colorControlenhancedMoveToHueoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveToHueoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlenhancedMoveToHueCommandParams.put(
        "optionsOverride", colorControlenhancedMoveToHueoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlenhancedMoveToHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .enhancedMoveToHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("enhancedHue"),
                      (Integer) commandArguments.get("direction"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlenhancedMoveToHueCommandParams);
    colorControlClusterCommandInfoMap.put(
        "enhancedMoveToHue", colorControlenhancedMoveToHueCommandInfo);
    Map<String, CommandParameterInfo> colorControlenhancedMoveToHueAndSaturationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlenhancedMoveToHueAndSaturationCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlenhancedMoveToHueAndSaturationenhancedHueCommandParameterInfo =
        new CommandParameterInfo("enhancedHue", int.class);
    colorControlenhancedMoveToHueAndSaturationCommandParams.put(
        "enhancedHue", colorControlenhancedMoveToHueAndSaturationenhancedHueCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveToHueAndSaturationsaturationCommandParameterInfo =
        new CommandParameterInfo("saturation", int.class);
    colorControlenhancedMoveToHueAndSaturationCommandParams.put(
        "saturation", colorControlenhancedMoveToHueAndSaturationsaturationCommandParameterInfo);

    CommandParameterInfo
        colorControlenhancedMoveToHueAndSaturationtransitionTimeCommandParameterInfo =
            new CommandParameterInfo("transitionTime", int.class);
    colorControlenhancedMoveToHueAndSaturationCommandParams.put(
        "transitionTime",
        colorControlenhancedMoveToHueAndSaturationtransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlenhancedMoveToHueAndSaturationoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlenhancedMoveToHueAndSaturationCommandParams.put(
        "optionsMask", colorControlenhancedMoveToHueAndSaturationoptionsMaskCommandParameterInfo);

    CommandParameterInfo
        colorControlenhancedMoveToHueAndSaturationoptionsOverrideCommandParameterInfo =
            new CommandParameterInfo("optionsOverride", int.class);
    colorControlenhancedMoveToHueAndSaturationCommandParams.put(
        "optionsOverride",
        colorControlenhancedMoveToHueAndSaturationoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlenhancedMoveToHueAndSaturationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .enhancedMoveToHueAndSaturation(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("enhancedHue"),
                      (Integer) commandArguments.get("saturation"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlenhancedMoveToHueAndSaturationCommandParams);
    colorControlClusterCommandInfoMap.put(
        "enhancedMoveToHueAndSaturation", colorControlenhancedMoveToHueAndSaturationCommandInfo);
    Map<String, CommandParameterInfo> colorControlenhancedStepHueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlenhancedStepHueCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlenhancedStepHuestepModeCommandParameterInfo =
        new CommandParameterInfo("stepMode", int.class);
    colorControlenhancedStepHueCommandParams.put(
        "stepMode", colorControlenhancedStepHuestepModeCommandParameterInfo);

    CommandParameterInfo colorControlenhancedStepHuestepSizeCommandParameterInfo =
        new CommandParameterInfo("stepSize", int.class);
    colorControlenhancedStepHueCommandParams.put(
        "stepSize", colorControlenhancedStepHuestepSizeCommandParameterInfo);

    CommandParameterInfo colorControlenhancedStepHuetransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlenhancedStepHueCommandParams.put(
        "transitionTime", colorControlenhancedStepHuetransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlenhancedStepHueoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlenhancedStepHueCommandParams.put(
        "optionsMask", colorControlenhancedStepHueoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlenhancedStepHueoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlenhancedStepHueCommandParams.put(
        "optionsOverride", colorControlenhancedStepHueoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlenhancedStepHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .enhancedStepHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlenhancedStepHueCommandParams);
    colorControlClusterCommandInfoMap.put(
        "enhancedStepHue", colorControlenhancedStepHueCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveColorCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlmoveColorCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlmoveColorrateXCommandParameterInfo =
        new CommandParameterInfo("rateX", int.class);
    colorControlmoveColorCommandParams.put("rateX", colorControlmoveColorrateXCommandParameterInfo);

    CommandParameterInfo colorControlmoveColorrateYCommandParameterInfo =
        new CommandParameterInfo("rateY", int.class);
    colorControlmoveColorCommandParams.put("rateY", colorControlmoveColorrateYCommandParameterInfo);

    CommandParameterInfo colorControlmoveColoroptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveColorCommandParams.put(
        "optionsMask", colorControlmoveColoroptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveColoroptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveColorCommandParams.put(
        "optionsOverride", colorControlmoveColoroptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveColorCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveColor(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("rateX"),
                      (Integer) commandArguments.get("rateY"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveColorCommandParams);
    colorControlClusterCommandInfoMap.put("moveColor", colorControlmoveColorCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveColorTemperatureCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlmoveColorTemperatureCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlmoveColorTemperaturemoveModeCommandParameterInfo =
        new CommandParameterInfo("moveMode", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "moveMode", colorControlmoveColorTemperaturemoveModeCommandParameterInfo);

    CommandParameterInfo colorControlmoveColorTemperaturerateCommandParameterInfo =
        new CommandParameterInfo("rate", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "rate", colorControlmoveColorTemperaturerateCommandParameterInfo);

    CommandParameterInfo
        colorControlmoveColorTemperaturecolorTemperatureMinimumCommandParameterInfo =
            new CommandParameterInfo("colorTemperatureMinimum", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "colorTemperatureMinimum",
        colorControlmoveColorTemperaturecolorTemperatureMinimumCommandParameterInfo);

    CommandParameterInfo
        colorControlmoveColorTemperaturecolorTemperatureMaximumCommandParameterInfo =
            new CommandParameterInfo("colorTemperatureMaximum", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "colorTemperatureMaximum",
        colorControlmoveColorTemperaturecolorTemperatureMaximumCommandParameterInfo);

    CommandParameterInfo colorControlmoveColorTemperatureoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "optionsMask", colorControlmoveColorTemperatureoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveColorTemperatureoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveColorTemperatureCommandParams.put(
        "optionsOverride", colorControlmoveColorTemperatureoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveColorTemperatureCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveColorTemperature(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"),
                      (Integer) commandArguments.get("colorTemperatureMinimum"),
                      (Integer) commandArguments.get("colorTemperatureMaximum"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveColorTemperatureCommandParams);
    colorControlClusterCommandInfoMap.put(
        "moveColorTemperature", colorControlmoveColorTemperatureCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveHueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlmoveHueCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlmoveHuemoveModeCommandParameterInfo =
        new CommandParameterInfo("moveMode", int.class);
    colorControlmoveHueCommandParams.put(
        "moveMode", colorControlmoveHuemoveModeCommandParameterInfo);

    CommandParameterInfo colorControlmoveHuerateCommandParameterInfo =
        new CommandParameterInfo("rate", int.class);
    colorControlmoveHueCommandParams.put("rate", colorControlmoveHuerateCommandParameterInfo);

    CommandParameterInfo colorControlmoveHueoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveHueCommandParams.put(
        "optionsMask", colorControlmoveHueoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveHueoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveHueCommandParams.put(
        "optionsOverride", colorControlmoveHueoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveHueCommandParams);
    colorControlClusterCommandInfoMap.put("moveHue", colorControlmoveHueCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveSaturationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlmoveSaturationCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlmoveSaturationmoveModeCommandParameterInfo =
        new CommandParameterInfo("moveMode", int.class);
    colorControlmoveSaturationCommandParams.put(
        "moveMode", colorControlmoveSaturationmoveModeCommandParameterInfo);

    CommandParameterInfo colorControlmoveSaturationrateCommandParameterInfo =
        new CommandParameterInfo("rate", int.class);
    colorControlmoveSaturationCommandParams.put(
        "rate", colorControlmoveSaturationrateCommandParameterInfo);

    CommandParameterInfo colorControlmoveSaturationoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveSaturationCommandParams.put(
        "optionsMask", colorControlmoveSaturationoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveSaturationoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveSaturationCommandParams.put(
        "optionsOverride", colorControlmoveSaturationoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveSaturationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveSaturation(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveSaturationCommandParams);
    colorControlClusterCommandInfoMap.put("moveSaturation", colorControlmoveSaturationCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveToColorCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlmoveToColorCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlmoveToColorcolorXCommandParameterInfo =
        new CommandParameterInfo("colorX", int.class);
    colorControlmoveToColorCommandParams.put(
        "colorX", colorControlmoveToColorcolorXCommandParameterInfo);

    CommandParameterInfo colorControlmoveToColorcolorYCommandParameterInfo =
        new CommandParameterInfo("colorY", int.class);
    colorControlmoveToColorCommandParams.put(
        "colorY", colorControlmoveToColorcolorYCommandParameterInfo);

    CommandParameterInfo colorControlmoveToColortransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlmoveToColorCommandParams.put(
        "transitionTime", colorControlmoveToColortransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlmoveToColoroptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveToColorCommandParams.put(
        "optionsMask", colorControlmoveToColoroptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveToColoroptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveToColorCommandParams.put(
        "optionsOverride", colorControlmoveToColoroptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveToColorCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveToColor(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("colorX"),
                      (Integer) commandArguments.get("colorY"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveToColorCommandParams);
    colorControlClusterCommandInfoMap.put("moveToColor", colorControlmoveToColorCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveToColorTemperatureCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlmoveToColorTemperatureCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlmoveToColorTemperaturecolorTemperatureCommandParameterInfo =
        new CommandParameterInfo("colorTemperature", int.class);
    colorControlmoveToColorTemperatureCommandParams.put(
        "colorTemperature", colorControlmoveToColorTemperaturecolorTemperatureCommandParameterInfo);

    CommandParameterInfo colorControlmoveToColorTemperaturetransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlmoveToColorTemperatureCommandParams.put(
        "transitionTime", colorControlmoveToColorTemperaturetransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlmoveToColorTemperatureoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveToColorTemperatureCommandParams.put(
        "optionsMask", colorControlmoveToColorTemperatureoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveToColorTemperatureoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveToColorTemperatureCommandParams.put(
        "optionsOverride", colorControlmoveToColorTemperatureoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveToColorTemperatureCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveToColorTemperature(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("colorTemperature"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveToColorTemperatureCommandParams);
    colorControlClusterCommandInfoMap.put(
        "moveToColorTemperature", colorControlmoveToColorTemperatureCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveToHueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlmoveToHueCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlmoveToHuehueCommandParameterInfo =
        new CommandParameterInfo("hue", int.class);
    colorControlmoveToHueCommandParams.put("hue", colorControlmoveToHuehueCommandParameterInfo);

    CommandParameterInfo colorControlmoveToHuedirectionCommandParameterInfo =
        new CommandParameterInfo("direction", int.class);
    colorControlmoveToHueCommandParams.put(
        "direction", colorControlmoveToHuedirectionCommandParameterInfo);

    CommandParameterInfo colorControlmoveToHuetransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlmoveToHueCommandParams.put(
        "transitionTime", colorControlmoveToHuetransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlmoveToHueoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveToHueCommandParams.put(
        "optionsMask", colorControlmoveToHueoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveToHueoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveToHueCommandParams.put(
        "optionsOverride", colorControlmoveToHueoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveToHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveToHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("hue"),
                      (Integer) commandArguments.get("direction"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveToHueCommandParams);
    colorControlClusterCommandInfoMap.put("moveToHue", colorControlmoveToHueCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveToHueAndSaturationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlmoveToHueAndSaturationCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlmoveToHueAndSaturationhueCommandParameterInfo =
        new CommandParameterInfo("hue", int.class);
    colorControlmoveToHueAndSaturationCommandParams.put(
        "hue", colorControlmoveToHueAndSaturationhueCommandParameterInfo);

    CommandParameterInfo colorControlmoveToHueAndSaturationsaturationCommandParameterInfo =
        new CommandParameterInfo("saturation", int.class);
    colorControlmoveToHueAndSaturationCommandParams.put(
        "saturation", colorControlmoveToHueAndSaturationsaturationCommandParameterInfo);

    CommandParameterInfo colorControlmoveToHueAndSaturationtransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlmoveToHueAndSaturationCommandParams.put(
        "transitionTime", colorControlmoveToHueAndSaturationtransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlmoveToHueAndSaturationoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveToHueAndSaturationCommandParams.put(
        "optionsMask", colorControlmoveToHueAndSaturationoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveToHueAndSaturationoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveToHueAndSaturationCommandParams.put(
        "optionsOverride", colorControlmoveToHueAndSaturationoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveToHueAndSaturationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveToHueAndSaturation(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("hue"),
                      (Integer) commandArguments.get("saturation"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveToHueAndSaturationCommandParams);
    colorControlClusterCommandInfoMap.put(
        "moveToHueAndSaturation", colorControlmoveToHueAndSaturationCommandInfo);
    Map<String, CommandParameterInfo> colorControlmoveToSaturationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlmoveToSaturationCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlmoveToSaturationsaturationCommandParameterInfo =
        new CommandParameterInfo("saturation", int.class);
    colorControlmoveToSaturationCommandParams.put(
        "saturation", colorControlmoveToSaturationsaturationCommandParameterInfo);

    CommandParameterInfo colorControlmoveToSaturationtransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlmoveToSaturationCommandParams.put(
        "transitionTime", colorControlmoveToSaturationtransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlmoveToSaturationoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlmoveToSaturationCommandParams.put(
        "optionsMask", colorControlmoveToSaturationoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlmoveToSaturationoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlmoveToSaturationCommandParams.put(
        "optionsOverride", colorControlmoveToSaturationoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlmoveToSaturationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .moveToSaturation(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("saturation"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlmoveToSaturationCommandParams);
    colorControlClusterCommandInfoMap.put(
        "moveToSaturation", colorControlmoveToSaturationCommandInfo);
    Map<String, CommandParameterInfo> colorControlstepColorCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlstepColorCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlstepColorstepXCommandParameterInfo =
        new CommandParameterInfo("stepX", int.class);
    colorControlstepColorCommandParams.put("stepX", colorControlstepColorstepXCommandParameterInfo);

    CommandParameterInfo colorControlstepColorstepYCommandParameterInfo =
        new CommandParameterInfo("stepY", int.class);
    colorControlstepColorCommandParams.put("stepY", colorControlstepColorstepYCommandParameterInfo);

    CommandParameterInfo colorControlstepColortransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlstepColorCommandParams.put(
        "transitionTime", colorControlstepColortransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlstepColoroptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlstepColorCommandParams.put(
        "optionsMask", colorControlstepColoroptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlstepColoroptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlstepColorCommandParams.put(
        "optionsOverride", colorControlstepColoroptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlstepColorCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .stepColor(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepX"),
                      (Integer) commandArguments.get("stepY"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlstepColorCommandParams);
    colorControlClusterCommandInfoMap.put("stepColor", colorControlstepColorCommandInfo);
    Map<String, CommandParameterInfo> colorControlstepColorTemperatureCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlstepColorTemperatureCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlstepColorTemperaturestepModeCommandParameterInfo =
        new CommandParameterInfo("stepMode", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "stepMode", colorControlstepColorTemperaturestepModeCommandParameterInfo);

    CommandParameterInfo colorControlstepColorTemperaturestepSizeCommandParameterInfo =
        new CommandParameterInfo("stepSize", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "stepSize", colorControlstepColorTemperaturestepSizeCommandParameterInfo);

    CommandParameterInfo colorControlstepColorTemperaturetransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "transitionTime", colorControlstepColorTemperaturetransitionTimeCommandParameterInfo);

    CommandParameterInfo
        colorControlstepColorTemperaturecolorTemperatureMinimumCommandParameterInfo =
            new CommandParameterInfo("colorTemperatureMinimum", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "colorTemperatureMinimum",
        colorControlstepColorTemperaturecolorTemperatureMinimumCommandParameterInfo);

    CommandParameterInfo
        colorControlstepColorTemperaturecolorTemperatureMaximumCommandParameterInfo =
            new CommandParameterInfo("colorTemperatureMaximum", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "colorTemperatureMaximum",
        colorControlstepColorTemperaturecolorTemperatureMaximumCommandParameterInfo);

    CommandParameterInfo colorControlstepColorTemperatureoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "optionsMask", colorControlstepColorTemperatureoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlstepColorTemperatureoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlstepColorTemperatureCommandParams.put(
        "optionsOverride", colorControlstepColorTemperatureoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlstepColorTemperatureCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .stepColorTemperature(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("colorTemperatureMinimum"),
                      (Integer) commandArguments.get("colorTemperatureMaximum"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlstepColorTemperatureCommandParams);
    colorControlClusterCommandInfoMap.put(
        "stepColorTemperature", colorControlstepColorTemperatureCommandInfo);
    Map<String, CommandParameterInfo> colorControlstepHueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlstepHueCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlstepHuestepModeCommandParameterInfo =
        new CommandParameterInfo("stepMode", int.class);
    colorControlstepHueCommandParams.put(
        "stepMode", colorControlstepHuestepModeCommandParameterInfo);

    CommandParameterInfo colorControlstepHuestepSizeCommandParameterInfo =
        new CommandParameterInfo("stepSize", int.class);
    colorControlstepHueCommandParams.put(
        "stepSize", colorControlstepHuestepSizeCommandParameterInfo);

    CommandParameterInfo colorControlstepHuetransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlstepHueCommandParams.put(
        "transitionTime", colorControlstepHuetransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlstepHueoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlstepHueCommandParams.put(
        "optionsMask", colorControlstepHueoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlstepHueoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlstepHueCommandParams.put(
        "optionsOverride", colorControlstepHueoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlstepHueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .stepHue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlstepHueCommandParams);
    colorControlClusterCommandInfoMap.put("stepHue", colorControlstepHueCommandInfo);
    Map<String, CommandParameterInfo> colorControlstepSaturationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlstepSaturationCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlstepSaturationstepModeCommandParameterInfo =
        new CommandParameterInfo("stepMode", int.class);
    colorControlstepSaturationCommandParams.put(
        "stepMode", colorControlstepSaturationstepModeCommandParameterInfo);

    CommandParameterInfo colorControlstepSaturationstepSizeCommandParameterInfo =
        new CommandParameterInfo("stepSize", int.class);
    colorControlstepSaturationCommandParams.put(
        "stepSize", colorControlstepSaturationstepSizeCommandParameterInfo);

    CommandParameterInfo colorControlstepSaturationtransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    colorControlstepSaturationCommandParams.put(
        "transitionTime", colorControlstepSaturationtransitionTimeCommandParameterInfo);

    CommandParameterInfo colorControlstepSaturationoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlstepSaturationCommandParams.put(
        "optionsMask", colorControlstepSaturationoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlstepSaturationoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlstepSaturationCommandParams.put(
        "optionsOverride", colorControlstepSaturationoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlstepSaturationCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .stepSaturation(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlstepSaturationCommandParams);
    colorControlClusterCommandInfoMap.put("stepSaturation", colorControlstepSaturationCommandInfo);
    Map<String, CommandParameterInfo> colorControlstopMoveStepCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo colorControlstopMoveStepCommandParameterInfo =
        new CommandParameterInfo("ColorControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo colorControlstopMoveStepoptionsMaskCommandParameterInfo =
        new CommandParameterInfo("optionsMask", int.class);
    colorControlstopMoveStepCommandParams.put(
        "optionsMask", colorControlstopMoveStepoptionsMaskCommandParameterInfo);

    CommandParameterInfo colorControlstopMoveStepoptionsOverrideCommandParameterInfo =
        new CommandParameterInfo("optionsOverride", int.class);
    colorControlstopMoveStepCommandParams.put(
        "optionsOverride", colorControlstopMoveStepoptionsOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo colorControlstopMoveStepCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .stopMoveStep(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("optionsMask"),
                      (Integer) commandArguments.get("optionsOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            colorControlstopMoveStepCommandParams);
    colorControlClusterCommandInfoMap.put("stopMoveStep", colorControlstopMoveStepCommandInfo);
    // Populate cluster
    ClusterInfo colorControlClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ColorControlCluster(ptr, endpointId),
            colorControlClusterCommandInfoMap);
    clusterMap.put("colorControl", colorControlClusterInfo);
    Map<String, CommandInfo> contentLauncherClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> contentLauncherlaunchContentCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo contentLauncherlaunchContentCommandParameterInfo =
        new CommandParameterInfo(
            "ContentLauncher",
            ChipClusters.ContentLauncherCluster.LaunchContentResponseCallback.class);
    CommandParameterInfo contentLauncherlaunchContentautoPlayCommandParameterInfo =
        new CommandParameterInfo("autoPlay", boolean.class);
    contentLauncherlaunchContentCommandParams.put(
        "autoPlay", contentLauncherlaunchContentautoPlayCommandParameterInfo);

    CommandParameterInfo contentLauncherlaunchContentdataCommandParameterInfo =
        new CommandParameterInfo("data", String.class);
    contentLauncherlaunchContentCommandParams.put(
        "data", contentLauncherlaunchContentdataCommandParameterInfo);

    // Populate commands
    CommandInfo contentLauncherlaunchContentCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ContentLauncherCluster) cluster)
                  .launchContent(
                      (ChipClusters.ContentLauncherCluster.LaunchContentResponseCallback) callback,
                      (Boolean) commandArguments.get("autoPlay"),
                      (String) commandArguments.get("data"));
            },
            () -> new DelegatedLaunchContentResponseCallback(),
            contentLauncherlaunchContentCommandParams);
    contentLauncherClusterCommandInfoMap.put(
        "launchContent", contentLauncherlaunchContentCommandInfo);
    Map<String, CommandParameterInfo> contentLauncherlaunchURLCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo contentLauncherlaunchURLCommandParameterInfo =
        new CommandParameterInfo(
            "ContentLauncher", ChipClusters.ContentLauncherCluster.LaunchURLResponseCallback.class);
    CommandParameterInfo contentLauncherlaunchURLcontentURLCommandParameterInfo =
        new CommandParameterInfo("contentURL", String.class);
    contentLauncherlaunchURLCommandParams.put(
        "contentURL", contentLauncherlaunchURLcontentURLCommandParameterInfo);

    CommandParameterInfo contentLauncherlaunchURLdisplayStringCommandParameterInfo =
        new CommandParameterInfo("displayString", String.class);
    contentLauncherlaunchURLCommandParams.put(
        "displayString", contentLauncherlaunchURLdisplayStringCommandParameterInfo);

    // Populate commands
    CommandInfo contentLauncherlaunchURLCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ContentLauncherCluster) cluster)
                  .launchURL(
                      (ChipClusters.ContentLauncherCluster.LaunchURLResponseCallback) callback,
                      (String) commandArguments.get("contentURL"),
                      (String) commandArguments.get("displayString"));
            },
            () -> new DelegatedLaunchURLResponseCallback(),
            contentLauncherlaunchURLCommandParams);
    contentLauncherClusterCommandInfoMap.put("launchURL", contentLauncherlaunchURLCommandInfo);
    // Populate cluster
    ClusterInfo contentLauncherClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ContentLauncherCluster(ptr, endpointId),
            contentLauncherClusterCommandInfoMap);
    clusterMap.put("contentLauncher", contentLauncherClusterInfo);
    Map<String, CommandInfo> descriptorClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo descriptorClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.DescriptorCluster(ptr, endpointId),
            descriptorClusterCommandInfoMap);
    clusterMap.put("descriptor", descriptorClusterInfo);
    Map<String, CommandInfo> diagnosticLogsClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> diagnosticLogsretrieveLogsRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo diagnosticLogsretrieveLogsRequestCommandParameterInfo =
        new CommandParameterInfo(
            "DiagnosticLogs",
            ChipClusters.DiagnosticLogsCluster.RetrieveLogsResponseCallback.class);
    CommandParameterInfo diagnosticLogsretrieveLogsRequestintentCommandParameterInfo =
        new CommandParameterInfo("intent", int.class);
    diagnosticLogsretrieveLogsRequestCommandParams.put(
        "intent", diagnosticLogsretrieveLogsRequestintentCommandParameterInfo);

    CommandParameterInfo diagnosticLogsretrieveLogsRequestrequestedProtocolCommandParameterInfo =
        new CommandParameterInfo("requestedProtocol", int.class);
    diagnosticLogsretrieveLogsRequestCommandParams.put(
        "requestedProtocol",
        diagnosticLogsretrieveLogsRequestrequestedProtocolCommandParameterInfo);

    CommandParameterInfo
        diagnosticLogsretrieveLogsRequesttransferFileDesignatorCommandParameterInfo =
            new CommandParameterInfo("transferFileDesignator", byte[].class);
    diagnosticLogsretrieveLogsRequestCommandParams.put(
        "transferFileDesignator",
        diagnosticLogsretrieveLogsRequesttransferFileDesignatorCommandParameterInfo);

    // Populate commands
    CommandInfo diagnosticLogsretrieveLogsRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DiagnosticLogsCluster) cluster)
                  .retrieveLogsRequest(
                      (ChipClusters.DiagnosticLogsCluster.RetrieveLogsResponseCallback) callback,
                      (Integer) commandArguments.get("intent"),
                      (Integer) commandArguments.get("requestedProtocol"),
                      (byte[]) commandArguments.get("transferFileDesignator"));
            },
            () -> new DelegatedRetrieveLogsResponseCallback(),
            diagnosticLogsretrieveLogsRequestCommandParams);
    diagnosticLogsClusterCommandInfoMap.put(
        "retrieveLogsRequest", diagnosticLogsretrieveLogsRequestCommandInfo);
    // Populate cluster
    ClusterInfo diagnosticLogsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.DiagnosticLogsCluster(ptr, endpointId),
            diagnosticLogsClusterCommandInfoMap);
    clusterMap.put("diagnosticLogs", diagnosticLogsClusterInfo);
    Map<String, CommandInfo> doorLockClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> doorLockclearAllPinsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLockclearAllPinsCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.ClearAllPinsResponseCallback.class);
    // Populate commands
    CommandInfo doorLockclearAllPinsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearAllPins(
                      (ChipClusters.DoorLockCluster.ClearAllPinsResponseCallback) callback);
            },
            () -> new DelegatedClearAllPinsResponseCallback(),
            doorLockclearAllPinsCommandParams);
    doorLockClusterCommandInfoMap.put("clearAllPins", doorLockclearAllPinsCommandInfo);
    Map<String, CommandParameterInfo> doorLockclearAllRfidsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLockclearAllRfidsCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.ClearAllRfidsResponseCallback.class);
    // Populate commands
    CommandInfo doorLockclearAllRfidsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearAllRfids(
                      (ChipClusters.DoorLockCluster.ClearAllRfidsResponseCallback) callback);
            },
            () -> new DelegatedClearAllRfidsResponseCallback(),
            doorLockclearAllRfidsCommandParams);
    doorLockClusterCommandInfoMap.put("clearAllRfids", doorLockclearAllRfidsCommandInfo);
    Map<String, CommandParameterInfo> doorLockclearHolidayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLockclearHolidayScheduleCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.ClearHolidayScheduleResponseCallback.class);
    CommandParameterInfo doorLockclearHolidaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLockclearHolidayScheduleCommandParams.put(
        "scheduleId", doorLockclearHolidaySchedulescheduleIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockclearHolidayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearHolidaySchedule(
                      (ChipClusters.DoorLockCluster.ClearHolidayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"));
            },
            () -> new DelegatedClearHolidayScheduleResponseCallback(),
            doorLockclearHolidayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put(
        "clearHolidaySchedule", doorLockclearHolidayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLockclearPinCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLockclearPinCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.ClearPinResponseCallback.class);
    CommandParameterInfo doorLockclearPinuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockclearPinCommandParams.put("userId", doorLockclearPinuserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockclearPinCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearPin(
                      (ChipClusters.DoorLockCluster.ClearPinResponseCallback) callback,
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedClearPinResponseCallback(),
            doorLockclearPinCommandParams);
    doorLockClusterCommandInfoMap.put("clearPin", doorLockclearPinCommandInfo);
    Map<String, CommandParameterInfo> doorLockclearRfidCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLockclearRfidCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.ClearRfidResponseCallback.class);
    CommandParameterInfo doorLockclearRfiduserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockclearRfidCommandParams.put("userId", doorLockclearRfiduserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockclearRfidCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearRfid(
                      (ChipClusters.DoorLockCluster.ClearRfidResponseCallback) callback,
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedClearRfidResponseCallback(),
            doorLockclearRfidCommandParams);
    doorLockClusterCommandInfoMap.put("clearRfid", doorLockclearRfidCommandInfo);
    Map<String, CommandParameterInfo> doorLockclearWeekdayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLockclearWeekdayScheduleCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.ClearWeekdayScheduleResponseCallback.class);
    CommandParameterInfo doorLockclearWeekdaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLockclearWeekdayScheduleCommandParams.put(
        "scheduleId", doorLockclearWeekdaySchedulescheduleIdCommandParameterInfo);

    CommandParameterInfo doorLockclearWeekdayScheduleuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockclearWeekdayScheduleCommandParams.put(
        "userId", doorLockclearWeekdayScheduleuserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockclearWeekdayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearWeekdaySchedule(
                      (ChipClusters.DoorLockCluster.ClearWeekdayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedClearWeekdayScheduleResponseCallback(),
            doorLockclearWeekdayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put(
        "clearWeekdaySchedule", doorLockclearWeekdayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLockclearYeardayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLockclearYeardayScheduleCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.ClearYeardayScheduleResponseCallback.class);
    CommandParameterInfo doorLockclearYeardaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLockclearYeardayScheduleCommandParams.put(
        "scheduleId", doorLockclearYeardaySchedulescheduleIdCommandParameterInfo);

    CommandParameterInfo doorLockclearYeardayScheduleuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockclearYeardayScheduleCommandParams.put(
        "userId", doorLockclearYeardayScheduleuserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockclearYeardayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .clearYeardaySchedule(
                      (ChipClusters.DoorLockCluster.ClearYeardayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedClearYeardayScheduleResponseCallback(),
            doorLockclearYeardayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put(
        "clearYeardaySchedule", doorLockclearYeardayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLockgetHolidayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLockgetHolidayScheduleCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.GetHolidayScheduleResponseCallback.class);
    CommandParameterInfo doorLockgetHolidaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLockgetHolidayScheduleCommandParams.put(
        "scheduleId", doorLockgetHolidaySchedulescheduleIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockgetHolidayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getHolidaySchedule(
                      (ChipClusters.DoorLockCluster.GetHolidayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"));
            },
            () -> new DelegatedGetHolidayScheduleResponseCallback(),
            doorLockgetHolidayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put("getHolidaySchedule", doorLockgetHolidayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLockgetLogRecordCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLockgetLogRecordCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.GetLogRecordResponseCallback.class);
    CommandParameterInfo doorLockgetLogRecordlogIndexCommandParameterInfo =
        new CommandParameterInfo("logIndex", int.class);
    doorLockgetLogRecordCommandParams.put(
        "logIndex", doorLockgetLogRecordlogIndexCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockgetLogRecordCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getLogRecord(
                      (ChipClusters.DoorLockCluster.GetLogRecordResponseCallback) callback,
                      (Integer) commandArguments.get("logIndex"));
            },
            () -> new DelegatedGetLogRecordResponseCallback(),
            doorLockgetLogRecordCommandParams);
    doorLockClusterCommandInfoMap.put("getLogRecord", doorLockgetLogRecordCommandInfo);
    Map<String, CommandParameterInfo> doorLockgetPinCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLockgetPinCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.GetPinResponseCallback.class);
    CommandParameterInfo doorLockgetPinuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockgetPinCommandParams.put("userId", doorLockgetPinuserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockgetPinCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getPin(
                      (ChipClusters.DoorLockCluster.GetPinResponseCallback) callback,
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedGetPinResponseCallback(),
            doorLockgetPinCommandParams);
    doorLockClusterCommandInfoMap.put("getPin", doorLockgetPinCommandInfo);
    Map<String, CommandParameterInfo> doorLockgetRfidCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLockgetRfidCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.GetRfidResponseCallback.class);
    CommandParameterInfo doorLockgetRfiduserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockgetRfidCommandParams.put("userId", doorLockgetRfiduserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockgetRfidCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getRfid(
                      (ChipClusters.DoorLockCluster.GetRfidResponseCallback) callback,
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedGetRfidResponseCallback(),
            doorLockgetRfidCommandParams);
    doorLockClusterCommandInfoMap.put("getRfid", doorLockgetRfidCommandInfo);
    Map<String, CommandParameterInfo> doorLockgetUserTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLockgetUserTypeCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.GetUserTypeResponseCallback.class);
    CommandParameterInfo doorLockgetUserTypeuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockgetUserTypeCommandParams.put("userId", doorLockgetUserTypeuserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockgetUserTypeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getUserType(
                      (ChipClusters.DoorLockCluster.GetUserTypeResponseCallback) callback,
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedGetUserTypeResponseCallback(),
            doorLockgetUserTypeCommandParams);
    doorLockClusterCommandInfoMap.put("getUserType", doorLockgetUserTypeCommandInfo);
    Map<String, CommandParameterInfo> doorLockgetWeekdayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLockgetWeekdayScheduleCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.GetWeekdayScheduleResponseCallback.class);
    CommandParameterInfo doorLockgetWeekdaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLockgetWeekdayScheduleCommandParams.put(
        "scheduleId", doorLockgetWeekdaySchedulescheduleIdCommandParameterInfo);

    CommandParameterInfo doorLockgetWeekdayScheduleuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockgetWeekdayScheduleCommandParams.put(
        "userId", doorLockgetWeekdayScheduleuserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockgetWeekdayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getWeekdaySchedule(
                      (ChipClusters.DoorLockCluster.GetWeekdayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedGetWeekdayScheduleResponseCallback(),
            doorLockgetWeekdayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put("getWeekdaySchedule", doorLockgetWeekdayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLockgetYeardayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLockgetYeardayScheduleCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.GetYeardayScheduleResponseCallback.class);
    CommandParameterInfo doorLockgetYeardaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLockgetYeardayScheduleCommandParams.put(
        "scheduleId", doorLockgetYeardaySchedulescheduleIdCommandParameterInfo);

    CommandParameterInfo doorLockgetYeardayScheduleuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLockgetYeardayScheduleCommandParams.put(
        "userId", doorLockgetYeardayScheduleuserIdCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockgetYeardayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .getYeardaySchedule(
                      (ChipClusters.DoorLockCluster.GetYeardayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"));
            },
            () -> new DelegatedGetYeardayScheduleResponseCallback(),
            doorLockgetYeardayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put("getYeardaySchedule", doorLockgetYeardayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLocklockDoorCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLocklockDoorCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.LockDoorResponseCallback.class);
    CommandParameterInfo doorLocklockDoorpinCommandParameterInfo =
        new CommandParameterInfo("pin", byte[].class);
    doorLocklockDoorCommandParams.put("pin", doorLocklockDoorpinCommandParameterInfo);

    // Populate commands
    CommandInfo doorLocklockDoorCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .lockDoor(
                      (ChipClusters.DoorLockCluster.LockDoorResponseCallback) callback,
                      (byte[]) commandArguments.get("pin"));
            },
            () -> new DelegatedLockDoorResponseCallback(),
            doorLocklockDoorCommandParams);
    doorLockClusterCommandInfoMap.put("lockDoor", doorLocklockDoorCommandInfo);
    Map<String, CommandParameterInfo> doorLocksetHolidayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLocksetHolidayScheduleCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.SetHolidayScheduleResponseCallback.class);
    CommandParameterInfo doorLocksetHolidaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLocksetHolidayScheduleCommandParams.put(
        "scheduleId", doorLocksetHolidaySchedulescheduleIdCommandParameterInfo);

    CommandParameterInfo doorLocksetHolidaySchedulelocalStartTimeCommandParameterInfo =
        new CommandParameterInfo("localStartTime", long.class);
    doorLocksetHolidayScheduleCommandParams.put(
        "localStartTime", doorLocksetHolidaySchedulelocalStartTimeCommandParameterInfo);

    CommandParameterInfo doorLocksetHolidaySchedulelocalEndTimeCommandParameterInfo =
        new CommandParameterInfo("localEndTime", long.class);
    doorLocksetHolidayScheduleCommandParams.put(
        "localEndTime", doorLocksetHolidaySchedulelocalEndTimeCommandParameterInfo);

    CommandParameterInfo doorLocksetHolidayScheduleoperatingModeDuringHolidayCommandParameterInfo =
        new CommandParameterInfo("operatingModeDuringHoliday", int.class);
    doorLocksetHolidayScheduleCommandParams.put(
        "operatingModeDuringHoliday",
        doorLocksetHolidayScheduleoperatingModeDuringHolidayCommandParameterInfo);

    // Populate commands
    CommandInfo doorLocksetHolidayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setHolidaySchedule(
                      (ChipClusters.DoorLockCluster.SetHolidayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Long) commandArguments.get("localStartTime"),
                      (Long) commandArguments.get("localEndTime"),
                      (Integer) commandArguments.get("operatingModeDuringHoliday"));
            },
            () -> new DelegatedSetHolidayScheduleResponseCallback(),
            doorLocksetHolidayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put("setHolidaySchedule", doorLocksetHolidayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLocksetPinCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLocksetPinCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.SetPinResponseCallback.class);
    CommandParameterInfo doorLocksetPinuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLocksetPinCommandParams.put("userId", doorLocksetPinuserIdCommandParameterInfo);

    CommandParameterInfo doorLocksetPinuserStatusCommandParameterInfo =
        new CommandParameterInfo("userStatus", int.class);
    doorLocksetPinCommandParams.put("userStatus", doorLocksetPinuserStatusCommandParameterInfo);

    CommandParameterInfo doorLocksetPinuserTypeCommandParameterInfo =
        new CommandParameterInfo("userType", int.class);
    doorLocksetPinCommandParams.put("userType", doorLocksetPinuserTypeCommandParameterInfo);

    CommandParameterInfo doorLocksetPinpinCommandParameterInfo =
        new CommandParameterInfo("pin", byte[].class);
    doorLocksetPinCommandParams.put("pin", doorLocksetPinpinCommandParameterInfo);

    // Populate commands
    CommandInfo doorLocksetPinCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setPin(
                      (ChipClusters.DoorLockCluster.SetPinResponseCallback) callback,
                      (Integer) commandArguments.get("userId"),
                      (Integer) commandArguments.get("userStatus"),
                      (Integer) commandArguments.get("userType"),
                      (byte[]) commandArguments.get("pin"));
            },
            () -> new DelegatedSetPinResponseCallback(),
            doorLocksetPinCommandParams);
    doorLockClusterCommandInfoMap.put("setPin", doorLocksetPinCommandInfo);
    Map<String, CommandParameterInfo> doorLocksetRfidCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLocksetRfidCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.SetRfidResponseCallback.class);
    CommandParameterInfo doorLocksetRfiduserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLocksetRfidCommandParams.put("userId", doorLocksetRfiduserIdCommandParameterInfo);

    CommandParameterInfo doorLocksetRfiduserStatusCommandParameterInfo =
        new CommandParameterInfo("userStatus", int.class);
    doorLocksetRfidCommandParams.put("userStatus", doorLocksetRfiduserStatusCommandParameterInfo);

    CommandParameterInfo doorLocksetRfiduserTypeCommandParameterInfo =
        new CommandParameterInfo("userType", int.class);
    doorLocksetRfidCommandParams.put("userType", doorLocksetRfiduserTypeCommandParameterInfo);

    CommandParameterInfo doorLocksetRfididCommandParameterInfo =
        new CommandParameterInfo("id", byte[].class);
    doorLocksetRfidCommandParams.put("id", doorLocksetRfididCommandParameterInfo);

    // Populate commands
    CommandInfo doorLocksetRfidCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setRfid(
                      (ChipClusters.DoorLockCluster.SetRfidResponseCallback) callback,
                      (Integer) commandArguments.get("userId"),
                      (Integer) commandArguments.get("userStatus"),
                      (Integer) commandArguments.get("userType"),
                      (byte[]) commandArguments.get("id"));
            },
            () -> new DelegatedSetRfidResponseCallback(),
            doorLocksetRfidCommandParams);
    doorLockClusterCommandInfoMap.put("setRfid", doorLocksetRfidCommandInfo);
    Map<String, CommandParameterInfo> doorLocksetUserTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLocksetUserTypeCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.SetUserTypeResponseCallback.class);
    CommandParameterInfo doorLocksetUserTypeuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLocksetUserTypeCommandParams.put("userId", doorLocksetUserTypeuserIdCommandParameterInfo);

    CommandParameterInfo doorLocksetUserTypeuserTypeCommandParameterInfo =
        new CommandParameterInfo("userType", int.class);
    doorLocksetUserTypeCommandParams.put(
        "userType", doorLocksetUserTypeuserTypeCommandParameterInfo);

    // Populate commands
    CommandInfo doorLocksetUserTypeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setUserType(
                      (ChipClusters.DoorLockCluster.SetUserTypeResponseCallback) callback,
                      (Integer) commandArguments.get("userId"),
                      (Integer) commandArguments.get("userType"));
            },
            () -> new DelegatedSetUserTypeResponseCallback(),
            doorLocksetUserTypeCommandParams);
    doorLockClusterCommandInfoMap.put("setUserType", doorLocksetUserTypeCommandInfo);
    Map<String, CommandParameterInfo> doorLocksetWeekdayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLocksetWeekdayScheduleCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.SetWeekdayScheduleResponseCallback.class);
    CommandParameterInfo doorLocksetWeekdaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "scheduleId", doorLocksetWeekdaySchedulescheduleIdCommandParameterInfo);

    CommandParameterInfo doorLocksetWeekdayScheduleuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "userId", doorLocksetWeekdayScheduleuserIdCommandParameterInfo);

    CommandParameterInfo doorLocksetWeekdayScheduledaysMaskCommandParameterInfo =
        new CommandParameterInfo("daysMask", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "daysMask", doorLocksetWeekdayScheduledaysMaskCommandParameterInfo);

    CommandParameterInfo doorLocksetWeekdaySchedulestartHourCommandParameterInfo =
        new CommandParameterInfo("startHour", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "startHour", doorLocksetWeekdaySchedulestartHourCommandParameterInfo);

    CommandParameterInfo doorLocksetWeekdaySchedulestartMinuteCommandParameterInfo =
        new CommandParameterInfo("startMinute", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "startMinute", doorLocksetWeekdaySchedulestartMinuteCommandParameterInfo);

    CommandParameterInfo doorLocksetWeekdayScheduleendHourCommandParameterInfo =
        new CommandParameterInfo("endHour", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "endHour", doorLocksetWeekdayScheduleendHourCommandParameterInfo);

    CommandParameterInfo doorLocksetWeekdayScheduleendMinuteCommandParameterInfo =
        new CommandParameterInfo("endMinute", int.class);
    doorLocksetWeekdayScheduleCommandParams.put(
        "endMinute", doorLocksetWeekdayScheduleendMinuteCommandParameterInfo);

    // Populate commands
    CommandInfo doorLocksetWeekdayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setWeekdaySchedule(
                      (ChipClusters.DoorLockCluster.SetWeekdayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"),
                      (Integer) commandArguments.get("daysMask"),
                      (Integer) commandArguments.get("startHour"),
                      (Integer) commandArguments.get("startMinute"),
                      (Integer) commandArguments.get("endHour"),
                      (Integer) commandArguments.get("endMinute"));
            },
            () -> new DelegatedSetWeekdayScheduleResponseCallback(),
            doorLocksetWeekdayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put("setWeekdaySchedule", doorLocksetWeekdayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLocksetYeardayScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLocksetYeardayScheduleCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.SetYeardayScheduleResponseCallback.class);
    CommandParameterInfo doorLocksetYeardaySchedulescheduleIdCommandParameterInfo =
        new CommandParameterInfo("scheduleId", int.class);
    doorLocksetYeardayScheduleCommandParams.put(
        "scheduleId", doorLocksetYeardaySchedulescheduleIdCommandParameterInfo);

    CommandParameterInfo doorLocksetYeardayScheduleuserIdCommandParameterInfo =
        new CommandParameterInfo("userId", int.class);
    doorLocksetYeardayScheduleCommandParams.put(
        "userId", doorLocksetYeardayScheduleuserIdCommandParameterInfo);

    CommandParameterInfo doorLocksetYeardaySchedulelocalStartTimeCommandParameterInfo =
        new CommandParameterInfo("localStartTime", long.class);
    doorLocksetYeardayScheduleCommandParams.put(
        "localStartTime", doorLocksetYeardaySchedulelocalStartTimeCommandParameterInfo);

    CommandParameterInfo doorLocksetYeardaySchedulelocalEndTimeCommandParameterInfo =
        new CommandParameterInfo("localEndTime", long.class);
    doorLocksetYeardayScheduleCommandParams.put(
        "localEndTime", doorLocksetYeardaySchedulelocalEndTimeCommandParameterInfo);

    // Populate commands
    CommandInfo doorLocksetYeardayScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .setYeardaySchedule(
                      (ChipClusters.DoorLockCluster.SetYeardayScheduleResponseCallback) callback,
                      (Integer) commandArguments.get("scheduleId"),
                      (Integer) commandArguments.get("userId"),
                      (Long) commandArguments.get("localStartTime"),
                      (Long) commandArguments.get("localEndTime"));
            },
            () -> new DelegatedSetYeardayScheduleResponseCallback(),
            doorLocksetYeardayScheduleCommandParams);
    doorLockClusterCommandInfoMap.put("setYeardaySchedule", doorLocksetYeardayScheduleCommandInfo);
    Map<String, CommandParameterInfo> doorLockunlockDoorCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLockunlockDoorCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.UnlockDoorResponseCallback.class);
    CommandParameterInfo doorLockunlockDoorpinCommandParameterInfo =
        new CommandParameterInfo("pin", byte[].class);
    doorLockunlockDoorCommandParams.put("pin", doorLockunlockDoorpinCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockunlockDoorCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .unlockDoor(
                      (ChipClusters.DoorLockCluster.UnlockDoorResponseCallback) callback,
                      (byte[]) commandArguments.get("pin"));
            },
            () -> new DelegatedUnlockDoorResponseCallback(),
            doorLockunlockDoorCommandParams);
    doorLockClusterCommandInfoMap.put("unlockDoor", doorLockunlockDoorCommandInfo);
    Map<String, CommandParameterInfo> doorLockunlockWithTimeoutCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo doorLockunlockWithTimeoutCommandParameterInfo =
        new CommandParameterInfo(
            "DoorLock", ChipClusters.DoorLockCluster.UnlockWithTimeoutResponseCallback.class);
    CommandParameterInfo doorLockunlockWithTimeouttimeoutInSecondsCommandParameterInfo =
        new CommandParameterInfo("timeoutInSeconds", int.class);
    doorLockunlockWithTimeoutCommandParams.put(
        "timeoutInSeconds", doorLockunlockWithTimeouttimeoutInSecondsCommandParameterInfo);

    CommandParameterInfo doorLockunlockWithTimeoutpinCommandParameterInfo =
        new CommandParameterInfo("pin", byte[].class);
    doorLockunlockWithTimeoutCommandParams.put(
        "pin", doorLockunlockWithTimeoutpinCommandParameterInfo);

    // Populate commands
    CommandInfo doorLockunlockWithTimeoutCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .unlockWithTimeout(
                      (ChipClusters.DoorLockCluster.UnlockWithTimeoutResponseCallback) callback,
                      (Integer) commandArguments.get("timeoutInSeconds"),
                      (byte[]) commandArguments.get("pin"));
            },
            () -> new DelegatedUnlockWithTimeoutResponseCallback(),
            doorLockunlockWithTimeoutCommandParams);
    doorLockClusterCommandInfoMap.put("unlockWithTimeout", doorLockunlockWithTimeoutCommandInfo);
    // Populate cluster
    ClusterInfo doorLockClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.DoorLockCluster(ptr, endpointId),
            doorLockClusterCommandInfoMap);
    clusterMap.put("doorLock", doorLockClusterInfo);
    Map<String, CommandInfo> electricalMeasurementClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo electricalMeasurementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ElectricalMeasurementCluster(ptr, endpointId),
            electricalMeasurementClusterCommandInfoMap);
    clusterMap.put("electricalMeasurement", electricalMeasurementClusterInfo);
    Map<String, CommandInfo> ethernetNetworkDiagnosticsClusterCommandInfoMap =
        new LinkedHashMap<>();
    Map<String, CommandParameterInfo> ethernetNetworkDiagnosticsresetCountsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo ethernetNetworkDiagnosticsresetCountsCommandParameterInfo =
        new CommandParameterInfo(
            "EthernetNetworkDiagnostics", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo ethernetNetworkDiagnosticsresetCountsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.EthernetNetworkDiagnosticsCluster) cluster)
                  .resetCounts((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            ethernetNetworkDiagnosticsresetCountsCommandParams);
    ethernetNetworkDiagnosticsClusterCommandInfoMap.put(
        "resetCounts", ethernetNetworkDiagnosticsresetCountsCommandInfo);
    // Populate cluster
    ClusterInfo ethernetNetworkDiagnosticsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.EthernetNetworkDiagnosticsCluster(ptr, endpointId),
            ethernetNetworkDiagnosticsClusterCommandInfoMap);
    clusterMap.put("ethernetNetworkDiagnostics", ethernetNetworkDiagnosticsClusterInfo);
    Map<String, CommandInfo> fixedLabelClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo fixedLabelClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.FixedLabelCluster(ptr, endpointId),
            fixedLabelClusterCommandInfoMap);
    clusterMap.put("fixedLabel", fixedLabelClusterInfo);
    Map<String, CommandInfo> flowMeasurementClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo flowMeasurementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.FlowMeasurementCluster(ptr, endpointId),
            flowMeasurementClusterCommandInfoMap);
    clusterMap.put("flowMeasurement", flowMeasurementClusterInfo);
    Map<String, CommandInfo> generalCommissioningClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> generalCommissioningarmFailSafeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo generalCommissioningarmFailSafeCommandParameterInfo =
        new CommandParameterInfo(
            "GeneralCommissioning",
            ChipClusters.GeneralCommissioningCluster.ArmFailSafeResponseCallback.class);
    CommandParameterInfo generalCommissioningarmFailSafeexpiryLengthSecondsCommandParameterInfo =
        new CommandParameterInfo("expiryLengthSeconds", int.class);
    generalCommissioningarmFailSafeCommandParams.put(
        "expiryLengthSeconds",
        generalCommissioningarmFailSafeexpiryLengthSecondsCommandParameterInfo);

    CommandParameterInfo generalCommissioningarmFailSafebreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    generalCommissioningarmFailSafeCommandParams.put(
        "breadcrumb", generalCommissioningarmFailSafebreadcrumbCommandParameterInfo);

    CommandParameterInfo generalCommissioningarmFailSafetimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    generalCommissioningarmFailSafeCommandParams.put(
        "timeoutMs", generalCommissioningarmFailSafetimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo generalCommissioningarmFailSafeCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralCommissioningCluster) cluster)
                  .armFailSafe(
                      (ChipClusters.GeneralCommissioningCluster.ArmFailSafeResponseCallback)
                          callback,
                      (Integer) commandArguments.get("expiryLengthSeconds"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedArmFailSafeResponseCallback(),
            generalCommissioningarmFailSafeCommandParams);
    generalCommissioningClusterCommandInfoMap.put(
        "armFailSafe", generalCommissioningarmFailSafeCommandInfo);
    Map<String, CommandParameterInfo> generalCommissioningcommissioningCompleteCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo generalCommissioningcommissioningCompleteCommandParameterInfo =
        new CommandParameterInfo(
            "GeneralCommissioning",
            ChipClusters.GeneralCommissioningCluster.CommissioningCompleteResponseCallback.class);
    // Populate commands
    CommandInfo generalCommissioningcommissioningCompleteCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralCommissioningCluster) cluster)
                  .commissioningComplete(
                      (ChipClusters.GeneralCommissioningCluster
                              .CommissioningCompleteResponseCallback)
                          callback);
            },
            () -> new DelegatedCommissioningCompleteResponseCallback(),
            generalCommissioningcommissioningCompleteCommandParams);
    generalCommissioningClusterCommandInfoMap.put(
        "commissioningComplete", generalCommissioningcommissioningCompleteCommandInfo);
    Map<String, CommandParameterInfo> generalCommissioningsetRegulatoryConfigCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo generalCommissioningsetRegulatoryConfigCommandParameterInfo =
        new CommandParameterInfo(
            "GeneralCommissioning",
            ChipClusters.GeneralCommissioningCluster.SetRegulatoryConfigResponseCallback.class);
    CommandParameterInfo generalCommissioningsetRegulatoryConfiglocationCommandParameterInfo =
        new CommandParameterInfo("location", int.class);
    generalCommissioningsetRegulatoryConfigCommandParams.put(
        "location", generalCommissioningsetRegulatoryConfiglocationCommandParameterInfo);

    CommandParameterInfo generalCommissioningsetRegulatoryConfigcountryCodeCommandParameterInfo =
        new CommandParameterInfo("countryCode", String.class);
    generalCommissioningsetRegulatoryConfigCommandParams.put(
        "countryCode", generalCommissioningsetRegulatoryConfigcountryCodeCommandParameterInfo);

    CommandParameterInfo generalCommissioningsetRegulatoryConfigbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    generalCommissioningsetRegulatoryConfigCommandParams.put(
        "breadcrumb", generalCommissioningsetRegulatoryConfigbreadcrumbCommandParameterInfo);

    CommandParameterInfo generalCommissioningsetRegulatoryConfigtimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    generalCommissioningsetRegulatoryConfigCommandParams.put(
        "timeoutMs", generalCommissioningsetRegulatoryConfigtimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo generalCommissioningsetRegulatoryConfigCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralCommissioningCluster) cluster)
                  .setRegulatoryConfig(
                      (ChipClusters.GeneralCommissioningCluster.SetRegulatoryConfigResponseCallback)
                          callback,
                      (Integer) commandArguments.get("location"),
                      (String) commandArguments.get("countryCode"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedSetRegulatoryConfigResponseCallback(),
            generalCommissioningsetRegulatoryConfigCommandParams);
    generalCommissioningClusterCommandInfoMap.put(
        "setRegulatoryConfig", generalCommissioningsetRegulatoryConfigCommandInfo);
    // Populate cluster
    ClusterInfo generalCommissioningClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.GeneralCommissioningCluster(ptr, endpointId),
            generalCommissioningClusterCommandInfoMap);
    clusterMap.put("generalCommissioning", generalCommissioningClusterInfo);
    Map<String, CommandInfo> generalDiagnosticsClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo generalDiagnosticsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.GeneralDiagnosticsCluster(ptr, endpointId),
            generalDiagnosticsClusterCommandInfoMap);
    clusterMap.put("generalDiagnostics", generalDiagnosticsClusterInfo);
    Map<String, CommandInfo> groupKeyManagementClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo groupKeyManagementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.GroupKeyManagementCluster(ptr, endpointId),
            groupKeyManagementClusterCommandInfoMap);
    clusterMap.put("groupKeyManagement", groupKeyManagementClusterInfo);
    Map<String, CommandInfo> groupsClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> groupsaddGroupCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo groupsaddGroupCommandParameterInfo =
        new CommandParameterInfo(
            "Groups", ChipClusters.GroupsCluster.AddGroupResponseCallback.class);
    CommandParameterInfo groupsaddGroupgroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    groupsaddGroupCommandParams.put("groupId", groupsaddGroupgroupIdCommandParameterInfo);

    CommandParameterInfo groupsaddGroupgroupNameCommandParameterInfo =
        new CommandParameterInfo("groupName", String.class);
    groupsaddGroupCommandParams.put("groupName", groupsaddGroupgroupNameCommandParameterInfo);

    // Populate commands
    CommandInfo groupsaddGroupCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .addGroup(
                      (ChipClusters.GroupsCluster.AddGroupResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (String) commandArguments.get("groupName"));
            },
            () -> new DelegatedAddGroupResponseCallback(),
            groupsaddGroupCommandParams);
    groupsClusterCommandInfoMap.put("addGroup", groupsaddGroupCommandInfo);
    Map<String, CommandParameterInfo> groupsaddGroupIfIdentifyingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo groupsaddGroupIfIdentifyingCommandParameterInfo =
        new CommandParameterInfo("Groups", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo groupsaddGroupIfIdentifyinggroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    groupsaddGroupIfIdentifyingCommandParams.put(
        "groupId", groupsaddGroupIfIdentifyinggroupIdCommandParameterInfo);

    CommandParameterInfo groupsaddGroupIfIdentifyinggroupNameCommandParameterInfo =
        new CommandParameterInfo("groupName", String.class);
    groupsaddGroupIfIdentifyingCommandParams.put(
        "groupName", groupsaddGroupIfIdentifyinggroupNameCommandParameterInfo);

    // Populate commands
    CommandInfo groupsaddGroupIfIdentifyingCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .addGroupIfIdentifying(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (String) commandArguments.get("groupName"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            groupsaddGroupIfIdentifyingCommandParams);
    groupsClusterCommandInfoMap.put(
        "addGroupIfIdentifying", groupsaddGroupIfIdentifyingCommandInfo);
    Map<String, CommandParameterInfo> groupsgetGroupMembershipCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo groupsgetGroupMembershipCommandParameterInfo =
        new CommandParameterInfo(
            "Groups", ChipClusters.GroupsCluster.GetGroupMembershipResponseCallback.class);
    CommandParameterInfo groupsgetGroupMembershipgroupCountCommandParameterInfo =
        new CommandParameterInfo("groupCount", int.class);
    groupsgetGroupMembershipCommandParams.put(
        "groupCount", groupsgetGroupMembershipgroupCountCommandParameterInfo);

    CommandParameterInfo groupsgetGroupMembershipgroupListCommandParameterInfo =
        new CommandParameterInfo("groupList", int.class);
    groupsgetGroupMembershipCommandParams.put(
        "groupList", groupsgetGroupMembershipgroupListCommandParameterInfo);

    // Populate commands
    CommandInfo groupsgetGroupMembershipCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .getGroupMembership(
                      (ChipClusters.GroupsCluster.GetGroupMembershipResponseCallback) callback,
                      (Integer) commandArguments.get("groupCount"),
                      (Integer) commandArguments.get("groupList"));
            },
            () -> new DelegatedGetGroupMembershipResponseCallback(),
            groupsgetGroupMembershipCommandParams);
    groupsClusterCommandInfoMap.put("getGroupMembership", groupsgetGroupMembershipCommandInfo);
    Map<String, CommandParameterInfo> groupsremoveAllGroupsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo groupsremoveAllGroupsCommandParameterInfo =
        new CommandParameterInfo("Groups", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo groupsremoveAllGroupsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .removeAllGroups((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            groupsremoveAllGroupsCommandParams);
    groupsClusterCommandInfoMap.put("removeAllGroups", groupsremoveAllGroupsCommandInfo);
    Map<String, CommandParameterInfo> groupsremoveGroupCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo groupsremoveGroupCommandParameterInfo =
        new CommandParameterInfo(
            "Groups", ChipClusters.GroupsCluster.RemoveGroupResponseCallback.class);
    CommandParameterInfo groupsremoveGroupgroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    groupsremoveGroupCommandParams.put("groupId", groupsremoveGroupgroupIdCommandParameterInfo);

    // Populate commands
    CommandInfo groupsremoveGroupCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .removeGroup(
                      (ChipClusters.GroupsCluster.RemoveGroupResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"));
            },
            () -> new DelegatedRemoveGroupResponseCallback(),
            groupsremoveGroupCommandParams);
    groupsClusterCommandInfoMap.put("removeGroup", groupsremoveGroupCommandInfo);
    Map<String, CommandParameterInfo> groupsviewGroupCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo groupsviewGroupCommandParameterInfo =
        new CommandParameterInfo(
            "Groups", ChipClusters.GroupsCluster.ViewGroupResponseCallback.class);
    CommandParameterInfo groupsviewGroupgroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    groupsviewGroupCommandParams.put("groupId", groupsviewGroupgroupIdCommandParameterInfo);

    // Populate commands
    CommandInfo groupsviewGroupCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GroupsCluster) cluster)
                  .viewGroup(
                      (ChipClusters.GroupsCluster.ViewGroupResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"));
            },
            () -> new DelegatedViewGroupResponseCallback(),
            groupsviewGroupCommandParams);
    groupsClusterCommandInfoMap.put("viewGroup", groupsviewGroupCommandInfo);
    // Populate cluster
    ClusterInfo groupsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.GroupsCluster(ptr, endpointId),
            groupsClusterCommandInfoMap);
    clusterMap.put("groups", groupsClusterInfo);
    Map<String, CommandInfo> identifyClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> identifyidentifyCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo identifyidentifyCommandParameterInfo =
        new CommandParameterInfo("Identify", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo identifyidentifyidentifyTimeCommandParameterInfo =
        new CommandParameterInfo("identifyTime", int.class);
    identifyidentifyCommandParams.put(
        "identifyTime", identifyidentifyidentifyTimeCommandParameterInfo);

    // Populate commands
    CommandInfo identifyidentifyCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IdentifyCluster) cluster)
                  .identify(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("identifyTime"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            identifyidentifyCommandParams);
    identifyClusterCommandInfoMap.put("identify", identifyidentifyCommandInfo);
    Map<String, CommandParameterInfo> identifyidentifyQueryCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo identifyidentifyQueryCommandParameterInfo =
        new CommandParameterInfo(
            "Identify", ChipClusters.IdentifyCluster.IdentifyQueryResponseCallback.class);
    // Populate commands
    CommandInfo identifyidentifyQueryCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IdentifyCluster) cluster)
                  .identifyQuery(
                      (ChipClusters.IdentifyCluster.IdentifyQueryResponseCallback) callback);
            },
            () -> new DelegatedIdentifyQueryResponseCallback(),
            identifyidentifyQueryCommandParams);
    identifyClusterCommandInfoMap.put("identifyQuery", identifyidentifyQueryCommandInfo);
    Map<String, CommandParameterInfo> identifytriggerEffectCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo identifytriggerEffectCommandParameterInfo =
        new CommandParameterInfo("Identify", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo identifytriggerEffecteffectIdentifierCommandParameterInfo =
        new CommandParameterInfo("effectIdentifier", int.class);
    identifytriggerEffectCommandParams.put(
        "effectIdentifier", identifytriggerEffecteffectIdentifierCommandParameterInfo);

    CommandParameterInfo identifytriggerEffecteffectVariantCommandParameterInfo =
        new CommandParameterInfo("effectVariant", int.class);
    identifytriggerEffectCommandParams.put(
        "effectVariant", identifytriggerEffecteffectVariantCommandParameterInfo);

    // Populate commands
    CommandInfo identifytriggerEffectCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IdentifyCluster) cluster)
                  .triggerEffect(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("effectIdentifier"),
                      (Integer) commandArguments.get("effectVariant"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            identifytriggerEffectCommandParams);
    identifyClusterCommandInfoMap.put("triggerEffect", identifytriggerEffectCommandInfo);
    // Populate cluster
    ClusterInfo identifyClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.IdentifyCluster(ptr, endpointId),
            identifyClusterCommandInfoMap);
    clusterMap.put("identify", identifyClusterInfo);
    Map<String, CommandInfo> illuminanceMeasurementClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo illuminanceMeasurementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.IlluminanceMeasurementCluster(ptr, endpointId),
            illuminanceMeasurementClusterCommandInfoMap);
    clusterMap.put("illuminanceMeasurement", illuminanceMeasurementClusterInfo);
    Map<String, CommandInfo> keypadInputClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> keypadInputsendKeyCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo keypadInputsendKeyCommandParameterInfo =
        new CommandParameterInfo(
            "KeypadInput", ChipClusters.KeypadInputCluster.SendKeyResponseCallback.class);
    CommandParameterInfo keypadInputsendKeykeyCodeCommandParameterInfo =
        new CommandParameterInfo("keyCode", int.class);
    keypadInputsendKeyCommandParams.put("keyCode", keypadInputsendKeykeyCodeCommandParameterInfo);

    // Populate commands
    CommandInfo keypadInputsendKeyCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.KeypadInputCluster) cluster)
                  .sendKey(
                      (ChipClusters.KeypadInputCluster.SendKeyResponseCallback) callback,
                      (Integer) commandArguments.get("keyCode"));
            },
            () -> new DelegatedSendKeyResponseCallback(),
            keypadInputsendKeyCommandParams);
    keypadInputClusterCommandInfoMap.put("sendKey", keypadInputsendKeyCommandInfo);
    // Populate cluster
    ClusterInfo keypadInputClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.KeypadInputCluster(ptr, endpointId),
            keypadInputClusterCommandInfoMap);
    clusterMap.put("keypadInput", keypadInputClusterInfo);
    Map<String, CommandInfo> levelControlClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> levelControlmoveCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo levelControlmoveCommandParameterInfo =
        new CommandParameterInfo("LevelControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo levelControlmovemoveModeCommandParameterInfo =
        new CommandParameterInfo("moveMode", int.class);
    levelControlmoveCommandParams.put("moveMode", levelControlmovemoveModeCommandParameterInfo);

    CommandParameterInfo levelControlmoverateCommandParameterInfo =
        new CommandParameterInfo("rate", int.class);
    levelControlmoveCommandParams.put("rate", levelControlmoverateCommandParameterInfo);

    CommandParameterInfo levelControlmoveoptionMaskCommandParameterInfo =
        new CommandParameterInfo("optionMask", int.class);
    levelControlmoveCommandParams.put("optionMask", levelControlmoveoptionMaskCommandParameterInfo);

    CommandParameterInfo levelControlmoveoptionOverrideCommandParameterInfo =
        new CommandParameterInfo("optionOverride", int.class);
    levelControlmoveCommandParams.put(
        "optionOverride", levelControlmoveoptionOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo levelControlmoveCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .move(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"),
                      (Integer) commandArguments.get("optionMask"),
                      (Integer) commandArguments.get("optionOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlmoveCommandParams);
    levelControlClusterCommandInfoMap.put("move", levelControlmoveCommandInfo);
    Map<String, CommandParameterInfo> levelControlmoveToLevelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo levelControlmoveToLevelCommandParameterInfo =
        new CommandParameterInfo("LevelControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo levelControlmoveToLevellevelCommandParameterInfo =
        new CommandParameterInfo("level", int.class);
    levelControlmoveToLevelCommandParams.put(
        "level", levelControlmoveToLevellevelCommandParameterInfo);

    CommandParameterInfo levelControlmoveToLeveltransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    levelControlmoveToLevelCommandParams.put(
        "transitionTime", levelControlmoveToLeveltransitionTimeCommandParameterInfo);

    CommandParameterInfo levelControlmoveToLeveloptionMaskCommandParameterInfo =
        new CommandParameterInfo("optionMask", int.class);
    levelControlmoveToLevelCommandParams.put(
        "optionMask", levelControlmoveToLeveloptionMaskCommandParameterInfo);

    CommandParameterInfo levelControlmoveToLeveloptionOverrideCommandParameterInfo =
        new CommandParameterInfo("optionOverride", int.class);
    levelControlmoveToLevelCommandParams.put(
        "optionOverride", levelControlmoveToLeveloptionOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo levelControlmoveToLevelCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .moveToLevel(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("level"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionMask"),
                      (Integer) commandArguments.get("optionOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlmoveToLevelCommandParams);
    levelControlClusterCommandInfoMap.put("moveToLevel", levelControlmoveToLevelCommandInfo);
    Map<String, CommandParameterInfo> levelControlmoveToLevelWithOnOffCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo levelControlmoveToLevelWithOnOffCommandParameterInfo =
        new CommandParameterInfo("LevelControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo levelControlmoveToLevelWithOnOfflevelCommandParameterInfo =
        new CommandParameterInfo("level", int.class);
    levelControlmoveToLevelWithOnOffCommandParams.put(
        "level", levelControlmoveToLevelWithOnOfflevelCommandParameterInfo);

    CommandParameterInfo levelControlmoveToLevelWithOnOfftransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    levelControlmoveToLevelWithOnOffCommandParams.put(
        "transitionTime", levelControlmoveToLevelWithOnOfftransitionTimeCommandParameterInfo);

    // Populate commands
    CommandInfo levelControlmoveToLevelWithOnOffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .moveToLevelWithOnOff(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("level"),
                      (Integer) commandArguments.get("transitionTime"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlmoveToLevelWithOnOffCommandParams);
    levelControlClusterCommandInfoMap.put(
        "moveToLevelWithOnOff", levelControlmoveToLevelWithOnOffCommandInfo);
    Map<String, CommandParameterInfo> levelControlmoveWithOnOffCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo levelControlmoveWithOnOffCommandParameterInfo =
        new CommandParameterInfo("LevelControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo levelControlmoveWithOnOffmoveModeCommandParameterInfo =
        new CommandParameterInfo("moveMode", int.class);
    levelControlmoveWithOnOffCommandParams.put(
        "moveMode", levelControlmoveWithOnOffmoveModeCommandParameterInfo);

    CommandParameterInfo levelControlmoveWithOnOffrateCommandParameterInfo =
        new CommandParameterInfo("rate", int.class);
    levelControlmoveWithOnOffCommandParams.put(
        "rate", levelControlmoveWithOnOffrateCommandParameterInfo);

    // Populate commands
    CommandInfo levelControlmoveWithOnOffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .moveWithOnOff(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("moveMode"),
                      (Integer) commandArguments.get("rate"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlmoveWithOnOffCommandParams);
    levelControlClusterCommandInfoMap.put("moveWithOnOff", levelControlmoveWithOnOffCommandInfo);
    Map<String, CommandParameterInfo> levelControlstepCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo levelControlstepCommandParameterInfo =
        new CommandParameterInfo("LevelControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo levelControlstepstepModeCommandParameterInfo =
        new CommandParameterInfo("stepMode", int.class);
    levelControlstepCommandParams.put("stepMode", levelControlstepstepModeCommandParameterInfo);

    CommandParameterInfo levelControlstepstepSizeCommandParameterInfo =
        new CommandParameterInfo("stepSize", int.class);
    levelControlstepCommandParams.put("stepSize", levelControlstepstepSizeCommandParameterInfo);

    CommandParameterInfo levelControlsteptransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    levelControlstepCommandParams.put(
        "transitionTime", levelControlsteptransitionTimeCommandParameterInfo);

    CommandParameterInfo levelControlstepoptionMaskCommandParameterInfo =
        new CommandParameterInfo("optionMask", int.class);
    levelControlstepCommandParams.put("optionMask", levelControlstepoptionMaskCommandParameterInfo);

    CommandParameterInfo levelControlstepoptionOverrideCommandParameterInfo =
        new CommandParameterInfo("optionOverride", int.class);
    levelControlstepCommandParams.put(
        "optionOverride", levelControlstepoptionOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo levelControlstepCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .step(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"),
                      (Integer) commandArguments.get("optionMask"),
                      (Integer) commandArguments.get("optionOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlstepCommandParams);
    levelControlClusterCommandInfoMap.put("step", levelControlstepCommandInfo);
    Map<String, CommandParameterInfo> levelControlstepWithOnOffCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo levelControlstepWithOnOffCommandParameterInfo =
        new CommandParameterInfo("LevelControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo levelControlstepWithOnOffstepModeCommandParameterInfo =
        new CommandParameterInfo("stepMode", int.class);
    levelControlstepWithOnOffCommandParams.put(
        "stepMode", levelControlstepWithOnOffstepModeCommandParameterInfo);

    CommandParameterInfo levelControlstepWithOnOffstepSizeCommandParameterInfo =
        new CommandParameterInfo("stepSize", int.class);
    levelControlstepWithOnOffCommandParams.put(
        "stepSize", levelControlstepWithOnOffstepSizeCommandParameterInfo);

    CommandParameterInfo levelControlstepWithOnOfftransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    levelControlstepWithOnOffCommandParams.put(
        "transitionTime", levelControlstepWithOnOfftransitionTimeCommandParameterInfo);

    // Populate commands
    CommandInfo levelControlstepWithOnOffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .stepWithOnOff(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("stepMode"),
                      (Integer) commandArguments.get("stepSize"),
                      (Integer) commandArguments.get("transitionTime"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlstepWithOnOffCommandParams);
    levelControlClusterCommandInfoMap.put("stepWithOnOff", levelControlstepWithOnOffCommandInfo);
    Map<String, CommandParameterInfo> levelControlstopCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo levelControlstopCommandParameterInfo =
        new CommandParameterInfo("LevelControl", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo levelControlstopoptionMaskCommandParameterInfo =
        new CommandParameterInfo("optionMask", int.class);
    levelControlstopCommandParams.put("optionMask", levelControlstopoptionMaskCommandParameterInfo);

    CommandParameterInfo levelControlstopoptionOverrideCommandParameterInfo =
        new CommandParameterInfo("optionOverride", int.class);
    levelControlstopCommandParams.put(
        "optionOverride", levelControlstopoptionOverrideCommandParameterInfo);

    // Populate commands
    CommandInfo levelControlstopCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .stop(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("optionMask"),
                      (Integer) commandArguments.get("optionOverride"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlstopCommandParams);
    levelControlClusterCommandInfoMap.put("stop", levelControlstopCommandInfo);
    Map<String, CommandParameterInfo> levelControlstopWithOnOffCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo levelControlstopWithOnOffCommandParameterInfo =
        new CommandParameterInfo("LevelControl", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo levelControlstopWithOnOffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .stopWithOnOff((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            levelControlstopWithOnOffCommandParams);
    levelControlClusterCommandInfoMap.put("stopWithOnOff", levelControlstopWithOnOffCommandInfo);
    // Populate cluster
    ClusterInfo levelControlClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.LevelControlCluster(ptr, endpointId),
            levelControlClusterCommandInfoMap);
    clusterMap.put("levelControl", levelControlClusterInfo);
    Map<String, CommandInfo> lowPowerClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> lowPowersleepCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo lowPowersleepCommandParameterInfo =
        new CommandParameterInfo("LowPower", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo lowPowersleepCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LowPowerCluster) cluster).sleep((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            lowPowersleepCommandParams);
    lowPowerClusterCommandInfoMap.put("sleep", lowPowersleepCommandInfo);
    // Populate cluster
    ClusterInfo lowPowerClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.LowPowerCluster(ptr, endpointId),
            lowPowerClusterCommandInfoMap);
    clusterMap.put("lowPower", lowPowerClusterInfo);
    Map<String, CommandInfo> mediaInputClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> mediaInputhideInputStatusCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo mediaInputhideInputStatusCommandParameterInfo =
        new CommandParameterInfo("MediaInput", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo mediaInputhideInputStatusCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaInputCluster) cluster)
                  .hideInputStatus((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            mediaInputhideInputStatusCommandParams);
    mediaInputClusterCommandInfoMap.put("hideInputStatus", mediaInputhideInputStatusCommandInfo);
    Map<String, CommandParameterInfo> mediaInputrenameInputCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo mediaInputrenameInputCommandParameterInfo =
        new CommandParameterInfo("MediaInput", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo mediaInputrenameInputindexCommandParameterInfo =
        new CommandParameterInfo("index", int.class);
    mediaInputrenameInputCommandParams.put("index", mediaInputrenameInputindexCommandParameterInfo);

    CommandParameterInfo mediaInputrenameInputnameCommandParameterInfo =
        new CommandParameterInfo("name", String.class);
    mediaInputrenameInputCommandParams.put("name", mediaInputrenameInputnameCommandParameterInfo);

    // Populate commands
    CommandInfo mediaInputrenameInputCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaInputCluster) cluster)
                  .renameInput(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("index"),
                      (String) commandArguments.get("name"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            mediaInputrenameInputCommandParams);
    mediaInputClusterCommandInfoMap.put("renameInput", mediaInputrenameInputCommandInfo);
    Map<String, CommandParameterInfo> mediaInputselectInputCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo mediaInputselectInputCommandParameterInfo =
        new CommandParameterInfo("MediaInput", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo mediaInputselectInputindexCommandParameterInfo =
        new CommandParameterInfo("index", int.class);
    mediaInputselectInputCommandParams.put("index", mediaInputselectInputindexCommandParameterInfo);

    // Populate commands
    CommandInfo mediaInputselectInputCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaInputCluster) cluster)
                  .selectInput(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("index"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            mediaInputselectInputCommandParams);
    mediaInputClusterCommandInfoMap.put("selectInput", mediaInputselectInputCommandInfo);
    Map<String, CommandParameterInfo> mediaInputshowInputStatusCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo mediaInputshowInputStatusCommandParameterInfo =
        new CommandParameterInfo("MediaInput", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo mediaInputshowInputStatusCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaInputCluster) cluster)
                  .showInputStatus((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            mediaInputshowInputStatusCommandParams);
    mediaInputClusterCommandInfoMap.put("showInputStatus", mediaInputshowInputStatusCommandInfo);
    // Populate cluster
    ClusterInfo mediaInputClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.MediaInputCluster(ptr, endpointId),
            mediaInputClusterCommandInfoMap);
    clusterMap.put("mediaInput", mediaInputClusterInfo);
    Map<String, CommandInfo> mediaPlaybackClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> mediaPlaybackmediaFastForwardCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo mediaPlaybackmediaFastForwardCommandParameterInfo =
        new CommandParameterInfo(
            "MediaPlayback",
            ChipClusters.MediaPlaybackCluster.MediaFastForwardResponseCallback.class);
    // Populate commands
    CommandInfo mediaPlaybackmediaFastForwardCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaFastForward(
                      (ChipClusters.MediaPlaybackCluster.MediaFastForwardResponseCallback)
                          callback);
            },
            () -> new DelegatedMediaFastForwardResponseCallback(),
            mediaPlaybackmediaFastForwardCommandParams);
    mediaPlaybackClusterCommandInfoMap.put(
        "mediaFastForward", mediaPlaybackmediaFastForwardCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaNextCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo mediaPlaybackmediaNextCommandParameterInfo =
        new CommandParameterInfo(
            "MediaPlayback", ChipClusters.MediaPlaybackCluster.MediaNextResponseCallback.class);
    // Populate commands
    CommandInfo mediaPlaybackmediaNextCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaNext(
                      (ChipClusters.MediaPlaybackCluster.MediaNextResponseCallback) callback);
            },
            () -> new DelegatedMediaNextResponseCallback(),
            mediaPlaybackmediaNextCommandParams);
    mediaPlaybackClusterCommandInfoMap.put("mediaNext", mediaPlaybackmediaNextCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaPauseCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo mediaPlaybackmediaPauseCommandParameterInfo =
        new CommandParameterInfo(
            "MediaPlayback", ChipClusters.MediaPlaybackCluster.MediaPauseResponseCallback.class);
    // Populate commands
    CommandInfo mediaPlaybackmediaPauseCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaPause(
                      (ChipClusters.MediaPlaybackCluster.MediaPauseResponseCallback) callback);
            },
            () -> new DelegatedMediaPauseResponseCallback(),
            mediaPlaybackmediaPauseCommandParams);
    mediaPlaybackClusterCommandInfoMap.put("mediaPause", mediaPlaybackmediaPauseCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaPlayCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo mediaPlaybackmediaPlayCommandParameterInfo =
        new CommandParameterInfo(
            "MediaPlayback", ChipClusters.MediaPlaybackCluster.MediaPlayResponseCallback.class);
    // Populate commands
    CommandInfo mediaPlaybackmediaPlayCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaPlay(
                      (ChipClusters.MediaPlaybackCluster.MediaPlayResponseCallback) callback);
            },
            () -> new DelegatedMediaPlayResponseCallback(),
            mediaPlaybackmediaPlayCommandParams);
    mediaPlaybackClusterCommandInfoMap.put("mediaPlay", mediaPlaybackmediaPlayCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaPreviousCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo mediaPlaybackmediaPreviousCommandParameterInfo =
        new CommandParameterInfo(
            "MediaPlayback", ChipClusters.MediaPlaybackCluster.MediaPreviousResponseCallback.class);
    // Populate commands
    CommandInfo mediaPlaybackmediaPreviousCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaPrevious(
                      (ChipClusters.MediaPlaybackCluster.MediaPreviousResponseCallback) callback);
            },
            () -> new DelegatedMediaPreviousResponseCallback(),
            mediaPlaybackmediaPreviousCommandParams);
    mediaPlaybackClusterCommandInfoMap.put("mediaPrevious", mediaPlaybackmediaPreviousCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaRewindCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo mediaPlaybackmediaRewindCommandParameterInfo =
        new CommandParameterInfo(
            "MediaPlayback", ChipClusters.MediaPlaybackCluster.MediaRewindResponseCallback.class);
    // Populate commands
    CommandInfo mediaPlaybackmediaRewindCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaRewind(
                      (ChipClusters.MediaPlaybackCluster.MediaRewindResponseCallback) callback);
            },
            () -> new DelegatedMediaRewindResponseCallback(),
            mediaPlaybackmediaRewindCommandParams);
    mediaPlaybackClusterCommandInfoMap.put("mediaRewind", mediaPlaybackmediaRewindCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaSeekCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo mediaPlaybackmediaSeekCommandParameterInfo =
        new CommandParameterInfo(
            "MediaPlayback", ChipClusters.MediaPlaybackCluster.MediaSeekResponseCallback.class);
    CommandParameterInfo mediaPlaybackmediaSeekpositionCommandParameterInfo =
        new CommandParameterInfo("position", long.class);
    mediaPlaybackmediaSeekCommandParams.put(
        "position", mediaPlaybackmediaSeekpositionCommandParameterInfo);

    // Populate commands
    CommandInfo mediaPlaybackmediaSeekCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaSeek(
                      (ChipClusters.MediaPlaybackCluster.MediaSeekResponseCallback) callback,
                      (Long) commandArguments.get("position"));
            },
            () -> new DelegatedMediaSeekResponseCallback(),
            mediaPlaybackmediaSeekCommandParams);
    mediaPlaybackClusterCommandInfoMap.put("mediaSeek", mediaPlaybackmediaSeekCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaSkipBackwardCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo mediaPlaybackmediaSkipBackwardCommandParameterInfo =
        new CommandParameterInfo(
            "MediaPlayback",
            ChipClusters.MediaPlaybackCluster.MediaSkipBackwardResponseCallback.class);
    CommandParameterInfo
        mediaPlaybackmediaSkipBackwarddeltaPositionMillisecondsCommandParameterInfo =
            new CommandParameterInfo("deltaPositionMilliseconds", long.class);
    mediaPlaybackmediaSkipBackwardCommandParams.put(
        "deltaPositionMilliseconds",
        mediaPlaybackmediaSkipBackwarddeltaPositionMillisecondsCommandParameterInfo);

    // Populate commands
    CommandInfo mediaPlaybackmediaSkipBackwardCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaSkipBackward(
                      (ChipClusters.MediaPlaybackCluster.MediaSkipBackwardResponseCallback)
                          callback,
                      (Long) commandArguments.get("deltaPositionMilliseconds"));
            },
            () -> new DelegatedMediaSkipBackwardResponseCallback(),
            mediaPlaybackmediaSkipBackwardCommandParams);
    mediaPlaybackClusterCommandInfoMap.put(
        "mediaSkipBackward", mediaPlaybackmediaSkipBackwardCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaSkipForwardCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo mediaPlaybackmediaSkipForwardCommandParameterInfo =
        new CommandParameterInfo(
            "MediaPlayback",
            ChipClusters.MediaPlaybackCluster.MediaSkipForwardResponseCallback.class);
    CommandParameterInfo
        mediaPlaybackmediaSkipForwarddeltaPositionMillisecondsCommandParameterInfo =
            new CommandParameterInfo("deltaPositionMilliseconds", long.class);
    mediaPlaybackmediaSkipForwardCommandParams.put(
        "deltaPositionMilliseconds",
        mediaPlaybackmediaSkipForwarddeltaPositionMillisecondsCommandParameterInfo);

    // Populate commands
    CommandInfo mediaPlaybackmediaSkipForwardCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaSkipForward(
                      (ChipClusters.MediaPlaybackCluster.MediaSkipForwardResponseCallback) callback,
                      (Long) commandArguments.get("deltaPositionMilliseconds"));
            },
            () -> new DelegatedMediaSkipForwardResponseCallback(),
            mediaPlaybackmediaSkipForwardCommandParams);
    mediaPlaybackClusterCommandInfoMap.put(
        "mediaSkipForward", mediaPlaybackmediaSkipForwardCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaStartOverCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo mediaPlaybackmediaStartOverCommandParameterInfo =
        new CommandParameterInfo(
            "MediaPlayback",
            ChipClusters.MediaPlaybackCluster.MediaStartOverResponseCallback.class);
    // Populate commands
    CommandInfo mediaPlaybackmediaStartOverCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaStartOver(
                      (ChipClusters.MediaPlaybackCluster.MediaStartOverResponseCallback) callback);
            },
            () -> new DelegatedMediaStartOverResponseCallback(),
            mediaPlaybackmediaStartOverCommandParams);
    mediaPlaybackClusterCommandInfoMap.put(
        "mediaStartOver", mediaPlaybackmediaStartOverCommandInfo);
    Map<String, CommandParameterInfo> mediaPlaybackmediaStopCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo mediaPlaybackmediaStopCommandParameterInfo =
        new CommandParameterInfo(
            "MediaPlayback", ChipClusters.MediaPlaybackCluster.MediaStopResponseCallback.class);
    // Populate commands
    CommandInfo mediaPlaybackmediaStopCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.MediaPlaybackCluster) cluster)
                  .mediaStop(
                      (ChipClusters.MediaPlaybackCluster.MediaStopResponseCallback) callback);
            },
            () -> new DelegatedMediaStopResponseCallback(),
            mediaPlaybackmediaStopCommandParams);
    mediaPlaybackClusterCommandInfoMap.put("mediaStop", mediaPlaybackmediaStopCommandInfo);
    // Populate cluster
    ClusterInfo mediaPlaybackClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.MediaPlaybackCluster(ptr, endpointId),
            mediaPlaybackClusterCommandInfoMap);
    clusterMap.put("mediaPlayback", mediaPlaybackClusterInfo);
    Map<String, CommandInfo> networkCommissioningClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> networkCommissioningaddThreadNetworkCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo networkCommissioningaddThreadNetworkCommandParameterInfo =
        new CommandParameterInfo(
            "NetworkCommissioning",
            ChipClusters.NetworkCommissioningCluster.AddThreadNetworkResponseCallback.class);
    CommandParameterInfo
        networkCommissioningaddThreadNetworkoperationalDatasetCommandParameterInfo =
            new CommandParameterInfo("operationalDataset", byte[].class);
    networkCommissioningaddThreadNetworkCommandParams.put(
        "operationalDataset",
        networkCommissioningaddThreadNetworkoperationalDatasetCommandParameterInfo);

    CommandParameterInfo networkCommissioningaddThreadNetworkbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    networkCommissioningaddThreadNetworkCommandParams.put(
        "breadcrumb", networkCommissioningaddThreadNetworkbreadcrumbCommandParameterInfo);

    CommandParameterInfo networkCommissioningaddThreadNetworktimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    networkCommissioningaddThreadNetworkCommandParams.put(
        "timeoutMs", networkCommissioningaddThreadNetworktimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo networkCommissioningaddThreadNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .addThreadNetwork(
                      (ChipClusters.NetworkCommissioningCluster.AddThreadNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("operationalDataset"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedAddThreadNetworkResponseCallback(),
            networkCommissioningaddThreadNetworkCommandParams);
    networkCommissioningClusterCommandInfoMap.put(
        "addThreadNetwork", networkCommissioningaddThreadNetworkCommandInfo);
    Map<String, CommandParameterInfo> networkCommissioningaddWiFiNetworkCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo networkCommissioningaddWiFiNetworkCommandParameterInfo =
        new CommandParameterInfo(
            "NetworkCommissioning",
            ChipClusters.NetworkCommissioningCluster.AddWiFiNetworkResponseCallback.class);
    CommandParameterInfo networkCommissioningaddWiFiNetworkssidCommandParameterInfo =
        new CommandParameterInfo("ssid", byte[].class);
    networkCommissioningaddWiFiNetworkCommandParams.put(
        "ssid", networkCommissioningaddWiFiNetworkssidCommandParameterInfo);

    CommandParameterInfo networkCommissioningaddWiFiNetworkcredentialsCommandParameterInfo =
        new CommandParameterInfo("credentials", byte[].class);
    networkCommissioningaddWiFiNetworkCommandParams.put(
        "credentials", networkCommissioningaddWiFiNetworkcredentialsCommandParameterInfo);

    CommandParameterInfo networkCommissioningaddWiFiNetworkbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    networkCommissioningaddWiFiNetworkCommandParams.put(
        "breadcrumb", networkCommissioningaddWiFiNetworkbreadcrumbCommandParameterInfo);

    CommandParameterInfo networkCommissioningaddWiFiNetworktimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    networkCommissioningaddWiFiNetworkCommandParams.put(
        "timeoutMs", networkCommissioningaddWiFiNetworktimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo networkCommissioningaddWiFiNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .addWiFiNetwork(
                      (ChipClusters.NetworkCommissioningCluster.AddWiFiNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("ssid"),
                      (byte[]) commandArguments.get("credentials"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedAddWiFiNetworkResponseCallback(),
            networkCommissioningaddWiFiNetworkCommandParams);
    networkCommissioningClusterCommandInfoMap.put(
        "addWiFiNetwork", networkCommissioningaddWiFiNetworkCommandInfo);
    Map<String, CommandParameterInfo> networkCommissioningdisableNetworkCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo networkCommissioningdisableNetworkCommandParameterInfo =
        new CommandParameterInfo(
            "NetworkCommissioning",
            ChipClusters.NetworkCommissioningCluster.DisableNetworkResponseCallback.class);
    CommandParameterInfo networkCommissioningdisableNetworknetworkIDCommandParameterInfo =
        new CommandParameterInfo("networkID", byte[].class);
    networkCommissioningdisableNetworkCommandParams.put(
        "networkID", networkCommissioningdisableNetworknetworkIDCommandParameterInfo);

    CommandParameterInfo networkCommissioningdisableNetworkbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    networkCommissioningdisableNetworkCommandParams.put(
        "breadcrumb", networkCommissioningdisableNetworkbreadcrumbCommandParameterInfo);

    CommandParameterInfo networkCommissioningdisableNetworktimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    networkCommissioningdisableNetworkCommandParams.put(
        "timeoutMs", networkCommissioningdisableNetworktimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo networkCommissioningdisableNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .disableNetwork(
                      (ChipClusters.NetworkCommissioningCluster.DisableNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("networkID"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedDisableNetworkResponseCallback(),
            networkCommissioningdisableNetworkCommandParams);
    networkCommissioningClusterCommandInfoMap.put(
        "disableNetwork", networkCommissioningdisableNetworkCommandInfo);
    Map<String, CommandParameterInfo> networkCommissioningenableNetworkCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo networkCommissioningenableNetworkCommandParameterInfo =
        new CommandParameterInfo(
            "NetworkCommissioning",
            ChipClusters.NetworkCommissioningCluster.EnableNetworkResponseCallback.class);
    CommandParameterInfo networkCommissioningenableNetworknetworkIDCommandParameterInfo =
        new CommandParameterInfo("networkID", byte[].class);
    networkCommissioningenableNetworkCommandParams.put(
        "networkID", networkCommissioningenableNetworknetworkIDCommandParameterInfo);

    CommandParameterInfo networkCommissioningenableNetworkbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    networkCommissioningenableNetworkCommandParams.put(
        "breadcrumb", networkCommissioningenableNetworkbreadcrumbCommandParameterInfo);

    CommandParameterInfo networkCommissioningenableNetworktimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    networkCommissioningenableNetworkCommandParams.put(
        "timeoutMs", networkCommissioningenableNetworktimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo networkCommissioningenableNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .enableNetwork(
                      (ChipClusters.NetworkCommissioningCluster.EnableNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("networkID"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedEnableNetworkResponseCallback(),
            networkCommissioningenableNetworkCommandParams);
    networkCommissioningClusterCommandInfoMap.put(
        "enableNetwork", networkCommissioningenableNetworkCommandInfo);
    Map<String, CommandParameterInfo>
        networkCommissioninggetLastNetworkCommissioningResultCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo networkCommissioninggetLastNetworkCommissioningResultCommandParameterInfo =
        new CommandParameterInfo("NetworkCommissioning", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo
        networkCommissioninggetLastNetworkCommissioningResulttimeoutMsCommandParameterInfo =
            new CommandParameterInfo("timeoutMs", long.class);
    networkCommissioninggetLastNetworkCommissioningResultCommandParams.put(
        "timeoutMs",
        networkCommissioninggetLastNetworkCommissioningResulttimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo networkCommissioninggetLastNetworkCommissioningResultCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .getLastNetworkCommissioningResult(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            networkCommissioninggetLastNetworkCommissioningResultCommandParams);
    networkCommissioningClusterCommandInfoMap.put(
        "getLastNetworkCommissioningResult",
        networkCommissioninggetLastNetworkCommissioningResultCommandInfo);
    Map<String, CommandParameterInfo> networkCommissioningremoveNetworkCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo networkCommissioningremoveNetworkCommandParameterInfo =
        new CommandParameterInfo(
            "NetworkCommissioning",
            ChipClusters.NetworkCommissioningCluster.RemoveNetworkResponseCallback.class);
    CommandParameterInfo networkCommissioningremoveNetworknetworkIDCommandParameterInfo =
        new CommandParameterInfo("networkID", byte[].class);
    networkCommissioningremoveNetworkCommandParams.put(
        "networkID", networkCommissioningremoveNetworknetworkIDCommandParameterInfo);

    CommandParameterInfo networkCommissioningremoveNetworkbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    networkCommissioningremoveNetworkCommandParams.put(
        "breadcrumb", networkCommissioningremoveNetworkbreadcrumbCommandParameterInfo);

    CommandParameterInfo networkCommissioningremoveNetworktimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    networkCommissioningremoveNetworkCommandParams.put(
        "timeoutMs", networkCommissioningremoveNetworktimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo networkCommissioningremoveNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .removeNetwork(
                      (ChipClusters.NetworkCommissioningCluster.RemoveNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("networkID"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedRemoveNetworkResponseCallback(),
            networkCommissioningremoveNetworkCommandParams);
    networkCommissioningClusterCommandInfoMap.put(
        "removeNetwork", networkCommissioningremoveNetworkCommandInfo);
    Map<String, CommandParameterInfo> networkCommissioningscanNetworksCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo networkCommissioningscanNetworksCommandParameterInfo =
        new CommandParameterInfo(
            "NetworkCommissioning",
            ChipClusters.NetworkCommissioningCluster.ScanNetworksResponseCallback.class);
    CommandParameterInfo networkCommissioningscanNetworksssidCommandParameterInfo =
        new CommandParameterInfo("ssid", byte[].class);
    networkCommissioningscanNetworksCommandParams.put(
        "ssid", networkCommissioningscanNetworksssidCommandParameterInfo);

    CommandParameterInfo networkCommissioningscanNetworksbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    networkCommissioningscanNetworksCommandParams.put(
        "breadcrumb", networkCommissioningscanNetworksbreadcrumbCommandParameterInfo);

    CommandParameterInfo networkCommissioningscanNetworkstimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    networkCommissioningscanNetworksCommandParams.put(
        "timeoutMs", networkCommissioningscanNetworkstimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo networkCommissioningscanNetworksCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .scanNetworks(
                      (ChipClusters.NetworkCommissioningCluster.ScanNetworksResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("ssid"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedScanNetworksResponseCallback(),
            networkCommissioningscanNetworksCommandParams);
    networkCommissioningClusterCommandInfoMap.put(
        "scanNetworks", networkCommissioningscanNetworksCommandInfo);
    Map<String, CommandParameterInfo> networkCommissioningupdateThreadNetworkCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo networkCommissioningupdateThreadNetworkCommandParameterInfo =
        new CommandParameterInfo(
            "NetworkCommissioning",
            ChipClusters.NetworkCommissioningCluster.UpdateThreadNetworkResponseCallback.class);
    CommandParameterInfo
        networkCommissioningupdateThreadNetworkoperationalDatasetCommandParameterInfo =
            new CommandParameterInfo("operationalDataset", byte[].class);
    networkCommissioningupdateThreadNetworkCommandParams.put(
        "operationalDataset",
        networkCommissioningupdateThreadNetworkoperationalDatasetCommandParameterInfo);

    CommandParameterInfo networkCommissioningupdateThreadNetworkbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    networkCommissioningupdateThreadNetworkCommandParams.put(
        "breadcrumb", networkCommissioningupdateThreadNetworkbreadcrumbCommandParameterInfo);

    CommandParameterInfo networkCommissioningupdateThreadNetworktimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    networkCommissioningupdateThreadNetworkCommandParams.put(
        "timeoutMs", networkCommissioningupdateThreadNetworktimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo networkCommissioningupdateThreadNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .updateThreadNetwork(
                      (ChipClusters.NetworkCommissioningCluster.UpdateThreadNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("operationalDataset"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedUpdateThreadNetworkResponseCallback(),
            networkCommissioningupdateThreadNetworkCommandParams);
    networkCommissioningClusterCommandInfoMap.put(
        "updateThreadNetwork", networkCommissioningupdateThreadNetworkCommandInfo);
    Map<String, CommandParameterInfo> networkCommissioningupdateWiFiNetworkCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo networkCommissioningupdateWiFiNetworkCommandParameterInfo =
        new CommandParameterInfo(
            "NetworkCommissioning",
            ChipClusters.NetworkCommissioningCluster.UpdateWiFiNetworkResponseCallback.class);
    CommandParameterInfo networkCommissioningupdateWiFiNetworkssidCommandParameterInfo =
        new CommandParameterInfo("ssid", byte[].class);
    networkCommissioningupdateWiFiNetworkCommandParams.put(
        "ssid", networkCommissioningupdateWiFiNetworkssidCommandParameterInfo);

    CommandParameterInfo networkCommissioningupdateWiFiNetworkcredentialsCommandParameterInfo =
        new CommandParameterInfo("credentials", byte[].class);
    networkCommissioningupdateWiFiNetworkCommandParams.put(
        "credentials", networkCommissioningupdateWiFiNetworkcredentialsCommandParameterInfo);

    CommandParameterInfo networkCommissioningupdateWiFiNetworkbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("breadcrumb", long.class);
    networkCommissioningupdateWiFiNetworkCommandParams.put(
        "breadcrumb", networkCommissioningupdateWiFiNetworkbreadcrumbCommandParameterInfo);

    CommandParameterInfo networkCommissioningupdateWiFiNetworktimeoutMsCommandParameterInfo =
        new CommandParameterInfo("timeoutMs", long.class);
    networkCommissioningupdateWiFiNetworkCommandParams.put(
        "timeoutMs", networkCommissioningupdateWiFiNetworktimeoutMsCommandParameterInfo);

    // Populate commands
    CommandInfo networkCommissioningupdateWiFiNetworkCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .updateWiFiNetwork(
                      (ChipClusters.NetworkCommissioningCluster.UpdateWiFiNetworkResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("ssid"),
                      (byte[]) commandArguments.get("credentials"),
                      (Long) commandArguments.get("breadcrumb"),
                      (Long) commandArguments.get("timeoutMs"));
            },
            () -> new DelegatedUpdateWiFiNetworkResponseCallback(),
            networkCommissioningupdateWiFiNetworkCommandParams);
    networkCommissioningClusterCommandInfoMap.put(
        "updateWiFiNetwork", networkCommissioningupdateWiFiNetworkCommandInfo);
    // Populate cluster
    ClusterInfo networkCommissioningClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.NetworkCommissioningCluster(ptr, endpointId),
            networkCommissioningClusterCommandInfoMap);
    clusterMap.put("networkCommissioning", networkCommissioningClusterInfo);
    Map<String, CommandInfo> otaSoftwareUpdateProviderClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> otaSoftwareUpdateProviderapplyUpdateRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo otaSoftwareUpdateProviderapplyUpdateRequestCommandParameterInfo =
        new CommandParameterInfo(
            "OtaSoftwareUpdateProvider",
            ChipClusters.OtaSoftwareUpdateProviderCluster.ApplyUpdateRequestResponseCallback.class);
    CommandParameterInfo
        otaSoftwareUpdateProviderapplyUpdateRequestupdateTokenCommandParameterInfo =
            new CommandParameterInfo("updateToken", byte[].class);
    otaSoftwareUpdateProviderapplyUpdateRequestCommandParams.put(
        "updateToken", otaSoftwareUpdateProviderapplyUpdateRequestupdateTokenCommandParameterInfo);

    CommandParameterInfo otaSoftwareUpdateProviderapplyUpdateRequestnewVersionCommandParameterInfo =
        new CommandParameterInfo("newVersion", long.class);
    otaSoftwareUpdateProviderapplyUpdateRequestCommandParams.put(
        "newVersion", otaSoftwareUpdateProviderapplyUpdateRequestnewVersionCommandParameterInfo);

    // Populate commands
    CommandInfo otaSoftwareUpdateProviderapplyUpdateRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster)
                  .applyUpdateRequest(
                      (ChipClusters.OtaSoftwareUpdateProviderCluster
                              .ApplyUpdateRequestResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("updateToken"),
                      (Long) commandArguments.get("newVersion"));
            },
            () -> new DelegatedApplyUpdateRequestResponseCallback(),
            otaSoftwareUpdateProviderapplyUpdateRequestCommandParams);
    otaSoftwareUpdateProviderClusterCommandInfoMap.put(
        "applyUpdateRequest", otaSoftwareUpdateProviderapplyUpdateRequestCommandInfo);
    Map<String, CommandParameterInfo> otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParameterInfo =
        new CommandParameterInfo(
            "OtaSoftwareUpdateProvider", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo
        otaSoftwareUpdateProvidernotifyUpdateAppliedupdateTokenCommandParameterInfo =
            new CommandParameterInfo("updateToken", byte[].class);
    otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParams.put(
        "updateToken", otaSoftwareUpdateProvidernotifyUpdateAppliedupdateTokenCommandParameterInfo);

    CommandParameterInfo
        otaSoftwareUpdateProvidernotifyUpdateAppliedsoftwareVersionCommandParameterInfo =
            new CommandParameterInfo("softwareVersion", long.class);
    otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParams.put(
        "softwareVersion",
        otaSoftwareUpdateProvidernotifyUpdateAppliedsoftwareVersionCommandParameterInfo);

    // Populate commands
    CommandInfo otaSoftwareUpdateProvidernotifyUpdateAppliedCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster)
                  .notifyUpdateApplied(
                      (DefaultClusterCallback) callback,
                      (byte[]) commandArguments.get("updateToken"),
                      (Long) commandArguments.get("softwareVersion"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            otaSoftwareUpdateProvidernotifyUpdateAppliedCommandParams);
    otaSoftwareUpdateProviderClusterCommandInfoMap.put(
        "notifyUpdateApplied", otaSoftwareUpdateProvidernotifyUpdateAppliedCommandInfo);
    Map<String, CommandParameterInfo> otaSoftwareUpdateProviderqueryImageCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo otaSoftwareUpdateProviderqueryImageCommandParameterInfo =
        new CommandParameterInfo(
            "OtaSoftwareUpdateProvider",
            ChipClusters.OtaSoftwareUpdateProviderCluster.QueryImageResponseCallback.class);
    CommandParameterInfo otaSoftwareUpdateProviderqueryImagevendorIdCommandParameterInfo =
        new CommandParameterInfo("vendorId", int.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "vendorId", otaSoftwareUpdateProviderqueryImagevendorIdCommandParameterInfo);

    CommandParameterInfo otaSoftwareUpdateProviderqueryImageproductIdCommandParameterInfo =
        new CommandParameterInfo("productId", int.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "productId", otaSoftwareUpdateProviderqueryImageproductIdCommandParameterInfo);

    CommandParameterInfo otaSoftwareUpdateProviderqueryImagehardwareVersionCommandParameterInfo =
        new CommandParameterInfo("hardwareVersion", int.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "hardwareVersion", otaSoftwareUpdateProviderqueryImagehardwareVersionCommandParameterInfo);

    CommandParameterInfo otaSoftwareUpdateProviderqueryImagesoftwareVersionCommandParameterInfo =
        new CommandParameterInfo("softwareVersion", long.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "softwareVersion", otaSoftwareUpdateProviderqueryImagesoftwareVersionCommandParameterInfo);

    CommandParameterInfo otaSoftwareUpdateProviderqueryImageprotocolsSupportedCommandParameterInfo =
        new CommandParameterInfo("protocolsSupported", int.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "protocolsSupported",
        otaSoftwareUpdateProviderqueryImageprotocolsSupportedCommandParameterInfo);

    CommandParameterInfo otaSoftwareUpdateProviderqueryImagelocationCommandParameterInfo =
        new CommandParameterInfo("location", String.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "location", otaSoftwareUpdateProviderqueryImagelocationCommandParameterInfo);

    CommandParameterInfo
        otaSoftwareUpdateProviderqueryImagerequestorCanConsentCommandParameterInfo =
            new CommandParameterInfo("requestorCanConsent", boolean.class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "requestorCanConsent",
        otaSoftwareUpdateProviderqueryImagerequestorCanConsentCommandParameterInfo);

    CommandParameterInfo
        otaSoftwareUpdateProviderqueryImagemetadataForProviderCommandParameterInfo =
            new CommandParameterInfo("metadataForProvider", byte[].class);
    otaSoftwareUpdateProviderqueryImageCommandParams.put(
        "metadataForProvider",
        otaSoftwareUpdateProviderqueryImagemetadataForProviderCommandParameterInfo);

    // Populate commands
    CommandInfo otaSoftwareUpdateProviderqueryImageCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OtaSoftwareUpdateProviderCluster) cluster)
                  .queryImage(
                      (ChipClusters.OtaSoftwareUpdateProviderCluster.QueryImageResponseCallback)
                          callback,
                      (Integer) commandArguments.get("vendorId"),
                      (Integer) commandArguments.get("productId"),
                      (Integer) commandArguments.get("hardwareVersion"),
                      (Long) commandArguments.get("softwareVersion"),
                      (Integer) commandArguments.get("protocolsSupported"),
                      (String) commandArguments.get("location"),
                      (Boolean) commandArguments.get("requestorCanConsent"),
                      (byte[]) commandArguments.get("metadataForProvider"));
            },
            () -> new DelegatedQueryImageResponseCallback(),
            otaSoftwareUpdateProviderqueryImageCommandParams);
    otaSoftwareUpdateProviderClusterCommandInfoMap.put(
        "queryImage", otaSoftwareUpdateProviderqueryImageCommandInfo);
    // Populate cluster
    ClusterInfo otaSoftwareUpdateProviderClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.OtaSoftwareUpdateProviderCluster(ptr, endpointId),
            otaSoftwareUpdateProviderClusterCommandInfoMap);
    clusterMap.put("otaSoftwareUpdateProvider", otaSoftwareUpdateProviderClusterInfo);
    Map<String, CommandInfo> otaSoftwareUpdateRequestorClusterCommandInfoMap =
        new LinkedHashMap<>();
    Map<String, CommandParameterInfo> otaSoftwareUpdateRequestorannounceOtaProviderCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo otaSoftwareUpdateRequestorannounceOtaProviderCommandParameterInfo =
        new CommandParameterInfo(
            "OtaSoftwareUpdateRequestor", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo
        otaSoftwareUpdateRequestorannounceOtaProviderproviderLocationCommandParameterInfo =
            new CommandParameterInfo("providerLocation", long.class);
    otaSoftwareUpdateRequestorannounceOtaProviderCommandParams.put(
        "providerLocation",
        otaSoftwareUpdateRequestorannounceOtaProviderproviderLocationCommandParameterInfo);

    CommandParameterInfo otaSoftwareUpdateRequestorannounceOtaProvidervendorIdCommandParameterInfo =
        new CommandParameterInfo("vendorId", int.class);
    otaSoftwareUpdateRequestorannounceOtaProviderCommandParams.put(
        "vendorId", otaSoftwareUpdateRequestorannounceOtaProvidervendorIdCommandParameterInfo);

    CommandParameterInfo
        otaSoftwareUpdateRequestorannounceOtaProviderannouncementReasonCommandParameterInfo =
            new CommandParameterInfo("announcementReason", int.class);
    otaSoftwareUpdateRequestorannounceOtaProviderCommandParams.put(
        "announcementReason",
        otaSoftwareUpdateRequestorannounceOtaProviderannouncementReasonCommandParameterInfo);

    CommandParameterInfo
        otaSoftwareUpdateRequestorannounceOtaProvidermetadataForNodeCommandParameterInfo =
            new CommandParameterInfo("metadataForNode", byte[].class);
    otaSoftwareUpdateRequestorannounceOtaProviderCommandParams.put(
        "metadataForNode",
        otaSoftwareUpdateRequestorannounceOtaProvidermetadataForNodeCommandParameterInfo);

    // Populate commands
    CommandInfo otaSoftwareUpdateRequestorannounceOtaProviderCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OtaSoftwareUpdateRequestorCluster) cluster)
                  .announceOtaProvider(
                      (DefaultClusterCallback) callback,
                      (Long) commandArguments.get("providerLocation"),
                      (Integer) commandArguments.get("vendorId"),
                      (Integer) commandArguments.get("announcementReason"),
                      (byte[]) commandArguments.get("metadataForNode"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            otaSoftwareUpdateRequestorannounceOtaProviderCommandParams);
    otaSoftwareUpdateRequestorClusterCommandInfoMap.put(
        "announceOtaProvider", otaSoftwareUpdateRequestorannounceOtaProviderCommandInfo);
    // Populate cluster
    ClusterInfo otaSoftwareUpdateRequestorClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.OtaSoftwareUpdateRequestorCluster(ptr, endpointId),
            otaSoftwareUpdateRequestorClusterCommandInfoMap);
    clusterMap.put("otaSoftwareUpdateRequestor", otaSoftwareUpdateRequestorClusterInfo);
    Map<String, CommandInfo> occupancySensingClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo occupancySensingClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.OccupancySensingCluster(ptr, endpointId),
            occupancySensingClusterCommandInfoMap);
    clusterMap.put("occupancySensing", occupancySensingClusterInfo);
    Map<String, CommandInfo> onOffClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> onOffoffCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo onOffoffCommandParameterInfo =
        new CommandParameterInfo("OnOff", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo onOffoffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster).off((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOffoffCommandParams);
    onOffClusterCommandInfoMap.put("off", onOffoffCommandInfo);
    Map<String, CommandParameterInfo> onOffoffWithEffectCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo onOffoffWithEffectCommandParameterInfo =
        new CommandParameterInfo("OnOff", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo onOffoffWithEffecteffectIdCommandParameterInfo =
        new CommandParameterInfo("effectId", int.class);
    onOffoffWithEffectCommandParams.put("effectId", onOffoffWithEffecteffectIdCommandParameterInfo);

    CommandParameterInfo onOffoffWithEffecteffectVariantCommandParameterInfo =
        new CommandParameterInfo("effectVariant", int.class);
    onOffoffWithEffectCommandParams.put(
        "effectVariant", onOffoffWithEffecteffectVariantCommandParameterInfo);

    // Populate commands
    CommandInfo onOffoffWithEffectCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .offWithEffect(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("effectId"),
                      (Integer) commandArguments.get("effectVariant"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOffoffWithEffectCommandParams);
    onOffClusterCommandInfoMap.put("offWithEffect", onOffoffWithEffectCommandInfo);
    Map<String, CommandParameterInfo> onOffonCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo onOffonCommandParameterInfo =
        new CommandParameterInfo("OnOff", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo onOffonCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster).on((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOffonCommandParams);
    onOffClusterCommandInfoMap.put("on", onOffonCommandInfo);
    Map<String, CommandParameterInfo> onOffonWithRecallGlobalSceneCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo onOffonWithRecallGlobalSceneCommandParameterInfo =
        new CommandParameterInfo("OnOff", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo onOffonWithRecallGlobalSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .onWithRecallGlobalScene((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOffonWithRecallGlobalSceneCommandParams);
    onOffClusterCommandInfoMap.put(
        "onWithRecallGlobalScene", onOffonWithRecallGlobalSceneCommandInfo);
    Map<String, CommandParameterInfo> onOffonWithTimedOffCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo onOffonWithTimedOffCommandParameterInfo =
        new CommandParameterInfo("OnOff", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo onOffonWithTimedOffonOffControlCommandParameterInfo =
        new CommandParameterInfo("onOffControl", int.class);
    onOffonWithTimedOffCommandParams.put(
        "onOffControl", onOffonWithTimedOffonOffControlCommandParameterInfo);

    CommandParameterInfo onOffonWithTimedOffonTimeCommandParameterInfo =
        new CommandParameterInfo("onTime", int.class);
    onOffonWithTimedOffCommandParams.put("onTime", onOffonWithTimedOffonTimeCommandParameterInfo);

    CommandParameterInfo onOffonWithTimedOffoffWaitTimeCommandParameterInfo =
        new CommandParameterInfo("offWaitTime", int.class);
    onOffonWithTimedOffCommandParams.put(
        "offWaitTime", onOffonWithTimedOffoffWaitTimeCommandParameterInfo);

    // Populate commands
    CommandInfo onOffonWithTimedOffCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .onWithTimedOff(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("onOffControl"),
                      (Integer) commandArguments.get("onTime"),
                      (Integer) commandArguments.get("offWaitTime"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOffonWithTimedOffCommandParams);
    onOffClusterCommandInfoMap.put("onWithTimedOff", onOffonWithTimedOffCommandInfo);
    Map<String, CommandParameterInfo> onOfftoggleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo onOfftoggleCommandParameterInfo =
        new CommandParameterInfo("OnOff", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo onOfftoggleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster).toggle((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            onOfftoggleCommandParams);
    onOffClusterCommandInfoMap.put("toggle", onOfftoggleCommandInfo);
    // Populate cluster
    ClusterInfo onOffClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.OnOffCluster(ptr, endpointId),
            onOffClusterCommandInfoMap);
    clusterMap.put("onOff", onOffClusterInfo);
    Map<String, CommandInfo> onOffSwitchConfigurationClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo onOffSwitchConfigurationClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.OnOffSwitchConfigurationCluster(ptr, endpointId),
            onOffSwitchConfigurationClusterCommandInfoMap);
    clusterMap.put("onOffSwitchConfiguration", onOffSwitchConfigurationClusterInfo);
    Map<String, CommandInfo> operationalCredentialsClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> operationalCredentialsaddNOCCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo operationalCredentialsaddNOCCommandParameterInfo =
        new CommandParameterInfo(
            "OperationalCredentials",
            ChipClusters.OperationalCredentialsCluster.NOCResponseCallback.class);
    CommandParameterInfo operationalCredentialsaddNOCNOCValueCommandParameterInfo =
        new CommandParameterInfo("NOCValue", byte[].class);
    operationalCredentialsaddNOCCommandParams.put(
        "NOCValue", operationalCredentialsaddNOCNOCValueCommandParameterInfo);

    CommandParameterInfo operationalCredentialsaddNOCICACValueCommandParameterInfo =
        new CommandParameterInfo("ICACValue", byte[].class);
    operationalCredentialsaddNOCCommandParams.put(
        "ICACValue", operationalCredentialsaddNOCICACValueCommandParameterInfo);

    CommandParameterInfo operationalCredentialsaddNOCIPKValueCommandParameterInfo =
        new CommandParameterInfo("IPKValue", byte[].class);
    operationalCredentialsaddNOCCommandParams.put(
        "IPKValue", operationalCredentialsaddNOCIPKValueCommandParameterInfo);

    CommandParameterInfo operationalCredentialsaddNOCcaseAdminNodeCommandParameterInfo =
        new CommandParameterInfo("caseAdminNode", long.class);
    operationalCredentialsaddNOCCommandParams.put(
        "caseAdminNode", operationalCredentialsaddNOCcaseAdminNodeCommandParameterInfo);

    CommandParameterInfo operationalCredentialsaddNOCadminVendorIdCommandParameterInfo =
        new CommandParameterInfo("adminVendorId", int.class);
    operationalCredentialsaddNOCCommandParams.put(
        "adminVendorId", operationalCredentialsaddNOCadminVendorIdCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialsaddNOCCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .addNOC(
                      (ChipClusters.OperationalCredentialsCluster.NOCResponseCallback) callback,
                      (byte[]) commandArguments.get("NOCValue"),
                      (byte[]) commandArguments.get("ICACValue"),
                      (byte[]) commandArguments.get("IPKValue"),
                      (Long) commandArguments.get("caseAdminNode"),
                      (Integer) commandArguments.get("adminVendorId"));
            },
            () -> new DelegatedNOCResponseCallback(),
            operationalCredentialsaddNOCCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "addNOC", operationalCredentialsaddNOCCommandInfo);
    Map<String, CommandParameterInfo> operationalCredentialsaddTrustedRootCertificateCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo operationalCredentialsaddTrustedRootCertificateCommandParameterInfo =
        new CommandParameterInfo(
            "OperationalCredentials", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo
        operationalCredentialsaddTrustedRootCertificaterootCertificateCommandParameterInfo =
            new CommandParameterInfo("rootCertificate", byte[].class);
    operationalCredentialsaddTrustedRootCertificateCommandParams.put(
        "rootCertificate",
        operationalCredentialsaddTrustedRootCertificaterootCertificateCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialsaddTrustedRootCertificateCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .addTrustedRootCertificate(
                      (DefaultClusterCallback) callback,
                      (byte[]) commandArguments.get("rootCertificate"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            operationalCredentialsaddTrustedRootCertificateCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "addTrustedRootCertificate", operationalCredentialsaddTrustedRootCertificateCommandInfo);
    Map<String, CommandParameterInfo> operationalCredentialsattestationRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo operationalCredentialsattestationRequestCommandParameterInfo =
        new CommandParameterInfo(
            "OperationalCredentials",
            ChipClusters.OperationalCredentialsCluster.AttestationResponseCallback.class);
    CommandParameterInfo
        operationalCredentialsattestationRequestattestationNonceCommandParameterInfo =
            new CommandParameterInfo("attestationNonce", byte[].class);
    operationalCredentialsattestationRequestCommandParams.put(
        "attestationNonce",
        operationalCredentialsattestationRequestattestationNonceCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialsattestationRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .attestationRequest(
                      (ChipClusters.OperationalCredentialsCluster.AttestationResponseCallback)
                          callback,
                      (byte[]) commandArguments.get("attestationNonce"));
            },
            () -> new DelegatedAttestationResponseCallback(),
            operationalCredentialsattestationRequestCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "attestationRequest", operationalCredentialsattestationRequestCommandInfo);
    Map<String, CommandParameterInfo> operationalCredentialscertificateChainRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo operationalCredentialscertificateChainRequestCommandParameterInfo =
        new CommandParameterInfo(
            "OperationalCredentials",
            ChipClusters.OperationalCredentialsCluster.CertificateChainResponseCallback.class);
    CommandParameterInfo
        operationalCredentialscertificateChainRequestcertificateTypeCommandParameterInfo =
            new CommandParameterInfo("certificateType", int.class);
    operationalCredentialscertificateChainRequestCommandParams.put(
        "certificateType",
        operationalCredentialscertificateChainRequestcertificateTypeCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialscertificateChainRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .certificateChainRequest(
                      (ChipClusters.OperationalCredentialsCluster.CertificateChainResponseCallback)
                          callback,
                      (Integer) commandArguments.get("certificateType"));
            },
            () -> new DelegatedCertificateChainResponseCallback(),
            operationalCredentialscertificateChainRequestCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "certificateChainRequest", operationalCredentialscertificateChainRequestCommandInfo);
    Map<String, CommandParameterInfo> operationalCredentialsopCSRRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo operationalCredentialsopCSRRequestCommandParameterInfo =
        new CommandParameterInfo(
            "OperationalCredentials",
            ChipClusters.OperationalCredentialsCluster.OpCSRResponseCallback.class);
    CommandParameterInfo operationalCredentialsopCSRRequestCSRNonceCommandParameterInfo =
        new CommandParameterInfo("CSRNonce", byte[].class);
    operationalCredentialsopCSRRequestCommandParams.put(
        "CSRNonce", operationalCredentialsopCSRRequestCSRNonceCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialsopCSRRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .opCSRRequest(
                      (ChipClusters.OperationalCredentialsCluster.OpCSRResponseCallback) callback,
                      (byte[]) commandArguments.get("CSRNonce"));
            },
            () -> new DelegatedOpCSRResponseCallback(),
            operationalCredentialsopCSRRequestCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "opCSRRequest", operationalCredentialsopCSRRequestCommandInfo);
    Map<String, CommandParameterInfo> operationalCredentialsremoveFabricCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo operationalCredentialsremoveFabricCommandParameterInfo =
        new CommandParameterInfo(
            "OperationalCredentials",
            ChipClusters.OperationalCredentialsCluster.NOCResponseCallback.class);
    CommandParameterInfo operationalCredentialsremoveFabricfabricIndexCommandParameterInfo =
        new CommandParameterInfo("fabricIndex", int.class);
    operationalCredentialsremoveFabricCommandParams.put(
        "fabricIndex", operationalCredentialsremoveFabricfabricIndexCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialsremoveFabricCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .removeFabric(
                      (ChipClusters.OperationalCredentialsCluster.NOCResponseCallback) callback,
                      (Integer) commandArguments.get("fabricIndex"));
            },
            () -> new DelegatedNOCResponseCallback(),
            operationalCredentialsremoveFabricCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "removeFabric", operationalCredentialsremoveFabricCommandInfo);
    Map<String, CommandParameterInfo>
        operationalCredentialsremoveTrustedRootCertificateCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo operationalCredentialsremoveTrustedRootCertificateCommandParameterInfo =
        new CommandParameterInfo(
            "OperationalCredentials", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo
        operationalCredentialsremoveTrustedRootCertificatetrustedRootIdentifierCommandParameterInfo =
            new CommandParameterInfo("trustedRootIdentifier", byte[].class);
    operationalCredentialsremoveTrustedRootCertificateCommandParams.put(
        "trustedRootIdentifier",
        operationalCredentialsremoveTrustedRootCertificatetrustedRootIdentifierCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialsremoveTrustedRootCertificateCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .removeTrustedRootCertificate(
                      (DefaultClusterCallback) callback,
                      (byte[]) commandArguments.get("trustedRootIdentifier"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            operationalCredentialsremoveTrustedRootCertificateCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "removeTrustedRootCertificate",
        operationalCredentialsremoveTrustedRootCertificateCommandInfo);
    Map<String, CommandParameterInfo> operationalCredentialsupdateFabricLabelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo operationalCredentialsupdateFabricLabelCommandParameterInfo =
        new CommandParameterInfo(
            "OperationalCredentials",
            ChipClusters.OperationalCredentialsCluster.NOCResponseCallback.class);
    CommandParameterInfo operationalCredentialsupdateFabricLabellabelCommandParameterInfo =
        new CommandParameterInfo("label", String.class);
    operationalCredentialsupdateFabricLabelCommandParams.put(
        "label", operationalCredentialsupdateFabricLabellabelCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialsupdateFabricLabelCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .updateFabricLabel(
                      (ChipClusters.OperationalCredentialsCluster.NOCResponseCallback) callback,
                      (String) commandArguments.get("label"));
            },
            () -> new DelegatedNOCResponseCallback(),
            operationalCredentialsupdateFabricLabelCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "updateFabricLabel", operationalCredentialsupdateFabricLabelCommandInfo);
    Map<String, CommandParameterInfo> operationalCredentialsupdateNOCCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo operationalCredentialsupdateNOCCommandParameterInfo =
        new CommandParameterInfo(
            "OperationalCredentials",
            ChipClusters.OperationalCredentialsCluster.NOCResponseCallback.class);
    CommandParameterInfo operationalCredentialsupdateNOCNOCValueCommandParameterInfo =
        new CommandParameterInfo("NOCValue", byte[].class);
    operationalCredentialsupdateNOCCommandParams.put(
        "NOCValue", operationalCredentialsupdateNOCNOCValueCommandParameterInfo);

    CommandParameterInfo operationalCredentialsupdateNOCICACValueCommandParameterInfo =
        new CommandParameterInfo("ICACValue", byte[].class);
    operationalCredentialsupdateNOCCommandParams.put(
        "ICACValue", operationalCredentialsupdateNOCICACValueCommandParameterInfo);

    // Populate commands
    CommandInfo operationalCredentialsupdateNOCCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OperationalCredentialsCluster) cluster)
                  .updateNOC(
                      (ChipClusters.OperationalCredentialsCluster.NOCResponseCallback) callback,
                      (byte[]) commandArguments.get("NOCValue"),
                      (byte[]) commandArguments.get("ICACValue"));
            },
            () -> new DelegatedNOCResponseCallback(),
            operationalCredentialsupdateNOCCommandParams);
    operationalCredentialsClusterCommandInfoMap.put(
        "updateNOC", operationalCredentialsupdateNOCCommandInfo);
    // Populate cluster
    ClusterInfo operationalCredentialsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.OperationalCredentialsCluster(ptr, endpointId),
            operationalCredentialsClusterCommandInfoMap);
    clusterMap.put("operationalCredentials", operationalCredentialsClusterInfo);
    Map<String, CommandInfo> powerSourceClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo powerSourceClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.PowerSourceCluster(ptr, endpointId),
            powerSourceClusterCommandInfoMap);
    clusterMap.put("powerSource", powerSourceClusterInfo);
    Map<String, CommandInfo> pressureMeasurementClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo pressureMeasurementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.PressureMeasurementCluster(ptr, endpointId),
            pressureMeasurementClusterCommandInfoMap);
    clusterMap.put("pressureMeasurement", pressureMeasurementClusterInfo);
    Map<String, CommandInfo> pumpConfigurationAndControlClusterCommandInfoMap =
        new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo pumpConfigurationAndControlClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.PumpConfigurationAndControlCluster(ptr, endpointId),
            pumpConfigurationAndControlClusterCommandInfoMap);
    clusterMap.put("pumpConfigurationAndControl", pumpConfigurationAndControlClusterInfo);
    Map<String, CommandInfo> relativeHumidityMeasurementClusterCommandInfoMap =
        new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo relativeHumidityMeasurementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.RelativeHumidityMeasurementCluster(ptr, endpointId),
            relativeHumidityMeasurementClusterCommandInfoMap);
    clusterMap.put("relativeHumidityMeasurement", relativeHumidityMeasurementClusterInfo);
    Map<String, CommandInfo> scenesClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> scenesaddSceneCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo scenesaddSceneCommandParameterInfo =
        new CommandParameterInfo(
            "Scenes", ChipClusters.ScenesCluster.AddSceneResponseCallback.class);
    CommandParameterInfo scenesaddScenegroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    scenesaddSceneCommandParams.put("groupId", scenesaddScenegroupIdCommandParameterInfo);

    CommandParameterInfo scenesaddScenesceneIdCommandParameterInfo =
        new CommandParameterInfo("sceneId", int.class);
    scenesaddSceneCommandParams.put("sceneId", scenesaddScenesceneIdCommandParameterInfo);

    CommandParameterInfo scenesaddScenetransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    scenesaddSceneCommandParams.put(
        "transitionTime", scenesaddScenetransitionTimeCommandParameterInfo);

    CommandParameterInfo scenesaddScenesceneNameCommandParameterInfo =
        new CommandParameterInfo("sceneName", String.class);
    scenesaddSceneCommandParams.put("sceneName", scenesaddScenesceneNameCommandParameterInfo);

    CommandParameterInfo scenesaddSceneclusterIdCommandParameterInfo =
        new CommandParameterInfo("clusterId", long.class);
    scenesaddSceneCommandParams.put("clusterId", scenesaddSceneclusterIdCommandParameterInfo);

    CommandParameterInfo scenesaddScenelengthCommandParameterInfo =
        new CommandParameterInfo("length", int.class);
    scenesaddSceneCommandParams.put("length", scenesaddScenelengthCommandParameterInfo);

    CommandParameterInfo scenesaddScenevalueCommandParameterInfo =
        new CommandParameterInfo("value", int.class);
    scenesaddSceneCommandParams.put("value", scenesaddScenevalueCommandParameterInfo);

    // Populate commands
    CommandInfo scenesaddSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .addScene(
                      (ChipClusters.ScenesCluster.AddSceneResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("sceneId"),
                      (Integer) commandArguments.get("transitionTime"),
                      (String) commandArguments.get("sceneName"),
                      (Long) commandArguments.get("clusterId"),
                      (Integer) commandArguments.get("length"),
                      (Integer) commandArguments.get("value"));
            },
            () -> new DelegatedAddSceneResponseCallback(),
            scenesaddSceneCommandParams);
    scenesClusterCommandInfoMap.put("addScene", scenesaddSceneCommandInfo);
    Map<String, CommandParameterInfo> scenesgetSceneMembershipCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo scenesgetSceneMembershipCommandParameterInfo =
        new CommandParameterInfo(
            "Scenes", ChipClusters.ScenesCluster.GetSceneMembershipResponseCallback.class);
    CommandParameterInfo scenesgetSceneMembershipgroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    scenesgetSceneMembershipCommandParams.put(
        "groupId", scenesgetSceneMembershipgroupIdCommandParameterInfo);

    // Populate commands
    CommandInfo scenesgetSceneMembershipCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .getSceneMembership(
                      (ChipClusters.ScenesCluster.GetSceneMembershipResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"));
            },
            () -> new DelegatedGetSceneMembershipResponseCallback(),
            scenesgetSceneMembershipCommandParams);
    scenesClusterCommandInfoMap.put("getSceneMembership", scenesgetSceneMembershipCommandInfo);
    Map<String, CommandParameterInfo> scenesrecallSceneCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo scenesrecallSceneCommandParameterInfo =
        new CommandParameterInfo("Scenes", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo scenesrecallScenegroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    scenesrecallSceneCommandParams.put("groupId", scenesrecallScenegroupIdCommandParameterInfo);

    CommandParameterInfo scenesrecallScenesceneIdCommandParameterInfo =
        new CommandParameterInfo("sceneId", int.class);
    scenesrecallSceneCommandParams.put("sceneId", scenesrecallScenesceneIdCommandParameterInfo);

    CommandParameterInfo scenesrecallScenetransitionTimeCommandParameterInfo =
        new CommandParameterInfo("transitionTime", int.class);
    scenesrecallSceneCommandParams.put(
        "transitionTime", scenesrecallScenetransitionTimeCommandParameterInfo);

    // Populate commands
    CommandInfo scenesrecallSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .recallScene(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("sceneId"),
                      (Integer) commandArguments.get("transitionTime"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            scenesrecallSceneCommandParams);
    scenesClusterCommandInfoMap.put("recallScene", scenesrecallSceneCommandInfo);
    Map<String, CommandParameterInfo> scenesremoveAllScenesCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo scenesremoveAllScenesCommandParameterInfo =
        new CommandParameterInfo(
            "Scenes", ChipClusters.ScenesCluster.RemoveAllScenesResponseCallback.class);
    CommandParameterInfo scenesremoveAllScenesgroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    scenesremoveAllScenesCommandParams.put(
        "groupId", scenesremoveAllScenesgroupIdCommandParameterInfo);

    // Populate commands
    CommandInfo scenesremoveAllScenesCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .removeAllScenes(
                      (ChipClusters.ScenesCluster.RemoveAllScenesResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"));
            },
            () -> new DelegatedRemoveAllScenesResponseCallback(),
            scenesremoveAllScenesCommandParams);
    scenesClusterCommandInfoMap.put("removeAllScenes", scenesremoveAllScenesCommandInfo);
    Map<String, CommandParameterInfo> scenesremoveSceneCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo scenesremoveSceneCommandParameterInfo =
        new CommandParameterInfo(
            "Scenes", ChipClusters.ScenesCluster.RemoveSceneResponseCallback.class);
    CommandParameterInfo scenesremoveScenegroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    scenesremoveSceneCommandParams.put("groupId", scenesremoveScenegroupIdCommandParameterInfo);

    CommandParameterInfo scenesremoveScenesceneIdCommandParameterInfo =
        new CommandParameterInfo("sceneId", int.class);
    scenesremoveSceneCommandParams.put("sceneId", scenesremoveScenesceneIdCommandParameterInfo);

    // Populate commands
    CommandInfo scenesremoveSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .removeScene(
                      (ChipClusters.ScenesCluster.RemoveSceneResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("sceneId"));
            },
            () -> new DelegatedRemoveSceneResponseCallback(),
            scenesremoveSceneCommandParams);
    scenesClusterCommandInfoMap.put("removeScene", scenesremoveSceneCommandInfo);
    Map<String, CommandParameterInfo> scenesstoreSceneCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo scenesstoreSceneCommandParameterInfo =
        new CommandParameterInfo(
            "Scenes", ChipClusters.ScenesCluster.StoreSceneResponseCallback.class);
    CommandParameterInfo scenesstoreScenegroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    scenesstoreSceneCommandParams.put("groupId", scenesstoreScenegroupIdCommandParameterInfo);

    CommandParameterInfo scenesstoreScenesceneIdCommandParameterInfo =
        new CommandParameterInfo("sceneId", int.class);
    scenesstoreSceneCommandParams.put("sceneId", scenesstoreScenesceneIdCommandParameterInfo);

    // Populate commands
    CommandInfo scenesstoreSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .storeScene(
                      (ChipClusters.ScenesCluster.StoreSceneResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("sceneId"));
            },
            () -> new DelegatedStoreSceneResponseCallback(),
            scenesstoreSceneCommandParams);
    scenesClusterCommandInfoMap.put("storeScene", scenesstoreSceneCommandInfo);
    Map<String, CommandParameterInfo> scenesviewSceneCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo scenesviewSceneCommandParameterInfo =
        new CommandParameterInfo(
            "Scenes", ChipClusters.ScenesCluster.ViewSceneResponseCallback.class);
    CommandParameterInfo scenesviewScenegroupIdCommandParameterInfo =
        new CommandParameterInfo("groupId", int.class);
    scenesviewSceneCommandParams.put("groupId", scenesviewScenegroupIdCommandParameterInfo);

    CommandParameterInfo scenesviewScenesceneIdCommandParameterInfo =
        new CommandParameterInfo("sceneId", int.class);
    scenesviewSceneCommandParams.put("sceneId", scenesviewScenesceneIdCommandParameterInfo);

    // Populate commands
    CommandInfo scenesviewSceneCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ScenesCluster) cluster)
                  .viewScene(
                      (ChipClusters.ScenesCluster.ViewSceneResponseCallback) callback,
                      (Integer) commandArguments.get("groupId"),
                      (Integer) commandArguments.get("sceneId"));
            },
            () -> new DelegatedViewSceneResponseCallback(),
            scenesviewSceneCommandParams);
    scenesClusterCommandInfoMap.put("viewScene", scenesviewSceneCommandInfo);
    // Populate cluster
    ClusterInfo scenesClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ScenesCluster(ptr, endpointId),
            scenesClusterCommandInfoMap);
    clusterMap.put("scenes", scenesClusterInfo);
    Map<String, CommandInfo> softwareDiagnosticsClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> softwareDiagnosticsresetWatermarksCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo softwareDiagnosticsresetWatermarksCommandParameterInfo =
        new CommandParameterInfo("SoftwareDiagnostics", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo softwareDiagnosticsresetWatermarksCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.SoftwareDiagnosticsCluster) cluster)
                  .resetWatermarks((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            softwareDiagnosticsresetWatermarksCommandParams);
    softwareDiagnosticsClusterCommandInfoMap.put(
        "resetWatermarks", softwareDiagnosticsresetWatermarksCommandInfo);
    // Populate cluster
    ClusterInfo softwareDiagnosticsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.SoftwareDiagnosticsCluster(ptr, endpointId),
            softwareDiagnosticsClusterCommandInfoMap);
    clusterMap.put("softwareDiagnostics", softwareDiagnosticsClusterInfo);
    Map<String, CommandInfo> switchClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo switchClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.SwitchCluster(ptr, endpointId),
            switchClusterCommandInfoMap);
    clusterMap.put("switch", switchClusterInfo);
    Map<String, CommandInfo> tvChannelClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> tvChannelchangeChannelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo tvChannelchangeChannelCommandParameterInfo =
        new CommandParameterInfo(
            "TvChannel", ChipClusters.TvChannelCluster.ChangeChannelResponseCallback.class);
    CommandParameterInfo tvChannelchangeChannelmatchCommandParameterInfo =
        new CommandParameterInfo("match", String.class);
    tvChannelchangeChannelCommandParams.put(
        "match", tvChannelchangeChannelmatchCommandParameterInfo);

    // Populate commands
    CommandInfo tvChannelchangeChannelCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TvChannelCluster) cluster)
                  .changeChannel(
                      (ChipClusters.TvChannelCluster.ChangeChannelResponseCallback) callback,
                      (String) commandArguments.get("match"));
            },
            () -> new DelegatedChangeChannelResponseCallback(),
            tvChannelchangeChannelCommandParams);
    tvChannelClusterCommandInfoMap.put("changeChannel", tvChannelchangeChannelCommandInfo);
    Map<String, CommandParameterInfo> tvChannelchangeChannelByNumberCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo tvChannelchangeChannelByNumberCommandParameterInfo =
        new CommandParameterInfo("TvChannel", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo tvChannelchangeChannelByNumbermajorNumberCommandParameterInfo =
        new CommandParameterInfo("majorNumber", int.class);
    tvChannelchangeChannelByNumberCommandParams.put(
        "majorNumber", tvChannelchangeChannelByNumbermajorNumberCommandParameterInfo);

    CommandParameterInfo tvChannelchangeChannelByNumberminorNumberCommandParameterInfo =
        new CommandParameterInfo("minorNumber", int.class);
    tvChannelchangeChannelByNumberCommandParams.put(
        "minorNumber", tvChannelchangeChannelByNumberminorNumberCommandParameterInfo);

    // Populate commands
    CommandInfo tvChannelchangeChannelByNumberCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TvChannelCluster) cluster)
                  .changeChannelByNumber(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("majorNumber"),
                      (Integer) commandArguments.get("minorNumber"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            tvChannelchangeChannelByNumberCommandParams);
    tvChannelClusterCommandInfoMap.put(
        "changeChannelByNumber", tvChannelchangeChannelByNumberCommandInfo);
    Map<String, CommandParameterInfo> tvChannelskipChannelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo tvChannelskipChannelCommandParameterInfo =
        new CommandParameterInfo("TvChannel", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo tvChannelskipChannelcountCommandParameterInfo =
        new CommandParameterInfo("count", int.class);
    tvChannelskipChannelCommandParams.put("count", tvChannelskipChannelcountCommandParameterInfo);

    // Populate commands
    CommandInfo tvChannelskipChannelCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TvChannelCluster) cluster)
                  .skipChannel(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("count"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            tvChannelskipChannelCommandParams);
    tvChannelClusterCommandInfoMap.put("skipChannel", tvChannelskipChannelCommandInfo);
    // Populate cluster
    ClusterInfo tvChannelClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.TvChannelCluster(ptr, endpointId),
            tvChannelClusterCommandInfoMap);
    clusterMap.put("tvChannel", tvChannelClusterInfo);
    Map<String, CommandInfo> targetNavigatorClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> targetNavigatornavigateTargetCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo targetNavigatornavigateTargetCommandParameterInfo =
        new CommandParameterInfo(
            "TargetNavigator",
            ChipClusters.TargetNavigatorCluster.NavigateTargetResponseCallback.class);
    CommandParameterInfo targetNavigatornavigateTargettargetCommandParameterInfo =
        new CommandParameterInfo("target", int.class);
    targetNavigatornavigateTargetCommandParams.put(
        "target", targetNavigatornavigateTargettargetCommandParameterInfo);

    CommandParameterInfo targetNavigatornavigateTargetdataCommandParameterInfo =
        new CommandParameterInfo("data", String.class);
    targetNavigatornavigateTargetCommandParams.put(
        "data", targetNavigatornavigateTargetdataCommandParameterInfo);

    // Populate commands
    CommandInfo targetNavigatornavigateTargetCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TargetNavigatorCluster) cluster)
                  .navigateTarget(
                      (ChipClusters.TargetNavigatorCluster.NavigateTargetResponseCallback) callback,
                      (Integer) commandArguments.get("target"),
                      (String) commandArguments.get("data"));
            },
            () -> new DelegatedNavigateTargetResponseCallback(),
            targetNavigatornavigateTargetCommandParams);
    targetNavigatorClusterCommandInfoMap.put(
        "navigateTarget", targetNavigatornavigateTargetCommandInfo);
    // Populate cluster
    ClusterInfo targetNavigatorClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.TargetNavigatorCluster(ptr, endpointId),
            targetNavigatorClusterCommandInfoMap);
    clusterMap.put("targetNavigator", targetNavigatorClusterInfo);
    Map<String, CommandInfo> temperatureMeasurementClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo temperatureMeasurementClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.TemperatureMeasurementCluster(ptr, endpointId),
            temperatureMeasurementClusterCommandInfoMap);
    clusterMap.put("temperatureMeasurement", temperatureMeasurementClusterInfo);
    Map<String, CommandInfo> testClusterClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> testClustertestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo testClustertestCommandParameterInfo =
        new CommandParameterInfo("TestCluster", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo testClustertestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster).test((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            testClustertestCommandParams);
    testClusterClusterCommandInfoMap.put("test", testClustertestCommandInfo);
    Map<String, CommandParameterInfo> testClustertestAddArgumentsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo testClustertestAddArgumentsCommandParameterInfo =
        new CommandParameterInfo(
            "TestCluster", ChipClusters.TestClusterCluster.TestAddArgumentsResponseCallback.class);
    CommandParameterInfo testClustertestAddArgumentsarg1CommandParameterInfo =
        new CommandParameterInfo("arg1", int.class);
    testClustertestAddArgumentsCommandParams.put(
        "arg1", testClustertestAddArgumentsarg1CommandParameterInfo);

    CommandParameterInfo testClustertestAddArgumentsarg2CommandParameterInfo =
        new CommandParameterInfo("arg2", int.class);
    testClustertestAddArgumentsCommandParams.put(
        "arg2", testClustertestAddArgumentsarg2CommandParameterInfo);

    // Populate commands
    CommandInfo testClustertestAddArgumentsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testAddArguments(
                      (ChipClusters.TestClusterCluster.TestAddArgumentsResponseCallback) callback,
                      (Integer) commandArguments.get("arg1"),
                      (Integer) commandArguments.get("arg2"));
            },
            () -> new DelegatedTestAddArgumentsResponseCallback(),
            testClustertestAddArgumentsCommandParams);
    testClusterClusterCommandInfoMap.put(
        "testAddArguments", testClustertestAddArgumentsCommandInfo);
    Map<String, CommandParameterInfo> testClustertestEnumsRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo testClustertestEnumsRequestCommandParameterInfo =
        new CommandParameterInfo(
            "TestCluster", ChipClusters.TestClusterCluster.TestEnumsResponseCallback.class);
    CommandParameterInfo testClustertestEnumsRequestarg1CommandParameterInfo =
        new CommandParameterInfo("arg1", int.class);
    testClustertestEnumsRequestCommandParams.put(
        "arg1", testClustertestEnumsRequestarg1CommandParameterInfo);

    CommandParameterInfo testClustertestEnumsRequestarg2CommandParameterInfo =
        new CommandParameterInfo("arg2", int.class);
    testClustertestEnumsRequestCommandParams.put(
        "arg2", testClustertestEnumsRequestarg2CommandParameterInfo);

    // Populate commands
    CommandInfo testClustertestEnumsRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testEnumsRequest(
                      (ChipClusters.TestClusterCluster.TestEnumsResponseCallback) callback,
                      (Integer) commandArguments.get("arg1"),
                      (Integer) commandArguments.get("arg2"));
            },
            () -> new DelegatedTestEnumsResponseCallback(),
            testClustertestEnumsRequestCommandParams);
    testClusterClusterCommandInfoMap.put(
        "testEnumsRequest", testClustertestEnumsRequestCommandInfo);
    Map<String, CommandParameterInfo> testClustertestListInt8UArgumentRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo testClustertestListInt8UArgumentRequestCommandParameterInfo =
        new CommandParameterInfo("TestCluster", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo testClustertestListInt8UArgumentRequestarg1CommandParameterInfo =
        new CommandParameterInfo("arg1", int.class);
    testClustertestListInt8UArgumentRequestCommandParams.put(
        "arg1", testClustertestListInt8UArgumentRequestarg1CommandParameterInfo);

    // Populate commands
    CommandInfo testClustertestListInt8UArgumentRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testListInt8UArgumentRequest(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("arg1"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            testClustertestListInt8UArgumentRequestCommandParams);
    testClusterClusterCommandInfoMap.put(
        "testListInt8UArgumentRequest", testClustertestListInt8UArgumentRequestCommandInfo);
    Map<String, CommandParameterInfo> testClustertestListInt8UReverseRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo testClustertestListInt8UReverseRequestCommandParameterInfo =
        new CommandParameterInfo(
            "TestCluster",
            ChipClusters.TestClusterCluster.TestListInt8UReverseResponseCallback.class);
    CommandParameterInfo testClustertestListInt8UReverseRequestarg1CommandParameterInfo =
        new CommandParameterInfo("arg1", int.class);
    testClustertestListInt8UReverseRequestCommandParams.put(
        "arg1", testClustertestListInt8UReverseRequestarg1CommandParameterInfo);

    // Populate commands
    CommandInfo testClustertestListInt8UReverseRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testListInt8UReverseRequest(
                      (ChipClusters.TestClusterCluster.TestListInt8UReverseResponseCallback)
                          callback,
                      (Integer) commandArguments.get("arg1"));
            },
            () -> new DelegatedTestListInt8UReverseResponseCallback(),
            testClustertestListInt8UReverseRequestCommandParams);
    testClusterClusterCommandInfoMap.put(
        "testListInt8UReverseRequest", testClustertestListInt8UReverseRequestCommandInfo);
    Map<String, CommandParameterInfo> testClustertestListStructArgumentRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo testClustertestListStructArgumentRequestCommandParameterInfo =
        new CommandParameterInfo("TestCluster", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo testClustertestListStructArgumentRequestaCommandParameterInfo =
        new CommandParameterInfo("a", int.class);
    testClustertestListStructArgumentRequestCommandParams.put(
        "a", testClustertestListStructArgumentRequestaCommandParameterInfo);

    CommandParameterInfo testClustertestListStructArgumentRequestbCommandParameterInfo =
        new CommandParameterInfo("b", boolean.class);
    testClustertestListStructArgumentRequestCommandParams.put(
        "b", testClustertestListStructArgumentRequestbCommandParameterInfo);

    CommandParameterInfo testClustertestListStructArgumentRequestcCommandParameterInfo =
        new CommandParameterInfo("c", int.class);
    testClustertestListStructArgumentRequestCommandParams.put(
        "c", testClustertestListStructArgumentRequestcCommandParameterInfo);

    CommandParameterInfo testClustertestListStructArgumentRequestdCommandParameterInfo =
        new CommandParameterInfo("d", byte[].class);
    testClustertestListStructArgumentRequestCommandParams.put(
        "d", testClustertestListStructArgumentRequestdCommandParameterInfo);

    CommandParameterInfo testClustertestListStructArgumentRequesteCommandParameterInfo =
        new CommandParameterInfo("e", String.class);
    testClustertestListStructArgumentRequestCommandParams.put(
        "e", testClustertestListStructArgumentRequesteCommandParameterInfo);

    CommandParameterInfo testClustertestListStructArgumentRequestfCommandParameterInfo =
        new CommandParameterInfo("f", int.class);
    testClustertestListStructArgumentRequestCommandParams.put(
        "f", testClustertestListStructArgumentRequestfCommandParameterInfo);

    // Populate commands
    CommandInfo testClustertestListStructArgumentRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testListStructArgumentRequest(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("a"),
                      (Boolean) commandArguments.get("b"),
                      (Integer) commandArguments.get("c"),
                      (byte[]) commandArguments.get("d"),
                      (String) commandArguments.get("e"),
                      (Integer) commandArguments.get("f"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            testClustertestListStructArgumentRequestCommandParams);
    testClusterClusterCommandInfoMap.put(
        "testListStructArgumentRequest", testClustertestListStructArgumentRequestCommandInfo);
    Map<String, CommandParameterInfo> testClustertestNotHandledCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo testClustertestNotHandledCommandParameterInfo =
        new CommandParameterInfo("TestCluster", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo testClustertestNotHandledCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testNotHandled((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            testClustertestNotHandledCommandParams);
    testClusterClusterCommandInfoMap.put("testNotHandled", testClustertestNotHandledCommandInfo);
    Map<String, CommandParameterInfo> testClustertestNullableOptionalRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo testClustertestNullableOptionalRequestCommandParameterInfo =
        new CommandParameterInfo(
            "TestCluster",
            ChipClusters.TestClusterCluster.TestNullableOptionalResponseCallback.class);
    CommandParameterInfo testClustertestNullableOptionalRequestarg1CommandParameterInfo =
        new CommandParameterInfo("arg1", int.class);
    testClustertestNullableOptionalRequestCommandParams.put(
        "arg1", testClustertestNullableOptionalRequestarg1CommandParameterInfo);

    // Populate commands
    CommandInfo testClustertestNullableOptionalRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testNullableOptionalRequest(
                      (ChipClusters.TestClusterCluster.TestNullableOptionalResponseCallback)
                          callback,
                      (Integer) commandArguments.get("arg1"));
            },
            () -> new DelegatedTestNullableOptionalResponseCallback(),
            testClustertestNullableOptionalRequestCommandParams);
    testClusterClusterCommandInfoMap.put(
        "testNullableOptionalRequest", testClustertestNullableOptionalRequestCommandInfo);
    Map<String, CommandParameterInfo> testClustertestSpecificCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo testClustertestSpecificCommandParameterInfo =
        new CommandParameterInfo(
            "TestCluster", ChipClusters.TestClusterCluster.TestSpecificResponseCallback.class);
    // Populate commands
    CommandInfo testClustertestSpecificCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testSpecific(
                      (ChipClusters.TestClusterCluster.TestSpecificResponseCallback) callback);
            },
            () -> new DelegatedTestSpecificResponseCallback(),
            testClustertestSpecificCommandParams);
    testClusterClusterCommandInfoMap.put("testSpecific", testClustertestSpecificCommandInfo);
    Map<String, CommandParameterInfo> testClustertestStructArgumentRequestCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo testClustertestStructArgumentRequestCommandParameterInfo =
        new CommandParameterInfo("TestCluster", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo testClustertestStructArgumentRequestaCommandParameterInfo =
        new CommandParameterInfo("a", int.class);
    testClustertestStructArgumentRequestCommandParams.put(
        "a", testClustertestStructArgumentRequestaCommandParameterInfo);

    CommandParameterInfo testClustertestStructArgumentRequestbCommandParameterInfo =
        new CommandParameterInfo("b", boolean.class);
    testClustertestStructArgumentRequestCommandParams.put(
        "b", testClustertestStructArgumentRequestbCommandParameterInfo);

    CommandParameterInfo testClustertestStructArgumentRequestcCommandParameterInfo =
        new CommandParameterInfo("c", int.class);
    testClustertestStructArgumentRequestCommandParams.put(
        "c", testClustertestStructArgumentRequestcCommandParameterInfo);

    CommandParameterInfo testClustertestStructArgumentRequestdCommandParameterInfo =
        new CommandParameterInfo("d", byte[].class);
    testClustertestStructArgumentRequestCommandParams.put(
        "d", testClustertestStructArgumentRequestdCommandParameterInfo);

    CommandParameterInfo testClustertestStructArgumentRequesteCommandParameterInfo =
        new CommandParameterInfo("e", String.class);
    testClustertestStructArgumentRequestCommandParams.put(
        "e", testClustertestStructArgumentRequesteCommandParameterInfo);

    CommandParameterInfo testClustertestStructArgumentRequestfCommandParameterInfo =
        new CommandParameterInfo("f", int.class);
    testClustertestStructArgumentRequestCommandParams.put(
        "f", testClustertestStructArgumentRequestfCommandParameterInfo);

    // Populate commands
    CommandInfo testClustertestStructArgumentRequestCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testStructArgumentRequest(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("a"),
                      (Boolean) commandArguments.get("b"),
                      (Integer) commandArguments.get("c"),
                      (byte[]) commandArguments.get("d"),
                      (String) commandArguments.get("e"),
                      (Integer) commandArguments.get("f"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            testClustertestStructArgumentRequestCommandParams);
    testClusterClusterCommandInfoMap.put(
        "testStructArgumentRequest", testClustertestStructArgumentRequestCommandInfo);
    Map<String, CommandParameterInfo> testClustertestUnknownCommandCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo testClustertestUnknownCommandCommandParameterInfo =
        new CommandParameterInfo("TestCluster", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo testClustertestUnknownCommandCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .testUnknownCommand((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            testClustertestUnknownCommandCommandParams);
    testClusterClusterCommandInfoMap.put(
        "testUnknownCommand", testClustertestUnknownCommandCommandInfo);
    // Populate cluster
    ClusterInfo testClusterClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.TestClusterCluster(ptr, endpointId),
            testClusterClusterCommandInfoMap);
    clusterMap.put("testCluster", testClusterClusterInfo);
    Map<String, CommandInfo> thermostatClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> thermostatclearWeeklyScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo thermostatclearWeeklyScheduleCommandParameterInfo =
        new CommandParameterInfo("Thermostat", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo thermostatclearWeeklyScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .clearWeeklySchedule((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            thermostatclearWeeklyScheduleCommandParams);
    thermostatClusterCommandInfoMap.put(
        "clearWeeklySchedule", thermostatclearWeeklyScheduleCommandInfo);
    Map<String, CommandParameterInfo> thermostatgetRelayStatusLogCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo thermostatgetRelayStatusLogCommandParameterInfo =
        new CommandParameterInfo("Thermostat", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo thermostatgetRelayStatusLogCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .getRelayStatusLog((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            thermostatgetRelayStatusLogCommandParams);
    thermostatClusterCommandInfoMap.put(
        "getRelayStatusLog", thermostatgetRelayStatusLogCommandInfo);
    Map<String, CommandParameterInfo> thermostatgetWeeklyScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo thermostatgetWeeklyScheduleCommandParameterInfo =
        new CommandParameterInfo("Thermostat", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo thermostatgetWeeklyScheduledaysToReturnCommandParameterInfo =
        new CommandParameterInfo("daysToReturn", int.class);
    thermostatgetWeeklyScheduleCommandParams.put(
        "daysToReturn", thermostatgetWeeklyScheduledaysToReturnCommandParameterInfo);

    CommandParameterInfo thermostatgetWeeklySchedulemodeToReturnCommandParameterInfo =
        new CommandParameterInfo("modeToReturn", int.class);
    thermostatgetWeeklyScheduleCommandParams.put(
        "modeToReturn", thermostatgetWeeklySchedulemodeToReturnCommandParameterInfo);

    // Populate commands
    CommandInfo thermostatgetWeeklyScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .getWeeklySchedule(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("daysToReturn"),
                      (Integer) commandArguments.get("modeToReturn"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            thermostatgetWeeklyScheduleCommandParams);
    thermostatClusterCommandInfoMap.put(
        "getWeeklySchedule", thermostatgetWeeklyScheduleCommandInfo);
    Map<String, CommandParameterInfo> thermostatsetWeeklyScheduleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo thermostatsetWeeklyScheduleCommandParameterInfo =
        new CommandParameterInfo("Thermostat", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo
        thermostatsetWeeklySchedulenumberOfTransitionsForSequenceCommandParameterInfo =
            new CommandParameterInfo("numberOfTransitionsForSequence", int.class);
    thermostatsetWeeklyScheduleCommandParams.put(
        "numberOfTransitionsForSequence",
        thermostatsetWeeklySchedulenumberOfTransitionsForSequenceCommandParameterInfo);

    CommandParameterInfo thermostatsetWeeklyScheduledayOfWeekForSequenceCommandParameterInfo =
        new CommandParameterInfo("dayOfWeekForSequence", int.class);
    thermostatsetWeeklyScheduleCommandParams.put(
        "dayOfWeekForSequence",
        thermostatsetWeeklyScheduledayOfWeekForSequenceCommandParameterInfo);

    CommandParameterInfo thermostatsetWeeklySchedulemodeForSequenceCommandParameterInfo =
        new CommandParameterInfo("modeForSequence", int.class);
    thermostatsetWeeklyScheduleCommandParams.put(
        "modeForSequence", thermostatsetWeeklySchedulemodeForSequenceCommandParameterInfo);

    CommandParameterInfo thermostatsetWeeklySchedulepayloadCommandParameterInfo =
        new CommandParameterInfo("payload", int.class);
    thermostatsetWeeklyScheduleCommandParams.put(
        "payload", thermostatsetWeeklySchedulepayloadCommandParameterInfo);

    // Populate commands
    CommandInfo thermostatsetWeeklyScheduleCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .setWeeklySchedule(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("numberOfTransitionsForSequence"),
                      (Integer) commandArguments.get("dayOfWeekForSequence"),
                      (Integer) commandArguments.get("modeForSequence"),
                      (Integer) commandArguments.get("payload"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            thermostatsetWeeklyScheduleCommandParams);
    thermostatClusterCommandInfoMap.put(
        "setWeeklySchedule", thermostatsetWeeklyScheduleCommandInfo);
    Map<String, CommandParameterInfo> thermostatsetpointRaiseLowerCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo thermostatsetpointRaiseLowerCommandParameterInfo =
        new CommandParameterInfo("Thermostat", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo thermostatsetpointRaiseLowermodeCommandParameterInfo =
        new CommandParameterInfo("mode", int.class);
    thermostatsetpointRaiseLowerCommandParams.put(
        "mode", thermostatsetpointRaiseLowermodeCommandParameterInfo);

    CommandParameterInfo thermostatsetpointRaiseLoweramountCommandParameterInfo =
        new CommandParameterInfo("amount", int.class);
    thermostatsetpointRaiseLowerCommandParams.put(
        "amount", thermostatsetpointRaiseLoweramountCommandParameterInfo);

    // Populate commands
    CommandInfo thermostatsetpointRaiseLowerCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .setpointRaiseLower(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("mode"),
                      (Integer) commandArguments.get("amount"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            thermostatsetpointRaiseLowerCommandParams);
    thermostatClusterCommandInfoMap.put(
        "setpointRaiseLower", thermostatsetpointRaiseLowerCommandInfo);
    // Populate cluster
    ClusterInfo thermostatClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ThermostatCluster(ptr, endpointId),
            thermostatClusterCommandInfoMap);
    clusterMap.put("thermostat", thermostatClusterInfo);
    Map<String, CommandInfo> thermostatUserInterfaceConfigurationClusterCommandInfoMap =
        new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo thermostatUserInterfaceConfigurationClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) ->
                new ChipClusters.ThermostatUserInterfaceConfigurationCluster(ptr, endpointId),
            thermostatUserInterfaceConfigurationClusterCommandInfoMap);
    clusterMap.put(
        "thermostatUserInterfaceConfiguration", thermostatUserInterfaceConfigurationClusterInfo);
    Map<String, CommandInfo> threadNetworkDiagnosticsClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> threadNetworkDiagnosticsresetCountsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo threadNetworkDiagnosticsresetCountsCommandParameterInfo =
        new CommandParameterInfo(
            "ThreadNetworkDiagnostics", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo threadNetworkDiagnosticsresetCountsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThreadNetworkDiagnosticsCluster) cluster)
                  .resetCounts((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            threadNetworkDiagnosticsresetCountsCommandParams);
    threadNetworkDiagnosticsClusterCommandInfoMap.put(
        "resetCounts", threadNetworkDiagnosticsresetCountsCommandInfo);
    // Populate cluster
    ClusterInfo threadNetworkDiagnosticsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.ThreadNetworkDiagnosticsCluster(ptr, endpointId),
            threadNetworkDiagnosticsClusterCommandInfoMap);
    clusterMap.put("threadNetworkDiagnostics", threadNetworkDiagnosticsClusterInfo);
    Map<String, CommandInfo> wakeOnLanClusterCommandInfoMap = new LinkedHashMap<>();
    // Populate cluster
    ClusterInfo wakeOnLanClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.WakeOnLanCluster(ptr, endpointId),
            wakeOnLanClusterCommandInfoMap);
    clusterMap.put("wakeOnLan", wakeOnLanClusterInfo);
    Map<String, CommandInfo> wiFiNetworkDiagnosticsClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> wiFiNetworkDiagnosticsresetCountsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo wiFiNetworkDiagnosticsresetCountsCommandParameterInfo =
        new CommandParameterInfo(
            "WiFiNetworkDiagnostics", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo wiFiNetworkDiagnosticsresetCountsCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WiFiNetworkDiagnosticsCluster) cluster)
                  .resetCounts((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            wiFiNetworkDiagnosticsresetCountsCommandParams);
    wiFiNetworkDiagnosticsClusterCommandInfoMap.put(
        "resetCounts", wiFiNetworkDiagnosticsresetCountsCommandInfo);
    // Populate cluster
    ClusterInfo wiFiNetworkDiagnosticsClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.WiFiNetworkDiagnosticsCluster(ptr, endpointId),
            wiFiNetworkDiagnosticsClusterCommandInfoMap);
    clusterMap.put("wiFiNetworkDiagnostics", wiFiNetworkDiagnosticsClusterInfo);
    Map<String, CommandInfo> windowCoveringClusterCommandInfoMap = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> windowCoveringdownOrCloseCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo windowCoveringdownOrCloseCommandParameterInfo =
        new CommandParameterInfo("WindowCovering", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo windowCoveringdownOrCloseCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .downOrClose((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringdownOrCloseCommandParams);
    windowCoveringClusterCommandInfoMap.put("downOrClose", windowCoveringdownOrCloseCommandInfo);
    Map<String, CommandParameterInfo> windowCoveringgoToLiftPercentageCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo windowCoveringgoToLiftPercentageCommandParameterInfo =
        new CommandParameterInfo("WindowCovering", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo windowCoveringgoToLiftPercentageliftPercentageValueCommandParameterInfo =
        new CommandParameterInfo("liftPercentageValue", int.class);
    windowCoveringgoToLiftPercentageCommandParams.put(
        "liftPercentageValue",
        windowCoveringgoToLiftPercentageliftPercentageValueCommandParameterInfo);

    CommandParameterInfo
        windowCoveringgoToLiftPercentageliftPercent100thsValueCommandParameterInfo =
            new CommandParameterInfo("liftPercent100thsValue", int.class);
    windowCoveringgoToLiftPercentageCommandParams.put(
        "liftPercent100thsValue",
        windowCoveringgoToLiftPercentageliftPercent100thsValueCommandParameterInfo);

    // Populate commands
    CommandInfo windowCoveringgoToLiftPercentageCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .goToLiftPercentage(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("liftPercentageValue"),
                      (Integer) commandArguments.get("liftPercent100thsValue"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringgoToLiftPercentageCommandParams);
    windowCoveringClusterCommandInfoMap.put(
        "goToLiftPercentage", windowCoveringgoToLiftPercentageCommandInfo);
    Map<String, CommandParameterInfo> windowCoveringgoToLiftValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo windowCoveringgoToLiftValueCommandParameterInfo =
        new CommandParameterInfo("WindowCovering", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo windowCoveringgoToLiftValueliftValueCommandParameterInfo =
        new CommandParameterInfo("liftValue", int.class);
    windowCoveringgoToLiftValueCommandParams.put(
        "liftValue", windowCoveringgoToLiftValueliftValueCommandParameterInfo);

    // Populate commands
    CommandInfo windowCoveringgoToLiftValueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .goToLiftValue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("liftValue"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringgoToLiftValueCommandParams);
    windowCoveringClusterCommandInfoMap.put(
        "goToLiftValue", windowCoveringgoToLiftValueCommandInfo);
    Map<String, CommandParameterInfo> windowCoveringgoToTiltPercentageCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo windowCoveringgoToTiltPercentageCommandParameterInfo =
        new CommandParameterInfo("WindowCovering", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo windowCoveringgoToTiltPercentagetiltPercentageValueCommandParameterInfo =
        new CommandParameterInfo("tiltPercentageValue", int.class);
    windowCoveringgoToTiltPercentageCommandParams.put(
        "tiltPercentageValue",
        windowCoveringgoToTiltPercentagetiltPercentageValueCommandParameterInfo);

    CommandParameterInfo
        windowCoveringgoToTiltPercentagetiltPercent100thsValueCommandParameterInfo =
            new CommandParameterInfo("tiltPercent100thsValue", int.class);
    windowCoveringgoToTiltPercentageCommandParams.put(
        "tiltPercent100thsValue",
        windowCoveringgoToTiltPercentagetiltPercent100thsValueCommandParameterInfo);

    // Populate commands
    CommandInfo windowCoveringgoToTiltPercentageCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .goToTiltPercentage(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("tiltPercentageValue"),
                      (Integer) commandArguments.get("tiltPercent100thsValue"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringgoToTiltPercentageCommandParams);
    windowCoveringClusterCommandInfoMap.put(
        "goToTiltPercentage", windowCoveringgoToTiltPercentageCommandInfo);
    Map<String, CommandParameterInfo> windowCoveringgoToTiltValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo windowCoveringgoToTiltValueCommandParameterInfo =
        new CommandParameterInfo("WindowCovering", ChipClusters.DefaultClusterCallback.class);
    CommandParameterInfo windowCoveringgoToTiltValuetiltValueCommandParameterInfo =
        new CommandParameterInfo("tiltValue", int.class);
    windowCoveringgoToTiltValueCommandParams.put(
        "tiltValue", windowCoveringgoToTiltValuetiltValueCommandParameterInfo);

    // Populate commands
    CommandInfo windowCoveringgoToTiltValueCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .goToTiltValue(
                      (DefaultClusterCallback) callback,
                      (Integer) commandArguments.get("tiltValue"));
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringgoToTiltValueCommandParams);
    windowCoveringClusterCommandInfoMap.put(
        "goToTiltValue", windowCoveringgoToTiltValueCommandInfo);
    Map<String, CommandParameterInfo> windowCoveringstopMotionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo windowCoveringstopMotionCommandParameterInfo =
        new CommandParameterInfo("WindowCovering", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo windowCoveringstopMotionCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .stopMotion((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringstopMotionCommandParams);
    windowCoveringClusterCommandInfoMap.put("stopMotion", windowCoveringstopMotionCommandInfo);
    Map<String, CommandParameterInfo> windowCoveringupOrOpenCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    // PLEASE UPDATE LATER: fill out parameter types
    CommandParameterInfo windowCoveringupOrOpenCommandParameterInfo =
        new CommandParameterInfo("WindowCovering", ChipClusters.DefaultClusterCallback.class);
    // Populate commands
    CommandInfo windowCoveringupOrOpenCommandInfo =
        new CommandInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .upOrOpen((DefaultClusterCallback) callback);
            },
            () -> new DelegatedDefaultClusterCallback(),
            windowCoveringupOrOpenCommandParams);
    windowCoveringClusterCommandInfoMap.put("upOrOpen", windowCoveringupOrOpenCommandInfo);
    // Populate cluster
    ClusterInfo windowCoveringClusterInfo =
        new ClusterInfo(
            (ptr, endpointId) -> new ChipClusters.WindowCoveringCluster(ptr, endpointId),
            windowCoveringClusterCommandInfoMap);
    clusterMap.put("windowCovering", windowCoveringClusterInfo);
    return clusterMap;
=======
import chip.clusterinfo.ClusterInfo;
import chip.clusterinfo.CommandInfo;
import chip.clusterinfo.CommandParameter;
import java.util.*;

public class ClusterInfoMapping {

  public Map<String, ClusterInfo> getClusterMap() {
    Map<String, ClusterInfo> clusterInfoMapping = new HashMap<>();
    ClusterInfo accountLogin_clusterInfo = new ClusterInfo("accountLogin");
    List<CommandParameter> accountLogin_getSetupPIN_parametersList = new ArrayList<>();
    CommandInfo accountLogin_getSetupPIN_commandInfo = new CommandInfo();
    accountLogin_getSetupPIN_commandInfo.name = "getSetupPIN";
    accountLogin_getSetupPIN_commandInfo.callbackClass =
        ChipClusters.AccountLoginCluster.GetSetupPINResponseCallback.class;
    CommandParameter getSetupPIN_tempAccountIdentifier_commandParameter =
        new CommandParameter("tempAccountIdentifier", String.class);
    accountLogin_getSetupPIN_parametersList.add(getSetupPIN_tempAccountIdentifier_commandParameter);

    accountLogin_getSetupPIN_commandInfo.parameters = accountLogin_getSetupPIN_parametersList;
    accountLogin_clusterInfo.commands.add(accountLogin_getSetupPIN_commandInfo);
    List<CommandParameter> accountLogin_login_parametersList = new ArrayList<>();
    CommandInfo accountLogin_login_commandInfo = new CommandInfo();
    accountLogin_login_commandInfo.name = "login";
    accountLogin_login_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter login_tempAccountIdentifier_commandParameter =
        new CommandParameter("tempAccountIdentifier", String.class);
    accountLogin_login_parametersList.add(login_tempAccountIdentifier_commandParameter);

    CommandParameter login_setupPIN_commandParameter =
        new CommandParameter("setupPIN", String.class);
    accountLogin_login_parametersList.add(login_setupPIN_commandParameter);

    accountLogin_login_commandInfo.parameters = accountLogin_login_parametersList;
    accountLogin_clusterInfo.commands.add(accountLogin_login_commandInfo);
    clusterInfoMapping.put("accountLogin", accountLogin_clusterInfo);
    ClusterInfo administratorCommissioning_clusterInfo =
        new ClusterInfo("administratorCommissioning");
    List<CommandParameter> administratorCommissioning_openBasicCommissioningWindow_parametersList =
        new ArrayList<>();
    CommandInfo administratorCommissioning_openBasicCommissioningWindow_commandInfo =
        new CommandInfo();
    administratorCommissioning_openBasicCommissioningWindow_commandInfo.name =
        "openBasicCommissioningWindow";
    administratorCommissioning_openBasicCommissioningWindow_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter openBasicCommissioningWindow_commissioningTimeout_commandParameter =
        new CommandParameter("commissioningTimeout", int.class);
    administratorCommissioning_openBasicCommissioningWindow_parametersList.add(
        openBasicCommissioningWindow_commissioningTimeout_commandParameter);

    administratorCommissioning_openBasicCommissioningWindow_commandInfo.parameters =
        administratorCommissioning_openBasicCommissioningWindow_parametersList;
    administratorCommissioning_clusterInfo.commands.add(
        administratorCommissioning_openBasicCommissioningWindow_commandInfo);
    List<CommandParameter> administratorCommissioning_openCommissioningWindow_parametersList =
        new ArrayList<>();
    CommandInfo administratorCommissioning_openCommissioningWindow_commandInfo = new CommandInfo();
    administratorCommissioning_openCommissioningWindow_commandInfo.name = "openCommissioningWindow";
    administratorCommissioning_openCommissioningWindow_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter openCommissioningWindow_commissioningTimeout_commandParameter =
        new CommandParameter("commissioningTimeout", int.class);
    administratorCommissioning_openCommissioningWindow_parametersList.add(
        openCommissioningWindow_commissioningTimeout_commandParameter);

    CommandParameter openCommissioningWindow_PAKEVerifier_commandParameter =
        new CommandParameter("PAKEVerifier", byte[].class);
    administratorCommissioning_openCommissioningWindow_parametersList.add(
        openCommissioningWindow_PAKEVerifier_commandParameter);

    CommandParameter openCommissioningWindow_discriminator_commandParameter =
        new CommandParameter("discriminator", int.class);
    administratorCommissioning_openCommissioningWindow_parametersList.add(
        openCommissioningWindow_discriminator_commandParameter);

    CommandParameter openCommissioningWindow_iterations_commandParameter =
        new CommandParameter("iterations", long.class);
    administratorCommissioning_openCommissioningWindow_parametersList.add(
        openCommissioningWindow_iterations_commandParameter);

    CommandParameter openCommissioningWindow_salt_commandParameter =
        new CommandParameter("salt", byte[].class);
    administratorCommissioning_openCommissioningWindow_parametersList.add(
        openCommissioningWindow_salt_commandParameter);

    CommandParameter openCommissioningWindow_passcodeID_commandParameter =
        new CommandParameter("passcodeID", int.class);
    administratorCommissioning_openCommissioningWindow_parametersList.add(
        openCommissioningWindow_passcodeID_commandParameter);

    administratorCommissioning_openCommissioningWindow_commandInfo.parameters =
        administratorCommissioning_openCommissioningWindow_parametersList;
    administratorCommissioning_clusterInfo.commands.add(
        administratorCommissioning_openCommissioningWindow_commandInfo);
    List<CommandParameter> administratorCommissioning_revokeCommissioning_parametersList =
        new ArrayList<>();
    CommandInfo administratorCommissioning_revokeCommissioning_commandInfo = new CommandInfo();
    administratorCommissioning_revokeCommissioning_commandInfo.name = "revokeCommissioning";
    administratorCommissioning_revokeCommissioning_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    administratorCommissioning_revokeCommissioning_commandInfo.parameters =
        administratorCommissioning_revokeCommissioning_parametersList;
    administratorCommissioning_clusterInfo.commands.add(
        administratorCommissioning_revokeCommissioning_commandInfo);
    clusterInfoMapping.put("administratorCommissioning", administratorCommissioning_clusterInfo);
    ClusterInfo applicationBasic_clusterInfo = new ClusterInfo("applicationBasic");
    List<CommandParameter> applicationBasic_changeStatus_parametersList = new ArrayList<>();
    CommandInfo applicationBasic_changeStatus_commandInfo = new CommandInfo();
    applicationBasic_changeStatus_commandInfo.name = "changeStatus";
    applicationBasic_changeStatus_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter changeStatus_status_commandParameter =
        new CommandParameter("status", int.class);
    applicationBasic_changeStatus_parametersList.add(changeStatus_status_commandParameter);

    applicationBasic_changeStatus_commandInfo.parameters =
        applicationBasic_changeStatus_parametersList;
    applicationBasic_clusterInfo.commands.add(applicationBasic_changeStatus_commandInfo);
    clusterInfoMapping.put("applicationBasic", applicationBasic_clusterInfo);
    ClusterInfo applicationLauncher_clusterInfo = new ClusterInfo("applicationLauncher");
    List<CommandParameter> applicationLauncher_launchApp_parametersList = new ArrayList<>();
    CommandInfo applicationLauncher_launchApp_commandInfo = new CommandInfo();
    applicationLauncher_launchApp_commandInfo.name = "launchApp";
    applicationLauncher_launchApp_commandInfo.callbackClass =
        ChipClusters.ApplicationLauncherCluster.LaunchAppResponseCallback.class;
    CommandParameter launchApp_data_commandParameter = new CommandParameter("data", String.class);
    applicationLauncher_launchApp_parametersList.add(launchApp_data_commandParameter);

    CommandParameter launchApp_catalogVendorId_commandParameter =
        new CommandParameter("catalogVendorId", int.class);
    applicationLauncher_launchApp_parametersList.add(launchApp_catalogVendorId_commandParameter);

    CommandParameter launchApp_applicationId_commandParameter =
        new CommandParameter("applicationId", String.class);
    applicationLauncher_launchApp_parametersList.add(launchApp_applicationId_commandParameter);

    applicationLauncher_launchApp_commandInfo.parameters =
        applicationLauncher_launchApp_parametersList;
    applicationLauncher_clusterInfo.commands.add(applicationLauncher_launchApp_commandInfo);
    clusterInfoMapping.put("applicationLauncher", applicationLauncher_clusterInfo);
    ClusterInfo audioOutput_clusterInfo = new ClusterInfo("audioOutput");
    List<CommandParameter> audioOutput_renameOutput_parametersList = new ArrayList<>();
    CommandInfo audioOutput_renameOutput_commandInfo = new CommandInfo();
    audioOutput_renameOutput_commandInfo.name = "renameOutput";
    audioOutput_renameOutput_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter renameOutput_index_commandParameter = new CommandParameter("index", int.class);
    audioOutput_renameOutput_parametersList.add(renameOutput_index_commandParameter);

    CommandParameter renameOutput_name_commandParameter =
        new CommandParameter("name", String.class);
    audioOutput_renameOutput_parametersList.add(renameOutput_name_commandParameter);

    audioOutput_renameOutput_commandInfo.parameters = audioOutput_renameOutput_parametersList;
    audioOutput_clusterInfo.commands.add(audioOutput_renameOutput_commandInfo);
    List<CommandParameter> audioOutput_selectOutput_parametersList = new ArrayList<>();
    CommandInfo audioOutput_selectOutput_commandInfo = new CommandInfo();
    audioOutput_selectOutput_commandInfo.name = "selectOutput";
    audioOutput_selectOutput_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter selectOutput_index_commandParameter = new CommandParameter("index", int.class);
    audioOutput_selectOutput_parametersList.add(selectOutput_index_commandParameter);

    audioOutput_selectOutput_commandInfo.parameters = audioOutput_selectOutput_parametersList;
    audioOutput_clusterInfo.commands.add(audioOutput_selectOutput_commandInfo);
    clusterInfoMapping.put("audioOutput", audioOutput_clusterInfo);
    ClusterInfo barrierControl_clusterInfo = new ClusterInfo("barrierControl");
    List<CommandParameter> barrierControl_barrierControlGoToPercent_parametersList =
        new ArrayList<>();
    CommandInfo barrierControl_barrierControlGoToPercent_commandInfo = new CommandInfo();
    barrierControl_barrierControlGoToPercent_commandInfo.name = "barrierControlGoToPercent";
    barrierControl_barrierControlGoToPercent_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter barrierControlGoToPercent_percentOpen_commandParameter =
        new CommandParameter("percentOpen", int.class);
    barrierControl_barrierControlGoToPercent_parametersList.add(
        barrierControlGoToPercent_percentOpen_commandParameter);

    barrierControl_barrierControlGoToPercent_commandInfo.parameters =
        barrierControl_barrierControlGoToPercent_parametersList;
    barrierControl_clusterInfo.commands.add(barrierControl_barrierControlGoToPercent_commandInfo);
    List<CommandParameter> barrierControl_barrierControlStop_parametersList = new ArrayList<>();
    CommandInfo barrierControl_barrierControlStop_commandInfo = new CommandInfo();
    barrierControl_barrierControlStop_commandInfo.name = "barrierControlStop";
    barrierControl_barrierControlStop_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    barrierControl_barrierControlStop_commandInfo.parameters =
        barrierControl_barrierControlStop_parametersList;
    barrierControl_clusterInfo.commands.add(barrierControl_barrierControlStop_commandInfo);
    clusterInfoMapping.put("barrierControl", barrierControl_clusterInfo);
    ClusterInfo basic_clusterInfo = new ClusterInfo("basic");
    List<CommandParameter> basic_mfgSpecificPing_parametersList = new ArrayList<>();
    CommandInfo basic_mfgSpecificPing_commandInfo = new CommandInfo();
    basic_mfgSpecificPing_commandInfo.name = "mfgSpecificPing";
    basic_mfgSpecificPing_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    basic_mfgSpecificPing_commandInfo.parameters = basic_mfgSpecificPing_parametersList;
    basic_clusterInfo.commands.add(basic_mfgSpecificPing_commandInfo);
    clusterInfoMapping.put("basic", basic_clusterInfo);
    ClusterInfo binaryInputBasic_clusterInfo = new ClusterInfo("binaryInputBasic");
    clusterInfoMapping.put("binaryInputBasic", binaryInputBasic_clusterInfo);
    ClusterInfo binding_clusterInfo = new ClusterInfo("binding");
    List<CommandParameter> binding_bind_parametersList = new ArrayList<>();
    CommandInfo binding_bind_commandInfo = new CommandInfo();
    binding_bind_commandInfo.name = "bind";
    binding_bind_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter bind_nodeId_commandParameter = new CommandParameter("nodeId", long.class);
    binding_bind_parametersList.add(bind_nodeId_commandParameter);

    CommandParameter bind_groupId_commandParameter = new CommandParameter("groupId", int.class);
    binding_bind_parametersList.add(bind_groupId_commandParameter);

    CommandParameter bind_endpointId_commandParameter =
        new CommandParameter("endpointId", int.class);
    binding_bind_parametersList.add(bind_endpointId_commandParameter);

    CommandParameter bind_clusterId_commandParameter =
        new CommandParameter("clusterId", long.class);
    binding_bind_parametersList.add(bind_clusterId_commandParameter);

    binding_bind_commandInfo.parameters = binding_bind_parametersList;
    binding_clusterInfo.commands.add(binding_bind_commandInfo);
    List<CommandParameter> binding_unbind_parametersList = new ArrayList<>();
    CommandInfo binding_unbind_commandInfo = new CommandInfo();
    binding_unbind_commandInfo.name = "unbind";
    binding_unbind_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter unbind_nodeId_commandParameter = new CommandParameter("nodeId", long.class);
    binding_unbind_parametersList.add(unbind_nodeId_commandParameter);

    CommandParameter unbind_groupId_commandParameter = new CommandParameter("groupId", int.class);
    binding_unbind_parametersList.add(unbind_groupId_commandParameter);

    CommandParameter unbind_endpointId_commandParameter =
        new CommandParameter("endpointId", int.class);
    binding_unbind_parametersList.add(unbind_endpointId_commandParameter);

    CommandParameter unbind_clusterId_commandParameter =
        new CommandParameter("clusterId", long.class);
    binding_unbind_parametersList.add(unbind_clusterId_commandParameter);

    binding_unbind_commandInfo.parameters = binding_unbind_parametersList;
    binding_clusterInfo.commands.add(binding_unbind_commandInfo);
    clusterInfoMapping.put("binding", binding_clusterInfo);
    ClusterInfo bridgedDeviceBasic_clusterInfo = new ClusterInfo("bridgedDeviceBasic");
    clusterInfoMapping.put("bridgedDeviceBasic", bridgedDeviceBasic_clusterInfo);
    ClusterInfo colorControl_clusterInfo = new ClusterInfo("colorControl");
    List<CommandParameter> colorControl_colorLoopSet_parametersList = new ArrayList<>();
    CommandInfo colorControl_colorLoopSet_commandInfo = new CommandInfo();
    colorControl_colorLoopSet_commandInfo.name = "colorLoopSet";
    colorControl_colorLoopSet_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter colorLoopSet_updateFlags_commandParameter =
        new CommandParameter("updateFlags", int.class);
    colorControl_colorLoopSet_parametersList.add(colorLoopSet_updateFlags_commandParameter);

    CommandParameter colorLoopSet_action_commandParameter =
        new CommandParameter("action", int.class);
    colorControl_colorLoopSet_parametersList.add(colorLoopSet_action_commandParameter);

    CommandParameter colorLoopSet_direction_commandParameter =
        new CommandParameter("direction", int.class);
    colorControl_colorLoopSet_parametersList.add(colorLoopSet_direction_commandParameter);

    CommandParameter colorLoopSet_time_commandParameter = new CommandParameter("time", int.class);
    colorControl_colorLoopSet_parametersList.add(colorLoopSet_time_commandParameter);

    CommandParameter colorLoopSet_startHue_commandParameter =
        new CommandParameter("startHue", int.class);
    colorControl_colorLoopSet_parametersList.add(colorLoopSet_startHue_commandParameter);

    CommandParameter colorLoopSet_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_colorLoopSet_parametersList.add(colorLoopSet_optionsMask_commandParameter);

    CommandParameter colorLoopSet_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_colorLoopSet_parametersList.add(colorLoopSet_optionsOverride_commandParameter);

    colorControl_colorLoopSet_commandInfo.parameters = colorControl_colorLoopSet_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_colorLoopSet_commandInfo);
    List<CommandParameter> colorControl_enhancedMoveHue_parametersList = new ArrayList<>();
    CommandInfo colorControl_enhancedMoveHue_commandInfo = new CommandInfo();
    colorControl_enhancedMoveHue_commandInfo.name = "enhancedMoveHue";
    colorControl_enhancedMoveHue_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter enhancedMoveHue_moveMode_commandParameter =
        new CommandParameter("moveMode", int.class);
    colorControl_enhancedMoveHue_parametersList.add(enhancedMoveHue_moveMode_commandParameter);

    CommandParameter enhancedMoveHue_rate_commandParameter =
        new CommandParameter("rate", int.class);
    colorControl_enhancedMoveHue_parametersList.add(enhancedMoveHue_rate_commandParameter);

    CommandParameter enhancedMoveHue_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_enhancedMoveHue_parametersList.add(enhancedMoveHue_optionsMask_commandParameter);

    CommandParameter enhancedMoveHue_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_enhancedMoveHue_parametersList.add(
        enhancedMoveHue_optionsOverride_commandParameter);

    colorControl_enhancedMoveHue_commandInfo.parameters =
        colorControl_enhancedMoveHue_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_enhancedMoveHue_commandInfo);
    List<CommandParameter> colorControl_enhancedMoveToHue_parametersList = new ArrayList<>();
    CommandInfo colorControl_enhancedMoveToHue_commandInfo = new CommandInfo();
    colorControl_enhancedMoveToHue_commandInfo.name = "enhancedMoveToHue";
    colorControl_enhancedMoveToHue_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter enhancedMoveToHue_enhancedHue_commandParameter =
        new CommandParameter("enhancedHue", int.class);
    colorControl_enhancedMoveToHue_parametersList.add(
        enhancedMoveToHue_enhancedHue_commandParameter);

    CommandParameter enhancedMoveToHue_direction_commandParameter =
        new CommandParameter("direction", int.class);
    colorControl_enhancedMoveToHue_parametersList.add(enhancedMoveToHue_direction_commandParameter);

    CommandParameter enhancedMoveToHue_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControl_enhancedMoveToHue_parametersList.add(
        enhancedMoveToHue_transitionTime_commandParameter);

    CommandParameter enhancedMoveToHue_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_enhancedMoveToHue_parametersList.add(
        enhancedMoveToHue_optionsMask_commandParameter);

    CommandParameter enhancedMoveToHue_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_enhancedMoveToHue_parametersList.add(
        enhancedMoveToHue_optionsOverride_commandParameter);

    colorControl_enhancedMoveToHue_commandInfo.parameters =
        colorControl_enhancedMoveToHue_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_enhancedMoveToHue_commandInfo);
    List<CommandParameter> colorControl_enhancedMoveToHueAndSaturation_parametersList =
        new ArrayList<>();
    CommandInfo colorControl_enhancedMoveToHueAndSaturation_commandInfo = new CommandInfo();
    colorControl_enhancedMoveToHueAndSaturation_commandInfo.name = "enhancedMoveToHueAndSaturation";
    colorControl_enhancedMoveToHueAndSaturation_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter enhancedMoveToHueAndSaturation_enhancedHue_commandParameter =
        new CommandParameter("enhancedHue", int.class);
    colorControl_enhancedMoveToHueAndSaturation_parametersList.add(
        enhancedMoveToHueAndSaturation_enhancedHue_commandParameter);

    CommandParameter enhancedMoveToHueAndSaturation_saturation_commandParameter =
        new CommandParameter("saturation", int.class);
    colorControl_enhancedMoveToHueAndSaturation_parametersList.add(
        enhancedMoveToHueAndSaturation_saturation_commandParameter);

    CommandParameter enhancedMoveToHueAndSaturation_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControl_enhancedMoveToHueAndSaturation_parametersList.add(
        enhancedMoveToHueAndSaturation_transitionTime_commandParameter);

    CommandParameter enhancedMoveToHueAndSaturation_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_enhancedMoveToHueAndSaturation_parametersList.add(
        enhancedMoveToHueAndSaturation_optionsMask_commandParameter);

    CommandParameter enhancedMoveToHueAndSaturation_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_enhancedMoveToHueAndSaturation_parametersList.add(
        enhancedMoveToHueAndSaturation_optionsOverride_commandParameter);

    colorControl_enhancedMoveToHueAndSaturation_commandInfo.parameters =
        colorControl_enhancedMoveToHueAndSaturation_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_enhancedMoveToHueAndSaturation_commandInfo);
    List<CommandParameter> colorControl_enhancedStepHue_parametersList = new ArrayList<>();
    CommandInfo colorControl_enhancedStepHue_commandInfo = new CommandInfo();
    colorControl_enhancedStepHue_commandInfo.name = "enhancedStepHue";
    colorControl_enhancedStepHue_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter enhancedStepHue_stepMode_commandParameter =
        new CommandParameter("stepMode", int.class);
    colorControl_enhancedStepHue_parametersList.add(enhancedStepHue_stepMode_commandParameter);

    CommandParameter enhancedStepHue_stepSize_commandParameter =
        new CommandParameter("stepSize", int.class);
    colorControl_enhancedStepHue_parametersList.add(enhancedStepHue_stepSize_commandParameter);

    CommandParameter enhancedStepHue_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControl_enhancedStepHue_parametersList.add(
        enhancedStepHue_transitionTime_commandParameter);

    CommandParameter enhancedStepHue_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_enhancedStepHue_parametersList.add(enhancedStepHue_optionsMask_commandParameter);

    CommandParameter enhancedStepHue_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_enhancedStepHue_parametersList.add(
        enhancedStepHue_optionsOverride_commandParameter);

    colorControl_enhancedStepHue_commandInfo.parameters =
        colorControl_enhancedStepHue_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_enhancedStepHue_commandInfo);
    List<CommandParameter> colorControl_moveColor_parametersList = new ArrayList<>();
    CommandInfo colorControl_moveColor_commandInfo = new CommandInfo();
    colorControl_moveColor_commandInfo.name = "moveColor";
    colorControl_moveColor_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter moveColor_rateX_commandParameter = new CommandParameter("rateX", int.class);
    colorControl_moveColor_parametersList.add(moveColor_rateX_commandParameter);

    CommandParameter moveColor_rateY_commandParameter = new CommandParameter("rateY", int.class);
    colorControl_moveColor_parametersList.add(moveColor_rateY_commandParameter);

    CommandParameter moveColor_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_moveColor_parametersList.add(moveColor_optionsMask_commandParameter);

    CommandParameter moveColor_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_moveColor_parametersList.add(moveColor_optionsOverride_commandParameter);

    colorControl_moveColor_commandInfo.parameters = colorControl_moveColor_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_moveColor_commandInfo);
    List<CommandParameter> colorControl_moveColorTemperature_parametersList = new ArrayList<>();
    CommandInfo colorControl_moveColorTemperature_commandInfo = new CommandInfo();
    colorControl_moveColorTemperature_commandInfo.name = "moveColorTemperature";
    colorControl_moveColorTemperature_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter moveColorTemperature_moveMode_commandParameter =
        new CommandParameter("moveMode", int.class);
    colorControl_moveColorTemperature_parametersList.add(
        moveColorTemperature_moveMode_commandParameter);

    CommandParameter moveColorTemperature_rate_commandParameter =
        new CommandParameter("rate", int.class);
    colorControl_moveColorTemperature_parametersList.add(
        moveColorTemperature_rate_commandParameter);

    CommandParameter moveColorTemperature_colorTemperatureMinimum_commandParameter =
        new CommandParameter("colorTemperatureMinimum", int.class);
    colorControl_moveColorTemperature_parametersList.add(
        moveColorTemperature_colorTemperatureMinimum_commandParameter);

    CommandParameter moveColorTemperature_colorTemperatureMaximum_commandParameter =
        new CommandParameter("colorTemperatureMaximum", int.class);
    colorControl_moveColorTemperature_parametersList.add(
        moveColorTemperature_colorTemperatureMaximum_commandParameter);

    CommandParameter moveColorTemperature_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_moveColorTemperature_parametersList.add(
        moveColorTemperature_optionsMask_commandParameter);

    CommandParameter moveColorTemperature_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_moveColorTemperature_parametersList.add(
        moveColorTemperature_optionsOverride_commandParameter);

    colorControl_moveColorTemperature_commandInfo.parameters =
        colorControl_moveColorTemperature_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_moveColorTemperature_commandInfo);
    List<CommandParameter> colorControl_moveHue_parametersList = new ArrayList<>();
    CommandInfo colorControl_moveHue_commandInfo = new CommandInfo();
    colorControl_moveHue_commandInfo.name = "moveHue";
    colorControl_moveHue_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter moveHue_moveMode_commandParameter =
        new CommandParameter("moveMode", int.class);
    colorControl_moveHue_parametersList.add(moveHue_moveMode_commandParameter);

    CommandParameter moveHue_rate_commandParameter = new CommandParameter("rate", int.class);
    colorControl_moveHue_parametersList.add(moveHue_rate_commandParameter);

    CommandParameter moveHue_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_moveHue_parametersList.add(moveHue_optionsMask_commandParameter);

    CommandParameter moveHue_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_moveHue_parametersList.add(moveHue_optionsOverride_commandParameter);

    colorControl_moveHue_commandInfo.parameters = colorControl_moveHue_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_moveHue_commandInfo);
    List<CommandParameter> colorControl_moveSaturation_parametersList = new ArrayList<>();
    CommandInfo colorControl_moveSaturation_commandInfo = new CommandInfo();
    colorControl_moveSaturation_commandInfo.name = "moveSaturation";
    colorControl_moveSaturation_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter moveSaturation_moveMode_commandParameter =
        new CommandParameter("moveMode", int.class);
    colorControl_moveSaturation_parametersList.add(moveSaturation_moveMode_commandParameter);

    CommandParameter moveSaturation_rate_commandParameter = new CommandParameter("rate", int.class);
    colorControl_moveSaturation_parametersList.add(moveSaturation_rate_commandParameter);

    CommandParameter moveSaturation_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_moveSaturation_parametersList.add(moveSaturation_optionsMask_commandParameter);

    CommandParameter moveSaturation_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_moveSaturation_parametersList.add(moveSaturation_optionsOverride_commandParameter);

    colorControl_moveSaturation_commandInfo.parameters = colorControl_moveSaturation_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_moveSaturation_commandInfo);
    List<CommandParameter> colorControl_moveToColor_parametersList = new ArrayList<>();
    CommandInfo colorControl_moveToColor_commandInfo = new CommandInfo();
    colorControl_moveToColor_commandInfo.name = "moveToColor";
    colorControl_moveToColor_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter moveToColor_colorX_commandParameter =
        new CommandParameter("colorX", int.class);
    colorControl_moveToColor_parametersList.add(moveToColor_colorX_commandParameter);

    CommandParameter moveToColor_colorY_commandParameter =
        new CommandParameter("colorY", int.class);
    colorControl_moveToColor_parametersList.add(moveToColor_colorY_commandParameter);

    CommandParameter moveToColor_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControl_moveToColor_parametersList.add(moveToColor_transitionTime_commandParameter);

    CommandParameter moveToColor_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_moveToColor_parametersList.add(moveToColor_optionsMask_commandParameter);

    CommandParameter moveToColor_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_moveToColor_parametersList.add(moveToColor_optionsOverride_commandParameter);

    colorControl_moveToColor_commandInfo.parameters = colorControl_moveToColor_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_moveToColor_commandInfo);
    List<CommandParameter> colorControl_moveToColorTemperature_parametersList = new ArrayList<>();
    CommandInfo colorControl_moveToColorTemperature_commandInfo = new CommandInfo();
    colorControl_moveToColorTemperature_commandInfo.name = "moveToColorTemperature";
    colorControl_moveToColorTemperature_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter moveToColorTemperature_colorTemperature_commandParameter =
        new CommandParameter("colorTemperature", int.class);
    colorControl_moveToColorTemperature_parametersList.add(
        moveToColorTemperature_colorTemperature_commandParameter);

    CommandParameter moveToColorTemperature_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControl_moveToColorTemperature_parametersList.add(
        moveToColorTemperature_transitionTime_commandParameter);

    CommandParameter moveToColorTemperature_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_moveToColorTemperature_parametersList.add(
        moveToColorTemperature_optionsMask_commandParameter);

    CommandParameter moveToColorTemperature_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_moveToColorTemperature_parametersList.add(
        moveToColorTemperature_optionsOverride_commandParameter);

    colorControl_moveToColorTemperature_commandInfo.parameters =
        colorControl_moveToColorTemperature_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_moveToColorTemperature_commandInfo);
    List<CommandParameter> colorControl_moveToHue_parametersList = new ArrayList<>();
    CommandInfo colorControl_moveToHue_commandInfo = new CommandInfo();
    colorControl_moveToHue_commandInfo.name = "moveToHue";
    colorControl_moveToHue_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter moveToHue_hue_commandParameter = new CommandParameter("hue", int.class);
    colorControl_moveToHue_parametersList.add(moveToHue_hue_commandParameter);

    CommandParameter moveToHue_direction_commandParameter =
        new CommandParameter("direction", int.class);
    colorControl_moveToHue_parametersList.add(moveToHue_direction_commandParameter);

    CommandParameter moveToHue_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControl_moveToHue_parametersList.add(moveToHue_transitionTime_commandParameter);

    CommandParameter moveToHue_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_moveToHue_parametersList.add(moveToHue_optionsMask_commandParameter);

    CommandParameter moveToHue_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_moveToHue_parametersList.add(moveToHue_optionsOverride_commandParameter);

    colorControl_moveToHue_commandInfo.parameters = colorControl_moveToHue_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_moveToHue_commandInfo);
    List<CommandParameter> colorControl_moveToHueAndSaturation_parametersList = new ArrayList<>();
    CommandInfo colorControl_moveToHueAndSaturation_commandInfo = new CommandInfo();
    colorControl_moveToHueAndSaturation_commandInfo.name = "moveToHueAndSaturation";
    colorControl_moveToHueAndSaturation_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter moveToHueAndSaturation_hue_commandParameter =
        new CommandParameter("hue", int.class);
    colorControl_moveToHueAndSaturation_parametersList.add(
        moveToHueAndSaturation_hue_commandParameter);

    CommandParameter moveToHueAndSaturation_saturation_commandParameter =
        new CommandParameter("saturation", int.class);
    colorControl_moveToHueAndSaturation_parametersList.add(
        moveToHueAndSaturation_saturation_commandParameter);

    CommandParameter moveToHueAndSaturation_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControl_moveToHueAndSaturation_parametersList.add(
        moveToHueAndSaturation_transitionTime_commandParameter);

    CommandParameter moveToHueAndSaturation_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_moveToHueAndSaturation_parametersList.add(
        moveToHueAndSaturation_optionsMask_commandParameter);

    CommandParameter moveToHueAndSaturation_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_moveToHueAndSaturation_parametersList.add(
        moveToHueAndSaturation_optionsOverride_commandParameter);

    colorControl_moveToHueAndSaturation_commandInfo.parameters =
        colorControl_moveToHueAndSaturation_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_moveToHueAndSaturation_commandInfo);
    List<CommandParameter> colorControl_moveToSaturation_parametersList = new ArrayList<>();
    CommandInfo colorControl_moveToSaturation_commandInfo = new CommandInfo();
    colorControl_moveToSaturation_commandInfo.name = "moveToSaturation";
    colorControl_moveToSaturation_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter moveToSaturation_saturation_commandParameter =
        new CommandParameter("saturation", int.class);
    colorControl_moveToSaturation_parametersList.add(moveToSaturation_saturation_commandParameter);

    CommandParameter moveToSaturation_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControl_moveToSaturation_parametersList.add(
        moveToSaturation_transitionTime_commandParameter);

    CommandParameter moveToSaturation_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_moveToSaturation_parametersList.add(moveToSaturation_optionsMask_commandParameter);

    CommandParameter moveToSaturation_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_moveToSaturation_parametersList.add(
        moveToSaturation_optionsOverride_commandParameter);

    colorControl_moveToSaturation_commandInfo.parameters =
        colorControl_moveToSaturation_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_moveToSaturation_commandInfo);
    List<CommandParameter> colorControl_stepColor_parametersList = new ArrayList<>();
    CommandInfo colorControl_stepColor_commandInfo = new CommandInfo();
    colorControl_stepColor_commandInfo.name = "stepColor";
    colorControl_stepColor_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter stepColor_stepX_commandParameter = new CommandParameter("stepX", int.class);
    colorControl_stepColor_parametersList.add(stepColor_stepX_commandParameter);

    CommandParameter stepColor_stepY_commandParameter = new CommandParameter("stepY", int.class);
    colorControl_stepColor_parametersList.add(stepColor_stepY_commandParameter);

    CommandParameter stepColor_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControl_stepColor_parametersList.add(stepColor_transitionTime_commandParameter);

    CommandParameter stepColor_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_stepColor_parametersList.add(stepColor_optionsMask_commandParameter);

    CommandParameter stepColor_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_stepColor_parametersList.add(stepColor_optionsOverride_commandParameter);

    colorControl_stepColor_commandInfo.parameters = colorControl_stepColor_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_stepColor_commandInfo);
    List<CommandParameter> colorControl_stepColorTemperature_parametersList = new ArrayList<>();
    CommandInfo colorControl_stepColorTemperature_commandInfo = new CommandInfo();
    colorControl_stepColorTemperature_commandInfo.name = "stepColorTemperature";
    colorControl_stepColorTemperature_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter stepColorTemperature_stepMode_commandParameter =
        new CommandParameter("stepMode", int.class);
    colorControl_stepColorTemperature_parametersList.add(
        stepColorTemperature_stepMode_commandParameter);

    CommandParameter stepColorTemperature_stepSize_commandParameter =
        new CommandParameter("stepSize", int.class);
    colorControl_stepColorTemperature_parametersList.add(
        stepColorTemperature_stepSize_commandParameter);

    CommandParameter stepColorTemperature_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControl_stepColorTemperature_parametersList.add(
        stepColorTemperature_transitionTime_commandParameter);

    CommandParameter stepColorTemperature_colorTemperatureMinimum_commandParameter =
        new CommandParameter("colorTemperatureMinimum", int.class);
    colorControl_stepColorTemperature_parametersList.add(
        stepColorTemperature_colorTemperatureMinimum_commandParameter);

    CommandParameter stepColorTemperature_colorTemperatureMaximum_commandParameter =
        new CommandParameter("colorTemperatureMaximum", int.class);
    colorControl_stepColorTemperature_parametersList.add(
        stepColorTemperature_colorTemperatureMaximum_commandParameter);

    CommandParameter stepColorTemperature_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_stepColorTemperature_parametersList.add(
        stepColorTemperature_optionsMask_commandParameter);

    CommandParameter stepColorTemperature_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_stepColorTemperature_parametersList.add(
        stepColorTemperature_optionsOverride_commandParameter);

    colorControl_stepColorTemperature_commandInfo.parameters =
        colorControl_stepColorTemperature_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_stepColorTemperature_commandInfo);
    List<CommandParameter> colorControl_stepHue_parametersList = new ArrayList<>();
    CommandInfo colorControl_stepHue_commandInfo = new CommandInfo();
    colorControl_stepHue_commandInfo.name = "stepHue";
    colorControl_stepHue_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter stepHue_stepMode_commandParameter =
        new CommandParameter("stepMode", int.class);
    colorControl_stepHue_parametersList.add(stepHue_stepMode_commandParameter);

    CommandParameter stepHue_stepSize_commandParameter =
        new CommandParameter("stepSize", int.class);
    colorControl_stepHue_parametersList.add(stepHue_stepSize_commandParameter);

    CommandParameter stepHue_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControl_stepHue_parametersList.add(stepHue_transitionTime_commandParameter);

    CommandParameter stepHue_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_stepHue_parametersList.add(stepHue_optionsMask_commandParameter);

    CommandParameter stepHue_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_stepHue_parametersList.add(stepHue_optionsOverride_commandParameter);

    colorControl_stepHue_commandInfo.parameters = colorControl_stepHue_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_stepHue_commandInfo);
    List<CommandParameter> colorControl_stepSaturation_parametersList = new ArrayList<>();
    CommandInfo colorControl_stepSaturation_commandInfo = new CommandInfo();
    colorControl_stepSaturation_commandInfo.name = "stepSaturation";
    colorControl_stepSaturation_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter stepSaturation_stepMode_commandParameter =
        new CommandParameter("stepMode", int.class);
    colorControl_stepSaturation_parametersList.add(stepSaturation_stepMode_commandParameter);

    CommandParameter stepSaturation_stepSize_commandParameter =
        new CommandParameter("stepSize", int.class);
    colorControl_stepSaturation_parametersList.add(stepSaturation_stepSize_commandParameter);

    CommandParameter stepSaturation_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    colorControl_stepSaturation_parametersList.add(stepSaturation_transitionTime_commandParameter);

    CommandParameter stepSaturation_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_stepSaturation_parametersList.add(stepSaturation_optionsMask_commandParameter);

    CommandParameter stepSaturation_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_stepSaturation_parametersList.add(stepSaturation_optionsOverride_commandParameter);

    colorControl_stepSaturation_commandInfo.parameters = colorControl_stepSaturation_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_stepSaturation_commandInfo);
    List<CommandParameter> colorControl_stopMoveStep_parametersList = new ArrayList<>();
    CommandInfo colorControl_stopMoveStep_commandInfo = new CommandInfo();
    colorControl_stopMoveStep_commandInfo.name = "stopMoveStep";
    colorControl_stopMoveStep_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter stopMoveStep_optionsMask_commandParameter =
        new CommandParameter("optionsMask", int.class);
    colorControl_stopMoveStep_parametersList.add(stopMoveStep_optionsMask_commandParameter);

    CommandParameter stopMoveStep_optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorControl_stopMoveStep_parametersList.add(stopMoveStep_optionsOverride_commandParameter);

    colorControl_stopMoveStep_commandInfo.parameters = colorControl_stopMoveStep_parametersList;
    colorControl_clusterInfo.commands.add(colorControl_stopMoveStep_commandInfo);
    clusterInfoMapping.put("colorControl", colorControl_clusterInfo);
    ClusterInfo contentLauncher_clusterInfo = new ClusterInfo("contentLauncher");
    List<CommandParameter> contentLauncher_launchContent_parametersList = new ArrayList<>();
    CommandInfo contentLauncher_launchContent_commandInfo = new CommandInfo();
    contentLauncher_launchContent_commandInfo.name = "launchContent";
    contentLauncher_launchContent_commandInfo.callbackClass =
        ChipClusters.ContentLauncherCluster.LaunchContentResponseCallback.class;
    CommandParameter launchContent_autoPlay_commandParameter =
        new CommandParameter("autoPlay", boolean.class);
    contentLauncher_launchContent_parametersList.add(launchContent_autoPlay_commandParameter);

    CommandParameter launchContent_data_commandParameter =
        new CommandParameter("data", String.class);
    contentLauncher_launchContent_parametersList.add(launchContent_data_commandParameter);

    contentLauncher_launchContent_commandInfo.parameters =
        contentLauncher_launchContent_parametersList;
    contentLauncher_clusterInfo.commands.add(contentLauncher_launchContent_commandInfo);
    List<CommandParameter> contentLauncher_launchURL_parametersList = new ArrayList<>();
    CommandInfo contentLauncher_launchURL_commandInfo = new CommandInfo();
    contentLauncher_launchURL_commandInfo.name = "launchURL";
    contentLauncher_launchURL_commandInfo.callbackClass =
        ChipClusters.ContentLauncherCluster.LaunchURLResponseCallback.class;
    CommandParameter launchURL_contentURL_commandParameter =
        new CommandParameter("contentURL", String.class);
    contentLauncher_launchURL_parametersList.add(launchURL_contentURL_commandParameter);

    CommandParameter launchURL_displayString_commandParameter =
        new CommandParameter("displayString", String.class);
    contentLauncher_launchURL_parametersList.add(launchURL_displayString_commandParameter);

    contentLauncher_launchURL_commandInfo.parameters = contentLauncher_launchURL_parametersList;
    contentLauncher_clusterInfo.commands.add(contentLauncher_launchURL_commandInfo);
    clusterInfoMapping.put("contentLauncher", contentLauncher_clusterInfo);
    ClusterInfo descriptor_clusterInfo = new ClusterInfo("descriptor");
    clusterInfoMapping.put("descriptor", descriptor_clusterInfo);
    ClusterInfo diagnosticLogs_clusterInfo = new ClusterInfo("diagnosticLogs");
    List<CommandParameter> diagnosticLogs_retrieveLogsRequest_parametersList = new ArrayList<>();
    CommandInfo diagnosticLogs_retrieveLogsRequest_commandInfo = new CommandInfo();
    diagnosticLogs_retrieveLogsRequest_commandInfo.name = "retrieveLogsRequest";
    diagnosticLogs_retrieveLogsRequest_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter retrieveLogsRequest_intent_commandParameter =
        new CommandParameter("intent", int.class);
    diagnosticLogs_retrieveLogsRequest_parametersList.add(
        retrieveLogsRequest_intent_commandParameter);

    CommandParameter retrieveLogsRequest_requestedProtocol_commandParameter =
        new CommandParameter("requestedProtocol", int.class);
    diagnosticLogs_retrieveLogsRequest_parametersList.add(
        retrieveLogsRequest_requestedProtocol_commandParameter);

    CommandParameter retrieveLogsRequest_transferFileDesignator_commandParameter =
        new CommandParameter("transferFileDesignator", byte[].class);
    diagnosticLogs_retrieveLogsRequest_parametersList.add(
        retrieveLogsRequest_transferFileDesignator_commandParameter);

    diagnosticLogs_retrieveLogsRequest_commandInfo.parameters =
        diagnosticLogs_retrieveLogsRequest_parametersList;
    diagnosticLogs_clusterInfo.commands.add(diagnosticLogs_retrieveLogsRequest_commandInfo);
    clusterInfoMapping.put("diagnosticLogs", diagnosticLogs_clusterInfo);
    ClusterInfo doorLock_clusterInfo = new ClusterInfo("doorLock");
    List<CommandParameter> doorLock_clearAllPins_parametersList = new ArrayList<>();
    CommandInfo doorLock_clearAllPins_commandInfo = new CommandInfo();
    doorLock_clearAllPins_commandInfo.name = "clearAllPins";
    doorLock_clearAllPins_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.ClearAllPinsResponseCallback.class;
    doorLock_clearAllPins_commandInfo.parameters = doorLock_clearAllPins_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_clearAllPins_commandInfo);
    List<CommandParameter> doorLock_clearAllRfids_parametersList = new ArrayList<>();
    CommandInfo doorLock_clearAllRfids_commandInfo = new CommandInfo();
    doorLock_clearAllRfids_commandInfo.name = "clearAllRfids";
    doorLock_clearAllRfids_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.ClearAllRfidsResponseCallback.class;
    doorLock_clearAllRfids_commandInfo.parameters = doorLock_clearAllRfids_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_clearAllRfids_commandInfo);
    List<CommandParameter> doorLock_clearHolidaySchedule_parametersList = new ArrayList<>();
    CommandInfo doorLock_clearHolidaySchedule_commandInfo = new CommandInfo();
    doorLock_clearHolidaySchedule_commandInfo.name = "clearHolidaySchedule";
    doorLock_clearHolidaySchedule_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.ClearHolidayScheduleResponseCallback.class;
    CommandParameter clearHolidaySchedule_scheduleId_commandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLock_clearHolidaySchedule_parametersList.add(
        clearHolidaySchedule_scheduleId_commandParameter);

    doorLock_clearHolidaySchedule_commandInfo.parameters =
        doorLock_clearHolidaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_clearHolidaySchedule_commandInfo);
    List<CommandParameter> doorLock_clearPin_parametersList = new ArrayList<>();
    CommandInfo doorLock_clearPin_commandInfo = new CommandInfo();
    doorLock_clearPin_commandInfo.name = "clearPin";
    doorLock_clearPin_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.ClearPinResponseCallback.class;
    CommandParameter clearPin_userId_commandParameter = new CommandParameter("userId", int.class);
    doorLock_clearPin_parametersList.add(clearPin_userId_commandParameter);

    doorLock_clearPin_commandInfo.parameters = doorLock_clearPin_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_clearPin_commandInfo);
    List<CommandParameter> doorLock_clearRfid_parametersList = new ArrayList<>();
    CommandInfo doorLock_clearRfid_commandInfo = new CommandInfo();
    doorLock_clearRfid_commandInfo.name = "clearRfid";
    doorLock_clearRfid_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.ClearRfidResponseCallback.class;
    CommandParameter clearRfid_userId_commandParameter = new CommandParameter("userId", int.class);
    doorLock_clearRfid_parametersList.add(clearRfid_userId_commandParameter);

    doorLock_clearRfid_commandInfo.parameters = doorLock_clearRfid_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_clearRfid_commandInfo);
    List<CommandParameter> doorLock_clearWeekdaySchedule_parametersList = new ArrayList<>();
    CommandInfo doorLock_clearWeekdaySchedule_commandInfo = new CommandInfo();
    doorLock_clearWeekdaySchedule_commandInfo.name = "clearWeekdaySchedule";
    doorLock_clearWeekdaySchedule_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.ClearWeekdayScheduleResponseCallback.class;
    CommandParameter clearWeekdaySchedule_scheduleId_commandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLock_clearWeekdaySchedule_parametersList.add(
        clearWeekdaySchedule_scheduleId_commandParameter);

    CommandParameter clearWeekdaySchedule_userId_commandParameter =
        new CommandParameter("userId", int.class);
    doorLock_clearWeekdaySchedule_parametersList.add(clearWeekdaySchedule_userId_commandParameter);

    doorLock_clearWeekdaySchedule_commandInfo.parameters =
        doorLock_clearWeekdaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_clearWeekdaySchedule_commandInfo);
    List<CommandParameter> doorLock_clearYeardaySchedule_parametersList = new ArrayList<>();
    CommandInfo doorLock_clearYeardaySchedule_commandInfo = new CommandInfo();
    doorLock_clearYeardaySchedule_commandInfo.name = "clearYeardaySchedule";
    doorLock_clearYeardaySchedule_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.ClearYeardayScheduleResponseCallback.class;
    CommandParameter clearYeardaySchedule_scheduleId_commandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLock_clearYeardaySchedule_parametersList.add(
        clearYeardaySchedule_scheduleId_commandParameter);

    CommandParameter clearYeardaySchedule_userId_commandParameter =
        new CommandParameter("userId", int.class);
    doorLock_clearYeardaySchedule_parametersList.add(clearYeardaySchedule_userId_commandParameter);

    doorLock_clearYeardaySchedule_commandInfo.parameters =
        doorLock_clearYeardaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_clearYeardaySchedule_commandInfo);
    List<CommandParameter> doorLock_getHolidaySchedule_parametersList = new ArrayList<>();
    CommandInfo doorLock_getHolidaySchedule_commandInfo = new CommandInfo();
    doorLock_getHolidaySchedule_commandInfo.name = "getHolidaySchedule";
    doorLock_getHolidaySchedule_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.GetHolidayScheduleResponseCallback.class;
    CommandParameter getHolidaySchedule_scheduleId_commandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLock_getHolidaySchedule_parametersList.add(getHolidaySchedule_scheduleId_commandParameter);

    doorLock_getHolidaySchedule_commandInfo.parameters = doorLock_getHolidaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_getHolidaySchedule_commandInfo);
    List<CommandParameter> doorLock_getLogRecord_parametersList = new ArrayList<>();
    CommandInfo doorLock_getLogRecord_commandInfo = new CommandInfo();
    doorLock_getLogRecord_commandInfo.name = "getLogRecord";
    doorLock_getLogRecord_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.GetLogRecordResponseCallback.class;
    CommandParameter getLogRecord_logIndex_commandParameter =
        new CommandParameter("logIndex", int.class);
    doorLock_getLogRecord_parametersList.add(getLogRecord_logIndex_commandParameter);

    doorLock_getLogRecord_commandInfo.parameters = doorLock_getLogRecord_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_getLogRecord_commandInfo);
    List<CommandParameter> doorLock_getPin_parametersList = new ArrayList<>();
    CommandInfo doorLock_getPin_commandInfo = new CommandInfo();
    doorLock_getPin_commandInfo.name = "getPin";
    doorLock_getPin_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.GetPinResponseCallback.class;
    CommandParameter getPin_userId_commandParameter = new CommandParameter("userId", int.class);
    doorLock_getPin_parametersList.add(getPin_userId_commandParameter);

    doorLock_getPin_commandInfo.parameters = doorLock_getPin_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_getPin_commandInfo);
    List<CommandParameter> doorLock_getRfid_parametersList = new ArrayList<>();
    CommandInfo doorLock_getRfid_commandInfo = new CommandInfo();
    doorLock_getRfid_commandInfo.name = "getRfid";
    doorLock_getRfid_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.GetRfidResponseCallback.class;
    CommandParameter getRfid_userId_commandParameter = new CommandParameter("userId", int.class);
    doorLock_getRfid_parametersList.add(getRfid_userId_commandParameter);

    doorLock_getRfid_commandInfo.parameters = doorLock_getRfid_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_getRfid_commandInfo);
    List<CommandParameter> doorLock_getUserType_parametersList = new ArrayList<>();
    CommandInfo doorLock_getUserType_commandInfo = new CommandInfo();
    doorLock_getUserType_commandInfo.name = "getUserType";
    doorLock_getUserType_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.GetUserTypeResponseCallback.class;
    CommandParameter getUserType_userId_commandParameter =
        new CommandParameter("userId", int.class);
    doorLock_getUserType_parametersList.add(getUserType_userId_commandParameter);

    doorLock_getUserType_commandInfo.parameters = doorLock_getUserType_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_getUserType_commandInfo);
    List<CommandParameter> doorLock_getWeekdaySchedule_parametersList = new ArrayList<>();
    CommandInfo doorLock_getWeekdaySchedule_commandInfo = new CommandInfo();
    doorLock_getWeekdaySchedule_commandInfo.name = "getWeekdaySchedule";
    doorLock_getWeekdaySchedule_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.GetWeekdayScheduleResponseCallback.class;
    CommandParameter getWeekdaySchedule_scheduleId_commandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLock_getWeekdaySchedule_parametersList.add(getWeekdaySchedule_scheduleId_commandParameter);

    CommandParameter getWeekdaySchedule_userId_commandParameter =
        new CommandParameter("userId", int.class);
    doorLock_getWeekdaySchedule_parametersList.add(getWeekdaySchedule_userId_commandParameter);

    doorLock_getWeekdaySchedule_commandInfo.parameters = doorLock_getWeekdaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_getWeekdaySchedule_commandInfo);
    List<CommandParameter> doorLock_getYeardaySchedule_parametersList = new ArrayList<>();
    CommandInfo doorLock_getYeardaySchedule_commandInfo = new CommandInfo();
    doorLock_getYeardaySchedule_commandInfo.name = "getYeardaySchedule";
    doorLock_getYeardaySchedule_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.GetYeardayScheduleResponseCallback.class;
    CommandParameter getYeardaySchedule_scheduleId_commandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLock_getYeardaySchedule_parametersList.add(getYeardaySchedule_scheduleId_commandParameter);

    CommandParameter getYeardaySchedule_userId_commandParameter =
        new CommandParameter("userId", int.class);
    doorLock_getYeardaySchedule_parametersList.add(getYeardaySchedule_userId_commandParameter);

    doorLock_getYeardaySchedule_commandInfo.parameters = doorLock_getYeardaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_getYeardaySchedule_commandInfo);
    List<CommandParameter> doorLock_lockDoor_parametersList = new ArrayList<>();
    CommandInfo doorLock_lockDoor_commandInfo = new CommandInfo();
    doorLock_lockDoor_commandInfo.name = "lockDoor";
    doorLock_lockDoor_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.LockDoorResponseCallback.class;
    CommandParameter lockDoor_pin_commandParameter = new CommandParameter("pin", byte[].class);
    doorLock_lockDoor_parametersList.add(lockDoor_pin_commandParameter);

    doorLock_lockDoor_commandInfo.parameters = doorLock_lockDoor_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_lockDoor_commandInfo);
    List<CommandParameter> doorLock_setHolidaySchedule_parametersList = new ArrayList<>();
    CommandInfo doorLock_setHolidaySchedule_commandInfo = new CommandInfo();
    doorLock_setHolidaySchedule_commandInfo.name = "setHolidaySchedule";
    doorLock_setHolidaySchedule_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.SetHolidayScheduleResponseCallback.class;
    CommandParameter setHolidaySchedule_scheduleId_commandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLock_setHolidaySchedule_parametersList.add(setHolidaySchedule_scheduleId_commandParameter);

    CommandParameter setHolidaySchedule_localStartTime_commandParameter =
        new CommandParameter("localStartTime", long.class);
    doorLock_setHolidaySchedule_parametersList.add(
        setHolidaySchedule_localStartTime_commandParameter);

    CommandParameter setHolidaySchedule_localEndTime_commandParameter =
        new CommandParameter("localEndTime", long.class);
    doorLock_setHolidaySchedule_parametersList.add(
        setHolidaySchedule_localEndTime_commandParameter);

    CommandParameter setHolidaySchedule_operatingModeDuringHoliday_commandParameter =
        new CommandParameter("operatingModeDuringHoliday", int.class);
    doorLock_setHolidaySchedule_parametersList.add(
        setHolidaySchedule_operatingModeDuringHoliday_commandParameter);

    doorLock_setHolidaySchedule_commandInfo.parameters = doorLock_setHolidaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_setHolidaySchedule_commandInfo);
    List<CommandParameter> doorLock_setPin_parametersList = new ArrayList<>();
    CommandInfo doorLock_setPin_commandInfo = new CommandInfo();
    doorLock_setPin_commandInfo.name = "setPin";
    doorLock_setPin_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.SetPinResponseCallback.class;
    CommandParameter setPin_userId_commandParameter = new CommandParameter("userId", int.class);
    doorLock_setPin_parametersList.add(setPin_userId_commandParameter);

    CommandParameter setPin_userStatus_commandParameter =
        new CommandParameter("userStatus", int.class);
    doorLock_setPin_parametersList.add(setPin_userStatus_commandParameter);

    CommandParameter setPin_userType_commandParameter = new CommandParameter("userType", int.class);
    doorLock_setPin_parametersList.add(setPin_userType_commandParameter);

    CommandParameter setPin_pin_commandParameter = new CommandParameter("pin", byte[].class);
    doorLock_setPin_parametersList.add(setPin_pin_commandParameter);

    doorLock_setPin_commandInfo.parameters = doorLock_setPin_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_setPin_commandInfo);
    List<CommandParameter> doorLock_setRfid_parametersList = new ArrayList<>();
    CommandInfo doorLock_setRfid_commandInfo = new CommandInfo();
    doorLock_setRfid_commandInfo.name = "setRfid";
    doorLock_setRfid_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.SetRfidResponseCallback.class;
    CommandParameter setRfid_userId_commandParameter = new CommandParameter("userId", int.class);
    doorLock_setRfid_parametersList.add(setRfid_userId_commandParameter);

    CommandParameter setRfid_userStatus_commandParameter =
        new CommandParameter("userStatus", int.class);
    doorLock_setRfid_parametersList.add(setRfid_userStatus_commandParameter);

    CommandParameter setRfid_userType_commandParameter =
        new CommandParameter("userType", int.class);
    doorLock_setRfid_parametersList.add(setRfid_userType_commandParameter);

    CommandParameter setRfid_id_commandParameter = new CommandParameter("id", byte[].class);
    doorLock_setRfid_parametersList.add(setRfid_id_commandParameter);

    doorLock_setRfid_commandInfo.parameters = doorLock_setRfid_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_setRfid_commandInfo);
    List<CommandParameter> doorLock_setUserType_parametersList = new ArrayList<>();
    CommandInfo doorLock_setUserType_commandInfo = new CommandInfo();
    doorLock_setUserType_commandInfo.name = "setUserType";
    doorLock_setUserType_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.SetUserTypeResponseCallback.class;
    CommandParameter setUserType_userId_commandParameter =
        new CommandParameter("userId", int.class);
    doorLock_setUserType_parametersList.add(setUserType_userId_commandParameter);

    CommandParameter setUserType_userType_commandParameter =
        new CommandParameter("userType", int.class);
    doorLock_setUserType_parametersList.add(setUserType_userType_commandParameter);

    doorLock_setUserType_commandInfo.parameters = doorLock_setUserType_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_setUserType_commandInfo);
    List<CommandParameter> doorLock_setWeekdaySchedule_parametersList = new ArrayList<>();
    CommandInfo doorLock_setWeekdaySchedule_commandInfo = new CommandInfo();
    doorLock_setWeekdaySchedule_commandInfo.name = "setWeekdaySchedule";
    doorLock_setWeekdaySchedule_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.SetWeekdayScheduleResponseCallback.class;
    CommandParameter setWeekdaySchedule_scheduleId_commandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLock_setWeekdaySchedule_parametersList.add(setWeekdaySchedule_scheduleId_commandParameter);

    CommandParameter setWeekdaySchedule_userId_commandParameter =
        new CommandParameter("userId", int.class);
    doorLock_setWeekdaySchedule_parametersList.add(setWeekdaySchedule_userId_commandParameter);

    CommandParameter setWeekdaySchedule_daysMask_commandParameter =
        new CommandParameter("daysMask", int.class);
    doorLock_setWeekdaySchedule_parametersList.add(setWeekdaySchedule_daysMask_commandParameter);

    CommandParameter setWeekdaySchedule_startHour_commandParameter =
        new CommandParameter("startHour", int.class);
    doorLock_setWeekdaySchedule_parametersList.add(setWeekdaySchedule_startHour_commandParameter);

    CommandParameter setWeekdaySchedule_startMinute_commandParameter =
        new CommandParameter("startMinute", int.class);
    doorLock_setWeekdaySchedule_parametersList.add(setWeekdaySchedule_startMinute_commandParameter);

    CommandParameter setWeekdaySchedule_endHour_commandParameter =
        new CommandParameter("endHour", int.class);
    doorLock_setWeekdaySchedule_parametersList.add(setWeekdaySchedule_endHour_commandParameter);

    CommandParameter setWeekdaySchedule_endMinute_commandParameter =
        new CommandParameter("endMinute", int.class);
    doorLock_setWeekdaySchedule_parametersList.add(setWeekdaySchedule_endMinute_commandParameter);

    doorLock_setWeekdaySchedule_commandInfo.parameters = doorLock_setWeekdaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_setWeekdaySchedule_commandInfo);
    List<CommandParameter> doorLock_setYeardaySchedule_parametersList = new ArrayList<>();
    CommandInfo doorLock_setYeardaySchedule_commandInfo = new CommandInfo();
    doorLock_setYeardaySchedule_commandInfo.name = "setYeardaySchedule";
    doorLock_setYeardaySchedule_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.SetYeardayScheduleResponseCallback.class;
    CommandParameter setYeardaySchedule_scheduleId_commandParameter =
        new CommandParameter("scheduleId", int.class);
    doorLock_setYeardaySchedule_parametersList.add(setYeardaySchedule_scheduleId_commandParameter);

    CommandParameter setYeardaySchedule_userId_commandParameter =
        new CommandParameter("userId", int.class);
    doorLock_setYeardaySchedule_parametersList.add(setYeardaySchedule_userId_commandParameter);

    CommandParameter setYeardaySchedule_localStartTime_commandParameter =
        new CommandParameter("localStartTime", long.class);
    doorLock_setYeardaySchedule_parametersList.add(
        setYeardaySchedule_localStartTime_commandParameter);

    CommandParameter setYeardaySchedule_localEndTime_commandParameter =
        new CommandParameter("localEndTime", long.class);
    doorLock_setYeardaySchedule_parametersList.add(
        setYeardaySchedule_localEndTime_commandParameter);

    doorLock_setYeardaySchedule_commandInfo.parameters = doorLock_setYeardaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_setYeardaySchedule_commandInfo);
    List<CommandParameter> doorLock_unlockDoor_parametersList = new ArrayList<>();
    CommandInfo doorLock_unlockDoor_commandInfo = new CommandInfo();
    doorLock_unlockDoor_commandInfo.name = "unlockDoor";
    doorLock_unlockDoor_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.UnlockDoorResponseCallback.class;
    CommandParameter unlockDoor_pin_commandParameter = new CommandParameter("pin", byte[].class);
    doorLock_unlockDoor_parametersList.add(unlockDoor_pin_commandParameter);

    doorLock_unlockDoor_commandInfo.parameters = doorLock_unlockDoor_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_unlockDoor_commandInfo);
    List<CommandParameter> doorLock_unlockWithTimeout_parametersList = new ArrayList<>();
    CommandInfo doorLock_unlockWithTimeout_commandInfo = new CommandInfo();
    doorLock_unlockWithTimeout_commandInfo.name = "unlockWithTimeout";
    doorLock_unlockWithTimeout_commandInfo.callbackClass =
        ChipClusters.DoorLockCluster.UnlockWithTimeoutResponseCallback.class;
    CommandParameter unlockWithTimeout_timeoutInSeconds_commandParameter =
        new CommandParameter("timeoutInSeconds", int.class);
    doorLock_unlockWithTimeout_parametersList.add(
        unlockWithTimeout_timeoutInSeconds_commandParameter);

    CommandParameter unlockWithTimeout_pin_commandParameter =
        new CommandParameter("pin", byte[].class);
    doorLock_unlockWithTimeout_parametersList.add(unlockWithTimeout_pin_commandParameter);

    doorLock_unlockWithTimeout_commandInfo.parameters = doorLock_unlockWithTimeout_parametersList;
    doorLock_clusterInfo.commands.add(doorLock_unlockWithTimeout_commandInfo);
    clusterInfoMapping.put("doorLock", doorLock_clusterInfo);
    ClusterInfo electricalMeasurement_clusterInfo = new ClusterInfo("electricalMeasurement");
    clusterInfoMapping.put("electricalMeasurement", electricalMeasurement_clusterInfo);
    ClusterInfo ethernetNetworkDiagnostics_clusterInfo =
        new ClusterInfo("ethernetNetworkDiagnostics");
    List<CommandParameter> ethernetNetworkDiagnostics_resetCounts_parametersList =
        new ArrayList<>();
    CommandInfo ethernetNetworkDiagnostics_resetCounts_commandInfo = new CommandInfo();
    ethernetNetworkDiagnostics_resetCounts_commandInfo.name = "resetCounts";
    ethernetNetworkDiagnostics_resetCounts_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    ethernetNetworkDiagnostics_resetCounts_commandInfo.parameters =
        ethernetNetworkDiagnostics_resetCounts_parametersList;
    ethernetNetworkDiagnostics_clusterInfo.commands.add(
        ethernetNetworkDiagnostics_resetCounts_commandInfo);
    clusterInfoMapping.put("ethernetNetworkDiagnostics", ethernetNetworkDiagnostics_clusterInfo);
    ClusterInfo fixedLabel_clusterInfo = new ClusterInfo("fixedLabel");
    clusterInfoMapping.put("fixedLabel", fixedLabel_clusterInfo);
    ClusterInfo flowMeasurement_clusterInfo = new ClusterInfo("flowMeasurement");
    clusterInfoMapping.put("flowMeasurement", flowMeasurement_clusterInfo);
    ClusterInfo generalCommissioning_clusterInfo = new ClusterInfo("generalCommissioning");
    List<CommandParameter> generalCommissioning_armFailSafe_parametersList = new ArrayList<>();
    CommandInfo generalCommissioning_armFailSafe_commandInfo = new CommandInfo();
    generalCommissioning_armFailSafe_commandInfo.name = "armFailSafe";
    generalCommissioning_armFailSafe_commandInfo.callbackClass =
        ChipClusters.GeneralCommissioningCluster.ArmFailSafeResponseCallback.class;
    CommandParameter armFailSafe_expiryLengthSeconds_commandParameter =
        new CommandParameter("expiryLengthSeconds", int.class);
    generalCommissioning_armFailSafe_parametersList.add(
        armFailSafe_expiryLengthSeconds_commandParameter);

    CommandParameter armFailSafe_breadcrumb_commandParameter =
        new CommandParameter("breadcrumb", long.class);
    generalCommissioning_armFailSafe_parametersList.add(armFailSafe_breadcrumb_commandParameter);

    CommandParameter armFailSafe_timeoutMs_commandParameter =
        new CommandParameter("timeoutMs", long.class);
    generalCommissioning_armFailSafe_parametersList.add(armFailSafe_timeoutMs_commandParameter);

    generalCommissioning_armFailSafe_commandInfo.parameters =
        generalCommissioning_armFailSafe_parametersList;
    generalCommissioning_clusterInfo.commands.add(generalCommissioning_armFailSafe_commandInfo);
    List<CommandParameter> generalCommissioning_commissioningComplete_parametersList =
        new ArrayList<>();
    CommandInfo generalCommissioning_commissioningComplete_commandInfo = new CommandInfo();
    generalCommissioning_commissioningComplete_commandInfo.name = "commissioningComplete";
    generalCommissioning_commissioningComplete_commandInfo.callbackClass =
        ChipClusters.GeneralCommissioningCluster.CommissioningCompleteResponseCallback.class;
    generalCommissioning_commissioningComplete_commandInfo.parameters =
        generalCommissioning_commissioningComplete_parametersList;
    generalCommissioning_clusterInfo.commands.add(
        generalCommissioning_commissioningComplete_commandInfo);
    List<CommandParameter> generalCommissioning_setRegulatoryConfig_parametersList =
        new ArrayList<>();
    CommandInfo generalCommissioning_setRegulatoryConfig_commandInfo = new CommandInfo();
    generalCommissioning_setRegulatoryConfig_commandInfo.name = "setRegulatoryConfig";
    generalCommissioning_setRegulatoryConfig_commandInfo.callbackClass =
        ChipClusters.GeneralCommissioningCluster.SetRegulatoryConfigResponseCallback.class;
    CommandParameter setRegulatoryConfig_location_commandParameter =
        new CommandParameter("location", int.class);
    generalCommissioning_setRegulatoryConfig_parametersList.add(
        setRegulatoryConfig_location_commandParameter);

    CommandParameter setRegulatoryConfig_countryCode_commandParameter =
        new CommandParameter("countryCode", String.class);
    generalCommissioning_setRegulatoryConfig_parametersList.add(
        setRegulatoryConfig_countryCode_commandParameter);

    CommandParameter setRegulatoryConfig_breadcrumb_commandParameter =
        new CommandParameter("breadcrumb", long.class);
    generalCommissioning_setRegulatoryConfig_parametersList.add(
        setRegulatoryConfig_breadcrumb_commandParameter);

    CommandParameter setRegulatoryConfig_timeoutMs_commandParameter =
        new CommandParameter("timeoutMs", long.class);
    generalCommissioning_setRegulatoryConfig_parametersList.add(
        setRegulatoryConfig_timeoutMs_commandParameter);

    generalCommissioning_setRegulatoryConfig_commandInfo.parameters =
        generalCommissioning_setRegulatoryConfig_parametersList;
    generalCommissioning_clusterInfo.commands.add(
        generalCommissioning_setRegulatoryConfig_commandInfo);
    clusterInfoMapping.put("generalCommissioning", generalCommissioning_clusterInfo);
    ClusterInfo generalDiagnostics_clusterInfo = new ClusterInfo("generalDiagnostics");
    clusterInfoMapping.put("generalDiagnostics", generalDiagnostics_clusterInfo);
    ClusterInfo groupKeyManagement_clusterInfo = new ClusterInfo("groupKeyManagement");
    clusterInfoMapping.put("groupKeyManagement", groupKeyManagement_clusterInfo);
    ClusterInfo groups_clusterInfo = new ClusterInfo("groups");
    List<CommandParameter> groups_addGroup_parametersList = new ArrayList<>();
    CommandInfo groups_addGroup_commandInfo = new CommandInfo();
    groups_addGroup_commandInfo.name = "addGroup";
    groups_addGroup_commandInfo.callbackClass =
        ChipClusters.GroupsCluster.AddGroupResponseCallback.class;
    CommandParameter addGroup_groupId_commandParameter = new CommandParameter("groupId", int.class);
    groups_addGroup_parametersList.add(addGroup_groupId_commandParameter);

    CommandParameter addGroup_groupName_commandParameter =
        new CommandParameter("groupName", String.class);
    groups_addGroup_parametersList.add(addGroup_groupName_commandParameter);

    groups_addGroup_commandInfo.parameters = groups_addGroup_parametersList;
    groups_clusterInfo.commands.add(groups_addGroup_commandInfo);
    List<CommandParameter> groups_addGroupIfIdentifying_parametersList = new ArrayList<>();
    CommandInfo groups_addGroupIfIdentifying_commandInfo = new CommandInfo();
    groups_addGroupIfIdentifying_commandInfo.name = "addGroupIfIdentifying";
    groups_addGroupIfIdentifying_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter addGroupIfIdentifying_groupId_commandParameter =
        new CommandParameter("groupId", int.class);
    groups_addGroupIfIdentifying_parametersList.add(addGroupIfIdentifying_groupId_commandParameter);

    CommandParameter addGroupIfIdentifying_groupName_commandParameter =
        new CommandParameter("groupName", String.class);
    groups_addGroupIfIdentifying_parametersList.add(
        addGroupIfIdentifying_groupName_commandParameter);

    groups_addGroupIfIdentifying_commandInfo.parameters =
        groups_addGroupIfIdentifying_parametersList;
    groups_clusterInfo.commands.add(groups_addGroupIfIdentifying_commandInfo);
    List<CommandParameter> groups_getGroupMembership_parametersList = new ArrayList<>();
    CommandInfo groups_getGroupMembership_commandInfo = new CommandInfo();
    groups_getGroupMembership_commandInfo.name = "getGroupMembership";
    groups_getGroupMembership_commandInfo.callbackClass =
        ChipClusters.GroupsCluster.GetGroupMembershipResponseCallback.class;
    CommandParameter getGroupMembership_groupCount_commandParameter =
        new CommandParameter("groupCount", int.class);
    groups_getGroupMembership_parametersList.add(getGroupMembership_groupCount_commandParameter);

    CommandParameter getGroupMembership_groupList_commandParameter =
        new CommandParameter("groupList", int.class);
    groups_getGroupMembership_parametersList.add(getGroupMembership_groupList_commandParameter);

    groups_getGroupMembership_commandInfo.parameters = groups_getGroupMembership_parametersList;
    groups_clusterInfo.commands.add(groups_getGroupMembership_commandInfo);
    List<CommandParameter> groups_removeAllGroups_parametersList = new ArrayList<>();
    CommandInfo groups_removeAllGroups_commandInfo = new CommandInfo();
    groups_removeAllGroups_commandInfo.name = "removeAllGroups";
    groups_removeAllGroups_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    groups_removeAllGroups_commandInfo.parameters = groups_removeAllGroups_parametersList;
    groups_clusterInfo.commands.add(groups_removeAllGroups_commandInfo);
    List<CommandParameter> groups_removeGroup_parametersList = new ArrayList<>();
    CommandInfo groups_removeGroup_commandInfo = new CommandInfo();
    groups_removeGroup_commandInfo.name = "removeGroup";
    groups_removeGroup_commandInfo.callbackClass =
        ChipClusters.GroupsCluster.RemoveGroupResponseCallback.class;
    CommandParameter removeGroup_groupId_commandParameter =
        new CommandParameter("groupId", int.class);
    groups_removeGroup_parametersList.add(removeGroup_groupId_commandParameter);

    groups_removeGroup_commandInfo.parameters = groups_removeGroup_parametersList;
    groups_clusterInfo.commands.add(groups_removeGroup_commandInfo);
    List<CommandParameter> groups_viewGroup_parametersList = new ArrayList<>();
    CommandInfo groups_viewGroup_commandInfo = new CommandInfo();
    groups_viewGroup_commandInfo.name = "viewGroup";
    groups_viewGroup_commandInfo.callbackClass =
        ChipClusters.GroupsCluster.ViewGroupResponseCallback.class;
    CommandParameter viewGroup_groupId_commandParameter =
        new CommandParameter("groupId", int.class);
    groups_viewGroup_parametersList.add(viewGroup_groupId_commandParameter);

    groups_viewGroup_commandInfo.parameters = groups_viewGroup_parametersList;
    groups_clusterInfo.commands.add(groups_viewGroup_commandInfo);
    clusterInfoMapping.put("groups", groups_clusterInfo);
    ClusterInfo identify_clusterInfo = new ClusterInfo("identify");
    List<CommandParameter> identify_identify_parametersList = new ArrayList<>();
    CommandInfo identify_identify_commandInfo = new CommandInfo();
    identify_identify_commandInfo.name = "identify";
    identify_identify_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter identify_identifyTime_commandParameter =
        new CommandParameter("identifyTime", int.class);
    identify_identify_parametersList.add(identify_identifyTime_commandParameter);

    identify_identify_commandInfo.parameters = identify_identify_parametersList;
    identify_clusterInfo.commands.add(identify_identify_commandInfo);
    List<CommandParameter> identify_identifyQuery_parametersList = new ArrayList<>();
    CommandInfo identify_identifyQuery_commandInfo = new CommandInfo();
    identify_identifyQuery_commandInfo.name = "identifyQuery";
    identify_identifyQuery_commandInfo.callbackClass =
        ChipClusters.IdentifyCluster.IdentifyQueryResponseCallback.class;
    identify_identifyQuery_commandInfo.parameters = identify_identifyQuery_parametersList;
    identify_clusterInfo.commands.add(identify_identifyQuery_commandInfo);
    List<CommandParameter> identify_triggerEffect_parametersList = new ArrayList<>();
    CommandInfo identify_triggerEffect_commandInfo = new CommandInfo();
    identify_triggerEffect_commandInfo.name = "triggerEffect";
    identify_triggerEffect_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter triggerEffect_effectIdentifier_commandParameter =
        new CommandParameter("effectIdentifier", int.class);
    identify_triggerEffect_parametersList.add(triggerEffect_effectIdentifier_commandParameter);

    CommandParameter triggerEffect_effectVariant_commandParameter =
        new CommandParameter("effectVariant", int.class);
    identify_triggerEffect_parametersList.add(triggerEffect_effectVariant_commandParameter);

    identify_triggerEffect_commandInfo.parameters = identify_triggerEffect_parametersList;
    identify_clusterInfo.commands.add(identify_triggerEffect_commandInfo);
    clusterInfoMapping.put("identify", identify_clusterInfo);
    ClusterInfo keypadInput_clusterInfo = new ClusterInfo("keypadInput");
    List<CommandParameter> keypadInput_sendKey_parametersList = new ArrayList<>();
    CommandInfo keypadInput_sendKey_commandInfo = new CommandInfo();
    keypadInput_sendKey_commandInfo.name = "sendKey";
    keypadInput_sendKey_commandInfo.callbackClass =
        ChipClusters.KeypadInputCluster.SendKeyResponseCallback.class;
    CommandParameter sendKey_keyCode_commandParameter = new CommandParameter("keyCode", int.class);
    keypadInput_sendKey_parametersList.add(sendKey_keyCode_commandParameter);

    keypadInput_sendKey_commandInfo.parameters = keypadInput_sendKey_parametersList;
    keypadInput_clusterInfo.commands.add(keypadInput_sendKey_commandInfo);
    clusterInfoMapping.put("keypadInput", keypadInput_clusterInfo);
    ClusterInfo levelControl_clusterInfo = new ClusterInfo("levelControl");
    List<CommandParameter> levelControl_move_parametersList = new ArrayList<>();
    CommandInfo levelControl_move_commandInfo = new CommandInfo();
    levelControl_move_commandInfo.name = "move";
    levelControl_move_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter move_moveMode_commandParameter = new CommandParameter("moveMode", int.class);
    levelControl_move_parametersList.add(move_moveMode_commandParameter);

    CommandParameter move_rate_commandParameter = new CommandParameter("rate", int.class);
    levelControl_move_parametersList.add(move_rate_commandParameter);

    CommandParameter move_optionMask_commandParameter =
        new CommandParameter("optionMask", int.class);
    levelControl_move_parametersList.add(move_optionMask_commandParameter);

    CommandParameter move_optionOverride_commandParameter =
        new CommandParameter("optionOverride", int.class);
    levelControl_move_parametersList.add(move_optionOverride_commandParameter);

    levelControl_move_commandInfo.parameters = levelControl_move_parametersList;
    levelControl_clusterInfo.commands.add(levelControl_move_commandInfo);
    List<CommandParameter> levelControl_moveToLevel_parametersList = new ArrayList<>();
    CommandInfo levelControl_moveToLevel_commandInfo = new CommandInfo();
    levelControl_moveToLevel_commandInfo.name = "moveToLevel";
    levelControl_moveToLevel_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter moveToLevel_level_commandParameter = new CommandParameter("level", int.class);
    levelControl_moveToLevel_parametersList.add(moveToLevel_level_commandParameter);

    CommandParameter moveToLevel_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    levelControl_moveToLevel_parametersList.add(moveToLevel_transitionTime_commandParameter);

    CommandParameter moveToLevel_optionMask_commandParameter =
        new CommandParameter("optionMask", int.class);
    levelControl_moveToLevel_parametersList.add(moveToLevel_optionMask_commandParameter);

    CommandParameter moveToLevel_optionOverride_commandParameter =
        new CommandParameter("optionOverride", int.class);
    levelControl_moveToLevel_parametersList.add(moveToLevel_optionOverride_commandParameter);

    levelControl_moveToLevel_commandInfo.parameters = levelControl_moveToLevel_parametersList;
    levelControl_clusterInfo.commands.add(levelControl_moveToLevel_commandInfo);
    List<CommandParameter> levelControl_moveToLevelWithOnOff_parametersList = new ArrayList<>();
    CommandInfo levelControl_moveToLevelWithOnOff_commandInfo = new CommandInfo();
    levelControl_moveToLevelWithOnOff_commandInfo.name = "moveToLevelWithOnOff";
    levelControl_moveToLevelWithOnOff_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter moveToLevelWithOnOff_level_commandParameter =
        new CommandParameter("level", int.class);
    levelControl_moveToLevelWithOnOff_parametersList.add(
        moveToLevelWithOnOff_level_commandParameter);

    CommandParameter moveToLevelWithOnOff_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    levelControl_moveToLevelWithOnOff_parametersList.add(
        moveToLevelWithOnOff_transitionTime_commandParameter);

    levelControl_moveToLevelWithOnOff_commandInfo.parameters =
        levelControl_moveToLevelWithOnOff_parametersList;
    levelControl_clusterInfo.commands.add(levelControl_moveToLevelWithOnOff_commandInfo);
    List<CommandParameter> levelControl_moveWithOnOff_parametersList = new ArrayList<>();
    CommandInfo levelControl_moveWithOnOff_commandInfo = new CommandInfo();
    levelControl_moveWithOnOff_commandInfo.name = "moveWithOnOff";
    levelControl_moveWithOnOff_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter moveWithOnOff_moveMode_commandParameter =
        new CommandParameter("moveMode", int.class);
    levelControl_moveWithOnOff_parametersList.add(moveWithOnOff_moveMode_commandParameter);

    CommandParameter moveWithOnOff_rate_commandParameter = new CommandParameter("rate", int.class);
    levelControl_moveWithOnOff_parametersList.add(moveWithOnOff_rate_commandParameter);

    levelControl_moveWithOnOff_commandInfo.parameters = levelControl_moveWithOnOff_parametersList;
    levelControl_clusterInfo.commands.add(levelControl_moveWithOnOff_commandInfo);
    List<CommandParameter> levelControl_step_parametersList = new ArrayList<>();
    CommandInfo levelControl_step_commandInfo = new CommandInfo();
    levelControl_step_commandInfo.name = "step";
    levelControl_step_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter step_stepMode_commandParameter = new CommandParameter("stepMode", int.class);
    levelControl_step_parametersList.add(step_stepMode_commandParameter);

    CommandParameter step_stepSize_commandParameter = new CommandParameter("stepSize", int.class);
    levelControl_step_parametersList.add(step_stepSize_commandParameter);

    CommandParameter step_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    levelControl_step_parametersList.add(step_transitionTime_commandParameter);

    CommandParameter step_optionMask_commandParameter =
        new CommandParameter("optionMask", int.class);
    levelControl_step_parametersList.add(step_optionMask_commandParameter);

    CommandParameter step_optionOverride_commandParameter =
        new CommandParameter("optionOverride", int.class);
    levelControl_step_parametersList.add(step_optionOverride_commandParameter);

    levelControl_step_commandInfo.parameters = levelControl_step_parametersList;
    levelControl_clusterInfo.commands.add(levelControl_step_commandInfo);
    List<CommandParameter> levelControl_stepWithOnOff_parametersList = new ArrayList<>();
    CommandInfo levelControl_stepWithOnOff_commandInfo = new CommandInfo();
    levelControl_stepWithOnOff_commandInfo.name = "stepWithOnOff";
    levelControl_stepWithOnOff_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter stepWithOnOff_stepMode_commandParameter =
        new CommandParameter("stepMode", int.class);
    levelControl_stepWithOnOff_parametersList.add(stepWithOnOff_stepMode_commandParameter);

    CommandParameter stepWithOnOff_stepSize_commandParameter =
        new CommandParameter("stepSize", int.class);
    levelControl_stepWithOnOff_parametersList.add(stepWithOnOff_stepSize_commandParameter);

    CommandParameter stepWithOnOff_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    levelControl_stepWithOnOff_parametersList.add(stepWithOnOff_transitionTime_commandParameter);

    levelControl_stepWithOnOff_commandInfo.parameters = levelControl_stepWithOnOff_parametersList;
    levelControl_clusterInfo.commands.add(levelControl_stepWithOnOff_commandInfo);
    List<CommandParameter> levelControl_stop_parametersList = new ArrayList<>();
    CommandInfo levelControl_stop_commandInfo = new CommandInfo();
    levelControl_stop_commandInfo.name = "stop";
    levelControl_stop_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter stop_optionMask_commandParameter =
        new CommandParameter("optionMask", int.class);
    levelControl_stop_parametersList.add(stop_optionMask_commandParameter);

    CommandParameter stop_optionOverride_commandParameter =
        new CommandParameter("optionOverride", int.class);
    levelControl_stop_parametersList.add(stop_optionOverride_commandParameter);

    levelControl_stop_commandInfo.parameters = levelControl_stop_parametersList;
    levelControl_clusterInfo.commands.add(levelControl_stop_commandInfo);
    List<CommandParameter> levelControl_stopWithOnOff_parametersList = new ArrayList<>();
    CommandInfo levelControl_stopWithOnOff_commandInfo = new CommandInfo();
    levelControl_stopWithOnOff_commandInfo.name = "stopWithOnOff";
    levelControl_stopWithOnOff_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    levelControl_stopWithOnOff_commandInfo.parameters = levelControl_stopWithOnOff_parametersList;
    levelControl_clusterInfo.commands.add(levelControl_stopWithOnOff_commandInfo);
    clusterInfoMapping.put("levelControl", levelControl_clusterInfo);
    ClusterInfo lowPower_clusterInfo = new ClusterInfo("lowPower");
    List<CommandParameter> lowPower_sleep_parametersList = new ArrayList<>();
    CommandInfo lowPower_sleep_commandInfo = new CommandInfo();
    lowPower_sleep_commandInfo.name = "sleep";
    lowPower_sleep_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    lowPower_sleep_commandInfo.parameters = lowPower_sleep_parametersList;
    lowPower_clusterInfo.commands.add(lowPower_sleep_commandInfo);
    clusterInfoMapping.put("lowPower", lowPower_clusterInfo);
    ClusterInfo mediaInput_clusterInfo = new ClusterInfo("mediaInput");
    List<CommandParameter> mediaInput_hideInputStatus_parametersList = new ArrayList<>();
    CommandInfo mediaInput_hideInputStatus_commandInfo = new CommandInfo();
    mediaInput_hideInputStatus_commandInfo.name = "hideInputStatus";
    mediaInput_hideInputStatus_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    mediaInput_hideInputStatus_commandInfo.parameters = mediaInput_hideInputStatus_parametersList;
    mediaInput_clusterInfo.commands.add(mediaInput_hideInputStatus_commandInfo);
    List<CommandParameter> mediaInput_renameInput_parametersList = new ArrayList<>();
    CommandInfo mediaInput_renameInput_commandInfo = new CommandInfo();
    mediaInput_renameInput_commandInfo.name = "renameInput";
    mediaInput_renameInput_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter renameInput_index_commandParameter = new CommandParameter("index", int.class);
    mediaInput_renameInput_parametersList.add(renameInput_index_commandParameter);

    CommandParameter renameInput_name_commandParameter = new CommandParameter("name", String.class);
    mediaInput_renameInput_parametersList.add(renameInput_name_commandParameter);

    mediaInput_renameInput_commandInfo.parameters = mediaInput_renameInput_parametersList;
    mediaInput_clusterInfo.commands.add(mediaInput_renameInput_commandInfo);
    List<CommandParameter> mediaInput_selectInput_parametersList = new ArrayList<>();
    CommandInfo mediaInput_selectInput_commandInfo = new CommandInfo();
    mediaInput_selectInput_commandInfo.name = "selectInput";
    mediaInput_selectInput_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter selectInput_index_commandParameter = new CommandParameter("index", int.class);
    mediaInput_selectInput_parametersList.add(selectInput_index_commandParameter);

    mediaInput_selectInput_commandInfo.parameters = mediaInput_selectInput_parametersList;
    mediaInput_clusterInfo.commands.add(mediaInput_selectInput_commandInfo);
    List<CommandParameter> mediaInput_showInputStatus_parametersList = new ArrayList<>();
    CommandInfo mediaInput_showInputStatus_commandInfo = new CommandInfo();
    mediaInput_showInputStatus_commandInfo.name = "showInputStatus";
    mediaInput_showInputStatus_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    mediaInput_showInputStatus_commandInfo.parameters = mediaInput_showInputStatus_parametersList;
    mediaInput_clusterInfo.commands.add(mediaInput_showInputStatus_commandInfo);
    clusterInfoMapping.put("mediaInput", mediaInput_clusterInfo);
    ClusterInfo mediaPlayback_clusterInfo = new ClusterInfo("mediaPlayback");
    List<CommandParameter> mediaPlayback_mediaFastForward_parametersList = new ArrayList<>();
    CommandInfo mediaPlayback_mediaFastForward_commandInfo = new CommandInfo();
    mediaPlayback_mediaFastForward_commandInfo.name = "mediaFastForward";
    mediaPlayback_mediaFastForward_commandInfo.callbackClass =
        ChipClusters.MediaPlaybackCluster.MediaFastForwardResponseCallback.class;
    mediaPlayback_mediaFastForward_commandInfo.parameters =
        mediaPlayback_mediaFastForward_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaPlayback_mediaFastForward_commandInfo);
    List<CommandParameter> mediaPlayback_mediaNext_parametersList = new ArrayList<>();
    CommandInfo mediaPlayback_mediaNext_commandInfo = new CommandInfo();
    mediaPlayback_mediaNext_commandInfo.name = "mediaNext";
    mediaPlayback_mediaNext_commandInfo.callbackClass =
        ChipClusters.MediaPlaybackCluster.MediaNextResponseCallback.class;
    mediaPlayback_mediaNext_commandInfo.parameters = mediaPlayback_mediaNext_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaPlayback_mediaNext_commandInfo);
    List<CommandParameter> mediaPlayback_mediaPause_parametersList = new ArrayList<>();
    CommandInfo mediaPlayback_mediaPause_commandInfo = new CommandInfo();
    mediaPlayback_mediaPause_commandInfo.name = "mediaPause";
    mediaPlayback_mediaPause_commandInfo.callbackClass =
        ChipClusters.MediaPlaybackCluster.MediaPauseResponseCallback.class;
    mediaPlayback_mediaPause_commandInfo.parameters = mediaPlayback_mediaPause_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaPlayback_mediaPause_commandInfo);
    List<CommandParameter> mediaPlayback_mediaPlay_parametersList = new ArrayList<>();
    CommandInfo mediaPlayback_mediaPlay_commandInfo = new CommandInfo();
    mediaPlayback_mediaPlay_commandInfo.name = "mediaPlay";
    mediaPlayback_mediaPlay_commandInfo.callbackClass =
        ChipClusters.MediaPlaybackCluster.MediaPlayResponseCallback.class;
    mediaPlayback_mediaPlay_commandInfo.parameters = mediaPlayback_mediaPlay_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaPlayback_mediaPlay_commandInfo);
    List<CommandParameter> mediaPlayback_mediaPrevious_parametersList = new ArrayList<>();
    CommandInfo mediaPlayback_mediaPrevious_commandInfo = new CommandInfo();
    mediaPlayback_mediaPrevious_commandInfo.name = "mediaPrevious";
    mediaPlayback_mediaPrevious_commandInfo.callbackClass =
        ChipClusters.MediaPlaybackCluster.MediaPreviousResponseCallback.class;
    mediaPlayback_mediaPrevious_commandInfo.parameters = mediaPlayback_mediaPrevious_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaPlayback_mediaPrevious_commandInfo);
    List<CommandParameter> mediaPlayback_mediaRewind_parametersList = new ArrayList<>();
    CommandInfo mediaPlayback_mediaRewind_commandInfo = new CommandInfo();
    mediaPlayback_mediaRewind_commandInfo.name = "mediaRewind";
    mediaPlayback_mediaRewind_commandInfo.callbackClass =
        ChipClusters.MediaPlaybackCluster.MediaRewindResponseCallback.class;
    mediaPlayback_mediaRewind_commandInfo.parameters = mediaPlayback_mediaRewind_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaPlayback_mediaRewind_commandInfo);
    List<CommandParameter> mediaPlayback_mediaSeek_parametersList = new ArrayList<>();
    CommandInfo mediaPlayback_mediaSeek_commandInfo = new CommandInfo();
    mediaPlayback_mediaSeek_commandInfo.name = "mediaSeek";
    mediaPlayback_mediaSeek_commandInfo.callbackClass =
        ChipClusters.MediaPlaybackCluster.MediaSeekResponseCallback.class;
    CommandParameter mediaSeek_position_commandParameter =
        new CommandParameter("position", long.class);
    mediaPlayback_mediaSeek_parametersList.add(mediaSeek_position_commandParameter);

    mediaPlayback_mediaSeek_commandInfo.parameters = mediaPlayback_mediaSeek_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaPlayback_mediaSeek_commandInfo);
    List<CommandParameter> mediaPlayback_mediaSkipBackward_parametersList = new ArrayList<>();
    CommandInfo mediaPlayback_mediaSkipBackward_commandInfo = new CommandInfo();
    mediaPlayback_mediaSkipBackward_commandInfo.name = "mediaSkipBackward";
    mediaPlayback_mediaSkipBackward_commandInfo.callbackClass =
        ChipClusters.MediaPlaybackCluster.MediaSkipBackwardResponseCallback.class;
    CommandParameter mediaSkipBackward_deltaPositionMilliseconds_commandParameter =
        new CommandParameter("deltaPositionMilliseconds", long.class);
    mediaPlayback_mediaSkipBackward_parametersList.add(
        mediaSkipBackward_deltaPositionMilliseconds_commandParameter);

    mediaPlayback_mediaSkipBackward_commandInfo.parameters =
        mediaPlayback_mediaSkipBackward_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaPlayback_mediaSkipBackward_commandInfo);
    List<CommandParameter> mediaPlayback_mediaSkipForward_parametersList = new ArrayList<>();
    CommandInfo mediaPlayback_mediaSkipForward_commandInfo = new CommandInfo();
    mediaPlayback_mediaSkipForward_commandInfo.name = "mediaSkipForward";
    mediaPlayback_mediaSkipForward_commandInfo.callbackClass =
        ChipClusters.MediaPlaybackCluster.MediaSkipForwardResponseCallback.class;
    CommandParameter mediaSkipForward_deltaPositionMilliseconds_commandParameter =
        new CommandParameter("deltaPositionMilliseconds", long.class);
    mediaPlayback_mediaSkipForward_parametersList.add(
        mediaSkipForward_deltaPositionMilliseconds_commandParameter);

    mediaPlayback_mediaSkipForward_commandInfo.parameters =
        mediaPlayback_mediaSkipForward_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaPlayback_mediaSkipForward_commandInfo);
    List<CommandParameter> mediaPlayback_mediaStartOver_parametersList = new ArrayList<>();
    CommandInfo mediaPlayback_mediaStartOver_commandInfo = new CommandInfo();
    mediaPlayback_mediaStartOver_commandInfo.name = "mediaStartOver";
    mediaPlayback_mediaStartOver_commandInfo.callbackClass =
        ChipClusters.MediaPlaybackCluster.MediaStartOverResponseCallback.class;
    mediaPlayback_mediaStartOver_commandInfo.parameters =
        mediaPlayback_mediaStartOver_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaPlayback_mediaStartOver_commandInfo);
    List<CommandParameter> mediaPlayback_mediaStop_parametersList = new ArrayList<>();
    CommandInfo mediaPlayback_mediaStop_commandInfo = new CommandInfo();
    mediaPlayback_mediaStop_commandInfo.name = "mediaStop";
    mediaPlayback_mediaStop_commandInfo.callbackClass =
        ChipClusters.MediaPlaybackCluster.MediaStopResponseCallback.class;
    mediaPlayback_mediaStop_commandInfo.parameters = mediaPlayback_mediaStop_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaPlayback_mediaStop_commandInfo);
    clusterInfoMapping.put("mediaPlayback", mediaPlayback_clusterInfo);
    ClusterInfo networkCommissioning_clusterInfo = new ClusterInfo("networkCommissioning");
    List<CommandParameter> networkCommissioning_addThreadNetwork_parametersList = new ArrayList<>();
    CommandInfo networkCommissioning_addThreadNetwork_commandInfo = new CommandInfo();
    networkCommissioning_addThreadNetwork_commandInfo.name = "addThreadNetwork";
    networkCommissioning_addThreadNetwork_commandInfo.callbackClass =
        ChipClusters.NetworkCommissioningCluster.AddThreadNetworkResponseCallback.class;
    CommandParameter addThreadNetwork_operationalDataset_commandParameter =
        new CommandParameter("operationalDataset", byte[].class);
    networkCommissioning_addThreadNetwork_parametersList.add(
        addThreadNetwork_operationalDataset_commandParameter);

    CommandParameter addThreadNetwork_breadcrumb_commandParameter =
        new CommandParameter("breadcrumb", long.class);
    networkCommissioning_addThreadNetwork_parametersList.add(
        addThreadNetwork_breadcrumb_commandParameter);

    CommandParameter addThreadNetwork_timeoutMs_commandParameter =
        new CommandParameter("timeoutMs", long.class);
    networkCommissioning_addThreadNetwork_parametersList.add(
        addThreadNetwork_timeoutMs_commandParameter);

    networkCommissioning_addThreadNetwork_commandInfo.parameters =
        networkCommissioning_addThreadNetwork_parametersList;
    networkCommissioning_clusterInfo.commands.add(
        networkCommissioning_addThreadNetwork_commandInfo);
    List<CommandParameter> networkCommissioning_addWiFiNetwork_parametersList = new ArrayList<>();
    CommandInfo networkCommissioning_addWiFiNetwork_commandInfo = new CommandInfo();
    networkCommissioning_addWiFiNetwork_commandInfo.name = "addWiFiNetwork";
    networkCommissioning_addWiFiNetwork_commandInfo.callbackClass =
        ChipClusters.NetworkCommissioningCluster.AddWiFiNetworkResponseCallback.class;
    CommandParameter addWiFiNetwork_ssid_commandParameter =
        new CommandParameter("ssid", byte[].class);
    networkCommissioning_addWiFiNetwork_parametersList.add(addWiFiNetwork_ssid_commandParameter);

    CommandParameter addWiFiNetwork_credentials_commandParameter =
        new CommandParameter("credentials", byte[].class);
    networkCommissioning_addWiFiNetwork_parametersList.add(
        addWiFiNetwork_credentials_commandParameter);

    CommandParameter addWiFiNetwork_breadcrumb_commandParameter =
        new CommandParameter("breadcrumb", long.class);
    networkCommissioning_addWiFiNetwork_parametersList.add(
        addWiFiNetwork_breadcrumb_commandParameter);

    CommandParameter addWiFiNetwork_timeoutMs_commandParameter =
        new CommandParameter("timeoutMs", long.class);
    networkCommissioning_addWiFiNetwork_parametersList.add(
        addWiFiNetwork_timeoutMs_commandParameter);

    networkCommissioning_addWiFiNetwork_commandInfo.parameters =
        networkCommissioning_addWiFiNetwork_parametersList;
    networkCommissioning_clusterInfo.commands.add(networkCommissioning_addWiFiNetwork_commandInfo);
    List<CommandParameter> networkCommissioning_disableNetwork_parametersList = new ArrayList<>();
    CommandInfo networkCommissioning_disableNetwork_commandInfo = new CommandInfo();
    networkCommissioning_disableNetwork_commandInfo.name = "disableNetwork";
    networkCommissioning_disableNetwork_commandInfo.callbackClass =
        ChipClusters.NetworkCommissioningCluster.DisableNetworkResponseCallback.class;
    CommandParameter disableNetwork_networkID_commandParameter =
        new CommandParameter("networkID", byte[].class);
    networkCommissioning_disableNetwork_parametersList.add(
        disableNetwork_networkID_commandParameter);

    CommandParameter disableNetwork_breadcrumb_commandParameter =
        new CommandParameter("breadcrumb", long.class);
    networkCommissioning_disableNetwork_parametersList.add(
        disableNetwork_breadcrumb_commandParameter);

    CommandParameter disableNetwork_timeoutMs_commandParameter =
        new CommandParameter("timeoutMs", long.class);
    networkCommissioning_disableNetwork_parametersList.add(
        disableNetwork_timeoutMs_commandParameter);

    networkCommissioning_disableNetwork_commandInfo.parameters =
        networkCommissioning_disableNetwork_parametersList;
    networkCommissioning_clusterInfo.commands.add(networkCommissioning_disableNetwork_commandInfo);
    List<CommandParameter> networkCommissioning_enableNetwork_parametersList = new ArrayList<>();
    CommandInfo networkCommissioning_enableNetwork_commandInfo = new CommandInfo();
    networkCommissioning_enableNetwork_commandInfo.name = "enableNetwork";
    networkCommissioning_enableNetwork_commandInfo.callbackClass =
        ChipClusters.NetworkCommissioningCluster.EnableNetworkResponseCallback.class;
    CommandParameter enableNetwork_networkID_commandParameter =
        new CommandParameter("networkID", byte[].class);
    networkCommissioning_enableNetwork_parametersList.add(enableNetwork_networkID_commandParameter);

    CommandParameter enableNetwork_breadcrumb_commandParameter =
        new CommandParameter("breadcrumb", long.class);
    networkCommissioning_enableNetwork_parametersList.add(
        enableNetwork_breadcrumb_commandParameter);

    CommandParameter enableNetwork_timeoutMs_commandParameter =
        new CommandParameter("timeoutMs", long.class);
    networkCommissioning_enableNetwork_parametersList.add(enableNetwork_timeoutMs_commandParameter);

    networkCommissioning_enableNetwork_commandInfo.parameters =
        networkCommissioning_enableNetwork_parametersList;
    networkCommissioning_clusterInfo.commands.add(networkCommissioning_enableNetwork_commandInfo);
    List<CommandParameter> networkCommissioning_getLastNetworkCommissioningResult_parametersList =
        new ArrayList<>();
    CommandInfo networkCommissioning_getLastNetworkCommissioningResult_commandInfo =
        new CommandInfo();
    networkCommissioning_getLastNetworkCommissioningResult_commandInfo.name =
        "getLastNetworkCommissioningResult";
    networkCommissioning_getLastNetworkCommissioningResult_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter getLastNetworkCommissioningResult_timeoutMs_commandParameter =
        new CommandParameter("timeoutMs", long.class);
    networkCommissioning_getLastNetworkCommissioningResult_parametersList.add(
        getLastNetworkCommissioningResult_timeoutMs_commandParameter);

    networkCommissioning_getLastNetworkCommissioningResult_commandInfo.parameters =
        networkCommissioning_getLastNetworkCommissioningResult_parametersList;
    networkCommissioning_clusterInfo.commands.add(
        networkCommissioning_getLastNetworkCommissioningResult_commandInfo);
    List<CommandParameter> networkCommissioning_removeNetwork_parametersList = new ArrayList<>();
    CommandInfo networkCommissioning_removeNetwork_commandInfo = new CommandInfo();
    networkCommissioning_removeNetwork_commandInfo.name = "removeNetwork";
    networkCommissioning_removeNetwork_commandInfo.callbackClass =
        ChipClusters.NetworkCommissioningCluster.RemoveNetworkResponseCallback.class;
    CommandParameter removeNetwork_networkID_commandParameter =
        new CommandParameter("networkID", byte[].class);
    networkCommissioning_removeNetwork_parametersList.add(removeNetwork_networkID_commandParameter);

    CommandParameter removeNetwork_breadcrumb_commandParameter =
        new CommandParameter("breadcrumb", long.class);
    networkCommissioning_removeNetwork_parametersList.add(
        removeNetwork_breadcrumb_commandParameter);

    CommandParameter removeNetwork_timeoutMs_commandParameter =
        new CommandParameter("timeoutMs", long.class);
    networkCommissioning_removeNetwork_parametersList.add(removeNetwork_timeoutMs_commandParameter);

    networkCommissioning_removeNetwork_commandInfo.parameters =
        networkCommissioning_removeNetwork_parametersList;
    networkCommissioning_clusterInfo.commands.add(networkCommissioning_removeNetwork_commandInfo);
    List<CommandParameter> networkCommissioning_scanNetworks_parametersList = new ArrayList<>();
    CommandInfo networkCommissioning_scanNetworks_commandInfo = new CommandInfo();
    networkCommissioning_scanNetworks_commandInfo.name = "scanNetworks";
    networkCommissioning_scanNetworks_commandInfo.callbackClass =
        ChipClusters.NetworkCommissioningCluster.ScanNetworksResponseCallback.class;
    CommandParameter scanNetworks_ssid_commandParameter =
        new CommandParameter("ssid", byte[].class);
    networkCommissioning_scanNetworks_parametersList.add(scanNetworks_ssid_commandParameter);

    CommandParameter scanNetworks_breadcrumb_commandParameter =
        new CommandParameter("breadcrumb", long.class);
    networkCommissioning_scanNetworks_parametersList.add(scanNetworks_breadcrumb_commandParameter);

    CommandParameter scanNetworks_timeoutMs_commandParameter =
        new CommandParameter("timeoutMs", long.class);
    networkCommissioning_scanNetworks_parametersList.add(scanNetworks_timeoutMs_commandParameter);

    networkCommissioning_scanNetworks_commandInfo.parameters =
        networkCommissioning_scanNetworks_parametersList;
    networkCommissioning_clusterInfo.commands.add(networkCommissioning_scanNetworks_commandInfo);
    List<CommandParameter> networkCommissioning_updateThreadNetwork_parametersList =
        new ArrayList<>();
    CommandInfo networkCommissioning_updateThreadNetwork_commandInfo = new CommandInfo();
    networkCommissioning_updateThreadNetwork_commandInfo.name = "updateThreadNetwork";
    networkCommissioning_updateThreadNetwork_commandInfo.callbackClass =
        ChipClusters.NetworkCommissioningCluster.UpdateThreadNetworkResponseCallback.class;
    CommandParameter updateThreadNetwork_operationalDataset_commandParameter =
        new CommandParameter("operationalDataset", byte[].class);
    networkCommissioning_updateThreadNetwork_parametersList.add(
        updateThreadNetwork_operationalDataset_commandParameter);

    CommandParameter updateThreadNetwork_breadcrumb_commandParameter =
        new CommandParameter("breadcrumb", long.class);
    networkCommissioning_updateThreadNetwork_parametersList.add(
        updateThreadNetwork_breadcrumb_commandParameter);

    CommandParameter updateThreadNetwork_timeoutMs_commandParameter =
        new CommandParameter("timeoutMs", long.class);
    networkCommissioning_updateThreadNetwork_parametersList.add(
        updateThreadNetwork_timeoutMs_commandParameter);

    networkCommissioning_updateThreadNetwork_commandInfo.parameters =
        networkCommissioning_updateThreadNetwork_parametersList;
    networkCommissioning_clusterInfo.commands.add(
        networkCommissioning_updateThreadNetwork_commandInfo);
    List<CommandParameter> networkCommissioning_updateWiFiNetwork_parametersList =
        new ArrayList<>();
    CommandInfo networkCommissioning_updateWiFiNetwork_commandInfo = new CommandInfo();
    networkCommissioning_updateWiFiNetwork_commandInfo.name = "updateWiFiNetwork";
    networkCommissioning_updateWiFiNetwork_commandInfo.callbackClass =
        ChipClusters.NetworkCommissioningCluster.UpdateWiFiNetworkResponseCallback.class;
    CommandParameter updateWiFiNetwork_ssid_commandParameter =
        new CommandParameter("ssid", byte[].class);
    networkCommissioning_updateWiFiNetwork_parametersList.add(
        updateWiFiNetwork_ssid_commandParameter);

    CommandParameter updateWiFiNetwork_credentials_commandParameter =
        new CommandParameter("credentials", byte[].class);
    networkCommissioning_updateWiFiNetwork_parametersList.add(
        updateWiFiNetwork_credentials_commandParameter);

    CommandParameter updateWiFiNetwork_breadcrumb_commandParameter =
        new CommandParameter("breadcrumb", long.class);
    networkCommissioning_updateWiFiNetwork_parametersList.add(
        updateWiFiNetwork_breadcrumb_commandParameter);

    CommandParameter updateWiFiNetwork_timeoutMs_commandParameter =
        new CommandParameter("timeoutMs", long.class);
    networkCommissioning_updateWiFiNetwork_parametersList.add(
        updateWiFiNetwork_timeoutMs_commandParameter);

    networkCommissioning_updateWiFiNetwork_commandInfo.parameters =
        networkCommissioning_updateWiFiNetwork_parametersList;
    networkCommissioning_clusterInfo.commands.add(
        networkCommissioning_updateWiFiNetwork_commandInfo);
    clusterInfoMapping.put("networkCommissioning", networkCommissioning_clusterInfo);
    ClusterInfo otaSoftwareUpdateProvider_clusterInfo =
        new ClusterInfo("otaSoftwareUpdateProvider");
    List<CommandParameter> otaSoftwareUpdateProvider_applyUpdateRequest_parametersList =
        new ArrayList<>();
    CommandInfo otaSoftwareUpdateProvider_applyUpdateRequest_commandInfo = new CommandInfo();
    otaSoftwareUpdateProvider_applyUpdateRequest_commandInfo.name = "applyUpdateRequest";
    otaSoftwareUpdateProvider_applyUpdateRequest_commandInfo.callbackClass =
        ChipClusters.OtaSoftwareUpdateProviderCluster.ApplyUpdateRequestResponseCallback.class;
    CommandParameter applyUpdateRequest_updateToken_commandParameter =
        new CommandParameter("updateToken", byte[].class);
    otaSoftwareUpdateProvider_applyUpdateRequest_parametersList.add(
        applyUpdateRequest_updateToken_commandParameter);

    CommandParameter applyUpdateRequest_newVersion_commandParameter =
        new CommandParameter("newVersion", long.class);
    otaSoftwareUpdateProvider_applyUpdateRequest_parametersList.add(
        applyUpdateRequest_newVersion_commandParameter);

    otaSoftwareUpdateProvider_applyUpdateRequest_commandInfo.parameters =
        otaSoftwareUpdateProvider_applyUpdateRequest_parametersList;
    otaSoftwareUpdateProvider_clusterInfo.commands.add(
        otaSoftwareUpdateProvider_applyUpdateRequest_commandInfo);
    List<CommandParameter> otaSoftwareUpdateProvider_notifyUpdateApplied_parametersList =
        new ArrayList<>();
    CommandInfo otaSoftwareUpdateProvider_notifyUpdateApplied_commandInfo = new CommandInfo();
    otaSoftwareUpdateProvider_notifyUpdateApplied_commandInfo.name = "notifyUpdateApplied";
    otaSoftwareUpdateProvider_notifyUpdateApplied_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter notifyUpdateApplied_updateToken_commandParameter =
        new CommandParameter("updateToken", byte[].class);
    otaSoftwareUpdateProvider_notifyUpdateApplied_parametersList.add(
        notifyUpdateApplied_updateToken_commandParameter);

    CommandParameter notifyUpdateApplied_softwareVersion_commandParameter =
        new CommandParameter("softwareVersion", long.class);
    otaSoftwareUpdateProvider_notifyUpdateApplied_parametersList.add(
        notifyUpdateApplied_softwareVersion_commandParameter);

    otaSoftwareUpdateProvider_notifyUpdateApplied_commandInfo.parameters =
        otaSoftwareUpdateProvider_notifyUpdateApplied_parametersList;
    otaSoftwareUpdateProvider_clusterInfo.commands.add(
        otaSoftwareUpdateProvider_notifyUpdateApplied_commandInfo);
    List<CommandParameter> otaSoftwareUpdateProvider_queryImage_parametersList = new ArrayList<>();
    CommandInfo otaSoftwareUpdateProvider_queryImage_commandInfo = new CommandInfo();
    otaSoftwareUpdateProvider_queryImage_commandInfo.name = "queryImage";
    otaSoftwareUpdateProvider_queryImage_commandInfo.callbackClass =
        ChipClusters.OtaSoftwareUpdateProviderCluster.QueryImageResponseCallback.class;
    CommandParameter queryImage_vendorId_commandParameter =
        new CommandParameter("vendorId", int.class);
    otaSoftwareUpdateProvider_queryImage_parametersList.add(queryImage_vendorId_commandParameter);

    CommandParameter queryImage_productId_commandParameter =
        new CommandParameter("productId", int.class);
    otaSoftwareUpdateProvider_queryImage_parametersList.add(queryImage_productId_commandParameter);

    CommandParameter queryImage_hardwareVersion_commandParameter =
        new CommandParameter("hardwareVersion", int.class);
    otaSoftwareUpdateProvider_queryImage_parametersList.add(
        queryImage_hardwareVersion_commandParameter);

    CommandParameter queryImage_softwareVersion_commandParameter =
        new CommandParameter("softwareVersion", long.class);
    otaSoftwareUpdateProvider_queryImage_parametersList.add(
        queryImage_softwareVersion_commandParameter);

    CommandParameter queryImage_protocolsSupported_commandParameter =
        new CommandParameter("protocolsSupported", int.class);
    otaSoftwareUpdateProvider_queryImage_parametersList.add(
        queryImage_protocolsSupported_commandParameter);

    CommandParameter queryImage_location_commandParameter =
        new CommandParameter("location", String.class);
    otaSoftwareUpdateProvider_queryImage_parametersList.add(queryImage_location_commandParameter);

    CommandParameter queryImage_requestorCanConsent_commandParameter =
        new CommandParameter("requestorCanConsent", boolean.class);
    otaSoftwareUpdateProvider_queryImage_parametersList.add(
        queryImage_requestorCanConsent_commandParameter);

    CommandParameter queryImage_metadataForProvider_commandParameter =
        new CommandParameter("metadataForProvider", byte[].class);
    otaSoftwareUpdateProvider_queryImage_parametersList.add(
        queryImage_metadataForProvider_commandParameter);

    otaSoftwareUpdateProvider_queryImage_commandInfo.parameters =
        otaSoftwareUpdateProvider_queryImage_parametersList;
    otaSoftwareUpdateProvider_clusterInfo.commands.add(
        otaSoftwareUpdateProvider_queryImage_commandInfo);
    clusterInfoMapping.put("otaSoftwareUpdateProvider", otaSoftwareUpdateProvider_clusterInfo);
    ClusterInfo otaSoftwareUpdateRequestor_clusterInfo =
        new ClusterInfo("otaSoftwareUpdateRequestor");
    List<CommandParameter> otaSoftwareUpdateRequestor_announceOtaProvider_parametersList =
        new ArrayList<>();
    CommandInfo otaSoftwareUpdateRequestor_announceOtaProvider_commandInfo = new CommandInfo();
    otaSoftwareUpdateRequestor_announceOtaProvider_commandInfo.name = "announceOtaProvider";
    otaSoftwareUpdateRequestor_announceOtaProvider_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter announceOtaProvider_providerLocation_commandParameter =
        new CommandParameter("providerLocation", byte[].class);
    otaSoftwareUpdateRequestor_announceOtaProvider_parametersList.add(
        announceOtaProvider_providerLocation_commandParameter);

    CommandParameter announceOtaProvider_vendorId_commandParameter =
        new CommandParameter("vendorId", int.class);
    otaSoftwareUpdateRequestor_announceOtaProvider_parametersList.add(
        announceOtaProvider_vendorId_commandParameter);

    CommandParameter announceOtaProvider_announcementReason_commandParameter =
        new CommandParameter("announcementReason", int.class);
    otaSoftwareUpdateRequestor_announceOtaProvider_parametersList.add(
        announceOtaProvider_announcementReason_commandParameter);

    CommandParameter announceOtaProvider_metadataForNode_commandParameter =
        new CommandParameter("metadataForNode", byte[].class);
    otaSoftwareUpdateRequestor_announceOtaProvider_parametersList.add(
        announceOtaProvider_metadataForNode_commandParameter);

    otaSoftwareUpdateRequestor_announceOtaProvider_commandInfo.parameters =
        otaSoftwareUpdateRequestor_announceOtaProvider_parametersList;
    otaSoftwareUpdateRequestor_clusterInfo.commands.add(
        otaSoftwareUpdateRequestor_announceOtaProvider_commandInfo);
    clusterInfoMapping.put("otaSoftwareUpdateRequestor", otaSoftwareUpdateRequestor_clusterInfo);
    ClusterInfo occupancySensing_clusterInfo = new ClusterInfo("occupancySensing");
    clusterInfoMapping.put("occupancySensing", occupancySensing_clusterInfo);
    ClusterInfo onOff_clusterInfo = new ClusterInfo("onOff");
    List<CommandParameter> onOff_off_parametersList = new ArrayList<>();
    CommandInfo onOff_off_commandInfo = new CommandInfo();
    onOff_off_commandInfo.name = "off";
    onOff_off_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    onOff_off_commandInfo.parameters = onOff_off_parametersList;
    onOff_clusterInfo.commands.add(onOff_off_commandInfo);
    List<CommandParameter> onOff_offWithEffect_parametersList = new ArrayList<>();
    CommandInfo onOff_offWithEffect_commandInfo = new CommandInfo();
    onOff_offWithEffect_commandInfo.name = "offWithEffect";
    onOff_offWithEffect_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter offWithEffect_effectId_commandParameter =
        new CommandParameter("effectId", int.class);
    onOff_offWithEffect_parametersList.add(offWithEffect_effectId_commandParameter);

    CommandParameter offWithEffect_effectVariant_commandParameter =
        new CommandParameter("effectVariant", int.class);
    onOff_offWithEffect_parametersList.add(offWithEffect_effectVariant_commandParameter);

    onOff_offWithEffect_commandInfo.parameters = onOff_offWithEffect_parametersList;
    onOff_clusterInfo.commands.add(onOff_offWithEffect_commandInfo);
    List<CommandParameter> onOff_on_parametersList = new ArrayList<>();
    CommandInfo onOff_on_commandInfo = new CommandInfo();
    onOff_on_commandInfo.name = "on";
    onOff_on_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    onOff_on_commandInfo.parameters = onOff_on_parametersList;
    onOff_clusterInfo.commands.add(onOff_on_commandInfo);
    List<CommandParameter> onOff_onWithRecallGlobalScene_parametersList = new ArrayList<>();
    CommandInfo onOff_onWithRecallGlobalScene_commandInfo = new CommandInfo();
    onOff_onWithRecallGlobalScene_commandInfo.name = "onWithRecallGlobalScene";
    onOff_onWithRecallGlobalScene_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    onOff_onWithRecallGlobalScene_commandInfo.parameters =
        onOff_onWithRecallGlobalScene_parametersList;
    onOff_clusterInfo.commands.add(onOff_onWithRecallGlobalScene_commandInfo);
    List<CommandParameter> onOff_onWithTimedOff_parametersList = new ArrayList<>();
    CommandInfo onOff_onWithTimedOff_commandInfo = new CommandInfo();
    onOff_onWithTimedOff_commandInfo.name = "onWithTimedOff";
    onOff_onWithTimedOff_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter onWithTimedOff_onOffControl_commandParameter =
        new CommandParameter("onOffControl", int.class);
    onOff_onWithTimedOff_parametersList.add(onWithTimedOff_onOffControl_commandParameter);

    CommandParameter onWithTimedOff_onTime_commandParameter =
        new CommandParameter("onTime", int.class);
    onOff_onWithTimedOff_parametersList.add(onWithTimedOff_onTime_commandParameter);

    CommandParameter onWithTimedOff_offWaitTime_commandParameter =
        new CommandParameter("offWaitTime", int.class);
    onOff_onWithTimedOff_parametersList.add(onWithTimedOff_offWaitTime_commandParameter);

    onOff_onWithTimedOff_commandInfo.parameters = onOff_onWithTimedOff_parametersList;
    onOff_clusterInfo.commands.add(onOff_onWithTimedOff_commandInfo);
    List<CommandParameter> onOff_toggle_parametersList = new ArrayList<>();
    CommandInfo onOff_toggle_commandInfo = new CommandInfo();
    onOff_toggle_commandInfo.name = "toggle";
    onOff_toggle_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    onOff_toggle_commandInfo.parameters = onOff_toggle_parametersList;
    onOff_clusterInfo.commands.add(onOff_toggle_commandInfo);
    clusterInfoMapping.put("onOff", onOff_clusterInfo);
    ClusterInfo onOffSwitchConfiguration_clusterInfo = new ClusterInfo("onOffSwitchConfiguration");
    clusterInfoMapping.put("onOffSwitchConfiguration", onOffSwitchConfiguration_clusterInfo);
    ClusterInfo operationalCredentials_clusterInfo = new ClusterInfo("operationalCredentials");
    List<CommandParameter> operationalCredentials_addNOC_parametersList = new ArrayList<>();
    CommandInfo operationalCredentials_addNOC_commandInfo = new CommandInfo();
    operationalCredentials_addNOC_commandInfo.name = "addNOC";
    operationalCredentials_addNOC_commandInfo.callbackClass =
        ChipClusters.OperationalCredentialsCluster.NOCResponseCallback.class;
    CommandParameter addNOC_NOCValue_commandParameter =
        new CommandParameter("NOCValue", byte[].class);
    operationalCredentials_addNOC_parametersList.add(addNOC_NOCValue_commandParameter);

    CommandParameter addNOC_ICACValue_commandParameter =
        new CommandParameter("ICACValue", byte[].class);
    operationalCredentials_addNOC_parametersList.add(addNOC_ICACValue_commandParameter);

    CommandParameter addNOC_IPKValue_commandParameter =
        new CommandParameter("IPKValue", byte[].class);
    operationalCredentials_addNOC_parametersList.add(addNOC_IPKValue_commandParameter);

    CommandParameter addNOC_caseAdminNode_commandParameter =
        new CommandParameter("caseAdminNode", long.class);
    operationalCredentials_addNOC_parametersList.add(addNOC_caseAdminNode_commandParameter);

    CommandParameter addNOC_adminVendorId_commandParameter =
        new CommandParameter("adminVendorId", int.class);
    operationalCredentials_addNOC_parametersList.add(addNOC_adminVendorId_commandParameter);

    operationalCredentials_addNOC_commandInfo.parameters =
        operationalCredentials_addNOC_parametersList;
    operationalCredentials_clusterInfo.commands.add(operationalCredentials_addNOC_commandInfo);
    List<CommandParameter> operationalCredentials_addTrustedRootCertificate_parametersList =
        new ArrayList<>();
    CommandInfo operationalCredentials_addTrustedRootCertificate_commandInfo = new CommandInfo();
    operationalCredentials_addTrustedRootCertificate_commandInfo.name = "addTrustedRootCertificate";
    operationalCredentials_addTrustedRootCertificate_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter addTrustedRootCertificate_rootCertificate_commandParameter =
        new CommandParameter("rootCertificate", byte[].class);
    operationalCredentials_addTrustedRootCertificate_parametersList.add(
        addTrustedRootCertificate_rootCertificate_commandParameter);

    operationalCredentials_addTrustedRootCertificate_commandInfo.parameters =
        operationalCredentials_addTrustedRootCertificate_parametersList;
    operationalCredentials_clusterInfo.commands.add(
        operationalCredentials_addTrustedRootCertificate_commandInfo);
    List<CommandParameter> operationalCredentials_attestationRequest_parametersList =
        new ArrayList<>();
    CommandInfo operationalCredentials_attestationRequest_commandInfo = new CommandInfo();
    operationalCredentials_attestationRequest_commandInfo.name = "attestationRequest";
    operationalCredentials_attestationRequest_commandInfo.callbackClass =
        ChipClusters.OperationalCredentialsCluster.AttestationResponseCallback.class;
    CommandParameter attestationRequest_attestationNonce_commandParameter =
        new CommandParameter("attestationNonce", byte[].class);
    operationalCredentials_attestationRequest_parametersList.add(
        attestationRequest_attestationNonce_commandParameter);

    operationalCredentials_attestationRequest_commandInfo.parameters =
        operationalCredentials_attestationRequest_parametersList;
    operationalCredentials_clusterInfo.commands.add(
        operationalCredentials_attestationRequest_commandInfo);
    List<CommandParameter> operationalCredentials_certificateChainRequest_parametersList =
        new ArrayList<>();
    CommandInfo operationalCredentials_certificateChainRequest_commandInfo = new CommandInfo();
    operationalCredentials_certificateChainRequest_commandInfo.name = "certificateChainRequest";
    operationalCredentials_certificateChainRequest_commandInfo.callbackClass =
        ChipClusters.OperationalCredentialsCluster.CertificateChainResponseCallback.class;
    CommandParameter certificateChainRequest_certificateType_commandParameter =
        new CommandParameter("certificateType", int.class);
    operationalCredentials_certificateChainRequest_parametersList.add(
        certificateChainRequest_certificateType_commandParameter);

    operationalCredentials_certificateChainRequest_commandInfo.parameters =
        operationalCredentials_certificateChainRequest_parametersList;
    operationalCredentials_clusterInfo.commands.add(
        operationalCredentials_certificateChainRequest_commandInfo);
    List<CommandParameter> operationalCredentials_opCSRRequest_parametersList = new ArrayList<>();
    CommandInfo operationalCredentials_opCSRRequest_commandInfo = new CommandInfo();
    operationalCredentials_opCSRRequest_commandInfo.name = "opCSRRequest";
    operationalCredentials_opCSRRequest_commandInfo.callbackClass =
        ChipClusters.OperationalCredentialsCluster.OpCSRResponseCallback.class;
    CommandParameter opCSRRequest_CSRNonce_commandParameter =
        new CommandParameter("CSRNonce", byte[].class);
    operationalCredentials_opCSRRequest_parametersList.add(opCSRRequest_CSRNonce_commandParameter);

    operationalCredentials_opCSRRequest_commandInfo.parameters =
        operationalCredentials_opCSRRequest_parametersList;
    operationalCredentials_clusterInfo.commands.add(
        operationalCredentials_opCSRRequest_commandInfo);
    List<CommandParameter> operationalCredentials_removeFabric_parametersList = new ArrayList<>();
    CommandInfo operationalCredentials_removeFabric_commandInfo = new CommandInfo();
    operationalCredentials_removeFabric_commandInfo.name = "removeFabric";
    operationalCredentials_removeFabric_commandInfo.callbackClass =
        ChipClusters.OperationalCredentialsCluster.NOCResponseCallback.class;
    CommandParameter removeFabric_fabricIndex_commandParameter =
        new CommandParameter("fabricIndex", int.class);
    operationalCredentials_removeFabric_parametersList.add(
        removeFabric_fabricIndex_commandParameter);

    operationalCredentials_removeFabric_commandInfo.parameters =
        operationalCredentials_removeFabric_parametersList;
    operationalCredentials_clusterInfo.commands.add(
        operationalCredentials_removeFabric_commandInfo);
    List<CommandParameter> operationalCredentials_removeTrustedRootCertificate_parametersList =
        new ArrayList<>();
    CommandInfo operationalCredentials_removeTrustedRootCertificate_commandInfo = new CommandInfo();
    operationalCredentials_removeTrustedRootCertificate_commandInfo.name =
        "removeTrustedRootCertificate";
    operationalCredentials_removeTrustedRootCertificate_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter removeTrustedRootCertificate_trustedRootIdentifier_commandParameter =
        new CommandParameter("trustedRootIdentifier", byte[].class);
    operationalCredentials_removeTrustedRootCertificate_parametersList.add(
        removeTrustedRootCertificate_trustedRootIdentifier_commandParameter);

    operationalCredentials_removeTrustedRootCertificate_commandInfo.parameters =
        operationalCredentials_removeTrustedRootCertificate_parametersList;
    operationalCredentials_clusterInfo.commands.add(
        operationalCredentials_removeTrustedRootCertificate_commandInfo);
    List<CommandParameter> operationalCredentials_updateFabricLabel_parametersList =
        new ArrayList<>();
    CommandInfo operationalCredentials_updateFabricLabel_commandInfo = new CommandInfo();
    operationalCredentials_updateFabricLabel_commandInfo.name = "updateFabricLabel";
    operationalCredentials_updateFabricLabel_commandInfo.callbackClass =
        ChipClusters.OperationalCredentialsCluster.NOCResponseCallback.class;
    CommandParameter updateFabricLabel_label_commandParameter =
        new CommandParameter("label", String.class);
    operationalCredentials_updateFabricLabel_parametersList.add(
        updateFabricLabel_label_commandParameter);

    operationalCredentials_updateFabricLabel_commandInfo.parameters =
        operationalCredentials_updateFabricLabel_parametersList;
    operationalCredentials_clusterInfo.commands.add(
        operationalCredentials_updateFabricLabel_commandInfo);
    List<CommandParameter> operationalCredentials_updateNOC_parametersList = new ArrayList<>();
    CommandInfo operationalCredentials_updateNOC_commandInfo = new CommandInfo();
    operationalCredentials_updateNOC_commandInfo.name = "updateNOC";
    operationalCredentials_updateNOC_commandInfo.callbackClass =
        ChipClusters.OperationalCredentialsCluster.NOCResponseCallback.class;
    CommandParameter updateNOC_NOCValue_commandParameter =
        new CommandParameter("NOCValue", byte[].class);
    operationalCredentials_updateNOC_parametersList.add(updateNOC_NOCValue_commandParameter);

    CommandParameter updateNOC_ICACValue_commandParameter =
        new CommandParameter("ICACValue", byte[].class);
    operationalCredentials_updateNOC_parametersList.add(updateNOC_ICACValue_commandParameter);

    operationalCredentials_updateNOC_commandInfo.parameters =
        operationalCredentials_updateNOC_parametersList;
    operationalCredentials_clusterInfo.commands.add(operationalCredentials_updateNOC_commandInfo);
    clusterInfoMapping.put("operationalCredentials", operationalCredentials_clusterInfo);
    ClusterInfo powerSource_clusterInfo = new ClusterInfo("powerSource");
    clusterInfoMapping.put("powerSource", powerSource_clusterInfo);
    ClusterInfo pressureMeasurement_clusterInfo = new ClusterInfo("pressureMeasurement");
    clusterInfoMapping.put("pressureMeasurement", pressureMeasurement_clusterInfo);
    ClusterInfo pumpConfigurationAndControl_clusterInfo =
        new ClusterInfo("pumpConfigurationAndControl");
    clusterInfoMapping.put("pumpConfigurationAndControl", pumpConfigurationAndControl_clusterInfo);
    ClusterInfo relativeHumidityMeasurement_clusterInfo =
        new ClusterInfo("relativeHumidityMeasurement");
    clusterInfoMapping.put("relativeHumidityMeasurement", relativeHumidityMeasurement_clusterInfo);
    ClusterInfo scenes_clusterInfo = new ClusterInfo("scenes");
    List<CommandParameter> scenes_addScene_parametersList = new ArrayList<>();
    CommandInfo scenes_addScene_commandInfo = new CommandInfo();
    scenes_addScene_commandInfo.name = "addScene";
    scenes_addScene_commandInfo.callbackClass =
        ChipClusters.ScenesCluster.AddSceneResponseCallback.class;
    CommandParameter addScene_groupId_commandParameter = new CommandParameter("groupId", int.class);
    scenes_addScene_parametersList.add(addScene_groupId_commandParameter);

    CommandParameter addScene_sceneId_commandParameter = new CommandParameter("sceneId", int.class);
    scenes_addScene_parametersList.add(addScene_sceneId_commandParameter);

    CommandParameter addScene_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    scenes_addScene_parametersList.add(addScene_transitionTime_commandParameter);

    CommandParameter addScene_sceneName_commandParameter =
        new CommandParameter("sceneName", String.class);
    scenes_addScene_parametersList.add(addScene_sceneName_commandParameter);

    CommandParameter addScene_clusterId_commandParameter =
        new CommandParameter("clusterId", long.class);
    scenes_addScene_parametersList.add(addScene_clusterId_commandParameter);

    CommandParameter addScene_length_commandParameter = new CommandParameter("length", int.class);
    scenes_addScene_parametersList.add(addScene_length_commandParameter);

    CommandParameter addScene_value_commandParameter = new CommandParameter("value", int.class);
    scenes_addScene_parametersList.add(addScene_value_commandParameter);

    scenes_addScene_commandInfo.parameters = scenes_addScene_parametersList;
    scenes_clusterInfo.commands.add(scenes_addScene_commandInfo);
    List<CommandParameter> scenes_getSceneMembership_parametersList = new ArrayList<>();
    CommandInfo scenes_getSceneMembership_commandInfo = new CommandInfo();
    scenes_getSceneMembership_commandInfo.name = "getSceneMembership";
    scenes_getSceneMembership_commandInfo.callbackClass =
        ChipClusters.ScenesCluster.GetSceneMembershipResponseCallback.class;
    CommandParameter getSceneMembership_groupId_commandParameter =
        new CommandParameter("groupId", int.class);
    scenes_getSceneMembership_parametersList.add(getSceneMembership_groupId_commandParameter);

    scenes_getSceneMembership_commandInfo.parameters = scenes_getSceneMembership_parametersList;
    scenes_clusterInfo.commands.add(scenes_getSceneMembership_commandInfo);
    List<CommandParameter> scenes_recallScene_parametersList = new ArrayList<>();
    CommandInfo scenes_recallScene_commandInfo = new CommandInfo();
    scenes_recallScene_commandInfo.name = "recallScene";
    scenes_recallScene_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter recallScene_groupId_commandParameter =
        new CommandParameter("groupId", int.class);
    scenes_recallScene_parametersList.add(recallScene_groupId_commandParameter);

    CommandParameter recallScene_sceneId_commandParameter =
        new CommandParameter("sceneId", int.class);
    scenes_recallScene_parametersList.add(recallScene_sceneId_commandParameter);

    CommandParameter recallScene_transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    scenes_recallScene_parametersList.add(recallScene_transitionTime_commandParameter);

    scenes_recallScene_commandInfo.parameters = scenes_recallScene_parametersList;
    scenes_clusterInfo.commands.add(scenes_recallScene_commandInfo);
    List<CommandParameter> scenes_removeAllScenes_parametersList = new ArrayList<>();
    CommandInfo scenes_removeAllScenes_commandInfo = new CommandInfo();
    scenes_removeAllScenes_commandInfo.name = "removeAllScenes";
    scenes_removeAllScenes_commandInfo.callbackClass =
        ChipClusters.ScenesCluster.RemoveAllScenesResponseCallback.class;
    CommandParameter removeAllScenes_groupId_commandParameter =
        new CommandParameter("groupId", int.class);
    scenes_removeAllScenes_parametersList.add(removeAllScenes_groupId_commandParameter);

    scenes_removeAllScenes_commandInfo.parameters = scenes_removeAllScenes_parametersList;
    scenes_clusterInfo.commands.add(scenes_removeAllScenes_commandInfo);
    List<CommandParameter> scenes_removeScene_parametersList = new ArrayList<>();
    CommandInfo scenes_removeScene_commandInfo = new CommandInfo();
    scenes_removeScene_commandInfo.name = "removeScene";
    scenes_removeScene_commandInfo.callbackClass =
        ChipClusters.ScenesCluster.RemoveSceneResponseCallback.class;
    CommandParameter removeScene_groupId_commandParameter =
        new CommandParameter("groupId", int.class);
    scenes_removeScene_parametersList.add(removeScene_groupId_commandParameter);

    CommandParameter removeScene_sceneId_commandParameter =
        new CommandParameter("sceneId", int.class);
    scenes_removeScene_parametersList.add(removeScene_sceneId_commandParameter);

    scenes_removeScene_commandInfo.parameters = scenes_removeScene_parametersList;
    scenes_clusterInfo.commands.add(scenes_removeScene_commandInfo);
    List<CommandParameter> scenes_storeScene_parametersList = new ArrayList<>();
    CommandInfo scenes_storeScene_commandInfo = new CommandInfo();
    scenes_storeScene_commandInfo.name = "storeScene";
    scenes_storeScene_commandInfo.callbackClass =
        ChipClusters.ScenesCluster.StoreSceneResponseCallback.class;
    CommandParameter storeScene_groupId_commandParameter =
        new CommandParameter("groupId", int.class);
    scenes_storeScene_parametersList.add(storeScene_groupId_commandParameter);

    CommandParameter storeScene_sceneId_commandParameter =
        new CommandParameter("sceneId", int.class);
    scenes_storeScene_parametersList.add(storeScene_sceneId_commandParameter);

    scenes_storeScene_commandInfo.parameters = scenes_storeScene_parametersList;
    scenes_clusterInfo.commands.add(scenes_storeScene_commandInfo);
    List<CommandParameter> scenes_viewScene_parametersList = new ArrayList<>();
    CommandInfo scenes_viewScene_commandInfo = new CommandInfo();
    scenes_viewScene_commandInfo.name = "viewScene";
    scenes_viewScene_commandInfo.callbackClass =
        ChipClusters.ScenesCluster.ViewSceneResponseCallback.class;
    CommandParameter viewScene_groupId_commandParameter =
        new CommandParameter("groupId", int.class);
    scenes_viewScene_parametersList.add(viewScene_groupId_commandParameter);

    CommandParameter viewScene_sceneId_commandParameter =
        new CommandParameter("sceneId", int.class);
    scenes_viewScene_parametersList.add(viewScene_sceneId_commandParameter);

    scenes_viewScene_commandInfo.parameters = scenes_viewScene_parametersList;
    scenes_clusterInfo.commands.add(scenes_viewScene_commandInfo);
    clusterInfoMapping.put("scenes", scenes_clusterInfo);
    ClusterInfo softwareDiagnostics_clusterInfo = new ClusterInfo("softwareDiagnostics");
    List<CommandParameter> softwareDiagnostics_resetWatermarks_parametersList = new ArrayList<>();
    CommandInfo softwareDiagnostics_resetWatermarks_commandInfo = new CommandInfo();
    softwareDiagnostics_resetWatermarks_commandInfo.name = "resetWatermarks";
    softwareDiagnostics_resetWatermarks_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    softwareDiagnostics_resetWatermarks_commandInfo.parameters =
        softwareDiagnostics_resetWatermarks_parametersList;
    softwareDiagnostics_clusterInfo.commands.add(softwareDiagnostics_resetWatermarks_commandInfo);
    clusterInfoMapping.put("softwareDiagnostics", softwareDiagnostics_clusterInfo);
    ClusterInfo switch_clusterInfo = new ClusterInfo("switch");
    clusterInfoMapping.put("switch", switch_clusterInfo);
    ClusterInfo tvChannel_clusterInfo = new ClusterInfo("tvChannel");
    List<CommandParameter> tvChannel_changeChannel_parametersList = new ArrayList<>();
    CommandInfo tvChannel_changeChannel_commandInfo = new CommandInfo();
    tvChannel_changeChannel_commandInfo.name = "changeChannel";
    tvChannel_changeChannel_commandInfo.callbackClass =
        ChipClusters.TvChannelCluster.ChangeChannelResponseCallback.class;
    CommandParameter changeChannel_match_commandParameter =
        new CommandParameter("match", String.class);
    tvChannel_changeChannel_parametersList.add(changeChannel_match_commandParameter);

    tvChannel_changeChannel_commandInfo.parameters = tvChannel_changeChannel_parametersList;
    tvChannel_clusterInfo.commands.add(tvChannel_changeChannel_commandInfo);
    List<CommandParameter> tvChannel_changeChannelByNumber_parametersList = new ArrayList<>();
    CommandInfo tvChannel_changeChannelByNumber_commandInfo = new CommandInfo();
    tvChannel_changeChannelByNumber_commandInfo.name = "changeChannelByNumber";
    tvChannel_changeChannelByNumber_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter changeChannelByNumber_majorNumber_commandParameter =
        new CommandParameter("majorNumber", int.class);
    tvChannel_changeChannelByNumber_parametersList.add(
        changeChannelByNumber_majorNumber_commandParameter);

    CommandParameter changeChannelByNumber_minorNumber_commandParameter =
        new CommandParameter("minorNumber", int.class);
    tvChannel_changeChannelByNumber_parametersList.add(
        changeChannelByNumber_minorNumber_commandParameter);

    tvChannel_changeChannelByNumber_commandInfo.parameters =
        tvChannel_changeChannelByNumber_parametersList;
    tvChannel_clusterInfo.commands.add(tvChannel_changeChannelByNumber_commandInfo);
    List<CommandParameter> tvChannel_skipChannel_parametersList = new ArrayList<>();
    CommandInfo tvChannel_skipChannel_commandInfo = new CommandInfo();
    tvChannel_skipChannel_commandInfo.name = "skipChannel";
    tvChannel_skipChannel_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    CommandParameter skipChannel_count_commandParameter = new CommandParameter("count", int.class);
    tvChannel_skipChannel_parametersList.add(skipChannel_count_commandParameter);

    tvChannel_skipChannel_commandInfo.parameters = tvChannel_skipChannel_parametersList;
    tvChannel_clusterInfo.commands.add(tvChannel_skipChannel_commandInfo);
    clusterInfoMapping.put("tvChannel", tvChannel_clusterInfo);
    ClusterInfo targetNavigator_clusterInfo = new ClusterInfo("targetNavigator");
    List<CommandParameter> targetNavigator_navigateTarget_parametersList = new ArrayList<>();
    CommandInfo targetNavigator_navigateTarget_commandInfo = new CommandInfo();
    targetNavigator_navigateTarget_commandInfo.name = "navigateTarget";
    targetNavigator_navigateTarget_commandInfo.callbackClass =
        ChipClusters.TargetNavigatorCluster.NavigateTargetResponseCallback.class;
    CommandParameter navigateTarget_target_commandParameter =
        new CommandParameter("target", int.class);
    targetNavigator_navigateTarget_parametersList.add(navigateTarget_target_commandParameter);

    CommandParameter navigateTarget_data_commandParameter =
        new CommandParameter("data", String.class);
    targetNavigator_navigateTarget_parametersList.add(navigateTarget_data_commandParameter);

    targetNavigator_navigateTarget_commandInfo.parameters =
        targetNavigator_navigateTarget_parametersList;
    targetNavigator_clusterInfo.commands.add(targetNavigator_navigateTarget_commandInfo);
    clusterInfoMapping.put("targetNavigator", targetNavigator_clusterInfo);
    ClusterInfo temperatureMeasurement_clusterInfo = new ClusterInfo("temperatureMeasurement");
    clusterInfoMapping.put("temperatureMeasurement", temperatureMeasurement_clusterInfo);
    ClusterInfo testCluster_clusterInfo = new ClusterInfo("testCluster");
    List<CommandParameter> testCluster_test_parametersList = new ArrayList<>();
    CommandInfo testCluster_test_commandInfo = new CommandInfo();
    testCluster_test_commandInfo.name = "test";
    testCluster_test_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    testCluster_test_commandInfo.parameters = testCluster_test_parametersList;
    testCluster_clusterInfo.commands.add(testCluster_test_commandInfo);
    List<CommandParameter> testCluster_testAddArguments_parametersList = new ArrayList<>();
    CommandInfo testCluster_testAddArguments_commandInfo = new CommandInfo();
    testCluster_testAddArguments_commandInfo.name = "testAddArguments";
    testCluster_testAddArguments_commandInfo.callbackClass =
        ChipClusters.TestClusterCluster.TestAddArgumentsResponseCallback.class;
    CommandParameter testAddArguments_arg1_commandParameter =
        new CommandParameter("arg1", int.class);
    testCluster_testAddArguments_parametersList.add(testAddArguments_arg1_commandParameter);

    CommandParameter testAddArguments_arg2_commandParameter =
        new CommandParameter("arg2", int.class);
    testCluster_testAddArguments_parametersList.add(testAddArguments_arg2_commandParameter);

    testCluster_testAddArguments_commandInfo.parameters =
        testCluster_testAddArguments_parametersList;
    testCluster_clusterInfo.commands.add(testCluster_testAddArguments_commandInfo);
    List<CommandParameter> testCluster_testNotHandled_parametersList = new ArrayList<>();
    CommandInfo testCluster_testNotHandled_commandInfo = new CommandInfo();
    testCluster_testNotHandled_commandInfo.name = "testNotHandled";
    testCluster_testNotHandled_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    testCluster_testNotHandled_commandInfo.parameters = testCluster_testNotHandled_parametersList;
    testCluster_clusterInfo.commands.add(testCluster_testNotHandled_commandInfo);
    List<CommandParameter> testCluster_testSpecific_parametersList = new ArrayList<>();
    CommandInfo testCluster_testSpecific_commandInfo = new CommandInfo();
    testCluster_testSpecific_commandInfo.name = "testSpecific";
    testCluster_testSpecific_commandInfo.callbackClass =
        ChipClusters.TestClusterCluster.TestSpecificResponseCallback.class;
    testCluster_testSpecific_commandInfo.parameters = testCluster_testSpecific_parametersList;
    testCluster_clusterInfo.commands.add(testCluster_testSpecific_commandInfo);
    List<CommandParameter> testCluster_testUnknownCommand_parametersList = new ArrayList<>();
    CommandInfo testCluster_testUnknownCommand_commandInfo = new CommandInfo();
    testCluster_testUnknownCommand_commandInfo.name = "testUnknownCommand";
    testCluster_testUnknownCommand_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    testCluster_testUnknownCommand_commandInfo.parameters =
        testCluster_testUnknownCommand_parametersList;
    testCluster_clusterInfo.commands.add(testCluster_testUnknownCommand_commandInfo);
    clusterInfoMapping.put("testCluster", testCluster_clusterInfo);
    ClusterInfo thermostat_clusterInfo = new ClusterInfo("thermostat");
    List<CommandParameter> thermostat_clearWeeklySchedule_parametersList = new ArrayList<>();
    CommandInfo thermostat_clearWeeklySchedule_commandInfo = new CommandInfo();
    thermostat_clearWeeklySchedule_commandInfo.name = "clearWeeklySchedule";
    thermostat_clearWeeklySchedule_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    thermostat_clearWeeklySchedule_commandInfo.parameters =
        thermostat_clearWeeklySchedule_parametersList;
    thermostat_clusterInfo.commands.add(thermostat_clearWeeklySchedule_commandInfo);
    List<CommandParameter> thermostat_getRelayStatusLog_parametersList = new ArrayList<>();
    CommandInfo thermostat_getRelayStatusLog_commandInfo = new CommandInfo();
    thermostat_getRelayStatusLog_commandInfo.name = "getRelayStatusLog";
    thermostat_getRelayStatusLog_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    thermostat_getRelayStatusLog_commandInfo.parameters =
        thermostat_getRelayStatusLog_parametersList;
    thermostat_clusterInfo.commands.add(thermostat_getRelayStatusLog_commandInfo);
    List<CommandParameter> thermostat_getWeeklySchedule_parametersList = new ArrayList<>();
    CommandInfo thermostat_getWeeklySchedule_commandInfo = new CommandInfo();
    thermostat_getWeeklySchedule_commandInfo.name = "getWeeklySchedule";
    thermostat_getWeeklySchedule_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter getWeeklySchedule_daysToReturn_commandParameter =
        new CommandParameter("daysToReturn", int.class);
    thermostat_getWeeklySchedule_parametersList.add(
        getWeeklySchedule_daysToReturn_commandParameter);

    CommandParameter getWeeklySchedule_modeToReturn_commandParameter =
        new CommandParameter("modeToReturn", int.class);
    thermostat_getWeeklySchedule_parametersList.add(
        getWeeklySchedule_modeToReturn_commandParameter);

    thermostat_getWeeklySchedule_commandInfo.parameters =
        thermostat_getWeeklySchedule_parametersList;
    thermostat_clusterInfo.commands.add(thermostat_getWeeklySchedule_commandInfo);
    List<CommandParameter> thermostat_setWeeklySchedule_parametersList = new ArrayList<>();
    CommandInfo thermostat_setWeeklySchedule_commandInfo = new CommandInfo();
    thermostat_setWeeklySchedule_commandInfo.name = "setWeeklySchedule";
    thermostat_setWeeklySchedule_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter setWeeklySchedule_numberOfTransitionsForSequence_commandParameter =
        new CommandParameter("numberOfTransitionsForSequence", int.class);
    thermostat_setWeeklySchedule_parametersList.add(
        setWeeklySchedule_numberOfTransitionsForSequence_commandParameter);

    CommandParameter setWeeklySchedule_dayOfWeekForSequence_commandParameter =
        new CommandParameter("dayOfWeekForSequence", int.class);
    thermostat_setWeeklySchedule_parametersList.add(
        setWeeklySchedule_dayOfWeekForSequence_commandParameter);

    CommandParameter setWeeklySchedule_modeForSequence_commandParameter =
        new CommandParameter("modeForSequence", int.class);
    thermostat_setWeeklySchedule_parametersList.add(
        setWeeklySchedule_modeForSequence_commandParameter);

    CommandParameter setWeeklySchedule_payload_commandParameter =
        new CommandParameter("payload", int.class);
    thermostat_setWeeklySchedule_parametersList.add(setWeeklySchedule_payload_commandParameter);

    thermostat_setWeeklySchedule_commandInfo.parameters =
        thermostat_setWeeklySchedule_parametersList;
    thermostat_clusterInfo.commands.add(thermostat_setWeeklySchedule_commandInfo);
    List<CommandParameter> thermostat_setpointRaiseLower_parametersList = new ArrayList<>();
    CommandInfo thermostat_setpointRaiseLower_commandInfo = new CommandInfo();
    thermostat_setpointRaiseLower_commandInfo.name = "setpointRaiseLower";
    thermostat_setpointRaiseLower_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter setpointRaiseLower_mode_commandParameter =
        new CommandParameter("mode", int.class);
    thermostat_setpointRaiseLower_parametersList.add(setpointRaiseLower_mode_commandParameter);

    CommandParameter setpointRaiseLower_amount_commandParameter =
        new CommandParameter("amount", int.class);
    thermostat_setpointRaiseLower_parametersList.add(setpointRaiseLower_amount_commandParameter);

    thermostat_setpointRaiseLower_commandInfo.parameters =
        thermostat_setpointRaiseLower_parametersList;
    thermostat_clusterInfo.commands.add(thermostat_setpointRaiseLower_commandInfo);
    clusterInfoMapping.put("thermostat", thermostat_clusterInfo);
    ClusterInfo thermostatUserInterfaceConfiguration_clusterInfo =
        new ClusterInfo("thermostatUserInterfaceConfiguration");
    clusterInfoMapping.put(
        "thermostatUserInterfaceConfiguration", thermostatUserInterfaceConfiguration_clusterInfo);
    ClusterInfo threadNetworkDiagnostics_clusterInfo = new ClusterInfo("threadNetworkDiagnostics");
    List<CommandParameter> threadNetworkDiagnostics_resetCounts_parametersList = new ArrayList<>();
    CommandInfo threadNetworkDiagnostics_resetCounts_commandInfo = new CommandInfo();
    threadNetworkDiagnostics_resetCounts_commandInfo.name = "resetCounts";
    threadNetworkDiagnostics_resetCounts_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    threadNetworkDiagnostics_resetCounts_commandInfo.parameters =
        threadNetworkDiagnostics_resetCounts_parametersList;
    threadNetworkDiagnostics_clusterInfo.commands.add(
        threadNetworkDiagnostics_resetCounts_commandInfo);
    clusterInfoMapping.put("threadNetworkDiagnostics", threadNetworkDiagnostics_clusterInfo);
    ClusterInfo wakeOnLan_clusterInfo = new ClusterInfo("wakeOnLan");
    clusterInfoMapping.put("wakeOnLan", wakeOnLan_clusterInfo);
    ClusterInfo wiFiNetworkDiagnostics_clusterInfo = new ClusterInfo("wiFiNetworkDiagnostics");
    List<CommandParameter> wiFiNetworkDiagnostics_resetCounts_parametersList = new ArrayList<>();
    CommandInfo wiFiNetworkDiagnostics_resetCounts_commandInfo = new CommandInfo();
    wiFiNetworkDiagnostics_resetCounts_commandInfo.name = "resetCounts";
    wiFiNetworkDiagnostics_resetCounts_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    wiFiNetworkDiagnostics_resetCounts_commandInfo.parameters =
        wiFiNetworkDiagnostics_resetCounts_parametersList;
    wiFiNetworkDiagnostics_clusterInfo.commands.add(wiFiNetworkDiagnostics_resetCounts_commandInfo);
    clusterInfoMapping.put("wiFiNetworkDiagnostics", wiFiNetworkDiagnostics_clusterInfo);
    ClusterInfo windowCovering_clusterInfo = new ClusterInfo("windowCovering");
    List<CommandParameter> windowCovering_downOrClose_parametersList = new ArrayList<>();
    CommandInfo windowCovering_downOrClose_commandInfo = new CommandInfo();
    windowCovering_downOrClose_commandInfo.name = "downOrClose";
    windowCovering_downOrClose_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    windowCovering_downOrClose_commandInfo.parameters = windowCovering_downOrClose_parametersList;
    windowCovering_clusterInfo.commands.add(windowCovering_downOrClose_commandInfo);
    List<CommandParameter> windowCovering_goToLiftPercentage_parametersList = new ArrayList<>();
    CommandInfo windowCovering_goToLiftPercentage_commandInfo = new CommandInfo();
    windowCovering_goToLiftPercentage_commandInfo.name = "goToLiftPercentage";
    windowCovering_goToLiftPercentage_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter goToLiftPercentage_liftPercentageValue_commandParameter =
        new CommandParameter("liftPercentageValue", int.class);
    windowCovering_goToLiftPercentage_parametersList.add(
        goToLiftPercentage_liftPercentageValue_commandParameter);

    CommandParameter goToLiftPercentage_liftPercent100thsValue_commandParameter =
        new CommandParameter("liftPercent100thsValue", int.class);
    windowCovering_goToLiftPercentage_parametersList.add(
        goToLiftPercentage_liftPercent100thsValue_commandParameter);

    windowCovering_goToLiftPercentage_commandInfo.parameters =
        windowCovering_goToLiftPercentage_parametersList;
    windowCovering_clusterInfo.commands.add(windowCovering_goToLiftPercentage_commandInfo);
    List<CommandParameter> windowCovering_goToLiftValue_parametersList = new ArrayList<>();
    CommandInfo windowCovering_goToLiftValue_commandInfo = new CommandInfo();
    windowCovering_goToLiftValue_commandInfo.name = "goToLiftValue";
    windowCovering_goToLiftValue_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter goToLiftValue_liftValue_commandParameter =
        new CommandParameter("liftValue", int.class);
    windowCovering_goToLiftValue_parametersList.add(goToLiftValue_liftValue_commandParameter);

    windowCovering_goToLiftValue_commandInfo.parameters =
        windowCovering_goToLiftValue_parametersList;
    windowCovering_clusterInfo.commands.add(windowCovering_goToLiftValue_commandInfo);
    List<CommandParameter> windowCovering_goToTiltPercentage_parametersList = new ArrayList<>();
    CommandInfo windowCovering_goToTiltPercentage_commandInfo = new CommandInfo();
    windowCovering_goToTiltPercentage_commandInfo.name = "goToTiltPercentage";
    windowCovering_goToTiltPercentage_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter goToTiltPercentage_tiltPercentageValue_commandParameter =
        new CommandParameter("tiltPercentageValue", int.class);
    windowCovering_goToTiltPercentage_parametersList.add(
        goToTiltPercentage_tiltPercentageValue_commandParameter);

    CommandParameter goToTiltPercentage_tiltPercent100thsValue_commandParameter =
        new CommandParameter("tiltPercent100thsValue", int.class);
    windowCovering_goToTiltPercentage_parametersList.add(
        goToTiltPercentage_tiltPercent100thsValue_commandParameter);

    windowCovering_goToTiltPercentage_commandInfo.parameters =
        windowCovering_goToTiltPercentage_parametersList;
    windowCovering_clusterInfo.commands.add(windowCovering_goToTiltPercentage_commandInfo);
    List<CommandParameter> windowCovering_goToTiltValue_parametersList = new ArrayList<>();
    CommandInfo windowCovering_goToTiltValue_commandInfo = new CommandInfo();
    windowCovering_goToTiltValue_commandInfo.name = "goToTiltValue";
    windowCovering_goToTiltValue_commandInfo.callbackClass =
        ChipClusters.DefaultClusterCallback.class;
    CommandParameter goToTiltValue_tiltValue_commandParameter =
        new CommandParameter("tiltValue", int.class);
    windowCovering_goToTiltValue_parametersList.add(goToTiltValue_tiltValue_commandParameter);

    windowCovering_goToTiltValue_commandInfo.parameters =
        windowCovering_goToTiltValue_parametersList;
    windowCovering_clusterInfo.commands.add(windowCovering_goToTiltValue_commandInfo);
    List<CommandParameter> windowCovering_stopMotion_parametersList = new ArrayList<>();
    CommandInfo windowCovering_stopMotion_commandInfo = new CommandInfo();
    windowCovering_stopMotion_commandInfo.name = "stopMotion";
    windowCovering_stopMotion_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    windowCovering_stopMotion_commandInfo.parameters = windowCovering_stopMotion_parametersList;
    windowCovering_clusterInfo.commands.add(windowCovering_stopMotion_commandInfo);
    List<CommandParameter> windowCovering_upOrOpen_parametersList = new ArrayList<>();
    CommandInfo windowCovering_upOrOpen_commandInfo = new CommandInfo();
    windowCovering_upOrOpen_commandInfo.name = "upOrOpen";
    windowCovering_upOrOpen_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
    windowCovering_upOrOpen_commandInfo.parameters = windowCovering_upOrOpen_parametersList;
    windowCovering_clusterInfo.commands.add(windowCovering_upOrOpen_commandInfo);
    clusterInfoMapping.put("windowCovering", windowCovering_clusterInfo);
    return clusterInfoMapping;
>>>>>>> a4fd0282e (no error code generation)
  }
}
