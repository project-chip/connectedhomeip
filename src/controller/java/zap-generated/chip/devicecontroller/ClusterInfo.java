/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

package chip.devicecontroller;

import java.util.List;

public class ClusterInfoMapping {

  public Map<String, ClusterInfo> getClusterMap() {
    Map<String, ClusterInfo> clusterInfoMapping = new Hashmap<>();
    ClusterInfo accountLogin_clusterInfo = new ClusterInfo("accountLogin");
    List<CommandParameter> getSetupPIN_parametersList = new ArrayList<>();
    CommandInfo getSetupPIN_commandInfo = new CommandInfo();
    getSetupPIN_commandInfo.name = "getSetupPIN";
    accountLogin_commandInfo.callbackClass = GetSetupPINResponseCallback.class;
    CommandParameter tempAccountIdentifier_commandParameter =
        new CommandParameter("tempAccountIdentifier", String.class);
    getSetupPIN_parametersList.add(tempAccountIdentifier_commandParameter);

    getSetupPIN_commandInfo.parameters = getSetupPIN_parametersList;
    accountLogin_clusterInfo.commands.add(getSetupPIN_commandInfo);
    List<CommandParameter> login_parametersList = new ArrayList<>();
    CommandInfo login_commandInfo = new CommandInfo();
    login_commandInfo.name = "login";
    accountLogin_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter tempAccountIdentifier_commandParameter =
        new CommandParameter("tempAccountIdentifier", String.class);
    login_parametersList.add(tempAccountIdentifier_commandParameter);

    CommandParameter setupPIN_commandParameter = new CommandParameter("setupPIN", String.class);
    login_parametersList.add(setupPIN_commandParameter);

    login_commandInfo.parameters = login_parametersList;
    accountLogin_clusterInfo.commands.add(login_commandInfo);
    clusterInfoMapping.put("accountLogin", accountLogin_clusterInfo);
    ClusterInfo administratorCommissioning_clusterInfo =
        new ClusterInfo("administratorCommissioning");
    List<CommandParameter> openBasicCommissioningWindow_parametersList = new ArrayList<>();
    CommandInfo openBasicCommissioningWindow_commandInfo = new CommandInfo();
    openBasicCommissioningWindow_commandInfo.name = "openBasicCommissioningWindow";
    administratorCommissioning_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter commissioningTimeout_commandParameter =
        new CommandParameter("commissioningTimeout", int.class);
    openBasicCommissioningWindow_parametersList.add(commissioningTimeout_commandParameter);

    openBasicCommissioningWindow_commandInfo.parameters =
        openBasicCommissioningWindow_parametersList;
    administratorCommissioning_clusterInfo.commands.add(openBasicCommissioningWindow_commandInfo);
    List<CommandParameter> openCommissioningWindow_parametersList = new ArrayList<>();
    CommandInfo openCommissioningWindow_commandInfo = new CommandInfo();
    openCommissioningWindow_commandInfo.name = "openCommissioningWindow";
    administratorCommissioning_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter commissioningTimeout_commandParameter =
        new CommandParameter("commissioningTimeout", int.class);
    openCommissioningWindow_parametersList.add(commissioningTimeout_commandParameter);

    CommandParameter PAKEVerifier_commandParameter =
        new CommandParameter("PAKEVerifier", byte[].class);
    openCommissioningWindow_parametersList.add(PAKEVerifier_commandParameter);

    CommandParameter discriminator_commandParameter =
        new CommandParameter("discriminator", int.class);
    openCommissioningWindow_parametersList.add(discriminator_commandParameter);

    CommandParameter iterations_commandParameter = new CommandParameter("iterations", long.class);
    openCommissioningWindow_parametersList.add(iterations_commandParameter);

    CommandParameter salt_commandParameter = new CommandParameter("salt", byte[].class);
    openCommissioningWindow_parametersList.add(salt_commandParameter);

    CommandParameter passcodeID_commandParameter = new CommandParameter("passcodeID", int.class);
    openCommissioningWindow_parametersList.add(passcodeID_commandParameter);

    openCommissioningWindow_commandInfo.parameters = openCommissioningWindow_parametersList;
    administratorCommissioning_clusterInfo.commands.add(openCommissioningWindow_commandInfo);
    List<CommandParameter> revokeCommissioning_parametersList = new ArrayList<>();
    CommandInfo revokeCommissioning_commandInfo = new CommandInfo();
    revokeCommissioning_commandInfo.name = "revokeCommissioning";
    administratorCommissioning_commandInfo.callbackClass = DefaultClusterCallback.class;
    revokeCommissioning_commandInfo.parameters = revokeCommissioning_parametersList;
    administratorCommissioning_clusterInfo.commands.add(revokeCommissioning_commandInfo);
    clusterInfoMapping.put("administratorCommissioning", administratorCommissioning_clusterInfo);
    ClusterInfo applicationBasic_clusterInfo = new ClusterInfo("applicationBasic");
    List<CommandParameter> changeStatus_parametersList = new ArrayList<>();
    CommandInfo changeStatus_commandInfo = new CommandInfo();
    changeStatus_commandInfo.name = "changeStatus";
    applicationBasic_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter status_commandParameter = new CommandParameter("status", int.class);
    changeStatus_parametersList.add(status_commandParameter);

    changeStatus_commandInfo.parameters = changeStatus_parametersList;
    applicationBasic_clusterInfo.commands.add(changeStatus_commandInfo);
    clusterInfoMapping.put("applicationBasic", applicationBasic_clusterInfo);
    ClusterInfo applicationLauncher_clusterInfo = new ClusterInfo("applicationLauncher");
    List<CommandParameter> launchApp_parametersList = new ArrayList<>();
    CommandInfo launchApp_commandInfo = new CommandInfo();
    launchApp_commandInfo.name = "launchApp";
    applicationLauncher_commandInfo.callbackClass = LaunchAppResponseCallback.class;
    CommandParameter data_commandParameter = new CommandParameter("data", String.class);
    launchApp_parametersList.add(data_commandParameter);

    CommandParameter catalogVendorId_commandParameter =
        new CommandParameter("catalogVendorId", int.class);
    launchApp_parametersList.add(catalogVendorId_commandParameter);

    CommandParameter applicationId_commandParameter =
        new CommandParameter("applicationId", String.class);
    launchApp_parametersList.add(applicationId_commandParameter);

    launchApp_commandInfo.parameters = launchApp_parametersList;
    applicationLauncher_clusterInfo.commands.add(launchApp_commandInfo);
    clusterInfoMapping.put("applicationLauncher", applicationLauncher_clusterInfo);
    ClusterInfo audioOutput_clusterInfo = new ClusterInfo("audioOutput");
    List<CommandParameter> renameOutput_parametersList = new ArrayList<>();
    CommandInfo renameOutput_commandInfo = new CommandInfo();
    renameOutput_commandInfo.name = "renameOutput";
    audioOutput_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter index_commandParameter = new CommandParameter("index", int.class);
    renameOutput_parametersList.add(index_commandParameter);

    CommandParameter name_commandParameter = new CommandParameter("name", String.class);
    renameOutput_parametersList.add(name_commandParameter);

    renameOutput_commandInfo.parameters = renameOutput_parametersList;
    audioOutput_clusterInfo.commands.add(renameOutput_commandInfo);
    List<CommandParameter> selectOutput_parametersList = new ArrayList<>();
    CommandInfo selectOutput_commandInfo = new CommandInfo();
    selectOutput_commandInfo.name = "selectOutput";
    audioOutput_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter index_commandParameter = new CommandParameter("index", int.class);
    selectOutput_parametersList.add(index_commandParameter);

    selectOutput_commandInfo.parameters = selectOutput_parametersList;
    audioOutput_clusterInfo.commands.add(selectOutput_commandInfo);
    clusterInfoMapping.put("audioOutput", audioOutput_clusterInfo);
    ClusterInfo barrierControl_clusterInfo = new ClusterInfo("barrierControl");
    List<CommandParameter> barrierControlGoToPercent_parametersList = new ArrayList<>();
    CommandInfo barrierControlGoToPercent_commandInfo = new CommandInfo();
    barrierControlGoToPercent_commandInfo.name = "barrierControlGoToPercent";
    barrierControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter percentOpen_commandParameter = new CommandParameter("percentOpen", int.class);
    barrierControlGoToPercent_parametersList.add(percentOpen_commandParameter);

    barrierControlGoToPercent_commandInfo.parameters = barrierControlGoToPercent_parametersList;
    barrierControl_clusterInfo.commands.add(barrierControlGoToPercent_commandInfo);
    List<CommandParameter> barrierControlStop_parametersList = new ArrayList<>();
    CommandInfo barrierControlStop_commandInfo = new CommandInfo();
    barrierControlStop_commandInfo.name = "barrierControlStop";
    barrierControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    barrierControlStop_commandInfo.parameters = barrierControlStop_parametersList;
    barrierControl_clusterInfo.commands.add(barrierControlStop_commandInfo);
    clusterInfoMapping.put("barrierControl", barrierControl_clusterInfo);
    ClusterInfo basic_clusterInfo = new ClusterInfo("basic");
    List<CommandParameter> mfgSpecificPing_parametersList = new ArrayList<>();
    CommandInfo mfgSpecificPing_commandInfo = new CommandInfo();
    mfgSpecificPing_commandInfo.name = "mfgSpecificPing";
    basic_commandInfo.callbackClass = DefaultClusterCallback.class;
    mfgSpecificPing_commandInfo.parameters = mfgSpecificPing_parametersList;
    basic_clusterInfo.commands.add(mfgSpecificPing_commandInfo);
    clusterInfoMapping.put("basic", basic_clusterInfo);
    ClusterInfo binaryInputBasic_clusterInfo = new ClusterInfo("binaryInputBasic");
    clusterInfoMapping.put("binaryInputBasic", binaryInputBasic_clusterInfo);
    ClusterInfo binding_clusterInfo = new ClusterInfo("binding");
    List<CommandParameter> bind_parametersList = new ArrayList<>();
    CommandInfo bind_commandInfo = new CommandInfo();
    bind_commandInfo.name = "bind";
    binding_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter nodeId_commandParameter = new CommandParameter("nodeId", long.class);
    bind_parametersList.add(nodeId_commandParameter);

    CommandParameter groupId_commandParameter = new CommandParameter("groupId", int.class);
    bind_parametersList.add(groupId_commandParameter);

    CommandParameter endpointId_commandParameter = new CommandParameter("endpointId", int.class);
    bind_parametersList.add(endpointId_commandParameter);

    CommandParameter clusterId_commandParameter = new CommandParameter("clusterId", long.class);
    bind_parametersList.add(clusterId_commandParameter);

    bind_commandInfo.parameters = bind_parametersList;
    binding_clusterInfo.commands.add(bind_commandInfo);
    List<CommandParameter> unbind_parametersList = new ArrayList<>();
    CommandInfo unbind_commandInfo = new CommandInfo();
    unbind_commandInfo.name = "unbind";
    binding_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter nodeId_commandParameter = new CommandParameter("nodeId", long.class);
    unbind_parametersList.add(nodeId_commandParameter);

    CommandParameter groupId_commandParameter = new CommandParameter("groupId", int.class);
    unbind_parametersList.add(groupId_commandParameter);

    CommandParameter endpointId_commandParameter = new CommandParameter("endpointId", int.class);
    unbind_parametersList.add(endpointId_commandParameter);

    CommandParameter clusterId_commandParameter = new CommandParameter("clusterId", long.class);
    unbind_parametersList.add(clusterId_commandParameter);

    unbind_commandInfo.parameters = unbind_parametersList;
    binding_clusterInfo.commands.add(unbind_commandInfo);
    clusterInfoMapping.put("binding", binding_clusterInfo);
    ClusterInfo bridgedDeviceBasic_clusterInfo = new ClusterInfo("bridgedDeviceBasic");
    clusterInfoMapping.put("bridgedDeviceBasic", bridgedDeviceBasic_clusterInfo);
    ClusterInfo colorControl_clusterInfo = new ClusterInfo("colorControl");
    List<CommandParameter> colorLoopSet_parametersList = new ArrayList<>();
    CommandInfo colorLoopSet_commandInfo = new CommandInfo();
    colorLoopSet_commandInfo.name = "colorLoopSet";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter updateFlags_commandParameter = new CommandParameter("updateFlags", int.class);
    colorLoopSet_parametersList.add(updateFlags_commandParameter);

    CommandParameter action_commandParameter = new CommandParameter("action", int.class);
    colorLoopSet_parametersList.add(action_commandParameter);

    CommandParameter direction_commandParameter = new CommandParameter("direction", int.class);
    colorLoopSet_parametersList.add(direction_commandParameter);

    CommandParameter time_commandParameter = new CommandParameter("time", int.class);
    colorLoopSet_parametersList.add(time_commandParameter);

    CommandParameter startHue_commandParameter = new CommandParameter("startHue", int.class);
    colorLoopSet_parametersList.add(startHue_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    colorLoopSet_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    colorLoopSet_parametersList.add(optionsOverride_commandParameter);

    colorLoopSet_commandInfo.parameters = colorLoopSet_parametersList;
    colorControl_clusterInfo.commands.add(colorLoopSet_commandInfo);
    List<CommandParameter> enhancedMoveHue_parametersList = new ArrayList<>();
    CommandInfo enhancedMoveHue_commandInfo = new CommandInfo();
    enhancedMoveHue_commandInfo.name = "enhancedMoveHue";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter moveMode_commandParameter = new CommandParameter("moveMode", int.class);
    enhancedMoveHue_parametersList.add(moveMode_commandParameter);

    CommandParameter rate_commandParameter = new CommandParameter("rate", int.class);
    enhancedMoveHue_parametersList.add(rate_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    enhancedMoveHue_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    enhancedMoveHue_parametersList.add(optionsOverride_commandParameter);

    enhancedMoveHue_commandInfo.parameters = enhancedMoveHue_parametersList;
    colorControl_clusterInfo.commands.add(enhancedMoveHue_commandInfo);
    List<CommandParameter> enhancedMoveToHue_parametersList = new ArrayList<>();
    CommandInfo enhancedMoveToHue_commandInfo = new CommandInfo();
    enhancedMoveToHue_commandInfo.name = "enhancedMoveToHue";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter enhancedHue_commandParameter = new CommandParameter("enhancedHue", int.class);
    enhancedMoveToHue_parametersList.add(enhancedHue_commandParameter);

    CommandParameter direction_commandParameter = new CommandParameter("direction", int.class);
    enhancedMoveToHue_parametersList.add(direction_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    enhancedMoveToHue_parametersList.add(transitionTime_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    enhancedMoveToHue_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    enhancedMoveToHue_parametersList.add(optionsOverride_commandParameter);

    enhancedMoveToHue_commandInfo.parameters = enhancedMoveToHue_parametersList;
    colorControl_clusterInfo.commands.add(enhancedMoveToHue_commandInfo);
    List<CommandParameter> enhancedMoveToHueAndSaturation_parametersList = new ArrayList<>();
    CommandInfo enhancedMoveToHueAndSaturation_commandInfo = new CommandInfo();
    enhancedMoveToHueAndSaturation_commandInfo.name = "enhancedMoveToHueAndSaturation";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter enhancedHue_commandParameter = new CommandParameter("enhancedHue", int.class);
    enhancedMoveToHueAndSaturation_parametersList.add(enhancedHue_commandParameter);

    CommandParameter saturation_commandParameter = new CommandParameter("saturation", int.class);
    enhancedMoveToHueAndSaturation_parametersList.add(saturation_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    enhancedMoveToHueAndSaturation_parametersList.add(transitionTime_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    enhancedMoveToHueAndSaturation_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    enhancedMoveToHueAndSaturation_parametersList.add(optionsOverride_commandParameter);

    enhancedMoveToHueAndSaturation_commandInfo.parameters =
        enhancedMoveToHueAndSaturation_parametersList;
    colorControl_clusterInfo.commands.add(enhancedMoveToHueAndSaturation_commandInfo);
    List<CommandParameter> enhancedStepHue_parametersList = new ArrayList<>();
    CommandInfo enhancedStepHue_commandInfo = new CommandInfo();
    enhancedStepHue_commandInfo.name = "enhancedStepHue";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter stepMode_commandParameter = new CommandParameter("stepMode", int.class);
    enhancedStepHue_parametersList.add(stepMode_commandParameter);

    CommandParameter stepSize_commandParameter = new CommandParameter("stepSize", int.class);
    enhancedStepHue_parametersList.add(stepSize_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    enhancedStepHue_parametersList.add(transitionTime_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    enhancedStepHue_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    enhancedStepHue_parametersList.add(optionsOverride_commandParameter);

    enhancedStepHue_commandInfo.parameters = enhancedStepHue_parametersList;
    colorControl_clusterInfo.commands.add(enhancedStepHue_commandInfo);
    List<CommandParameter> moveColor_parametersList = new ArrayList<>();
    CommandInfo moveColor_commandInfo = new CommandInfo();
    moveColor_commandInfo.name = "moveColor";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter rateX_commandParameter = new CommandParameter("rateX", int.class);
    moveColor_parametersList.add(rateX_commandParameter);

    CommandParameter rateY_commandParameter = new CommandParameter("rateY", int.class);
    moveColor_parametersList.add(rateY_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    moveColor_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    moveColor_parametersList.add(optionsOverride_commandParameter);

    moveColor_commandInfo.parameters = moveColor_parametersList;
    colorControl_clusterInfo.commands.add(moveColor_commandInfo);
    List<CommandParameter> moveColorTemperature_parametersList = new ArrayList<>();
    CommandInfo moveColorTemperature_commandInfo = new CommandInfo();
    moveColorTemperature_commandInfo.name = "moveColorTemperature";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter moveMode_commandParameter = new CommandParameter("moveMode", int.class);
    moveColorTemperature_parametersList.add(moveMode_commandParameter);

    CommandParameter rate_commandParameter = new CommandParameter("rate", int.class);
    moveColorTemperature_parametersList.add(rate_commandParameter);

    CommandParameter colorTemperatureMinimum_commandParameter =
        new CommandParameter("colorTemperatureMinimum", int.class);
    moveColorTemperature_parametersList.add(colorTemperatureMinimum_commandParameter);

    CommandParameter colorTemperatureMaximum_commandParameter =
        new CommandParameter("colorTemperatureMaximum", int.class);
    moveColorTemperature_parametersList.add(colorTemperatureMaximum_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    moveColorTemperature_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    moveColorTemperature_parametersList.add(optionsOverride_commandParameter);

    moveColorTemperature_commandInfo.parameters = moveColorTemperature_parametersList;
    colorControl_clusterInfo.commands.add(moveColorTemperature_commandInfo);
    List<CommandParameter> moveHue_parametersList = new ArrayList<>();
    CommandInfo moveHue_commandInfo = new CommandInfo();
    moveHue_commandInfo.name = "moveHue";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter moveMode_commandParameter = new CommandParameter("moveMode", int.class);
    moveHue_parametersList.add(moveMode_commandParameter);

    CommandParameter rate_commandParameter = new CommandParameter("rate", int.class);
    moveHue_parametersList.add(rate_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    moveHue_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    moveHue_parametersList.add(optionsOverride_commandParameter);

    moveHue_commandInfo.parameters = moveHue_parametersList;
    colorControl_clusterInfo.commands.add(moveHue_commandInfo);
    List<CommandParameter> moveSaturation_parametersList = new ArrayList<>();
    CommandInfo moveSaturation_commandInfo = new CommandInfo();
    moveSaturation_commandInfo.name = "moveSaturation";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter moveMode_commandParameter = new CommandParameter("moveMode", int.class);
    moveSaturation_parametersList.add(moveMode_commandParameter);

    CommandParameter rate_commandParameter = new CommandParameter("rate", int.class);
    moveSaturation_parametersList.add(rate_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    moveSaturation_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    moveSaturation_parametersList.add(optionsOverride_commandParameter);

    moveSaturation_commandInfo.parameters = moveSaturation_parametersList;
    colorControl_clusterInfo.commands.add(moveSaturation_commandInfo);
    List<CommandParameter> moveToColor_parametersList = new ArrayList<>();
    CommandInfo moveToColor_commandInfo = new CommandInfo();
    moveToColor_commandInfo.name = "moveToColor";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter colorX_commandParameter = new CommandParameter("colorX", int.class);
    moveToColor_parametersList.add(colorX_commandParameter);

    CommandParameter colorY_commandParameter = new CommandParameter("colorY", int.class);
    moveToColor_parametersList.add(colorY_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    moveToColor_parametersList.add(transitionTime_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    moveToColor_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    moveToColor_parametersList.add(optionsOverride_commandParameter);

    moveToColor_commandInfo.parameters = moveToColor_parametersList;
    colorControl_clusterInfo.commands.add(moveToColor_commandInfo);
    List<CommandParameter> moveToColorTemperature_parametersList = new ArrayList<>();
    CommandInfo moveToColorTemperature_commandInfo = new CommandInfo();
    moveToColorTemperature_commandInfo.name = "moveToColorTemperature";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter colorTemperature_commandParameter =
        new CommandParameter("colorTemperature", int.class);
    moveToColorTemperature_parametersList.add(colorTemperature_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    moveToColorTemperature_parametersList.add(transitionTime_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    moveToColorTemperature_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    moveToColorTemperature_parametersList.add(optionsOverride_commandParameter);

    moveToColorTemperature_commandInfo.parameters = moveToColorTemperature_parametersList;
    colorControl_clusterInfo.commands.add(moveToColorTemperature_commandInfo);
    List<CommandParameter> moveToHue_parametersList = new ArrayList<>();
    CommandInfo moveToHue_commandInfo = new CommandInfo();
    moveToHue_commandInfo.name = "moveToHue";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter hue_commandParameter = new CommandParameter("hue", int.class);
    moveToHue_parametersList.add(hue_commandParameter);

    CommandParameter direction_commandParameter = new CommandParameter("direction", int.class);
    moveToHue_parametersList.add(direction_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    moveToHue_parametersList.add(transitionTime_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    moveToHue_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    moveToHue_parametersList.add(optionsOverride_commandParameter);

    moveToHue_commandInfo.parameters = moveToHue_parametersList;
    colorControl_clusterInfo.commands.add(moveToHue_commandInfo);
    List<CommandParameter> moveToHueAndSaturation_parametersList = new ArrayList<>();
    CommandInfo moveToHueAndSaturation_commandInfo = new CommandInfo();
    moveToHueAndSaturation_commandInfo.name = "moveToHueAndSaturation";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter hue_commandParameter = new CommandParameter("hue", int.class);
    moveToHueAndSaturation_parametersList.add(hue_commandParameter);

    CommandParameter saturation_commandParameter = new CommandParameter("saturation", int.class);
    moveToHueAndSaturation_parametersList.add(saturation_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    moveToHueAndSaturation_parametersList.add(transitionTime_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    moveToHueAndSaturation_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    moveToHueAndSaturation_parametersList.add(optionsOverride_commandParameter);

    moveToHueAndSaturation_commandInfo.parameters = moveToHueAndSaturation_parametersList;
    colorControl_clusterInfo.commands.add(moveToHueAndSaturation_commandInfo);
    List<CommandParameter> moveToSaturation_parametersList = new ArrayList<>();
    CommandInfo moveToSaturation_commandInfo = new CommandInfo();
    moveToSaturation_commandInfo.name = "moveToSaturation";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter saturation_commandParameter = new CommandParameter("saturation", int.class);
    moveToSaturation_parametersList.add(saturation_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    moveToSaturation_parametersList.add(transitionTime_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    moveToSaturation_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    moveToSaturation_parametersList.add(optionsOverride_commandParameter);

    moveToSaturation_commandInfo.parameters = moveToSaturation_parametersList;
    colorControl_clusterInfo.commands.add(moveToSaturation_commandInfo);
    List<CommandParameter> stepColor_parametersList = new ArrayList<>();
    CommandInfo stepColor_commandInfo = new CommandInfo();
    stepColor_commandInfo.name = "stepColor";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter stepX_commandParameter = new CommandParameter("stepX", int.class);
    stepColor_parametersList.add(stepX_commandParameter);

    CommandParameter stepY_commandParameter = new CommandParameter("stepY", int.class);
    stepColor_parametersList.add(stepY_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    stepColor_parametersList.add(transitionTime_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    stepColor_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    stepColor_parametersList.add(optionsOverride_commandParameter);

    stepColor_commandInfo.parameters = stepColor_parametersList;
    colorControl_clusterInfo.commands.add(stepColor_commandInfo);
    List<CommandParameter> stepColorTemperature_parametersList = new ArrayList<>();
    CommandInfo stepColorTemperature_commandInfo = new CommandInfo();
    stepColorTemperature_commandInfo.name = "stepColorTemperature";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter stepMode_commandParameter = new CommandParameter("stepMode", int.class);
    stepColorTemperature_parametersList.add(stepMode_commandParameter);

    CommandParameter stepSize_commandParameter = new CommandParameter("stepSize", int.class);
    stepColorTemperature_parametersList.add(stepSize_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    stepColorTemperature_parametersList.add(transitionTime_commandParameter);

    CommandParameter colorTemperatureMinimum_commandParameter =
        new CommandParameter("colorTemperatureMinimum", int.class);
    stepColorTemperature_parametersList.add(colorTemperatureMinimum_commandParameter);

    CommandParameter colorTemperatureMaximum_commandParameter =
        new CommandParameter("colorTemperatureMaximum", int.class);
    stepColorTemperature_parametersList.add(colorTemperatureMaximum_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    stepColorTemperature_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    stepColorTemperature_parametersList.add(optionsOverride_commandParameter);

    stepColorTemperature_commandInfo.parameters = stepColorTemperature_parametersList;
    colorControl_clusterInfo.commands.add(stepColorTemperature_commandInfo);
    List<CommandParameter> stepHue_parametersList = new ArrayList<>();
    CommandInfo stepHue_commandInfo = new CommandInfo();
    stepHue_commandInfo.name = "stepHue";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter stepMode_commandParameter = new CommandParameter("stepMode", int.class);
    stepHue_parametersList.add(stepMode_commandParameter);

    CommandParameter stepSize_commandParameter = new CommandParameter("stepSize", int.class);
    stepHue_parametersList.add(stepSize_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    stepHue_parametersList.add(transitionTime_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    stepHue_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    stepHue_parametersList.add(optionsOverride_commandParameter);

    stepHue_commandInfo.parameters = stepHue_parametersList;
    colorControl_clusterInfo.commands.add(stepHue_commandInfo);
    List<CommandParameter> stepSaturation_parametersList = new ArrayList<>();
    CommandInfo stepSaturation_commandInfo = new CommandInfo();
    stepSaturation_commandInfo.name = "stepSaturation";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter stepMode_commandParameter = new CommandParameter("stepMode", int.class);
    stepSaturation_parametersList.add(stepMode_commandParameter);

    CommandParameter stepSize_commandParameter = new CommandParameter("stepSize", int.class);
    stepSaturation_parametersList.add(stepSize_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    stepSaturation_parametersList.add(transitionTime_commandParameter);

    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    stepSaturation_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    stepSaturation_parametersList.add(optionsOverride_commandParameter);

    stepSaturation_commandInfo.parameters = stepSaturation_parametersList;
    colorControl_clusterInfo.commands.add(stepSaturation_commandInfo);
    List<CommandParameter> stopMoveStep_parametersList = new ArrayList<>();
    CommandInfo stopMoveStep_commandInfo = new CommandInfo();
    stopMoveStep_commandInfo.name = "stopMoveStep";
    colorControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter optionsMask_commandParameter = new CommandParameter("optionsMask", int.class);
    stopMoveStep_parametersList.add(optionsMask_commandParameter);

    CommandParameter optionsOverride_commandParameter =
        new CommandParameter("optionsOverride", int.class);
    stopMoveStep_parametersList.add(optionsOverride_commandParameter);

    stopMoveStep_commandInfo.parameters = stopMoveStep_parametersList;
    colorControl_clusterInfo.commands.add(stopMoveStep_commandInfo);
    clusterInfoMapping.put("colorControl", colorControl_clusterInfo);
    ClusterInfo contentLauncher_clusterInfo = new ClusterInfo("contentLauncher");
    List<CommandParameter> launchContent_parametersList = new ArrayList<>();
    CommandInfo launchContent_commandInfo = new CommandInfo();
    launchContent_commandInfo.name = "launchContent";
    contentLauncher_commandInfo.callbackClass = LaunchContentResponseCallback.class;
    CommandParameter autoPlay_commandParameter = new CommandParameter("autoPlay", boolean.class);
    launchContent_parametersList.add(autoPlay_commandParameter);

    CommandParameter data_commandParameter = new CommandParameter("data", String.class);
    launchContent_parametersList.add(data_commandParameter);

    launchContent_commandInfo.parameters = launchContent_parametersList;
    contentLauncher_clusterInfo.commands.add(launchContent_commandInfo);
    List<CommandParameter> launchURL_parametersList = new ArrayList<>();
    CommandInfo launchURL_commandInfo = new CommandInfo();
    launchURL_commandInfo.name = "launchURL";
    contentLauncher_commandInfo.callbackClass = LaunchURLResponseCallback.class;
    CommandParameter contentURL_commandParameter = new CommandParameter("contentURL", String.class);
    launchURL_parametersList.add(contentURL_commandParameter);

    CommandParameter displayString_commandParameter =
        new CommandParameter("displayString", String.class);
    launchURL_parametersList.add(displayString_commandParameter);

    launchURL_commandInfo.parameters = launchURL_parametersList;
    contentLauncher_clusterInfo.commands.add(launchURL_commandInfo);
    clusterInfoMapping.put("contentLauncher", contentLauncher_clusterInfo);
    ClusterInfo descriptor_clusterInfo = new ClusterInfo("descriptor");
    clusterInfoMapping.put("descriptor", descriptor_clusterInfo);
    ClusterInfo diagnosticLogs_clusterInfo = new ClusterInfo("diagnosticLogs");
    List<CommandParameter> retrieveLogsRequest_parametersList = new ArrayList<>();
    CommandInfo retrieveLogsRequest_commandInfo = new CommandInfo();
    retrieveLogsRequest_commandInfo.name = "retrieveLogsRequest";
    diagnosticLogs_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter intent_commandParameter = new CommandParameter("intent", int.class);
    retrieveLogsRequest_parametersList.add(intent_commandParameter);

    CommandParameter requestedProtocol_commandParameter =
        new CommandParameter("requestedProtocol", int.class);
    retrieveLogsRequest_parametersList.add(requestedProtocol_commandParameter);

    CommandParameter transferFileDesignator_commandParameter =
        new CommandParameter("transferFileDesignator", byte[].class);
    retrieveLogsRequest_parametersList.add(transferFileDesignator_commandParameter);

    retrieveLogsRequest_commandInfo.parameters = retrieveLogsRequest_parametersList;
    diagnosticLogs_clusterInfo.commands.add(retrieveLogsRequest_commandInfo);
    clusterInfoMapping.put("diagnosticLogs", diagnosticLogs_clusterInfo);
    ClusterInfo doorLock_clusterInfo = new ClusterInfo("doorLock");
    List<CommandParameter> clearAllPins_parametersList = new ArrayList<>();
    CommandInfo clearAllPins_commandInfo = new CommandInfo();
    clearAllPins_commandInfo.name = "clearAllPins";
    doorLock_commandInfo.callbackClass = ClearAllPinsResponseCallback.class;
    clearAllPins_commandInfo.parameters = clearAllPins_parametersList;
    doorLock_clusterInfo.commands.add(clearAllPins_commandInfo);
    List<CommandParameter> clearAllRfids_parametersList = new ArrayList<>();
    CommandInfo clearAllRfids_commandInfo = new CommandInfo();
    clearAllRfids_commandInfo.name = "clearAllRfids";
    doorLock_commandInfo.callbackClass = ClearAllRfidsResponseCallback.class;
    clearAllRfids_commandInfo.parameters = clearAllRfids_parametersList;
    doorLock_clusterInfo.commands.add(clearAllRfids_commandInfo);
    List<CommandParameter> clearHolidaySchedule_parametersList = new ArrayList<>();
    CommandInfo clearHolidaySchedule_commandInfo = new CommandInfo();
    clearHolidaySchedule_commandInfo.name = "clearHolidaySchedule";
    doorLock_commandInfo.callbackClass = ClearHolidayScheduleResponseCallback.class;
    CommandParameter scheduleId_commandParameter = new CommandParameter("scheduleId", int.class);
    clearHolidaySchedule_parametersList.add(scheduleId_commandParameter);

    clearHolidaySchedule_commandInfo.parameters = clearHolidaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(clearHolidaySchedule_commandInfo);
    List<CommandParameter> clearPin_parametersList = new ArrayList<>();
    CommandInfo clearPin_commandInfo = new CommandInfo();
    clearPin_commandInfo.name = "clearPin";
    doorLock_commandInfo.callbackClass = ClearPinResponseCallback.class;
    CommandParameter userId_commandParameter = new CommandParameter("userId", int.class);
    clearPin_parametersList.add(userId_commandParameter);

    clearPin_commandInfo.parameters = clearPin_parametersList;
    doorLock_clusterInfo.commands.add(clearPin_commandInfo);
    List<CommandParameter> clearRfid_parametersList = new ArrayList<>();
    CommandInfo clearRfid_commandInfo = new CommandInfo();
    clearRfid_commandInfo.name = "clearRfid";
    doorLock_commandInfo.callbackClass = ClearRfidResponseCallback.class;
    CommandParameter userId_commandParameter = new CommandParameter("userId", int.class);
    clearRfid_parametersList.add(userId_commandParameter);

    clearRfid_commandInfo.parameters = clearRfid_parametersList;
    doorLock_clusterInfo.commands.add(clearRfid_commandInfo);
    List<CommandParameter> clearWeekdaySchedule_parametersList = new ArrayList<>();
    CommandInfo clearWeekdaySchedule_commandInfo = new CommandInfo();
    clearWeekdaySchedule_commandInfo.name = "clearWeekdaySchedule";
    doorLock_commandInfo.callbackClass = ClearWeekdayScheduleResponseCallback.class;
    CommandParameter scheduleId_commandParameter = new CommandParameter("scheduleId", int.class);
    clearWeekdaySchedule_parametersList.add(scheduleId_commandParameter);

    CommandParameter userId_commandParameter = new CommandParameter("userId", int.class);
    clearWeekdaySchedule_parametersList.add(userId_commandParameter);

    clearWeekdaySchedule_commandInfo.parameters = clearWeekdaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(clearWeekdaySchedule_commandInfo);
    List<CommandParameter> clearYeardaySchedule_parametersList = new ArrayList<>();
    CommandInfo clearYeardaySchedule_commandInfo = new CommandInfo();
    clearYeardaySchedule_commandInfo.name = "clearYeardaySchedule";
    doorLock_commandInfo.callbackClass = ClearYeardayScheduleResponseCallback.class;
    CommandParameter scheduleId_commandParameter = new CommandParameter("scheduleId", int.class);
    clearYeardaySchedule_parametersList.add(scheduleId_commandParameter);

    CommandParameter userId_commandParameter = new CommandParameter("userId", int.class);
    clearYeardaySchedule_parametersList.add(userId_commandParameter);

    clearYeardaySchedule_commandInfo.parameters = clearYeardaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(clearYeardaySchedule_commandInfo);
    List<CommandParameter> getHolidaySchedule_parametersList = new ArrayList<>();
    CommandInfo getHolidaySchedule_commandInfo = new CommandInfo();
    getHolidaySchedule_commandInfo.name = "getHolidaySchedule";
    doorLock_commandInfo.callbackClass = GetHolidayScheduleResponseCallback.class;
    CommandParameter scheduleId_commandParameter = new CommandParameter("scheduleId", int.class);
    getHolidaySchedule_parametersList.add(scheduleId_commandParameter);

    getHolidaySchedule_commandInfo.parameters = getHolidaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(getHolidaySchedule_commandInfo);
    List<CommandParameter> getLogRecord_parametersList = new ArrayList<>();
    CommandInfo getLogRecord_commandInfo = new CommandInfo();
    getLogRecord_commandInfo.name = "getLogRecord";
    doorLock_commandInfo.callbackClass = GetLogRecordResponseCallback.class;
    CommandParameter logIndex_commandParameter = new CommandParameter("logIndex", int.class);
    getLogRecord_parametersList.add(logIndex_commandParameter);

    getLogRecord_commandInfo.parameters = getLogRecord_parametersList;
    doorLock_clusterInfo.commands.add(getLogRecord_commandInfo);
    List<CommandParameter> getPin_parametersList = new ArrayList<>();
    CommandInfo getPin_commandInfo = new CommandInfo();
    getPin_commandInfo.name = "getPin";
    doorLock_commandInfo.callbackClass = GetPinResponseCallback.class;
    CommandParameter userId_commandParameter = new CommandParameter("userId", int.class);
    getPin_parametersList.add(userId_commandParameter);

    getPin_commandInfo.parameters = getPin_parametersList;
    doorLock_clusterInfo.commands.add(getPin_commandInfo);
    List<CommandParameter> getRfid_parametersList = new ArrayList<>();
    CommandInfo getRfid_commandInfo = new CommandInfo();
    getRfid_commandInfo.name = "getRfid";
    doorLock_commandInfo.callbackClass = GetRfidResponseCallback.class;
    CommandParameter userId_commandParameter = new CommandParameter("userId", int.class);
    getRfid_parametersList.add(userId_commandParameter);

    getRfid_commandInfo.parameters = getRfid_parametersList;
    doorLock_clusterInfo.commands.add(getRfid_commandInfo);
    List<CommandParameter> getUserType_parametersList = new ArrayList<>();
    CommandInfo getUserType_commandInfo = new CommandInfo();
    getUserType_commandInfo.name = "getUserType";
    doorLock_commandInfo.callbackClass = GetUserTypeResponseCallback.class;
    CommandParameter userId_commandParameter = new CommandParameter("userId", int.class);
    getUserType_parametersList.add(userId_commandParameter);

    getUserType_commandInfo.parameters = getUserType_parametersList;
    doorLock_clusterInfo.commands.add(getUserType_commandInfo);
    List<CommandParameter> getWeekdaySchedule_parametersList = new ArrayList<>();
    CommandInfo getWeekdaySchedule_commandInfo = new CommandInfo();
    getWeekdaySchedule_commandInfo.name = "getWeekdaySchedule";
    doorLock_commandInfo.callbackClass = GetWeekdayScheduleResponseCallback.class;
    CommandParameter scheduleId_commandParameter = new CommandParameter("scheduleId", int.class);
    getWeekdaySchedule_parametersList.add(scheduleId_commandParameter);

    CommandParameter userId_commandParameter = new CommandParameter("userId", int.class);
    getWeekdaySchedule_parametersList.add(userId_commandParameter);

    getWeekdaySchedule_commandInfo.parameters = getWeekdaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(getWeekdaySchedule_commandInfo);
    List<CommandParameter> getYeardaySchedule_parametersList = new ArrayList<>();
    CommandInfo getYeardaySchedule_commandInfo = new CommandInfo();
    getYeardaySchedule_commandInfo.name = "getYeardaySchedule";
    doorLock_commandInfo.callbackClass = GetYeardayScheduleResponseCallback.class;
    CommandParameter scheduleId_commandParameter = new CommandParameter("scheduleId", int.class);
    getYeardaySchedule_parametersList.add(scheduleId_commandParameter);

    CommandParameter userId_commandParameter = new CommandParameter("userId", int.class);
    getYeardaySchedule_parametersList.add(userId_commandParameter);

    getYeardaySchedule_commandInfo.parameters = getYeardaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(getYeardaySchedule_commandInfo);
    List<CommandParameter> lockDoor_parametersList = new ArrayList<>();
    CommandInfo lockDoor_commandInfo = new CommandInfo();
    lockDoor_commandInfo.name = "lockDoor";
    doorLock_commandInfo.callbackClass = LockDoorResponseCallback.class;
    CommandParameter pin_commandParameter = new CommandParameter("pin", byte[].class);
    lockDoor_parametersList.add(pin_commandParameter);

    lockDoor_commandInfo.parameters = lockDoor_parametersList;
    doorLock_clusterInfo.commands.add(lockDoor_commandInfo);
    List<CommandParameter> setHolidaySchedule_parametersList = new ArrayList<>();
    CommandInfo setHolidaySchedule_commandInfo = new CommandInfo();
    setHolidaySchedule_commandInfo.name = "setHolidaySchedule";
    doorLock_commandInfo.callbackClass = SetHolidayScheduleResponseCallback.class;
    CommandParameter scheduleId_commandParameter = new CommandParameter("scheduleId", int.class);
    setHolidaySchedule_parametersList.add(scheduleId_commandParameter);

    CommandParameter localStartTime_commandParameter =
        new CommandParameter("localStartTime", long.class);
    setHolidaySchedule_parametersList.add(localStartTime_commandParameter);

    CommandParameter localEndTime_commandParameter =
        new CommandParameter("localEndTime", long.class);
    setHolidaySchedule_parametersList.add(localEndTime_commandParameter);

    CommandParameter operatingModeDuringHoliday_commandParameter =
        new CommandParameter("operatingModeDuringHoliday", int.class);
    setHolidaySchedule_parametersList.add(operatingModeDuringHoliday_commandParameter);

    setHolidaySchedule_commandInfo.parameters = setHolidaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(setHolidaySchedule_commandInfo);
    List<CommandParameter> setPin_parametersList = new ArrayList<>();
    CommandInfo setPin_commandInfo = new CommandInfo();
    setPin_commandInfo.name = "setPin";
    doorLock_commandInfo.callbackClass = SetPinResponseCallback.class;
    CommandParameter userId_commandParameter = new CommandParameter("userId", int.class);
    setPin_parametersList.add(userId_commandParameter);

    CommandParameter userStatus_commandParameter = new CommandParameter("userStatus", int.class);
    setPin_parametersList.add(userStatus_commandParameter);

    CommandParameter userType_commandParameter = new CommandParameter("userType", int.class);
    setPin_parametersList.add(userType_commandParameter);

    CommandParameter pin_commandParameter = new CommandParameter("pin", byte[].class);
    setPin_parametersList.add(pin_commandParameter);

    setPin_commandInfo.parameters = setPin_parametersList;
    doorLock_clusterInfo.commands.add(setPin_commandInfo);
    List<CommandParameter> setRfid_parametersList = new ArrayList<>();
    CommandInfo setRfid_commandInfo = new CommandInfo();
    setRfid_commandInfo.name = "setRfid";
    doorLock_commandInfo.callbackClass = SetRfidResponseCallback.class;
    CommandParameter userId_commandParameter = new CommandParameter("userId", int.class);
    setRfid_parametersList.add(userId_commandParameter);

    CommandParameter userStatus_commandParameter = new CommandParameter("userStatus", int.class);
    setRfid_parametersList.add(userStatus_commandParameter);

    CommandParameter userType_commandParameter = new CommandParameter("userType", int.class);
    setRfid_parametersList.add(userType_commandParameter);

    CommandParameter id_commandParameter = new CommandParameter("id", byte[].class);
    setRfid_parametersList.add(id_commandParameter);

    setRfid_commandInfo.parameters = setRfid_parametersList;
    doorLock_clusterInfo.commands.add(setRfid_commandInfo);
    List<CommandParameter> setUserType_parametersList = new ArrayList<>();
    CommandInfo setUserType_commandInfo = new CommandInfo();
    setUserType_commandInfo.name = "setUserType";
    doorLock_commandInfo.callbackClass = SetUserTypeResponseCallback.class;
    CommandParameter userId_commandParameter = new CommandParameter("userId", int.class);
    setUserType_parametersList.add(userId_commandParameter);

    CommandParameter userType_commandParameter = new CommandParameter("userType", int.class);
    setUserType_parametersList.add(userType_commandParameter);

    setUserType_commandInfo.parameters = setUserType_parametersList;
    doorLock_clusterInfo.commands.add(setUserType_commandInfo);
    List<CommandParameter> setWeekdaySchedule_parametersList = new ArrayList<>();
    CommandInfo setWeekdaySchedule_commandInfo = new CommandInfo();
    setWeekdaySchedule_commandInfo.name = "setWeekdaySchedule";
    doorLock_commandInfo.callbackClass = SetWeekdayScheduleResponseCallback.class;
    CommandParameter scheduleId_commandParameter = new CommandParameter("scheduleId", int.class);
    setWeekdaySchedule_parametersList.add(scheduleId_commandParameter);

    CommandParameter userId_commandParameter = new CommandParameter("userId", int.class);
    setWeekdaySchedule_parametersList.add(userId_commandParameter);

    CommandParameter daysMask_commandParameter = new CommandParameter("daysMask", int.class);
    setWeekdaySchedule_parametersList.add(daysMask_commandParameter);

    CommandParameter startHour_commandParameter = new CommandParameter("startHour", int.class);
    setWeekdaySchedule_parametersList.add(startHour_commandParameter);

    CommandParameter startMinute_commandParameter = new CommandParameter("startMinute", int.class);
    setWeekdaySchedule_parametersList.add(startMinute_commandParameter);

    CommandParameter endHour_commandParameter = new CommandParameter("endHour", int.class);
    setWeekdaySchedule_parametersList.add(endHour_commandParameter);

    CommandParameter endMinute_commandParameter = new CommandParameter("endMinute", int.class);
    setWeekdaySchedule_parametersList.add(endMinute_commandParameter);

    setWeekdaySchedule_commandInfo.parameters = setWeekdaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(setWeekdaySchedule_commandInfo);
    List<CommandParameter> setYeardaySchedule_parametersList = new ArrayList<>();
    CommandInfo setYeardaySchedule_commandInfo = new CommandInfo();
    setYeardaySchedule_commandInfo.name = "setYeardaySchedule";
    doorLock_commandInfo.callbackClass = SetYeardayScheduleResponseCallback.class;
    CommandParameter scheduleId_commandParameter = new CommandParameter("scheduleId", int.class);
    setYeardaySchedule_parametersList.add(scheduleId_commandParameter);

    CommandParameter userId_commandParameter = new CommandParameter("userId", int.class);
    setYeardaySchedule_parametersList.add(userId_commandParameter);

    CommandParameter localStartTime_commandParameter =
        new CommandParameter("localStartTime", long.class);
    setYeardaySchedule_parametersList.add(localStartTime_commandParameter);

    CommandParameter localEndTime_commandParameter =
        new CommandParameter("localEndTime", long.class);
    setYeardaySchedule_parametersList.add(localEndTime_commandParameter);

    setYeardaySchedule_commandInfo.parameters = setYeardaySchedule_parametersList;
    doorLock_clusterInfo.commands.add(setYeardaySchedule_commandInfo);
    List<CommandParameter> unlockDoor_parametersList = new ArrayList<>();
    CommandInfo unlockDoor_commandInfo = new CommandInfo();
    unlockDoor_commandInfo.name = "unlockDoor";
    doorLock_commandInfo.callbackClass = UnlockDoorResponseCallback.class;
    CommandParameter pin_commandParameter = new CommandParameter("pin", byte[].class);
    unlockDoor_parametersList.add(pin_commandParameter);

    unlockDoor_commandInfo.parameters = unlockDoor_parametersList;
    doorLock_clusterInfo.commands.add(unlockDoor_commandInfo);
    List<CommandParameter> unlockWithTimeout_parametersList = new ArrayList<>();
    CommandInfo unlockWithTimeout_commandInfo = new CommandInfo();
    unlockWithTimeout_commandInfo.name = "unlockWithTimeout";
    doorLock_commandInfo.callbackClass = UnlockWithTimeoutResponseCallback.class;
    CommandParameter timeoutInSeconds_commandParameter =
        new CommandParameter("timeoutInSeconds", int.class);
    unlockWithTimeout_parametersList.add(timeoutInSeconds_commandParameter);

    CommandParameter pin_commandParameter = new CommandParameter("pin", byte[].class);
    unlockWithTimeout_parametersList.add(pin_commandParameter);

    unlockWithTimeout_commandInfo.parameters = unlockWithTimeout_parametersList;
    doorLock_clusterInfo.commands.add(unlockWithTimeout_commandInfo);
    clusterInfoMapping.put("doorLock", doorLock_clusterInfo);
    ClusterInfo electricalMeasurement_clusterInfo = new ClusterInfo("electricalMeasurement");
    clusterInfoMapping.put("electricalMeasurement", electricalMeasurement_clusterInfo);
    ClusterInfo ethernetNetworkDiagnostics_clusterInfo =
        new ClusterInfo("ethernetNetworkDiagnostics");
    List<CommandParameter> resetCounts_parametersList = new ArrayList<>();
    CommandInfo resetCounts_commandInfo = new CommandInfo();
    resetCounts_commandInfo.name = "resetCounts";
    ethernetNetworkDiagnostics_commandInfo.callbackClass = DefaultClusterCallback.class;
    resetCounts_commandInfo.parameters = resetCounts_parametersList;
    ethernetNetworkDiagnostics_clusterInfo.commands.add(resetCounts_commandInfo);
    clusterInfoMapping.put("ethernetNetworkDiagnostics", ethernetNetworkDiagnostics_clusterInfo);
    ClusterInfo fixedLabel_clusterInfo = new ClusterInfo("fixedLabel");
    clusterInfoMapping.put("fixedLabel", fixedLabel_clusterInfo);
    ClusterInfo flowMeasurement_clusterInfo = new ClusterInfo("flowMeasurement");
    clusterInfoMapping.put("flowMeasurement", flowMeasurement_clusterInfo);
    ClusterInfo generalCommissioning_clusterInfo = new ClusterInfo("generalCommissioning");
    List<CommandParameter> armFailSafe_parametersList = new ArrayList<>();
    CommandInfo armFailSafe_commandInfo = new CommandInfo();
    armFailSafe_commandInfo.name = "armFailSafe";
    generalCommissioning_commandInfo.callbackClass = ArmFailSafeResponseCallback.class;
    CommandParameter expiryLengthSeconds_commandParameter =
        new CommandParameter("expiryLengthSeconds", int.class);
    armFailSafe_parametersList.add(expiryLengthSeconds_commandParameter);

    CommandParameter breadcrumb_commandParameter = new CommandParameter("breadcrumb", long.class);
    armFailSafe_parametersList.add(breadcrumb_commandParameter);

    CommandParameter timeoutMs_commandParameter = new CommandParameter("timeoutMs", long.class);
    armFailSafe_parametersList.add(timeoutMs_commandParameter);

    armFailSafe_commandInfo.parameters = armFailSafe_parametersList;
    generalCommissioning_clusterInfo.commands.add(armFailSafe_commandInfo);
    List<CommandParameter> commissioningComplete_parametersList = new ArrayList<>();
    CommandInfo commissioningComplete_commandInfo = new CommandInfo();
    commissioningComplete_commandInfo.name = "commissioningComplete";
    generalCommissioning_commandInfo.callbackClass = CommissioningCompleteResponseCallback.class;
    commissioningComplete_commandInfo.parameters = commissioningComplete_parametersList;
    generalCommissioning_clusterInfo.commands.add(commissioningComplete_commandInfo);
    List<CommandParameter> setRegulatoryConfig_parametersList = new ArrayList<>();
    CommandInfo setRegulatoryConfig_commandInfo = new CommandInfo();
    setRegulatoryConfig_commandInfo.name = "setRegulatoryConfig";
    generalCommissioning_commandInfo.callbackClass = SetRegulatoryConfigResponseCallback.class;
    CommandParameter location_commandParameter = new CommandParameter("location", int.class);
    setRegulatoryConfig_parametersList.add(location_commandParameter);

    CommandParameter countryCode_commandParameter =
        new CommandParameter("countryCode", String.class);
    setRegulatoryConfig_parametersList.add(countryCode_commandParameter);

    CommandParameter breadcrumb_commandParameter = new CommandParameter("breadcrumb", long.class);
    setRegulatoryConfig_parametersList.add(breadcrumb_commandParameter);

    CommandParameter timeoutMs_commandParameter = new CommandParameter("timeoutMs", long.class);
    setRegulatoryConfig_parametersList.add(timeoutMs_commandParameter);

    setRegulatoryConfig_commandInfo.parameters = setRegulatoryConfig_parametersList;
    generalCommissioning_clusterInfo.commands.add(setRegulatoryConfig_commandInfo);
    clusterInfoMapping.put("generalCommissioning", generalCommissioning_clusterInfo);
    ClusterInfo generalDiagnostics_clusterInfo = new ClusterInfo("generalDiagnostics");
    clusterInfoMapping.put("generalDiagnostics", generalDiagnostics_clusterInfo);
    ClusterInfo groupKeyManagement_clusterInfo = new ClusterInfo("groupKeyManagement");
    clusterInfoMapping.put("groupKeyManagement", groupKeyManagement_clusterInfo);
    ClusterInfo groups_clusterInfo = new ClusterInfo("groups");
    List<CommandParameter> addGroup_parametersList = new ArrayList<>();
    CommandInfo addGroup_commandInfo = new CommandInfo();
    addGroup_commandInfo.name = "addGroup";
    groups_commandInfo.callbackClass = AddGroupResponseCallback.class;
    CommandParameter groupId_commandParameter = new CommandParameter("groupId", int.class);
    addGroup_parametersList.add(groupId_commandParameter);

    CommandParameter groupName_commandParameter = new CommandParameter("groupName", String.class);
    addGroup_parametersList.add(groupName_commandParameter);

    addGroup_commandInfo.parameters = addGroup_parametersList;
    groups_clusterInfo.commands.add(addGroup_commandInfo);
    List<CommandParameter> addGroupIfIdentifying_parametersList = new ArrayList<>();
    CommandInfo addGroupIfIdentifying_commandInfo = new CommandInfo();
    addGroupIfIdentifying_commandInfo.name = "addGroupIfIdentifying";
    groups_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter groupId_commandParameter = new CommandParameter("groupId", int.class);
    addGroupIfIdentifying_parametersList.add(groupId_commandParameter);

    CommandParameter groupName_commandParameter = new CommandParameter("groupName", String.class);
    addGroupIfIdentifying_parametersList.add(groupName_commandParameter);

    addGroupIfIdentifying_commandInfo.parameters = addGroupIfIdentifying_parametersList;
    groups_clusterInfo.commands.add(addGroupIfIdentifying_commandInfo);
    List<CommandParameter> getGroupMembership_parametersList = new ArrayList<>();
    CommandInfo getGroupMembership_commandInfo = new CommandInfo();
    getGroupMembership_commandInfo.name = "getGroupMembership";
    groups_commandInfo.callbackClass = GetGroupMembershipResponseCallback.class;
    CommandParameter groupCount_commandParameter = new CommandParameter("groupCount", int.class);
    getGroupMembership_parametersList.add(groupCount_commandParameter);

    CommandParameter groupList_commandParameter = new CommandParameter("groupList", int.class);
    getGroupMembership_parametersList.add(groupList_commandParameter);

    getGroupMembership_commandInfo.parameters = getGroupMembership_parametersList;
    groups_clusterInfo.commands.add(getGroupMembership_commandInfo);
    List<CommandParameter> removeAllGroups_parametersList = new ArrayList<>();
    CommandInfo removeAllGroups_commandInfo = new CommandInfo();
    removeAllGroups_commandInfo.name = "removeAllGroups";
    groups_commandInfo.callbackClass = DefaultClusterCallback.class;
    removeAllGroups_commandInfo.parameters = removeAllGroups_parametersList;
    groups_clusterInfo.commands.add(removeAllGroups_commandInfo);
    List<CommandParameter> removeGroup_parametersList = new ArrayList<>();
    CommandInfo removeGroup_commandInfo = new CommandInfo();
    removeGroup_commandInfo.name = "removeGroup";
    groups_commandInfo.callbackClass = RemoveGroupResponseCallback.class;
    CommandParameter groupId_commandParameter = new CommandParameter("groupId", int.class);
    removeGroup_parametersList.add(groupId_commandParameter);

    removeGroup_commandInfo.parameters = removeGroup_parametersList;
    groups_clusterInfo.commands.add(removeGroup_commandInfo);
    List<CommandParameter> viewGroup_parametersList = new ArrayList<>();
    CommandInfo viewGroup_commandInfo = new CommandInfo();
    viewGroup_commandInfo.name = "viewGroup";
    groups_commandInfo.callbackClass = ViewGroupResponseCallback.class;
    CommandParameter groupId_commandParameter = new CommandParameter("groupId", int.class);
    viewGroup_parametersList.add(groupId_commandParameter);

    viewGroup_commandInfo.parameters = viewGroup_parametersList;
    groups_clusterInfo.commands.add(viewGroup_commandInfo);
    clusterInfoMapping.put("groups", groups_clusterInfo);
    ClusterInfo identify_clusterInfo = new ClusterInfo("identify");
    List<CommandParameter> identify_parametersList = new ArrayList<>();
    CommandInfo identify_commandInfo = new CommandInfo();
    identify_commandInfo.name = "identify";
    identify_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter identifyTime_commandParameter =
        new CommandParameter("identifyTime", int.class);
    identify_parametersList.add(identifyTime_commandParameter);

    identify_commandInfo.parameters = identify_parametersList;
    identify_clusterInfo.commands.add(identify_commandInfo);
    List<CommandParameter> identifyQuery_parametersList = new ArrayList<>();
    CommandInfo identifyQuery_commandInfo = new CommandInfo();
    identifyQuery_commandInfo.name = "identifyQuery";
    identify_commandInfo.callbackClass = IdentifyQueryResponseCallback.class;
    identifyQuery_commandInfo.parameters = identifyQuery_parametersList;
    identify_clusterInfo.commands.add(identifyQuery_commandInfo);
    List<CommandParameter> triggerEffect_parametersList = new ArrayList<>();
    CommandInfo triggerEffect_commandInfo = new CommandInfo();
    triggerEffect_commandInfo.name = "triggerEffect";
    identify_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter effectIdentifier_commandParameter =
        new CommandParameter("effectIdentifier", int.class);
    triggerEffect_parametersList.add(effectIdentifier_commandParameter);

    CommandParameter effectVariant_commandParameter =
        new CommandParameter("effectVariant", int.class);
    triggerEffect_parametersList.add(effectVariant_commandParameter);

    triggerEffect_commandInfo.parameters = triggerEffect_parametersList;
    identify_clusterInfo.commands.add(triggerEffect_commandInfo);
    clusterInfoMapping.put("identify", identify_clusterInfo);
    ClusterInfo keypadInput_clusterInfo = new ClusterInfo("keypadInput");
    List<CommandParameter> sendKey_parametersList = new ArrayList<>();
    CommandInfo sendKey_commandInfo = new CommandInfo();
    sendKey_commandInfo.name = "sendKey";
    keypadInput_commandInfo.callbackClass = SendKeyResponseCallback.class;
    CommandParameter keyCode_commandParameter = new CommandParameter("keyCode", int.class);
    sendKey_parametersList.add(keyCode_commandParameter);

    sendKey_commandInfo.parameters = sendKey_parametersList;
    keypadInput_clusterInfo.commands.add(sendKey_commandInfo);
    clusterInfoMapping.put("keypadInput", keypadInput_clusterInfo);
    ClusterInfo levelControl_clusterInfo = new ClusterInfo("levelControl");
    List<CommandParameter> move_parametersList = new ArrayList<>();
    CommandInfo move_commandInfo = new CommandInfo();
    move_commandInfo.name = "move";
    levelControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter moveMode_commandParameter = new CommandParameter("moveMode", int.class);
    move_parametersList.add(moveMode_commandParameter);

    CommandParameter rate_commandParameter = new CommandParameter("rate", int.class);
    move_parametersList.add(rate_commandParameter);

    CommandParameter optionMask_commandParameter = new CommandParameter("optionMask", int.class);
    move_parametersList.add(optionMask_commandParameter);

    CommandParameter optionOverride_commandParameter =
        new CommandParameter("optionOverride", int.class);
    move_parametersList.add(optionOverride_commandParameter);

    move_commandInfo.parameters = move_parametersList;
    levelControl_clusterInfo.commands.add(move_commandInfo);
    List<CommandParameter> moveToLevel_parametersList = new ArrayList<>();
    CommandInfo moveToLevel_commandInfo = new CommandInfo();
    moveToLevel_commandInfo.name = "moveToLevel";
    levelControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter level_commandParameter = new CommandParameter("level", int.class);
    moveToLevel_parametersList.add(level_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    moveToLevel_parametersList.add(transitionTime_commandParameter);

    CommandParameter optionMask_commandParameter = new CommandParameter("optionMask", int.class);
    moveToLevel_parametersList.add(optionMask_commandParameter);

    CommandParameter optionOverride_commandParameter =
        new CommandParameter("optionOverride", int.class);
    moveToLevel_parametersList.add(optionOverride_commandParameter);

    moveToLevel_commandInfo.parameters = moveToLevel_parametersList;
    levelControl_clusterInfo.commands.add(moveToLevel_commandInfo);
    List<CommandParameter> moveToLevelWithOnOff_parametersList = new ArrayList<>();
    CommandInfo moveToLevelWithOnOff_commandInfo = new CommandInfo();
    moveToLevelWithOnOff_commandInfo.name = "moveToLevelWithOnOff";
    levelControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter level_commandParameter = new CommandParameter("level", int.class);
    moveToLevelWithOnOff_parametersList.add(level_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    moveToLevelWithOnOff_parametersList.add(transitionTime_commandParameter);

    moveToLevelWithOnOff_commandInfo.parameters = moveToLevelWithOnOff_parametersList;
    levelControl_clusterInfo.commands.add(moveToLevelWithOnOff_commandInfo);
    List<CommandParameter> moveWithOnOff_parametersList = new ArrayList<>();
    CommandInfo moveWithOnOff_commandInfo = new CommandInfo();
    moveWithOnOff_commandInfo.name = "moveWithOnOff";
    levelControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter moveMode_commandParameter = new CommandParameter("moveMode", int.class);
    moveWithOnOff_parametersList.add(moveMode_commandParameter);

    CommandParameter rate_commandParameter = new CommandParameter("rate", int.class);
    moveWithOnOff_parametersList.add(rate_commandParameter);

    moveWithOnOff_commandInfo.parameters = moveWithOnOff_parametersList;
    levelControl_clusterInfo.commands.add(moveWithOnOff_commandInfo);
    List<CommandParameter> step_parametersList = new ArrayList<>();
    CommandInfo step_commandInfo = new CommandInfo();
    step_commandInfo.name = "step";
    levelControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter stepMode_commandParameter = new CommandParameter("stepMode", int.class);
    step_parametersList.add(stepMode_commandParameter);

    CommandParameter stepSize_commandParameter = new CommandParameter("stepSize", int.class);
    step_parametersList.add(stepSize_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    step_parametersList.add(transitionTime_commandParameter);

    CommandParameter optionMask_commandParameter = new CommandParameter("optionMask", int.class);
    step_parametersList.add(optionMask_commandParameter);

    CommandParameter optionOverride_commandParameter =
        new CommandParameter("optionOverride", int.class);
    step_parametersList.add(optionOverride_commandParameter);

    step_commandInfo.parameters = step_parametersList;
    levelControl_clusterInfo.commands.add(step_commandInfo);
    List<CommandParameter> stepWithOnOff_parametersList = new ArrayList<>();
    CommandInfo stepWithOnOff_commandInfo = new CommandInfo();
    stepWithOnOff_commandInfo.name = "stepWithOnOff";
    levelControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter stepMode_commandParameter = new CommandParameter("stepMode", int.class);
    stepWithOnOff_parametersList.add(stepMode_commandParameter);

    CommandParameter stepSize_commandParameter = new CommandParameter("stepSize", int.class);
    stepWithOnOff_parametersList.add(stepSize_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    stepWithOnOff_parametersList.add(transitionTime_commandParameter);

    stepWithOnOff_commandInfo.parameters = stepWithOnOff_parametersList;
    levelControl_clusterInfo.commands.add(stepWithOnOff_commandInfo);
    List<CommandParameter> stop_parametersList = new ArrayList<>();
    CommandInfo stop_commandInfo = new CommandInfo();
    stop_commandInfo.name = "stop";
    levelControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter optionMask_commandParameter = new CommandParameter("optionMask", int.class);
    stop_parametersList.add(optionMask_commandParameter);

    CommandParameter optionOverride_commandParameter =
        new CommandParameter("optionOverride", int.class);
    stop_parametersList.add(optionOverride_commandParameter);

    stop_commandInfo.parameters = stop_parametersList;
    levelControl_clusterInfo.commands.add(stop_commandInfo);
    List<CommandParameter> stopWithOnOff_parametersList = new ArrayList<>();
    CommandInfo stopWithOnOff_commandInfo = new CommandInfo();
    stopWithOnOff_commandInfo.name = "stopWithOnOff";
    levelControl_commandInfo.callbackClass = DefaultClusterCallback.class;
    stopWithOnOff_commandInfo.parameters = stopWithOnOff_parametersList;
    levelControl_clusterInfo.commands.add(stopWithOnOff_commandInfo);
    clusterInfoMapping.put("levelControl", levelControl_clusterInfo);
    ClusterInfo lowPower_clusterInfo = new ClusterInfo("lowPower");
    List<CommandParameter> sleep_parametersList = new ArrayList<>();
    CommandInfo sleep_commandInfo = new CommandInfo();
    sleep_commandInfo.name = "sleep";
    lowPower_commandInfo.callbackClass = DefaultClusterCallback.class;
    sleep_commandInfo.parameters = sleep_parametersList;
    lowPower_clusterInfo.commands.add(sleep_commandInfo);
    clusterInfoMapping.put("lowPower", lowPower_clusterInfo);
    ClusterInfo mediaInput_clusterInfo = new ClusterInfo("mediaInput");
    List<CommandParameter> hideInputStatus_parametersList = new ArrayList<>();
    CommandInfo hideInputStatus_commandInfo = new CommandInfo();
    hideInputStatus_commandInfo.name = "hideInputStatus";
    mediaInput_commandInfo.callbackClass = DefaultClusterCallback.class;
    hideInputStatus_commandInfo.parameters = hideInputStatus_parametersList;
    mediaInput_clusterInfo.commands.add(hideInputStatus_commandInfo);
    List<CommandParameter> renameInput_parametersList = new ArrayList<>();
    CommandInfo renameInput_commandInfo = new CommandInfo();
    renameInput_commandInfo.name = "renameInput";
    mediaInput_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter index_commandParameter = new CommandParameter("index", int.class);
    renameInput_parametersList.add(index_commandParameter);

    CommandParameter name_commandParameter = new CommandParameter("name", String.class);
    renameInput_parametersList.add(name_commandParameter);

    renameInput_commandInfo.parameters = renameInput_parametersList;
    mediaInput_clusterInfo.commands.add(renameInput_commandInfo);
    List<CommandParameter> selectInput_parametersList = new ArrayList<>();
    CommandInfo selectInput_commandInfo = new CommandInfo();
    selectInput_commandInfo.name = "selectInput";
    mediaInput_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter index_commandParameter = new CommandParameter("index", int.class);
    selectInput_parametersList.add(index_commandParameter);

    selectInput_commandInfo.parameters = selectInput_parametersList;
    mediaInput_clusterInfo.commands.add(selectInput_commandInfo);
    List<CommandParameter> showInputStatus_parametersList = new ArrayList<>();
    CommandInfo showInputStatus_commandInfo = new CommandInfo();
    showInputStatus_commandInfo.name = "showInputStatus";
    mediaInput_commandInfo.callbackClass = DefaultClusterCallback.class;
    showInputStatus_commandInfo.parameters = showInputStatus_parametersList;
    mediaInput_clusterInfo.commands.add(showInputStatus_commandInfo);
    clusterInfoMapping.put("mediaInput", mediaInput_clusterInfo);
    ClusterInfo mediaPlayback_clusterInfo = new ClusterInfo("mediaPlayback");
    List<CommandParameter> mediaFastForward_parametersList = new ArrayList<>();
    CommandInfo mediaFastForward_commandInfo = new CommandInfo();
    mediaFastForward_commandInfo.name = "mediaFastForward";
    mediaPlayback_commandInfo.callbackClass = MediaFastForwardResponseCallback.class;
    mediaFastForward_commandInfo.parameters = mediaFastForward_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaFastForward_commandInfo);
    List<CommandParameter> mediaNext_parametersList = new ArrayList<>();
    CommandInfo mediaNext_commandInfo = new CommandInfo();
    mediaNext_commandInfo.name = "mediaNext";
    mediaPlayback_commandInfo.callbackClass = MediaNextResponseCallback.class;
    mediaNext_commandInfo.parameters = mediaNext_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaNext_commandInfo);
    List<CommandParameter> mediaPause_parametersList = new ArrayList<>();
    CommandInfo mediaPause_commandInfo = new CommandInfo();
    mediaPause_commandInfo.name = "mediaPause";
    mediaPlayback_commandInfo.callbackClass = MediaPauseResponseCallback.class;
    mediaPause_commandInfo.parameters = mediaPause_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaPause_commandInfo);
    List<CommandParameter> mediaPlay_parametersList = new ArrayList<>();
    CommandInfo mediaPlay_commandInfo = new CommandInfo();
    mediaPlay_commandInfo.name = "mediaPlay";
    mediaPlayback_commandInfo.callbackClass = MediaPlayResponseCallback.class;
    mediaPlay_commandInfo.parameters = mediaPlay_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaPlay_commandInfo);
    List<CommandParameter> mediaPrevious_parametersList = new ArrayList<>();
    CommandInfo mediaPrevious_commandInfo = new CommandInfo();
    mediaPrevious_commandInfo.name = "mediaPrevious";
    mediaPlayback_commandInfo.callbackClass = MediaPreviousResponseCallback.class;
    mediaPrevious_commandInfo.parameters = mediaPrevious_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaPrevious_commandInfo);
    List<CommandParameter> mediaRewind_parametersList = new ArrayList<>();
    CommandInfo mediaRewind_commandInfo = new CommandInfo();
    mediaRewind_commandInfo.name = "mediaRewind";
    mediaPlayback_commandInfo.callbackClass = MediaRewindResponseCallback.class;
    mediaRewind_commandInfo.parameters = mediaRewind_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaRewind_commandInfo);
    List<CommandParameter> mediaSeek_parametersList = new ArrayList<>();
    CommandInfo mediaSeek_commandInfo = new CommandInfo();
    mediaSeek_commandInfo.name = "mediaSeek";
    mediaPlayback_commandInfo.callbackClass = MediaSeekResponseCallback.class;
    CommandParameter position_commandParameter = new CommandParameter("position", long.class);
    mediaSeek_parametersList.add(position_commandParameter);

    mediaSeek_commandInfo.parameters = mediaSeek_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaSeek_commandInfo);
    List<CommandParameter> mediaSkipBackward_parametersList = new ArrayList<>();
    CommandInfo mediaSkipBackward_commandInfo = new CommandInfo();
    mediaSkipBackward_commandInfo.name = "mediaSkipBackward";
    mediaPlayback_commandInfo.callbackClass = MediaSkipBackwardResponseCallback.class;
    CommandParameter deltaPositionMilliseconds_commandParameter =
        new CommandParameter("deltaPositionMilliseconds", long.class);
    mediaSkipBackward_parametersList.add(deltaPositionMilliseconds_commandParameter);

    mediaSkipBackward_commandInfo.parameters = mediaSkipBackward_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaSkipBackward_commandInfo);
    List<CommandParameter> mediaSkipForward_parametersList = new ArrayList<>();
    CommandInfo mediaSkipForward_commandInfo = new CommandInfo();
    mediaSkipForward_commandInfo.name = "mediaSkipForward";
    mediaPlayback_commandInfo.callbackClass = MediaSkipForwardResponseCallback.class;
    CommandParameter deltaPositionMilliseconds_commandParameter =
        new CommandParameter("deltaPositionMilliseconds", long.class);
    mediaSkipForward_parametersList.add(deltaPositionMilliseconds_commandParameter);

    mediaSkipForward_commandInfo.parameters = mediaSkipForward_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaSkipForward_commandInfo);
    List<CommandParameter> mediaStartOver_parametersList = new ArrayList<>();
    CommandInfo mediaStartOver_commandInfo = new CommandInfo();
    mediaStartOver_commandInfo.name = "mediaStartOver";
    mediaPlayback_commandInfo.callbackClass = MediaStartOverResponseCallback.class;
    mediaStartOver_commandInfo.parameters = mediaStartOver_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaStartOver_commandInfo);
    List<CommandParameter> mediaStop_parametersList = new ArrayList<>();
    CommandInfo mediaStop_commandInfo = new CommandInfo();
    mediaStop_commandInfo.name = "mediaStop";
    mediaPlayback_commandInfo.callbackClass = MediaStopResponseCallback.class;
    mediaStop_commandInfo.parameters = mediaStop_parametersList;
    mediaPlayback_clusterInfo.commands.add(mediaStop_commandInfo);
    clusterInfoMapping.put("mediaPlayback", mediaPlayback_clusterInfo);
    ClusterInfo networkCommissioning_clusterInfo = new ClusterInfo("networkCommissioning");
    List<CommandParameter> addThreadNetwork_parametersList = new ArrayList<>();
    CommandInfo addThreadNetwork_commandInfo = new CommandInfo();
    addThreadNetwork_commandInfo.name = "addThreadNetwork";
    networkCommissioning_commandInfo.callbackClass = AddThreadNetworkResponseCallback.class;
    CommandParameter operationalDataset_commandParameter =
        new CommandParameter("operationalDataset", byte[].class);
    addThreadNetwork_parametersList.add(operationalDataset_commandParameter);

    CommandParameter breadcrumb_commandParameter = new CommandParameter("breadcrumb", long.class);
    addThreadNetwork_parametersList.add(breadcrumb_commandParameter);

    CommandParameter timeoutMs_commandParameter = new CommandParameter("timeoutMs", long.class);
    addThreadNetwork_parametersList.add(timeoutMs_commandParameter);

    addThreadNetwork_commandInfo.parameters = addThreadNetwork_parametersList;
    networkCommissioning_clusterInfo.commands.add(addThreadNetwork_commandInfo);
    List<CommandParameter> addWiFiNetwork_parametersList = new ArrayList<>();
    CommandInfo addWiFiNetwork_commandInfo = new CommandInfo();
    addWiFiNetwork_commandInfo.name = "addWiFiNetwork";
    networkCommissioning_commandInfo.callbackClass = AddWiFiNetworkResponseCallback.class;
    CommandParameter ssid_commandParameter = new CommandParameter("ssid", byte[].class);
    addWiFiNetwork_parametersList.add(ssid_commandParameter);

    CommandParameter credentials_commandParameter =
        new CommandParameter("credentials", byte[].class);
    addWiFiNetwork_parametersList.add(credentials_commandParameter);

    CommandParameter breadcrumb_commandParameter = new CommandParameter("breadcrumb", long.class);
    addWiFiNetwork_parametersList.add(breadcrumb_commandParameter);

    CommandParameter timeoutMs_commandParameter = new CommandParameter("timeoutMs", long.class);
    addWiFiNetwork_parametersList.add(timeoutMs_commandParameter);

    addWiFiNetwork_commandInfo.parameters = addWiFiNetwork_parametersList;
    networkCommissioning_clusterInfo.commands.add(addWiFiNetwork_commandInfo);
    List<CommandParameter> disableNetwork_parametersList = new ArrayList<>();
    CommandInfo disableNetwork_commandInfo = new CommandInfo();
    disableNetwork_commandInfo.name = "disableNetwork";
    networkCommissioning_commandInfo.callbackClass = DisableNetworkResponseCallback.class;
    CommandParameter networkID_commandParameter = new CommandParameter("networkID", byte[].class);
    disableNetwork_parametersList.add(networkID_commandParameter);

    CommandParameter breadcrumb_commandParameter = new CommandParameter("breadcrumb", long.class);
    disableNetwork_parametersList.add(breadcrumb_commandParameter);

    CommandParameter timeoutMs_commandParameter = new CommandParameter("timeoutMs", long.class);
    disableNetwork_parametersList.add(timeoutMs_commandParameter);

    disableNetwork_commandInfo.parameters = disableNetwork_parametersList;
    networkCommissioning_clusterInfo.commands.add(disableNetwork_commandInfo);
    List<CommandParameter> enableNetwork_parametersList = new ArrayList<>();
    CommandInfo enableNetwork_commandInfo = new CommandInfo();
    enableNetwork_commandInfo.name = "enableNetwork";
    networkCommissioning_commandInfo.callbackClass = EnableNetworkResponseCallback.class;
    CommandParameter networkID_commandParameter = new CommandParameter("networkID", byte[].class);
    enableNetwork_parametersList.add(networkID_commandParameter);

    CommandParameter breadcrumb_commandParameter = new CommandParameter("breadcrumb", long.class);
    enableNetwork_parametersList.add(breadcrumb_commandParameter);

    CommandParameter timeoutMs_commandParameter = new CommandParameter("timeoutMs", long.class);
    enableNetwork_parametersList.add(timeoutMs_commandParameter);

    enableNetwork_commandInfo.parameters = enableNetwork_parametersList;
    networkCommissioning_clusterInfo.commands.add(enableNetwork_commandInfo);
    List<CommandParameter> getLastNetworkCommissioningResult_parametersList = new ArrayList<>();
    CommandInfo getLastNetworkCommissioningResult_commandInfo = new CommandInfo();
    getLastNetworkCommissioningResult_commandInfo.name = "getLastNetworkCommissioningResult";
    networkCommissioning_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter timeoutMs_commandParameter = new CommandParameter("timeoutMs", long.class);
    getLastNetworkCommissioningResult_parametersList.add(timeoutMs_commandParameter);

    getLastNetworkCommissioningResult_commandInfo.parameters =
        getLastNetworkCommissioningResult_parametersList;
    networkCommissioning_clusterInfo.commands.add(getLastNetworkCommissioningResult_commandInfo);
    List<CommandParameter> removeNetwork_parametersList = new ArrayList<>();
    CommandInfo removeNetwork_commandInfo = new CommandInfo();
    removeNetwork_commandInfo.name = "removeNetwork";
    networkCommissioning_commandInfo.callbackClass = RemoveNetworkResponseCallback.class;
    CommandParameter networkID_commandParameter = new CommandParameter("networkID", byte[].class);
    removeNetwork_parametersList.add(networkID_commandParameter);

    CommandParameter breadcrumb_commandParameter = new CommandParameter("breadcrumb", long.class);
    removeNetwork_parametersList.add(breadcrumb_commandParameter);

    CommandParameter timeoutMs_commandParameter = new CommandParameter("timeoutMs", long.class);
    removeNetwork_parametersList.add(timeoutMs_commandParameter);

    removeNetwork_commandInfo.parameters = removeNetwork_parametersList;
    networkCommissioning_clusterInfo.commands.add(removeNetwork_commandInfo);
    List<CommandParameter> scanNetworks_parametersList = new ArrayList<>();
    CommandInfo scanNetworks_commandInfo = new CommandInfo();
    scanNetworks_commandInfo.name = "scanNetworks";
    networkCommissioning_commandInfo.callbackClass = ScanNetworksResponseCallback.class;
    CommandParameter ssid_commandParameter = new CommandParameter("ssid", byte[].class);
    scanNetworks_parametersList.add(ssid_commandParameter);

    CommandParameter breadcrumb_commandParameter = new CommandParameter("breadcrumb", long.class);
    scanNetworks_parametersList.add(breadcrumb_commandParameter);

    CommandParameter timeoutMs_commandParameter = new CommandParameter("timeoutMs", long.class);
    scanNetworks_parametersList.add(timeoutMs_commandParameter);

    scanNetworks_commandInfo.parameters = scanNetworks_parametersList;
    networkCommissioning_clusterInfo.commands.add(scanNetworks_commandInfo);
    List<CommandParameter> updateThreadNetwork_parametersList = new ArrayList<>();
    CommandInfo updateThreadNetwork_commandInfo = new CommandInfo();
    updateThreadNetwork_commandInfo.name = "updateThreadNetwork";
    networkCommissioning_commandInfo.callbackClass = UpdateThreadNetworkResponseCallback.class;
    CommandParameter operationalDataset_commandParameter =
        new CommandParameter("operationalDataset", byte[].class);
    updateThreadNetwork_parametersList.add(operationalDataset_commandParameter);

    CommandParameter breadcrumb_commandParameter = new CommandParameter("breadcrumb", long.class);
    updateThreadNetwork_parametersList.add(breadcrumb_commandParameter);

    CommandParameter timeoutMs_commandParameter = new CommandParameter("timeoutMs", long.class);
    updateThreadNetwork_parametersList.add(timeoutMs_commandParameter);

    updateThreadNetwork_commandInfo.parameters = updateThreadNetwork_parametersList;
    networkCommissioning_clusterInfo.commands.add(updateThreadNetwork_commandInfo);
    List<CommandParameter> updateWiFiNetwork_parametersList = new ArrayList<>();
    CommandInfo updateWiFiNetwork_commandInfo = new CommandInfo();
    updateWiFiNetwork_commandInfo.name = "updateWiFiNetwork";
    networkCommissioning_commandInfo.callbackClass = UpdateWiFiNetworkResponseCallback.class;
    CommandParameter ssid_commandParameter = new CommandParameter("ssid", byte[].class);
    updateWiFiNetwork_parametersList.add(ssid_commandParameter);

    CommandParameter credentials_commandParameter =
        new CommandParameter("credentials", byte[].class);
    updateWiFiNetwork_parametersList.add(credentials_commandParameter);

    CommandParameter breadcrumb_commandParameter = new CommandParameter("breadcrumb", long.class);
    updateWiFiNetwork_parametersList.add(breadcrumb_commandParameter);

    CommandParameter timeoutMs_commandParameter = new CommandParameter("timeoutMs", long.class);
    updateWiFiNetwork_parametersList.add(timeoutMs_commandParameter);

    updateWiFiNetwork_commandInfo.parameters = updateWiFiNetwork_parametersList;
    networkCommissioning_clusterInfo.commands.add(updateWiFiNetwork_commandInfo);
    clusterInfoMapping.put("networkCommissioning", networkCommissioning_clusterInfo);
    ClusterInfo otaSoftwareUpdateProvider_clusterInfo =
        new ClusterInfo("otaSoftwareUpdateProvider");
    List<CommandParameter> applyUpdateRequest_parametersList = new ArrayList<>();
    CommandInfo applyUpdateRequest_commandInfo = new CommandInfo();
    applyUpdateRequest_commandInfo.name = "applyUpdateRequest";
    otaSoftwareUpdateProvider_commandInfo.callbackClass = ApplyUpdateRequestResponseCallback.class;
    CommandParameter updateToken_commandParameter =
        new CommandParameter("updateToken", byte[].class);
    applyUpdateRequest_parametersList.add(updateToken_commandParameter);

    CommandParameter newVersion_commandParameter = new CommandParameter("newVersion", long.class);
    applyUpdateRequest_parametersList.add(newVersion_commandParameter);

    applyUpdateRequest_commandInfo.parameters = applyUpdateRequest_parametersList;
    otaSoftwareUpdateProvider_clusterInfo.commands.add(applyUpdateRequest_commandInfo);
    List<CommandParameter> notifyUpdateApplied_parametersList = new ArrayList<>();
    CommandInfo notifyUpdateApplied_commandInfo = new CommandInfo();
    notifyUpdateApplied_commandInfo.name = "notifyUpdateApplied";
    otaSoftwareUpdateProvider_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter updateToken_commandParameter =
        new CommandParameter("updateToken", byte[].class);
    notifyUpdateApplied_parametersList.add(updateToken_commandParameter);

    CommandParameter softwareVersion_commandParameter =
        new CommandParameter("softwareVersion", long.class);
    notifyUpdateApplied_parametersList.add(softwareVersion_commandParameter);

    notifyUpdateApplied_commandInfo.parameters = notifyUpdateApplied_parametersList;
    otaSoftwareUpdateProvider_clusterInfo.commands.add(notifyUpdateApplied_commandInfo);
    List<CommandParameter> queryImage_parametersList = new ArrayList<>();
    CommandInfo queryImage_commandInfo = new CommandInfo();
    queryImage_commandInfo.name = "queryImage";
    otaSoftwareUpdateProvider_commandInfo.callbackClass = QueryImageResponseCallback.class;
    CommandParameter vendorId_commandParameter = new CommandParameter("vendorId", int.class);
    queryImage_parametersList.add(vendorId_commandParameter);

    CommandParameter productId_commandParameter = new CommandParameter("productId", int.class);
    queryImage_parametersList.add(productId_commandParameter);

    CommandParameter hardwareVersion_commandParameter =
        new CommandParameter("hardwareVersion", int.class);
    queryImage_parametersList.add(hardwareVersion_commandParameter);

    CommandParameter softwareVersion_commandParameter =
        new CommandParameter("softwareVersion", long.class);
    queryImage_parametersList.add(softwareVersion_commandParameter);

    CommandParameter protocolsSupported_commandParameter =
        new CommandParameter("protocolsSupported", int.class);
    queryImage_parametersList.add(protocolsSupported_commandParameter);

    CommandParameter location_commandParameter = new CommandParameter("location", String.class);
    queryImage_parametersList.add(location_commandParameter);

    CommandParameter requestorCanConsent_commandParameter =
        new CommandParameter("requestorCanConsent", boolean.class);
    queryImage_parametersList.add(requestorCanConsent_commandParameter);

    CommandParameter metadataForProvider_commandParameter =
        new CommandParameter("metadataForProvider", byte[].class);
    queryImage_parametersList.add(metadataForProvider_commandParameter);

    queryImage_commandInfo.parameters = queryImage_parametersList;
    otaSoftwareUpdateProvider_clusterInfo.commands.add(queryImage_commandInfo);
    clusterInfoMapping.put("otaSoftwareUpdateProvider", otaSoftwareUpdateProvider_clusterInfo);
    ClusterInfo otaSoftwareUpdateRequestor_clusterInfo =
        new ClusterInfo("otaSoftwareUpdateRequestor");
    List<CommandParameter> announceOtaProvider_parametersList = new ArrayList<>();
    CommandInfo announceOtaProvider_commandInfo = new CommandInfo();
    announceOtaProvider_commandInfo.name = "announceOtaProvider";
    otaSoftwareUpdateRequestor_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter providerLocation_commandParameter =
        new CommandParameter("providerLocation", byte[].class);
    announceOtaProvider_parametersList.add(providerLocation_commandParameter);

    CommandParameter vendorId_commandParameter = new CommandParameter("vendorId", int.class);
    announceOtaProvider_parametersList.add(vendorId_commandParameter);

    CommandParameter announcementReason_commandParameter =
        new CommandParameter("announcementReason", int.class);
    announceOtaProvider_parametersList.add(announcementReason_commandParameter);

    CommandParameter metadataForNode_commandParameter =
        new CommandParameter("metadataForNode", byte[].class);
    announceOtaProvider_parametersList.add(metadataForNode_commandParameter);

    announceOtaProvider_commandInfo.parameters = announceOtaProvider_parametersList;
    otaSoftwareUpdateRequestor_clusterInfo.commands.add(announceOtaProvider_commandInfo);
    clusterInfoMapping.put("otaSoftwareUpdateRequestor", otaSoftwareUpdateRequestor_clusterInfo);
    ClusterInfo occupancySensing_clusterInfo = new ClusterInfo("occupancySensing");
    clusterInfoMapping.put("occupancySensing", occupancySensing_clusterInfo);
    ClusterInfo onOff_clusterInfo = new ClusterInfo("onOff");
    List<CommandParameter> off_parametersList = new ArrayList<>();
    CommandInfo off_commandInfo = new CommandInfo();
    off_commandInfo.name = "off";
    onOff_commandInfo.callbackClass = DefaultClusterCallback.class;
    off_commandInfo.parameters = off_parametersList;
    onOff_clusterInfo.commands.add(off_commandInfo);
    List<CommandParameter> offWithEffect_parametersList = new ArrayList<>();
    CommandInfo offWithEffect_commandInfo = new CommandInfo();
    offWithEffect_commandInfo.name = "offWithEffect";
    onOff_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter effectId_commandParameter = new CommandParameter("effectId", int.class);
    offWithEffect_parametersList.add(effectId_commandParameter);

    CommandParameter effectVariant_commandParameter =
        new CommandParameter("effectVariant", int.class);
    offWithEffect_parametersList.add(effectVariant_commandParameter);

    offWithEffect_commandInfo.parameters = offWithEffect_parametersList;
    onOff_clusterInfo.commands.add(offWithEffect_commandInfo);
    List<CommandParameter> on_parametersList = new ArrayList<>();
    CommandInfo on_commandInfo = new CommandInfo();
    on_commandInfo.name = "on";
    onOff_commandInfo.callbackClass = DefaultClusterCallback.class;
    on_commandInfo.parameters = on_parametersList;
    onOff_clusterInfo.commands.add(on_commandInfo);
    List<CommandParameter> onWithRecallGlobalScene_parametersList = new ArrayList<>();
    CommandInfo onWithRecallGlobalScene_commandInfo = new CommandInfo();
    onWithRecallGlobalScene_commandInfo.name = "onWithRecallGlobalScene";
    onOff_commandInfo.callbackClass = DefaultClusterCallback.class;
    onWithRecallGlobalScene_commandInfo.parameters = onWithRecallGlobalScene_parametersList;
    onOff_clusterInfo.commands.add(onWithRecallGlobalScene_commandInfo);
    List<CommandParameter> onWithTimedOff_parametersList = new ArrayList<>();
    CommandInfo onWithTimedOff_commandInfo = new CommandInfo();
    onWithTimedOff_commandInfo.name = "onWithTimedOff";
    onOff_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter onOffControl_commandParameter =
        new CommandParameter("onOffControl", int.class);
    onWithTimedOff_parametersList.add(onOffControl_commandParameter);

    CommandParameter onTime_commandParameter = new CommandParameter("onTime", int.class);
    onWithTimedOff_parametersList.add(onTime_commandParameter);

    CommandParameter offWaitTime_commandParameter = new CommandParameter("offWaitTime", int.class);
    onWithTimedOff_parametersList.add(offWaitTime_commandParameter);

    onWithTimedOff_commandInfo.parameters = onWithTimedOff_parametersList;
    onOff_clusterInfo.commands.add(onWithTimedOff_commandInfo);
    List<CommandParameter> toggle_parametersList = new ArrayList<>();
    CommandInfo toggle_commandInfo = new CommandInfo();
    toggle_commandInfo.name = "toggle";
    onOff_commandInfo.callbackClass = DefaultClusterCallback.class;
    toggle_commandInfo.parameters = toggle_parametersList;
    onOff_clusterInfo.commands.add(toggle_commandInfo);
    clusterInfoMapping.put("onOff", onOff_clusterInfo);
    ClusterInfo onOffSwitchConfiguration_clusterInfo = new ClusterInfo("onOffSwitchConfiguration");
    clusterInfoMapping.put("onOffSwitchConfiguration", onOffSwitchConfiguration_clusterInfo);
    ClusterInfo operationalCredentials_clusterInfo = new ClusterInfo("operationalCredentials");
    List<CommandParameter> addNOC_parametersList = new ArrayList<>();
    CommandInfo addNOC_commandInfo = new CommandInfo();
    addNOC_commandInfo.name = "addNOC";
    operationalCredentials_commandInfo.callbackClass = NOCResponseCallback.class;
    CommandParameter NOCValue_commandParameter = new CommandParameter("NOCValue", byte[].class);
    addNOC_parametersList.add(NOCValue_commandParameter);

    CommandParameter ICACValue_commandParameter = new CommandParameter("ICACValue", byte[].class);
    addNOC_parametersList.add(ICACValue_commandParameter);

    CommandParameter IPKValue_commandParameter = new CommandParameter("IPKValue", byte[].class);
    addNOC_parametersList.add(IPKValue_commandParameter);

    CommandParameter caseAdminNode_commandParameter =
        new CommandParameter("caseAdminNode", long.class);
    addNOC_parametersList.add(caseAdminNode_commandParameter);

    CommandParameter adminVendorId_commandParameter =
        new CommandParameter("adminVendorId", int.class);
    addNOC_parametersList.add(adminVendorId_commandParameter);

    addNOC_commandInfo.parameters = addNOC_parametersList;
    operationalCredentials_clusterInfo.commands.add(addNOC_commandInfo);
    List<CommandParameter> addTrustedRootCertificate_parametersList = new ArrayList<>();
    CommandInfo addTrustedRootCertificate_commandInfo = new CommandInfo();
    addTrustedRootCertificate_commandInfo.name = "addTrustedRootCertificate";
    operationalCredentials_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter rootCertificate_commandParameter =
        new CommandParameter("rootCertificate", byte[].class);
    addTrustedRootCertificate_parametersList.add(rootCertificate_commandParameter);

    addTrustedRootCertificate_commandInfo.parameters = addTrustedRootCertificate_parametersList;
    operationalCredentials_clusterInfo.commands.add(addTrustedRootCertificate_commandInfo);
    List<CommandParameter> attestationRequest_parametersList = new ArrayList<>();
    CommandInfo attestationRequest_commandInfo = new CommandInfo();
    attestationRequest_commandInfo.name = "attestationRequest";
    operationalCredentials_commandInfo.callbackClass = AttestationResponseCallback.class;
    CommandParameter attestationNonce_commandParameter =
        new CommandParameter("attestationNonce", byte[].class);
    attestationRequest_parametersList.add(attestationNonce_commandParameter);

    attestationRequest_commandInfo.parameters = attestationRequest_parametersList;
    operationalCredentials_clusterInfo.commands.add(attestationRequest_commandInfo);
    List<CommandParameter> certificateChainRequest_parametersList = new ArrayList<>();
    CommandInfo certificateChainRequest_commandInfo = new CommandInfo();
    certificateChainRequest_commandInfo.name = "certificateChainRequest";
    operationalCredentials_commandInfo.callbackClass = CertificateChainResponseCallback.class;
    CommandParameter certificateType_commandParameter =
        new CommandParameter("certificateType", int.class);
    certificateChainRequest_parametersList.add(certificateType_commandParameter);

    certificateChainRequest_commandInfo.parameters = certificateChainRequest_parametersList;
    operationalCredentials_clusterInfo.commands.add(certificateChainRequest_commandInfo);
    List<CommandParameter> opCSRRequest_parametersList = new ArrayList<>();
    CommandInfo opCSRRequest_commandInfo = new CommandInfo();
    opCSRRequest_commandInfo.name = "opCSRRequest";
    operationalCredentials_commandInfo.callbackClass = OpCSRResponseCallback.class;
    CommandParameter CSRNonce_commandParameter = new CommandParameter("CSRNonce", byte[].class);
    opCSRRequest_parametersList.add(CSRNonce_commandParameter);

    opCSRRequest_commandInfo.parameters = opCSRRequest_parametersList;
    operationalCredentials_clusterInfo.commands.add(opCSRRequest_commandInfo);
    List<CommandParameter> removeFabric_parametersList = new ArrayList<>();
    CommandInfo removeFabric_commandInfo = new CommandInfo();
    removeFabric_commandInfo.name = "removeFabric";
    operationalCredentials_commandInfo.callbackClass = NOCResponseCallback.class;
    CommandParameter fabricIndex_commandParameter = new CommandParameter("fabricIndex", int.class);
    removeFabric_parametersList.add(fabricIndex_commandParameter);

    removeFabric_commandInfo.parameters = removeFabric_parametersList;
    operationalCredentials_clusterInfo.commands.add(removeFabric_commandInfo);
    List<CommandParameter> removeTrustedRootCertificate_parametersList = new ArrayList<>();
    CommandInfo removeTrustedRootCertificate_commandInfo = new CommandInfo();
    removeTrustedRootCertificate_commandInfo.name = "removeTrustedRootCertificate";
    operationalCredentials_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter trustedRootIdentifier_commandParameter =
        new CommandParameter("trustedRootIdentifier", byte[].class);
    removeTrustedRootCertificate_parametersList.add(trustedRootIdentifier_commandParameter);

    removeTrustedRootCertificate_commandInfo.parameters =
        removeTrustedRootCertificate_parametersList;
    operationalCredentials_clusterInfo.commands.add(removeTrustedRootCertificate_commandInfo);
    List<CommandParameter> updateFabricLabel_parametersList = new ArrayList<>();
    CommandInfo updateFabricLabel_commandInfo = new CommandInfo();
    updateFabricLabel_commandInfo.name = "updateFabricLabel";
    operationalCredentials_commandInfo.callbackClass = NOCResponseCallback.class;
    CommandParameter label_commandParameter = new CommandParameter("label", String.class);
    updateFabricLabel_parametersList.add(label_commandParameter);

    updateFabricLabel_commandInfo.parameters = updateFabricLabel_parametersList;
    operationalCredentials_clusterInfo.commands.add(updateFabricLabel_commandInfo);
    List<CommandParameter> updateNOC_parametersList = new ArrayList<>();
    CommandInfo updateNOC_commandInfo = new CommandInfo();
    updateNOC_commandInfo.name = "updateNOC";
    operationalCredentials_commandInfo.callbackClass = NOCResponseCallback.class;
    CommandParameter NOCValue_commandParameter = new CommandParameter("NOCValue", byte[].class);
    updateNOC_parametersList.add(NOCValue_commandParameter);

    CommandParameter ICACValue_commandParameter = new CommandParameter("ICACValue", byte[].class);
    updateNOC_parametersList.add(ICACValue_commandParameter);

    updateNOC_commandInfo.parameters = updateNOC_parametersList;
    operationalCredentials_clusterInfo.commands.add(updateNOC_commandInfo);
    clusterInfoMapping.put("operationalCredentials", operationalCredentials_clusterInfo);
    ClusterInfo powerSource_clusterInfo = new ClusterInfo("powerSource");
    clusterInfoMapping.put("powerSource", powerSource_clusterInfo);
    ClusterInfo pressureMeasurement_clusterInfo = new ClusterInfo("pressureMeasurement");
    clusterInfoMapping.put("pressureMeasurement", pressureMeasurement_clusterInfo);
    ClusterInfo pumpConfigurationAndControl_clusterInfo =
        new ClusterInfo("pumpConfigurationAndControl");
    clusterInfoMapping.put("pumpConfigurationAndControl", pumpConfigurationAndControl_clusterInfo);
    ClusterInfo relativeHumidityMeasurement_clusterInfo =
        new ClusterInfo("relativeHumidityMeasurement");
    clusterInfoMapping.put("relativeHumidityMeasurement", relativeHumidityMeasurement_clusterInfo);
    ClusterInfo scenes_clusterInfo = new ClusterInfo("scenes");
    List<CommandParameter> addScene_parametersList = new ArrayList<>();
    CommandInfo addScene_commandInfo = new CommandInfo();
    addScene_commandInfo.name = "addScene";
    scenes_commandInfo.callbackClass = AddSceneResponseCallback.class;
    CommandParameter groupId_commandParameter = new CommandParameter("groupId", int.class);
    addScene_parametersList.add(groupId_commandParameter);

    CommandParameter sceneId_commandParameter = new CommandParameter("sceneId", int.class);
    addScene_parametersList.add(sceneId_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    addScene_parametersList.add(transitionTime_commandParameter);

    CommandParameter sceneName_commandParameter = new CommandParameter("sceneName", String.class);
    addScene_parametersList.add(sceneName_commandParameter);

    CommandParameter clusterId_commandParameter = new CommandParameter("clusterId", long.class);
    addScene_parametersList.add(clusterId_commandParameter);

    CommandParameter length_commandParameter = new CommandParameter("length", int.class);
    addScene_parametersList.add(length_commandParameter);

    CommandParameter value_commandParameter = new CommandParameter("value", int.class);
    addScene_parametersList.add(value_commandParameter);

    addScene_commandInfo.parameters = addScene_parametersList;
    scenes_clusterInfo.commands.add(addScene_commandInfo);
    List<CommandParameter> getSceneMembership_parametersList = new ArrayList<>();
    CommandInfo getSceneMembership_commandInfo = new CommandInfo();
    getSceneMembership_commandInfo.name = "getSceneMembership";
    scenes_commandInfo.callbackClass = GetSceneMembershipResponseCallback.class;
    CommandParameter groupId_commandParameter = new CommandParameter("groupId", int.class);
    getSceneMembership_parametersList.add(groupId_commandParameter);

    getSceneMembership_commandInfo.parameters = getSceneMembership_parametersList;
    scenes_clusterInfo.commands.add(getSceneMembership_commandInfo);
    List<CommandParameter> recallScene_parametersList = new ArrayList<>();
    CommandInfo recallScene_commandInfo = new CommandInfo();
    recallScene_commandInfo.name = "recallScene";
    scenes_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter groupId_commandParameter = new CommandParameter("groupId", int.class);
    recallScene_parametersList.add(groupId_commandParameter);

    CommandParameter sceneId_commandParameter = new CommandParameter("sceneId", int.class);
    recallScene_parametersList.add(sceneId_commandParameter);

    CommandParameter transitionTime_commandParameter =
        new CommandParameter("transitionTime", int.class);
    recallScene_parametersList.add(transitionTime_commandParameter);

    recallScene_commandInfo.parameters = recallScene_parametersList;
    scenes_clusterInfo.commands.add(recallScene_commandInfo);
    List<CommandParameter> removeAllScenes_parametersList = new ArrayList<>();
    CommandInfo removeAllScenes_commandInfo = new CommandInfo();
    removeAllScenes_commandInfo.name = "removeAllScenes";
    scenes_commandInfo.callbackClass = RemoveAllScenesResponseCallback.class;
    CommandParameter groupId_commandParameter = new CommandParameter("groupId", int.class);
    removeAllScenes_parametersList.add(groupId_commandParameter);

    removeAllScenes_commandInfo.parameters = removeAllScenes_parametersList;
    scenes_clusterInfo.commands.add(removeAllScenes_commandInfo);
    List<CommandParameter> removeScene_parametersList = new ArrayList<>();
    CommandInfo removeScene_commandInfo = new CommandInfo();
    removeScene_commandInfo.name = "removeScene";
    scenes_commandInfo.callbackClass = RemoveSceneResponseCallback.class;
    CommandParameter groupId_commandParameter = new CommandParameter("groupId", int.class);
    removeScene_parametersList.add(groupId_commandParameter);

    CommandParameter sceneId_commandParameter = new CommandParameter("sceneId", int.class);
    removeScene_parametersList.add(sceneId_commandParameter);

    removeScene_commandInfo.parameters = removeScene_parametersList;
    scenes_clusterInfo.commands.add(removeScene_commandInfo);
    List<CommandParameter> storeScene_parametersList = new ArrayList<>();
    CommandInfo storeScene_commandInfo = new CommandInfo();
    storeScene_commandInfo.name = "storeScene";
    scenes_commandInfo.callbackClass = StoreSceneResponseCallback.class;
    CommandParameter groupId_commandParameter = new CommandParameter("groupId", int.class);
    storeScene_parametersList.add(groupId_commandParameter);

    CommandParameter sceneId_commandParameter = new CommandParameter("sceneId", int.class);
    storeScene_parametersList.add(sceneId_commandParameter);

    storeScene_commandInfo.parameters = storeScene_parametersList;
    scenes_clusterInfo.commands.add(storeScene_commandInfo);
    List<CommandParameter> viewScene_parametersList = new ArrayList<>();
    CommandInfo viewScene_commandInfo = new CommandInfo();
    viewScene_commandInfo.name = "viewScene";
    scenes_commandInfo.callbackClass = ViewSceneResponseCallback.class;
    CommandParameter groupId_commandParameter = new CommandParameter("groupId", int.class);
    viewScene_parametersList.add(groupId_commandParameter);

    CommandParameter sceneId_commandParameter = new CommandParameter("sceneId", int.class);
    viewScene_parametersList.add(sceneId_commandParameter);

    viewScene_commandInfo.parameters = viewScene_parametersList;
    scenes_clusterInfo.commands.add(viewScene_commandInfo);
    clusterInfoMapping.put("scenes", scenes_clusterInfo);
    ClusterInfo softwareDiagnostics_clusterInfo = new ClusterInfo("softwareDiagnostics");
    List<CommandParameter> resetWatermarks_parametersList = new ArrayList<>();
    CommandInfo resetWatermarks_commandInfo = new CommandInfo();
    resetWatermarks_commandInfo.name = "resetWatermarks";
    softwareDiagnostics_commandInfo.callbackClass = DefaultClusterCallback.class;
    resetWatermarks_commandInfo.parameters = resetWatermarks_parametersList;
    softwareDiagnostics_clusterInfo.commands.add(resetWatermarks_commandInfo);
    clusterInfoMapping.put("softwareDiagnostics", softwareDiagnostics_clusterInfo);
    ClusterInfo switch_clusterInfo = new ClusterInfo("switch");
    clusterInfoMapping.put("switch", switch_clusterInfo);
    ClusterInfo tvChannel_clusterInfo = new ClusterInfo("tvChannel");
    List<CommandParameter> changeChannel_parametersList = new ArrayList<>();
    CommandInfo changeChannel_commandInfo = new CommandInfo();
    changeChannel_commandInfo.name = "changeChannel";
    tvChannel_commandInfo.callbackClass = ChangeChannelResponseCallback.class;
    CommandParameter match_commandParameter = new CommandParameter("match", String.class);
    changeChannel_parametersList.add(match_commandParameter);

    changeChannel_commandInfo.parameters = changeChannel_parametersList;
    tvChannel_clusterInfo.commands.add(changeChannel_commandInfo);
    List<CommandParameter> changeChannelByNumber_parametersList = new ArrayList<>();
    CommandInfo changeChannelByNumber_commandInfo = new CommandInfo();
    changeChannelByNumber_commandInfo.name = "changeChannelByNumber";
    tvChannel_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter majorNumber_commandParameter = new CommandParameter("majorNumber", int.class);
    changeChannelByNumber_parametersList.add(majorNumber_commandParameter);

    CommandParameter minorNumber_commandParameter = new CommandParameter("minorNumber", int.class);
    changeChannelByNumber_parametersList.add(minorNumber_commandParameter);

    changeChannelByNumber_commandInfo.parameters = changeChannelByNumber_parametersList;
    tvChannel_clusterInfo.commands.add(changeChannelByNumber_commandInfo);
    List<CommandParameter> skipChannel_parametersList = new ArrayList<>();
    CommandInfo skipChannel_commandInfo = new CommandInfo();
    skipChannel_commandInfo.name = "skipChannel";
    tvChannel_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter count_commandParameter = new CommandParameter("count", int.class);
    skipChannel_parametersList.add(count_commandParameter);

    skipChannel_commandInfo.parameters = skipChannel_parametersList;
    tvChannel_clusterInfo.commands.add(skipChannel_commandInfo);
    clusterInfoMapping.put("tvChannel", tvChannel_clusterInfo);
    ClusterInfo targetNavigator_clusterInfo = new ClusterInfo("targetNavigator");
    List<CommandParameter> navigateTarget_parametersList = new ArrayList<>();
    CommandInfo navigateTarget_commandInfo = new CommandInfo();
    navigateTarget_commandInfo.name = "navigateTarget";
    targetNavigator_commandInfo.callbackClass = NavigateTargetResponseCallback.class;
    CommandParameter target_commandParameter = new CommandParameter("target", int.class);
    navigateTarget_parametersList.add(target_commandParameter);

    CommandParameter data_commandParameter = new CommandParameter("data", String.class);
    navigateTarget_parametersList.add(data_commandParameter);

    navigateTarget_commandInfo.parameters = navigateTarget_parametersList;
    targetNavigator_clusterInfo.commands.add(navigateTarget_commandInfo);
    clusterInfoMapping.put("targetNavigator", targetNavigator_clusterInfo);
    ClusterInfo temperatureMeasurement_clusterInfo = new ClusterInfo("temperatureMeasurement");
    clusterInfoMapping.put("temperatureMeasurement", temperatureMeasurement_clusterInfo);
    ClusterInfo testCluster_clusterInfo = new ClusterInfo("testCluster");
    List<CommandParameter> test_parametersList = new ArrayList<>();
    CommandInfo test_commandInfo = new CommandInfo();
    test_commandInfo.name = "test";
    testCluster_commandInfo.callbackClass = DefaultClusterCallback.class;
    test_commandInfo.parameters = test_parametersList;
    testCluster_clusterInfo.commands.add(test_commandInfo);
    List<CommandParameter> testAddArguments_parametersList = new ArrayList<>();
    CommandInfo testAddArguments_commandInfo = new CommandInfo();
    testAddArguments_commandInfo.name = "testAddArguments";
    testCluster_commandInfo.callbackClass = TestAddArgumentsResponseCallback.class;
    CommandParameter arg1_commandParameter = new CommandParameter("arg1", int.class);
    testAddArguments_parametersList.add(arg1_commandParameter);

    CommandParameter arg2_commandParameter = new CommandParameter("arg2", int.class);
    testAddArguments_parametersList.add(arg2_commandParameter);

    testAddArguments_commandInfo.parameters = testAddArguments_parametersList;
    testCluster_clusterInfo.commands.add(testAddArguments_commandInfo);
    List<CommandParameter> testNotHandled_parametersList = new ArrayList<>();
    CommandInfo testNotHandled_commandInfo = new CommandInfo();
    testNotHandled_commandInfo.name = "testNotHandled";
    testCluster_commandInfo.callbackClass = DefaultClusterCallback.class;
    testNotHandled_commandInfo.parameters = testNotHandled_parametersList;
    testCluster_clusterInfo.commands.add(testNotHandled_commandInfo);
    List<CommandParameter> testSpecific_parametersList = new ArrayList<>();
    CommandInfo testSpecific_commandInfo = new CommandInfo();
    testSpecific_commandInfo.name = "testSpecific";
    testCluster_commandInfo.callbackClass = TestSpecificResponseCallback.class;
    testSpecific_commandInfo.parameters = testSpecific_parametersList;
    testCluster_clusterInfo.commands.add(testSpecific_commandInfo);
    List<CommandParameter> testUnknownCommand_parametersList = new ArrayList<>();
    CommandInfo testUnknownCommand_commandInfo = new CommandInfo();
    testUnknownCommand_commandInfo.name = "testUnknownCommand";
    testCluster_commandInfo.callbackClass = DefaultClusterCallback.class;
    testUnknownCommand_commandInfo.parameters = testUnknownCommand_parametersList;
    testCluster_clusterInfo.commands.add(testUnknownCommand_commandInfo);
    clusterInfoMapping.put("testCluster", testCluster_clusterInfo);
    ClusterInfo thermostat_clusterInfo = new ClusterInfo("thermostat");
    List<CommandParameter> clearWeeklySchedule_parametersList = new ArrayList<>();
    CommandInfo clearWeeklySchedule_commandInfo = new CommandInfo();
    clearWeeklySchedule_commandInfo.name = "clearWeeklySchedule";
    thermostat_commandInfo.callbackClass = DefaultClusterCallback.class;
    clearWeeklySchedule_commandInfo.parameters = clearWeeklySchedule_parametersList;
    thermostat_clusterInfo.commands.add(clearWeeklySchedule_commandInfo);
    List<CommandParameter> getRelayStatusLog_parametersList = new ArrayList<>();
    CommandInfo getRelayStatusLog_commandInfo = new CommandInfo();
    getRelayStatusLog_commandInfo.name = "getRelayStatusLog";
    thermostat_commandInfo.callbackClass = DefaultClusterCallback.class;
    getRelayStatusLog_commandInfo.parameters = getRelayStatusLog_parametersList;
    thermostat_clusterInfo.commands.add(getRelayStatusLog_commandInfo);
    List<CommandParameter> getWeeklySchedule_parametersList = new ArrayList<>();
    CommandInfo getWeeklySchedule_commandInfo = new CommandInfo();
    getWeeklySchedule_commandInfo.name = "getWeeklySchedule";
    thermostat_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter daysToReturn_commandParameter =
        new CommandParameter("daysToReturn", int.class);
    getWeeklySchedule_parametersList.add(daysToReturn_commandParameter);

    CommandParameter modeToReturn_commandParameter =
        new CommandParameter("modeToReturn", int.class);
    getWeeklySchedule_parametersList.add(modeToReturn_commandParameter);

    getWeeklySchedule_commandInfo.parameters = getWeeklySchedule_parametersList;
    thermostat_clusterInfo.commands.add(getWeeklySchedule_commandInfo);
    List<CommandParameter> setWeeklySchedule_parametersList = new ArrayList<>();
    CommandInfo setWeeklySchedule_commandInfo = new CommandInfo();
    setWeeklySchedule_commandInfo.name = "setWeeklySchedule";
    thermostat_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter numberOfTransitionsForSequence_commandParameter =
        new CommandParameter("numberOfTransitionsForSequence", int.class);
    setWeeklySchedule_parametersList.add(numberOfTransitionsForSequence_commandParameter);

    CommandParameter dayOfWeekForSequence_commandParameter =
        new CommandParameter("dayOfWeekForSequence", int.class);
    setWeeklySchedule_parametersList.add(dayOfWeekForSequence_commandParameter);

    CommandParameter modeForSequence_commandParameter =
        new CommandParameter("modeForSequence", int.class);
    setWeeklySchedule_parametersList.add(modeForSequence_commandParameter);

    CommandParameter payload_commandParameter = new CommandParameter("payload", int.class);
    setWeeklySchedule_parametersList.add(payload_commandParameter);

    setWeeklySchedule_commandInfo.parameters = setWeeklySchedule_parametersList;
    thermostat_clusterInfo.commands.add(setWeeklySchedule_commandInfo);
    List<CommandParameter> setpointRaiseLower_parametersList = new ArrayList<>();
    CommandInfo setpointRaiseLower_commandInfo = new CommandInfo();
    setpointRaiseLower_commandInfo.name = "setpointRaiseLower";
    thermostat_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter mode_commandParameter = new CommandParameter("mode", int.class);
    setpointRaiseLower_parametersList.add(mode_commandParameter);

    CommandParameter amount_commandParameter = new CommandParameter("amount", int.class);
    setpointRaiseLower_parametersList.add(amount_commandParameter);

    setpointRaiseLower_commandInfo.parameters = setpointRaiseLower_parametersList;
    thermostat_clusterInfo.commands.add(setpointRaiseLower_commandInfo);
    clusterInfoMapping.put("thermostat", thermostat_clusterInfo);
    ClusterInfo thermostatUserInterfaceConfiguration_clusterInfo =
        new ClusterInfo("thermostatUserInterfaceConfiguration");
    clusterInfoMapping.put(
        "thermostatUserInterfaceConfiguration", thermostatUserInterfaceConfiguration_clusterInfo);
    ClusterInfo threadNetworkDiagnostics_clusterInfo = new ClusterInfo("threadNetworkDiagnostics");
    List<CommandParameter> resetCounts_parametersList = new ArrayList<>();
    CommandInfo resetCounts_commandInfo = new CommandInfo();
    resetCounts_commandInfo.name = "resetCounts";
    threadNetworkDiagnostics_commandInfo.callbackClass = DefaultClusterCallback.class;
    resetCounts_commandInfo.parameters = resetCounts_parametersList;
    threadNetworkDiagnostics_clusterInfo.commands.add(resetCounts_commandInfo);
    clusterInfoMapping.put("threadNetworkDiagnostics", threadNetworkDiagnostics_clusterInfo);
    ClusterInfo wakeOnLan_clusterInfo = new ClusterInfo("wakeOnLan");
    clusterInfoMapping.put("wakeOnLan", wakeOnLan_clusterInfo);
    ClusterInfo wiFiNetworkDiagnostics_clusterInfo = new ClusterInfo("wiFiNetworkDiagnostics");
    List<CommandParameter> resetCounts_parametersList = new ArrayList<>();
    CommandInfo resetCounts_commandInfo = new CommandInfo();
    resetCounts_commandInfo.name = "resetCounts";
    wiFiNetworkDiagnostics_commandInfo.callbackClass = DefaultClusterCallback.class;
    resetCounts_commandInfo.parameters = resetCounts_parametersList;
    wiFiNetworkDiagnostics_clusterInfo.commands.add(resetCounts_commandInfo);
    clusterInfoMapping.put("wiFiNetworkDiagnostics", wiFiNetworkDiagnostics_clusterInfo);
    ClusterInfo windowCovering_clusterInfo = new ClusterInfo("windowCovering");
    List<CommandParameter> downOrClose_parametersList = new ArrayList<>();
    CommandInfo downOrClose_commandInfo = new CommandInfo();
    downOrClose_commandInfo.name = "downOrClose";
    windowCovering_commandInfo.callbackClass = DefaultClusterCallback.class;
    downOrClose_commandInfo.parameters = downOrClose_parametersList;
    windowCovering_clusterInfo.commands.add(downOrClose_commandInfo);
    List<CommandParameter> goToLiftPercentage_parametersList = new ArrayList<>();
    CommandInfo goToLiftPercentage_commandInfo = new CommandInfo();
    goToLiftPercentage_commandInfo.name = "goToLiftPercentage";
    windowCovering_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter liftPercentageValue_commandParameter =
        new CommandParameter("liftPercentageValue", int.class);
    goToLiftPercentage_parametersList.add(liftPercentageValue_commandParameter);

    CommandParameter liftPercent100thsValue_commandParameter =
        new CommandParameter("liftPercent100thsValue", int.class);
    goToLiftPercentage_parametersList.add(liftPercent100thsValue_commandParameter);

    goToLiftPercentage_commandInfo.parameters = goToLiftPercentage_parametersList;
    windowCovering_clusterInfo.commands.add(goToLiftPercentage_commandInfo);
    List<CommandParameter> goToLiftValue_parametersList = new ArrayList<>();
    CommandInfo goToLiftValue_commandInfo = new CommandInfo();
    goToLiftValue_commandInfo.name = "goToLiftValue";
    windowCovering_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter liftValue_commandParameter = new CommandParameter("liftValue", int.class);
    goToLiftValue_parametersList.add(liftValue_commandParameter);

    goToLiftValue_commandInfo.parameters = goToLiftValue_parametersList;
    windowCovering_clusterInfo.commands.add(goToLiftValue_commandInfo);
    List<CommandParameter> goToTiltPercentage_parametersList = new ArrayList<>();
    CommandInfo goToTiltPercentage_commandInfo = new CommandInfo();
    goToTiltPercentage_commandInfo.name = "goToTiltPercentage";
    windowCovering_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter tiltPercentageValue_commandParameter =
        new CommandParameter("tiltPercentageValue", int.class);
    goToTiltPercentage_parametersList.add(tiltPercentageValue_commandParameter);

    CommandParameter tiltPercent100thsValue_commandParameter =
        new CommandParameter("tiltPercent100thsValue", int.class);
    goToTiltPercentage_parametersList.add(tiltPercent100thsValue_commandParameter);

    goToTiltPercentage_commandInfo.parameters = goToTiltPercentage_parametersList;
    windowCovering_clusterInfo.commands.add(goToTiltPercentage_commandInfo);
    List<CommandParameter> goToTiltValue_parametersList = new ArrayList<>();
    CommandInfo goToTiltValue_commandInfo = new CommandInfo();
    goToTiltValue_commandInfo.name = "goToTiltValue";
    windowCovering_commandInfo.callbackClass = DefaultClusterCallback.class;
    CommandParameter tiltValue_commandParameter = new CommandParameter("tiltValue", int.class);
    goToTiltValue_parametersList.add(tiltValue_commandParameter);

    goToTiltValue_commandInfo.parameters = goToTiltValue_parametersList;
    windowCovering_clusterInfo.commands.add(goToTiltValue_commandInfo);
    List<CommandParameter> stopMotion_parametersList = new ArrayList<>();
    CommandInfo stopMotion_commandInfo = new CommandInfo();
    stopMotion_commandInfo.name = "stopMotion";
    windowCovering_commandInfo.callbackClass = DefaultClusterCallback.class;
    stopMotion_commandInfo.parameters = stopMotion_parametersList;
    windowCovering_clusterInfo.commands.add(stopMotion_commandInfo);
    List<CommandParameter> upOrOpen_parametersList = new ArrayList<>();
    CommandInfo upOrOpen_commandInfo = new CommandInfo();
    upOrOpen_commandInfo.name = "upOrOpen";
    windowCovering_commandInfo.callbackClass = DefaultClusterCallback.class;
    upOrOpen_commandInfo.parameters = upOrOpen_parametersList;
    windowCovering_clusterInfo.commands.add(upOrOpen_commandInfo);
    clusterInfoMapping.put("windowCovering", windowCovering_clusterInfo);
  }
}
