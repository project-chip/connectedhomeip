/*
 *
 *    Copyright (c) 2023 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package chip.devicecontroller;

import chip.devicecontroller.model.AttributeState;
import chip.devicecontroller.model.AttributeWriteRequest;
import chip.devicecontroller.model.ChipAttributePath;
import chip.devicecontroller.model.ChipEventPath;
import chip.devicecontroller.model.ClusterState;
import chip.devicecontroller.model.EndpointState;
import chip.devicecontroller.model.InvokeElement;
import chip.devicecontroller.model.NodeState;
import chip.devicecontroller.model.Status;

import javax.annotation.Nullable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import static chip.devicecontroller.ChipTLVType.*;

public class ChipClusters {

  public interface BaseClusterCallback {
    void onError(Exception error);
  }

  public interface DefaultClusterCallback extends BaseClusterCallback {
    void onSuccess();
  }

  public interface BaseAttributeCallback {
    void onError(Exception error);
    default void onSubscriptionEstablished(long subscriptionId) {}
  }

  public interface CharStringAttributeCallback extends BaseAttributeCallback {
    /** Indicates a successful read for a CHAR_STRING attribute. */
    void onSuccess(String value);
  }

  public interface OctetStringAttributeCallback extends BaseAttributeCallback {
    /** Indicates a successful read for an OCTET_STRING attribute. */
    void onSuccess(byte[] value);
  }

  public interface IntegerAttributeCallback extends BaseAttributeCallback {
    void onSuccess(int value);
  }

  public interface LongAttributeCallback extends BaseAttributeCallback {
    void onSuccess(long value);
  }

  public interface BooleanAttributeCallback extends BaseAttributeCallback {
    void onSuccess(boolean value);
  }

  public interface FloatAttributeCallback extends BaseAttributeCallback {
    void onSuccess(float value);
  }

  public interface DoubleAttributeCallback extends BaseAttributeCallback {
    void onSuccess(double value);
  }

  public static abstract class BaseChipCluster {
    protected long chipClusterPtr;

    protected long devicePtr;
    protected int endpointId;
    protected long clusterId;

    private Optional<Long> timeoutMillis = Optional.empty();

    public BaseChipCluster(long devicePtr, int endpointId, long clusterId) {
      this.devicePtr = devicePtr;
      this.endpointId = endpointId;
      this.clusterId = clusterId;
    }

    /**
     * Sets the timeout, in milliseconds, after which commands sent through this cluster will fail
     * with a timeout (regardless of whether or not a response has been received). If set to an
     * empty optional, the default timeout will be used.
     */
    public void setCommandTimeout(Optional<Long> timeoutMillis) {
      this.timeoutMillis = timeoutMillis;
    }

    /** Returns the current timeout (in milliseconds) for commands sent through this cluster. */
    public Optional<Long> getCommandTimeout() {
      return timeoutMillis == null ? Optional.empty() : timeoutMillis;
    }

    @Deprecated
    public abstract long initWithDevice(long devicePtr, int endpointId);

    protected void readAttribute(
        ReportCallbackImpl callback,
        long attributeId,
        boolean isFabricFiltered) {
      ReportCallbackJni jniCallback = new ReportCallbackJni(null, callback, null);
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId);
      ChipInteractionClient.read(0, jniCallback.getCallbackHandle(), devicePtr, Arrays.asList(path), null, null, isFabricFiltered, timeoutMillis.orElse(0L).intValue(), null);
    }

    protected void writeAttribute(
        WriteAttributesCallbackImpl callback,
        long attributeId,
        BaseTLVType value,
        int timedRequestTimeoutMs) {
      WriteAttributesCallbackJni jniCallback = new WriteAttributesCallbackJni(callback);
      byte[] tlv = encodeToTlv(value);
      AttributeWriteRequest writeRequest = AttributeWriteRequest.newInstance(endpointId, clusterId, attributeId, tlv);
      ChipInteractionClient.write(0, jniCallback.getCallbackHandle(), devicePtr, Arrays.asList(writeRequest), timedRequestTimeoutMs, timeoutMillis.orElse(0L).intValue());
    }

    protected void subscribeAttribute(
        ReportCallbackImpl callback,
        long attributeId,
        int minInterval,
        int maxInterval) {
      ReportCallbackJni jniCallback = new ReportCallbackJni(callback, callback, callback);
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, attributeId);
      int fabricIndex = ChipInteractionClient.getFabricIndex(devicePtr);
      long deviceId = ChipInteractionClient.getRemoteDeviceId(devicePtr);
      ChipInteractionClient.subscribe(0, jniCallback.getCallbackHandle(), devicePtr, Arrays.asList(path), null, null, minInterval, maxInterval, false, true, timeoutMillis.orElse(0L).intValue(), null, ChipICDClient.isPeerICDClient(fabricIndex, deviceId));
    }

    protected void invoke(
        InvokeCallbackImpl callback,
        long commandId,
        BaseTLVType value,
        int timedRequestTimeoutMs) {
      InvokeCallbackJni jniCallback = new InvokeCallbackJni(callback);
      byte[] tlv = encodeToTlv(value);
      InvokeElement element = InvokeElement.newInstance(endpointId, clusterId, commandId, tlv, null);
      ChipInteractionClient.invoke(0, jniCallback.getCallbackHandle(), devicePtr, element, timedRequestTimeoutMs, timeoutMillis.orElse(0L).intValue());
    }

    private static native byte[] encodeToTlv(BaseTLVType value);

    static native BaseTLVType decodeFromTlv(byte[] tlv);

    @Deprecated
    public void deleteCluster(long chipClusterPtr) {}
    @SuppressWarnings("deprecation")
    protected void finalize() throws Throwable {
      super.finalize();

      if (chipClusterPtr != 0) {
        deleteCluster(chipClusterPtr);
        chipClusterPtr = 0;
      }
    }
  }

  abstract static class ReportCallbackImpl implements ReportCallback, SubscriptionEstablishedCallback, ResubscriptionAttemptCallback {
    private BaseAttributeCallback callback;
    private ChipAttributePath path;

    private static final long CHIP_ERROR_UNSUPPORTED_ATTRIBUTE = 0x86;

    ReportCallbackImpl(BaseAttributeCallback callback, ChipAttributePath path) {
      this.callback = callback;
      this.path = path;
    }

    @Override
    public void onError(
        @Nullable ChipAttributePath attributePath,
        @Nullable ChipEventPath eventPath,
        @Nonnull Exception e) {
      callback.onError(e);
    }

    @Override
    public void onReport(NodeState nodeState) {
      if (nodeState == null) {
        callback.onError(new ChipClusterException());
        return;
      }

      EndpointState endpointState = nodeState.getEndpointState((int)path.getEndpointId().getId());
      if (endpointState == null) {
        callback.onError(new ChipClusterException(CHIP_ERROR_UNSUPPORTED_ATTRIBUTE));
        return;
      }

      ClusterState clusterState = endpointState.getClusterState(path.getClusterId().getId());
      if (clusterState == null) {
        callback.onError(new ChipClusterException(CHIP_ERROR_UNSUPPORTED_ATTRIBUTE));
        return;
      }

      AttributeState attributeState = clusterState.getAttributeState(path.getAttributeId().getId());
      if (attributeState == null) {
        callback.onError(new ChipClusterException(CHIP_ERROR_UNSUPPORTED_ATTRIBUTE));
        return;
      }

      byte[] tlv = attributeState.getTlv();
      if (tlv == null) {
          callback.onError(new ChipClusterException(CHIP_ERROR_UNSUPPORTED_ATTRIBUTE));
          return;
      }

      onSuccess(tlv);
    }

    @Override
    public void onSubscriptionEstablished(long subscriptionId) {
      callback.onSubscriptionEstablished(subscriptionId);
    }

    @Override
    public void onResubscriptionAttempt(long terminationCause, long nextResubscribeIntervalMsec) {}

    public abstract void onSuccess(byte[] tlv);
  }

  static class WriteAttributesCallbackImpl implements WriteAttributesCallback {
    private DefaultClusterCallback callback;

    WriteAttributesCallbackImpl(DefaultClusterCallback callback) {
      this.callback = callback;
    }

    @Override
    public void onResponse(ChipAttributePath attributePath, Status status) {
      if (status.getStatus() == Status.Code.Success)
      {
        callback.onSuccess();
      }
      else
      {
        callback.onError(new StatusException(status.getStatus()));
      }
    }

    @Override
    public void onError(@Nullable ChipAttributePath attributePath, Exception e) {
      callback.onError(e);
    }
  }

  abstract static class InvokeCallbackImpl implements InvokeCallback {
    private BaseClusterCallback callback;

    private static final long CHIP_ERROR_UNSUPPORTED_COMMAND = 0x81;

    InvokeCallbackImpl(BaseClusterCallback callback) {
      this.callback = callback;
    }

    public void onError(Exception e) {
      callback.onError(e);
    }

    public void onResponse(InvokeElement invokeElement, long successCode) {
      byte[] tlv = invokeElement.getTlvByteArray();
      if (tlv == null) {
        onResponse(null);
        return;
      }
      BaseTLVType value = BaseChipCluster.decodeFromTlv(tlv);
      if (value == null || value.type() != TLVType.Struct) {
        callback.onError(new ChipClusterException(CHIP_ERROR_UNSUPPORTED_COMMAND));
        return;
      }
      onResponse((StructType)value);
    }

    public abstract void onResponse(StructType value);
  }

  public static class IdentifyCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 3L;

    private static final long IDENTIFY_TIME_ATTRIBUTE_ID = 0L;
    private static final long IDENTIFY_TYPE_ATTRIBUTE_ID = 1L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public IdentifyCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void identify(DefaultClusterCallback callback, Integer identifyTime) {
      identify(callback, identifyTime, 0);
    }

    public void identify(DefaultClusterCallback callback, Integer identifyTime, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long identifyTimeFieldID = 0L;
      BaseTLVType identifyTimetlvValue = new UIntType(identifyTime);
      elements.add(new StructElement(identifyTimeFieldID, identifyTimetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void triggerEffect(DefaultClusterCallback callback, Integer effectIdentifier, Integer effectVariant) {
      triggerEffect(callback, effectIdentifier, effectVariant, 0);
    }

    public void triggerEffect(DefaultClusterCallback callback, Integer effectIdentifier, Integer effectVariant, int timedInvokeTimeoutMs) {
      final long commandId = 64L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long effectIdentifierFieldID = 0L;
      BaseTLVType effectIdentifiertlvValue = new UIntType(effectIdentifier);
      elements.add(new StructElement(effectIdentifierFieldID, effectIdentifiertlvValue));

      final long effectVariantFieldID = 1L;
      BaseTLVType effectVarianttlvValue = new UIntType(effectVariant);
      elements.add(new StructElement(effectVariantFieldID, effectVarianttlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readIdentifyTimeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, IDENTIFY_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, IDENTIFY_TIME_ATTRIBUTE_ID, true);
    }

    public void writeIdentifyTimeAttribute(DefaultClusterCallback callback, Integer value) {
      writeIdentifyTimeAttribute(callback, value, 0);
    }

    public void writeIdentifyTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), IDENTIFY_TIME_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeIdentifyTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, IDENTIFY_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, IDENTIFY_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readIdentifyTypeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, IDENTIFY_TYPE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, IDENTIFY_TYPE_ATTRIBUTE_ID, true);
    }

    public void subscribeIdentifyTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, IDENTIFY_TYPE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, IDENTIFY_TYPE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class GroupsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 4L;

    private static final long NAME_SUPPORT_ATTRIBUTE_ID = 0L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public GroupsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void addGroup(AddGroupResponseCallback callback, Integer groupID, String groupName) {
      addGroup(callback, groupID, groupName, 0);
    }

    public void addGroup(AddGroupResponseCallback callback, Integer groupID, String groupName, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      final long groupNameFieldID = 1L;
      BaseTLVType groupNametlvValue = new StringType(groupName);
      elements.add(new StructElement(groupNameFieldID, groupNametlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status, groupID);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void viewGroup(ViewGroupResponseCallback callback, Integer groupID) {
      viewGroup(callback, groupID, 0);
    }

    public void viewGroup(ViewGroupResponseCallback callback, Integer groupID, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          final long groupNameFieldID = 2L;
          String groupName = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupNameFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                groupName = castingValue.value(String.class);
              }
            }
          }
          callback.onSuccess(status, groupID, groupName);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void getGroupMembership(GetGroupMembershipResponseCallback callback, ArrayList<Integer> groupList) {
      getGroupMembership(callback, groupList, 0);
    }

    public void getGroupMembership(GetGroupMembershipResponseCallback callback, ArrayList<Integer> groupList, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupListFieldID = 0L;
      BaseTLVType groupListtlvValue = ArrayType.generateArrayType(groupList, (elementgroupList) -> new UIntType(elementgroupList));
      elements.add(new StructElement(groupListFieldID, groupListtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long capacityFieldID = 0L;
          @Nullable Integer capacity = null;
          final long groupListFieldID = 1L;
          ArrayList<Integer> groupList = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == capacityFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                capacity = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupListFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                groupList = castingValue.map((elementcastingValue) -> elementcastingValue.value(Integer.class));
              }
            }
          }
          callback.onSuccess(capacity, groupList);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void removeGroup(RemoveGroupResponseCallback callback, Integer groupID) {
      removeGroup(callback, groupID, 0);
    }

    public void removeGroup(RemoveGroupResponseCallback callback, Integer groupID, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status, groupID);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void removeAllGroups(DefaultClusterCallback callback) {
      removeAllGroups(callback, 0);
    }

    public void removeAllGroups(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void addGroupIfIdentifying(DefaultClusterCallback callback, Integer groupID, String groupName) {
      addGroupIfIdentifying(callback, groupID, groupName, 0);
    }

    public void addGroupIfIdentifying(DefaultClusterCallback callback, Integer groupID, String groupName, int timedInvokeTimeoutMs) {
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      final long groupNameFieldID = 1L;
      BaseTLVType groupNametlvValue = new StringType(groupName);
      elements.add(new StructElement(groupNameFieldID, groupNametlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface AddGroupResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID);
    }

    public interface ViewGroupResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID, String groupName);
    }

    public interface GetGroupMembershipResponseCallback extends BaseClusterCallback {
      void onSuccess(@Nullable Integer capacity, ArrayList<Integer> groupList);
    }

    public interface RemoveGroupResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readNameSupportAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NAME_SUPPORT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NAME_SUPPORT_ATTRIBUTE_ID, true);
    }

    public void subscribeNameSupportAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NAME_SUPPORT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NAME_SUPPORT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class OnOffCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 6L;

    private static final long ON_OFF_ATTRIBUTE_ID = 0L;
    private static final long GLOBAL_SCENE_CONTROL_ATTRIBUTE_ID = 16384L;
    private static final long ON_TIME_ATTRIBUTE_ID = 16385L;
    private static final long OFF_WAIT_TIME_ATTRIBUTE_ID = 16386L;
    private static final long START_UP_ON_OFF_ATTRIBUTE_ID = 16387L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public OnOffCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void off(DefaultClusterCallback callback) {
      off(callback, 0);
    }

    public void off(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void on(DefaultClusterCallback callback) {
      on(callback, 0);
    }

    public void on(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void toggle(DefaultClusterCallback callback) {
      toggle(callback, 0);
    }

    public void toggle(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void offWithEffect(DefaultClusterCallback callback, Integer effectIdentifier, Integer effectVariant) {
      offWithEffect(callback, effectIdentifier, effectVariant, 0);
    }

    public void offWithEffect(DefaultClusterCallback callback, Integer effectIdentifier, Integer effectVariant, int timedInvokeTimeoutMs) {
      final long commandId = 64L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long effectIdentifierFieldID = 0L;
      BaseTLVType effectIdentifiertlvValue = new UIntType(effectIdentifier);
      elements.add(new StructElement(effectIdentifierFieldID, effectIdentifiertlvValue));

      final long effectVariantFieldID = 1L;
      BaseTLVType effectVarianttlvValue = new UIntType(effectVariant);
      elements.add(new StructElement(effectVariantFieldID, effectVarianttlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void onWithRecallGlobalScene(DefaultClusterCallback callback) {
      onWithRecallGlobalScene(callback, 0);
    }

    public void onWithRecallGlobalScene(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 65L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void onWithTimedOff(DefaultClusterCallback callback, Integer onOffControl, Integer onTime, Integer offWaitTime) {
      onWithTimedOff(callback, onOffControl, onTime, offWaitTime, 0);
    }

    public void onWithTimedOff(DefaultClusterCallback callback, Integer onOffControl, Integer onTime, Integer offWaitTime, int timedInvokeTimeoutMs) {
      final long commandId = 66L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long onOffControlFieldID = 0L;
      BaseTLVType onOffControltlvValue = new UIntType(onOffControl);
      elements.add(new StructElement(onOffControlFieldID, onOffControltlvValue));

      final long onTimeFieldID = 1L;
      BaseTLVType onTimetlvValue = new UIntType(onTime);
      elements.add(new StructElement(onTimeFieldID, onTimetlvValue));

      final long offWaitTimeFieldID = 2L;
      BaseTLVType offWaitTimetlvValue = new UIntType(offWaitTime);
      elements.add(new StructElement(offWaitTimeFieldID, offWaitTimetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface StartUpOnOffAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readOnOffAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_OFF_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_OFF_ATTRIBUTE_ID, true);
    }

    public void subscribeOnOffAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_OFF_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_OFF_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGlobalSceneControlAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GLOBAL_SCENE_CONTROL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GLOBAL_SCENE_CONTROL_ATTRIBUTE_ID, true);
    }

    public void subscribeGlobalSceneControlAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GLOBAL_SCENE_CONTROL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GLOBAL_SCENE_CONTROL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOnTimeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_TIME_ATTRIBUTE_ID, true);
    }

    public void writeOnTimeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnTimeAttribute(callback, value, 0);
    }

    public void writeOnTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), ON_TIME_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOffWaitTimeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OFF_WAIT_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OFF_WAIT_TIME_ATTRIBUTE_ID, true);
    }

    public void writeOffWaitTimeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOffWaitTimeAttribute(callback, value, 0);
    }

    public void writeOffWaitTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), OFF_WAIT_TIME_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOffWaitTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OFF_WAIT_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OFF_WAIT_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStartUpOnOffAttribute(
        StartUpOnOffAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_ON_OFF_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_ON_OFF_ATTRIBUTE_ID, true);
    }

    public void writeStartUpOnOffAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpOnOffAttribute(callback, value, 0);
    }

    public void writeStartUpOnOffAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), START_UP_ON_OFF_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpOnOffAttribute(
        StartUpOnOffAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_ON_OFF_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_ON_OFF_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class OnOffSwitchConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 7L;

    private static final long SWITCH_TYPE_ATTRIBUTE_ID = 0L;
    private static final long SWITCH_ACTIONS_ATTRIBUTE_ID = 16L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public OnOffSwitchConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSwitchTypeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SWITCH_TYPE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SWITCH_TYPE_ATTRIBUTE_ID, true);
    }

    public void subscribeSwitchTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SWITCH_TYPE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SWITCH_TYPE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSwitchActionsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SWITCH_ACTIONS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SWITCH_ACTIONS_ATTRIBUTE_ID, true);
    }

    public void writeSwitchActionsAttribute(DefaultClusterCallback callback, Integer value) {
      writeSwitchActionsAttribute(callback, value, 0);
    }

    public void writeSwitchActionsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), SWITCH_ACTIONS_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeSwitchActionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SWITCH_ACTIONS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SWITCH_ACTIONS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class LevelControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 8L;

    private static final long CURRENT_LEVEL_ATTRIBUTE_ID = 0L;
    private static final long REMAINING_TIME_ATTRIBUTE_ID = 1L;
    private static final long MIN_LEVEL_ATTRIBUTE_ID = 2L;
    private static final long MAX_LEVEL_ATTRIBUTE_ID = 3L;
    private static final long CURRENT_FREQUENCY_ATTRIBUTE_ID = 4L;
    private static final long MIN_FREQUENCY_ATTRIBUTE_ID = 5L;
    private static final long MAX_FREQUENCY_ATTRIBUTE_ID = 6L;
    private static final long OPTIONS_ATTRIBUTE_ID = 15L;
    private static final long ON_OFF_TRANSITION_TIME_ATTRIBUTE_ID = 16L;
    private static final long ON_LEVEL_ATTRIBUTE_ID = 17L;
    private static final long ON_TRANSITION_TIME_ATTRIBUTE_ID = 18L;
    private static final long OFF_TRANSITION_TIME_ATTRIBUTE_ID = 19L;
    private static final long DEFAULT_MOVE_RATE_ATTRIBUTE_ID = 20L;
    private static final long START_UP_CURRENT_LEVEL_ATTRIBUTE_ID = 16384L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public LevelControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void moveToLevel(DefaultClusterCallback callback, Integer level, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToLevel(callback, level, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void moveToLevel(DefaultClusterCallback callback, Integer level, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long levelFieldID = 0L;
      BaseTLVType leveltlvValue = new UIntType(level);
      elements.add(new StructElement(levelFieldID, leveltlvValue));

      final long transitionTimeFieldID = 1L;
      BaseTLVType transitionTimetlvValue = transitionTime != null ? new UIntType(transitionTime) : new NullType();
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void move(DefaultClusterCallback callback, Integer moveMode, @Nullable Integer rate, Integer optionsMask, Integer optionsOverride) {
      move(callback, moveMode, rate, optionsMask, optionsOverride, 0);
    }

    public void move(DefaultClusterCallback callback, Integer moveMode, @Nullable Integer rate, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long moveModeFieldID = 0L;
      BaseTLVType moveModetlvValue = new UIntType(moveMode);
      elements.add(new StructElement(moveModeFieldID, moveModetlvValue));

      final long rateFieldID = 1L;
      BaseTLVType ratetlvValue = rate != null ? new UIntType(rate) : new NullType();
      elements.add(new StructElement(rateFieldID, ratetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void step(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      step(callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void step(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long stepModeFieldID = 0L;
      BaseTLVType stepModetlvValue = new UIntType(stepMode);
      elements.add(new StructElement(stepModeFieldID, stepModetlvValue));

      final long stepSizeFieldID = 1L;
      BaseTLVType stepSizetlvValue = new UIntType(stepSize);
      elements.add(new StructElement(stepSizeFieldID, stepSizetlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = transitionTime != null ? new UIntType(transitionTime) : new NullType();
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void stop(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride) {
      stop(callback, optionsMask, optionsOverride, 0);
    }

    public void stop(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long optionsMaskFieldID = 0L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 1L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void moveToLevelWithOnOff(DefaultClusterCallback callback, Integer level, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToLevelWithOnOff(callback, level, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void moveToLevelWithOnOff(DefaultClusterCallback callback, Integer level, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long levelFieldID = 0L;
      BaseTLVType leveltlvValue = new UIntType(level);
      elements.add(new StructElement(levelFieldID, leveltlvValue));

      final long transitionTimeFieldID = 1L;
      BaseTLVType transitionTimetlvValue = transitionTime != null ? new UIntType(transitionTime) : new NullType();
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void moveWithOnOff(DefaultClusterCallback callback, Integer moveMode, @Nullable Integer rate, Integer optionsMask, Integer optionsOverride) {
      moveWithOnOff(callback, moveMode, rate, optionsMask, optionsOverride, 0);
    }

    public void moveWithOnOff(DefaultClusterCallback callback, Integer moveMode, @Nullable Integer rate, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long moveModeFieldID = 0L;
      BaseTLVType moveModetlvValue = new UIntType(moveMode);
      elements.add(new StructElement(moveModeFieldID, moveModetlvValue));

      final long rateFieldID = 1L;
      BaseTLVType ratetlvValue = rate != null ? new UIntType(rate) : new NullType();
      elements.add(new StructElement(rateFieldID, ratetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void stepWithOnOff(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      stepWithOnOff(callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void stepWithOnOff(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, @Nullable Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long stepModeFieldID = 0L;
      BaseTLVType stepModetlvValue = new UIntType(stepMode);
      elements.add(new StructElement(stepModeFieldID, stepModetlvValue));

      final long stepSizeFieldID = 1L;
      BaseTLVType stepSizetlvValue = new UIntType(stepSize);
      elements.add(new StructElement(stepSizeFieldID, stepSizetlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = transitionTime != null ? new UIntType(transitionTime) : new NullType();
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void stopWithOnOff(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride) {
      stopWithOnOff(callback, optionsMask, optionsOverride, 0);
    }

    public void stopWithOnOff(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long optionsMaskFieldID = 0L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 1L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void moveToClosestFrequency(DefaultClusterCallback callback, Integer frequency) {
      moveToClosestFrequency(callback, frequency, 0);
    }

    public void moveToClosestFrequency(DefaultClusterCallback callback, Integer frequency, int timedInvokeTimeoutMs) {
      final long commandId = 8L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long frequencyFieldID = 0L;
      BaseTLVType frequencytlvValue = new UIntType(frequency);
      elements.add(new StructElement(frequencyFieldID, frequencytlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface CurrentLevelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnLevelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnTransitionTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OffTransitionTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface DefaultMoveRateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface StartUpCurrentLevelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readCurrentLevelAttribute(
        CurrentLevelAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_LEVEL_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentLevelAttribute(
        CurrentLevelAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRemainingTimeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REMAINING_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REMAINING_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeRemainingTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REMAINING_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REMAINING_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinLevelAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_LEVEL_ATTRIBUTE_ID, true);
    }

    public void subscribeMinLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxLevelAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_LEVEL_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentFrequencyAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_FREQUENCY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_FREQUENCY_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentFrequencyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_FREQUENCY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_FREQUENCY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinFrequencyAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_FREQUENCY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_FREQUENCY_ATTRIBUTE_ID, true);
    }

    public void subscribeMinFrequencyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_FREQUENCY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_FREQUENCY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxFrequencyAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_FREQUENCY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_FREQUENCY_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxFrequencyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_FREQUENCY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_FREQUENCY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOptionsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPTIONS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPTIONS_ATTRIBUTE_ID, true);
    }

    public void writeOptionsAttribute(DefaultClusterCallback callback, Integer value) {
      writeOptionsAttribute(callback, value, 0);
    }

    public void writeOptionsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), OPTIONS_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOptionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPTIONS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPTIONS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOnOffTransitionTimeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_OFF_TRANSITION_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_OFF_TRANSITION_TIME_ATTRIBUTE_ID, true);
    }

    public void writeOnOffTransitionTimeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnOffTransitionTimeAttribute(callback, value, 0);
    }

    public void writeOnOffTransitionTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), ON_OFF_TRANSITION_TIME_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnOffTransitionTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_OFF_TRANSITION_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_OFF_TRANSITION_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOnLevelAttribute(
        OnLevelAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_LEVEL_ATTRIBUTE_ID, true);
    }

    public void writeOnLevelAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnLevelAttribute(callback, value, 0);
    }

    public void writeOnLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), ON_LEVEL_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnLevelAttribute(
        OnLevelAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOnTransitionTimeAttribute(
        OnTransitionTimeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_TRANSITION_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_TRANSITION_TIME_ATTRIBUTE_ID, true);
    }

    public void writeOnTransitionTimeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnTransitionTimeAttribute(callback, value, 0);
    }

    public void writeOnTransitionTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), ON_TRANSITION_TIME_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnTransitionTimeAttribute(
        OnTransitionTimeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_TRANSITION_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_TRANSITION_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOffTransitionTimeAttribute(
        OffTransitionTimeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OFF_TRANSITION_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OFF_TRANSITION_TIME_ATTRIBUTE_ID, true);
    }

    public void writeOffTransitionTimeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOffTransitionTimeAttribute(callback, value, 0);
    }

    public void writeOffTransitionTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), OFF_TRANSITION_TIME_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOffTransitionTimeAttribute(
        OffTransitionTimeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OFF_TRANSITION_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OFF_TRANSITION_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDefaultMoveRateAttribute(
        DefaultMoveRateAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_MOVE_RATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_MOVE_RATE_ATTRIBUTE_ID, true);
    }

    public void writeDefaultMoveRateAttribute(DefaultClusterCallback callback, Integer value) {
      writeDefaultMoveRateAttribute(callback, value, 0);
    }

    public void writeDefaultMoveRateAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), DEFAULT_MOVE_RATE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeDefaultMoveRateAttribute(
        DefaultMoveRateAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_MOVE_RATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_MOVE_RATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStartUpCurrentLevelAttribute(
        StartUpCurrentLevelAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_CURRENT_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_CURRENT_LEVEL_ATTRIBUTE_ID, true);
    }

    public void writeStartUpCurrentLevelAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpCurrentLevelAttribute(callback, value, 0);
    }

    public void writeStartUpCurrentLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), START_UP_CURRENT_LEVEL_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpCurrentLevelAttribute(
        StartUpCurrentLevelAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_CURRENT_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_CURRENT_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class BinaryInputBasicCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 15L;

    private static final long ACTIVE_TEXT_ATTRIBUTE_ID = 4L;
    private static final long DESCRIPTION_ATTRIBUTE_ID = 28L;
    private static final long INACTIVE_TEXT_ATTRIBUTE_ID = 46L;
    private static final long OUT_OF_SERVICE_ATTRIBUTE_ID = 81L;
    private static final long POLARITY_ATTRIBUTE_ID = 84L;
    private static final long PRESENT_VALUE_ATTRIBUTE_ID = 85L;
    private static final long RELIABILITY_ATTRIBUTE_ID = 103L;
    private static final long STATUS_FLAGS_ATTRIBUTE_ID = 111L;
    private static final long APPLICATION_TYPE_ATTRIBUTE_ID = 256L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public BinaryInputBasicCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readActiveTextAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_TEXT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_TEXT_ATTRIBUTE_ID, true);
    }

    public void writeActiveTextAttribute(DefaultClusterCallback callback, String value) {
      writeActiveTextAttribute(callback, value, 0);
    }

    public void writeActiveTextAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), ACTIVE_TEXT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeActiveTextAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_TEXT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_TEXT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDescriptionAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DESCRIPTION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DESCRIPTION_ATTRIBUTE_ID, true);
    }

    public void writeDescriptionAttribute(DefaultClusterCallback callback, String value) {
      writeDescriptionAttribute(callback, value, 0);
    }

    public void writeDescriptionAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), DESCRIPTION_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeDescriptionAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DESCRIPTION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DESCRIPTION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInactiveTextAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INACTIVE_TEXT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INACTIVE_TEXT_ATTRIBUTE_ID, true);
    }

    public void writeInactiveTextAttribute(DefaultClusterCallback callback, String value) {
      writeInactiveTextAttribute(callback, value, 0);
    }

    public void writeInactiveTextAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INACTIVE_TEXT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInactiveTextAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INACTIVE_TEXT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INACTIVE_TEXT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOutOfServiceAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OUT_OF_SERVICE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OUT_OF_SERVICE_ATTRIBUTE_ID, true);
    }

    public void writeOutOfServiceAttribute(DefaultClusterCallback callback, Boolean value) {
      writeOutOfServiceAttribute(callback, value, 0);
    }

    public void writeOutOfServiceAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), OUT_OF_SERVICE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOutOfServiceAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OUT_OF_SERVICE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OUT_OF_SERVICE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPolarityAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POLARITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POLARITY_ATTRIBUTE_ID, true);
    }

    public void subscribePolarityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POLARITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POLARITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPresentValueAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRESENT_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRESENT_VALUE_ATTRIBUTE_ID, true);
    }

    public void writePresentValueAttribute(DefaultClusterCallback callback, Boolean value) {
      writePresentValueAttribute(callback, value, 0);
    }

    public void writePresentValueAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), PRESENT_VALUE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribePresentValueAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRESENT_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRESENT_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readReliabilityAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RELIABILITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RELIABILITY_ATTRIBUTE_ID, true);
    }

    public void writeReliabilityAttribute(DefaultClusterCallback callback, Integer value) {
      writeReliabilityAttribute(callback, value, 0);
    }

    public void writeReliabilityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), RELIABILITY_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeReliabilityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RELIABILITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RELIABILITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStatusFlagsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STATUS_FLAGS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STATUS_FLAGS_ATTRIBUTE_ID, true);
    }

    public void subscribeStatusFlagsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STATUS_FLAGS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STATUS_FLAGS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readApplicationTypeAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPLICATION_TYPE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPLICATION_TYPE_ATTRIBUTE_ID, true);
    }

    public void subscribeApplicationTypeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPLICATION_TYPE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPLICATION_TYPE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class PulseWidthModulationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 28L;

    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public PulseWidthModulationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class DescriptorCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 29L;

    private static final long DEVICE_TYPE_LIST_ATTRIBUTE_ID = 0L;
    private static final long SERVER_LIST_ATTRIBUTE_ID = 1L;
    private static final long CLIENT_LIST_ATTRIBUTE_ID = 2L;
    private static final long PARTS_LIST_ATTRIBUTE_ID = 3L;
    private static final long TAG_LIST_ATTRIBUTE_ID = 4L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public DescriptorCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface DeviceTypeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.DescriptorClusterDeviceTypeStruct> value);
    }

    public interface ServerListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface ClientListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface PartsListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface TagListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.DescriptorClusterSemanticTagStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readDeviceTypeListAttribute(
        DeviceTypeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEVICE_TYPE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DescriptorClusterDeviceTypeStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEVICE_TYPE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeDeviceTypeListAttribute(
        DeviceTypeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEVICE_TYPE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DescriptorClusterDeviceTypeStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEVICE_TYPE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readServerListAttribute(
        ServerListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SERVER_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SERVER_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeServerListAttribute(
        ServerListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SERVER_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SERVER_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClientListAttribute(
        ClientListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLIENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLIENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeClientListAttribute(
        ClientListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLIENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLIENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPartsListAttribute(
        PartsListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PARTS_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PARTS_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribePartsListAttribute(
        PartsListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PARTS_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PARTS_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTagListAttribute(
        TagListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TAG_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DescriptorClusterSemanticTagStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TAG_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeTagListAttribute(
        TagListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TAG_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DescriptorClusterSemanticTagStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TAG_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class BindingCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 30L;

    private static final long BINDING_ATTRIBUTE_ID = 0L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public BindingCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface BindingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.BindingClusterTargetStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readBindingAttribute(
        BindingAttributeCallback callback) {
      readBindingAttributeWithFabricFilter(callback, true);
    }

    public void readBindingAttributeWithFabricFilter(
        BindingAttributeCallback callback, boolean isFabricFiltered) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BINDING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.BindingClusterTargetStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BINDING_ATTRIBUTE_ID, isFabricFiltered);
    }

    public void writeBindingAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.BindingClusterTargetStruct> value) {
      writeBindingAttribute(callback, value, 0);
    }

    public void writeBindingAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.BindingClusterTargetStruct> value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), BINDING_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBindingAttribute(
        BindingAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BINDING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.BindingClusterTargetStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BINDING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class AccessControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 31L;

    private static final long ACL_ATTRIBUTE_ID = 0L;
    private static final long EXTENSION_ATTRIBUTE_ID = 1L;
    private static final long SUBJECTS_PER_ACCESS_CONTROL_ENTRY_ATTRIBUTE_ID = 2L;
    private static final long TARGETS_PER_ACCESS_CONTROL_ENTRY_ATTRIBUTE_ID = 3L;
    private static final long ACCESS_CONTROL_ENTRIES_PER_FABRIC_ATTRIBUTE_ID = 4L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public AccessControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface AclAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.AccessControlClusterAccessControlEntryStruct> value);
    }

    public interface ExtensionAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.AccessControlClusterAccessControlExtensionStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readAclAttribute(
        AclAttributeCallback callback) {
      readAclAttributeWithFabricFilter(callback, true);
    }

    public void readAclAttributeWithFabricFilter(
        AclAttributeCallback callback, boolean isFabricFiltered) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.AccessControlClusterAccessControlEntryStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACL_ATTRIBUTE_ID, isFabricFiltered);
    }

    public void writeAclAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.AccessControlClusterAccessControlEntryStruct> value) {
      writeAclAttribute(callback, value, 0);
    }

    public void writeAclAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.AccessControlClusterAccessControlEntryStruct> value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), ACL_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeAclAttribute(
        AclAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.AccessControlClusterAccessControlEntryStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readExtensionAttribute(
        ExtensionAttributeCallback callback) {
      readExtensionAttributeWithFabricFilter(callback, true);
    }

    public void readExtensionAttributeWithFabricFilter(
        ExtensionAttributeCallback callback, boolean isFabricFiltered) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EXTENSION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.AccessControlClusterAccessControlExtensionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EXTENSION_ATTRIBUTE_ID, isFabricFiltered);
    }

    public void writeExtensionAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.AccessControlClusterAccessControlExtensionStruct> value) {
      writeExtensionAttribute(callback, value, 0);
    }

    public void writeExtensionAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.AccessControlClusterAccessControlExtensionStruct> value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), EXTENSION_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeExtensionAttribute(
        ExtensionAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EXTENSION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.AccessControlClusterAccessControlExtensionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EXTENSION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSubjectsPerAccessControlEntryAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUBJECTS_PER_ACCESS_CONTROL_ENTRY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUBJECTS_PER_ACCESS_CONTROL_ENTRY_ATTRIBUTE_ID, true);
    }

    public void subscribeSubjectsPerAccessControlEntryAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUBJECTS_PER_ACCESS_CONTROL_ENTRY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUBJECTS_PER_ACCESS_CONTROL_ENTRY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTargetsPerAccessControlEntryAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TARGETS_PER_ACCESS_CONTROL_ENTRY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TARGETS_PER_ACCESS_CONTROL_ENTRY_ATTRIBUTE_ID, true);
    }

    public void subscribeTargetsPerAccessControlEntryAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TARGETS_PER_ACCESS_CONTROL_ENTRY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TARGETS_PER_ACCESS_CONTROL_ENTRY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAccessControlEntriesPerFabricAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCESS_CONTROL_ENTRIES_PER_FABRIC_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCESS_CONTROL_ENTRIES_PER_FABRIC_ATTRIBUTE_ID, true);
    }

    public void subscribeAccessControlEntriesPerFabricAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCESS_CONTROL_ENTRIES_PER_FABRIC_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCESS_CONTROL_ENTRIES_PER_FABRIC_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ActionsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 37L;

    private static final long ACTION_LIST_ATTRIBUTE_ID = 0L;
    private static final long ENDPOINT_LISTS_ATTRIBUTE_ID = 1L;
    private static final long SETUP_U_R_L_ATTRIBUTE_ID = 2L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ActionsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void instantAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      instantAction(callback, actionID, invokeID, 0);
    }

    public void instantAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void instantActionWithTransition(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Integer transitionTime) {
      instantActionWithTransition(callback, actionID, invokeID, transitionTime, 0);
    }

    public void instantActionWithTransition(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Integer transitionTime, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void startAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      startAction(callback, actionID, invokeID, 0);
    }

    public void startAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void startActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration) {
      startActionWithDuration(callback, actionID, invokeID, duration, 0);
    }

    public void startActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      final long durationFieldID = 2L;
      BaseTLVType durationtlvValue = new UIntType(duration);
      elements.add(new StructElement(durationFieldID, durationtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void stopAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      stopAction(callback, actionID, invokeID, 0);
    }

    public void stopAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void pauseAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      pauseAction(callback, actionID, invokeID, 0);
    }

    public void pauseAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void pauseActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration) {
      pauseActionWithDuration(callback, actionID, invokeID, duration, 0);
    }

    public void pauseActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration, int timedInvokeTimeoutMs) {
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      final long durationFieldID = 2L;
      BaseTLVType durationtlvValue = new UIntType(duration);
      elements.add(new StructElement(durationFieldID, durationtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void resumeAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      resumeAction(callback, actionID, invokeID, 0);
    }

    public void resumeAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void enableAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      enableAction(callback, actionID, invokeID, 0);
    }

    public void enableAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      final long commandId = 8L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void enableActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration) {
      enableActionWithDuration(callback, actionID, invokeID, duration, 0);
    }

    public void enableActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration, int timedInvokeTimeoutMs) {
      final long commandId = 9L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      final long durationFieldID = 2L;
      BaseTLVType durationtlvValue = new UIntType(duration);
      elements.add(new StructElement(durationFieldID, durationtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void disableAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID) {
      disableAction(callback, actionID, invokeID, 0);
    }

    public void disableAction(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, int timedInvokeTimeoutMs) {
      final long commandId = 10L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void disableActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration) {
      disableActionWithDuration(callback, actionID, invokeID, duration, 0);
    }

    public void disableActionWithDuration(DefaultClusterCallback callback, Integer actionID, Optional<Long> invokeID, Long duration, int timedInvokeTimeoutMs) {
      final long commandId = 11L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long actionIDFieldID = 0L;
      BaseTLVType actionIDtlvValue = new UIntType(actionID);
      elements.add(new StructElement(actionIDFieldID, actionIDtlvValue));

      final long invokeIDFieldID = 1L;
      BaseTLVType invokeIDtlvValue = invokeID.<BaseTLVType>map((nonOptionalinvokeID) -> new UIntType(nonOptionalinvokeID)).orElse(new EmptyType());
      elements.add(new StructElement(invokeIDFieldID, invokeIDtlvValue));

      final long durationFieldID = 2L;
      BaseTLVType durationtlvValue = new UIntType(duration);
      elements.add(new StructElement(durationFieldID, durationtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface ActionListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ActionsClusterActionStruct> value);
    }

    public interface EndpointListsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ActionsClusterEndpointListStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readActionListAttribute(
        ActionListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTION_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ActionsClusterActionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTION_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeActionListAttribute(
        ActionListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTION_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ActionsClusterActionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTION_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEndpointListsAttribute(
        EndpointListsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENDPOINT_LISTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ActionsClusterEndpointListStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENDPOINT_LISTS_ATTRIBUTE_ID, true);
    }

    public void subscribeEndpointListsAttribute(
        EndpointListsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENDPOINT_LISTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ActionsClusterEndpointListStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENDPOINT_LISTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSetupURLAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SETUP_U_R_L_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SETUP_U_R_L_ATTRIBUTE_ID, true);
    }

    public void subscribeSetupURLAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SETUP_U_R_L_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SETUP_U_R_L_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class BasicInformationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 40L;

    private static final long DATA_MODEL_REVISION_ATTRIBUTE_ID = 0L;
    private static final long VENDOR_NAME_ATTRIBUTE_ID = 1L;
    private static final long VENDOR_I_D_ATTRIBUTE_ID = 2L;
    private static final long PRODUCT_NAME_ATTRIBUTE_ID = 3L;
    private static final long PRODUCT_I_D_ATTRIBUTE_ID = 4L;
    private static final long NODE_LABEL_ATTRIBUTE_ID = 5L;
    private static final long LOCATION_ATTRIBUTE_ID = 6L;
    private static final long HARDWARE_VERSION_ATTRIBUTE_ID = 7L;
    private static final long HARDWARE_VERSION_STRING_ATTRIBUTE_ID = 8L;
    private static final long SOFTWARE_VERSION_ATTRIBUTE_ID = 9L;
    private static final long SOFTWARE_VERSION_STRING_ATTRIBUTE_ID = 10L;
    private static final long MANUFACTURING_DATE_ATTRIBUTE_ID = 11L;
    private static final long PART_NUMBER_ATTRIBUTE_ID = 12L;
    private static final long PRODUCT_U_R_L_ATTRIBUTE_ID = 13L;
    private static final long PRODUCT_LABEL_ATTRIBUTE_ID = 14L;
    private static final long SERIAL_NUMBER_ATTRIBUTE_ID = 15L;
    private static final long LOCAL_CONFIG_DISABLED_ATTRIBUTE_ID = 16L;
    private static final long REACHABLE_ATTRIBUTE_ID = 17L;
    private static final long UNIQUE_I_D_ATTRIBUTE_ID = 18L;
    private static final long CAPABILITY_MINIMA_ATTRIBUTE_ID = 19L;
    private static final long PRODUCT_APPEARANCE_ATTRIBUTE_ID = 20L;
    private static final long SPECIFICATION_VERSION_ATTRIBUTE_ID = 21L;
    private static final long MAX_PATHS_PER_INVOKE_ATTRIBUTE_ID = 22L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public BasicInformationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void mfgSpecificPing(DefaultClusterCallback callback) {
      mfgSpecificPing(callback, 0);
    }

    public void mfgSpecificPing(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface CapabilityMinimaAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.BasicInformationClusterCapabilityMinimaStruct value);
    }

    public interface ProductAppearanceAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.BasicInformationClusterProductAppearanceStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readDataModelRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DATA_MODEL_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DATA_MODEL_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeDataModelRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DATA_MODEL_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DATA_MODEL_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readVendorNameAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VENDOR_NAME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VENDOR_NAME_ATTRIBUTE_ID, true);
    }

    public void subscribeVendorNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VENDOR_NAME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VENDOR_NAME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readVendorIDAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VENDOR_I_D_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VENDOR_I_D_ATTRIBUTE_ID, true);
    }

    public void subscribeVendorIDAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VENDOR_I_D_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VENDOR_I_D_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readProductNameAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_NAME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_NAME_ATTRIBUTE_ID, true);
    }

    public void subscribeProductNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_NAME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_NAME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readProductIDAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_I_D_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_I_D_ATTRIBUTE_ID, true);
    }

    public void subscribeProductIDAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_I_D_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_I_D_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNodeLabelAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NODE_LABEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NODE_LABEL_ATTRIBUTE_ID, true);
    }

    public void writeNodeLabelAttribute(DefaultClusterCallback callback, String value) {
      writeNodeLabelAttribute(callback, value, 0);
    }

    public void writeNodeLabelAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), NODE_LABEL_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNodeLabelAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NODE_LABEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NODE_LABEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLocationAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCATION_ATTRIBUTE_ID, true);
    }

    public void writeLocationAttribute(DefaultClusterCallback callback, String value) {
      writeLocationAttribute(callback, value, 0);
    }

    public void writeLocationAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), LOCATION_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLocationAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readHardwareVersionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HARDWARE_VERSION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HARDWARE_VERSION_ATTRIBUTE_ID, true);
    }

    public void subscribeHardwareVersionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HARDWARE_VERSION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HARDWARE_VERSION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readHardwareVersionStringAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HARDWARE_VERSION_STRING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HARDWARE_VERSION_STRING_ATTRIBUTE_ID, true);
    }

    public void subscribeHardwareVersionStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HARDWARE_VERSION_STRING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HARDWARE_VERSION_STRING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSoftwareVersionAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SOFTWARE_VERSION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SOFTWARE_VERSION_ATTRIBUTE_ID, true);
    }

    public void subscribeSoftwareVersionAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SOFTWARE_VERSION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SOFTWARE_VERSION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSoftwareVersionStringAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SOFTWARE_VERSION_STRING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SOFTWARE_VERSION_STRING_ATTRIBUTE_ID, true);
    }

    public void subscribeSoftwareVersionStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SOFTWARE_VERSION_STRING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SOFTWARE_VERSION_STRING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readManufacturingDateAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MANUFACTURING_DATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MANUFACTURING_DATE_ATTRIBUTE_ID, true);
    }

    public void subscribeManufacturingDateAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MANUFACTURING_DATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MANUFACTURING_DATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPartNumberAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PART_NUMBER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PART_NUMBER_ATTRIBUTE_ID, true);
    }

    public void subscribePartNumberAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PART_NUMBER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PART_NUMBER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readProductURLAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_U_R_L_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_U_R_L_ATTRIBUTE_ID, true);
    }

    public void subscribeProductURLAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_U_R_L_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_U_R_L_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readProductLabelAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_LABEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_LABEL_ATTRIBUTE_ID, true);
    }

    public void subscribeProductLabelAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_LABEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_LABEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSerialNumberAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SERIAL_NUMBER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SERIAL_NUMBER_ATTRIBUTE_ID, true);
    }

    public void subscribeSerialNumberAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SERIAL_NUMBER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SERIAL_NUMBER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLocalConfigDisabledAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCAL_CONFIG_DISABLED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCAL_CONFIG_DISABLED_ATTRIBUTE_ID, true);
    }

    public void writeLocalConfigDisabledAttribute(DefaultClusterCallback callback, Boolean value) {
      writeLocalConfigDisabledAttribute(callback, value, 0);
    }

    public void writeLocalConfigDisabledAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), LOCAL_CONFIG_DISABLED_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLocalConfigDisabledAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCAL_CONFIG_DISABLED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCAL_CONFIG_DISABLED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readReachableAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACHABLE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACHABLE_ATTRIBUTE_ID, true);
    }

    public void subscribeReachableAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACHABLE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACHABLE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUniqueIDAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNIQUE_I_D_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNIQUE_I_D_ATTRIBUTE_ID, true);
    }

    public void subscribeUniqueIDAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNIQUE_I_D_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNIQUE_I_D_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCapabilityMinimaAttribute(
        CapabilityMinimaAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CAPABILITY_MINIMA_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.BasicInformationClusterCapabilityMinimaStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CAPABILITY_MINIMA_ATTRIBUTE_ID, true);
    }

    public void subscribeCapabilityMinimaAttribute(
        CapabilityMinimaAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CAPABILITY_MINIMA_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.BasicInformationClusterCapabilityMinimaStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CAPABILITY_MINIMA_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readProductAppearanceAttribute(
        ProductAppearanceAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_APPEARANCE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.BasicInformationClusterProductAppearanceStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_APPEARANCE_ATTRIBUTE_ID, true);
    }

    public void subscribeProductAppearanceAttribute(
        ProductAppearanceAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_APPEARANCE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.BasicInformationClusterProductAppearanceStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_APPEARANCE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSpecificationVersionAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SPECIFICATION_VERSION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SPECIFICATION_VERSION_ATTRIBUTE_ID, true);
    }

    public void subscribeSpecificationVersionAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SPECIFICATION_VERSION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SPECIFICATION_VERSION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxPathsPerInvokeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_PATHS_PER_INVOKE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_PATHS_PER_INVOKE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxPathsPerInvokeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_PATHS_PER_INVOKE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_PATHS_PER_INVOKE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class OtaSoftwareUpdateProviderCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 41L;

    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public OtaSoftwareUpdateProviderCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void queryImage(QueryImageResponseCallback callback, Integer vendorID, Integer productID, Long softwareVersion, ArrayList<Integer> protocolsSupported, Optional<Integer> hardwareVersion, Optional<String> location, Optional<Boolean> requestorCanConsent, Optional<byte[]> metadataForProvider) {
      queryImage(callback, vendorID, productID, softwareVersion, protocolsSupported, hardwareVersion, location, requestorCanConsent, metadataForProvider, 0);
    }

    public void queryImage(QueryImageResponseCallback callback, Integer vendorID, Integer productID, Long softwareVersion, ArrayList<Integer> protocolsSupported, Optional<Integer> hardwareVersion, Optional<String> location, Optional<Boolean> requestorCanConsent, Optional<byte[]> metadataForProvider, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long vendorIDFieldID = 0L;
      BaseTLVType vendorIDtlvValue = new UIntType(vendorID);
      elements.add(new StructElement(vendorIDFieldID, vendorIDtlvValue));

      final long productIDFieldID = 1L;
      BaseTLVType productIDtlvValue = new UIntType(productID);
      elements.add(new StructElement(productIDFieldID, productIDtlvValue));

      final long softwareVersionFieldID = 2L;
      BaseTLVType softwareVersiontlvValue = new UIntType(softwareVersion);
      elements.add(new StructElement(softwareVersionFieldID, softwareVersiontlvValue));

      final long protocolsSupportedFieldID = 3L;
      BaseTLVType protocolsSupportedtlvValue = ArrayType.generateArrayType(protocolsSupported, (elementprotocolsSupported) -> new UIntType(elementprotocolsSupported));
      elements.add(new StructElement(protocolsSupportedFieldID, protocolsSupportedtlvValue));

      final long hardwareVersionFieldID = 4L;
      BaseTLVType hardwareVersiontlvValue = hardwareVersion.<BaseTLVType>map((nonOptionalhardwareVersion) -> new UIntType(nonOptionalhardwareVersion)).orElse(new EmptyType());
      elements.add(new StructElement(hardwareVersionFieldID, hardwareVersiontlvValue));

      final long locationFieldID = 5L;
      BaseTLVType locationtlvValue = location.<BaseTLVType>map((nonOptionallocation) -> new StringType(nonOptionallocation)).orElse(new EmptyType());
      elements.add(new StructElement(locationFieldID, locationtlvValue));

      final long requestorCanConsentFieldID = 6L;
      BaseTLVType requestorCanConsenttlvValue = requestorCanConsent.<BaseTLVType>map((nonOptionalrequestorCanConsent) -> new BooleanType(nonOptionalrequestorCanConsent)).orElse(new EmptyType());
      elements.add(new StructElement(requestorCanConsentFieldID, requestorCanConsenttlvValue));

      final long metadataForProviderFieldID = 7L;
      BaseTLVType metadataForProvidertlvValue = metadataForProvider.<BaseTLVType>map((nonOptionalmetadataForProvider) -> new ByteArrayType(nonOptionalmetadataForProvider)).orElse(new EmptyType());
      elements.add(new StructElement(metadataForProviderFieldID, metadataForProvidertlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long delayedActionTimeFieldID = 1L;
          Optional<Long> delayedActionTime = Optional.empty();
          final long imageURIFieldID = 2L;
          Optional<String> imageURI = Optional.empty();
          final long softwareVersionFieldID = 3L;
          Optional<Long> softwareVersion = Optional.empty();
          final long softwareVersionStringFieldID = 4L;
          Optional<String> softwareVersionString = Optional.empty();
          final long updateTokenFieldID = 5L;
          Optional<byte[]> updateToken = Optional.empty();
          final long userConsentNeededFieldID = 6L;
          Optional<Boolean> userConsentNeeded = Optional.empty();
          final long metadataForRequestorFieldID = 7L;
          Optional<byte[]> metadataForRequestor = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == delayedActionTimeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                delayedActionTime = Optional.of(castingValue.value(Long.class));
              }
            } else if (element.contextTagNum() == imageURIFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                imageURI = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == softwareVersionFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                softwareVersion = Optional.of(castingValue.value(Long.class));
              }
            } else if (element.contextTagNum() == softwareVersionStringFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                softwareVersionString = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == updateTokenFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                updateToken = Optional.of(castingValue.value(byte[].class));
              }
            } else if (element.contextTagNum() == userConsentNeededFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                userConsentNeeded = Optional.of(castingValue.value(Boolean.class));
              }
            } else if (element.contextTagNum() == metadataForRequestorFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                metadataForRequestor = Optional.of(castingValue.value(byte[].class));
              }
            }
          }
          callback.onSuccess(status, delayedActionTime, imageURI, softwareVersion, softwareVersionString, updateToken, userConsentNeeded, metadataForRequestor);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void applyUpdateRequest(ApplyUpdateResponseCallback callback, byte[] updateToken, Long newVersion) {
      applyUpdateRequest(callback, updateToken, newVersion, 0);
    }

    public void applyUpdateRequest(ApplyUpdateResponseCallback callback, byte[] updateToken, Long newVersion, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long updateTokenFieldID = 0L;
      BaseTLVType updateTokentlvValue = new ByteArrayType(updateToken);
      elements.add(new StructElement(updateTokenFieldID, updateTokentlvValue));

      final long newVersionFieldID = 1L;
      BaseTLVType newVersiontlvValue = new UIntType(newVersion);
      elements.add(new StructElement(newVersionFieldID, newVersiontlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long actionFieldID = 0L;
          Integer action = null;
          final long delayedActionTimeFieldID = 1L;
          Long delayedActionTime = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == actionFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                action = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == delayedActionTimeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                delayedActionTime = castingValue.value(Long.class);
              }
            }
          }
          callback.onSuccess(action, delayedActionTime);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void notifyUpdateApplied(DefaultClusterCallback callback, byte[] updateToken, Long softwareVersion) {
      notifyUpdateApplied(callback, updateToken, softwareVersion, 0);
    }

    public void notifyUpdateApplied(DefaultClusterCallback callback, byte[] updateToken, Long softwareVersion, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long updateTokenFieldID = 0L;
      BaseTLVType updateTokentlvValue = new ByteArrayType(updateToken);
      elements.add(new StructElement(updateTokenFieldID, updateTokentlvValue));

      final long softwareVersionFieldID = 1L;
      BaseTLVType softwareVersiontlvValue = new UIntType(softwareVersion);
      elements.add(new StructElement(softwareVersionFieldID, softwareVersiontlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface QueryImageResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<Long> delayedActionTime, Optional<String> imageURI, Optional<Long> softwareVersion, Optional<String> softwareVersionString, Optional<byte[]> updateToken, Optional<Boolean> userConsentNeeded, Optional<byte[]> metadataForRequestor);
    }

    public interface ApplyUpdateResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer action, Long delayedActionTime);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class OtaSoftwareUpdateRequestorCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 42L;

    private static final long DEFAULT_O_T_A_PROVIDERS_ATTRIBUTE_ID = 0L;
    private static final long UPDATE_POSSIBLE_ATTRIBUTE_ID = 1L;
    private static final long UPDATE_STATE_ATTRIBUTE_ID = 2L;
    private static final long UPDATE_STATE_PROGRESS_ATTRIBUTE_ID = 3L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public OtaSoftwareUpdateRequestorCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void announceOTAProvider(DefaultClusterCallback callback, Long providerNodeID, Integer vendorID, Integer announcementReason, Optional<byte[]> metadataForNode, Integer endpoint) {
      announceOTAProvider(callback, providerNodeID, vendorID, announcementReason, metadataForNode, endpoint, 0);
    }

    public void announceOTAProvider(DefaultClusterCallback callback, Long providerNodeID, Integer vendorID, Integer announcementReason, Optional<byte[]> metadataForNode, Integer endpoint, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long providerNodeIDFieldID = 0L;
      BaseTLVType providerNodeIDtlvValue = new UIntType(providerNodeID);
      elements.add(new StructElement(providerNodeIDFieldID, providerNodeIDtlvValue));

      final long vendorIDFieldID = 1L;
      BaseTLVType vendorIDtlvValue = new UIntType(vendorID);
      elements.add(new StructElement(vendorIDFieldID, vendorIDtlvValue));

      final long announcementReasonFieldID = 2L;
      BaseTLVType announcementReasontlvValue = new UIntType(announcementReason);
      elements.add(new StructElement(announcementReasonFieldID, announcementReasontlvValue));

      final long metadataForNodeFieldID = 3L;
      BaseTLVType metadataForNodetlvValue = metadataForNode.<BaseTLVType>map((nonOptionalmetadataForNode) -> new ByteArrayType(nonOptionalmetadataForNode)).orElse(new EmptyType());
      elements.add(new StructElement(metadataForNodeFieldID, metadataForNodetlvValue));

      final long endpointFieldID = 4L;
      BaseTLVType endpointtlvValue = new UIntType(endpoint);
      elements.add(new StructElement(endpointFieldID, endpointtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface DefaultOTAProvidersAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.OtaSoftwareUpdateRequestorClusterProviderLocation> value);
    }

    public interface UpdateStateProgressAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readDefaultOTAProvidersAttribute(
        DefaultOTAProvidersAttributeCallback callback) {
      readDefaultOTAProvidersAttributeWithFabricFilter(callback, true);
    }

    public void readDefaultOTAProvidersAttributeWithFabricFilter(
        DefaultOTAProvidersAttributeCallback callback, boolean isFabricFiltered) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_O_T_A_PROVIDERS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OtaSoftwareUpdateRequestorClusterProviderLocation> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_O_T_A_PROVIDERS_ATTRIBUTE_ID, isFabricFiltered);
    }

    public void writeDefaultOTAProvidersAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.OtaSoftwareUpdateRequestorClusterProviderLocation> value) {
      writeDefaultOTAProvidersAttribute(callback, value, 0);
    }

    public void writeDefaultOTAProvidersAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.OtaSoftwareUpdateRequestorClusterProviderLocation> value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), DEFAULT_O_T_A_PROVIDERS_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeDefaultOTAProvidersAttribute(
        DefaultOTAProvidersAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_O_T_A_PROVIDERS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OtaSoftwareUpdateRequestorClusterProviderLocation> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_O_T_A_PROVIDERS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUpdatePossibleAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UPDATE_POSSIBLE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UPDATE_POSSIBLE_ATTRIBUTE_ID, true);
    }

    public void subscribeUpdatePossibleAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UPDATE_POSSIBLE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UPDATE_POSSIBLE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUpdateStateAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UPDATE_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UPDATE_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeUpdateStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UPDATE_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UPDATE_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUpdateStateProgressAttribute(
        UpdateStateProgressAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UPDATE_STATE_PROGRESS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UPDATE_STATE_PROGRESS_ATTRIBUTE_ID, true);
    }

    public void subscribeUpdateStateProgressAttribute(
        UpdateStateProgressAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UPDATE_STATE_PROGRESS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UPDATE_STATE_PROGRESS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class LocalizationConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 43L;

    private static final long ACTIVE_LOCALE_ATTRIBUTE_ID = 0L;
    private static final long SUPPORTED_LOCALES_ATTRIBUTE_ID = 1L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public LocalizationConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface SupportedLocalesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<String> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readActiveLocaleAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_LOCALE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_LOCALE_ATTRIBUTE_ID, true);
    }

    public void writeActiveLocaleAttribute(DefaultClusterCallback callback, String value) {
      writeActiveLocaleAttribute(callback, value, 0);
    }

    public void writeActiveLocaleAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), ACTIVE_LOCALE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeActiveLocaleAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_LOCALE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_LOCALE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSupportedLocalesAttribute(
        SupportedLocalesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_LOCALES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_LOCALES_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedLocalesAttribute(
        SupportedLocalesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_LOCALES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_LOCALES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class TimeFormatLocalizationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 44L;

    private static final long HOUR_FORMAT_ATTRIBUTE_ID = 0L;
    private static final long ACTIVE_CALENDAR_TYPE_ATTRIBUTE_ID = 1L;
    private static final long SUPPORTED_CALENDAR_TYPES_ATTRIBUTE_ID = 2L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public TimeFormatLocalizationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface SupportedCalendarTypesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readHourFormatAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HOUR_FORMAT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HOUR_FORMAT_ATTRIBUTE_ID, true);
    }

    public void writeHourFormatAttribute(DefaultClusterCallback callback, Integer value) {
      writeHourFormatAttribute(callback, value, 0);
    }

    public void writeHourFormatAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), HOUR_FORMAT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeHourFormatAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HOUR_FORMAT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HOUR_FORMAT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveCalendarTypeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_CALENDAR_TYPE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_CALENDAR_TYPE_ATTRIBUTE_ID, true);
    }

    public void writeActiveCalendarTypeAttribute(DefaultClusterCallback callback, Integer value) {
      writeActiveCalendarTypeAttribute(callback, value, 0);
    }

    public void writeActiveCalendarTypeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), ACTIVE_CALENDAR_TYPE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeActiveCalendarTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_CALENDAR_TYPE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_CALENDAR_TYPE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSupportedCalendarTypesAttribute(
        SupportedCalendarTypesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_CALENDAR_TYPES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_CALENDAR_TYPES_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedCalendarTypesAttribute(
        SupportedCalendarTypesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_CALENDAR_TYPES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_CALENDAR_TYPES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class UnitLocalizationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 45L;

    private static final long TEMPERATURE_UNIT_ATTRIBUTE_ID = 0L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public UnitLocalizationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readTemperatureUnitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TEMPERATURE_UNIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TEMPERATURE_UNIT_ATTRIBUTE_ID, true);
    }

    public void writeTemperatureUnitAttribute(DefaultClusterCallback callback, Integer value) {
      writeTemperatureUnitAttribute(callback, value, 0);
    }

    public void writeTemperatureUnitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), TEMPERATURE_UNIT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeTemperatureUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TEMPERATURE_UNIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TEMPERATURE_UNIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class PowerSourceConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 46L;

    private static final long SOURCES_ATTRIBUTE_ID = 0L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public PowerSourceConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface SourcesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSourcesAttribute(
        SourcesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SOURCES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SOURCES_ATTRIBUTE_ID, true);
    }

    public void subscribeSourcesAttribute(
        SourcesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SOURCES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SOURCES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class PowerSourceCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 47L;

    private static final long STATUS_ATTRIBUTE_ID = 0L;
    private static final long ORDER_ATTRIBUTE_ID = 1L;
    private static final long DESCRIPTION_ATTRIBUTE_ID = 2L;
    private static final long WIRED_ASSESSED_INPUT_VOLTAGE_ATTRIBUTE_ID = 3L;
    private static final long WIRED_ASSESSED_INPUT_FREQUENCY_ATTRIBUTE_ID = 4L;
    private static final long WIRED_CURRENT_TYPE_ATTRIBUTE_ID = 5L;
    private static final long WIRED_ASSESSED_CURRENT_ATTRIBUTE_ID = 6L;
    private static final long WIRED_NOMINAL_VOLTAGE_ATTRIBUTE_ID = 7L;
    private static final long WIRED_MAXIMUM_CURRENT_ATTRIBUTE_ID = 8L;
    private static final long WIRED_PRESENT_ATTRIBUTE_ID = 9L;
    private static final long ACTIVE_WIRED_FAULTS_ATTRIBUTE_ID = 10L;
    private static final long BAT_VOLTAGE_ATTRIBUTE_ID = 11L;
    private static final long BAT_PERCENT_REMAINING_ATTRIBUTE_ID = 12L;
    private static final long BAT_TIME_REMAINING_ATTRIBUTE_ID = 13L;
    private static final long BAT_CHARGE_LEVEL_ATTRIBUTE_ID = 14L;
    private static final long BAT_REPLACEMENT_NEEDED_ATTRIBUTE_ID = 15L;
    private static final long BAT_REPLACEABILITY_ATTRIBUTE_ID = 16L;
    private static final long BAT_PRESENT_ATTRIBUTE_ID = 17L;
    private static final long ACTIVE_BAT_FAULTS_ATTRIBUTE_ID = 18L;
    private static final long BAT_REPLACEMENT_DESCRIPTION_ATTRIBUTE_ID = 19L;
    private static final long BAT_COMMON_DESIGNATION_ATTRIBUTE_ID = 20L;
    private static final long BAT_A_N_S_I_DESIGNATION_ATTRIBUTE_ID = 21L;
    private static final long BAT_I_E_C_DESIGNATION_ATTRIBUTE_ID = 22L;
    private static final long BAT_APPROVED_CHEMISTRY_ATTRIBUTE_ID = 23L;
    private static final long BAT_CAPACITY_ATTRIBUTE_ID = 24L;
    private static final long BAT_QUANTITY_ATTRIBUTE_ID = 25L;
    private static final long BAT_CHARGE_STATE_ATTRIBUTE_ID = 26L;
    private static final long BAT_TIME_TO_FULL_CHARGE_ATTRIBUTE_ID = 27L;
    private static final long BAT_FUNCTIONAL_WHILE_CHARGING_ATTRIBUTE_ID = 28L;
    private static final long BAT_CHARGING_CURRENT_ATTRIBUTE_ID = 29L;
    private static final long ACTIVE_BAT_CHARGE_FAULTS_ATTRIBUTE_ID = 30L;
    private static final long ENDPOINT_LIST_ATTRIBUTE_ID = 31L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public PowerSourceCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface WiredAssessedInputVoltageAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface WiredAssessedInputFrequencyAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface WiredAssessedCurrentAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ActiveWiredFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface BatVoltageAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface BatPercentRemainingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface BatTimeRemainingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ActiveBatFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface BatTimeToFullChargeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface BatChargingCurrentAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ActiveBatChargeFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface EndpointListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readStatusAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STATUS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STATUS_ATTRIBUTE_ID, true);
    }

    public void subscribeStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STATUS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STATUS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOrderAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ORDER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ORDER_ATTRIBUTE_ID, true);
    }

    public void subscribeOrderAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ORDER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ORDER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDescriptionAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DESCRIPTION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DESCRIPTION_ATTRIBUTE_ID, true);
    }

    public void subscribeDescriptionAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DESCRIPTION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DESCRIPTION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readWiredAssessedInputVoltageAttribute(
        WiredAssessedInputVoltageAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIRED_ASSESSED_INPUT_VOLTAGE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIRED_ASSESSED_INPUT_VOLTAGE_ATTRIBUTE_ID, true);
    }

    public void subscribeWiredAssessedInputVoltageAttribute(
        WiredAssessedInputVoltageAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIRED_ASSESSED_INPUT_VOLTAGE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIRED_ASSESSED_INPUT_VOLTAGE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readWiredAssessedInputFrequencyAttribute(
        WiredAssessedInputFrequencyAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIRED_ASSESSED_INPUT_FREQUENCY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIRED_ASSESSED_INPUT_FREQUENCY_ATTRIBUTE_ID, true);
    }

    public void subscribeWiredAssessedInputFrequencyAttribute(
        WiredAssessedInputFrequencyAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIRED_ASSESSED_INPUT_FREQUENCY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIRED_ASSESSED_INPUT_FREQUENCY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readWiredCurrentTypeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIRED_CURRENT_TYPE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIRED_CURRENT_TYPE_ATTRIBUTE_ID, true);
    }

    public void subscribeWiredCurrentTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIRED_CURRENT_TYPE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIRED_CURRENT_TYPE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readWiredAssessedCurrentAttribute(
        WiredAssessedCurrentAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIRED_ASSESSED_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIRED_ASSESSED_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeWiredAssessedCurrentAttribute(
        WiredAssessedCurrentAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIRED_ASSESSED_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIRED_ASSESSED_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readWiredNominalVoltageAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIRED_NOMINAL_VOLTAGE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIRED_NOMINAL_VOLTAGE_ATTRIBUTE_ID, true);
    }

    public void subscribeWiredNominalVoltageAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIRED_NOMINAL_VOLTAGE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIRED_NOMINAL_VOLTAGE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readWiredMaximumCurrentAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIRED_MAXIMUM_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIRED_MAXIMUM_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeWiredMaximumCurrentAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIRED_MAXIMUM_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIRED_MAXIMUM_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readWiredPresentAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIRED_PRESENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIRED_PRESENT_ATTRIBUTE_ID, true);
    }

    public void subscribeWiredPresentAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIRED_PRESENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIRED_PRESENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveWiredFaultsAttribute(
        ActiveWiredFaultsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_WIRED_FAULTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_WIRED_FAULTS_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveWiredFaultsAttribute(
        ActiveWiredFaultsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_WIRED_FAULTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_WIRED_FAULTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatVoltageAttribute(
        BatVoltageAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_VOLTAGE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_VOLTAGE_ATTRIBUTE_ID, true);
    }

    public void subscribeBatVoltageAttribute(
        BatVoltageAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_VOLTAGE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_VOLTAGE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatPercentRemainingAttribute(
        BatPercentRemainingAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_PERCENT_REMAINING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_PERCENT_REMAINING_ATTRIBUTE_ID, true);
    }

    public void subscribeBatPercentRemainingAttribute(
        BatPercentRemainingAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_PERCENT_REMAINING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_PERCENT_REMAINING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatTimeRemainingAttribute(
        BatTimeRemainingAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_TIME_REMAINING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_TIME_REMAINING_ATTRIBUTE_ID, true);
    }

    public void subscribeBatTimeRemainingAttribute(
        BatTimeRemainingAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_TIME_REMAINING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_TIME_REMAINING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatChargeLevelAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_CHARGE_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_CHARGE_LEVEL_ATTRIBUTE_ID, true);
    }

    public void subscribeBatChargeLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_CHARGE_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_CHARGE_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatReplacementNeededAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_REPLACEMENT_NEEDED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_REPLACEMENT_NEEDED_ATTRIBUTE_ID, true);
    }

    public void subscribeBatReplacementNeededAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_REPLACEMENT_NEEDED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_REPLACEMENT_NEEDED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatReplaceabilityAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_REPLACEABILITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_REPLACEABILITY_ATTRIBUTE_ID, true);
    }

    public void subscribeBatReplaceabilityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_REPLACEABILITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_REPLACEABILITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatPresentAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_PRESENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_PRESENT_ATTRIBUTE_ID, true);
    }

    public void subscribeBatPresentAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_PRESENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_PRESENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveBatFaultsAttribute(
        ActiveBatFaultsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_BAT_FAULTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_BAT_FAULTS_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveBatFaultsAttribute(
        ActiveBatFaultsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_BAT_FAULTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_BAT_FAULTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatReplacementDescriptionAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_REPLACEMENT_DESCRIPTION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_REPLACEMENT_DESCRIPTION_ATTRIBUTE_ID, true);
    }

    public void subscribeBatReplacementDescriptionAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_REPLACEMENT_DESCRIPTION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_REPLACEMENT_DESCRIPTION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatCommonDesignationAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_COMMON_DESIGNATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_COMMON_DESIGNATION_ATTRIBUTE_ID, true);
    }

    public void subscribeBatCommonDesignationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_COMMON_DESIGNATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_COMMON_DESIGNATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatANSIDesignationAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_A_N_S_I_DESIGNATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_A_N_S_I_DESIGNATION_ATTRIBUTE_ID, true);
    }

    public void subscribeBatANSIDesignationAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_A_N_S_I_DESIGNATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_A_N_S_I_DESIGNATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatIECDesignationAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_I_E_C_DESIGNATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_I_E_C_DESIGNATION_ATTRIBUTE_ID, true);
    }

    public void subscribeBatIECDesignationAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_I_E_C_DESIGNATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_I_E_C_DESIGNATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatApprovedChemistryAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_APPROVED_CHEMISTRY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_APPROVED_CHEMISTRY_ATTRIBUTE_ID, true);
    }

    public void subscribeBatApprovedChemistryAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_APPROVED_CHEMISTRY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_APPROVED_CHEMISTRY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatCapacityAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_CAPACITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_CAPACITY_ATTRIBUTE_ID, true);
    }

    public void subscribeBatCapacityAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_CAPACITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_CAPACITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatQuantityAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_QUANTITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_QUANTITY_ATTRIBUTE_ID, true);
    }

    public void subscribeBatQuantityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_QUANTITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_QUANTITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatChargeStateAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_CHARGE_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_CHARGE_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeBatChargeStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_CHARGE_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_CHARGE_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatTimeToFullChargeAttribute(
        BatTimeToFullChargeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_TIME_TO_FULL_CHARGE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_TIME_TO_FULL_CHARGE_ATTRIBUTE_ID, true);
    }

    public void subscribeBatTimeToFullChargeAttribute(
        BatTimeToFullChargeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_TIME_TO_FULL_CHARGE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_TIME_TO_FULL_CHARGE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatFunctionalWhileChargingAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_FUNCTIONAL_WHILE_CHARGING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_FUNCTIONAL_WHILE_CHARGING_ATTRIBUTE_ID, true);
    }

    public void subscribeBatFunctionalWhileChargingAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_FUNCTIONAL_WHILE_CHARGING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_FUNCTIONAL_WHILE_CHARGING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatChargingCurrentAttribute(
        BatChargingCurrentAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_CHARGING_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_CHARGING_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeBatChargingCurrentAttribute(
        BatChargingCurrentAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BAT_CHARGING_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BAT_CHARGING_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveBatChargeFaultsAttribute(
        ActiveBatChargeFaultsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_BAT_CHARGE_FAULTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_BAT_CHARGE_FAULTS_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveBatChargeFaultsAttribute(
        ActiveBatChargeFaultsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_BAT_CHARGE_FAULTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_BAT_CHARGE_FAULTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEndpointListAttribute(
        EndpointListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENDPOINT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENDPOINT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEndpointListAttribute(
        EndpointListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENDPOINT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENDPOINT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class GeneralCommissioningCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 48L;

    private static final long BREADCRUMB_ATTRIBUTE_ID = 0L;
    private static final long BASIC_COMMISSIONING_INFO_ATTRIBUTE_ID = 1L;
    private static final long REGULATORY_CONFIG_ATTRIBUTE_ID = 2L;
    private static final long LOCATION_CAPABILITY_ATTRIBUTE_ID = 3L;
    private static final long SUPPORTS_CONCURRENT_CONNECTION_ATTRIBUTE_ID = 4L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public GeneralCommissioningCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void armFailSafe(ArmFailSafeResponseCallback callback, Integer expiryLengthSeconds, Long breadcrumb) {
      armFailSafe(callback, expiryLengthSeconds, breadcrumb, 0);
    }

    public void armFailSafe(ArmFailSafeResponseCallback callback, Integer expiryLengthSeconds, Long breadcrumb, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long expiryLengthSecondsFieldID = 0L;
      BaseTLVType expiryLengthSecondstlvValue = new UIntType(expiryLengthSeconds);
      elements.add(new StructElement(expiryLengthSecondsFieldID, expiryLengthSecondstlvValue));

      final long breadcrumbFieldID = 1L;
      BaseTLVType breadcrumbtlvValue = new UIntType(breadcrumb);
      elements.add(new StructElement(breadcrumbFieldID, breadcrumbtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long errorCodeFieldID = 0L;
          Integer errorCode = null;
          final long debugTextFieldID = 1L;
          String debugText = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == errorCodeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                errorCode = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = castingValue.value(String.class);
              }
            }
          }
          callback.onSuccess(errorCode, debugText);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void setRegulatoryConfig(SetRegulatoryConfigResponseCallback callback, Integer newRegulatoryConfig, String countryCode, Long breadcrumb) {
      setRegulatoryConfig(callback, newRegulatoryConfig, countryCode, breadcrumb, 0);
    }

    public void setRegulatoryConfig(SetRegulatoryConfigResponseCallback callback, Integer newRegulatoryConfig, String countryCode, Long breadcrumb, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newRegulatoryConfigFieldID = 0L;
      BaseTLVType newRegulatoryConfigtlvValue = new UIntType(newRegulatoryConfig);
      elements.add(new StructElement(newRegulatoryConfigFieldID, newRegulatoryConfigtlvValue));

      final long countryCodeFieldID = 1L;
      BaseTLVType countryCodetlvValue = new StringType(countryCode);
      elements.add(new StructElement(countryCodeFieldID, countryCodetlvValue));

      final long breadcrumbFieldID = 2L;
      BaseTLVType breadcrumbtlvValue = new UIntType(breadcrumb);
      elements.add(new StructElement(breadcrumbFieldID, breadcrumbtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long errorCodeFieldID = 0L;
          Integer errorCode = null;
          final long debugTextFieldID = 1L;
          String debugText = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == errorCodeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                errorCode = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = castingValue.value(String.class);
              }
            }
          }
          callback.onSuccess(errorCode, debugText);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void commissioningComplete(CommissioningCompleteResponseCallback callback) {
      commissioningComplete(callback, 0);
    }

    public void commissioningComplete(CommissioningCompleteResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long errorCodeFieldID = 0L;
          Integer errorCode = null;
          final long debugTextFieldID = 1L;
          String debugText = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == errorCodeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                errorCode = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = castingValue.value(String.class);
              }
            }
          }
          callback.onSuccess(errorCode, debugText);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface ArmFailSafeResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer errorCode, String debugText);
    }

    public interface SetRegulatoryConfigResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer errorCode, String debugText);
    }

    public interface CommissioningCompleteResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer errorCode, String debugText);
    }

    public interface BasicCommissioningInfoAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.GeneralCommissioningClusterBasicCommissioningInfo value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readBreadcrumbAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BREADCRUMB_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BREADCRUMB_ATTRIBUTE_ID, true);
    }

    public void writeBreadcrumbAttribute(DefaultClusterCallback callback, Long value) {
      writeBreadcrumbAttribute(callback, value, 0);
    }

    public void writeBreadcrumbAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), BREADCRUMB_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBreadcrumbAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BREADCRUMB_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BREADCRUMB_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBasicCommissioningInfoAttribute(
        BasicCommissioningInfoAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BASIC_COMMISSIONING_INFO_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.GeneralCommissioningClusterBasicCommissioningInfo value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BASIC_COMMISSIONING_INFO_ATTRIBUTE_ID, true);
    }

    public void subscribeBasicCommissioningInfoAttribute(
        BasicCommissioningInfoAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BASIC_COMMISSIONING_INFO_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.GeneralCommissioningClusterBasicCommissioningInfo value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BASIC_COMMISSIONING_INFO_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRegulatoryConfigAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REGULATORY_CONFIG_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REGULATORY_CONFIG_ATTRIBUTE_ID, true);
    }

    public void subscribeRegulatoryConfigAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REGULATORY_CONFIG_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REGULATORY_CONFIG_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLocationCapabilityAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCATION_CAPABILITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCATION_CAPABILITY_ATTRIBUTE_ID, true);
    }

    public void subscribeLocationCapabilityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCATION_CAPABILITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCATION_CAPABILITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSupportsConcurrentConnectionAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTS_CONCURRENT_CONNECTION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTS_CONCURRENT_CONNECTION_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportsConcurrentConnectionAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTS_CONCURRENT_CONNECTION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTS_CONCURRENT_CONNECTION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class NetworkCommissioningCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 49L;

    private static final long MAX_NETWORKS_ATTRIBUTE_ID = 0L;
    private static final long NETWORKS_ATTRIBUTE_ID = 1L;
    private static final long SCAN_MAX_TIME_SECONDS_ATTRIBUTE_ID = 2L;
    private static final long CONNECT_MAX_TIME_SECONDS_ATTRIBUTE_ID = 3L;
    private static final long INTERFACE_ENABLED_ATTRIBUTE_ID = 4L;
    private static final long LAST_NETWORKING_STATUS_ATTRIBUTE_ID = 5L;
    private static final long LAST_NETWORK_I_D_ATTRIBUTE_ID = 6L;
    private static final long LAST_CONNECT_ERROR_VALUE_ATTRIBUTE_ID = 7L;
    private static final long SUPPORTED_WI_FI_BANDS_ATTRIBUTE_ID = 8L;
    private static final long SUPPORTED_THREAD_FEATURES_ATTRIBUTE_ID = 9L;
    private static final long THREAD_VERSION_ATTRIBUTE_ID = 10L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public NetworkCommissioningCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void scanNetworks(ScanNetworksResponseCallback callback, @Nullable Optional<byte[]> ssid, Optional<Long> breadcrumb) {
      scanNetworks(callback, ssid, breadcrumb, 0);
    }

    public void scanNetworks(ScanNetworksResponseCallback callback, @Nullable Optional<byte[]> ssid, Optional<Long> breadcrumb, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long ssidFieldID = 0L;
      BaseTLVType ssidtlvValue = ssid != null ? ssid.<BaseTLVType>map((nonOptionalssid) -> new ByteArrayType(nonOptionalssid)).orElse(new EmptyType()) : new NullType();
      elements.add(new StructElement(ssidFieldID, ssidtlvValue));

      final long breadcrumbFieldID = 1L;
      BaseTLVType breadcrumbtlvValue = breadcrumb.<BaseTLVType>map((nonOptionalbreadcrumb) -> new UIntType(nonOptionalbreadcrumb)).orElse(new EmptyType());
      elements.add(new StructElement(breadcrumbFieldID, breadcrumbtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long networkingStatusFieldID = 0L;
          Integer networkingStatus = null;
          final long debugTextFieldID = 1L;
          Optional<String> debugText = Optional.empty();
          final long wiFiScanResultsFieldID = 2L;
          Optional<ArrayList<ChipStructs.NetworkCommissioningClusterWiFiInterfaceScanResultStruct>> wiFiScanResults = Optional.empty();
          final long threadScanResultsFieldID = 3L;
          Optional<ArrayList<ChipStructs.NetworkCommissioningClusterThreadInterfaceScanResultStruct>> threadScanResults = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == networkingStatusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkingStatus = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == wiFiScanResultsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                wiFiScanResults = Optional.of(castingValue.map((elementcastingValue) -> ChipStructs.NetworkCommissioningClusterWiFiInterfaceScanResultStruct.decodeTlv(elementcastingValue)));
              }
            } else if (element.contextTagNum() == threadScanResultsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                threadScanResults = Optional.of(castingValue.map((elementcastingValue) -> ChipStructs.NetworkCommissioningClusterThreadInterfaceScanResultStruct.decodeTlv(elementcastingValue)));
              }
            }
          }
          callback.onSuccess(networkingStatus, debugText, wiFiScanResults, threadScanResults);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void addOrUpdateWiFiNetwork(NetworkConfigResponseCallback callback, byte[] ssid, byte[] credentials, Optional<Long> breadcrumb, Optional<byte[]> networkIdentity, Optional<byte[]> clientIdentifier, Optional<byte[]> possessionNonce) {
      addOrUpdateWiFiNetwork(callback, ssid, credentials, breadcrumb, networkIdentity, clientIdentifier, possessionNonce, 0);
    }

    public void addOrUpdateWiFiNetwork(NetworkConfigResponseCallback callback, byte[] ssid, byte[] credentials, Optional<Long> breadcrumb, Optional<byte[]> networkIdentity, Optional<byte[]> clientIdentifier, Optional<byte[]> possessionNonce, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long ssidFieldID = 0L;
      BaseTLVType ssidtlvValue = new ByteArrayType(ssid);
      elements.add(new StructElement(ssidFieldID, ssidtlvValue));

      final long credentialsFieldID = 1L;
      BaseTLVType credentialstlvValue = new ByteArrayType(credentials);
      elements.add(new StructElement(credentialsFieldID, credentialstlvValue));

      final long breadcrumbFieldID = 2L;
      BaseTLVType breadcrumbtlvValue = breadcrumb.<BaseTLVType>map((nonOptionalbreadcrumb) -> new UIntType(nonOptionalbreadcrumb)).orElse(new EmptyType());
      elements.add(new StructElement(breadcrumbFieldID, breadcrumbtlvValue));

      final long networkIdentityFieldID = 3L;
      BaseTLVType networkIdentitytlvValue = networkIdentity.<BaseTLVType>map((nonOptionalnetworkIdentity) -> new ByteArrayType(nonOptionalnetworkIdentity)).orElse(new EmptyType());
      elements.add(new StructElement(networkIdentityFieldID, networkIdentitytlvValue));

      final long clientIdentifierFieldID = 4L;
      BaseTLVType clientIdentifiertlvValue = clientIdentifier.<BaseTLVType>map((nonOptionalclientIdentifier) -> new ByteArrayType(nonOptionalclientIdentifier)).orElse(new EmptyType());
      elements.add(new StructElement(clientIdentifierFieldID, clientIdentifiertlvValue));

      final long possessionNonceFieldID = 5L;
      BaseTLVType possessionNoncetlvValue = possessionNonce.<BaseTLVType>map((nonOptionalpossessionNonce) -> new ByteArrayType(nonOptionalpossessionNonce)).orElse(new EmptyType());
      elements.add(new StructElement(possessionNonceFieldID, possessionNoncetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long networkingStatusFieldID = 0L;
          Integer networkingStatus = null;
          final long debugTextFieldID = 1L;
          Optional<String> debugText = Optional.empty();
          final long networkIndexFieldID = 2L;
          Optional<Integer> networkIndex = Optional.empty();
          final long clientIdentityFieldID = 3L;
          Optional<byte[]> clientIdentity = Optional.empty();
          final long possessionSignatureFieldID = 4L;
          Optional<byte[]> possessionSignature = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == networkingStatusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkingStatus = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == networkIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkIndex = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == clientIdentityFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                clientIdentity = Optional.of(castingValue.value(byte[].class));
              }
            } else if (element.contextTagNum() == possessionSignatureFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                possessionSignature = Optional.of(castingValue.value(byte[].class));
              }
            }
          }
          callback.onSuccess(networkingStatus, debugText, networkIndex, clientIdentity, possessionSignature);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void addOrUpdateThreadNetwork(NetworkConfigResponseCallback callback, byte[] operationalDataset, Optional<Long> breadcrumb) {
      addOrUpdateThreadNetwork(callback, operationalDataset, breadcrumb, 0);
    }

    public void addOrUpdateThreadNetwork(NetworkConfigResponseCallback callback, byte[] operationalDataset, Optional<Long> breadcrumb, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long operationalDatasetFieldID = 0L;
      BaseTLVType operationalDatasettlvValue = new ByteArrayType(operationalDataset);
      elements.add(new StructElement(operationalDatasetFieldID, operationalDatasettlvValue));

      final long breadcrumbFieldID = 1L;
      BaseTLVType breadcrumbtlvValue = breadcrumb.<BaseTLVType>map((nonOptionalbreadcrumb) -> new UIntType(nonOptionalbreadcrumb)).orElse(new EmptyType());
      elements.add(new StructElement(breadcrumbFieldID, breadcrumbtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long networkingStatusFieldID = 0L;
          Integer networkingStatus = null;
          final long debugTextFieldID = 1L;
          Optional<String> debugText = Optional.empty();
          final long networkIndexFieldID = 2L;
          Optional<Integer> networkIndex = Optional.empty();
          final long clientIdentityFieldID = 3L;
          Optional<byte[]> clientIdentity = Optional.empty();
          final long possessionSignatureFieldID = 4L;
          Optional<byte[]> possessionSignature = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == networkingStatusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkingStatus = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == networkIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkIndex = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == clientIdentityFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                clientIdentity = Optional.of(castingValue.value(byte[].class));
              }
            } else if (element.contextTagNum() == possessionSignatureFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                possessionSignature = Optional.of(castingValue.value(byte[].class));
              }
            }
          }
          callback.onSuccess(networkingStatus, debugText, networkIndex, clientIdentity, possessionSignature);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void removeNetwork(NetworkConfigResponseCallback callback, byte[] networkID, Optional<Long> breadcrumb) {
      removeNetwork(callback, networkID, breadcrumb, 0);
    }

    public void removeNetwork(NetworkConfigResponseCallback callback, byte[] networkID, Optional<Long> breadcrumb, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long networkIDFieldID = 0L;
      BaseTLVType networkIDtlvValue = new ByteArrayType(networkID);
      elements.add(new StructElement(networkIDFieldID, networkIDtlvValue));

      final long breadcrumbFieldID = 1L;
      BaseTLVType breadcrumbtlvValue = breadcrumb.<BaseTLVType>map((nonOptionalbreadcrumb) -> new UIntType(nonOptionalbreadcrumb)).orElse(new EmptyType());
      elements.add(new StructElement(breadcrumbFieldID, breadcrumbtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long networkingStatusFieldID = 0L;
          Integer networkingStatus = null;
          final long debugTextFieldID = 1L;
          Optional<String> debugText = Optional.empty();
          final long networkIndexFieldID = 2L;
          Optional<Integer> networkIndex = Optional.empty();
          final long clientIdentityFieldID = 3L;
          Optional<byte[]> clientIdentity = Optional.empty();
          final long possessionSignatureFieldID = 4L;
          Optional<byte[]> possessionSignature = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == networkingStatusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkingStatus = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == networkIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkIndex = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == clientIdentityFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                clientIdentity = Optional.of(castingValue.value(byte[].class));
              }
            } else if (element.contextTagNum() == possessionSignatureFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                possessionSignature = Optional.of(castingValue.value(byte[].class));
              }
            }
          }
          callback.onSuccess(networkingStatus, debugText, networkIndex, clientIdentity, possessionSignature);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void connectNetwork(ConnectNetworkResponseCallback callback, byte[] networkID, Optional<Long> breadcrumb) {
      connectNetwork(callback, networkID, breadcrumb, 0);
    }

    public void connectNetwork(ConnectNetworkResponseCallback callback, byte[] networkID, Optional<Long> breadcrumb, int timedInvokeTimeoutMs) {
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long networkIDFieldID = 0L;
      BaseTLVType networkIDtlvValue = new ByteArrayType(networkID);
      elements.add(new StructElement(networkIDFieldID, networkIDtlvValue));

      final long breadcrumbFieldID = 1L;
      BaseTLVType breadcrumbtlvValue = breadcrumb.<BaseTLVType>map((nonOptionalbreadcrumb) -> new UIntType(nonOptionalbreadcrumb)).orElse(new EmptyType());
      elements.add(new StructElement(breadcrumbFieldID, breadcrumbtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long networkingStatusFieldID = 0L;
          Integer networkingStatus = null;
          final long debugTextFieldID = 1L;
          Optional<String> debugText = Optional.empty();
          final long errorValueFieldID = 2L;
          @Nullable Long errorValue = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == networkingStatusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkingStatus = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == errorValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Int) {
                IntType castingValue = element.value(IntType.class);
                errorValue = castingValue.value(Long.class);
              }
            }
          }
          callback.onSuccess(networkingStatus, debugText, errorValue);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void reorderNetwork(NetworkConfigResponseCallback callback, byte[] networkID, Integer networkIndex, Optional<Long> breadcrumb) {
      reorderNetwork(callback, networkID, networkIndex, breadcrumb, 0);
    }

    public void reorderNetwork(NetworkConfigResponseCallback callback, byte[] networkID, Integer networkIndex, Optional<Long> breadcrumb, int timedInvokeTimeoutMs) {
      final long commandId = 8L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long networkIDFieldID = 0L;
      BaseTLVType networkIDtlvValue = new ByteArrayType(networkID);
      elements.add(new StructElement(networkIDFieldID, networkIDtlvValue));

      final long networkIndexFieldID = 1L;
      BaseTLVType networkIndextlvValue = new UIntType(networkIndex);
      elements.add(new StructElement(networkIndexFieldID, networkIndextlvValue));

      final long breadcrumbFieldID = 2L;
      BaseTLVType breadcrumbtlvValue = breadcrumb.<BaseTLVType>map((nonOptionalbreadcrumb) -> new UIntType(nonOptionalbreadcrumb)).orElse(new EmptyType());
      elements.add(new StructElement(breadcrumbFieldID, breadcrumbtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long networkingStatusFieldID = 0L;
          Integer networkingStatus = null;
          final long debugTextFieldID = 1L;
          Optional<String> debugText = Optional.empty();
          final long networkIndexFieldID = 2L;
          Optional<Integer> networkIndex = Optional.empty();
          final long clientIdentityFieldID = 3L;
          Optional<byte[]> clientIdentity = Optional.empty();
          final long possessionSignatureFieldID = 4L;
          Optional<byte[]> possessionSignature = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == networkingStatusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkingStatus = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == networkIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                networkIndex = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == clientIdentityFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                clientIdentity = Optional.of(castingValue.value(byte[].class));
              }
            } else if (element.contextTagNum() == possessionSignatureFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                possessionSignature = Optional.of(castingValue.value(byte[].class));
              }
            }
          }
          callback.onSuccess(networkingStatus, debugText, networkIndex, clientIdentity, possessionSignature);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void queryIdentity(QueryIdentityResponseCallback callback, byte[] keyIdentifier, Optional<byte[]> possessionNonce) {
      queryIdentity(callback, keyIdentifier, possessionNonce, 0);
    }

    public void queryIdentity(QueryIdentityResponseCallback callback, byte[] keyIdentifier, Optional<byte[]> possessionNonce, int timedInvokeTimeoutMs) {
      final long commandId = 9L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long keyIdentifierFieldID = 0L;
      BaseTLVType keyIdentifiertlvValue = new ByteArrayType(keyIdentifier);
      elements.add(new StructElement(keyIdentifierFieldID, keyIdentifiertlvValue));

      final long possessionNonceFieldID = 1L;
      BaseTLVType possessionNoncetlvValue = possessionNonce.<BaseTLVType>map((nonOptionalpossessionNonce) -> new ByteArrayType(nonOptionalpossessionNonce)).orElse(new EmptyType());
      elements.add(new StructElement(possessionNonceFieldID, possessionNoncetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long identityFieldID = 0L;
          byte[] identity = null;
          final long possessionSignatureFieldID = 1L;
          Optional<byte[]> possessionSignature = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == identityFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                identity = castingValue.value(byte[].class);
              }
            } else if (element.contextTagNum() == possessionSignatureFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                possessionSignature = Optional.of(castingValue.value(byte[].class));
              }
            }
          }
          callback.onSuccess(identity, possessionSignature);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface ScanNetworksResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer networkingStatus, Optional<String> debugText, Optional<ArrayList<ChipStructs.NetworkCommissioningClusterWiFiInterfaceScanResultStruct>> wiFiScanResults, Optional<ArrayList<ChipStructs.NetworkCommissioningClusterThreadInterfaceScanResultStruct>> threadScanResults);
    }

    public interface NetworkConfigResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer networkingStatus, Optional<String> debugText, Optional<Integer> networkIndex, Optional<byte[]> clientIdentity, Optional<byte[]> possessionSignature);
    }

    public interface ConnectNetworkResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer networkingStatus, Optional<String> debugText, @Nullable Long errorValue);
    }

    public interface QueryIdentityResponseCallback extends BaseClusterCallback {
      void onSuccess(byte[] identity, Optional<byte[]> possessionSignature);
    }

    public interface NetworksAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.NetworkCommissioningClusterNetworkInfoStruct> value);
    }

    public interface LastNetworkingStatusAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface LastNetworkIDAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface LastConnectErrorValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface SupportedWiFiBandsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMaxNetworksAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_NETWORKS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_NETWORKS_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxNetworksAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_NETWORKS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_NETWORKS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNetworksAttribute(
        NetworksAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NETWORKS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.NetworkCommissioningClusterNetworkInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NETWORKS_ATTRIBUTE_ID, true);
    }

    public void subscribeNetworksAttribute(
        NetworksAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NETWORKS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.NetworkCommissioningClusterNetworkInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NETWORKS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readScanMaxTimeSecondsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCAN_MAX_TIME_SECONDS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCAN_MAX_TIME_SECONDS_ATTRIBUTE_ID, true);
    }

    public void subscribeScanMaxTimeSecondsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCAN_MAX_TIME_SECONDS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCAN_MAX_TIME_SECONDS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readConnectMaxTimeSecondsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CONNECT_MAX_TIME_SECONDS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CONNECT_MAX_TIME_SECONDS_ATTRIBUTE_ID, true);
    }

    public void subscribeConnectMaxTimeSecondsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CONNECT_MAX_TIME_SECONDS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CONNECT_MAX_TIME_SECONDS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInterfaceEnabledAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INTERFACE_ENABLED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INTERFACE_ENABLED_ATTRIBUTE_ID, true);
    }

    public void writeInterfaceEnabledAttribute(DefaultClusterCallback callback, Boolean value) {
      writeInterfaceEnabledAttribute(callback, value, 0);
    }

    public void writeInterfaceEnabledAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INTERFACE_ENABLED_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInterfaceEnabledAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INTERFACE_ENABLED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INTERFACE_ENABLED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLastNetworkingStatusAttribute(
        LastNetworkingStatusAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAST_NETWORKING_STATUS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAST_NETWORKING_STATUS_ATTRIBUTE_ID, true);
    }

    public void subscribeLastNetworkingStatusAttribute(
        LastNetworkingStatusAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAST_NETWORKING_STATUS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAST_NETWORKING_STATUS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLastNetworkIDAttribute(
        LastNetworkIDAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAST_NETWORK_I_D_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAST_NETWORK_I_D_ATTRIBUTE_ID, true);
    }

    public void subscribeLastNetworkIDAttribute(
        LastNetworkIDAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAST_NETWORK_I_D_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAST_NETWORK_I_D_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLastConnectErrorValueAttribute(
        LastConnectErrorValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAST_CONNECT_ERROR_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAST_CONNECT_ERROR_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeLastConnectErrorValueAttribute(
        LastConnectErrorValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAST_CONNECT_ERROR_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAST_CONNECT_ERROR_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSupportedWiFiBandsAttribute(
        SupportedWiFiBandsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_WI_FI_BANDS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_WI_FI_BANDS_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedWiFiBandsAttribute(
        SupportedWiFiBandsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_WI_FI_BANDS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_WI_FI_BANDS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSupportedThreadFeaturesAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_THREAD_FEATURES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_THREAD_FEATURES_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedThreadFeaturesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_THREAD_FEATURES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_THREAD_FEATURES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readThreadVersionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, THREAD_VERSION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, THREAD_VERSION_ATTRIBUTE_ID, true);
    }

    public void subscribeThreadVersionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, THREAD_VERSION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, THREAD_VERSION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class DiagnosticLogsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 50L;

    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public DiagnosticLogsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void retrieveLogsRequest(RetrieveLogsResponseCallback callback, Integer intent, Integer requestedProtocol, Optional<String> transferFileDesignator) {
      retrieveLogsRequest(callback, intent, requestedProtocol, transferFileDesignator, 0);
    }

    public void retrieveLogsRequest(RetrieveLogsResponseCallback callback, Integer intent, Integer requestedProtocol, Optional<String> transferFileDesignator, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long intentFieldID = 0L;
      BaseTLVType intenttlvValue = new UIntType(intent);
      elements.add(new StructElement(intentFieldID, intenttlvValue));

      final long requestedProtocolFieldID = 1L;
      BaseTLVType requestedProtocoltlvValue = new UIntType(requestedProtocol);
      elements.add(new StructElement(requestedProtocolFieldID, requestedProtocoltlvValue));

      final long transferFileDesignatorFieldID = 2L;
      BaseTLVType transferFileDesignatortlvValue = transferFileDesignator.<BaseTLVType>map((nonOptionaltransferFileDesignator) -> new StringType(nonOptionaltransferFileDesignator)).orElse(new EmptyType());
      elements.add(new StructElement(transferFileDesignatorFieldID, transferFileDesignatortlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long logContentFieldID = 1L;
          byte[] logContent = null;
          final long UTCTimeStampFieldID = 2L;
          Optional<Long> UTCTimeStamp = Optional.empty();
          final long timeSinceBootFieldID = 3L;
          Optional<Long> timeSinceBoot = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == logContentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                logContent = castingValue.value(byte[].class);
              }
            } else if (element.contextTagNum() == UTCTimeStampFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                UTCTimeStamp = Optional.of(castingValue.value(Long.class));
              }
            } else if (element.contextTagNum() == timeSinceBootFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                timeSinceBoot = Optional.of(castingValue.value(Long.class));
              }
            }
          }
          callback.onSuccess(status, logContent, UTCTimeStamp, timeSinceBoot);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface RetrieveLogsResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, byte[] logContent, Optional<Long> UTCTimeStamp, Optional<Long> timeSinceBoot);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class GeneralDiagnosticsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 51L;

    private static final long NETWORK_INTERFACES_ATTRIBUTE_ID = 0L;
    private static final long REBOOT_COUNT_ATTRIBUTE_ID = 1L;
    private static final long UP_TIME_ATTRIBUTE_ID = 2L;
    private static final long TOTAL_OPERATIONAL_HOURS_ATTRIBUTE_ID = 3L;
    private static final long BOOT_REASON_ATTRIBUTE_ID = 4L;
    private static final long ACTIVE_HARDWARE_FAULTS_ATTRIBUTE_ID = 5L;
    private static final long ACTIVE_RADIO_FAULTS_ATTRIBUTE_ID = 6L;
    private static final long ACTIVE_NETWORK_FAULTS_ATTRIBUTE_ID = 7L;
    private static final long TEST_EVENT_TRIGGERS_ENABLED_ATTRIBUTE_ID = 8L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public GeneralDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void testEventTrigger(DefaultClusterCallback callback, byte[] enableKey, Long eventTrigger) {
      testEventTrigger(callback, enableKey, eventTrigger, 0);
    }

    public void testEventTrigger(DefaultClusterCallback callback, byte[] enableKey, Long eventTrigger, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long enableKeyFieldID = 0L;
      BaseTLVType enableKeytlvValue = new ByteArrayType(enableKey);
      elements.add(new StructElement(enableKeyFieldID, enableKeytlvValue));

      final long eventTriggerFieldID = 1L;
      BaseTLVType eventTriggertlvValue = new UIntType(eventTrigger);
      elements.add(new StructElement(eventTriggerFieldID, eventTriggertlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void timeSnapshot(TimeSnapshotResponseCallback callback) {
      timeSnapshot(callback, 0);
    }

    public void timeSnapshot(TimeSnapshotResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long systemTimeMsFieldID = 0L;
          Long systemTimeMs = null;
          final long posixTimeMsFieldID = 1L;
          @Nullable Long posixTimeMs = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == systemTimeMsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                systemTimeMs = castingValue.value(Long.class);
              }
            } else if (element.contextTagNum() == posixTimeMsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                posixTimeMs = castingValue.value(Long.class);
              }
            }
          }
          callback.onSuccess(systemTimeMs, posixTimeMs);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void payloadTestRequest(PayloadTestResponseCallback callback, byte[] enableKey, Integer value, Integer count) {
      payloadTestRequest(callback, enableKey, value, count, 0);
    }

    public void payloadTestRequest(PayloadTestResponseCallback callback, byte[] enableKey, Integer value, Integer count, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long enableKeyFieldID = 0L;
      BaseTLVType enableKeytlvValue = new ByteArrayType(enableKey);
      elements.add(new StructElement(enableKeyFieldID, enableKeytlvValue));

      final long valueFieldID = 1L;
      BaseTLVType valuetlvValue = new UIntType(value);
      elements.add(new StructElement(valueFieldID, valuetlvValue));

      final long countFieldID = 2L;
      BaseTLVType counttlvValue = new UIntType(count);
      elements.add(new StructElement(countFieldID, counttlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long payloadFieldID = 0L;
          byte[] payload = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == payloadFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                payload = castingValue.value(byte[].class);
              }
            }
          }
          callback.onSuccess(payload);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface TimeSnapshotResponseCallback extends BaseClusterCallback {
      void onSuccess(Long systemTimeMs, @Nullable Long posixTimeMs);
    }

    public interface PayloadTestResponseCallback extends BaseClusterCallback {
      void onSuccess(byte[] payload);
    }

    public interface NetworkInterfacesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.GeneralDiagnosticsClusterNetworkInterface> value);
    }

    public interface ActiveHardwareFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface ActiveRadioFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface ActiveNetworkFaultsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readNetworkInterfacesAttribute(
        NetworkInterfacesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NETWORK_INTERFACES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.GeneralDiagnosticsClusterNetworkInterface> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NETWORK_INTERFACES_ATTRIBUTE_ID, true);
    }

    public void subscribeNetworkInterfacesAttribute(
        NetworkInterfacesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NETWORK_INTERFACES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.GeneralDiagnosticsClusterNetworkInterface> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NETWORK_INTERFACES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRebootCountAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REBOOT_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REBOOT_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRebootCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REBOOT_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REBOOT_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUpTimeAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UP_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UP_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeUpTimeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UP_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UP_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTotalOperationalHoursAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOTAL_OPERATIONAL_HOURS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOTAL_OPERATIONAL_HOURS_ATTRIBUTE_ID, true);
    }

    public void subscribeTotalOperationalHoursAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOTAL_OPERATIONAL_HOURS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOTAL_OPERATIONAL_HOURS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBootReasonAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BOOT_REASON_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BOOT_REASON_ATTRIBUTE_ID, true);
    }

    public void subscribeBootReasonAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BOOT_REASON_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BOOT_REASON_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveHardwareFaultsAttribute(
        ActiveHardwareFaultsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_HARDWARE_FAULTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_HARDWARE_FAULTS_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveHardwareFaultsAttribute(
        ActiveHardwareFaultsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_HARDWARE_FAULTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_HARDWARE_FAULTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveRadioFaultsAttribute(
        ActiveRadioFaultsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_RADIO_FAULTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_RADIO_FAULTS_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveRadioFaultsAttribute(
        ActiveRadioFaultsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_RADIO_FAULTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_RADIO_FAULTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveNetworkFaultsAttribute(
        ActiveNetworkFaultsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_NETWORK_FAULTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_NETWORK_FAULTS_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveNetworkFaultsAttribute(
        ActiveNetworkFaultsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_NETWORK_FAULTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_NETWORK_FAULTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTestEventTriggersEnabledAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TEST_EVENT_TRIGGERS_ENABLED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TEST_EVENT_TRIGGERS_ENABLED_ATTRIBUTE_ID, true);
    }

    public void subscribeTestEventTriggersEnabledAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TEST_EVENT_TRIGGERS_ENABLED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TEST_EVENT_TRIGGERS_ENABLED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class SoftwareDiagnosticsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 52L;

    private static final long THREAD_METRICS_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_HEAP_FREE_ATTRIBUTE_ID = 1L;
    private static final long CURRENT_HEAP_USED_ATTRIBUTE_ID = 2L;
    private static final long CURRENT_HEAP_HIGH_WATERMARK_ATTRIBUTE_ID = 3L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public SoftwareDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void resetWatermarks(DefaultClusterCallback callback) {
      resetWatermarks(callback, 0);
    }

    public void resetWatermarks(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface ThreadMetricsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.SoftwareDiagnosticsClusterThreadMetricsStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readThreadMetricsAttribute(
        ThreadMetricsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, THREAD_METRICS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.SoftwareDiagnosticsClusterThreadMetricsStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, THREAD_METRICS_ATTRIBUTE_ID, true);
    }

    public void subscribeThreadMetricsAttribute(
        ThreadMetricsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, THREAD_METRICS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.SoftwareDiagnosticsClusterThreadMetricsStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, THREAD_METRICS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentHeapFreeAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_HEAP_FREE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_HEAP_FREE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentHeapFreeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_HEAP_FREE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_HEAP_FREE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentHeapUsedAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_HEAP_USED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_HEAP_USED_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentHeapUsedAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_HEAP_USED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_HEAP_USED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentHeapHighWatermarkAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_HEAP_HIGH_WATERMARK_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_HEAP_HIGH_WATERMARK_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentHeapHighWatermarkAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_HEAP_HIGH_WATERMARK_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_HEAP_HIGH_WATERMARK_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ThreadNetworkDiagnosticsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 53L;

    private static final long CHANNEL_ATTRIBUTE_ID = 0L;
    private static final long ROUTING_ROLE_ATTRIBUTE_ID = 1L;
    private static final long NETWORK_NAME_ATTRIBUTE_ID = 2L;
    private static final long PAN_ID_ATTRIBUTE_ID = 3L;
    private static final long EXTENDED_PAN_ID_ATTRIBUTE_ID = 4L;
    private static final long MESH_LOCAL_PREFIX_ATTRIBUTE_ID = 5L;
    private static final long OVERRUN_COUNT_ATTRIBUTE_ID = 6L;
    private static final long NEIGHBOR_TABLE_ATTRIBUTE_ID = 7L;
    private static final long ROUTE_TABLE_ATTRIBUTE_ID = 8L;
    private static final long PARTITION_ID_ATTRIBUTE_ID = 9L;
    private static final long WEIGHTING_ATTRIBUTE_ID = 10L;
    private static final long DATA_VERSION_ATTRIBUTE_ID = 11L;
    private static final long STABLE_DATA_VERSION_ATTRIBUTE_ID = 12L;
    private static final long LEADER_ROUTER_ID_ATTRIBUTE_ID = 13L;
    private static final long DETACHED_ROLE_COUNT_ATTRIBUTE_ID = 14L;
    private static final long CHILD_ROLE_COUNT_ATTRIBUTE_ID = 15L;
    private static final long ROUTER_ROLE_COUNT_ATTRIBUTE_ID = 16L;
    private static final long LEADER_ROLE_COUNT_ATTRIBUTE_ID = 17L;
    private static final long ATTACH_ATTEMPT_COUNT_ATTRIBUTE_ID = 18L;
    private static final long PARTITION_ID_CHANGE_COUNT_ATTRIBUTE_ID = 19L;
    private static final long BETTER_PARTITION_ATTACH_ATTEMPT_COUNT_ATTRIBUTE_ID = 20L;
    private static final long PARENT_CHANGE_COUNT_ATTRIBUTE_ID = 21L;
    private static final long TX_TOTAL_COUNT_ATTRIBUTE_ID = 22L;
    private static final long TX_UNICAST_COUNT_ATTRIBUTE_ID = 23L;
    private static final long TX_BROADCAST_COUNT_ATTRIBUTE_ID = 24L;
    private static final long TX_ACK_REQUESTED_COUNT_ATTRIBUTE_ID = 25L;
    private static final long TX_ACKED_COUNT_ATTRIBUTE_ID = 26L;
    private static final long TX_NO_ACK_REQUESTED_COUNT_ATTRIBUTE_ID = 27L;
    private static final long TX_DATA_COUNT_ATTRIBUTE_ID = 28L;
    private static final long TX_DATA_POLL_COUNT_ATTRIBUTE_ID = 29L;
    private static final long TX_BEACON_COUNT_ATTRIBUTE_ID = 30L;
    private static final long TX_BEACON_REQUEST_COUNT_ATTRIBUTE_ID = 31L;
    private static final long TX_OTHER_COUNT_ATTRIBUTE_ID = 32L;
    private static final long TX_RETRY_COUNT_ATTRIBUTE_ID = 33L;
    private static final long TX_DIRECT_MAX_RETRY_EXPIRY_COUNT_ATTRIBUTE_ID = 34L;
    private static final long TX_INDIRECT_MAX_RETRY_EXPIRY_COUNT_ATTRIBUTE_ID = 35L;
    private static final long TX_ERR_CCA_COUNT_ATTRIBUTE_ID = 36L;
    private static final long TX_ERR_ABORT_COUNT_ATTRIBUTE_ID = 37L;
    private static final long TX_ERR_BUSY_CHANNEL_COUNT_ATTRIBUTE_ID = 38L;
    private static final long RX_TOTAL_COUNT_ATTRIBUTE_ID = 39L;
    private static final long RX_UNICAST_COUNT_ATTRIBUTE_ID = 40L;
    private static final long RX_BROADCAST_COUNT_ATTRIBUTE_ID = 41L;
    private static final long RX_DATA_COUNT_ATTRIBUTE_ID = 42L;
    private static final long RX_DATA_POLL_COUNT_ATTRIBUTE_ID = 43L;
    private static final long RX_BEACON_COUNT_ATTRIBUTE_ID = 44L;
    private static final long RX_BEACON_REQUEST_COUNT_ATTRIBUTE_ID = 45L;
    private static final long RX_OTHER_COUNT_ATTRIBUTE_ID = 46L;
    private static final long RX_ADDRESS_FILTERED_COUNT_ATTRIBUTE_ID = 47L;
    private static final long RX_DEST_ADDR_FILTERED_COUNT_ATTRIBUTE_ID = 48L;
    private static final long RX_DUPLICATED_COUNT_ATTRIBUTE_ID = 49L;
    private static final long RX_ERR_NO_FRAME_COUNT_ATTRIBUTE_ID = 50L;
    private static final long RX_ERR_UNKNOWN_NEIGHBOR_COUNT_ATTRIBUTE_ID = 51L;
    private static final long RX_ERR_INVALID_SRC_ADDR_COUNT_ATTRIBUTE_ID = 52L;
    private static final long RX_ERR_SEC_COUNT_ATTRIBUTE_ID = 53L;
    private static final long RX_ERR_FCS_COUNT_ATTRIBUTE_ID = 54L;
    private static final long RX_ERR_OTHER_COUNT_ATTRIBUTE_ID = 55L;
    private static final long ACTIVE_TIMESTAMP_ATTRIBUTE_ID = 56L;
    private static final long PENDING_TIMESTAMP_ATTRIBUTE_ID = 57L;
    private static final long DELAY_ATTRIBUTE_ID = 58L;
    private static final long SECURITY_POLICY_ATTRIBUTE_ID = 59L;
    private static final long CHANNEL_PAGE0_MASK_ATTRIBUTE_ID = 60L;
    private static final long OPERATIONAL_DATASET_COMPONENTS_ATTRIBUTE_ID = 61L;
    private static final long ACTIVE_NETWORK_FAULTS_LIST_ATTRIBUTE_ID = 62L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ThreadNetworkDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void resetCounts(DefaultClusterCallback callback) {
      resetCounts(callback, 0);
    }

    public void resetCounts(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface ChannelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface RoutingRoleAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NetworkNameAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable String value);
    }

    public interface PanIdAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ExtendedPanIdAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface MeshLocalPrefixAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface NeighborTableAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ThreadNetworkDiagnosticsClusterNeighborTableStruct> value);
    }

    public interface RouteTableAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ThreadNetworkDiagnosticsClusterRouteTableStruct> value);
    }

    public interface PartitionIdAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface WeightingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface DataVersionAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface StableDataVersionAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface LeaderRouterIdAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ActiveTimestampAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PendingTimestampAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface DelayAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface SecurityPolicyAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ThreadNetworkDiagnosticsClusterSecurityPolicy value);
    }

    public interface ChannelPage0MaskAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface OperationalDatasetComponentsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ThreadNetworkDiagnosticsClusterOperationalDatasetComponents value);
    }

    public interface ActiveNetworkFaultsListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readChannelAttribute(
        ChannelAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHANNEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHANNEL_ATTRIBUTE_ID, true);
    }

    public void subscribeChannelAttribute(
        ChannelAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHANNEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHANNEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRoutingRoleAttribute(
        RoutingRoleAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ROUTING_ROLE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ROUTING_ROLE_ATTRIBUTE_ID, true);
    }

    public void subscribeRoutingRoleAttribute(
        RoutingRoleAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ROUTING_ROLE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ROUTING_ROLE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNetworkNameAttribute(
        NetworkNameAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NETWORK_NAME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NETWORK_NAME_ATTRIBUTE_ID, true);
    }

    public void subscribeNetworkNameAttribute(
        NetworkNameAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NETWORK_NAME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NETWORK_NAME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPanIdAttribute(
        PanIdAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PAN_ID_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PAN_ID_ATTRIBUTE_ID, true);
    }

    public void subscribePanIdAttribute(
        PanIdAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PAN_ID_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PAN_ID_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readExtendedPanIdAttribute(
        ExtendedPanIdAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EXTENDED_PAN_ID_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EXTENDED_PAN_ID_ATTRIBUTE_ID, true);
    }

    public void subscribeExtendedPanIdAttribute(
        ExtendedPanIdAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EXTENDED_PAN_ID_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EXTENDED_PAN_ID_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeshLocalPrefixAttribute(
        MeshLocalPrefixAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MESH_LOCAL_PREFIX_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MESH_LOCAL_PREFIX_ATTRIBUTE_ID, true);
    }

    public void subscribeMeshLocalPrefixAttribute(
        MeshLocalPrefixAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MESH_LOCAL_PREFIX_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MESH_LOCAL_PREFIX_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOverrunCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OVERRUN_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OVERRUN_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeOverrunCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OVERRUN_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OVERRUN_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNeighborTableAttribute(
        NeighborTableAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NEIGHBOR_TABLE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThreadNetworkDiagnosticsClusterNeighborTableStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NEIGHBOR_TABLE_ATTRIBUTE_ID, true);
    }

    public void subscribeNeighborTableAttribute(
        NeighborTableAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NEIGHBOR_TABLE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThreadNetworkDiagnosticsClusterNeighborTableStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NEIGHBOR_TABLE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRouteTableAttribute(
        RouteTableAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ROUTE_TABLE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThreadNetworkDiagnosticsClusterRouteTableStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ROUTE_TABLE_ATTRIBUTE_ID, true);
    }

    public void subscribeRouteTableAttribute(
        RouteTableAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ROUTE_TABLE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThreadNetworkDiagnosticsClusterRouteTableStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ROUTE_TABLE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPartitionIdAttribute(
        PartitionIdAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PARTITION_ID_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PARTITION_ID_ATTRIBUTE_ID, true);
    }

    public void subscribePartitionIdAttribute(
        PartitionIdAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PARTITION_ID_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PARTITION_ID_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readWeightingAttribute(
        WeightingAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WEIGHTING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WEIGHTING_ATTRIBUTE_ID, true);
    }

    public void subscribeWeightingAttribute(
        WeightingAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WEIGHTING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WEIGHTING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDataVersionAttribute(
        DataVersionAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DATA_VERSION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DATA_VERSION_ATTRIBUTE_ID, true);
    }

    public void subscribeDataVersionAttribute(
        DataVersionAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DATA_VERSION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DATA_VERSION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStableDataVersionAttribute(
        StableDataVersionAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STABLE_DATA_VERSION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STABLE_DATA_VERSION_ATTRIBUTE_ID, true);
    }

    public void subscribeStableDataVersionAttribute(
        StableDataVersionAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STABLE_DATA_VERSION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STABLE_DATA_VERSION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLeaderRouterIdAttribute(
        LeaderRouterIdAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEADER_ROUTER_ID_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEADER_ROUTER_ID_ATTRIBUTE_ID, true);
    }

    public void subscribeLeaderRouterIdAttribute(
        LeaderRouterIdAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEADER_ROUTER_ID_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEADER_ROUTER_ID_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDetachedRoleCountAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DETACHED_ROLE_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DETACHED_ROLE_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeDetachedRoleCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DETACHED_ROLE_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DETACHED_ROLE_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readChildRoleCountAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHILD_ROLE_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHILD_ROLE_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeChildRoleCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHILD_ROLE_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHILD_ROLE_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRouterRoleCountAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ROUTER_ROLE_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ROUTER_ROLE_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRouterRoleCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ROUTER_ROLE_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ROUTER_ROLE_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLeaderRoleCountAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEADER_ROLE_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEADER_ROLE_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeLeaderRoleCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEADER_ROLE_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEADER_ROLE_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttachAttemptCountAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTACH_ATTEMPT_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTACH_ATTEMPT_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeAttachAttemptCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTACH_ATTEMPT_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTACH_ATTEMPT_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPartitionIdChangeCountAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PARTITION_ID_CHANGE_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PARTITION_ID_CHANGE_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribePartitionIdChangeCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PARTITION_ID_CHANGE_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PARTITION_ID_CHANGE_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBetterPartitionAttachAttemptCountAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BETTER_PARTITION_ATTACH_ATTEMPT_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BETTER_PARTITION_ATTACH_ATTEMPT_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeBetterPartitionAttachAttemptCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BETTER_PARTITION_ATTACH_ATTEMPT_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BETTER_PARTITION_ATTACH_ATTEMPT_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readParentChangeCountAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PARENT_CHANGE_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PARENT_CHANGE_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeParentChangeCountAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PARENT_CHANGE_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PARENT_CHANGE_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxTotalCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_TOTAL_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_TOTAL_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxTotalCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_TOTAL_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_TOTAL_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxUnicastCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_UNICAST_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_UNICAST_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxUnicastCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_UNICAST_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_UNICAST_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxBroadcastCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_BROADCAST_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_BROADCAST_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxBroadcastCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_BROADCAST_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_BROADCAST_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxAckRequestedCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_ACK_REQUESTED_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_ACK_REQUESTED_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxAckRequestedCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_ACK_REQUESTED_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_ACK_REQUESTED_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxAckedCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_ACKED_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_ACKED_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxAckedCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_ACKED_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_ACKED_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxNoAckRequestedCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_NO_ACK_REQUESTED_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_NO_ACK_REQUESTED_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxNoAckRequestedCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_NO_ACK_REQUESTED_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_NO_ACK_REQUESTED_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxDataCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_DATA_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_DATA_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxDataCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_DATA_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_DATA_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxDataPollCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_DATA_POLL_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_DATA_POLL_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxDataPollCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_DATA_POLL_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_DATA_POLL_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxBeaconCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_BEACON_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_BEACON_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxBeaconCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_BEACON_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_BEACON_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxBeaconRequestCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_BEACON_REQUEST_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_BEACON_REQUEST_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxBeaconRequestCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_BEACON_REQUEST_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_BEACON_REQUEST_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxOtherCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_OTHER_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_OTHER_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxOtherCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_OTHER_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_OTHER_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxRetryCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_RETRY_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_RETRY_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxRetryCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_RETRY_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_RETRY_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxDirectMaxRetryExpiryCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_DIRECT_MAX_RETRY_EXPIRY_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_DIRECT_MAX_RETRY_EXPIRY_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxDirectMaxRetryExpiryCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_DIRECT_MAX_RETRY_EXPIRY_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_DIRECT_MAX_RETRY_EXPIRY_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxIndirectMaxRetryExpiryCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_INDIRECT_MAX_RETRY_EXPIRY_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_INDIRECT_MAX_RETRY_EXPIRY_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxIndirectMaxRetryExpiryCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_INDIRECT_MAX_RETRY_EXPIRY_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_INDIRECT_MAX_RETRY_EXPIRY_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxErrCcaCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_ERR_CCA_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_ERR_CCA_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxErrCcaCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_ERR_CCA_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_ERR_CCA_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxErrAbortCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_ERR_ABORT_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_ERR_ABORT_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxErrAbortCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_ERR_ABORT_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_ERR_ABORT_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxErrBusyChannelCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_ERR_BUSY_CHANNEL_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_ERR_BUSY_CHANNEL_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxErrBusyChannelCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_ERR_BUSY_CHANNEL_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_ERR_BUSY_CHANNEL_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRxTotalCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_TOTAL_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_TOTAL_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRxTotalCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_TOTAL_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_TOTAL_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRxUnicastCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_UNICAST_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_UNICAST_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRxUnicastCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_UNICAST_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_UNICAST_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRxBroadcastCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_BROADCAST_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_BROADCAST_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRxBroadcastCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_BROADCAST_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_BROADCAST_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRxDataCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_DATA_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_DATA_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRxDataCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_DATA_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_DATA_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRxDataPollCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_DATA_POLL_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_DATA_POLL_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRxDataPollCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_DATA_POLL_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_DATA_POLL_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRxBeaconCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_BEACON_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_BEACON_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRxBeaconCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_BEACON_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_BEACON_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRxBeaconRequestCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_BEACON_REQUEST_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_BEACON_REQUEST_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRxBeaconRequestCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_BEACON_REQUEST_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_BEACON_REQUEST_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRxOtherCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_OTHER_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_OTHER_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRxOtherCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_OTHER_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_OTHER_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRxAddressFilteredCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_ADDRESS_FILTERED_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_ADDRESS_FILTERED_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRxAddressFilteredCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_ADDRESS_FILTERED_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_ADDRESS_FILTERED_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRxDestAddrFilteredCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_DEST_ADDR_FILTERED_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_DEST_ADDR_FILTERED_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRxDestAddrFilteredCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_DEST_ADDR_FILTERED_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_DEST_ADDR_FILTERED_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRxDuplicatedCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_DUPLICATED_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_DUPLICATED_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRxDuplicatedCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_DUPLICATED_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_DUPLICATED_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRxErrNoFrameCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_ERR_NO_FRAME_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_ERR_NO_FRAME_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRxErrNoFrameCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_ERR_NO_FRAME_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_ERR_NO_FRAME_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRxErrUnknownNeighborCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_ERR_UNKNOWN_NEIGHBOR_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_ERR_UNKNOWN_NEIGHBOR_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRxErrUnknownNeighborCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_ERR_UNKNOWN_NEIGHBOR_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_ERR_UNKNOWN_NEIGHBOR_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRxErrInvalidSrcAddrCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_ERR_INVALID_SRC_ADDR_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_ERR_INVALID_SRC_ADDR_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRxErrInvalidSrcAddrCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_ERR_INVALID_SRC_ADDR_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_ERR_INVALID_SRC_ADDR_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRxErrSecCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_ERR_SEC_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_ERR_SEC_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRxErrSecCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_ERR_SEC_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_ERR_SEC_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRxErrFcsCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_ERR_FCS_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_ERR_FCS_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRxErrFcsCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_ERR_FCS_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_ERR_FCS_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRxErrOtherCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_ERR_OTHER_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_ERR_OTHER_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeRxErrOtherCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RX_ERR_OTHER_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RX_ERR_OTHER_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveTimestampAttribute(
        ActiveTimestampAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_TIMESTAMP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_TIMESTAMP_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveTimestampAttribute(
        ActiveTimestampAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_TIMESTAMP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_TIMESTAMP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPendingTimestampAttribute(
        PendingTimestampAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PENDING_TIMESTAMP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PENDING_TIMESTAMP_ATTRIBUTE_ID, true);
    }

    public void subscribePendingTimestampAttribute(
        PendingTimestampAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PENDING_TIMESTAMP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PENDING_TIMESTAMP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDelayAttribute(
        DelayAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DELAY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DELAY_ATTRIBUTE_ID, true);
    }

    public void subscribeDelayAttribute(
        DelayAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DELAY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DELAY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSecurityPolicyAttribute(
        SecurityPolicyAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SECURITY_POLICY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ThreadNetworkDiagnosticsClusterSecurityPolicy value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SECURITY_POLICY_ATTRIBUTE_ID, true);
    }

    public void subscribeSecurityPolicyAttribute(
        SecurityPolicyAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SECURITY_POLICY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ThreadNetworkDiagnosticsClusterSecurityPolicy value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SECURITY_POLICY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readChannelPage0MaskAttribute(
        ChannelPage0MaskAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHANNEL_PAGE0_MASK_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHANNEL_PAGE0_MASK_ATTRIBUTE_ID, true);
    }

    public void subscribeChannelPage0MaskAttribute(
        ChannelPage0MaskAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHANNEL_PAGE0_MASK_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHANNEL_PAGE0_MASK_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOperationalDatasetComponentsAttribute(
        OperationalDatasetComponentsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_DATASET_COMPONENTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ThreadNetworkDiagnosticsClusterOperationalDatasetComponents value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_DATASET_COMPONENTS_ATTRIBUTE_ID, true);
    }

    public void subscribeOperationalDatasetComponentsAttribute(
        OperationalDatasetComponentsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_DATASET_COMPONENTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ThreadNetworkDiagnosticsClusterOperationalDatasetComponents value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_DATASET_COMPONENTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveNetworkFaultsListAttribute(
        ActiveNetworkFaultsListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_NETWORK_FAULTS_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_NETWORK_FAULTS_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveNetworkFaultsListAttribute(
        ActiveNetworkFaultsListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_NETWORK_FAULTS_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_NETWORK_FAULTS_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class WiFiNetworkDiagnosticsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 54L;

    private static final long BSSID_ATTRIBUTE_ID = 0L;
    private static final long SECURITY_TYPE_ATTRIBUTE_ID = 1L;
    private static final long WI_FI_VERSION_ATTRIBUTE_ID = 2L;
    private static final long CHANNEL_NUMBER_ATTRIBUTE_ID = 3L;
    private static final long RSSI_ATTRIBUTE_ID = 4L;
    private static final long BEACON_LOST_COUNT_ATTRIBUTE_ID = 5L;
    private static final long BEACON_RX_COUNT_ATTRIBUTE_ID = 6L;
    private static final long PACKET_MULTICAST_RX_COUNT_ATTRIBUTE_ID = 7L;
    private static final long PACKET_MULTICAST_TX_COUNT_ATTRIBUTE_ID = 8L;
    private static final long PACKET_UNICAST_RX_COUNT_ATTRIBUTE_ID = 9L;
    private static final long PACKET_UNICAST_TX_COUNT_ATTRIBUTE_ID = 10L;
    private static final long CURRENT_MAX_RATE_ATTRIBUTE_ID = 11L;
    private static final long OVERRUN_COUNT_ATTRIBUTE_ID = 12L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public WiFiNetworkDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void resetCounts(DefaultClusterCallback callback) {
      resetCounts(callback, 0);
    }

    public void resetCounts(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface BssidAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface SecurityTypeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface WiFiVersionAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ChannelNumberAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface RssiAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface BeaconLostCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface BeaconRxCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PacketMulticastRxCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PacketMulticastTxCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PacketUnicastRxCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PacketUnicastTxCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface CurrentMaxRateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface OverrunCountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readBssidAttribute(
        BssidAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BSSID_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BSSID_ATTRIBUTE_ID, true);
    }

    public void subscribeBssidAttribute(
        BssidAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BSSID_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BSSID_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSecurityTypeAttribute(
        SecurityTypeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SECURITY_TYPE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SECURITY_TYPE_ATTRIBUTE_ID, true);
    }

    public void subscribeSecurityTypeAttribute(
        SecurityTypeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SECURITY_TYPE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SECURITY_TYPE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readWiFiVersionAttribute(
        WiFiVersionAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WI_FI_VERSION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WI_FI_VERSION_ATTRIBUTE_ID, true);
    }

    public void subscribeWiFiVersionAttribute(
        WiFiVersionAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WI_FI_VERSION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WI_FI_VERSION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readChannelNumberAttribute(
        ChannelNumberAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHANNEL_NUMBER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHANNEL_NUMBER_ATTRIBUTE_ID, true);
    }

    public void subscribeChannelNumberAttribute(
        ChannelNumberAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHANNEL_NUMBER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHANNEL_NUMBER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRssiAttribute(
        RssiAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RSSI_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RSSI_ATTRIBUTE_ID, true);
    }

    public void subscribeRssiAttribute(
        RssiAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RSSI_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RSSI_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBeaconLostCountAttribute(
        BeaconLostCountAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BEACON_LOST_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BEACON_LOST_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeBeaconLostCountAttribute(
        BeaconLostCountAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BEACON_LOST_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BEACON_LOST_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBeaconRxCountAttribute(
        BeaconRxCountAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BEACON_RX_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BEACON_RX_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeBeaconRxCountAttribute(
        BeaconRxCountAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BEACON_RX_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BEACON_RX_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPacketMulticastRxCountAttribute(
        PacketMulticastRxCountAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PACKET_MULTICAST_RX_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PACKET_MULTICAST_RX_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribePacketMulticastRxCountAttribute(
        PacketMulticastRxCountAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PACKET_MULTICAST_RX_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PACKET_MULTICAST_RX_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPacketMulticastTxCountAttribute(
        PacketMulticastTxCountAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PACKET_MULTICAST_TX_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PACKET_MULTICAST_TX_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribePacketMulticastTxCountAttribute(
        PacketMulticastTxCountAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PACKET_MULTICAST_TX_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PACKET_MULTICAST_TX_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPacketUnicastRxCountAttribute(
        PacketUnicastRxCountAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PACKET_UNICAST_RX_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PACKET_UNICAST_RX_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribePacketUnicastRxCountAttribute(
        PacketUnicastRxCountAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PACKET_UNICAST_RX_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PACKET_UNICAST_RX_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPacketUnicastTxCountAttribute(
        PacketUnicastTxCountAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PACKET_UNICAST_TX_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PACKET_UNICAST_TX_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribePacketUnicastTxCountAttribute(
        PacketUnicastTxCountAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PACKET_UNICAST_TX_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PACKET_UNICAST_TX_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentMaxRateAttribute(
        CurrentMaxRateAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MAX_RATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MAX_RATE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentMaxRateAttribute(
        CurrentMaxRateAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MAX_RATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MAX_RATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOverrunCountAttribute(
        OverrunCountAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OVERRUN_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OVERRUN_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeOverrunCountAttribute(
        OverrunCountAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OVERRUN_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OVERRUN_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class EthernetNetworkDiagnosticsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 55L;

    private static final long P_H_Y_RATE_ATTRIBUTE_ID = 0L;
    private static final long FULL_DUPLEX_ATTRIBUTE_ID = 1L;
    private static final long PACKET_RX_COUNT_ATTRIBUTE_ID = 2L;
    private static final long PACKET_TX_COUNT_ATTRIBUTE_ID = 3L;
    private static final long TX_ERR_COUNT_ATTRIBUTE_ID = 4L;
    private static final long COLLISION_COUNT_ATTRIBUTE_ID = 5L;
    private static final long OVERRUN_COUNT_ATTRIBUTE_ID = 6L;
    private static final long CARRIER_DETECT_ATTRIBUTE_ID = 7L;
    private static final long TIME_SINCE_RESET_ATTRIBUTE_ID = 8L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public EthernetNetworkDiagnosticsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void resetCounts(DefaultClusterCallback callback) {
      resetCounts(callback, 0);
    }

    public void resetCounts(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface PHYRateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface FullDuplexAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Boolean value);
    }

    public interface CarrierDetectAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Boolean value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readPHYRateAttribute(
        PHYRateAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, P_H_Y_RATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, P_H_Y_RATE_ATTRIBUTE_ID, true);
    }

    public void subscribePHYRateAttribute(
        PHYRateAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, P_H_Y_RATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, P_H_Y_RATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFullDuplexAttribute(
        FullDuplexAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FULL_DUPLEX_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FULL_DUPLEX_ATTRIBUTE_ID, true);
    }

    public void subscribeFullDuplexAttribute(
        FullDuplexAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FULL_DUPLEX_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FULL_DUPLEX_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPacketRxCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PACKET_RX_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PACKET_RX_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribePacketRxCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PACKET_RX_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PACKET_RX_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPacketTxCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PACKET_TX_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PACKET_TX_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribePacketTxCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PACKET_TX_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PACKET_TX_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTxErrCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_ERR_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_ERR_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeTxErrCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TX_ERR_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TX_ERR_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCollisionCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLLISION_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLLISION_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeCollisionCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLLISION_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLLISION_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOverrunCountAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OVERRUN_COUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OVERRUN_COUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeOverrunCountAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OVERRUN_COUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OVERRUN_COUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCarrierDetectAttribute(
        CarrierDetectAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CARRIER_DETECT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CARRIER_DETECT_ATTRIBUTE_ID, true);
    }

    public void subscribeCarrierDetectAttribute(
        CarrierDetectAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CARRIER_DETECT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CARRIER_DETECT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTimeSinceResetAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TIME_SINCE_RESET_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TIME_SINCE_RESET_ATTRIBUTE_ID, true);
    }

    public void subscribeTimeSinceResetAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TIME_SINCE_RESET_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TIME_SINCE_RESET_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class TimeSynchronizationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 56L;

    private static final long U_T_C_TIME_ATTRIBUTE_ID = 0L;
    private static final long GRANULARITY_ATTRIBUTE_ID = 1L;
    private static final long TIME_SOURCE_ATTRIBUTE_ID = 2L;
    private static final long TRUSTED_TIME_SOURCE_ATTRIBUTE_ID = 3L;
    private static final long DEFAULT_N_T_P_ATTRIBUTE_ID = 4L;
    private static final long TIME_ZONE_ATTRIBUTE_ID = 5L;
    private static final long D_S_T_OFFSET_ATTRIBUTE_ID = 6L;
    private static final long LOCAL_TIME_ATTRIBUTE_ID = 7L;
    private static final long TIME_ZONE_DATABASE_ATTRIBUTE_ID = 8L;
    private static final long N_T_P_SERVER_AVAILABLE_ATTRIBUTE_ID = 9L;
    private static final long TIME_ZONE_LIST_MAX_SIZE_ATTRIBUTE_ID = 10L;
    private static final long D_S_T_OFFSET_LIST_MAX_SIZE_ATTRIBUTE_ID = 11L;
    private static final long SUPPORTS_D_N_S_RESOLVE_ATTRIBUTE_ID = 12L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public TimeSynchronizationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void setUTCTime(DefaultClusterCallback callback, Long UTCTime, Integer granularity, Optional<Integer> timeSource) {
      setUTCTime(callback, UTCTime, granularity, timeSource, 0);
    }

    public void setUTCTime(DefaultClusterCallback callback, Long UTCTime, Integer granularity, Optional<Integer> timeSource, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long UTCTimeFieldID = 0L;
      BaseTLVType UTCTimetlvValue = new UIntType(UTCTime);
      elements.add(new StructElement(UTCTimeFieldID, UTCTimetlvValue));

      final long granularityFieldID = 1L;
      BaseTLVType granularitytlvValue = new UIntType(granularity);
      elements.add(new StructElement(granularityFieldID, granularitytlvValue));

      final long timeSourceFieldID = 2L;
      BaseTLVType timeSourcetlvValue = timeSource.<BaseTLVType>map((nonOptionaltimeSource) -> new UIntType(nonOptionaltimeSource)).orElse(new EmptyType());
      elements.add(new StructElement(timeSourceFieldID, timeSourcetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void setTrustedTimeSource(DefaultClusterCallback callback, @Nullable ChipStructs.TimeSynchronizationClusterFabricScopedTrustedTimeSourceStruct trustedTimeSource) {
      setTrustedTimeSource(callback, trustedTimeSource, 0);
    }

    public void setTrustedTimeSource(DefaultClusterCallback callback, @Nullable ChipStructs.TimeSynchronizationClusterFabricScopedTrustedTimeSourceStruct trustedTimeSource, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long trustedTimeSourceFieldID = 0L;
      BaseTLVType trustedTimeSourcetlvValue = trustedTimeSource != null ? trustedTimeSource.encodeTlv() : new NullType();
      elements.add(new StructElement(trustedTimeSourceFieldID, trustedTimeSourcetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void setTimeZone(SetTimeZoneResponseCallback callback, ArrayList<ChipStructs.TimeSynchronizationClusterTimeZoneStruct> timeZone) {
      setTimeZone(callback, timeZone, 0);
    }

    public void setTimeZone(SetTimeZoneResponseCallback callback, ArrayList<ChipStructs.TimeSynchronizationClusterTimeZoneStruct> timeZone, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long timeZoneFieldID = 0L;
      BaseTLVType timeZonetlvValue = ArrayType.generateArrayType(timeZone, (elementtimeZone) -> elementtimeZone.encodeTlv());
      elements.add(new StructElement(timeZoneFieldID, timeZonetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long DSTOffsetRequiredFieldID = 0L;
          Boolean DSTOffsetRequired = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == DSTOffsetRequiredFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                DSTOffsetRequired = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(DSTOffsetRequired);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void setDSTOffset(DefaultClusterCallback callback, ArrayList<ChipStructs.TimeSynchronizationClusterDSTOffsetStruct> DSTOffset) {
      setDSTOffset(callback, DSTOffset, 0);
    }

    public void setDSTOffset(DefaultClusterCallback callback, ArrayList<ChipStructs.TimeSynchronizationClusterDSTOffsetStruct> DSTOffset, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long DSTOffsetFieldID = 0L;
      BaseTLVType DSTOffsettlvValue = ArrayType.generateArrayType(DSTOffset, (elementDSTOffset) -> elementDSTOffset.encodeTlv());
      elements.add(new StructElement(DSTOffsetFieldID, DSTOffsettlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void setDefaultNTP(DefaultClusterCallback callback, @Nullable String defaultNTP) {
      setDefaultNTP(callback, defaultNTP, 0);
    }

    public void setDefaultNTP(DefaultClusterCallback callback, @Nullable String defaultNTP, int timedInvokeTimeoutMs) {
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long defaultNTPFieldID = 0L;
      BaseTLVType defaultNTPtlvValue = defaultNTP != null ? new StringType(defaultNTP) : new NullType();
      elements.add(new StructElement(defaultNTPFieldID, defaultNTPtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface SetTimeZoneResponseCallback extends BaseClusterCallback {
      void onSuccess(Boolean DSTOffsetRequired);
    }

    public interface UTCTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface TrustedTimeSourceAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.TimeSynchronizationClusterTrustedTimeSourceStruct value);
    }

    public interface DefaultNTPAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable String value);
    }

    public interface TimeZoneAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.TimeSynchronizationClusterTimeZoneStruct> value);
    }

    public interface DSTOffsetAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.TimeSynchronizationClusterDSTOffsetStruct> value);
    }

    public interface LocalTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readUTCTimeAttribute(
        UTCTimeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, U_T_C_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, U_T_C_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeUTCTimeAttribute(
        UTCTimeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, U_T_C_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, U_T_C_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGranularityAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GRANULARITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GRANULARITY_ATTRIBUTE_ID, true);
    }

    public void subscribeGranularityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GRANULARITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GRANULARITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTimeSourceAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TIME_SOURCE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TIME_SOURCE_ATTRIBUTE_ID, true);
    }

    public void subscribeTimeSourceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TIME_SOURCE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TIME_SOURCE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTrustedTimeSourceAttribute(
        TrustedTimeSourceAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TRUSTED_TIME_SOURCE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.TimeSynchronizationClusterTrustedTimeSourceStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TRUSTED_TIME_SOURCE_ATTRIBUTE_ID, true);
    }

    public void subscribeTrustedTimeSourceAttribute(
        TrustedTimeSourceAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TRUSTED_TIME_SOURCE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.TimeSynchronizationClusterTrustedTimeSourceStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TRUSTED_TIME_SOURCE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDefaultNTPAttribute(
        DefaultNTPAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_N_T_P_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_N_T_P_ATTRIBUTE_ID, true);
    }

    public void subscribeDefaultNTPAttribute(
        DefaultNTPAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_N_T_P_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_N_T_P_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTimeZoneAttribute(
        TimeZoneAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TIME_ZONE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.TimeSynchronizationClusterTimeZoneStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TIME_ZONE_ATTRIBUTE_ID, true);
    }

    public void subscribeTimeZoneAttribute(
        TimeZoneAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TIME_ZONE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.TimeSynchronizationClusterTimeZoneStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TIME_ZONE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDSTOffsetAttribute(
        DSTOffsetAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, D_S_T_OFFSET_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.TimeSynchronizationClusterDSTOffsetStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, D_S_T_OFFSET_ATTRIBUTE_ID, true);
    }

    public void subscribeDSTOffsetAttribute(
        DSTOffsetAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, D_S_T_OFFSET_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.TimeSynchronizationClusterDSTOffsetStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, D_S_T_OFFSET_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLocalTimeAttribute(
        LocalTimeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCAL_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCAL_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeLocalTimeAttribute(
        LocalTimeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCAL_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCAL_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTimeZoneDatabaseAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TIME_ZONE_DATABASE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TIME_ZONE_DATABASE_ATTRIBUTE_ID, true);
    }

    public void subscribeTimeZoneDatabaseAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TIME_ZONE_DATABASE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TIME_ZONE_DATABASE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNTPServerAvailableAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, N_T_P_SERVER_AVAILABLE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, N_T_P_SERVER_AVAILABLE_ATTRIBUTE_ID, true);
    }

    public void subscribeNTPServerAvailableAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, N_T_P_SERVER_AVAILABLE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, N_T_P_SERVER_AVAILABLE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTimeZoneListMaxSizeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TIME_ZONE_LIST_MAX_SIZE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TIME_ZONE_LIST_MAX_SIZE_ATTRIBUTE_ID, true);
    }

    public void subscribeTimeZoneListMaxSizeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TIME_ZONE_LIST_MAX_SIZE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TIME_ZONE_LIST_MAX_SIZE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDSTOffsetListMaxSizeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, D_S_T_OFFSET_LIST_MAX_SIZE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, D_S_T_OFFSET_LIST_MAX_SIZE_ATTRIBUTE_ID, true);
    }

    public void subscribeDSTOffsetListMaxSizeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, D_S_T_OFFSET_LIST_MAX_SIZE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, D_S_T_OFFSET_LIST_MAX_SIZE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSupportsDNSResolveAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTS_D_N_S_RESOLVE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTS_D_N_S_RESOLVE_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportsDNSResolveAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTS_D_N_S_RESOLVE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTS_D_N_S_RESOLVE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class BridgedDeviceBasicInformationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 57L;

    private static final long VENDOR_NAME_ATTRIBUTE_ID = 1L;
    private static final long VENDOR_I_D_ATTRIBUTE_ID = 2L;
    private static final long PRODUCT_NAME_ATTRIBUTE_ID = 3L;
    private static final long NODE_LABEL_ATTRIBUTE_ID = 5L;
    private static final long HARDWARE_VERSION_ATTRIBUTE_ID = 7L;
    private static final long HARDWARE_VERSION_STRING_ATTRIBUTE_ID = 8L;
    private static final long SOFTWARE_VERSION_ATTRIBUTE_ID = 9L;
    private static final long SOFTWARE_VERSION_STRING_ATTRIBUTE_ID = 10L;
    private static final long MANUFACTURING_DATE_ATTRIBUTE_ID = 11L;
    private static final long PART_NUMBER_ATTRIBUTE_ID = 12L;
    private static final long PRODUCT_U_R_L_ATTRIBUTE_ID = 13L;
    private static final long PRODUCT_LABEL_ATTRIBUTE_ID = 14L;
    private static final long SERIAL_NUMBER_ATTRIBUTE_ID = 15L;
    private static final long REACHABLE_ATTRIBUTE_ID = 17L;
    private static final long UNIQUE_I_D_ATTRIBUTE_ID = 18L;
    private static final long PRODUCT_APPEARANCE_ATTRIBUTE_ID = 20L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public BridgedDeviceBasicInformationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface ProductAppearanceAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.BridgedDeviceBasicInformationClusterProductAppearanceStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readVendorNameAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VENDOR_NAME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VENDOR_NAME_ATTRIBUTE_ID, true);
    }

    public void subscribeVendorNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VENDOR_NAME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VENDOR_NAME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readVendorIDAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VENDOR_I_D_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VENDOR_I_D_ATTRIBUTE_ID, true);
    }

    public void subscribeVendorIDAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VENDOR_I_D_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VENDOR_I_D_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readProductNameAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_NAME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_NAME_ATTRIBUTE_ID, true);
    }

    public void subscribeProductNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_NAME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_NAME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNodeLabelAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NODE_LABEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NODE_LABEL_ATTRIBUTE_ID, true);
    }

    public void writeNodeLabelAttribute(DefaultClusterCallback callback, String value) {
      writeNodeLabelAttribute(callback, value, 0);
    }

    public void writeNodeLabelAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), NODE_LABEL_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNodeLabelAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NODE_LABEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NODE_LABEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readHardwareVersionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HARDWARE_VERSION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HARDWARE_VERSION_ATTRIBUTE_ID, true);
    }

    public void subscribeHardwareVersionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HARDWARE_VERSION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HARDWARE_VERSION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readHardwareVersionStringAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HARDWARE_VERSION_STRING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HARDWARE_VERSION_STRING_ATTRIBUTE_ID, true);
    }

    public void subscribeHardwareVersionStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HARDWARE_VERSION_STRING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HARDWARE_VERSION_STRING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSoftwareVersionAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SOFTWARE_VERSION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SOFTWARE_VERSION_ATTRIBUTE_ID, true);
    }

    public void subscribeSoftwareVersionAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SOFTWARE_VERSION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SOFTWARE_VERSION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSoftwareVersionStringAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SOFTWARE_VERSION_STRING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SOFTWARE_VERSION_STRING_ATTRIBUTE_ID, true);
    }

    public void subscribeSoftwareVersionStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SOFTWARE_VERSION_STRING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SOFTWARE_VERSION_STRING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readManufacturingDateAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MANUFACTURING_DATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MANUFACTURING_DATE_ATTRIBUTE_ID, true);
    }

    public void subscribeManufacturingDateAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MANUFACTURING_DATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MANUFACTURING_DATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPartNumberAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PART_NUMBER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PART_NUMBER_ATTRIBUTE_ID, true);
    }

    public void subscribePartNumberAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PART_NUMBER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PART_NUMBER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readProductURLAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_U_R_L_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_U_R_L_ATTRIBUTE_ID, true);
    }

    public void subscribeProductURLAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_U_R_L_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_U_R_L_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readProductLabelAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_LABEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_LABEL_ATTRIBUTE_ID, true);
    }

    public void subscribeProductLabelAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_LABEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_LABEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSerialNumberAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SERIAL_NUMBER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SERIAL_NUMBER_ATTRIBUTE_ID, true);
    }

    public void subscribeSerialNumberAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SERIAL_NUMBER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SERIAL_NUMBER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readReachableAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACHABLE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACHABLE_ATTRIBUTE_ID, true);
    }

    public void subscribeReachableAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACHABLE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACHABLE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUniqueIDAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNIQUE_I_D_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNIQUE_I_D_ATTRIBUTE_ID, true);
    }

    public void subscribeUniqueIDAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNIQUE_I_D_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNIQUE_I_D_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readProductAppearanceAttribute(
        ProductAppearanceAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_APPEARANCE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.BridgedDeviceBasicInformationClusterProductAppearanceStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_APPEARANCE_ATTRIBUTE_ID, true);
    }

    public void subscribeProductAppearanceAttribute(
        ProductAppearanceAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_APPEARANCE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.BridgedDeviceBasicInformationClusterProductAppearanceStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_APPEARANCE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class SwitchCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 59L;

    private static final long NUMBER_OF_POSITIONS_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_POSITION_ATTRIBUTE_ID = 1L;
    private static final long MULTI_PRESS_MAX_ATTRIBUTE_ID = 2L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public SwitchCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readNumberOfPositionsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_POSITIONS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_POSITIONS_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfPositionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_POSITIONS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_POSITIONS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentPositionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_POSITION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_POSITION_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentPositionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_POSITION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_POSITION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMultiPressMaxAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MULTI_PRESS_MAX_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MULTI_PRESS_MAX_ATTRIBUTE_ID, true);
    }

    public void subscribeMultiPressMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MULTI_PRESS_MAX_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MULTI_PRESS_MAX_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class AdministratorCommissioningCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 60L;

    private static final long WINDOW_STATUS_ATTRIBUTE_ID = 0L;
    private static final long ADMIN_FABRIC_INDEX_ATTRIBUTE_ID = 1L;
    private static final long ADMIN_VENDOR_ID_ATTRIBUTE_ID = 2L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public AdministratorCommissioningCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }


    public void openCommissioningWindow(DefaultClusterCallback callback, Integer commissioningTimeout, byte[] PAKEPasscodeVerifier, Integer discriminator, Long iterations, byte[] salt, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long commissioningTimeoutFieldID = 0L;
      BaseTLVType commissioningTimeouttlvValue = new UIntType(commissioningTimeout);
      elements.add(new StructElement(commissioningTimeoutFieldID, commissioningTimeouttlvValue));

      final long PAKEPasscodeVerifierFieldID = 1L;
      BaseTLVType PAKEPasscodeVerifiertlvValue = new ByteArrayType(PAKEPasscodeVerifier);
      elements.add(new StructElement(PAKEPasscodeVerifierFieldID, PAKEPasscodeVerifiertlvValue));

      final long discriminatorFieldID = 2L;
      BaseTLVType discriminatortlvValue = new UIntType(discriminator);
      elements.add(new StructElement(discriminatorFieldID, discriminatortlvValue));

      final long iterationsFieldID = 3L;
      BaseTLVType iterationstlvValue = new UIntType(iterations);
      elements.add(new StructElement(iterationsFieldID, iterationstlvValue));

      final long saltFieldID = 4L;
      BaseTLVType salttlvValue = new ByteArrayType(salt);
      elements.add(new StructElement(saltFieldID, salttlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void openBasicCommissioningWindow(DefaultClusterCallback callback, Integer commissioningTimeout, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long commissioningTimeoutFieldID = 0L;
      BaseTLVType commissioningTimeouttlvValue = new UIntType(commissioningTimeout);
      elements.add(new StructElement(commissioningTimeoutFieldID, commissioningTimeouttlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void revokeCommissioning(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface AdminFabricIndexAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface AdminVendorIdAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readWindowStatusAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WINDOW_STATUS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WINDOW_STATUS_ATTRIBUTE_ID, true);
    }

    public void subscribeWindowStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WINDOW_STATUS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WINDOW_STATUS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAdminFabricIndexAttribute(
        AdminFabricIndexAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ADMIN_FABRIC_INDEX_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ADMIN_FABRIC_INDEX_ATTRIBUTE_ID, true);
    }

    public void subscribeAdminFabricIndexAttribute(
        AdminFabricIndexAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ADMIN_FABRIC_INDEX_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ADMIN_FABRIC_INDEX_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAdminVendorIdAttribute(
        AdminVendorIdAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ADMIN_VENDOR_ID_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ADMIN_VENDOR_ID_ATTRIBUTE_ID, true);
    }

    public void subscribeAdminVendorIdAttribute(
        AdminVendorIdAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ADMIN_VENDOR_ID_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ADMIN_VENDOR_ID_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class OperationalCredentialsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 62L;

    private static final long N_O_CS_ATTRIBUTE_ID = 0L;
    private static final long FABRICS_ATTRIBUTE_ID = 1L;
    private static final long SUPPORTED_FABRICS_ATTRIBUTE_ID = 2L;
    private static final long COMMISSIONED_FABRICS_ATTRIBUTE_ID = 3L;
    private static final long TRUSTED_ROOT_CERTIFICATES_ATTRIBUTE_ID = 4L;
    private static final long CURRENT_FABRIC_INDEX_ATTRIBUTE_ID = 5L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public OperationalCredentialsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void attestationRequest(AttestationResponseCallback callback, byte[] attestationNonce) {
      attestationRequest(callback, attestationNonce, 0);
    }

    public void attestationRequest(AttestationResponseCallback callback, byte[] attestationNonce, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long attestationNonceFieldID = 0L;
      BaseTLVType attestationNoncetlvValue = new ByteArrayType(attestationNonce);
      elements.add(new StructElement(attestationNonceFieldID, attestationNoncetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long attestationElementsFieldID = 0L;
          byte[] attestationElements = null;
          final long attestationSignatureFieldID = 1L;
          byte[] attestationSignature = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == attestationElementsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                attestationElements = castingValue.value(byte[].class);
              }
            } else if (element.contextTagNum() == attestationSignatureFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                attestationSignature = castingValue.value(byte[].class);
              }
            }
          }
          callback.onSuccess(attestationElements, attestationSignature);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void certificateChainRequest(CertificateChainResponseCallback callback, Integer certificateType) {
      certificateChainRequest(callback, certificateType, 0);
    }

    public void certificateChainRequest(CertificateChainResponseCallback callback, Integer certificateType, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long certificateTypeFieldID = 0L;
      BaseTLVType certificateTypetlvValue = new UIntType(certificateType);
      elements.add(new StructElement(certificateTypeFieldID, certificateTypetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long certificateFieldID = 0L;
          byte[] certificate = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == certificateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                certificate = castingValue.value(byte[].class);
              }
            }
          }
          callback.onSuccess(certificate);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void CSRRequest(CSRResponseCallback callback, byte[] CSRNonce, Optional<Boolean> isForUpdateNOC) {
      CSRRequest(callback, CSRNonce, isForUpdateNOC, 0);
    }

    public void CSRRequest(CSRResponseCallback callback, byte[] CSRNonce, Optional<Boolean> isForUpdateNOC, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long CSRNonceFieldID = 0L;
      BaseTLVType CSRNoncetlvValue = new ByteArrayType(CSRNonce);
      elements.add(new StructElement(CSRNonceFieldID, CSRNoncetlvValue));

      final long isForUpdateNOCFieldID = 1L;
      BaseTLVType isForUpdateNOCtlvValue = isForUpdateNOC.<BaseTLVType>map((nonOptionalisForUpdateNOC) -> new BooleanType(nonOptionalisForUpdateNOC)).orElse(new EmptyType());
      elements.add(new StructElement(isForUpdateNOCFieldID, isForUpdateNOCtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long NOCSRElementsFieldID = 0L;
          byte[] NOCSRElements = null;
          final long attestationSignatureFieldID = 1L;
          byte[] attestationSignature = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == NOCSRElementsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                NOCSRElements = castingValue.value(byte[].class);
              }
            } else if (element.contextTagNum() == attestationSignatureFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                attestationSignature = castingValue.value(byte[].class);
              }
            }
          }
          callback.onSuccess(NOCSRElements, attestationSignature);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void addNOC(NOCResponseCallback callback, byte[] NOCValue, Optional<byte[]> ICACValue, byte[] IPKValue, Long caseAdminSubject, Integer adminVendorId) {
      addNOC(callback, NOCValue, ICACValue, IPKValue, caseAdminSubject, adminVendorId, 0);
    }

    public void addNOC(NOCResponseCallback callback, byte[] NOCValue, Optional<byte[]> ICACValue, byte[] IPKValue, Long caseAdminSubject, Integer adminVendorId, int timedInvokeTimeoutMs) {
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long NOCValueFieldID = 0L;
      BaseTLVType NOCValuetlvValue = new ByteArrayType(NOCValue);
      elements.add(new StructElement(NOCValueFieldID, NOCValuetlvValue));

      final long ICACValueFieldID = 1L;
      BaseTLVType ICACValuetlvValue = ICACValue.<BaseTLVType>map((nonOptionalICACValue) -> new ByteArrayType(nonOptionalICACValue)).orElse(new EmptyType());
      elements.add(new StructElement(ICACValueFieldID, ICACValuetlvValue));

      final long IPKValueFieldID = 2L;
      BaseTLVType IPKValuetlvValue = new ByteArrayType(IPKValue);
      elements.add(new StructElement(IPKValueFieldID, IPKValuetlvValue));

      final long caseAdminSubjectFieldID = 3L;
      BaseTLVType caseAdminSubjecttlvValue = new UIntType(caseAdminSubject);
      elements.add(new StructElement(caseAdminSubjectFieldID, caseAdminSubjecttlvValue));

      final long adminVendorIdFieldID = 4L;
      BaseTLVType adminVendorIdtlvValue = new UIntType(adminVendorId);
      elements.add(new StructElement(adminVendorIdFieldID, adminVendorIdtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusCodeFieldID = 0L;
          Integer statusCode = null;
          final long fabricIndexFieldID = 1L;
          Optional<Integer> fabricIndex = Optional.empty();
          final long debugTextFieldID = 2L;
          Optional<String> debugText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusCodeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                statusCode = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == fabricIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                fabricIndex = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(statusCode, fabricIndex, debugText);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void updateNOC(NOCResponseCallback callback, byte[] NOCValue, Optional<byte[]> ICACValue) {
      updateNOC(callback, NOCValue, ICACValue, 0);
    }

    public void updateNOC(NOCResponseCallback callback, byte[] NOCValue, Optional<byte[]> ICACValue, int timedInvokeTimeoutMs) {
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long NOCValueFieldID = 0L;
      BaseTLVType NOCValuetlvValue = new ByteArrayType(NOCValue);
      elements.add(new StructElement(NOCValueFieldID, NOCValuetlvValue));

      final long ICACValueFieldID = 1L;
      BaseTLVType ICACValuetlvValue = ICACValue.<BaseTLVType>map((nonOptionalICACValue) -> new ByteArrayType(nonOptionalICACValue)).orElse(new EmptyType());
      elements.add(new StructElement(ICACValueFieldID, ICACValuetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusCodeFieldID = 0L;
          Integer statusCode = null;
          final long fabricIndexFieldID = 1L;
          Optional<Integer> fabricIndex = Optional.empty();
          final long debugTextFieldID = 2L;
          Optional<String> debugText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusCodeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                statusCode = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == fabricIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                fabricIndex = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(statusCode, fabricIndex, debugText);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void updateFabricLabel(NOCResponseCallback callback, String label) {
      updateFabricLabel(callback, label, 0);
    }

    public void updateFabricLabel(NOCResponseCallback callback, String label, int timedInvokeTimeoutMs) {
      final long commandId = 9L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long labelFieldID = 0L;
      BaseTLVType labeltlvValue = new StringType(label);
      elements.add(new StructElement(labelFieldID, labeltlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusCodeFieldID = 0L;
          Integer statusCode = null;
          final long fabricIndexFieldID = 1L;
          Optional<Integer> fabricIndex = Optional.empty();
          final long debugTextFieldID = 2L;
          Optional<String> debugText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusCodeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                statusCode = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == fabricIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                fabricIndex = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(statusCode, fabricIndex, debugText);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void removeFabric(NOCResponseCallback callback, Integer fabricIndex) {
      removeFabric(callback, fabricIndex, 0);
    }

    public void removeFabric(NOCResponseCallback callback, Integer fabricIndex, int timedInvokeTimeoutMs) {
      final long commandId = 10L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long fabricIndexFieldID = 0L;
      BaseTLVType fabricIndextlvValue = new UIntType(fabricIndex);
      elements.add(new StructElement(fabricIndexFieldID, fabricIndextlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusCodeFieldID = 0L;
          Integer statusCode = null;
          final long fabricIndexFieldID = 1L;
          Optional<Integer> fabricIndex = Optional.empty();
          final long debugTextFieldID = 2L;
          Optional<String> debugText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusCodeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                statusCode = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == fabricIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                fabricIndex = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == debugTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                debugText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(statusCode, fabricIndex, debugText);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void addTrustedRootCertificate(DefaultClusterCallback callback, byte[] rootCACertificate) {
      addTrustedRootCertificate(callback, rootCACertificate, 0);
    }

    public void addTrustedRootCertificate(DefaultClusterCallback callback, byte[] rootCACertificate, int timedInvokeTimeoutMs) {
      final long commandId = 11L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long rootCACertificateFieldID = 0L;
      BaseTLVType rootCACertificatetlvValue = new ByteArrayType(rootCACertificate);
      elements.add(new StructElement(rootCACertificateFieldID, rootCACertificatetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface AttestationResponseCallback extends BaseClusterCallback {
      void onSuccess(byte[] attestationElements, byte[] attestationSignature);
    }

    public interface CertificateChainResponseCallback extends BaseClusterCallback {
      void onSuccess(byte[] certificate);
    }

    public interface CSRResponseCallback extends BaseClusterCallback {
      void onSuccess(byte[] NOCSRElements, byte[] attestationSignature);
    }

    public interface NOCResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer statusCode, Optional<Integer> fabricIndex, Optional<String> debugText);
    }

    public interface NOCsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.OperationalCredentialsClusterNOCStruct> value);
    }

    public interface FabricsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.OperationalCredentialsClusterFabricDescriptorStruct> value);
    }

    public interface TrustedRootCertificatesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<byte[]> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readNOCsAttribute(
        NOCsAttributeCallback callback) {
      readNOCsAttributeWithFabricFilter(callback, true);
    }

    public void readNOCsAttributeWithFabricFilter(
        NOCsAttributeCallback callback, boolean isFabricFiltered) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, N_O_CS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OperationalCredentialsClusterNOCStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, N_O_CS_ATTRIBUTE_ID, isFabricFiltered);
    }

    public void subscribeNOCsAttribute(
        NOCsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, N_O_CS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OperationalCredentialsClusterNOCStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, N_O_CS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFabricsAttribute(
        FabricsAttributeCallback callback) {
      readFabricsAttributeWithFabricFilter(callback, true);
    }

    public void readFabricsAttributeWithFabricFilter(
        FabricsAttributeCallback callback, boolean isFabricFiltered) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FABRICS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OperationalCredentialsClusterFabricDescriptorStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FABRICS_ATTRIBUTE_ID, isFabricFiltered);
    }

    public void subscribeFabricsAttribute(
        FabricsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FABRICS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OperationalCredentialsClusterFabricDescriptorStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FABRICS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSupportedFabricsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_FABRICS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_FABRICS_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedFabricsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_FABRICS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_FABRICS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCommissionedFabricsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COMMISSIONED_FABRICS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COMMISSIONED_FABRICS_ATTRIBUTE_ID, true);
    }

    public void subscribeCommissionedFabricsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COMMISSIONED_FABRICS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COMMISSIONED_FABRICS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTrustedRootCertificatesAttribute(
        TrustedRootCertificatesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TRUSTED_ROOT_CERTIFICATES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TRUSTED_ROOT_CERTIFICATES_ATTRIBUTE_ID, true);
    }

    public void subscribeTrustedRootCertificatesAttribute(
        TrustedRootCertificatesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TRUSTED_ROOT_CERTIFICATES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TRUSTED_ROOT_CERTIFICATES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentFabricIndexAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_FABRIC_INDEX_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_FABRIC_INDEX_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentFabricIndexAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_FABRIC_INDEX_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_FABRIC_INDEX_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class GroupKeyManagementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 63L;

    private static final long GROUP_KEY_MAP_ATTRIBUTE_ID = 0L;
    private static final long GROUP_TABLE_ATTRIBUTE_ID = 1L;
    private static final long MAX_GROUPS_PER_FABRIC_ATTRIBUTE_ID = 2L;
    private static final long MAX_GROUP_KEYS_PER_FABRIC_ATTRIBUTE_ID = 3L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public GroupKeyManagementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void keySetWrite(DefaultClusterCallback callback, ChipStructs.GroupKeyManagementClusterGroupKeySetStruct groupKeySet) {
      keySetWrite(callback, groupKeySet, 0);
    }

    public void keySetWrite(DefaultClusterCallback callback, ChipStructs.GroupKeyManagementClusterGroupKeySetStruct groupKeySet, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupKeySetFieldID = 0L;
      BaseTLVType groupKeySettlvValue = groupKeySet.encodeTlv();
      elements.add(new StructElement(groupKeySetFieldID, groupKeySettlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void keySetRead(KeySetReadResponseCallback callback, Integer groupKeySetID) {
      keySetRead(callback, groupKeySetID, 0);
    }

    public void keySetRead(KeySetReadResponseCallback callback, Integer groupKeySetID, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupKeySetIDFieldID = 0L;
      BaseTLVType groupKeySetIDtlvValue = new UIntType(groupKeySetID);
      elements.add(new StructElement(groupKeySetIDFieldID, groupKeySetIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long groupKeySetFieldID = 0L;
          ChipStructs.GroupKeyManagementClusterGroupKeySetStruct groupKeySet = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == groupKeySetFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                groupKeySet = ChipStructs.GroupKeyManagementClusterGroupKeySetStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(groupKeySet);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void keySetRemove(DefaultClusterCallback callback, Integer groupKeySetID) {
      keySetRemove(callback, groupKeySetID, 0);
    }

    public void keySetRemove(DefaultClusterCallback callback, Integer groupKeySetID, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupKeySetIDFieldID = 0L;
      BaseTLVType groupKeySetIDtlvValue = new UIntType(groupKeySetID);
      elements.add(new StructElement(groupKeySetIDFieldID, groupKeySetIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void keySetReadAllIndices(KeySetReadAllIndicesResponseCallback callback) {
      keySetReadAllIndices(callback, 0);
    }

    public void keySetReadAllIndices(KeySetReadAllIndicesResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long groupKeySetIDsFieldID = 0L;
          ArrayList<Integer> groupKeySetIDs = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == groupKeySetIDsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                groupKeySetIDs = castingValue.map((elementcastingValue) -> elementcastingValue.value(Integer.class));
              }
            }
          }
          callback.onSuccess(groupKeySetIDs);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface KeySetReadResponseCallback extends BaseClusterCallback {
      void onSuccess(ChipStructs.GroupKeyManagementClusterGroupKeySetStruct groupKeySet);
    }

    public interface KeySetReadAllIndicesResponseCallback extends BaseClusterCallback {
      void onSuccess(ArrayList<Integer> groupKeySetIDs);
    }

    public interface GroupKeyMapAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.GroupKeyManagementClusterGroupKeyMapStruct> value);
    }

    public interface GroupTableAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.GroupKeyManagementClusterGroupInfoMapStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGroupKeyMapAttribute(
        GroupKeyMapAttributeCallback callback) {
      readGroupKeyMapAttributeWithFabricFilter(callback, true);
    }

    public void readGroupKeyMapAttributeWithFabricFilter(
        GroupKeyMapAttributeCallback callback, boolean isFabricFiltered) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GROUP_KEY_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.GroupKeyManagementClusterGroupKeyMapStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GROUP_KEY_MAP_ATTRIBUTE_ID, isFabricFiltered);
    }

    public void writeGroupKeyMapAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.GroupKeyManagementClusterGroupKeyMapStruct> value) {
      writeGroupKeyMapAttribute(callback, value, 0);
    }

    public void writeGroupKeyMapAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.GroupKeyManagementClusterGroupKeyMapStruct> value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), GROUP_KEY_MAP_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeGroupKeyMapAttribute(
        GroupKeyMapAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GROUP_KEY_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.GroupKeyManagementClusterGroupKeyMapStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GROUP_KEY_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGroupTableAttribute(
        GroupTableAttributeCallback callback) {
      readGroupTableAttributeWithFabricFilter(callback, true);
    }

    public void readGroupTableAttributeWithFabricFilter(
        GroupTableAttributeCallback callback, boolean isFabricFiltered) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GROUP_TABLE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.GroupKeyManagementClusterGroupInfoMapStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GROUP_TABLE_ATTRIBUTE_ID, isFabricFiltered);
    }

    public void subscribeGroupTableAttribute(
        GroupTableAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GROUP_TABLE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.GroupKeyManagementClusterGroupInfoMapStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GROUP_TABLE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxGroupsPerFabricAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_GROUPS_PER_FABRIC_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_GROUPS_PER_FABRIC_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxGroupsPerFabricAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_GROUPS_PER_FABRIC_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_GROUPS_PER_FABRIC_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxGroupKeysPerFabricAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_GROUP_KEYS_PER_FABRIC_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_GROUP_KEYS_PER_FABRIC_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxGroupKeysPerFabricAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_GROUP_KEYS_PER_FABRIC_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_GROUP_KEYS_PER_FABRIC_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class FixedLabelCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 64L;

    private static final long LABEL_LIST_ATTRIBUTE_ID = 0L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public FixedLabelCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface LabelListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.FixedLabelClusterLabelStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readLabelListAttribute(
        LabelListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LABEL_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.FixedLabelClusterLabelStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LABEL_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeLabelListAttribute(
        LabelListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LABEL_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.FixedLabelClusterLabelStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LABEL_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class UserLabelCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 65L;

    private static final long LABEL_LIST_ATTRIBUTE_ID = 0L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public UserLabelCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface LabelListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.UserLabelClusterLabelStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readLabelListAttribute(
        LabelListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LABEL_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UserLabelClusterLabelStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LABEL_LIST_ATTRIBUTE_ID, true);
    }

    public void writeLabelListAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UserLabelClusterLabelStruct> value) {
      writeLabelListAttribute(callback, value, 0);
    }

    public void writeLabelListAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UserLabelClusterLabelStruct> value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), LABEL_LIST_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLabelListAttribute(
        LabelListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LABEL_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UserLabelClusterLabelStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LABEL_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ProxyConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 66L;

    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ProxyConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ProxyDiscoveryCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 67L;

    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ProxyDiscoveryCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ProxyValidCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 68L;

    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ProxyValidCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class BooleanStateCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 69L;

    private static final long STATE_VALUE_ATTRIBUTE_ID = 0L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public BooleanStateCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readStateValueAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STATE_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STATE_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeStateValueAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STATE_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STATE_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class IcdManagementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 70L;

    private static final long IDLE_MODE_DURATION_ATTRIBUTE_ID = 0L;
    private static final long ACTIVE_MODE_DURATION_ATTRIBUTE_ID = 1L;
    private static final long ACTIVE_MODE_THRESHOLD_ATTRIBUTE_ID = 2L;
    private static final long REGISTERED_CLIENTS_ATTRIBUTE_ID = 3L;
    private static final long I_C_D_COUNTER_ATTRIBUTE_ID = 4L;
    private static final long CLIENTS_SUPPORTED_PER_FABRIC_ATTRIBUTE_ID = 5L;
    private static final long USER_ACTIVE_MODE_TRIGGER_HINT_ATTRIBUTE_ID = 6L;
    private static final long USER_ACTIVE_MODE_TRIGGER_INSTRUCTION_ATTRIBUTE_ID = 7L;
    private static final long OPERATING_MODE_ATTRIBUTE_ID = 8L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public IcdManagementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void registerClient(RegisterClientResponseCallback callback, Long checkInNodeID, Long monitoredSubject, byte[] key, Optional<byte[]> verificationKey) {
      registerClient(callback, checkInNodeID, monitoredSubject, key, verificationKey, 0);
    }

    public void registerClient(RegisterClientResponseCallback callback, Long checkInNodeID, Long monitoredSubject, byte[] key, Optional<byte[]> verificationKey, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long checkInNodeIDFieldID = 0L;
      BaseTLVType checkInNodeIDtlvValue = new UIntType(checkInNodeID);
      elements.add(new StructElement(checkInNodeIDFieldID, checkInNodeIDtlvValue));

      final long monitoredSubjectFieldID = 1L;
      BaseTLVType monitoredSubjecttlvValue = new UIntType(monitoredSubject);
      elements.add(new StructElement(monitoredSubjectFieldID, monitoredSubjecttlvValue));

      final long keyFieldID = 2L;
      BaseTLVType keytlvValue = new ByteArrayType(key);
      elements.add(new StructElement(keyFieldID, keytlvValue));

      final long verificationKeyFieldID = 3L;
      BaseTLVType verificationKeytlvValue = verificationKey.<BaseTLVType>map((nonOptionalverificationKey) -> new ByteArrayType(nonOptionalverificationKey)).orElse(new EmptyType());
      elements.add(new StructElement(verificationKeyFieldID, verificationKeytlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long ICDCounterFieldID = 0L;
          Long ICDCounter = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == ICDCounterFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                ICDCounter = castingValue.value(Long.class);
              }
            }
          }
          callback.onSuccess(ICDCounter);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void unregisterClient(DefaultClusterCallback callback, Long checkInNodeID, Optional<byte[]> verificationKey) {
      unregisterClient(callback, checkInNodeID, verificationKey, 0);
    }

    public void unregisterClient(DefaultClusterCallback callback, Long checkInNodeID, Optional<byte[]> verificationKey, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long checkInNodeIDFieldID = 0L;
      BaseTLVType checkInNodeIDtlvValue = new UIntType(checkInNodeID);
      elements.add(new StructElement(checkInNodeIDFieldID, checkInNodeIDtlvValue));

      final long verificationKeyFieldID = 1L;
      BaseTLVType verificationKeytlvValue = verificationKey.<BaseTLVType>map((nonOptionalverificationKey) -> new ByteArrayType(nonOptionalverificationKey)).orElse(new EmptyType());
      elements.add(new StructElement(verificationKeyFieldID, verificationKeytlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void stayActiveRequest(StayActiveResponseCallback callback, Long stayActiveDuration) {
      stayActiveRequest(callback, stayActiveDuration, 0);
    }

    public void stayActiveRequest(StayActiveResponseCallback callback, Long stayActiveDuration, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long stayActiveDurationFieldID = 0L;
      BaseTLVType stayActiveDurationtlvValue = new UIntType(stayActiveDuration);
      elements.add(new StructElement(stayActiveDurationFieldID, stayActiveDurationtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long promisedActiveDurationFieldID = 0L;
          Long promisedActiveDuration = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == promisedActiveDurationFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                promisedActiveDuration = castingValue.value(Long.class);
              }
            }
          }
          callback.onSuccess(promisedActiveDuration);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface RegisterClientResponseCallback extends BaseClusterCallback {
      void onSuccess(Long ICDCounter);
    }

    public interface StayActiveResponseCallback extends BaseClusterCallback {
      void onSuccess(Long promisedActiveDuration);
    }

    public interface RegisteredClientsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.IcdManagementClusterMonitoringRegistrationStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readIdleModeDurationAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, IDLE_MODE_DURATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, IDLE_MODE_DURATION_ATTRIBUTE_ID, true);
    }

    public void subscribeIdleModeDurationAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, IDLE_MODE_DURATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, IDLE_MODE_DURATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveModeDurationAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_MODE_DURATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_MODE_DURATION_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveModeDurationAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_MODE_DURATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_MODE_DURATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveModeThresholdAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_MODE_THRESHOLD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_MODE_THRESHOLD_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveModeThresholdAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_MODE_THRESHOLD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_MODE_THRESHOLD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRegisteredClientsAttribute(
        RegisteredClientsAttributeCallback callback) {
      readRegisteredClientsAttributeWithFabricFilter(callback, true);
    }

    public void readRegisteredClientsAttributeWithFabricFilter(
        RegisteredClientsAttributeCallback callback, boolean isFabricFiltered) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REGISTERED_CLIENTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.IcdManagementClusterMonitoringRegistrationStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REGISTERED_CLIENTS_ATTRIBUTE_ID, isFabricFiltered);
    }

    public void subscribeRegisteredClientsAttribute(
        RegisteredClientsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REGISTERED_CLIENTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.IcdManagementClusterMonitoringRegistrationStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REGISTERED_CLIENTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readICDCounterAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, I_C_D_COUNTER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, I_C_D_COUNTER_ATTRIBUTE_ID, true);
    }

    public void subscribeICDCounterAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, I_C_D_COUNTER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, I_C_D_COUNTER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClientsSupportedPerFabricAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLIENTS_SUPPORTED_PER_FABRIC_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLIENTS_SUPPORTED_PER_FABRIC_ATTRIBUTE_ID, true);
    }

    public void subscribeClientsSupportedPerFabricAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLIENTS_SUPPORTED_PER_FABRIC_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLIENTS_SUPPORTED_PER_FABRIC_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUserActiveModeTriggerHintAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, USER_ACTIVE_MODE_TRIGGER_HINT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, USER_ACTIVE_MODE_TRIGGER_HINT_ATTRIBUTE_ID, true);
    }

    public void subscribeUserActiveModeTriggerHintAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, USER_ACTIVE_MODE_TRIGGER_HINT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, USER_ACTIVE_MODE_TRIGGER_HINT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUserActiveModeTriggerInstructionAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, USER_ACTIVE_MODE_TRIGGER_INSTRUCTION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, USER_ACTIVE_MODE_TRIGGER_INSTRUCTION_ATTRIBUTE_ID, true);
    }

    public void subscribeUserActiveModeTriggerInstructionAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, USER_ACTIVE_MODE_TRIGGER_INSTRUCTION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, USER_ACTIVE_MODE_TRIGGER_INSTRUCTION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOperatingModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATING_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATING_MODE_ATTRIBUTE_ID, true);
    }

    public void subscribeOperatingModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATING_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATING_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class TimerCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 71L;

    private static final long SET_TIME_ATTRIBUTE_ID = 0L;
    private static final long TIME_REMAINING_ATTRIBUTE_ID = 1L;
    private static final long TIMER_STATE_ATTRIBUTE_ID = 2L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public TimerCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void setTimer(DefaultClusterCallback callback, Long newTime) {
      setTimer(callback, newTime, 0);
    }

    public void setTimer(DefaultClusterCallback callback, Long newTime, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newTimeFieldID = 0L;
      BaseTLVType newTimetlvValue = new UIntType(newTime);
      elements.add(new StructElement(newTimeFieldID, newTimetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void resetTimer(DefaultClusterCallback callback) {
      resetTimer(callback, 0);
    }

    public void resetTimer(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void addTime(DefaultClusterCallback callback, Long additionalTime) {
      addTime(callback, additionalTime, 0);
    }

    public void addTime(DefaultClusterCallback callback, Long additionalTime, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long additionalTimeFieldID = 0L;
      BaseTLVType additionalTimetlvValue = new UIntType(additionalTime);
      elements.add(new StructElement(additionalTimeFieldID, additionalTimetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void reduceTime(DefaultClusterCallback callback, Long timeReduction) {
      reduceTime(callback, timeReduction, 0);
    }

    public void reduceTime(DefaultClusterCallback callback, Long timeReduction, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long timeReductionFieldID = 0L;
      BaseTLVType timeReductiontlvValue = new UIntType(timeReduction);
      elements.add(new StructElement(timeReductionFieldID, timeReductiontlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSetTimeAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SET_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SET_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeSetTimeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SET_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SET_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTimeRemainingAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TIME_REMAINING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TIME_REMAINING_ATTRIBUTE_ID, true);
    }

    public void subscribeTimeRemainingAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TIME_REMAINING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TIME_REMAINING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTimerStateAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TIMER_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TIMER_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeTimerStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TIMER_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TIMER_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class OvenCavityOperationalStateCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 72L;

    private static final long PHASE_LIST_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_PHASE_ATTRIBUTE_ID = 1L;
    private static final long COUNTDOWN_TIME_ATTRIBUTE_ID = 2L;
    private static final long OPERATIONAL_STATE_LIST_ATTRIBUTE_ID = 3L;
    private static final long OPERATIONAL_STATE_ATTRIBUTE_ID = 4L;
    private static final long OPERATIONAL_ERROR_ATTRIBUTE_ID = 5L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public OvenCavityOperationalStateCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void pause(OperationalCommandResponseCallback callback) {
      pause(callback, 0);
    }

    public void pause(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.OvenCavityOperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.OvenCavityOperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void stop(OperationalCommandResponseCallback callback) {
      stop(callback, 0);
    }

    public void stop(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.OvenCavityOperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.OvenCavityOperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void start(OperationalCommandResponseCallback callback) {
      start(callback, 0);
    }

    public void start(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.OvenCavityOperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.OvenCavityOperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void resume(OperationalCommandResponseCallback callback) {
      resume(callback, 0);
    }

    public void resume(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.OvenCavityOperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.OvenCavityOperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface OperationalCommandResponseCallback extends BaseClusterCallback {
      void onSuccess(ChipStructs.OvenCavityOperationalStateClusterErrorStateStruct commandResponseState);
    }

    public interface PhaseListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable List<String> value);
    }

    public interface CurrentPhaseAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CountdownTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface OperationalStateListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.OvenCavityOperationalStateClusterOperationalStateStruct> value);
    }

    public interface OperationalErrorAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.OvenCavityOperationalStateClusterErrorStateStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readPhaseListAttribute(
        PhaseListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHASE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHASE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribePhaseListAttribute(
        PhaseListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHASE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHASE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentPhaseAttribute(
        CurrentPhaseAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_PHASE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_PHASE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentPhaseAttribute(
        CurrentPhaseAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_PHASE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_PHASE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCountdownTimeAttribute(
        CountdownTimeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COUNTDOWN_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COUNTDOWN_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeCountdownTimeAttribute(
        CountdownTimeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COUNTDOWN_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COUNTDOWN_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOperationalStateListAttribute(
        OperationalStateListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_STATE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OvenCavityOperationalStateClusterOperationalStateStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_STATE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeOperationalStateListAttribute(
        OperationalStateListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_STATE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OvenCavityOperationalStateClusterOperationalStateStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_STATE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOperationalStateAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeOperationalStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOperationalErrorAttribute(
        OperationalErrorAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_ERROR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.OvenCavityOperationalStateClusterErrorStateStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_ERROR_ATTRIBUTE_ID, true);
    }

    public void subscribeOperationalErrorAttribute(
        OperationalErrorAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_ERROR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.OvenCavityOperationalStateClusterErrorStateStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_ERROR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class OvenModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 73L;

    private static final long SUPPORTED_MODES_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_MODE_ATTRIBUTE_ID = 1L;
    private static final long START_UP_MODE_ATTRIBUTE_ID = 2L;
    private static final long ON_MODE_ATTRIBUTE_ID = 3L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public OvenModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(callback, newMode, 0);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newModeFieldID = 0L;
      BaseTLVType newModetlvValue = new UIntType(newMode);
      elements.add(new StructElement(newModeFieldID, newModetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long statusTextFieldID = 1L;
          Optional<String> statusText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                statusText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, statusText);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface ChangeToModeResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> statusText);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.OvenModeClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OvenModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OvenModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_MODE_ATTRIBUTE_ID, true);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpModeAttribute(callback, value, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), START_UP_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_MODE_ATTRIBUTE_ID, true);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnModeAttribute(callback, value, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), ON_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class LaundryDryerControlsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 74L;

    private static final long SUPPORTED_DRYNESS_LEVELS_ATTRIBUTE_ID = 0L;
    private static final long SELECTED_DRYNESS_LEVEL_ATTRIBUTE_ID = 1L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public LaundryDryerControlsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface SupportedDrynessLevelsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface SelectedDrynessLevelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedDrynessLevelsAttribute(
        SupportedDrynessLevelsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_DRYNESS_LEVELS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_DRYNESS_LEVELS_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedDrynessLevelsAttribute(
        SupportedDrynessLevelsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_DRYNESS_LEVELS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_DRYNESS_LEVELS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSelectedDrynessLevelAttribute(
        SelectedDrynessLevelAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SELECTED_DRYNESS_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SELECTED_DRYNESS_LEVEL_ATTRIBUTE_ID, true);
    }

    public void writeSelectedDrynessLevelAttribute(DefaultClusterCallback callback, Integer value) {
      writeSelectedDrynessLevelAttribute(callback, value, 0);
    }

    public void writeSelectedDrynessLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), SELECTED_DRYNESS_LEVEL_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeSelectedDrynessLevelAttribute(
        SelectedDrynessLevelAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SELECTED_DRYNESS_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SELECTED_DRYNESS_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ModeSelectCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 80L;

    private static final long DESCRIPTION_ATTRIBUTE_ID = 0L;
    private static final long STANDARD_NAMESPACE_ATTRIBUTE_ID = 1L;
    private static final long SUPPORTED_MODES_ATTRIBUTE_ID = 2L;
    private static final long CURRENT_MODE_ATTRIBUTE_ID = 3L;
    private static final long START_UP_MODE_ATTRIBUTE_ID = 4L;
    private static final long ON_MODE_ATTRIBUTE_ID = 5L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ModeSelectCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void changeToMode(DefaultClusterCallback callback, Integer newMode) {
      changeToMode(callback, newMode, 0);
    }

    public void changeToMode(DefaultClusterCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newModeFieldID = 0L;
      BaseTLVType newModetlvValue = new UIntType(newMode);
      elements.add(new StructElement(newModeFieldID, newModetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface StandardNamespaceAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ModeSelectClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readDescriptionAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DESCRIPTION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DESCRIPTION_ATTRIBUTE_ID, true);
    }

    public void subscribeDescriptionAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DESCRIPTION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DESCRIPTION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStandardNamespaceAttribute(
        StandardNamespaceAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STANDARD_NAMESPACE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STANDARD_NAMESPACE_ATTRIBUTE_ID, true);
    }

    public void subscribeStandardNamespaceAttribute(
        StandardNamespaceAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STANDARD_NAMESPACE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STANDARD_NAMESPACE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ModeSelectClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ModeSelectClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_MODE_ATTRIBUTE_ID, true);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpModeAttribute(callback, value, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), START_UP_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_MODE_ATTRIBUTE_ID, true);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnModeAttribute(callback, value, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), ON_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class LaundryWasherModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 81L;

    private static final long SUPPORTED_MODES_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_MODE_ATTRIBUTE_ID = 1L;
    private static final long START_UP_MODE_ATTRIBUTE_ID = 2L;
    private static final long ON_MODE_ATTRIBUTE_ID = 3L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public LaundryWasherModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(callback, newMode, 0);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newModeFieldID = 0L;
      BaseTLVType newModetlvValue = new UIntType(newMode);
      elements.add(new StructElement(newModeFieldID, newModetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long statusTextFieldID = 1L;
          Optional<String> statusText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                statusText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, statusText);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface ChangeToModeResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> statusText);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.LaundryWasherModeClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.LaundryWasherModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.LaundryWasherModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_MODE_ATTRIBUTE_ID, true);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpModeAttribute(callback, value, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), START_UP_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_MODE_ATTRIBUTE_ID, true);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnModeAttribute(callback, value, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), ON_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class RefrigeratorAndTemperatureControlledCabinetModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 82L;

    private static final long SUPPORTED_MODES_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_MODE_ATTRIBUTE_ID = 1L;
    private static final long START_UP_MODE_ATTRIBUTE_ID = 2L;
    private static final long ON_MODE_ATTRIBUTE_ID = 3L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public RefrigeratorAndTemperatureControlledCabinetModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(callback, newMode, 0);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newModeFieldID = 0L;
      BaseTLVType newModetlvValue = new UIntType(newMode);
      elements.add(new StructElement(newModeFieldID, newModetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long statusTextFieldID = 1L;
          Optional<String> statusText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                statusText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, statusText);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface ChangeToModeResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> statusText);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.RefrigeratorAndTemperatureControlledCabinetModeClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RefrigeratorAndTemperatureControlledCabinetModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RefrigeratorAndTemperatureControlledCabinetModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_MODE_ATTRIBUTE_ID, true);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpModeAttribute(callback, value, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), START_UP_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_MODE_ATTRIBUTE_ID, true);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnModeAttribute(callback, value, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), ON_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class LaundryWasherControlsCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 83L;

    private static final long SPIN_SPEEDS_ATTRIBUTE_ID = 0L;
    private static final long SPIN_SPEED_CURRENT_ATTRIBUTE_ID = 1L;
    private static final long NUMBER_OF_RINSES_ATTRIBUTE_ID = 2L;
    private static final long SUPPORTED_RINSES_ATTRIBUTE_ID = 3L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public LaundryWasherControlsCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface SpinSpeedsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<String> value);
    }

    public interface SpinSpeedCurrentAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface SupportedRinsesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSpinSpeedsAttribute(
        SpinSpeedsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SPIN_SPEEDS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SPIN_SPEEDS_ATTRIBUTE_ID, true);
    }

    public void subscribeSpinSpeedsAttribute(
        SpinSpeedsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SPIN_SPEEDS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SPIN_SPEEDS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSpinSpeedCurrentAttribute(
        SpinSpeedCurrentAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SPIN_SPEED_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SPIN_SPEED_CURRENT_ATTRIBUTE_ID, true);
    }

    public void writeSpinSpeedCurrentAttribute(DefaultClusterCallback callback, Integer value) {
      writeSpinSpeedCurrentAttribute(callback, value, 0);
    }

    public void writeSpinSpeedCurrentAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), SPIN_SPEED_CURRENT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeSpinSpeedCurrentAttribute(
        SpinSpeedCurrentAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SPIN_SPEED_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SPIN_SPEED_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfRinsesAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_RINSES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_RINSES_ATTRIBUTE_ID, true);
    }

    public void writeNumberOfRinsesAttribute(DefaultClusterCallback callback, Integer value) {
      writeNumberOfRinsesAttribute(callback, value, 0);
    }

    public void writeNumberOfRinsesAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), NUMBER_OF_RINSES_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNumberOfRinsesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_RINSES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_RINSES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSupportedRinsesAttribute(
        SupportedRinsesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_RINSES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_RINSES_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedRinsesAttribute(
        SupportedRinsesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_RINSES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_RINSES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class RvcRunModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 84L;

    private static final long SUPPORTED_MODES_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_MODE_ATTRIBUTE_ID = 1L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public RvcRunModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(callback, newMode, 0);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newModeFieldID = 0L;
      BaseTLVType newModetlvValue = new UIntType(newMode);
      elements.add(new StructElement(newModeFieldID, newModetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long statusTextFieldID = 1L;
          Optional<String> statusText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                statusText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, statusText);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface ChangeToModeResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> statusText);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.RvcRunModeClusterModeOptionStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RvcRunModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RvcRunModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class RvcCleanModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 85L;

    private static final long SUPPORTED_MODES_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_MODE_ATTRIBUTE_ID = 1L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public RvcCleanModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(callback, newMode, 0);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newModeFieldID = 0L;
      BaseTLVType newModetlvValue = new UIntType(newMode);
      elements.add(new StructElement(newModeFieldID, newModetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long statusTextFieldID = 1L;
          Optional<String> statusText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                statusText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, statusText);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface ChangeToModeResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> statusText);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.RvcCleanModeClusterModeOptionStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RvcCleanModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RvcCleanModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class TemperatureControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 86L;

    private static final long TEMPERATURE_SETPOINT_ATTRIBUTE_ID = 0L;
    private static final long MIN_TEMPERATURE_ATTRIBUTE_ID = 1L;
    private static final long MAX_TEMPERATURE_ATTRIBUTE_ID = 2L;
    private static final long STEP_ATTRIBUTE_ID = 3L;
    private static final long SELECTED_TEMPERATURE_LEVEL_ATTRIBUTE_ID = 4L;
    private static final long SUPPORTED_TEMPERATURE_LEVELS_ATTRIBUTE_ID = 5L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public TemperatureControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void setTemperature(DefaultClusterCallback callback, Optional<Integer> targetTemperature, Optional<Integer> targetTemperatureLevel) {
      setTemperature(callback, targetTemperature, targetTemperatureLevel, 0);
    }

    public void setTemperature(DefaultClusterCallback callback, Optional<Integer> targetTemperature, Optional<Integer> targetTemperatureLevel, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long targetTemperatureFieldID = 0L;
      BaseTLVType targetTemperaturetlvValue = targetTemperature.<BaseTLVType>map((nonOptionaltargetTemperature) -> new IntType(nonOptionaltargetTemperature)).orElse(new EmptyType());
      elements.add(new StructElement(targetTemperatureFieldID, targetTemperaturetlvValue));

      final long targetTemperatureLevelFieldID = 1L;
      BaseTLVType targetTemperatureLeveltlvValue = targetTemperatureLevel.<BaseTLVType>map((nonOptionaltargetTemperatureLevel) -> new UIntType(nonOptionaltargetTemperatureLevel)).orElse(new EmptyType());
      elements.add(new StructElement(targetTemperatureLevelFieldID, targetTemperatureLeveltlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface SupportedTemperatureLevelsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<String> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readTemperatureSetpointAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TEMPERATURE_SETPOINT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TEMPERATURE_SETPOINT_ATTRIBUTE_ID, true);
    }

    public void subscribeTemperatureSetpointAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TEMPERATURE_SETPOINT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TEMPERATURE_SETPOINT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinTemperatureAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_TEMPERATURE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_TEMPERATURE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinTemperatureAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_TEMPERATURE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_TEMPERATURE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxTemperatureAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_TEMPERATURE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_TEMPERATURE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxTemperatureAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_TEMPERATURE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_TEMPERATURE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStepAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STEP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STEP_ATTRIBUTE_ID, true);
    }

    public void subscribeStepAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STEP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STEP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSelectedTemperatureLevelAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SELECTED_TEMPERATURE_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SELECTED_TEMPERATURE_LEVEL_ATTRIBUTE_ID, true);
    }

    public void subscribeSelectedTemperatureLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SELECTED_TEMPERATURE_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SELECTED_TEMPERATURE_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSupportedTemperatureLevelsAttribute(
        SupportedTemperatureLevelsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_TEMPERATURE_LEVELS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_TEMPERATURE_LEVELS_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedTemperatureLevelsAttribute(
        SupportedTemperatureLevelsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_TEMPERATURE_LEVELS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_TEMPERATURE_LEVELS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class RefrigeratorAlarmCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 87L;

    private static final long MASK_ATTRIBUTE_ID = 0L;
    private static final long STATE_ATTRIBUTE_ID = 2L;
    private static final long SUPPORTED_ATTRIBUTE_ID = 3L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public RefrigeratorAlarmCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMaskAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MASK_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MASK_ATTRIBUTE_ID, true);
    }

    public void subscribeMaskAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MASK_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MASK_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStateAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeStateAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSupportedAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class DishwasherModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 89L;

    private static final long SUPPORTED_MODES_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_MODE_ATTRIBUTE_ID = 1L;
    private static final long START_UP_MODE_ATTRIBUTE_ID = 2L;
    private static final long ON_MODE_ATTRIBUTE_ID = 3L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public DishwasherModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(callback, newMode, 0);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newModeFieldID = 0L;
      BaseTLVType newModetlvValue = new UIntType(newMode);
      elements.add(new StructElement(newModeFieldID, newModetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long statusTextFieldID = 1L;
          Optional<String> statusText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                statusText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, statusText);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface ChangeToModeResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> statusText);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.DishwasherModeClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DishwasherModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DishwasherModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_MODE_ATTRIBUTE_ID, true);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpModeAttribute(callback, value, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), START_UP_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_MODE_ATTRIBUTE_ID, true);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnModeAttribute(callback, value, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), ON_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class AirQualityCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 91L;

    private static final long AIR_QUALITY_ATTRIBUTE_ID = 0L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public AirQualityCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readAirQualityAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AIR_QUALITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AIR_QUALITY_ATTRIBUTE_ID, true);
    }

    public void subscribeAirQualityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AIR_QUALITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AIR_QUALITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class SmokeCoAlarmCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 92L;

    private static final long EXPRESSED_STATE_ATTRIBUTE_ID = 0L;
    private static final long SMOKE_STATE_ATTRIBUTE_ID = 1L;
    private static final long C_O_STATE_ATTRIBUTE_ID = 2L;
    private static final long BATTERY_ALERT_ATTRIBUTE_ID = 3L;
    private static final long DEVICE_MUTED_ATTRIBUTE_ID = 4L;
    private static final long TEST_IN_PROGRESS_ATTRIBUTE_ID = 5L;
    private static final long HARDWARE_FAULT_ALERT_ATTRIBUTE_ID = 6L;
    private static final long END_OF_SERVICE_ALERT_ATTRIBUTE_ID = 7L;
    private static final long INTERCONNECT_SMOKE_ALARM_ATTRIBUTE_ID = 8L;
    private static final long INTERCONNECT_C_O_ALARM_ATTRIBUTE_ID = 9L;
    private static final long CONTAMINATION_STATE_ATTRIBUTE_ID = 10L;
    private static final long SMOKE_SENSITIVITY_LEVEL_ATTRIBUTE_ID = 11L;
    private static final long EXPIRY_DATE_ATTRIBUTE_ID = 12L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public SmokeCoAlarmCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void selfTestRequest(DefaultClusterCallback callback) {
      selfTestRequest(callback, 0);
    }

    public void selfTestRequest(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readExpressedStateAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EXPRESSED_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EXPRESSED_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeExpressedStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EXPRESSED_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EXPRESSED_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSmokeStateAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SMOKE_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SMOKE_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeSmokeStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SMOKE_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SMOKE_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCOStateAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, C_O_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, C_O_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeCOStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, C_O_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, C_O_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatteryAlertAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BATTERY_ALERT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BATTERY_ALERT_ATTRIBUTE_ID, true);
    }

    public void subscribeBatteryAlertAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BATTERY_ALERT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BATTERY_ALERT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDeviceMutedAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEVICE_MUTED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEVICE_MUTED_ATTRIBUTE_ID, true);
    }

    public void subscribeDeviceMutedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEVICE_MUTED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEVICE_MUTED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTestInProgressAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TEST_IN_PROGRESS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TEST_IN_PROGRESS_ATTRIBUTE_ID, true);
    }

    public void subscribeTestInProgressAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TEST_IN_PROGRESS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TEST_IN_PROGRESS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readHardwareFaultAlertAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HARDWARE_FAULT_ALERT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HARDWARE_FAULT_ALERT_ATTRIBUTE_ID, true);
    }

    public void subscribeHardwareFaultAlertAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HARDWARE_FAULT_ALERT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HARDWARE_FAULT_ALERT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEndOfServiceAlertAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, END_OF_SERVICE_ALERT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, END_OF_SERVICE_ALERT_ATTRIBUTE_ID, true);
    }

    public void subscribeEndOfServiceAlertAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, END_OF_SERVICE_ALERT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, END_OF_SERVICE_ALERT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInterconnectSmokeAlarmAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INTERCONNECT_SMOKE_ALARM_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INTERCONNECT_SMOKE_ALARM_ATTRIBUTE_ID, true);
    }

    public void subscribeInterconnectSmokeAlarmAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INTERCONNECT_SMOKE_ALARM_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INTERCONNECT_SMOKE_ALARM_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInterconnectCOAlarmAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INTERCONNECT_C_O_ALARM_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INTERCONNECT_C_O_ALARM_ATTRIBUTE_ID, true);
    }

    public void subscribeInterconnectCOAlarmAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INTERCONNECT_C_O_ALARM_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INTERCONNECT_C_O_ALARM_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readContaminationStateAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CONTAMINATION_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CONTAMINATION_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeContaminationStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CONTAMINATION_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CONTAMINATION_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSmokeSensitivityLevelAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SMOKE_SENSITIVITY_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SMOKE_SENSITIVITY_LEVEL_ATTRIBUTE_ID, true);
    }

    public void writeSmokeSensitivityLevelAttribute(DefaultClusterCallback callback, Integer value) {
      writeSmokeSensitivityLevelAttribute(callback, value, 0);
    }

    public void writeSmokeSensitivityLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), SMOKE_SENSITIVITY_LEVEL_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeSmokeSensitivityLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SMOKE_SENSITIVITY_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SMOKE_SENSITIVITY_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readExpiryDateAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EXPIRY_DATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EXPIRY_DATE_ATTRIBUTE_ID, true);
    }

    public void subscribeExpiryDateAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EXPIRY_DATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EXPIRY_DATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class DishwasherAlarmCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 93L;

    private static final long MASK_ATTRIBUTE_ID = 0L;
    private static final long LATCH_ATTRIBUTE_ID = 1L;
    private static final long STATE_ATTRIBUTE_ID = 2L;
    private static final long SUPPORTED_ATTRIBUTE_ID = 3L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public DishwasherAlarmCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void reset(DefaultClusterCallback callback, Long alarms) {
      reset(callback, alarms, 0);
    }

    public void reset(DefaultClusterCallback callback, Long alarms, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long alarmsFieldID = 0L;
      BaseTLVType alarmstlvValue = new UIntType(alarms);
      elements.add(new StructElement(alarmsFieldID, alarmstlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void modifyEnabledAlarms(DefaultClusterCallback callback, Long mask) {
      modifyEnabledAlarms(callback, mask, 0);
    }

    public void modifyEnabledAlarms(DefaultClusterCallback callback, Long mask, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long maskFieldID = 0L;
      BaseTLVType masktlvValue = new UIntType(mask);
      elements.add(new StructElement(maskFieldID, masktlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMaskAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MASK_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MASK_ATTRIBUTE_ID, true);
    }

    public void subscribeMaskAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MASK_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MASK_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLatchAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LATCH_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LATCH_ATTRIBUTE_ID, true);
    }

    public void subscribeLatchAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LATCH_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LATCH_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStateAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeStateAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSupportedAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class MicrowaveOvenModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 94L;

    private static final long SUPPORTED_MODES_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_MODE_ATTRIBUTE_ID = 1L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public MicrowaveOvenModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.MicrowaveOvenModeClusterModeOptionStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.MicrowaveOvenModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.MicrowaveOvenModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class MicrowaveOvenControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 95L;

    private static final long COOK_TIME_ATTRIBUTE_ID = 0L;
    private static final long MAX_COOK_TIME_ATTRIBUTE_ID = 1L;
    private static final long POWER_SETTING_ATTRIBUTE_ID = 2L;
    private static final long MIN_POWER_ATTRIBUTE_ID = 3L;
    private static final long MAX_POWER_ATTRIBUTE_ID = 4L;
    private static final long POWER_STEP_ATTRIBUTE_ID = 5L;
    private static final long SUPPORTED_WATTS_ATTRIBUTE_ID = 6L;
    private static final long SELECTED_WATT_INDEX_ATTRIBUTE_ID = 7L;
    private static final long WATT_RATING_ATTRIBUTE_ID = 8L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public MicrowaveOvenControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void setCookingParameters(DefaultClusterCallback callback, Optional<Integer> cookMode, Optional<Long> cookTime, Optional<Integer> powerSetting, Optional<Integer> wattSettingIndex, Optional<Boolean> startAfterSetting) {
      setCookingParameters(callback, cookMode, cookTime, powerSetting, wattSettingIndex, startAfterSetting, 0);
    }

    public void setCookingParameters(DefaultClusterCallback callback, Optional<Integer> cookMode, Optional<Long> cookTime, Optional<Integer> powerSetting, Optional<Integer> wattSettingIndex, Optional<Boolean> startAfterSetting, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long cookModeFieldID = 0L;
      BaseTLVType cookModetlvValue = cookMode.<BaseTLVType>map((nonOptionalcookMode) -> new UIntType(nonOptionalcookMode)).orElse(new EmptyType());
      elements.add(new StructElement(cookModeFieldID, cookModetlvValue));

      final long cookTimeFieldID = 1L;
      BaseTLVType cookTimetlvValue = cookTime.<BaseTLVType>map((nonOptionalcookTime) -> new UIntType(nonOptionalcookTime)).orElse(new EmptyType());
      elements.add(new StructElement(cookTimeFieldID, cookTimetlvValue));

      final long powerSettingFieldID = 2L;
      BaseTLVType powerSettingtlvValue = powerSetting.<BaseTLVType>map((nonOptionalpowerSetting) -> new UIntType(nonOptionalpowerSetting)).orElse(new EmptyType());
      elements.add(new StructElement(powerSettingFieldID, powerSettingtlvValue));

      final long wattSettingIndexFieldID = 3L;
      BaseTLVType wattSettingIndextlvValue = wattSettingIndex.<BaseTLVType>map((nonOptionalwattSettingIndex) -> new UIntType(nonOptionalwattSettingIndex)).orElse(new EmptyType());
      elements.add(new StructElement(wattSettingIndexFieldID, wattSettingIndextlvValue));

      final long startAfterSettingFieldID = 4L;
      BaseTLVType startAfterSettingtlvValue = startAfterSetting.<BaseTLVType>map((nonOptionalstartAfterSetting) -> new BooleanType(nonOptionalstartAfterSetting)).orElse(new EmptyType());
      elements.add(new StructElement(startAfterSettingFieldID, startAfterSettingtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void addMoreTime(DefaultClusterCallback callback, Long timeToAdd) {
      addMoreTime(callback, timeToAdd, 0);
    }

    public void addMoreTime(DefaultClusterCallback callback, Long timeToAdd, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long timeToAddFieldID = 0L;
      BaseTLVType timeToAddtlvValue = new UIntType(timeToAdd);
      elements.add(new StructElement(timeToAddFieldID, timeToAddtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface SupportedWattsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readCookTimeAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COOK_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COOK_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeCookTimeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COOK_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COOK_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxCookTimeAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_COOK_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_COOK_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxCookTimeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_COOK_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_COOK_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPowerSettingAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_SETTING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_SETTING_ATTRIBUTE_ID, true);
    }

    public void subscribePowerSettingAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_SETTING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_SETTING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinPowerAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_POWER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_POWER_ATTRIBUTE_ID, true);
    }

    public void subscribeMinPowerAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_POWER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_POWER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxPowerAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_POWER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_POWER_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxPowerAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_POWER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_POWER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPowerStepAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_STEP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_STEP_ATTRIBUTE_ID, true);
    }

    public void subscribePowerStepAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_STEP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_STEP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSupportedWattsAttribute(
        SupportedWattsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_WATTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_WATTS_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedWattsAttribute(
        SupportedWattsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_WATTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_WATTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSelectedWattIndexAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SELECTED_WATT_INDEX_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SELECTED_WATT_INDEX_ATTRIBUTE_ID, true);
    }

    public void subscribeSelectedWattIndexAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SELECTED_WATT_INDEX_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SELECTED_WATT_INDEX_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readWattRatingAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WATT_RATING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WATT_RATING_ATTRIBUTE_ID, true);
    }

    public void subscribeWattRatingAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WATT_RATING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WATT_RATING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class OperationalStateCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 96L;

    private static final long PHASE_LIST_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_PHASE_ATTRIBUTE_ID = 1L;
    private static final long COUNTDOWN_TIME_ATTRIBUTE_ID = 2L;
    private static final long OPERATIONAL_STATE_LIST_ATTRIBUTE_ID = 3L;
    private static final long OPERATIONAL_STATE_ATTRIBUTE_ID = 4L;
    private static final long OPERATIONAL_ERROR_ATTRIBUTE_ID = 5L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public OperationalStateCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void pause(OperationalCommandResponseCallback callback) {
      pause(callback, 0);
    }

    public void pause(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.OperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.OperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void stop(OperationalCommandResponseCallback callback) {
      stop(callback, 0);
    }

    public void stop(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.OperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.OperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void start(OperationalCommandResponseCallback callback) {
      start(callback, 0);
    }

    public void start(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.OperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.OperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void resume(OperationalCommandResponseCallback callback) {
      resume(callback, 0);
    }

    public void resume(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.OperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.OperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface OperationalCommandResponseCallback extends BaseClusterCallback {
      void onSuccess(ChipStructs.OperationalStateClusterErrorStateStruct commandResponseState);
    }

    public interface PhaseListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable List<String> value);
    }

    public interface CurrentPhaseAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CountdownTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface OperationalStateListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.OperationalStateClusterOperationalStateStruct> value);
    }

    public interface OperationalErrorAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.OperationalStateClusterErrorStateStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readPhaseListAttribute(
        PhaseListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHASE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHASE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribePhaseListAttribute(
        PhaseListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHASE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHASE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentPhaseAttribute(
        CurrentPhaseAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_PHASE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_PHASE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentPhaseAttribute(
        CurrentPhaseAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_PHASE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_PHASE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCountdownTimeAttribute(
        CountdownTimeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COUNTDOWN_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COUNTDOWN_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeCountdownTimeAttribute(
        CountdownTimeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COUNTDOWN_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COUNTDOWN_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOperationalStateListAttribute(
        OperationalStateListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_STATE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OperationalStateClusterOperationalStateStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_STATE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeOperationalStateListAttribute(
        OperationalStateListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_STATE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.OperationalStateClusterOperationalStateStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_STATE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOperationalStateAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeOperationalStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOperationalErrorAttribute(
        OperationalErrorAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_ERROR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.OperationalStateClusterErrorStateStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_ERROR_ATTRIBUTE_ID, true);
    }

    public void subscribeOperationalErrorAttribute(
        OperationalErrorAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_ERROR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.OperationalStateClusterErrorStateStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_ERROR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class RvcOperationalStateCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 97L;

    private static final long PHASE_LIST_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_PHASE_ATTRIBUTE_ID = 1L;
    private static final long COUNTDOWN_TIME_ATTRIBUTE_ID = 2L;
    private static final long OPERATIONAL_STATE_LIST_ATTRIBUTE_ID = 3L;
    private static final long OPERATIONAL_STATE_ATTRIBUTE_ID = 4L;
    private static final long OPERATIONAL_ERROR_ATTRIBUTE_ID = 5L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public RvcOperationalStateCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void pause(OperationalCommandResponseCallback callback) {
      pause(callback, 0);
    }

    public void pause(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.RvcOperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.RvcOperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void resume(OperationalCommandResponseCallback callback) {
      resume(callback, 0);
    }

    public void resume(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.RvcOperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.RvcOperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void goHome(OperationalCommandResponseCallback callback) {
      goHome(callback, 0);
    }

    public void goHome(OperationalCommandResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 128L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long commandResponseStateFieldID = 0L;
          ChipStructs.RvcOperationalStateClusterErrorStateStruct commandResponseState = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == commandResponseStateFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                commandResponseState = ChipStructs.RvcOperationalStateClusterErrorStateStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(commandResponseState);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface OperationalCommandResponseCallback extends BaseClusterCallback {
      void onSuccess(ChipStructs.RvcOperationalStateClusterErrorStateStruct commandResponseState);
    }

    public interface PhaseListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable List<String> value);
    }

    public interface CurrentPhaseAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CountdownTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface OperationalStateListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.RvcOperationalStateClusterOperationalStateStruct> value);
    }

    public interface OperationalErrorAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.RvcOperationalStateClusterErrorStateStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readPhaseListAttribute(
        PhaseListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHASE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHASE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribePhaseListAttribute(
        PhaseListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHASE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHASE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentPhaseAttribute(
        CurrentPhaseAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_PHASE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_PHASE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentPhaseAttribute(
        CurrentPhaseAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_PHASE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_PHASE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCountdownTimeAttribute(
        CountdownTimeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COUNTDOWN_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COUNTDOWN_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeCountdownTimeAttribute(
        CountdownTimeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COUNTDOWN_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COUNTDOWN_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOperationalStateListAttribute(
        OperationalStateListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_STATE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RvcOperationalStateClusterOperationalStateStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_STATE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeOperationalStateListAttribute(
        OperationalStateListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_STATE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.RvcOperationalStateClusterOperationalStateStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_STATE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOperationalStateAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeOperationalStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOperationalErrorAttribute(
        OperationalErrorAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_ERROR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.RvcOperationalStateClusterErrorStateStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_ERROR_ATTRIBUTE_ID, true);
    }

    public void subscribeOperationalErrorAttribute(
        OperationalErrorAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_ERROR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.RvcOperationalStateClusterErrorStateStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_ERROR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ScenesManagementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 98L;

    private static final long LAST_CONFIGURED_BY_ATTRIBUTE_ID = 0L;
    private static final long SCENE_TABLE_SIZE_ATTRIBUTE_ID = 1L;
    private static final long FABRIC_SCENE_INFO_ATTRIBUTE_ID = 2L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ScenesManagementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void addScene(AddSceneResponseCallback callback, Integer groupID, Integer sceneID, Long transitionTime, String sceneName, ArrayList<ChipStructs.ScenesManagementClusterExtensionFieldSet> extensionFieldSets) {
      addScene(callback, groupID, sceneID, transitionTime, sceneName, extensionFieldSets, 0);
    }

    public void addScene(AddSceneResponseCallback callback, Integer groupID, Integer sceneID, Long transitionTime, String sceneName, ArrayList<ChipStructs.ScenesManagementClusterExtensionFieldSet> extensionFieldSets, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      final long sceneIDFieldID = 1L;
      BaseTLVType sceneIDtlvValue = new UIntType(sceneID);
      elements.add(new StructElement(sceneIDFieldID, sceneIDtlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long sceneNameFieldID = 3L;
      BaseTLVType sceneNametlvValue = new StringType(sceneName);
      elements.add(new StructElement(sceneNameFieldID, sceneNametlvValue));

      final long extensionFieldSetsFieldID = 4L;
      BaseTLVType extensionFieldSetstlvValue = ArrayType.generateArrayType(extensionFieldSets, (elementextensionFieldSets) -> elementextensionFieldSets.encodeTlv());
      elements.add(new StructElement(extensionFieldSetsFieldID, extensionFieldSetstlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          final long sceneIDFieldID = 2L;
          Integer sceneID = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == sceneIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                sceneID = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status, groupID, sceneID);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void viewScene(ViewSceneResponseCallback callback, Integer groupID, Integer sceneID) {
      viewScene(callback, groupID, sceneID, 0);
    }

    public void viewScene(ViewSceneResponseCallback callback, Integer groupID, Integer sceneID, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      final long sceneIDFieldID = 1L;
      BaseTLVType sceneIDtlvValue = new UIntType(sceneID);
      elements.add(new StructElement(sceneIDFieldID, sceneIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          final long sceneIDFieldID = 2L;
          Integer sceneID = null;
          final long transitionTimeFieldID = 3L;
          Optional<Long> transitionTime = Optional.empty();
          final long sceneNameFieldID = 4L;
          Optional<String> sceneName = Optional.empty();
          final long extensionFieldSetsFieldID = 5L;
          Optional<ArrayList<ChipStructs.ScenesManagementClusterExtensionFieldSet>> extensionFieldSets = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == sceneIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                sceneID = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == transitionTimeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                transitionTime = Optional.of(castingValue.value(Long.class));
              }
            } else if (element.contextTagNum() == sceneNameFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                sceneName = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == extensionFieldSetsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                extensionFieldSets = Optional.of(castingValue.map((elementcastingValue) -> ChipStructs.ScenesManagementClusterExtensionFieldSet.decodeTlv(elementcastingValue)));
              }
            }
          }
          callback.onSuccess(status, groupID, sceneID, transitionTime, sceneName, extensionFieldSets);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void removeScene(RemoveSceneResponseCallback callback, Integer groupID, Integer sceneID) {
      removeScene(callback, groupID, sceneID, 0);
    }

    public void removeScene(RemoveSceneResponseCallback callback, Integer groupID, Integer sceneID, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      final long sceneIDFieldID = 1L;
      BaseTLVType sceneIDtlvValue = new UIntType(sceneID);
      elements.add(new StructElement(sceneIDFieldID, sceneIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          final long sceneIDFieldID = 2L;
          Integer sceneID = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == sceneIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                sceneID = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status, groupID, sceneID);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void removeAllScenes(RemoveAllScenesResponseCallback callback, Integer groupID) {
      removeAllScenes(callback, groupID, 0);
    }

    public void removeAllScenes(RemoveAllScenesResponseCallback callback, Integer groupID, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status, groupID);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void storeScene(StoreSceneResponseCallback callback, Integer groupID, Integer sceneID) {
      storeScene(callback, groupID, sceneID, 0);
    }

    public void storeScene(StoreSceneResponseCallback callback, Integer groupID, Integer sceneID, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      final long sceneIDFieldID = 1L;
      BaseTLVType sceneIDtlvValue = new UIntType(sceneID);
      elements.add(new StructElement(sceneIDFieldID, sceneIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIDFieldID = 1L;
          Integer groupID = null;
          final long sceneIDFieldID = 2L;
          Integer sceneID = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == sceneIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                sceneID = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status, groupID, sceneID);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void recallScene(DefaultClusterCallback callback, Integer groupID, Integer sceneID, @Nullable Optional<Long> transitionTime) {
      recallScene(callback, groupID, sceneID, transitionTime, 0);
    }

    public void recallScene(DefaultClusterCallback callback, Integer groupID, Integer sceneID, @Nullable Optional<Long> transitionTime, int timedInvokeTimeoutMs) {
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      final long sceneIDFieldID = 1L;
      BaseTLVType sceneIDtlvValue = new UIntType(sceneID);
      elements.add(new StructElement(sceneIDFieldID, sceneIDtlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = transitionTime != null ? transitionTime.<BaseTLVType>map((nonOptionaltransitionTime) -> new UIntType(nonOptionaltransitionTime)).orElse(new EmptyType()) : new NullType();
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void getSceneMembership(GetSceneMembershipResponseCallback callback, Integer groupID) {
      getSceneMembership(callback, groupID, 0);
    }

    public void getSceneMembership(GetSceneMembershipResponseCallback callback, Integer groupID, int timedInvokeTimeoutMs) {
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long groupIDFieldID = 0L;
      BaseTLVType groupIDtlvValue = new UIntType(groupID);
      elements.add(new StructElement(groupIDFieldID, groupIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long capacityFieldID = 1L;
          @Nullable Integer capacity = null;
          final long groupIDFieldID = 2L;
          Integer groupID = null;
          final long sceneListFieldID = 3L;
          Optional<ArrayList<Integer>> sceneList = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == capacityFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                capacity = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupID = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == sceneListFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                sceneList = Optional.of(castingValue.map((elementcastingValue) -> elementcastingValue.value(Integer.class)));
              }
            }
          }
          callback.onSuccess(status, capacity, groupID, sceneList);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void copyScene(CopySceneResponseCallback callback, Integer mode, Integer groupIdentifierFrom, Integer sceneIdentifierFrom, Integer groupIdentifierTo, Integer sceneIdentifierTo) {
      copyScene(callback, mode, groupIdentifierFrom, sceneIdentifierFrom, groupIdentifierTo, sceneIdentifierTo, 0);
    }

    public void copyScene(CopySceneResponseCallback callback, Integer mode, Integer groupIdentifierFrom, Integer sceneIdentifierFrom, Integer groupIdentifierTo, Integer sceneIdentifierTo, int timedInvokeTimeoutMs) {
      final long commandId = 64L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long modeFieldID = 0L;
      BaseTLVType modetlvValue = new UIntType(mode);
      elements.add(new StructElement(modeFieldID, modetlvValue));

      final long groupIdentifierFromFieldID = 1L;
      BaseTLVType groupIdentifierFromtlvValue = new UIntType(groupIdentifierFrom);
      elements.add(new StructElement(groupIdentifierFromFieldID, groupIdentifierFromtlvValue));

      final long sceneIdentifierFromFieldID = 2L;
      BaseTLVType sceneIdentifierFromtlvValue = new UIntType(sceneIdentifierFrom);
      elements.add(new StructElement(sceneIdentifierFromFieldID, sceneIdentifierFromtlvValue));

      final long groupIdentifierToFieldID = 3L;
      BaseTLVType groupIdentifierTotlvValue = new UIntType(groupIdentifierTo);
      elements.add(new StructElement(groupIdentifierToFieldID, groupIdentifierTotlvValue));

      final long sceneIdentifierToFieldID = 4L;
      BaseTLVType sceneIdentifierTotlvValue = new UIntType(sceneIdentifierTo);
      elements.add(new StructElement(sceneIdentifierToFieldID, sceneIdentifierTotlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long groupIdentifierFromFieldID = 1L;
          Integer groupIdentifierFrom = null;
          final long sceneIdentifierFromFieldID = 2L;
          Integer sceneIdentifierFrom = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == groupIdentifierFromFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                groupIdentifierFrom = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == sceneIdentifierFromFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                sceneIdentifierFrom = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status, groupIdentifierFrom, sceneIdentifierFrom);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface AddSceneResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID, Integer sceneID);
    }

    public interface ViewSceneResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID, Integer sceneID, Optional<Long> transitionTime, Optional<String> sceneName, Optional<ArrayList<ChipStructs.ScenesManagementClusterExtensionFieldSet>> extensionFieldSets);
    }

    public interface RemoveSceneResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID, Integer sceneID);
    }

    public interface RemoveAllScenesResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID);
    }

    public interface StoreSceneResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupID, Integer sceneID);
    }

    public interface GetSceneMembershipResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, @Nullable Integer capacity, Integer groupID, Optional<ArrayList<Integer>> sceneList);
    }

    public interface CopySceneResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Integer groupIdentifierFrom, Integer sceneIdentifierFrom);
    }

    public interface LastConfiguredByAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface FabricSceneInfoAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ScenesManagementClusterSceneInfoStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readLastConfiguredByAttribute(
        LastConfiguredByAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAST_CONFIGURED_BY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAST_CONFIGURED_BY_ATTRIBUTE_ID, true);
    }

    public void subscribeLastConfiguredByAttribute(
        LastConfiguredByAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAST_CONFIGURED_BY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAST_CONFIGURED_BY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSceneTableSizeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCENE_TABLE_SIZE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCENE_TABLE_SIZE_ATTRIBUTE_ID, true);
    }

    public void subscribeSceneTableSizeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCENE_TABLE_SIZE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCENE_TABLE_SIZE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFabricSceneInfoAttribute(
        FabricSceneInfoAttributeCallback callback) {
      readFabricSceneInfoAttributeWithFabricFilter(callback, true);
    }

    public void readFabricSceneInfoAttributeWithFabricFilter(
        FabricSceneInfoAttributeCallback callback, boolean isFabricFiltered) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FABRIC_SCENE_INFO_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ScenesManagementClusterSceneInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FABRIC_SCENE_INFO_ATTRIBUTE_ID, isFabricFiltered);
    }

    public void subscribeFabricSceneInfoAttribute(
        FabricSceneInfoAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FABRIC_SCENE_INFO_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ScenesManagementClusterSceneInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FABRIC_SCENE_INFO_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class HepaFilterMonitoringCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 113L;

    private static final long CONDITION_ATTRIBUTE_ID = 0L;
    private static final long DEGRADATION_DIRECTION_ATTRIBUTE_ID = 1L;
    private static final long CHANGE_INDICATION_ATTRIBUTE_ID = 2L;
    private static final long IN_PLACE_INDICATOR_ATTRIBUTE_ID = 3L;
    private static final long LAST_CHANGED_TIME_ATTRIBUTE_ID = 4L;
    private static final long REPLACEMENT_PRODUCT_LIST_ATTRIBUTE_ID = 5L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public HepaFilterMonitoringCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void resetCondition(DefaultClusterCallback callback) {
      resetCondition(callback, 0);
    }

    public void resetCondition(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface LastChangedTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ReplacementProductListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.HepaFilterMonitoringClusterReplacementProductStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readConditionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CONDITION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CONDITION_ATTRIBUTE_ID, true);
    }

    public void subscribeConditionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CONDITION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CONDITION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDegradationDirectionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEGRADATION_DIRECTION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEGRADATION_DIRECTION_ATTRIBUTE_ID, true);
    }

    public void subscribeDegradationDirectionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEGRADATION_DIRECTION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEGRADATION_DIRECTION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readChangeIndicationAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHANGE_INDICATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHANGE_INDICATION_ATTRIBUTE_ID, true);
    }

    public void subscribeChangeIndicationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHANGE_INDICATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHANGE_INDICATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInPlaceIndicatorAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, IN_PLACE_INDICATOR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, IN_PLACE_INDICATOR_ATTRIBUTE_ID, true);
    }

    public void subscribeInPlaceIndicatorAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, IN_PLACE_INDICATOR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, IN_PLACE_INDICATOR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLastChangedTimeAttribute(
        LastChangedTimeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAST_CHANGED_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAST_CHANGED_TIME_ATTRIBUTE_ID, true);
    }

    public void writeLastChangedTimeAttribute(DefaultClusterCallback callback, Long value) {
      writeLastChangedTimeAttribute(callback, value, 0);
    }

    public void writeLastChangedTimeAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), LAST_CHANGED_TIME_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLastChangedTimeAttribute(
        LastChangedTimeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAST_CHANGED_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAST_CHANGED_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readReplacementProductListAttribute(
        ReplacementProductListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REPLACEMENT_PRODUCT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.HepaFilterMonitoringClusterReplacementProductStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REPLACEMENT_PRODUCT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeReplacementProductListAttribute(
        ReplacementProductListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REPLACEMENT_PRODUCT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.HepaFilterMonitoringClusterReplacementProductStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REPLACEMENT_PRODUCT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ActivatedCarbonFilterMonitoringCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 114L;

    private static final long CONDITION_ATTRIBUTE_ID = 0L;
    private static final long DEGRADATION_DIRECTION_ATTRIBUTE_ID = 1L;
    private static final long CHANGE_INDICATION_ATTRIBUTE_ID = 2L;
    private static final long IN_PLACE_INDICATOR_ATTRIBUTE_ID = 3L;
    private static final long LAST_CHANGED_TIME_ATTRIBUTE_ID = 4L;
    private static final long REPLACEMENT_PRODUCT_LIST_ATTRIBUTE_ID = 5L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ActivatedCarbonFilterMonitoringCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void resetCondition(DefaultClusterCallback callback) {
      resetCondition(callback, 0);
    }

    public void resetCondition(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface LastChangedTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ReplacementProductListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ActivatedCarbonFilterMonitoringClusterReplacementProductStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readConditionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CONDITION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CONDITION_ATTRIBUTE_ID, true);
    }

    public void subscribeConditionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CONDITION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CONDITION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDegradationDirectionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEGRADATION_DIRECTION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEGRADATION_DIRECTION_ATTRIBUTE_ID, true);
    }

    public void subscribeDegradationDirectionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEGRADATION_DIRECTION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEGRADATION_DIRECTION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readChangeIndicationAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHANGE_INDICATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHANGE_INDICATION_ATTRIBUTE_ID, true);
    }

    public void subscribeChangeIndicationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHANGE_INDICATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHANGE_INDICATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInPlaceIndicatorAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, IN_PLACE_INDICATOR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, IN_PLACE_INDICATOR_ATTRIBUTE_ID, true);
    }

    public void subscribeInPlaceIndicatorAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, IN_PLACE_INDICATOR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, IN_PLACE_INDICATOR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLastChangedTimeAttribute(
        LastChangedTimeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAST_CHANGED_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAST_CHANGED_TIME_ATTRIBUTE_ID, true);
    }

    public void writeLastChangedTimeAttribute(DefaultClusterCallback callback, Long value) {
      writeLastChangedTimeAttribute(callback, value, 0);
    }

    public void writeLastChangedTimeAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), LAST_CHANGED_TIME_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLastChangedTimeAttribute(
        LastChangedTimeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAST_CHANGED_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAST_CHANGED_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readReplacementProductListAttribute(
        ReplacementProductListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REPLACEMENT_PRODUCT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ActivatedCarbonFilterMonitoringClusterReplacementProductStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REPLACEMENT_PRODUCT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeReplacementProductListAttribute(
        ReplacementProductListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REPLACEMENT_PRODUCT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ActivatedCarbonFilterMonitoringClusterReplacementProductStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REPLACEMENT_PRODUCT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class BooleanStateConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 128L;

    private static final long CURRENT_SENSITIVITY_LEVEL_ATTRIBUTE_ID = 0L;
    private static final long SUPPORTED_SENSITIVITY_LEVELS_ATTRIBUTE_ID = 1L;
    private static final long DEFAULT_SENSITIVITY_LEVEL_ATTRIBUTE_ID = 2L;
    private static final long ALARMS_ACTIVE_ATTRIBUTE_ID = 3L;
    private static final long ALARMS_SUPPRESSED_ATTRIBUTE_ID = 4L;
    private static final long ALARMS_ENABLED_ATTRIBUTE_ID = 5L;
    private static final long ALARMS_SUPPORTED_ATTRIBUTE_ID = 6L;
    private static final long SENSOR_FAULT_ATTRIBUTE_ID = 7L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public BooleanStateConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void suppressAlarm(DefaultClusterCallback callback, Integer alarmsToSuppress) {
      suppressAlarm(callback, alarmsToSuppress, 0);
    }

    public void suppressAlarm(DefaultClusterCallback callback, Integer alarmsToSuppress, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long alarmsToSuppressFieldID = 0L;
      BaseTLVType alarmsToSuppresstlvValue = new UIntType(alarmsToSuppress);
      elements.add(new StructElement(alarmsToSuppressFieldID, alarmsToSuppresstlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void enableDisableAlarm(DefaultClusterCallback callback, Integer alarmsToEnableDisable) {
      enableDisableAlarm(callback, alarmsToEnableDisable, 0);
    }

    public void enableDisableAlarm(DefaultClusterCallback callback, Integer alarmsToEnableDisable, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long alarmsToEnableDisableFieldID = 0L;
      BaseTLVType alarmsToEnableDisabletlvValue = new UIntType(alarmsToEnableDisable);
      elements.add(new StructElement(alarmsToEnableDisableFieldID, alarmsToEnableDisabletlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readCurrentSensitivityLevelAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_SENSITIVITY_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_SENSITIVITY_LEVEL_ATTRIBUTE_ID, true);
    }

    public void writeCurrentSensitivityLevelAttribute(DefaultClusterCallback callback, Integer value) {
      writeCurrentSensitivityLevelAttribute(callback, value, 0);
    }

    public void writeCurrentSensitivityLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), CURRENT_SENSITIVITY_LEVEL_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeCurrentSensitivityLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_SENSITIVITY_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_SENSITIVITY_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSupportedSensitivityLevelsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_SENSITIVITY_LEVELS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_SENSITIVITY_LEVELS_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedSensitivityLevelsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_SENSITIVITY_LEVELS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_SENSITIVITY_LEVELS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDefaultSensitivityLevelAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_SENSITIVITY_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_SENSITIVITY_LEVEL_ATTRIBUTE_ID, true);
    }

    public void subscribeDefaultSensitivityLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_SENSITIVITY_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_SENSITIVITY_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAlarmsActiveAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALARMS_ACTIVE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALARMS_ACTIVE_ATTRIBUTE_ID, true);
    }

    public void subscribeAlarmsActiveAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALARMS_ACTIVE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALARMS_ACTIVE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAlarmsSuppressedAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALARMS_SUPPRESSED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALARMS_SUPPRESSED_ATTRIBUTE_ID, true);
    }

    public void subscribeAlarmsSuppressedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALARMS_SUPPRESSED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALARMS_SUPPRESSED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAlarmsEnabledAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALARMS_ENABLED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALARMS_ENABLED_ATTRIBUTE_ID, true);
    }

    public void subscribeAlarmsEnabledAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALARMS_ENABLED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALARMS_ENABLED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAlarmsSupportedAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALARMS_SUPPORTED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALARMS_SUPPORTED_ATTRIBUTE_ID, true);
    }

    public void subscribeAlarmsSupportedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALARMS_SUPPORTED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALARMS_SUPPORTED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSensorFaultAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SENSOR_FAULT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SENSOR_FAULT_ATTRIBUTE_ID, true);
    }

    public void subscribeSensorFaultAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SENSOR_FAULT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SENSOR_FAULT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ValveConfigurationAndControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 129L;

    private static final long OPEN_DURATION_ATTRIBUTE_ID = 0L;
    private static final long DEFAULT_OPEN_DURATION_ATTRIBUTE_ID = 1L;
    private static final long AUTO_CLOSE_TIME_ATTRIBUTE_ID = 2L;
    private static final long REMAINING_DURATION_ATTRIBUTE_ID = 3L;
    private static final long CURRENT_STATE_ATTRIBUTE_ID = 4L;
    private static final long TARGET_STATE_ATTRIBUTE_ID = 5L;
    private static final long CURRENT_LEVEL_ATTRIBUTE_ID = 6L;
    private static final long TARGET_LEVEL_ATTRIBUTE_ID = 7L;
    private static final long DEFAULT_OPEN_LEVEL_ATTRIBUTE_ID = 8L;
    private static final long VALVE_FAULT_ATTRIBUTE_ID = 9L;
    private static final long LEVEL_STEP_ATTRIBUTE_ID = 10L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ValveConfigurationAndControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void open(DefaultClusterCallback callback, @Nullable Optional<Long> openDuration, Optional<Integer> targetLevel) {
      open(callback, openDuration, targetLevel, 0);
    }

    public void open(DefaultClusterCallback callback, @Nullable Optional<Long> openDuration, Optional<Integer> targetLevel, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long openDurationFieldID = 0L;
      BaseTLVType openDurationtlvValue = openDuration != null ? openDuration.<BaseTLVType>map((nonOptionalopenDuration) -> new UIntType(nonOptionalopenDuration)).orElse(new EmptyType()) : new NullType();
      elements.add(new StructElement(openDurationFieldID, openDurationtlvValue));

      final long targetLevelFieldID = 1L;
      BaseTLVType targetLeveltlvValue = targetLevel.<BaseTLVType>map((nonOptionaltargetLevel) -> new UIntType(nonOptionaltargetLevel)).orElse(new EmptyType());
      elements.add(new StructElement(targetLevelFieldID, targetLeveltlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void close(DefaultClusterCallback callback) {
      close(callback, 0);
    }

    public void close(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface OpenDurationAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface DefaultOpenDurationAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface AutoCloseTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface RemainingDurationAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface CurrentStateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface TargetStateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CurrentLevelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface TargetLevelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readOpenDurationAttribute(
        OpenDurationAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPEN_DURATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPEN_DURATION_ATTRIBUTE_ID, true);
    }

    public void subscribeOpenDurationAttribute(
        OpenDurationAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPEN_DURATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPEN_DURATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDefaultOpenDurationAttribute(
        DefaultOpenDurationAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_OPEN_DURATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_OPEN_DURATION_ATTRIBUTE_ID, true);
    }

    public void writeDefaultOpenDurationAttribute(DefaultClusterCallback callback, Long value) {
      writeDefaultOpenDurationAttribute(callback, value, 0);
    }

    public void writeDefaultOpenDurationAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), DEFAULT_OPEN_DURATION_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeDefaultOpenDurationAttribute(
        DefaultOpenDurationAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_OPEN_DURATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_OPEN_DURATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAutoCloseTimeAttribute(
        AutoCloseTimeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AUTO_CLOSE_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AUTO_CLOSE_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeAutoCloseTimeAttribute(
        AutoCloseTimeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AUTO_CLOSE_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AUTO_CLOSE_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRemainingDurationAttribute(
        RemainingDurationAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REMAINING_DURATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REMAINING_DURATION_ATTRIBUTE_ID, true);
    }

    public void subscribeRemainingDurationAttribute(
        RemainingDurationAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REMAINING_DURATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REMAINING_DURATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentStateAttribute(
        CurrentStateAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentStateAttribute(
        CurrentStateAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTargetStateAttribute(
        TargetStateAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TARGET_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TARGET_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeTargetStateAttribute(
        TargetStateAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TARGET_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TARGET_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentLevelAttribute(
        CurrentLevelAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_LEVEL_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentLevelAttribute(
        CurrentLevelAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTargetLevelAttribute(
        TargetLevelAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TARGET_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TARGET_LEVEL_ATTRIBUTE_ID, true);
    }

    public void subscribeTargetLevelAttribute(
        TargetLevelAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TARGET_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TARGET_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDefaultOpenLevelAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_OPEN_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_OPEN_LEVEL_ATTRIBUTE_ID, true);
    }

    public void writeDefaultOpenLevelAttribute(DefaultClusterCallback callback, Integer value) {
      writeDefaultOpenLevelAttribute(callback, value, 0);
    }

    public void writeDefaultOpenLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), DEFAULT_OPEN_LEVEL_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeDefaultOpenLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_OPEN_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_OPEN_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readValveFaultAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VALVE_FAULT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VALVE_FAULT_ATTRIBUTE_ID, true);
    }

    public void subscribeValveFaultAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VALVE_FAULT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VALVE_FAULT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLevelStepAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_STEP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_STEP_ATTRIBUTE_ID, true);
    }

    public void subscribeLevelStepAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_STEP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_STEP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ElectricalPowerMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 144L;

    private static final long POWER_MODE_ATTRIBUTE_ID = 0L;
    private static final long NUMBER_OF_MEASUREMENT_TYPES_ATTRIBUTE_ID = 1L;
    private static final long ACCURACY_ATTRIBUTE_ID = 2L;
    private static final long RANGES_ATTRIBUTE_ID = 3L;
    private static final long VOLTAGE_ATTRIBUTE_ID = 4L;
    private static final long ACTIVE_CURRENT_ATTRIBUTE_ID = 5L;
    private static final long REACTIVE_CURRENT_ATTRIBUTE_ID = 6L;
    private static final long APPARENT_CURRENT_ATTRIBUTE_ID = 7L;
    private static final long ACTIVE_POWER_ATTRIBUTE_ID = 8L;
    private static final long REACTIVE_POWER_ATTRIBUTE_ID = 9L;
    private static final long APPARENT_POWER_ATTRIBUTE_ID = 10L;
    private static final long R_M_S_VOLTAGE_ATTRIBUTE_ID = 11L;
    private static final long R_M_S_CURRENT_ATTRIBUTE_ID = 12L;
    private static final long R_M_S_POWER_ATTRIBUTE_ID = 13L;
    private static final long FREQUENCY_ATTRIBUTE_ID = 14L;
    private static final long HARMONIC_CURRENTS_ATTRIBUTE_ID = 15L;
    private static final long HARMONIC_PHASES_ATTRIBUTE_ID = 16L;
    private static final long POWER_FACTOR_ATTRIBUTE_ID = 17L;
    private static final long NEUTRAL_CURRENT_ATTRIBUTE_ID = 18L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ElectricalPowerMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface AccuracyAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ElectricalPowerMeasurementClusterMeasurementAccuracyStruct> value);
    }

    public interface RangesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ElectricalPowerMeasurementClusterMeasurementRangeStruct> value);
    }

    public interface VoltageAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ActiveCurrentAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ReactiveCurrentAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ApparentCurrentAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ActivePowerAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ReactivePowerAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ApparentPowerAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface RMSVoltageAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface RMSCurrentAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface RMSPowerAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface FrequencyAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface HarmonicCurrentsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable List<ChipStructs.ElectricalPowerMeasurementClusterHarmonicMeasurementStruct> value);
    }

    public interface HarmonicPhasesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable List<ChipStructs.ElectricalPowerMeasurementClusterHarmonicMeasurementStruct> value);
    }

    public interface PowerFactorAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NeutralCurrentAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readPowerModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_MODE_ATTRIBUTE_ID, true);
    }

    public void subscribePowerModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfMeasurementTypesAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_MEASUREMENT_TYPES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_MEASUREMENT_TYPES_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfMeasurementTypesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_MEASUREMENT_TYPES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_MEASUREMENT_TYPES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAccuracyAttribute(
        AccuracyAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCURACY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ElectricalPowerMeasurementClusterMeasurementAccuracyStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCURACY_ATTRIBUTE_ID, true);
    }

    public void subscribeAccuracyAttribute(
        AccuracyAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCURACY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ElectricalPowerMeasurementClusterMeasurementAccuracyStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCURACY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRangesAttribute(
        RangesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RANGES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ElectricalPowerMeasurementClusterMeasurementRangeStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RANGES_ATTRIBUTE_ID, true);
    }

    public void subscribeRangesAttribute(
        RangesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RANGES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ElectricalPowerMeasurementClusterMeasurementRangeStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RANGES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readVoltageAttribute(
        VoltageAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VOLTAGE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VOLTAGE_ATTRIBUTE_ID, true);
    }

    public void subscribeVoltageAttribute(
        VoltageAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VOLTAGE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VOLTAGE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveCurrentAttribute(
        ActiveCurrentAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveCurrentAttribute(
        ActiveCurrentAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readReactiveCurrentAttribute(
        ReactiveCurrentAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACTIVE_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACTIVE_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeReactiveCurrentAttribute(
        ReactiveCurrentAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACTIVE_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACTIVE_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readApparentCurrentAttribute(
        ApparentCurrentAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPARENT_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPARENT_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeApparentCurrentAttribute(
        ApparentCurrentAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPARENT_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPARENT_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActivePowerAttribute(
        ActivePowerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_ATTRIBUTE_ID, true);
    }

    public void subscribeActivePowerAttribute(
        ActivePowerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readReactivePowerAttribute(
        ReactivePowerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACTIVE_POWER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACTIVE_POWER_ATTRIBUTE_ID, true);
    }

    public void subscribeReactivePowerAttribute(
        ReactivePowerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACTIVE_POWER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACTIVE_POWER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readApparentPowerAttribute(
        ApparentPowerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPARENT_POWER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPARENT_POWER_ATTRIBUTE_ID, true);
    }

    public void subscribeApparentPowerAttribute(
        ApparentPowerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPARENT_POWER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPARENT_POWER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRMSVoltageAttribute(
        RMSVoltageAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, R_M_S_VOLTAGE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, R_M_S_VOLTAGE_ATTRIBUTE_ID, true);
    }

    public void subscribeRMSVoltageAttribute(
        RMSVoltageAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, R_M_S_VOLTAGE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, R_M_S_VOLTAGE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRMSCurrentAttribute(
        RMSCurrentAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, R_M_S_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, R_M_S_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeRMSCurrentAttribute(
        RMSCurrentAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, R_M_S_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, R_M_S_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRMSPowerAttribute(
        RMSPowerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, R_M_S_POWER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, R_M_S_POWER_ATTRIBUTE_ID, true);
    }

    public void subscribeRMSPowerAttribute(
        RMSPowerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, R_M_S_POWER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, R_M_S_POWER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFrequencyAttribute(
        FrequencyAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FREQUENCY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FREQUENCY_ATTRIBUTE_ID, true);
    }

    public void subscribeFrequencyAttribute(
        FrequencyAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FREQUENCY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FREQUENCY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readHarmonicCurrentsAttribute(
        HarmonicCurrentsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HARMONIC_CURRENTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<ChipStructs.ElectricalPowerMeasurementClusterHarmonicMeasurementStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HARMONIC_CURRENTS_ATTRIBUTE_ID, true);
    }

    public void subscribeHarmonicCurrentsAttribute(
        HarmonicCurrentsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HARMONIC_CURRENTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<ChipStructs.ElectricalPowerMeasurementClusterHarmonicMeasurementStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HARMONIC_CURRENTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readHarmonicPhasesAttribute(
        HarmonicPhasesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HARMONIC_PHASES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<ChipStructs.ElectricalPowerMeasurementClusterHarmonicMeasurementStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HARMONIC_PHASES_ATTRIBUTE_ID, true);
    }

    public void subscribeHarmonicPhasesAttribute(
        HarmonicPhasesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HARMONIC_PHASES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<ChipStructs.ElectricalPowerMeasurementClusterHarmonicMeasurementStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HARMONIC_PHASES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPowerFactorAttribute(
        PowerFactorAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_FACTOR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_FACTOR_ATTRIBUTE_ID, true);
    }

    public void subscribePowerFactorAttribute(
        PowerFactorAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_FACTOR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_FACTOR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNeutralCurrentAttribute(
        NeutralCurrentAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NEUTRAL_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NEUTRAL_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeNeutralCurrentAttribute(
        NeutralCurrentAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NEUTRAL_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NEUTRAL_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ElectricalEnergyMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 145L;

    private static final long ACCURACY_ATTRIBUTE_ID = 0L;
    private static final long CUMULATIVE_ENERGY_IMPORTED_ATTRIBUTE_ID = 1L;
    private static final long CUMULATIVE_ENERGY_EXPORTED_ATTRIBUTE_ID = 2L;
    private static final long PERIODIC_ENERGY_IMPORTED_ATTRIBUTE_ID = 3L;
    private static final long PERIODIC_ENERGY_EXPORTED_ATTRIBUTE_ID = 4L;
    private static final long CUMULATIVE_ENERGY_RESET_ATTRIBUTE_ID = 5L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ElectricalEnergyMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface AccuracyAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.ElectricalEnergyMeasurementClusterMeasurementAccuracyStruct value);
    }

    public interface CumulativeEnergyImportedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ElectricalEnergyMeasurementClusterEnergyMeasurementStruct value);
    }

    public interface CumulativeEnergyExportedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ElectricalEnergyMeasurementClusterEnergyMeasurementStruct value);
    }

    public interface PeriodicEnergyImportedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ElectricalEnergyMeasurementClusterEnergyMeasurementStruct value);
    }

    public interface PeriodicEnergyExportedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ElectricalEnergyMeasurementClusterEnergyMeasurementStruct value);
    }

    public interface CumulativeEnergyResetAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ElectricalEnergyMeasurementClusterCumulativeEnergyResetStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readAccuracyAttribute(
        AccuracyAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCURACY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.ElectricalEnergyMeasurementClusterMeasurementAccuracyStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCURACY_ATTRIBUTE_ID, true);
    }

    public void subscribeAccuracyAttribute(
        AccuracyAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCURACY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.ElectricalEnergyMeasurementClusterMeasurementAccuracyStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCURACY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCumulativeEnergyImportedAttribute(
        CumulativeEnergyImportedAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CUMULATIVE_ENERGY_IMPORTED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ElectricalEnergyMeasurementClusterEnergyMeasurementStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CUMULATIVE_ENERGY_IMPORTED_ATTRIBUTE_ID, true);
    }

    public void subscribeCumulativeEnergyImportedAttribute(
        CumulativeEnergyImportedAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CUMULATIVE_ENERGY_IMPORTED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ElectricalEnergyMeasurementClusterEnergyMeasurementStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CUMULATIVE_ENERGY_IMPORTED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCumulativeEnergyExportedAttribute(
        CumulativeEnergyExportedAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CUMULATIVE_ENERGY_EXPORTED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ElectricalEnergyMeasurementClusterEnergyMeasurementStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CUMULATIVE_ENERGY_EXPORTED_ATTRIBUTE_ID, true);
    }

    public void subscribeCumulativeEnergyExportedAttribute(
        CumulativeEnergyExportedAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CUMULATIVE_ENERGY_EXPORTED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ElectricalEnergyMeasurementClusterEnergyMeasurementStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CUMULATIVE_ENERGY_EXPORTED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeriodicEnergyImportedAttribute(
        PeriodicEnergyImportedAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PERIODIC_ENERGY_IMPORTED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ElectricalEnergyMeasurementClusterEnergyMeasurementStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PERIODIC_ENERGY_IMPORTED_ATTRIBUTE_ID, true);
    }

    public void subscribePeriodicEnergyImportedAttribute(
        PeriodicEnergyImportedAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PERIODIC_ENERGY_IMPORTED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ElectricalEnergyMeasurementClusterEnergyMeasurementStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PERIODIC_ENERGY_IMPORTED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeriodicEnergyExportedAttribute(
        PeriodicEnergyExportedAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PERIODIC_ENERGY_EXPORTED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ElectricalEnergyMeasurementClusterEnergyMeasurementStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PERIODIC_ENERGY_EXPORTED_ATTRIBUTE_ID, true);
    }

    public void subscribePeriodicEnergyExportedAttribute(
        PeriodicEnergyExportedAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PERIODIC_ENERGY_EXPORTED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ElectricalEnergyMeasurementClusterEnergyMeasurementStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PERIODIC_ENERGY_EXPORTED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCumulativeEnergyResetAttribute(
        CumulativeEnergyResetAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CUMULATIVE_ENERGY_RESET_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ElectricalEnergyMeasurementClusterCumulativeEnergyResetStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CUMULATIVE_ENERGY_RESET_ATTRIBUTE_ID, true);
    }

    public void subscribeCumulativeEnergyResetAttribute(
        CumulativeEnergyResetAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CUMULATIVE_ENERGY_RESET_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ElectricalEnergyMeasurementClusterCumulativeEnergyResetStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CUMULATIVE_ENERGY_RESET_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class DemandResponseLoadControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 150L;

    private static final long LOAD_CONTROL_PROGRAMS_ATTRIBUTE_ID = 0L;
    private static final long NUMBER_OF_LOAD_CONTROL_PROGRAMS_ATTRIBUTE_ID = 1L;
    private static final long EVENTS_ATTRIBUTE_ID = 2L;
    private static final long ACTIVE_EVENTS_ATTRIBUTE_ID = 3L;
    private static final long NUMBER_OF_EVENTS_PER_PROGRAM_ATTRIBUTE_ID = 4L;
    private static final long NUMBER_OF_TRANSITIONS_ATTRIBUTE_ID = 5L;
    private static final long DEFAULT_RANDOM_START_ATTRIBUTE_ID = 6L;
    private static final long DEFAULT_RANDOM_DURATION_ATTRIBUTE_ID = 7L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public DemandResponseLoadControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void registerLoadControlProgramRequest(DefaultClusterCallback callback, ChipStructs.DemandResponseLoadControlClusterLoadControlProgramStruct loadControlProgram) {
      registerLoadControlProgramRequest(callback, loadControlProgram, 0);
    }

    public void registerLoadControlProgramRequest(DefaultClusterCallback callback, ChipStructs.DemandResponseLoadControlClusterLoadControlProgramStruct loadControlProgram, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long loadControlProgramFieldID = 0L;
      BaseTLVType loadControlProgramtlvValue = loadControlProgram.encodeTlv();
      elements.add(new StructElement(loadControlProgramFieldID, loadControlProgramtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void unregisterLoadControlProgramRequest(DefaultClusterCallback callback, byte[] loadControlProgramID) {
      unregisterLoadControlProgramRequest(callback, loadControlProgramID, 0);
    }

    public void unregisterLoadControlProgramRequest(DefaultClusterCallback callback, byte[] loadControlProgramID, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long loadControlProgramIDFieldID = 0L;
      BaseTLVType loadControlProgramIDtlvValue = new ByteArrayType(loadControlProgramID);
      elements.add(new StructElement(loadControlProgramIDFieldID, loadControlProgramIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void addLoadControlEventRequest(DefaultClusterCallback callback, ChipStructs.DemandResponseLoadControlClusterLoadControlEventStruct event) {
      addLoadControlEventRequest(callback, event, 0);
    }

    public void addLoadControlEventRequest(DefaultClusterCallback callback, ChipStructs.DemandResponseLoadControlClusterLoadControlEventStruct event, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long eventFieldID = 0L;
      BaseTLVType eventtlvValue = event.encodeTlv();
      elements.add(new StructElement(eventFieldID, eventtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void removeLoadControlEventRequest(DefaultClusterCallback callback, byte[] eventID, Integer cancelControl) {
      removeLoadControlEventRequest(callback, eventID, cancelControl, 0);
    }

    public void removeLoadControlEventRequest(DefaultClusterCallback callback, byte[] eventID, Integer cancelControl, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long eventIDFieldID = 0L;
      BaseTLVType eventIDtlvValue = new ByteArrayType(eventID);
      elements.add(new StructElement(eventIDFieldID, eventIDtlvValue));

      final long cancelControlFieldID = 1L;
      BaseTLVType cancelControltlvValue = new UIntType(cancelControl);
      elements.add(new StructElement(cancelControlFieldID, cancelControltlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void clearLoadControlEventsRequest(DefaultClusterCallback callback) {
      clearLoadControlEventsRequest(callback, 0);
    }

    public void clearLoadControlEventsRequest(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface LoadControlProgramsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.DemandResponseLoadControlClusterLoadControlProgramStruct> value);
    }

    public interface EventsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.DemandResponseLoadControlClusterLoadControlEventStruct> value);
    }

    public interface ActiveEventsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.DemandResponseLoadControlClusterLoadControlEventStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readLoadControlProgramsAttribute(
        LoadControlProgramsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOAD_CONTROL_PROGRAMS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DemandResponseLoadControlClusterLoadControlProgramStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOAD_CONTROL_PROGRAMS_ATTRIBUTE_ID, true);
    }

    public void subscribeLoadControlProgramsAttribute(
        LoadControlProgramsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOAD_CONTROL_PROGRAMS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DemandResponseLoadControlClusterLoadControlProgramStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOAD_CONTROL_PROGRAMS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfLoadControlProgramsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_LOAD_CONTROL_PROGRAMS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_LOAD_CONTROL_PROGRAMS_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfLoadControlProgramsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_LOAD_CONTROL_PROGRAMS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_LOAD_CONTROL_PROGRAMS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventsAttribute(
        EventsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DemandResponseLoadControlClusterLoadControlEventStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENTS_ATTRIBUTE_ID, true);
    }

    public void subscribeEventsAttribute(
        EventsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DemandResponseLoadControlClusterLoadControlEventStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveEventsAttribute(
        ActiveEventsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_EVENTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DemandResponseLoadControlClusterLoadControlEventStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_EVENTS_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveEventsAttribute(
        ActiveEventsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_EVENTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DemandResponseLoadControlClusterLoadControlEventStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_EVENTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfEventsPerProgramAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_EVENTS_PER_PROGRAM_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_EVENTS_PER_PROGRAM_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfEventsPerProgramAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_EVENTS_PER_PROGRAM_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_EVENTS_PER_PROGRAM_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfTransitionsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_TRANSITIONS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_TRANSITIONS_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfTransitionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_TRANSITIONS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_TRANSITIONS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDefaultRandomStartAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_RANDOM_START_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_RANDOM_START_ATTRIBUTE_ID, true);
    }

    public void writeDefaultRandomStartAttribute(DefaultClusterCallback callback, Integer value) {
      writeDefaultRandomStartAttribute(callback, value, 0);
    }

    public void writeDefaultRandomStartAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), DEFAULT_RANDOM_START_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeDefaultRandomStartAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_RANDOM_START_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_RANDOM_START_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDefaultRandomDurationAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_RANDOM_DURATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_RANDOM_DURATION_ATTRIBUTE_ID, true);
    }

    public void writeDefaultRandomDurationAttribute(DefaultClusterCallback callback, Integer value) {
      writeDefaultRandomDurationAttribute(callback, value, 0);
    }

    public void writeDefaultRandomDurationAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), DEFAULT_RANDOM_DURATION_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeDefaultRandomDurationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_RANDOM_DURATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_RANDOM_DURATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class MessagesCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 151L;

    private static final long MESSAGES_ATTRIBUTE_ID = 0L;
    private static final long ACTIVE_MESSAGE_I_DS_ATTRIBUTE_ID = 1L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public MessagesCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void presentMessagesRequest(DefaultClusterCallback callback, byte[] messageID, Integer priority, Integer messageControl, @Nullable Long startTime, @Nullable Long duration, String messageText, Optional<ArrayList<ChipStructs.MessagesClusterMessageResponseOptionStruct>> responses) {
      presentMessagesRequest(callback, messageID, priority, messageControl, startTime, duration, messageText, responses, 0);
    }

    public void presentMessagesRequest(DefaultClusterCallback callback, byte[] messageID, Integer priority, Integer messageControl, @Nullable Long startTime, @Nullable Long duration, String messageText, Optional<ArrayList<ChipStructs.MessagesClusterMessageResponseOptionStruct>> responses, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long messageIDFieldID = 0L;
      BaseTLVType messageIDtlvValue = new ByteArrayType(messageID);
      elements.add(new StructElement(messageIDFieldID, messageIDtlvValue));

      final long priorityFieldID = 1L;
      BaseTLVType prioritytlvValue = new UIntType(priority);
      elements.add(new StructElement(priorityFieldID, prioritytlvValue));

      final long messageControlFieldID = 2L;
      BaseTLVType messageControltlvValue = new UIntType(messageControl);
      elements.add(new StructElement(messageControlFieldID, messageControltlvValue));

      final long startTimeFieldID = 3L;
      BaseTLVType startTimetlvValue = startTime != null ? new UIntType(startTime) : new NullType();
      elements.add(new StructElement(startTimeFieldID, startTimetlvValue));

      final long durationFieldID = 4L;
      BaseTLVType durationtlvValue = duration != null ? new UIntType(duration) : new NullType();
      elements.add(new StructElement(durationFieldID, durationtlvValue));

      final long messageTextFieldID = 5L;
      BaseTLVType messageTexttlvValue = new StringType(messageText);
      elements.add(new StructElement(messageTextFieldID, messageTexttlvValue));

      final long responsesFieldID = 6L;
      BaseTLVType responsestlvValue = responses.<BaseTLVType>map((nonOptionalresponses) -> ArrayType.generateArrayType(nonOptionalresponses, (elementnonOptionalresponses) -> elementnonOptionalresponses.encodeTlv())).orElse(new EmptyType());
      elements.add(new StructElement(responsesFieldID, responsestlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void cancelMessagesRequest(DefaultClusterCallback callback, ArrayList<byte[]> messageIDs) {
      cancelMessagesRequest(callback, messageIDs, 0);
    }

    public void cancelMessagesRequest(DefaultClusterCallback callback, ArrayList<byte[]> messageIDs, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long messageIDsFieldID = 0L;
      BaseTLVType messageIDstlvValue = ArrayType.generateArrayType(messageIDs, (elementmessageIDs) -> new ByteArrayType(elementmessageIDs));
      elements.add(new StructElement(messageIDsFieldID, messageIDstlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface MessagesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.MessagesClusterMessageStruct> value);
    }

    public interface ActiveMessageIDsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<byte[]> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMessagesAttribute(
        MessagesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MESSAGES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.MessagesClusterMessageStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MESSAGES_ATTRIBUTE_ID, true);
    }

    public void subscribeMessagesAttribute(
        MessagesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MESSAGES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.MessagesClusterMessageStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MESSAGES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveMessageIDsAttribute(
        ActiveMessageIDsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_MESSAGE_I_DS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_MESSAGE_I_DS_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveMessageIDsAttribute(
        ActiveMessageIDsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_MESSAGE_I_DS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_MESSAGE_I_DS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class DeviceEnergyManagementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 152L;

    private static final long E_S_A_TYPE_ATTRIBUTE_ID = 0L;
    private static final long E_S_A_CAN_GENERATE_ATTRIBUTE_ID = 1L;
    private static final long E_S_A_STATE_ATTRIBUTE_ID = 2L;
    private static final long ABS_MIN_POWER_ATTRIBUTE_ID = 3L;
    private static final long ABS_MAX_POWER_ATTRIBUTE_ID = 4L;
    private static final long POWER_ADJUSTMENT_CAPABILITY_ATTRIBUTE_ID = 5L;
    private static final long FORECAST_ATTRIBUTE_ID = 6L;
    private static final long OPT_OUT_STATE_ATTRIBUTE_ID = 7L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public DeviceEnergyManagementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void powerAdjustRequest(DefaultClusterCallback callback, Long power, Long duration, Integer cause) {
      powerAdjustRequest(callback, power, duration, cause, 0);
    }

    public void powerAdjustRequest(DefaultClusterCallback callback, Long power, Long duration, Integer cause, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long powerFieldID = 0L;
      BaseTLVType powertlvValue = new IntType(power);
      elements.add(new StructElement(powerFieldID, powertlvValue));

      final long durationFieldID = 1L;
      BaseTLVType durationtlvValue = new UIntType(duration);
      elements.add(new StructElement(durationFieldID, durationtlvValue));

      final long causeFieldID = 2L;
      BaseTLVType causetlvValue = new UIntType(cause);
      elements.add(new StructElement(causeFieldID, causetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void cancelPowerAdjustRequest(DefaultClusterCallback callback) {
      cancelPowerAdjustRequest(callback, 0);
    }

    public void cancelPowerAdjustRequest(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void startTimeAdjustRequest(DefaultClusterCallback callback, Long requestedStartTime, Integer cause) {
      startTimeAdjustRequest(callback, requestedStartTime, cause, 0);
    }

    public void startTimeAdjustRequest(DefaultClusterCallback callback, Long requestedStartTime, Integer cause, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long requestedStartTimeFieldID = 0L;
      BaseTLVType requestedStartTimetlvValue = new UIntType(requestedStartTime);
      elements.add(new StructElement(requestedStartTimeFieldID, requestedStartTimetlvValue));

      final long causeFieldID = 1L;
      BaseTLVType causetlvValue = new UIntType(cause);
      elements.add(new StructElement(causeFieldID, causetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void pauseRequest(DefaultClusterCallback callback, Long duration, Integer cause) {
      pauseRequest(callback, duration, cause, 0);
    }

    public void pauseRequest(DefaultClusterCallback callback, Long duration, Integer cause, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long durationFieldID = 0L;
      BaseTLVType durationtlvValue = new UIntType(duration);
      elements.add(new StructElement(durationFieldID, durationtlvValue));

      final long causeFieldID = 1L;
      BaseTLVType causetlvValue = new UIntType(cause);
      elements.add(new StructElement(causeFieldID, causetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void resumeRequest(DefaultClusterCallback callback) {
      resumeRequest(callback, 0);
    }

    public void resumeRequest(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void modifyForecastRequest(DefaultClusterCallback callback, Long forecastId, ArrayList<ChipStructs.DeviceEnergyManagementClusterSlotAdjustmentStruct> slotAdjustments, Integer cause) {
      modifyForecastRequest(callback, forecastId, slotAdjustments, cause, 0);
    }

    public void modifyForecastRequest(DefaultClusterCallback callback, Long forecastId, ArrayList<ChipStructs.DeviceEnergyManagementClusterSlotAdjustmentStruct> slotAdjustments, Integer cause, int timedInvokeTimeoutMs) {
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long forecastIdFieldID = 0L;
      BaseTLVType forecastIdtlvValue = new UIntType(forecastId);
      elements.add(new StructElement(forecastIdFieldID, forecastIdtlvValue));

      final long slotAdjustmentsFieldID = 1L;
      BaseTLVType slotAdjustmentstlvValue = ArrayType.generateArrayType(slotAdjustments, (elementslotAdjustments) -> elementslotAdjustments.encodeTlv());
      elements.add(new StructElement(slotAdjustmentsFieldID, slotAdjustmentstlvValue));

      final long causeFieldID = 2L;
      BaseTLVType causetlvValue = new UIntType(cause);
      elements.add(new StructElement(causeFieldID, causetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void requestConstraintBasedForecast(DefaultClusterCallback callback, ArrayList<ChipStructs.DeviceEnergyManagementClusterConstraintsStruct> constraints, Integer cause) {
      requestConstraintBasedForecast(callback, constraints, cause, 0);
    }

    public void requestConstraintBasedForecast(DefaultClusterCallback callback, ArrayList<ChipStructs.DeviceEnergyManagementClusterConstraintsStruct> constraints, Integer cause, int timedInvokeTimeoutMs) {
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long constraintsFieldID = 0L;
      BaseTLVType constraintstlvValue = ArrayType.generateArrayType(constraints, (elementconstraints) -> elementconstraints.encodeTlv());
      elements.add(new StructElement(constraintsFieldID, constraintstlvValue));

      final long causeFieldID = 1L;
      BaseTLVType causetlvValue = new UIntType(cause);
      elements.add(new StructElement(causeFieldID, causetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void cancelRequest(DefaultClusterCallback callback) {
      cancelRequest(callback, 0);
    }

    public void cancelRequest(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface PowerAdjustmentCapabilityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable List<ChipStructs.DeviceEnergyManagementClusterPowerAdjustStruct> value);
    }

    public interface ForecastAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.DeviceEnergyManagementClusterForecastStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readESATypeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, E_S_A_TYPE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, E_S_A_TYPE_ATTRIBUTE_ID, true);
    }

    public void subscribeESATypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, E_S_A_TYPE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, E_S_A_TYPE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readESACanGenerateAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, E_S_A_CAN_GENERATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, E_S_A_CAN_GENERATE_ATTRIBUTE_ID, true);
    }

    public void subscribeESACanGenerateAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, E_S_A_CAN_GENERATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, E_S_A_CAN_GENERATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readESAStateAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, E_S_A_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, E_S_A_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeESAStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, E_S_A_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, E_S_A_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAbsMinPowerAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ABS_MIN_POWER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ABS_MIN_POWER_ATTRIBUTE_ID, true);
    }

    public void subscribeAbsMinPowerAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ABS_MIN_POWER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ABS_MIN_POWER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAbsMaxPowerAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ABS_MAX_POWER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ABS_MAX_POWER_ATTRIBUTE_ID, true);
    }

    public void subscribeAbsMaxPowerAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ABS_MAX_POWER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ABS_MAX_POWER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPowerAdjustmentCapabilityAttribute(
        PowerAdjustmentCapabilityAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_ADJUSTMENT_CAPABILITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<ChipStructs.DeviceEnergyManagementClusterPowerAdjustStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_ADJUSTMENT_CAPABILITY_ATTRIBUTE_ID, true);
    }

    public void subscribePowerAdjustmentCapabilityAttribute(
        PowerAdjustmentCapabilityAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_ADJUSTMENT_CAPABILITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<ChipStructs.DeviceEnergyManagementClusterPowerAdjustStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_ADJUSTMENT_CAPABILITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readForecastAttribute(
        ForecastAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FORECAST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.DeviceEnergyManagementClusterForecastStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FORECAST_ATTRIBUTE_ID, true);
    }

    public void subscribeForecastAttribute(
        ForecastAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FORECAST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.DeviceEnergyManagementClusterForecastStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FORECAST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOptOutStateAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPT_OUT_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPT_OUT_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeOptOutStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPT_OUT_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPT_OUT_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class EnergyEvseCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 153L;

    private static final long STATE_ATTRIBUTE_ID = 0L;
    private static final long SUPPLY_STATE_ATTRIBUTE_ID = 1L;
    private static final long FAULT_STATE_ATTRIBUTE_ID = 2L;
    private static final long CHARGING_ENABLED_UNTIL_ATTRIBUTE_ID = 3L;
    private static final long DISCHARGING_ENABLED_UNTIL_ATTRIBUTE_ID = 4L;
    private static final long CIRCUIT_CAPACITY_ATTRIBUTE_ID = 5L;
    private static final long MINIMUM_CHARGE_CURRENT_ATTRIBUTE_ID = 6L;
    private static final long MAXIMUM_CHARGE_CURRENT_ATTRIBUTE_ID = 7L;
    private static final long MAXIMUM_DISCHARGE_CURRENT_ATTRIBUTE_ID = 8L;
    private static final long USER_MAXIMUM_CHARGE_CURRENT_ATTRIBUTE_ID = 9L;
    private static final long RANDOMIZATION_DELAY_WINDOW_ATTRIBUTE_ID = 10L;
    private static final long NEXT_CHARGE_START_TIME_ATTRIBUTE_ID = 35L;
    private static final long NEXT_CHARGE_TARGET_TIME_ATTRIBUTE_ID = 36L;
    private static final long NEXT_CHARGE_REQUIRED_ENERGY_ATTRIBUTE_ID = 37L;
    private static final long NEXT_CHARGE_TARGET_SO_C_ATTRIBUTE_ID = 38L;
    private static final long APPROXIMATE_E_V_EFFICIENCY_ATTRIBUTE_ID = 39L;
    private static final long STATE_OF_CHARGE_ATTRIBUTE_ID = 48L;
    private static final long BATTERY_CAPACITY_ATTRIBUTE_ID = 49L;
    private static final long VEHICLE_I_D_ATTRIBUTE_ID = 50L;
    private static final long SESSION_I_D_ATTRIBUTE_ID = 64L;
    private static final long SESSION_DURATION_ATTRIBUTE_ID = 65L;
    private static final long SESSION_ENERGY_CHARGED_ATTRIBUTE_ID = 66L;
    private static final long SESSION_ENERGY_DISCHARGED_ATTRIBUTE_ID = 67L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public EnergyEvseCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }


    public void disable(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void enableCharging(DefaultClusterCallback callback, @Nullable Long chargingEnabledUntil, Long minimumChargeCurrent, Long maximumChargeCurrent, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long chargingEnabledUntilFieldID = 0L;
      BaseTLVType chargingEnabledUntiltlvValue = chargingEnabledUntil != null ? new UIntType(chargingEnabledUntil) : new NullType();
      elements.add(new StructElement(chargingEnabledUntilFieldID, chargingEnabledUntiltlvValue));

      final long minimumChargeCurrentFieldID = 1L;
      BaseTLVType minimumChargeCurrenttlvValue = new IntType(minimumChargeCurrent);
      elements.add(new StructElement(minimumChargeCurrentFieldID, minimumChargeCurrenttlvValue));

      final long maximumChargeCurrentFieldID = 2L;
      BaseTLVType maximumChargeCurrenttlvValue = new IntType(maximumChargeCurrent);
      elements.add(new StructElement(maximumChargeCurrentFieldID, maximumChargeCurrenttlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void enableDischarging(DefaultClusterCallback callback, @Nullable Long dischargingEnabledUntil, Long maximumDischargeCurrent, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long dischargingEnabledUntilFieldID = 0L;
      BaseTLVType dischargingEnabledUntiltlvValue = dischargingEnabledUntil != null ? new UIntType(dischargingEnabledUntil) : new NullType();
      elements.add(new StructElement(dischargingEnabledUntilFieldID, dischargingEnabledUntiltlvValue));

      final long maximumDischargeCurrentFieldID = 1L;
      BaseTLVType maximumDischargeCurrenttlvValue = new IntType(maximumDischargeCurrent);
      elements.add(new StructElement(maximumDischargeCurrentFieldID, maximumDischargeCurrenttlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void startDiagnostics(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void setTargets(DefaultClusterCallback callback, ArrayList<ChipStructs.EnergyEvseClusterChargingTargetScheduleStruct> chargingTargetSchedules, int timedInvokeTimeoutMs) {
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long chargingTargetSchedulesFieldID = 0L;
      BaseTLVType chargingTargetSchedulestlvValue = ArrayType.generateArrayType(chargingTargetSchedules, (elementchargingTargetSchedules) -> elementchargingTargetSchedules.encodeTlv());
      elements.add(new StructElement(chargingTargetSchedulesFieldID, chargingTargetSchedulestlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void getTargets(GetTargetsResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long chargingTargetSchedulesFieldID = 0L;
          ArrayList<ChipStructs.EnergyEvseClusterChargingTargetScheduleStruct> chargingTargetSchedules = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == chargingTargetSchedulesFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                chargingTargetSchedules = castingValue.map((elementcastingValue) -> ChipStructs.EnergyEvseClusterChargingTargetScheduleStruct.decodeTlv(elementcastingValue));
              }
            }
          }
          callback.onSuccess(chargingTargetSchedules);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void clearTargets(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface GetTargetsResponseCallback extends BaseClusterCallback {
      void onSuccess(ArrayList<ChipStructs.EnergyEvseClusterChargingTargetScheduleStruct> chargingTargetSchedules);
    }

    public interface StateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ChargingEnabledUntilAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface DischargingEnabledUntilAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NextChargeStartTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NextChargeTargetTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NextChargeRequiredEnergyAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NextChargeTargetSoCAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ApproximateEVEfficiencyAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface StateOfChargeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface BatteryCapacityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface VehicleIDAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable String value);
    }

    public interface SessionIDAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface SessionDurationAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface SessionEnergyChargedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface SessionEnergyDischargedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readStateAttribute(
        StateAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeStateAttribute(
        StateAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSupplyStateAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPLY_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPLY_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeSupplyStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPLY_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPLY_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFaultStateAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FAULT_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FAULT_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeFaultStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FAULT_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FAULT_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readChargingEnabledUntilAttribute(
        ChargingEnabledUntilAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHARGING_ENABLED_UNTIL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHARGING_ENABLED_UNTIL_ATTRIBUTE_ID, true);
    }

    public void subscribeChargingEnabledUntilAttribute(
        ChargingEnabledUntilAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHARGING_ENABLED_UNTIL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHARGING_ENABLED_UNTIL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDischargingEnabledUntilAttribute(
        DischargingEnabledUntilAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DISCHARGING_ENABLED_UNTIL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DISCHARGING_ENABLED_UNTIL_ATTRIBUTE_ID, true);
    }

    public void subscribeDischargingEnabledUntilAttribute(
        DischargingEnabledUntilAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DISCHARGING_ENABLED_UNTIL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DISCHARGING_ENABLED_UNTIL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCircuitCapacityAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CIRCUIT_CAPACITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CIRCUIT_CAPACITY_ATTRIBUTE_ID, true);
    }

    public void subscribeCircuitCapacityAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CIRCUIT_CAPACITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CIRCUIT_CAPACITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinimumChargeCurrentAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MINIMUM_CHARGE_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MINIMUM_CHARGE_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeMinimumChargeCurrentAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MINIMUM_CHARGE_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MINIMUM_CHARGE_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaximumChargeCurrentAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAXIMUM_CHARGE_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAXIMUM_CHARGE_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeMaximumChargeCurrentAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAXIMUM_CHARGE_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAXIMUM_CHARGE_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaximumDischargeCurrentAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAXIMUM_DISCHARGE_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAXIMUM_DISCHARGE_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeMaximumDischargeCurrentAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAXIMUM_DISCHARGE_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAXIMUM_DISCHARGE_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUserMaximumChargeCurrentAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, USER_MAXIMUM_CHARGE_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, USER_MAXIMUM_CHARGE_CURRENT_ATTRIBUTE_ID, true);
    }

    public void writeUserMaximumChargeCurrentAttribute(DefaultClusterCallback callback, Long value) {
      writeUserMaximumChargeCurrentAttribute(callback, value, 0);
    }

    public void writeUserMaximumChargeCurrentAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), USER_MAXIMUM_CHARGE_CURRENT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeUserMaximumChargeCurrentAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, USER_MAXIMUM_CHARGE_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, USER_MAXIMUM_CHARGE_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRandomizationDelayWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RANDOMIZATION_DELAY_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RANDOMIZATION_DELAY_WINDOW_ATTRIBUTE_ID, true);
    }

    public void writeRandomizationDelayWindowAttribute(DefaultClusterCallback callback, Long value) {
      writeRandomizationDelayWindowAttribute(callback, value, 0);
    }

    public void writeRandomizationDelayWindowAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), RANDOMIZATION_DELAY_WINDOW_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRandomizationDelayWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RANDOMIZATION_DELAY_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RANDOMIZATION_DELAY_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNextChargeStartTimeAttribute(
        NextChargeStartTimeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NEXT_CHARGE_START_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NEXT_CHARGE_START_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeNextChargeStartTimeAttribute(
        NextChargeStartTimeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NEXT_CHARGE_START_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NEXT_CHARGE_START_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNextChargeTargetTimeAttribute(
        NextChargeTargetTimeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NEXT_CHARGE_TARGET_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NEXT_CHARGE_TARGET_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeNextChargeTargetTimeAttribute(
        NextChargeTargetTimeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NEXT_CHARGE_TARGET_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NEXT_CHARGE_TARGET_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNextChargeRequiredEnergyAttribute(
        NextChargeRequiredEnergyAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NEXT_CHARGE_REQUIRED_ENERGY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NEXT_CHARGE_REQUIRED_ENERGY_ATTRIBUTE_ID, true);
    }

    public void subscribeNextChargeRequiredEnergyAttribute(
        NextChargeRequiredEnergyAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NEXT_CHARGE_REQUIRED_ENERGY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NEXT_CHARGE_REQUIRED_ENERGY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNextChargeTargetSoCAttribute(
        NextChargeTargetSoCAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NEXT_CHARGE_TARGET_SO_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NEXT_CHARGE_TARGET_SO_C_ATTRIBUTE_ID, true);
    }

    public void subscribeNextChargeTargetSoCAttribute(
        NextChargeTargetSoCAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NEXT_CHARGE_TARGET_SO_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NEXT_CHARGE_TARGET_SO_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readApproximateEVEfficiencyAttribute(
        ApproximateEVEfficiencyAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPROXIMATE_E_V_EFFICIENCY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPROXIMATE_E_V_EFFICIENCY_ATTRIBUTE_ID, true);
    }

    public void writeApproximateEVEfficiencyAttribute(DefaultClusterCallback callback, Integer value) {
      writeApproximateEVEfficiencyAttribute(callback, value, 0);
    }

    public void writeApproximateEVEfficiencyAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), APPROXIMATE_E_V_EFFICIENCY_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeApproximateEVEfficiencyAttribute(
        ApproximateEVEfficiencyAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPROXIMATE_E_V_EFFICIENCY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPROXIMATE_E_V_EFFICIENCY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStateOfChargeAttribute(
        StateOfChargeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STATE_OF_CHARGE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STATE_OF_CHARGE_ATTRIBUTE_ID, true);
    }

    public void subscribeStateOfChargeAttribute(
        StateOfChargeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STATE_OF_CHARGE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STATE_OF_CHARGE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBatteryCapacityAttribute(
        BatteryCapacityAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BATTERY_CAPACITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BATTERY_CAPACITY_ATTRIBUTE_ID, true);
    }

    public void subscribeBatteryCapacityAttribute(
        BatteryCapacityAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BATTERY_CAPACITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BATTERY_CAPACITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readVehicleIDAttribute(
        VehicleIDAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VEHICLE_I_D_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VEHICLE_I_D_ATTRIBUTE_ID, true);
    }

    public void subscribeVehicleIDAttribute(
        VehicleIDAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VEHICLE_I_D_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VEHICLE_I_D_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSessionIDAttribute(
        SessionIDAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SESSION_I_D_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SESSION_I_D_ATTRIBUTE_ID, true);
    }

    public void subscribeSessionIDAttribute(
        SessionIDAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SESSION_I_D_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SESSION_I_D_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSessionDurationAttribute(
        SessionDurationAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SESSION_DURATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SESSION_DURATION_ATTRIBUTE_ID, true);
    }

    public void subscribeSessionDurationAttribute(
        SessionDurationAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SESSION_DURATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SESSION_DURATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSessionEnergyChargedAttribute(
        SessionEnergyChargedAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SESSION_ENERGY_CHARGED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SESSION_ENERGY_CHARGED_ATTRIBUTE_ID, true);
    }

    public void subscribeSessionEnergyChargedAttribute(
        SessionEnergyChargedAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SESSION_ENERGY_CHARGED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SESSION_ENERGY_CHARGED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSessionEnergyDischargedAttribute(
        SessionEnergyDischargedAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SESSION_ENERGY_DISCHARGED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SESSION_ENERGY_DISCHARGED_ATTRIBUTE_ID, true);
    }

    public void subscribeSessionEnergyDischargedAttribute(
        SessionEnergyDischargedAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SESSION_ENERGY_DISCHARGED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SESSION_ENERGY_DISCHARGED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class EnergyPreferenceCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 155L;

    private static final long ENERGY_BALANCES_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_ENERGY_BALANCE_ATTRIBUTE_ID = 1L;
    private static final long ENERGY_PRIORITIES_ATTRIBUTE_ID = 2L;
    private static final long LOW_POWER_MODE_SENSITIVITIES_ATTRIBUTE_ID = 3L;
    private static final long CURRENT_LOW_POWER_MODE_SENSITIVITY_ATTRIBUTE_ID = 4L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public EnergyPreferenceCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface EnergyBalancesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.EnergyPreferenceClusterBalanceStruct> value);
    }

    public interface EnergyPrioritiesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface LowPowerModeSensitivitiesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.EnergyPreferenceClusterBalanceStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readEnergyBalancesAttribute(
        EnergyBalancesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENERGY_BALANCES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.EnergyPreferenceClusterBalanceStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENERGY_BALANCES_ATTRIBUTE_ID, true);
    }

    public void subscribeEnergyBalancesAttribute(
        EnergyBalancesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENERGY_BALANCES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.EnergyPreferenceClusterBalanceStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENERGY_BALANCES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentEnergyBalanceAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_ENERGY_BALANCE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_ENERGY_BALANCE_ATTRIBUTE_ID, true);
    }

    public void writeCurrentEnergyBalanceAttribute(DefaultClusterCallback callback, Integer value) {
      writeCurrentEnergyBalanceAttribute(callback, value, 0);
    }

    public void writeCurrentEnergyBalanceAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), CURRENT_ENERGY_BALANCE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeCurrentEnergyBalanceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_ENERGY_BALANCE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_ENERGY_BALANCE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEnergyPrioritiesAttribute(
        EnergyPrioritiesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENERGY_PRIORITIES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENERGY_PRIORITIES_ATTRIBUTE_ID, true);
    }

    public void subscribeEnergyPrioritiesAttribute(
        EnergyPrioritiesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENERGY_PRIORITIES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENERGY_PRIORITIES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLowPowerModeSensitivitiesAttribute(
        LowPowerModeSensitivitiesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOW_POWER_MODE_SENSITIVITIES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.EnergyPreferenceClusterBalanceStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOW_POWER_MODE_SENSITIVITIES_ATTRIBUTE_ID, true);
    }

    public void subscribeLowPowerModeSensitivitiesAttribute(
        LowPowerModeSensitivitiesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOW_POWER_MODE_SENSITIVITIES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.EnergyPreferenceClusterBalanceStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOW_POWER_MODE_SENSITIVITIES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentLowPowerModeSensitivityAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_LOW_POWER_MODE_SENSITIVITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_LOW_POWER_MODE_SENSITIVITY_ATTRIBUTE_ID, true);
    }

    public void writeCurrentLowPowerModeSensitivityAttribute(DefaultClusterCallback callback, Integer value) {
      writeCurrentLowPowerModeSensitivityAttribute(callback, value, 0);
    }

    public void writeCurrentLowPowerModeSensitivityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), CURRENT_LOW_POWER_MODE_SENSITIVITY_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeCurrentLowPowerModeSensitivityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_LOW_POWER_MODE_SENSITIVITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_LOW_POWER_MODE_SENSITIVITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class PowerTopologyCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 156L;

    private static final long AVAILABLE_ENDPOINTS_ATTRIBUTE_ID = 0L;
    private static final long ACTIVE_ENDPOINTS_ATTRIBUTE_ID = 1L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public PowerTopologyCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface AvailableEndpointsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface ActiveEndpointsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readAvailableEndpointsAttribute(
        AvailableEndpointsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVAILABLE_ENDPOINTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVAILABLE_ENDPOINTS_ATTRIBUTE_ID, true);
    }

    public void subscribeAvailableEndpointsAttribute(
        AvailableEndpointsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVAILABLE_ENDPOINTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVAILABLE_ENDPOINTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveEndpointsAttribute(
        ActiveEndpointsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_ENDPOINTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_ENDPOINTS_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveEndpointsAttribute(
        ActiveEndpointsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_ENDPOINTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_ENDPOINTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class EnergyEvseModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 157L;

    private static final long SUPPORTED_MODES_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_MODE_ATTRIBUTE_ID = 1L;
    private static final long START_UP_MODE_ATTRIBUTE_ID = 2L;
    private static final long ON_MODE_ATTRIBUTE_ID = 3L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public EnergyEvseModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(callback, newMode, 0);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newModeFieldID = 0L;
      BaseTLVType newModetlvValue = new UIntType(newMode);
      elements.add(new StructElement(newModeFieldID, newModetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long statusTextFieldID = 1L;
          Optional<String> statusText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                statusText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, statusText);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface ChangeToModeResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> statusText);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.EnergyEvseModeClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.EnergyEvseModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.EnergyEvseModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_MODE_ATTRIBUTE_ID, true);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpModeAttribute(callback, value, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), START_UP_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_MODE_ATTRIBUTE_ID, true);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnModeAttribute(callback, value, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), ON_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class DeviceEnergyManagementModeCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 159L;

    private static final long SUPPORTED_MODES_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_MODE_ATTRIBUTE_ID = 1L;
    private static final long START_UP_MODE_ATTRIBUTE_ID = 2L;
    private static final long ON_MODE_ATTRIBUTE_ID = 3L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public DeviceEnergyManagementModeCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode) {
      changeToMode(callback, newMode, 0);
    }

    public void changeToMode(ChangeToModeResponseCallback callback, Integer newMode, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long newModeFieldID = 0L;
      BaseTLVType newModetlvValue = new UIntType(newMode);
      elements.add(new StructElement(newModeFieldID, newModetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long statusTextFieldID = 1L;
          Optional<String> statusText = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusTextFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                statusText = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, statusText);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface ChangeToModeResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> statusText);
    }

    public interface SupportedModesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.DeviceEnergyManagementModeClusterModeOptionStruct> value);
    }

    public interface StartUpModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OnModeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSupportedModesAttribute(
        SupportedModesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DeviceEnergyManagementModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedModesAttribute(
        SupportedModesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_MODES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.DeviceEnergyManagementModeClusterModeOptionStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_MODES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStartUpModeAttribute(
        StartUpModeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_MODE_ATTRIBUTE_ID, true);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpModeAttribute(callback, value, 0);
    }

    public void writeStartUpModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), START_UP_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpModeAttribute(
        StartUpModeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOnModeAttribute(
        OnModeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_MODE_ATTRIBUTE_ID, true);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOnModeAttribute(callback, value, 0);
    }

    public void writeOnModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), ON_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOnModeAttribute(
        OnModeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class DoorLockCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 257L;

    private static final long LOCK_STATE_ATTRIBUTE_ID = 0L;
    private static final long LOCK_TYPE_ATTRIBUTE_ID = 1L;
    private static final long ACTUATOR_ENABLED_ATTRIBUTE_ID = 2L;
    private static final long DOOR_STATE_ATTRIBUTE_ID = 3L;
    private static final long DOOR_OPEN_EVENTS_ATTRIBUTE_ID = 4L;
    private static final long DOOR_CLOSED_EVENTS_ATTRIBUTE_ID = 5L;
    private static final long OPEN_PERIOD_ATTRIBUTE_ID = 6L;
    private static final long NUMBER_OF_TOTAL_USERS_SUPPORTED_ATTRIBUTE_ID = 17L;
    private static final long NUMBER_OF_P_I_N_USERS_SUPPORTED_ATTRIBUTE_ID = 18L;
    private static final long NUMBER_OF_R_F_I_D_USERS_SUPPORTED_ATTRIBUTE_ID = 19L;
    private static final long NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER_ATTRIBUTE_ID = 20L;
    private static final long NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER_ATTRIBUTE_ID = 21L;
    private static final long NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED_ATTRIBUTE_ID = 22L;
    private static final long MAX_P_I_N_CODE_LENGTH_ATTRIBUTE_ID = 23L;
    private static final long MIN_P_I_N_CODE_LENGTH_ATTRIBUTE_ID = 24L;
    private static final long MAX_R_F_I_D_CODE_LENGTH_ATTRIBUTE_ID = 25L;
    private static final long MIN_R_F_I_D_CODE_LENGTH_ATTRIBUTE_ID = 26L;
    private static final long CREDENTIAL_RULES_SUPPORT_ATTRIBUTE_ID = 27L;
    private static final long NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER_ATTRIBUTE_ID = 28L;
    private static final long LANGUAGE_ATTRIBUTE_ID = 33L;
    private static final long L_E_D_SETTINGS_ATTRIBUTE_ID = 34L;
    private static final long AUTO_RELOCK_TIME_ATTRIBUTE_ID = 35L;
    private static final long SOUND_VOLUME_ATTRIBUTE_ID = 36L;
    private static final long OPERATING_MODE_ATTRIBUTE_ID = 37L;
    private static final long SUPPORTED_OPERATING_MODES_ATTRIBUTE_ID = 38L;
    private static final long DEFAULT_CONFIGURATION_REGISTER_ATTRIBUTE_ID = 39L;
    private static final long ENABLE_LOCAL_PROGRAMMING_ATTRIBUTE_ID = 40L;
    private static final long ENABLE_ONE_TOUCH_LOCKING_ATTRIBUTE_ID = 41L;
    private static final long ENABLE_INSIDE_STATUS_L_E_D_ATTRIBUTE_ID = 42L;
    private static final long ENABLE_PRIVACY_MODE_BUTTON_ATTRIBUTE_ID = 43L;
    private static final long LOCAL_PROGRAMMING_FEATURES_ATTRIBUTE_ID = 44L;
    private static final long WRONG_CODE_ENTRY_LIMIT_ATTRIBUTE_ID = 48L;
    private static final long USER_CODE_TEMPORARY_DISABLE_TIME_ATTRIBUTE_ID = 49L;
    private static final long SEND_P_I_N_OVER_THE_AIR_ATTRIBUTE_ID = 50L;
    private static final long REQUIRE_P_I_NFOR_REMOTE_OPERATION_ATTRIBUTE_ID = 51L;
    private static final long EXPIRING_USER_TIMEOUT_ATTRIBUTE_ID = 53L;
    private static final long ALIRO_READER_VERIFICATION_KEY_ATTRIBUTE_ID = 128L;
    private static final long ALIRO_READER_GROUP_IDENTIFIER_ATTRIBUTE_ID = 129L;
    private static final long ALIRO_READER_GROUP_SUB_IDENTIFIER_ATTRIBUTE_ID = 130L;
    private static final long ALIRO_EXPEDITED_TRANSACTION_SUPPORTED_PROTOCOL_VERSIONS_ATTRIBUTE_ID = 131L;
    private static final long ALIRO_GROUP_RESOLVING_KEY_ATTRIBUTE_ID = 132L;
    private static final long ALIRO_SUPPORTED_B_L_E_U_W_B_PROTOCOL_VERSIONS_ATTRIBUTE_ID = 133L;
    private static final long ALIRO_B_L_E_ADVERTISING_VERSION_ATTRIBUTE_ID = 134L;
    private static final long NUMBER_OF_ALIRO_CREDENTIAL_ISSUER_KEYS_SUPPORTED_ATTRIBUTE_ID = 135L;
    private static final long NUMBER_OF_ALIRO_ENDPOINT_KEYS_SUPPORTED_ATTRIBUTE_ID = 136L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public DoorLockCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }


    public void lockDoor(DefaultClusterCallback callback, Optional<byte[]> PINCode, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long PINCodeFieldID = 0L;
      BaseTLVType PINCodetlvValue = PINCode.<BaseTLVType>map((nonOptionalPINCode) -> new ByteArrayType(nonOptionalPINCode)).orElse(new EmptyType());
      elements.add(new StructElement(PINCodeFieldID, PINCodetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void unlockDoor(DefaultClusterCallback callback, Optional<byte[]> PINCode, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long PINCodeFieldID = 0L;
      BaseTLVType PINCodetlvValue = PINCode.<BaseTLVType>map((nonOptionalPINCode) -> new ByteArrayType(nonOptionalPINCode)).orElse(new EmptyType());
      elements.add(new StructElement(PINCodeFieldID, PINCodetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void unlockWithTimeout(DefaultClusterCallback callback, Integer timeout, Optional<byte[]> PINCode, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long timeoutFieldID = 0L;
      BaseTLVType timeouttlvValue = new UIntType(timeout);
      elements.add(new StructElement(timeoutFieldID, timeouttlvValue));

      final long PINCodeFieldID = 1L;
      BaseTLVType PINCodetlvValue = PINCode.<BaseTLVType>map((nonOptionalPINCode) -> new ByteArrayType(nonOptionalPINCode)).orElse(new EmptyType());
      elements.add(new StructElement(PINCodeFieldID, PINCodetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void setWeekDaySchedule(DefaultClusterCallback callback, Integer weekDayIndex, Integer userIndex, Integer daysMask, Integer startHour, Integer startMinute, Integer endHour, Integer endMinute) {
      setWeekDaySchedule(callback, weekDayIndex, userIndex, daysMask, startHour, startMinute, endHour, endMinute, 0);
    }

    public void setWeekDaySchedule(DefaultClusterCallback callback, Integer weekDayIndex, Integer userIndex, Integer daysMask, Integer startHour, Integer startMinute, Integer endHour, Integer endMinute, int timedInvokeTimeoutMs) {
      final long commandId = 11L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long weekDayIndexFieldID = 0L;
      BaseTLVType weekDayIndextlvValue = new UIntType(weekDayIndex);
      elements.add(new StructElement(weekDayIndexFieldID, weekDayIndextlvValue));

      final long userIndexFieldID = 1L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      final long daysMaskFieldID = 2L;
      BaseTLVType daysMasktlvValue = new UIntType(daysMask);
      elements.add(new StructElement(daysMaskFieldID, daysMasktlvValue));

      final long startHourFieldID = 3L;
      BaseTLVType startHourtlvValue = new UIntType(startHour);
      elements.add(new StructElement(startHourFieldID, startHourtlvValue));

      final long startMinuteFieldID = 4L;
      BaseTLVType startMinutetlvValue = new UIntType(startMinute);
      elements.add(new StructElement(startMinuteFieldID, startMinutetlvValue));

      final long endHourFieldID = 5L;
      BaseTLVType endHourtlvValue = new UIntType(endHour);
      elements.add(new StructElement(endHourFieldID, endHourtlvValue));

      final long endMinuteFieldID = 6L;
      BaseTLVType endMinutetlvValue = new UIntType(endMinute);
      elements.add(new StructElement(endMinuteFieldID, endMinutetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void getWeekDaySchedule(GetWeekDayScheduleResponseCallback callback, Integer weekDayIndex, Integer userIndex) {
      getWeekDaySchedule(callback, weekDayIndex, userIndex, 0);
    }

    public void getWeekDaySchedule(GetWeekDayScheduleResponseCallback callback, Integer weekDayIndex, Integer userIndex, int timedInvokeTimeoutMs) {
      final long commandId = 12L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long weekDayIndexFieldID = 0L;
      BaseTLVType weekDayIndextlvValue = new UIntType(weekDayIndex);
      elements.add(new StructElement(weekDayIndexFieldID, weekDayIndextlvValue));

      final long userIndexFieldID = 1L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long weekDayIndexFieldID = 0L;
          Integer weekDayIndex = null;
          final long userIndexFieldID = 1L;
          Integer userIndex = null;
          final long statusFieldID = 2L;
          Integer status = null;
          final long daysMaskFieldID = 3L;
          Optional<Integer> daysMask = Optional.empty();
          final long startHourFieldID = 4L;
          Optional<Integer> startHour = Optional.empty();
          final long startMinuteFieldID = 5L;
          Optional<Integer> startMinute = Optional.empty();
          final long endHourFieldID = 6L;
          Optional<Integer> endHour = Optional.empty();
          final long endMinuteFieldID = 7L;
          Optional<Integer> endMinute = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == weekDayIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                weekDayIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == userIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                userIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == daysMaskFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                daysMask = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == startHourFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                startHour = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == startMinuteFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                startMinute = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == endHourFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                endHour = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == endMinuteFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                endMinute = Optional.of(castingValue.value(Integer.class));
              }
            }
          }
          callback.onSuccess(weekDayIndex, userIndex, status, daysMask, startHour, startMinute, endHour, endMinute);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void clearWeekDaySchedule(DefaultClusterCallback callback, Integer weekDayIndex, Integer userIndex) {
      clearWeekDaySchedule(callback, weekDayIndex, userIndex, 0);
    }

    public void clearWeekDaySchedule(DefaultClusterCallback callback, Integer weekDayIndex, Integer userIndex, int timedInvokeTimeoutMs) {
      final long commandId = 13L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long weekDayIndexFieldID = 0L;
      BaseTLVType weekDayIndextlvValue = new UIntType(weekDayIndex);
      elements.add(new StructElement(weekDayIndexFieldID, weekDayIndextlvValue));

      final long userIndexFieldID = 1L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void setYearDaySchedule(DefaultClusterCallback callback, Integer yearDayIndex, Integer userIndex, Long localStartTime, Long localEndTime) {
      setYearDaySchedule(callback, yearDayIndex, userIndex, localStartTime, localEndTime, 0);
    }

    public void setYearDaySchedule(DefaultClusterCallback callback, Integer yearDayIndex, Integer userIndex, Long localStartTime, Long localEndTime, int timedInvokeTimeoutMs) {
      final long commandId = 14L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long yearDayIndexFieldID = 0L;
      BaseTLVType yearDayIndextlvValue = new UIntType(yearDayIndex);
      elements.add(new StructElement(yearDayIndexFieldID, yearDayIndextlvValue));

      final long userIndexFieldID = 1L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      final long localStartTimeFieldID = 2L;
      BaseTLVType localStartTimetlvValue = new UIntType(localStartTime);
      elements.add(new StructElement(localStartTimeFieldID, localStartTimetlvValue));

      final long localEndTimeFieldID = 3L;
      BaseTLVType localEndTimetlvValue = new UIntType(localEndTime);
      elements.add(new StructElement(localEndTimeFieldID, localEndTimetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void getYearDaySchedule(GetYearDayScheduleResponseCallback callback, Integer yearDayIndex, Integer userIndex) {
      getYearDaySchedule(callback, yearDayIndex, userIndex, 0);
    }

    public void getYearDaySchedule(GetYearDayScheduleResponseCallback callback, Integer yearDayIndex, Integer userIndex, int timedInvokeTimeoutMs) {
      final long commandId = 15L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long yearDayIndexFieldID = 0L;
      BaseTLVType yearDayIndextlvValue = new UIntType(yearDayIndex);
      elements.add(new StructElement(yearDayIndexFieldID, yearDayIndextlvValue));

      final long userIndexFieldID = 1L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long yearDayIndexFieldID = 0L;
          Integer yearDayIndex = null;
          final long userIndexFieldID = 1L;
          Integer userIndex = null;
          final long statusFieldID = 2L;
          Integer status = null;
          final long localStartTimeFieldID = 3L;
          Optional<Long> localStartTime = Optional.empty();
          final long localEndTimeFieldID = 4L;
          Optional<Long> localEndTime = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == yearDayIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                yearDayIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == userIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                userIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == localStartTimeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                localStartTime = Optional.of(castingValue.value(Long.class));
              }
            } else if (element.contextTagNum() == localEndTimeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                localEndTime = Optional.of(castingValue.value(Long.class));
              }
            }
          }
          callback.onSuccess(yearDayIndex, userIndex, status, localStartTime, localEndTime);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void clearYearDaySchedule(DefaultClusterCallback callback, Integer yearDayIndex, Integer userIndex) {
      clearYearDaySchedule(callback, yearDayIndex, userIndex, 0);
    }

    public void clearYearDaySchedule(DefaultClusterCallback callback, Integer yearDayIndex, Integer userIndex, int timedInvokeTimeoutMs) {
      final long commandId = 16L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long yearDayIndexFieldID = 0L;
      BaseTLVType yearDayIndextlvValue = new UIntType(yearDayIndex);
      elements.add(new StructElement(yearDayIndexFieldID, yearDayIndextlvValue));

      final long userIndexFieldID = 1L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void setHolidaySchedule(DefaultClusterCallback callback, Integer holidayIndex, Long localStartTime, Long localEndTime, Integer operatingMode) {
      setHolidaySchedule(callback, holidayIndex, localStartTime, localEndTime, operatingMode, 0);
    }

    public void setHolidaySchedule(DefaultClusterCallback callback, Integer holidayIndex, Long localStartTime, Long localEndTime, Integer operatingMode, int timedInvokeTimeoutMs) {
      final long commandId = 17L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long holidayIndexFieldID = 0L;
      BaseTLVType holidayIndextlvValue = new UIntType(holidayIndex);
      elements.add(new StructElement(holidayIndexFieldID, holidayIndextlvValue));

      final long localStartTimeFieldID = 1L;
      BaseTLVType localStartTimetlvValue = new UIntType(localStartTime);
      elements.add(new StructElement(localStartTimeFieldID, localStartTimetlvValue));

      final long localEndTimeFieldID = 2L;
      BaseTLVType localEndTimetlvValue = new UIntType(localEndTime);
      elements.add(new StructElement(localEndTimeFieldID, localEndTimetlvValue));

      final long operatingModeFieldID = 3L;
      BaseTLVType operatingModetlvValue = new UIntType(operatingMode);
      elements.add(new StructElement(operatingModeFieldID, operatingModetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void getHolidaySchedule(GetHolidayScheduleResponseCallback callback, Integer holidayIndex) {
      getHolidaySchedule(callback, holidayIndex, 0);
    }

    public void getHolidaySchedule(GetHolidayScheduleResponseCallback callback, Integer holidayIndex, int timedInvokeTimeoutMs) {
      final long commandId = 18L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long holidayIndexFieldID = 0L;
      BaseTLVType holidayIndextlvValue = new UIntType(holidayIndex);
      elements.add(new StructElement(holidayIndexFieldID, holidayIndextlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long holidayIndexFieldID = 0L;
          Integer holidayIndex = null;
          final long statusFieldID = 1L;
          Integer status = null;
          final long localStartTimeFieldID = 2L;
          Optional<Long> localStartTime = Optional.empty();
          final long localEndTimeFieldID = 3L;
          Optional<Long> localEndTime = Optional.empty();
          final long operatingModeFieldID = 4L;
          Optional<Integer> operatingMode = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == holidayIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                holidayIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == localStartTimeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                localStartTime = Optional.of(castingValue.value(Long.class));
              }
            } else if (element.contextTagNum() == localEndTimeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                localEndTime = Optional.of(castingValue.value(Long.class));
              }
            } else if (element.contextTagNum() == operatingModeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                operatingMode = Optional.of(castingValue.value(Integer.class));
              }
            }
          }
          callback.onSuccess(holidayIndex, status, localStartTime, localEndTime, operatingMode);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void clearHolidaySchedule(DefaultClusterCallback callback, Integer holidayIndex) {
      clearHolidaySchedule(callback, holidayIndex, 0);
    }

    public void clearHolidaySchedule(DefaultClusterCallback callback, Integer holidayIndex, int timedInvokeTimeoutMs) {
      final long commandId = 19L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long holidayIndexFieldID = 0L;
      BaseTLVType holidayIndextlvValue = new UIntType(holidayIndex);
      elements.add(new StructElement(holidayIndexFieldID, holidayIndextlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void setUser(DefaultClusterCallback callback, Integer operationType, Integer userIndex, @Nullable String userName, @Nullable Long userUniqueID, @Nullable Integer userStatus, @Nullable Integer userType, @Nullable Integer credentialRule, int timedInvokeTimeoutMs) {
      final long commandId = 26L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long operationTypeFieldID = 0L;
      BaseTLVType operationTypetlvValue = new UIntType(operationType);
      elements.add(new StructElement(operationTypeFieldID, operationTypetlvValue));

      final long userIndexFieldID = 1L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      final long userNameFieldID = 2L;
      BaseTLVType userNametlvValue = userName != null ? new StringType(userName) : new NullType();
      elements.add(new StructElement(userNameFieldID, userNametlvValue));

      final long userUniqueIDFieldID = 3L;
      BaseTLVType userUniqueIDtlvValue = userUniqueID != null ? new UIntType(userUniqueID) : new NullType();
      elements.add(new StructElement(userUniqueIDFieldID, userUniqueIDtlvValue));

      final long userStatusFieldID = 4L;
      BaseTLVType userStatustlvValue = userStatus != null ? new UIntType(userStatus) : new NullType();
      elements.add(new StructElement(userStatusFieldID, userStatustlvValue));

      final long userTypeFieldID = 5L;
      BaseTLVType userTypetlvValue = userType != null ? new UIntType(userType) : new NullType();
      elements.add(new StructElement(userTypeFieldID, userTypetlvValue));

      final long credentialRuleFieldID = 6L;
      BaseTLVType credentialRuletlvValue = credentialRule != null ? new UIntType(credentialRule) : new NullType();
      elements.add(new StructElement(credentialRuleFieldID, credentialRuletlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void getUser(GetUserResponseCallback callback, Integer userIndex) {
      getUser(callback, userIndex, 0);
    }

    public void getUser(GetUserResponseCallback callback, Integer userIndex, int timedInvokeTimeoutMs) {
      final long commandId = 27L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long userIndexFieldID = 0L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long userIndexFieldID = 0L;
          Integer userIndex = null;
          final long userNameFieldID = 1L;
          @Nullable String userName = null;
          final long userUniqueIDFieldID = 2L;
          @Nullable Long userUniqueID = null;
          final long userStatusFieldID = 3L;
          @Nullable Integer userStatus = null;
          final long userTypeFieldID = 4L;
          @Nullable Integer userType = null;
          final long credentialRuleFieldID = 5L;
          @Nullable Integer credentialRule = null;
          final long credentialsFieldID = 6L;
          @Nullable ArrayList<ChipStructs.DoorLockClusterCredentialStruct> credentials = null;
          final long creatorFabricIndexFieldID = 7L;
          @Nullable Integer creatorFabricIndex = null;
          final long lastModifiedFabricIndexFieldID = 8L;
          @Nullable Integer lastModifiedFabricIndex = null;
          final long nextUserIndexFieldID = 9L;
          @Nullable Integer nextUserIndex = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == userIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                userIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == userNameFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                userName = castingValue.value(String.class);
              }
            } else if (element.contextTagNum() == userUniqueIDFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                userUniqueID = castingValue.value(Long.class);
              }
            } else if (element.contextTagNum() == userStatusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                userStatus = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == userTypeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                userType = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == credentialRuleFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                credentialRule = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == credentialsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                credentials = castingValue.map((elementcastingValue) -> ChipStructs.DoorLockClusterCredentialStruct.decodeTlv(elementcastingValue));
              }
            } else if (element.contextTagNum() == creatorFabricIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                creatorFabricIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == lastModifiedFabricIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                lastModifiedFabricIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == nextUserIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                nextUserIndex = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(userIndex, userName, userUniqueID, userStatus, userType, credentialRule, credentials, creatorFabricIndex, lastModifiedFabricIndex, nextUserIndex);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void clearUser(DefaultClusterCallback callback, Integer userIndex, int timedInvokeTimeoutMs) {
      final long commandId = 29L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long userIndexFieldID = 0L;
      BaseTLVType userIndextlvValue = new UIntType(userIndex);
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void setCredential(SetCredentialResponseCallback callback, Integer operationType, ChipStructs.DoorLockClusterCredentialStruct credential, byte[] credentialData, @Nullable Integer userIndex, @Nullable Integer userStatus, @Nullable Integer userType, int timedInvokeTimeoutMs) {
      final long commandId = 34L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long operationTypeFieldID = 0L;
      BaseTLVType operationTypetlvValue = new UIntType(operationType);
      elements.add(new StructElement(operationTypeFieldID, operationTypetlvValue));

      final long credentialFieldID = 1L;
      BaseTLVType credentialtlvValue = credential.encodeTlv();
      elements.add(new StructElement(credentialFieldID, credentialtlvValue));

      final long credentialDataFieldID = 2L;
      BaseTLVType credentialDatatlvValue = new ByteArrayType(credentialData);
      elements.add(new StructElement(credentialDataFieldID, credentialDatatlvValue));

      final long userIndexFieldID = 3L;
      BaseTLVType userIndextlvValue = userIndex != null ? new UIntType(userIndex) : new NullType();
      elements.add(new StructElement(userIndexFieldID, userIndextlvValue));

      final long userStatusFieldID = 4L;
      BaseTLVType userStatustlvValue = userStatus != null ? new UIntType(userStatus) : new NullType();
      elements.add(new StructElement(userStatusFieldID, userStatustlvValue));

      final long userTypeFieldID = 5L;
      BaseTLVType userTypetlvValue = userType != null ? new UIntType(userType) : new NullType();
      elements.add(new StructElement(userTypeFieldID, userTypetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long userIndexFieldID = 1L;
          @Nullable Integer userIndex = null;
          final long nextCredentialIndexFieldID = 2L;
          @Nullable Integer nextCredentialIndex = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == userIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                userIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == nextCredentialIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                nextCredentialIndex = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status, userIndex, nextCredentialIndex);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void getCredentialStatus(GetCredentialStatusResponseCallback callback, ChipStructs.DoorLockClusterCredentialStruct credential) {
      getCredentialStatus(callback, credential, 0);
    }

    public void getCredentialStatus(GetCredentialStatusResponseCallback callback, ChipStructs.DoorLockClusterCredentialStruct credential, int timedInvokeTimeoutMs) {
      final long commandId = 36L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long credentialFieldID = 0L;
      BaseTLVType credentialtlvValue = credential.encodeTlv();
      elements.add(new StructElement(credentialFieldID, credentialtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long credentialExistsFieldID = 0L;
          Boolean credentialExists = null;
          final long userIndexFieldID = 1L;
          @Nullable Integer userIndex = null;
          final long creatorFabricIndexFieldID = 2L;
          @Nullable Integer creatorFabricIndex = null;
          final long lastModifiedFabricIndexFieldID = 3L;
          @Nullable Integer lastModifiedFabricIndex = null;
          final long nextCredentialIndexFieldID = 4L;
          @Nullable Integer nextCredentialIndex = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == credentialExistsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                credentialExists = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == userIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                userIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == creatorFabricIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                creatorFabricIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == lastModifiedFabricIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                lastModifiedFabricIndex = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == nextCredentialIndexFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                nextCredentialIndex = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(credentialExists, userIndex, creatorFabricIndex, lastModifiedFabricIndex, nextCredentialIndex);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void clearCredential(DefaultClusterCallback callback, @Nullable ChipStructs.DoorLockClusterCredentialStruct credential, int timedInvokeTimeoutMs) {
      final long commandId = 38L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long credentialFieldID = 0L;
      BaseTLVType credentialtlvValue = credential != null ? credential.encodeTlv() : new NullType();
      elements.add(new StructElement(credentialFieldID, credentialtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void unboltDoor(DefaultClusterCallback callback, Optional<byte[]> PINCode, int timedInvokeTimeoutMs) {
      final long commandId = 39L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long PINCodeFieldID = 0L;
      BaseTLVType PINCodetlvValue = PINCode.<BaseTLVType>map((nonOptionalPINCode) -> new ByteArrayType(nonOptionalPINCode)).orElse(new EmptyType());
      elements.add(new StructElement(PINCodeFieldID, PINCodetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void setAliroReaderConfig(DefaultClusterCallback callback, byte[] signingKey, byte[] verificationKey, byte[] groupIdentifier, Optional<byte[]> groupResolvingKey, int timedInvokeTimeoutMs) {
      final long commandId = 40L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long signingKeyFieldID = 0L;
      BaseTLVType signingKeytlvValue = new ByteArrayType(signingKey);
      elements.add(new StructElement(signingKeyFieldID, signingKeytlvValue));

      final long verificationKeyFieldID = 1L;
      BaseTLVType verificationKeytlvValue = new ByteArrayType(verificationKey);
      elements.add(new StructElement(verificationKeyFieldID, verificationKeytlvValue));

      final long groupIdentifierFieldID = 2L;
      BaseTLVType groupIdentifiertlvValue = new ByteArrayType(groupIdentifier);
      elements.add(new StructElement(groupIdentifierFieldID, groupIdentifiertlvValue));

      final long groupResolvingKeyFieldID = 3L;
      BaseTLVType groupResolvingKeytlvValue = groupResolvingKey.<BaseTLVType>map((nonOptionalgroupResolvingKey) -> new ByteArrayType(nonOptionalgroupResolvingKey)).orElse(new EmptyType());
      elements.add(new StructElement(groupResolvingKeyFieldID, groupResolvingKeytlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void clearAliroReaderConfig(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 41L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface GetWeekDayScheduleResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer weekDayIndex, Integer userIndex, Integer status, Optional<Integer> daysMask, Optional<Integer> startHour, Optional<Integer> startMinute, Optional<Integer> endHour, Optional<Integer> endMinute);
    }

    public interface GetYearDayScheduleResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer yearDayIndex, Integer userIndex, Integer status, Optional<Long> localStartTime, Optional<Long> localEndTime);
    }

    public interface GetHolidayScheduleResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer holidayIndex, Integer status, Optional<Long> localStartTime, Optional<Long> localEndTime, Optional<Integer> operatingMode);
    }

    public interface GetUserResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer userIndex, @Nullable String userName, @Nullable Long userUniqueID, @Nullable Integer userStatus, @Nullable Integer userType, @Nullable Integer credentialRule, @Nullable ArrayList<ChipStructs.DoorLockClusterCredentialStruct> credentials, @Nullable Integer creatorFabricIndex, @Nullable Integer lastModifiedFabricIndex, @Nullable Integer nextUserIndex);
    }

    public interface SetCredentialResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, @Nullable Integer userIndex, @Nullable Integer nextCredentialIndex);
    }

    public interface GetCredentialStatusResponseCallback extends BaseClusterCallback {
      void onSuccess(Boolean credentialExists, @Nullable Integer userIndex, @Nullable Integer creatorFabricIndex, @Nullable Integer lastModifiedFabricIndex, @Nullable Integer nextCredentialIndex);
    }

    public interface LockStateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface DoorStateAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface AliroReaderVerificationKeyAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface AliroReaderGroupIdentifierAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface AliroExpeditedTransactionSupportedProtocolVersionsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<byte[]> value);
    }

    public interface AliroGroupResolvingKeyAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface AliroSupportedBLEUWBProtocolVersionsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<byte[]> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readLockStateAttribute(
        LockStateAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCK_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCK_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeLockStateAttribute(
        LockStateAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCK_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCK_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLockTypeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCK_TYPE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCK_TYPE_ATTRIBUTE_ID, true);
    }

    public void subscribeLockTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCK_TYPE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCK_TYPE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActuatorEnabledAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTUATOR_ENABLED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTUATOR_ENABLED_ATTRIBUTE_ID, true);
    }

    public void subscribeActuatorEnabledAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTUATOR_ENABLED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTUATOR_ENABLED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDoorStateAttribute(
        DoorStateAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DOOR_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DOOR_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeDoorStateAttribute(
        DoorStateAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DOOR_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DOOR_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDoorOpenEventsAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DOOR_OPEN_EVENTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DOOR_OPEN_EVENTS_ATTRIBUTE_ID, true);
    }

    public void writeDoorOpenEventsAttribute(DefaultClusterCallback callback, Long value) {
      writeDoorOpenEventsAttribute(callback, value, 0);
    }

    public void writeDoorOpenEventsAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), DOOR_OPEN_EVENTS_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeDoorOpenEventsAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DOOR_OPEN_EVENTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DOOR_OPEN_EVENTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDoorClosedEventsAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DOOR_CLOSED_EVENTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DOOR_CLOSED_EVENTS_ATTRIBUTE_ID, true);
    }

    public void writeDoorClosedEventsAttribute(DefaultClusterCallback callback, Long value) {
      writeDoorClosedEventsAttribute(callback, value, 0);
    }

    public void writeDoorClosedEventsAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), DOOR_CLOSED_EVENTS_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeDoorClosedEventsAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DOOR_CLOSED_EVENTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DOOR_CLOSED_EVENTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOpenPeriodAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPEN_PERIOD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPEN_PERIOD_ATTRIBUTE_ID, true);
    }

    public void writeOpenPeriodAttribute(DefaultClusterCallback callback, Integer value) {
      writeOpenPeriodAttribute(callback, value, 0);
    }

    public void writeOpenPeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), OPEN_PERIOD_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOpenPeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPEN_PERIOD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPEN_PERIOD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfTotalUsersSupportedAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_TOTAL_USERS_SUPPORTED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_TOTAL_USERS_SUPPORTED_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfTotalUsersSupportedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_TOTAL_USERS_SUPPORTED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_TOTAL_USERS_SUPPORTED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfPINUsersSupportedAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_P_I_N_USERS_SUPPORTED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_P_I_N_USERS_SUPPORTED_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfPINUsersSupportedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_P_I_N_USERS_SUPPORTED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_P_I_N_USERS_SUPPORTED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfRFIDUsersSupportedAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_R_F_I_D_USERS_SUPPORTED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_R_F_I_D_USERS_SUPPORTED_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfRFIDUsersSupportedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_R_F_I_D_USERS_SUPPORTED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_R_F_I_D_USERS_SUPPORTED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfWeekDaySchedulesSupportedPerUserAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfWeekDaySchedulesSupportedPerUserAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfYearDaySchedulesSupportedPerUserAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfYearDaySchedulesSupportedPerUserAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfHolidaySchedulesSupportedAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfHolidaySchedulesSupportedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxPINCodeLengthAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_P_I_N_CODE_LENGTH_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_P_I_N_CODE_LENGTH_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxPINCodeLengthAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_P_I_N_CODE_LENGTH_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_P_I_N_CODE_LENGTH_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinPINCodeLengthAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_P_I_N_CODE_LENGTH_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_P_I_N_CODE_LENGTH_ATTRIBUTE_ID, true);
    }

    public void subscribeMinPINCodeLengthAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_P_I_N_CODE_LENGTH_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_P_I_N_CODE_LENGTH_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxRFIDCodeLengthAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_R_F_I_D_CODE_LENGTH_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_R_F_I_D_CODE_LENGTH_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxRFIDCodeLengthAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_R_F_I_D_CODE_LENGTH_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_R_F_I_D_CODE_LENGTH_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinRFIDCodeLengthAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_R_F_I_D_CODE_LENGTH_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_R_F_I_D_CODE_LENGTH_ATTRIBUTE_ID, true);
    }

    public void subscribeMinRFIDCodeLengthAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_R_F_I_D_CODE_LENGTH_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_R_F_I_D_CODE_LENGTH_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCredentialRulesSupportAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CREDENTIAL_RULES_SUPPORT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CREDENTIAL_RULES_SUPPORT_ATTRIBUTE_ID, true);
    }

    public void subscribeCredentialRulesSupportAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CREDENTIAL_RULES_SUPPORT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CREDENTIAL_RULES_SUPPORT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfCredentialsSupportedPerUserAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfCredentialsSupportedPerUserAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLanguageAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LANGUAGE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LANGUAGE_ATTRIBUTE_ID, true);
    }

    public void writeLanguageAttribute(DefaultClusterCallback callback, String value) {
      writeLanguageAttribute(callback, value, 0);
    }

    public void writeLanguageAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), LANGUAGE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLanguageAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LANGUAGE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LANGUAGE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLEDSettingsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, L_E_D_SETTINGS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, L_E_D_SETTINGS_ATTRIBUTE_ID, true);
    }

    public void writeLEDSettingsAttribute(DefaultClusterCallback callback, Integer value) {
      writeLEDSettingsAttribute(callback, value, 0);
    }

    public void writeLEDSettingsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), L_E_D_SETTINGS_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLEDSettingsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, L_E_D_SETTINGS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, L_E_D_SETTINGS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAutoRelockTimeAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AUTO_RELOCK_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AUTO_RELOCK_TIME_ATTRIBUTE_ID, true);
    }

    public void writeAutoRelockTimeAttribute(DefaultClusterCallback callback, Long value) {
      writeAutoRelockTimeAttribute(callback, value, 0);
    }

    public void writeAutoRelockTimeAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), AUTO_RELOCK_TIME_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeAutoRelockTimeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AUTO_RELOCK_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AUTO_RELOCK_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSoundVolumeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SOUND_VOLUME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SOUND_VOLUME_ATTRIBUTE_ID, true);
    }

    public void writeSoundVolumeAttribute(DefaultClusterCallback callback, Integer value) {
      writeSoundVolumeAttribute(callback, value, 0);
    }

    public void writeSoundVolumeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), SOUND_VOLUME_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeSoundVolumeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SOUND_VOLUME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SOUND_VOLUME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOperatingModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATING_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATING_MODE_ATTRIBUTE_ID, true);
    }

    public void writeOperatingModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOperatingModeAttribute(callback, value, 0);
    }

    public void writeOperatingModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), OPERATING_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOperatingModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATING_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATING_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSupportedOperatingModesAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_OPERATING_MODES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_OPERATING_MODES_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedOperatingModesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_OPERATING_MODES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_OPERATING_MODES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDefaultConfigurationRegisterAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_CONFIGURATION_REGISTER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_CONFIGURATION_REGISTER_ATTRIBUTE_ID, true);
    }

    public void subscribeDefaultConfigurationRegisterAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DEFAULT_CONFIGURATION_REGISTER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DEFAULT_CONFIGURATION_REGISTER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEnableLocalProgrammingAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENABLE_LOCAL_PROGRAMMING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENABLE_LOCAL_PROGRAMMING_ATTRIBUTE_ID, true);
    }

    public void writeEnableLocalProgrammingAttribute(DefaultClusterCallback callback, Boolean value) {
      writeEnableLocalProgrammingAttribute(callback, value, 0);
    }

    public void writeEnableLocalProgrammingAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), ENABLE_LOCAL_PROGRAMMING_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEnableLocalProgrammingAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENABLE_LOCAL_PROGRAMMING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENABLE_LOCAL_PROGRAMMING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEnableOneTouchLockingAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENABLE_ONE_TOUCH_LOCKING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENABLE_ONE_TOUCH_LOCKING_ATTRIBUTE_ID, true);
    }

    public void writeEnableOneTouchLockingAttribute(DefaultClusterCallback callback, Boolean value) {
      writeEnableOneTouchLockingAttribute(callback, value, 0);
    }

    public void writeEnableOneTouchLockingAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), ENABLE_ONE_TOUCH_LOCKING_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEnableOneTouchLockingAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENABLE_ONE_TOUCH_LOCKING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENABLE_ONE_TOUCH_LOCKING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEnableInsideStatusLEDAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENABLE_INSIDE_STATUS_L_E_D_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENABLE_INSIDE_STATUS_L_E_D_ATTRIBUTE_ID, true);
    }

    public void writeEnableInsideStatusLEDAttribute(DefaultClusterCallback callback, Boolean value) {
      writeEnableInsideStatusLEDAttribute(callback, value, 0);
    }

    public void writeEnableInsideStatusLEDAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), ENABLE_INSIDE_STATUS_L_E_D_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEnableInsideStatusLEDAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENABLE_INSIDE_STATUS_L_E_D_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENABLE_INSIDE_STATUS_L_E_D_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEnablePrivacyModeButtonAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENABLE_PRIVACY_MODE_BUTTON_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENABLE_PRIVACY_MODE_BUTTON_ATTRIBUTE_ID, true);
    }

    public void writeEnablePrivacyModeButtonAttribute(DefaultClusterCallback callback, Boolean value) {
      writeEnablePrivacyModeButtonAttribute(callback, value, 0);
    }

    public void writeEnablePrivacyModeButtonAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), ENABLE_PRIVACY_MODE_BUTTON_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEnablePrivacyModeButtonAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENABLE_PRIVACY_MODE_BUTTON_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENABLE_PRIVACY_MODE_BUTTON_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLocalProgrammingFeaturesAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCAL_PROGRAMMING_FEATURES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCAL_PROGRAMMING_FEATURES_ATTRIBUTE_ID, true);
    }

    public void writeLocalProgrammingFeaturesAttribute(DefaultClusterCallback callback, Integer value) {
      writeLocalProgrammingFeaturesAttribute(callback, value, 0);
    }

    public void writeLocalProgrammingFeaturesAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), LOCAL_PROGRAMMING_FEATURES_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLocalProgrammingFeaturesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCAL_PROGRAMMING_FEATURES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCAL_PROGRAMMING_FEATURES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readWrongCodeEntryLimitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WRONG_CODE_ENTRY_LIMIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WRONG_CODE_ENTRY_LIMIT_ATTRIBUTE_ID, true);
    }

    public void writeWrongCodeEntryLimitAttribute(DefaultClusterCallback callback, Integer value) {
      writeWrongCodeEntryLimitAttribute(callback, value, 0);
    }

    public void writeWrongCodeEntryLimitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), WRONG_CODE_ENTRY_LIMIT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeWrongCodeEntryLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WRONG_CODE_ENTRY_LIMIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WRONG_CODE_ENTRY_LIMIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUserCodeTemporaryDisableTimeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, USER_CODE_TEMPORARY_DISABLE_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, USER_CODE_TEMPORARY_DISABLE_TIME_ATTRIBUTE_ID, true);
    }

    public void writeUserCodeTemporaryDisableTimeAttribute(DefaultClusterCallback callback, Integer value) {
      writeUserCodeTemporaryDisableTimeAttribute(callback, value, 0);
    }

    public void writeUserCodeTemporaryDisableTimeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), USER_CODE_TEMPORARY_DISABLE_TIME_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeUserCodeTemporaryDisableTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, USER_CODE_TEMPORARY_DISABLE_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, USER_CODE_TEMPORARY_DISABLE_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSendPINOverTheAirAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SEND_P_I_N_OVER_THE_AIR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SEND_P_I_N_OVER_THE_AIR_ATTRIBUTE_ID, true);
    }

    public void writeSendPINOverTheAirAttribute(DefaultClusterCallback callback, Boolean value) {
      writeSendPINOverTheAirAttribute(callback, value, 0);
    }

    public void writeSendPINOverTheAirAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), SEND_P_I_N_OVER_THE_AIR_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeSendPINOverTheAirAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SEND_P_I_N_OVER_THE_AIR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SEND_P_I_N_OVER_THE_AIR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRequirePINforRemoteOperationAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REQUIRE_P_I_NFOR_REMOTE_OPERATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REQUIRE_P_I_NFOR_REMOTE_OPERATION_ATTRIBUTE_ID, true);
    }

    public void writeRequirePINforRemoteOperationAttribute(DefaultClusterCallback callback, Boolean value) {
      writeRequirePINforRemoteOperationAttribute(callback, value, 0);
    }

    public void writeRequirePINforRemoteOperationAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), REQUIRE_P_I_NFOR_REMOTE_OPERATION_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRequirePINforRemoteOperationAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REQUIRE_P_I_NFOR_REMOTE_OPERATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REQUIRE_P_I_NFOR_REMOTE_OPERATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readExpiringUserTimeoutAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EXPIRING_USER_TIMEOUT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EXPIRING_USER_TIMEOUT_ATTRIBUTE_ID, true);
    }

    public void writeExpiringUserTimeoutAttribute(DefaultClusterCallback callback, Integer value) {
      writeExpiringUserTimeoutAttribute(callback, value, 0);
    }

    public void writeExpiringUserTimeoutAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), EXPIRING_USER_TIMEOUT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeExpiringUserTimeoutAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EXPIRING_USER_TIMEOUT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EXPIRING_USER_TIMEOUT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAliroReaderVerificationKeyAttribute(
        AliroReaderVerificationKeyAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALIRO_READER_VERIFICATION_KEY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALIRO_READER_VERIFICATION_KEY_ATTRIBUTE_ID, true);
    }

    public void subscribeAliroReaderVerificationKeyAttribute(
        AliroReaderVerificationKeyAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALIRO_READER_VERIFICATION_KEY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALIRO_READER_VERIFICATION_KEY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAliroReaderGroupIdentifierAttribute(
        AliroReaderGroupIdentifierAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALIRO_READER_GROUP_IDENTIFIER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALIRO_READER_GROUP_IDENTIFIER_ATTRIBUTE_ID, true);
    }

    public void subscribeAliroReaderGroupIdentifierAttribute(
        AliroReaderGroupIdentifierAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALIRO_READER_GROUP_IDENTIFIER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALIRO_READER_GROUP_IDENTIFIER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAliroReaderGroupSubIdentifierAttribute(
        OctetStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALIRO_READER_GROUP_SUB_IDENTIFIER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALIRO_READER_GROUP_SUB_IDENTIFIER_ATTRIBUTE_ID, true);
    }

    public void subscribeAliroReaderGroupSubIdentifierAttribute(
        OctetStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALIRO_READER_GROUP_SUB_IDENTIFIER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALIRO_READER_GROUP_SUB_IDENTIFIER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAliroExpeditedTransactionSupportedProtocolVersionsAttribute(
        AliroExpeditedTransactionSupportedProtocolVersionsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALIRO_EXPEDITED_TRANSACTION_SUPPORTED_PROTOCOL_VERSIONS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALIRO_EXPEDITED_TRANSACTION_SUPPORTED_PROTOCOL_VERSIONS_ATTRIBUTE_ID, true);
    }

    public void subscribeAliroExpeditedTransactionSupportedProtocolVersionsAttribute(
        AliroExpeditedTransactionSupportedProtocolVersionsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALIRO_EXPEDITED_TRANSACTION_SUPPORTED_PROTOCOL_VERSIONS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALIRO_EXPEDITED_TRANSACTION_SUPPORTED_PROTOCOL_VERSIONS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAliroGroupResolvingKeyAttribute(
        AliroGroupResolvingKeyAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALIRO_GROUP_RESOLVING_KEY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALIRO_GROUP_RESOLVING_KEY_ATTRIBUTE_ID, true);
    }

    public void subscribeAliroGroupResolvingKeyAttribute(
        AliroGroupResolvingKeyAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALIRO_GROUP_RESOLVING_KEY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALIRO_GROUP_RESOLVING_KEY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAliroSupportedBLEUWBProtocolVersionsAttribute(
        AliroSupportedBLEUWBProtocolVersionsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALIRO_SUPPORTED_B_L_E_U_W_B_PROTOCOL_VERSIONS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALIRO_SUPPORTED_B_L_E_U_W_B_PROTOCOL_VERSIONS_ATTRIBUTE_ID, true);
    }

    public void subscribeAliroSupportedBLEUWBProtocolVersionsAttribute(
        AliroSupportedBLEUWBProtocolVersionsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALIRO_SUPPORTED_B_L_E_U_W_B_PROTOCOL_VERSIONS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALIRO_SUPPORTED_B_L_E_U_W_B_PROTOCOL_VERSIONS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAliroBLEAdvertisingVersionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALIRO_B_L_E_ADVERTISING_VERSION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALIRO_B_L_E_ADVERTISING_VERSION_ATTRIBUTE_ID, true);
    }

    public void subscribeAliroBLEAdvertisingVersionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALIRO_B_L_E_ADVERTISING_VERSION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALIRO_B_L_E_ADVERTISING_VERSION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfAliroCredentialIssuerKeysSupportedAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_ALIRO_CREDENTIAL_ISSUER_KEYS_SUPPORTED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_ALIRO_CREDENTIAL_ISSUER_KEYS_SUPPORTED_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfAliroCredentialIssuerKeysSupportedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_ALIRO_CREDENTIAL_ISSUER_KEYS_SUPPORTED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_ALIRO_CREDENTIAL_ISSUER_KEYS_SUPPORTED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfAliroEndpointKeysSupportedAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_ALIRO_ENDPOINT_KEYS_SUPPORTED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_ALIRO_ENDPOINT_KEYS_SUPPORTED_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfAliroEndpointKeysSupportedAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_ALIRO_ENDPOINT_KEYS_SUPPORTED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_ALIRO_ENDPOINT_KEYS_SUPPORTED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class WindowCoveringCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 258L;

    private static final long TYPE_ATTRIBUTE_ID = 0L;
    private static final long PHYSICAL_CLOSED_LIMIT_LIFT_ATTRIBUTE_ID = 1L;
    private static final long PHYSICAL_CLOSED_LIMIT_TILT_ATTRIBUTE_ID = 2L;
    private static final long CURRENT_POSITION_LIFT_ATTRIBUTE_ID = 3L;
    private static final long CURRENT_POSITION_TILT_ATTRIBUTE_ID = 4L;
    private static final long NUMBER_OF_ACTUATIONS_LIFT_ATTRIBUTE_ID = 5L;
    private static final long NUMBER_OF_ACTUATIONS_TILT_ATTRIBUTE_ID = 6L;
    private static final long CONFIG_STATUS_ATTRIBUTE_ID = 7L;
    private static final long CURRENT_POSITION_LIFT_PERCENTAGE_ATTRIBUTE_ID = 8L;
    private static final long CURRENT_POSITION_TILT_PERCENTAGE_ATTRIBUTE_ID = 9L;
    private static final long OPERATIONAL_STATUS_ATTRIBUTE_ID = 10L;
    private static final long TARGET_POSITION_LIFT_PERCENT100THS_ATTRIBUTE_ID = 11L;
    private static final long TARGET_POSITION_TILT_PERCENT100THS_ATTRIBUTE_ID = 12L;
    private static final long END_PRODUCT_TYPE_ATTRIBUTE_ID = 13L;
    private static final long CURRENT_POSITION_LIFT_PERCENT100THS_ATTRIBUTE_ID = 14L;
    private static final long CURRENT_POSITION_TILT_PERCENT100THS_ATTRIBUTE_ID = 15L;
    private static final long INSTALLED_OPEN_LIMIT_LIFT_ATTRIBUTE_ID = 16L;
    private static final long INSTALLED_CLOSED_LIMIT_LIFT_ATTRIBUTE_ID = 17L;
    private static final long INSTALLED_OPEN_LIMIT_TILT_ATTRIBUTE_ID = 18L;
    private static final long INSTALLED_CLOSED_LIMIT_TILT_ATTRIBUTE_ID = 19L;
    private static final long MODE_ATTRIBUTE_ID = 23L;
    private static final long SAFETY_STATUS_ATTRIBUTE_ID = 26L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public WindowCoveringCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void upOrOpen(DefaultClusterCallback callback) {
      upOrOpen(callback, 0);
    }

    public void upOrOpen(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void downOrClose(DefaultClusterCallback callback) {
      downOrClose(callback, 0);
    }

    public void downOrClose(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void stopMotion(DefaultClusterCallback callback) {
      stopMotion(callback, 0);
    }

    public void stopMotion(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void goToLiftValue(DefaultClusterCallback callback, Integer liftValue) {
      goToLiftValue(callback, liftValue, 0);
    }

    public void goToLiftValue(DefaultClusterCallback callback, Integer liftValue, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long liftValueFieldID = 0L;
      BaseTLVType liftValuetlvValue = new UIntType(liftValue);
      elements.add(new StructElement(liftValueFieldID, liftValuetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void goToLiftPercentage(DefaultClusterCallback callback, Integer liftPercent100thsValue) {
      goToLiftPercentage(callback, liftPercent100thsValue, 0);
    }

    public void goToLiftPercentage(DefaultClusterCallback callback, Integer liftPercent100thsValue, int timedInvokeTimeoutMs) {
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long liftPercent100thsValueFieldID = 0L;
      BaseTLVType liftPercent100thsValuetlvValue = new UIntType(liftPercent100thsValue);
      elements.add(new StructElement(liftPercent100thsValueFieldID, liftPercent100thsValuetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void goToTiltValue(DefaultClusterCallback callback, Integer tiltValue) {
      goToTiltValue(callback, tiltValue, 0);
    }

    public void goToTiltValue(DefaultClusterCallback callback, Integer tiltValue, int timedInvokeTimeoutMs) {
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long tiltValueFieldID = 0L;
      BaseTLVType tiltValuetlvValue = new UIntType(tiltValue);
      elements.add(new StructElement(tiltValueFieldID, tiltValuetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void goToTiltPercentage(DefaultClusterCallback callback, Integer tiltPercent100thsValue) {
      goToTiltPercentage(callback, tiltPercent100thsValue, 0);
    }

    public void goToTiltPercentage(DefaultClusterCallback callback, Integer tiltPercent100thsValue, int timedInvokeTimeoutMs) {
      final long commandId = 8L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long tiltPercent100thsValueFieldID = 0L;
      BaseTLVType tiltPercent100thsValuetlvValue = new UIntType(tiltPercent100thsValue);
      elements.add(new StructElement(tiltPercent100thsValueFieldID, tiltPercent100thsValuetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface CurrentPositionLiftAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CurrentPositionTiltAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CurrentPositionLiftPercentageAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CurrentPositionTiltPercentageAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface TargetPositionLiftPercent100thsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface TargetPositionTiltPercent100thsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CurrentPositionLiftPercent100thsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CurrentPositionTiltPercent100thsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readTypeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TYPE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TYPE_ATTRIBUTE_ID, true);
    }

    public void subscribeTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TYPE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TYPE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPhysicalClosedLimitLiftAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHYSICAL_CLOSED_LIMIT_LIFT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHYSICAL_CLOSED_LIMIT_LIFT_ATTRIBUTE_ID, true);
    }

    public void subscribePhysicalClosedLimitLiftAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHYSICAL_CLOSED_LIMIT_LIFT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHYSICAL_CLOSED_LIMIT_LIFT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPhysicalClosedLimitTiltAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHYSICAL_CLOSED_LIMIT_TILT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHYSICAL_CLOSED_LIMIT_TILT_ATTRIBUTE_ID, true);
    }

    public void subscribePhysicalClosedLimitTiltAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHYSICAL_CLOSED_LIMIT_TILT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHYSICAL_CLOSED_LIMIT_TILT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentPositionLiftAttribute(
        CurrentPositionLiftAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_POSITION_LIFT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_POSITION_LIFT_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentPositionLiftAttribute(
        CurrentPositionLiftAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_POSITION_LIFT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_POSITION_LIFT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentPositionTiltAttribute(
        CurrentPositionTiltAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_POSITION_TILT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_POSITION_TILT_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentPositionTiltAttribute(
        CurrentPositionTiltAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_POSITION_TILT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_POSITION_TILT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfActuationsLiftAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_ACTUATIONS_LIFT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_ACTUATIONS_LIFT_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfActuationsLiftAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_ACTUATIONS_LIFT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_ACTUATIONS_LIFT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfActuationsTiltAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_ACTUATIONS_TILT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_ACTUATIONS_TILT_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfActuationsTiltAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_ACTUATIONS_TILT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_ACTUATIONS_TILT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readConfigStatusAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CONFIG_STATUS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CONFIG_STATUS_ATTRIBUTE_ID, true);
    }

    public void subscribeConfigStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CONFIG_STATUS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CONFIG_STATUS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentPositionLiftPercentageAttribute(
        CurrentPositionLiftPercentageAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_POSITION_LIFT_PERCENTAGE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_POSITION_LIFT_PERCENTAGE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentPositionLiftPercentageAttribute(
        CurrentPositionLiftPercentageAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_POSITION_LIFT_PERCENTAGE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_POSITION_LIFT_PERCENTAGE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentPositionTiltPercentageAttribute(
        CurrentPositionTiltPercentageAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_POSITION_TILT_PERCENTAGE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_POSITION_TILT_PERCENTAGE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentPositionTiltPercentageAttribute(
        CurrentPositionTiltPercentageAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_POSITION_TILT_PERCENTAGE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_POSITION_TILT_PERCENTAGE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOperationalStatusAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_STATUS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_STATUS_ATTRIBUTE_ID, true);
    }

    public void subscribeOperationalStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATIONAL_STATUS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATIONAL_STATUS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTargetPositionLiftPercent100thsAttribute(
        TargetPositionLiftPercent100thsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TARGET_POSITION_LIFT_PERCENT100THS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TARGET_POSITION_LIFT_PERCENT100THS_ATTRIBUTE_ID, true);
    }

    public void subscribeTargetPositionLiftPercent100thsAttribute(
        TargetPositionLiftPercent100thsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TARGET_POSITION_LIFT_PERCENT100THS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TARGET_POSITION_LIFT_PERCENT100THS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTargetPositionTiltPercent100thsAttribute(
        TargetPositionTiltPercent100thsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TARGET_POSITION_TILT_PERCENT100THS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TARGET_POSITION_TILT_PERCENT100THS_ATTRIBUTE_ID, true);
    }

    public void subscribeTargetPositionTiltPercent100thsAttribute(
        TargetPositionTiltPercent100thsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TARGET_POSITION_TILT_PERCENT100THS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TARGET_POSITION_TILT_PERCENT100THS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEndProductTypeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, END_PRODUCT_TYPE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, END_PRODUCT_TYPE_ATTRIBUTE_ID, true);
    }

    public void subscribeEndProductTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, END_PRODUCT_TYPE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, END_PRODUCT_TYPE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentPositionLiftPercent100thsAttribute(
        CurrentPositionLiftPercent100thsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_POSITION_LIFT_PERCENT100THS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_POSITION_LIFT_PERCENT100THS_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentPositionLiftPercent100thsAttribute(
        CurrentPositionLiftPercent100thsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_POSITION_LIFT_PERCENT100THS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_POSITION_LIFT_PERCENT100THS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentPositionTiltPercent100thsAttribute(
        CurrentPositionTiltPercent100thsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_POSITION_TILT_PERCENT100THS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_POSITION_TILT_PERCENT100THS_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentPositionTiltPercent100thsAttribute(
        CurrentPositionTiltPercent100thsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_POSITION_TILT_PERCENT100THS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_POSITION_TILT_PERCENT100THS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInstalledOpenLimitLiftAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTALLED_OPEN_LIMIT_LIFT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTALLED_OPEN_LIMIT_LIFT_ATTRIBUTE_ID, true);
    }

    public void subscribeInstalledOpenLimitLiftAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTALLED_OPEN_LIMIT_LIFT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTALLED_OPEN_LIMIT_LIFT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInstalledClosedLimitLiftAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTALLED_CLOSED_LIMIT_LIFT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTALLED_CLOSED_LIMIT_LIFT_ATTRIBUTE_ID, true);
    }

    public void subscribeInstalledClosedLimitLiftAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTALLED_CLOSED_LIMIT_LIFT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTALLED_CLOSED_LIMIT_LIFT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInstalledOpenLimitTiltAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTALLED_OPEN_LIMIT_TILT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTALLED_OPEN_LIMIT_TILT_ATTRIBUTE_ID, true);
    }

    public void subscribeInstalledOpenLimitTiltAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTALLED_OPEN_LIMIT_TILT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTALLED_OPEN_LIMIT_TILT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInstalledClosedLimitTiltAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTALLED_CLOSED_LIMIT_TILT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTALLED_CLOSED_LIMIT_TILT_ATTRIBUTE_ID, true);
    }

    public void subscribeInstalledClosedLimitTiltAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTALLED_CLOSED_LIMIT_TILT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTALLED_CLOSED_LIMIT_TILT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MODE_ATTRIBUTE_ID, true);
    }

    public void writeModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeModeAttribute(callback, value, 0);
    }

    public void writeModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSafetyStatusAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SAFETY_STATUS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SAFETY_STATUS_ATTRIBUTE_ID, true);
    }

    public void subscribeSafetyStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SAFETY_STATUS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SAFETY_STATUS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class BarrierControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 259L;

    private static final long BARRIER_MOVING_STATE_ATTRIBUTE_ID = 1L;
    private static final long BARRIER_SAFETY_STATUS_ATTRIBUTE_ID = 2L;
    private static final long BARRIER_CAPABILITIES_ATTRIBUTE_ID = 3L;
    private static final long BARRIER_OPEN_EVENTS_ATTRIBUTE_ID = 4L;
    private static final long BARRIER_CLOSE_EVENTS_ATTRIBUTE_ID = 5L;
    private static final long BARRIER_COMMAND_OPEN_EVENTS_ATTRIBUTE_ID = 6L;
    private static final long BARRIER_COMMAND_CLOSE_EVENTS_ATTRIBUTE_ID = 7L;
    private static final long BARRIER_OPEN_PERIOD_ATTRIBUTE_ID = 8L;
    private static final long BARRIER_CLOSE_PERIOD_ATTRIBUTE_ID = 9L;
    private static final long BARRIER_POSITION_ATTRIBUTE_ID = 10L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public BarrierControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void barrierControlGoToPercent(DefaultClusterCallback callback, Integer percentOpen) {
      barrierControlGoToPercent(callback, percentOpen, 0);
    }

    public void barrierControlGoToPercent(DefaultClusterCallback callback, Integer percentOpen, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long percentOpenFieldID = 0L;
      BaseTLVType percentOpentlvValue = new UIntType(percentOpen);
      elements.add(new StructElement(percentOpenFieldID, percentOpentlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void barrierControlStop(DefaultClusterCallback callback) {
      barrierControlStop(callback, 0);
    }

    public void barrierControlStop(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readBarrierMovingStateAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_MOVING_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_MOVING_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeBarrierMovingStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_MOVING_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_MOVING_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBarrierSafetyStatusAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_SAFETY_STATUS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_SAFETY_STATUS_ATTRIBUTE_ID, true);
    }

    public void subscribeBarrierSafetyStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_SAFETY_STATUS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_SAFETY_STATUS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBarrierCapabilitiesAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_CAPABILITIES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_CAPABILITIES_ATTRIBUTE_ID, true);
    }

    public void subscribeBarrierCapabilitiesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_CAPABILITIES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_CAPABILITIES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBarrierOpenEventsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_OPEN_EVENTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_OPEN_EVENTS_ATTRIBUTE_ID, true);
    }

    public void writeBarrierOpenEventsAttribute(DefaultClusterCallback callback, Integer value) {
      writeBarrierOpenEventsAttribute(callback, value, 0);
    }

    public void writeBarrierOpenEventsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), BARRIER_OPEN_EVENTS_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBarrierOpenEventsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_OPEN_EVENTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_OPEN_EVENTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBarrierCloseEventsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_CLOSE_EVENTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_CLOSE_EVENTS_ATTRIBUTE_ID, true);
    }

    public void writeBarrierCloseEventsAttribute(DefaultClusterCallback callback, Integer value) {
      writeBarrierCloseEventsAttribute(callback, value, 0);
    }

    public void writeBarrierCloseEventsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), BARRIER_CLOSE_EVENTS_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBarrierCloseEventsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_CLOSE_EVENTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_CLOSE_EVENTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBarrierCommandOpenEventsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_COMMAND_OPEN_EVENTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_COMMAND_OPEN_EVENTS_ATTRIBUTE_ID, true);
    }

    public void writeBarrierCommandOpenEventsAttribute(DefaultClusterCallback callback, Integer value) {
      writeBarrierCommandOpenEventsAttribute(callback, value, 0);
    }

    public void writeBarrierCommandOpenEventsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), BARRIER_COMMAND_OPEN_EVENTS_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBarrierCommandOpenEventsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_COMMAND_OPEN_EVENTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_COMMAND_OPEN_EVENTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBarrierCommandCloseEventsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_COMMAND_CLOSE_EVENTS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_COMMAND_CLOSE_EVENTS_ATTRIBUTE_ID, true);
    }

    public void writeBarrierCommandCloseEventsAttribute(DefaultClusterCallback callback, Integer value) {
      writeBarrierCommandCloseEventsAttribute(callback, value, 0);
    }

    public void writeBarrierCommandCloseEventsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), BARRIER_COMMAND_CLOSE_EVENTS_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBarrierCommandCloseEventsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_COMMAND_CLOSE_EVENTS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_COMMAND_CLOSE_EVENTS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBarrierOpenPeriodAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_OPEN_PERIOD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_OPEN_PERIOD_ATTRIBUTE_ID, true);
    }

    public void writeBarrierOpenPeriodAttribute(DefaultClusterCallback callback, Integer value) {
      writeBarrierOpenPeriodAttribute(callback, value, 0);
    }

    public void writeBarrierOpenPeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), BARRIER_OPEN_PERIOD_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBarrierOpenPeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_OPEN_PERIOD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_OPEN_PERIOD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBarrierClosePeriodAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_CLOSE_PERIOD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_CLOSE_PERIOD_ATTRIBUTE_ID, true);
    }

    public void writeBarrierClosePeriodAttribute(DefaultClusterCallback callback, Integer value) {
      writeBarrierClosePeriodAttribute(callback, value, 0);
    }

    public void writeBarrierClosePeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), BARRIER_CLOSE_PERIOD_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBarrierClosePeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_CLOSE_PERIOD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_CLOSE_PERIOD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBarrierPositionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_POSITION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_POSITION_ATTRIBUTE_ID, true);
    }

    public void subscribeBarrierPositionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BARRIER_POSITION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BARRIER_POSITION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class PumpConfigurationAndControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 512L;

    private static final long MAX_PRESSURE_ATTRIBUTE_ID = 0L;
    private static final long MAX_SPEED_ATTRIBUTE_ID = 1L;
    private static final long MAX_FLOW_ATTRIBUTE_ID = 2L;
    private static final long MIN_CONST_PRESSURE_ATTRIBUTE_ID = 3L;
    private static final long MAX_CONST_PRESSURE_ATTRIBUTE_ID = 4L;
    private static final long MIN_COMP_PRESSURE_ATTRIBUTE_ID = 5L;
    private static final long MAX_COMP_PRESSURE_ATTRIBUTE_ID = 6L;
    private static final long MIN_CONST_SPEED_ATTRIBUTE_ID = 7L;
    private static final long MAX_CONST_SPEED_ATTRIBUTE_ID = 8L;
    private static final long MIN_CONST_FLOW_ATTRIBUTE_ID = 9L;
    private static final long MAX_CONST_FLOW_ATTRIBUTE_ID = 10L;
    private static final long MIN_CONST_TEMP_ATTRIBUTE_ID = 11L;
    private static final long MAX_CONST_TEMP_ATTRIBUTE_ID = 12L;
    private static final long PUMP_STATUS_ATTRIBUTE_ID = 16L;
    private static final long EFFECTIVE_OPERATION_MODE_ATTRIBUTE_ID = 17L;
    private static final long EFFECTIVE_CONTROL_MODE_ATTRIBUTE_ID = 18L;
    private static final long CAPACITY_ATTRIBUTE_ID = 19L;
    private static final long SPEED_ATTRIBUTE_ID = 20L;
    private static final long LIFETIME_RUNNING_HOURS_ATTRIBUTE_ID = 21L;
    private static final long POWER_ATTRIBUTE_ID = 22L;
    private static final long LIFETIME_ENERGY_CONSUMED_ATTRIBUTE_ID = 23L;
    private static final long OPERATION_MODE_ATTRIBUTE_ID = 32L;
    private static final long CONTROL_MODE_ATTRIBUTE_ID = 33L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public PumpConfigurationAndControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface MaxPressureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxSpeedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxFlowAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinConstPressureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxConstPressureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinCompPressureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxCompPressureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinConstSpeedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxConstSpeedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinConstFlowAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxConstFlowAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinConstTempAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxConstTempAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface CapacityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface SpeedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface LifetimeRunningHoursAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface PowerAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface LifetimeEnergyConsumedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMaxPressureAttribute(
        MaxPressureAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_PRESSURE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_PRESSURE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxPressureAttribute(
        MaxPressureAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_PRESSURE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_PRESSURE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxSpeedAttribute(
        MaxSpeedAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_SPEED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_SPEED_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxSpeedAttribute(
        MaxSpeedAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_SPEED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_SPEED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxFlowAttribute(
        MaxFlowAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_FLOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_FLOW_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxFlowAttribute(
        MaxFlowAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_FLOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_FLOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinConstPressureAttribute(
        MinConstPressureAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_CONST_PRESSURE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_CONST_PRESSURE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinConstPressureAttribute(
        MinConstPressureAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_CONST_PRESSURE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_CONST_PRESSURE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxConstPressureAttribute(
        MaxConstPressureAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_CONST_PRESSURE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_CONST_PRESSURE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxConstPressureAttribute(
        MaxConstPressureAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_CONST_PRESSURE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_CONST_PRESSURE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinCompPressureAttribute(
        MinCompPressureAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_COMP_PRESSURE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_COMP_PRESSURE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinCompPressureAttribute(
        MinCompPressureAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_COMP_PRESSURE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_COMP_PRESSURE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxCompPressureAttribute(
        MaxCompPressureAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_COMP_PRESSURE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_COMP_PRESSURE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxCompPressureAttribute(
        MaxCompPressureAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_COMP_PRESSURE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_COMP_PRESSURE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinConstSpeedAttribute(
        MinConstSpeedAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_CONST_SPEED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_CONST_SPEED_ATTRIBUTE_ID, true);
    }

    public void subscribeMinConstSpeedAttribute(
        MinConstSpeedAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_CONST_SPEED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_CONST_SPEED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxConstSpeedAttribute(
        MaxConstSpeedAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_CONST_SPEED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_CONST_SPEED_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxConstSpeedAttribute(
        MaxConstSpeedAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_CONST_SPEED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_CONST_SPEED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinConstFlowAttribute(
        MinConstFlowAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_CONST_FLOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_CONST_FLOW_ATTRIBUTE_ID, true);
    }

    public void subscribeMinConstFlowAttribute(
        MinConstFlowAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_CONST_FLOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_CONST_FLOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxConstFlowAttribute(
        MaxConstFlowAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_CONST_FLOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_CONST_FLOW_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxConstFlowAttribute(
        MaxConstFlowAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_CONST_FLOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_CONST_FLOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinConstTempAttribute(
        MinConstTempAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_CONST_TEMP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_CONST_TEMP_ATTRIBUTE_ID, true);
    }

    public void subscribeMinConstTempAttribute(
        MinConstTempAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_CONST_TEMP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_CONST_TEMP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxConstTempAttribute(
        MaxConstTempAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_CONST_TEMP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_CONST_TEMP_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxConstTempAttribute(
        MaxConstTempAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_CONST_TEMP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_CONST_TEMP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPumpStatusAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PUMP_STATUS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PUMP_STATUS_ATTRIBUTE_ID, true);
    }

    public void subscribePumpStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PUMP_STATUS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PUMP_STATUS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEffectiveOperationModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EFFECTIVE_OPERATION_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EFFECTIVE_OPERATION_MODE_ATTRIBUTE_ID, true);
    }

    public void subscribeEffectiveOperationModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EFFECTIVE_OPERATION_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EFFECTIVE_OPERATION_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEffectiveControlModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EFFECTIVE_CONTROL_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EFFECTIVE_CONTROL_MODE_ATTRIBUTE_ID, true);
    }

    public void subscribeEffectiveControlModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EFFECTIVE_CONTROL_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EFFECTIVE_CONTROL_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCapacityAttribute(
        CapacityAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CAPACITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CAPACITY_ATTRIBUTE_ID, true);
    }

    public void subscribeCapacityAttribute(
        CapacityAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CAPACITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CAPACITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSpeedAttribute(
        SpeedAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SPEED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SPEED_ATTRIBUTE_ID, true);
    }

    public void subscribeSpeedAttribute(
        SpeedAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SPEED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SPEED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLifetimeRunningHoursAttribute(
        LifetimeRunningHoursAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIFETIME_RUNNING_HOURS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIFETIME_RUNNING_HOURS_ATTRIBUTE_ID, true);
    }

    public void writeLifetimeRunningHoursAttribute(DefaultClusterCallback callback, Long value) {
      writeLifetimeRunningHoursAttribute(callback, value, 0);
    }

    public void writeLifetimeRunningHoursAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), LIFETIME_RUNNING_HOURS_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLifetimeRunningHoursAttribute(
        LifetimeRunningHoursAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIFETIME_RUNNING_HOURS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIFETIME_RUNNING_HOURS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPowerAttribute(
        PowerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_ATTRIBUTE_ID, true);
    }

    public void subscribePowerAttribute(
        PowerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLifetimeEnergyConsumedAttribute(
        LifetimeEnergyConsumedAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIFETIME_ENERGY_CONSUMED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIFETIME_ENERGY_CONSUMED_ATTRIBUTE_ID, true);
    }

    public void writeLifetimeEnergyConsumedAttribute(DefaultClusterCallback callback, Long value) {
      writeLifetimeEnergyConsumedAttribute(callback, value, 0);
    }

    public void writeLifetimeEnergyConsumedAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), LIFETIME_ENERGY_CONSUMED_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLifetimeEnergyConsumedAttribute(
        LifetimeEnergyConsumedAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIFETIME_ENERGY_CONSUMED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIFETIME_ENERGY_CONSUMED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOperationModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATION_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATION_MODE_ATTRIBUTE_ID, true);
    }

    public void writeOperationModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeOperationModeAttribute(callback, value, 0);
    }

    public void writeOperationModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), OPERATION_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOperationModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPERATION_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPERATION_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readControlModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CONTROL_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CONTROL_MODE_ATTRIBUTE_ID, true);
    }

    public void writeControlModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeControlModeAttribute(callback, value, 0);
    }

    public void writeControlModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), CONTROL_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeControlModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CONTROL_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CONTROL_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ThermostatCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 513L;

    private static final long LOCAL_TEMPERATURE_ATTRIBUTE_ID = 0L;
    private static final long OUTDOOR_TEMPERATURE_ATTRIBUTE_ID = 1L;
    private static final long OCCUPANCY_ATTRIBUTE_ID = 2L;
    private static final long ABS_MIN_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID = 3L;
    private static final long ABS_MAX_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID = 4L;
    private static final long ABS_MIN_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID = 5L;
    private static final long ABS_MAX_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID = 6L;
    private static final long P_I_COOLING_DEMAND_ATTRIBUTE_ID = 7L;
    private static final long P_I_HEATING_DEMAND_ATTRIBUTE_ID = 8L;
    private static final long H_V_A_C_SYSTEM_TYPE_CONFIGURATION_ATTRIBUTE_ID = 9L;
    private static final long LOCAL_TEMPERATURE_CALIBRATION_ATTRIBUTE_ID = 16L;
    private static final long OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID = 17L;
    private static final long OCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID = 18L;
    private static final long UNOCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID = 19L;
    private static final long UNOCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID = 20L;
    private static final long MIN_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID = 21L;
    private static final long MAX_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID = 22L;
    private static final long MIN_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID = 23L;
    private static final long MAX_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID = 24L;
    private static final long MIN_SETPOINT_DEAD_BAND_ATTRIBUTE_ID = 25L;
    private static final long REMOTE_SENSING_ATTRIBUTE_ID = 26L;
    private static final long CONTROL_SEQUENCE_OF_OPERATION_ATTRIBUTE_ID = 27L;
    private static final long SYSTEM_MODE_ATTRIBUTE_ID = 28L;
    private static final long THERMOSTAT_RUNNING_MODE_ATTRIBUTE_ID = 30L;
    private static final long START_OF_WEEK_ATTRIBUTE_ID = 32L;
    private static final long NUMBER_OF_WEEKLY_TRANSITIONS_ATTRIBUTE_ID = 33L;
    private static final long NUMBER_OF_DAILY_TRANSITIONS_ATTRIBUTE_ID = 34L;
    private static final long TEMPERATURE_SETPOINT_HOLD_ATTRIBUTE_ID = 35L;
    private static final long TEMPERATURE_SETPOINT_HOLD_DURATION_ATTRIBUTE_ID = 36L;
    private static final long THERMOSTAT_PROGRAMMING_OPERATION_MODE_ATTRIBUTE_ID = 37L;
    private static final long THERMOSTAT_RUNNING_STATE_ATTRIBUTE_ID = 41L;
    private static final long SETPOINT_CHANGE_SOURCE_ATTRIBUTE_ID = 48L;
    private static final long SETPOINT_CHANGE_AMOUNT_ATTRIBUTE_ID = 49L;
    private static final long SETPOINT_CHANGE_SOURCE_TIMESTAMP_ATTRIBUTE_ID = 50L;
    private static final long OCCUPIED_SETBACK_ATTRIBUTE_ID = 52L;
    private static final long OCCUPIED_SETBACK_MIN_ATTRIBUTE_ID = 53L;
    private static final long OCCUPIED_SETBACK_MAX_ATTRIBUTE_ID = 54L;
    private static final long UNOCCUPIED_SETBACK_ATTRIBUTE_ID = 55L;
    private static final long UNOCCUPIED_SETBACK_MIN_ATTRIBUTE_ID = 56L;
    private static final long UNOCCUPIED_SETBACK_MAX_ATTRIBUTE_ID = 57L;
    private static final long EMERGENCY_HEAT_DELTA_ATTRIBUTE_ID = 58L;
    private static final long A_C_TYPE_ATTRIBUTE_ID = 64L;
    private static final long A_C_CAPACITY_ATTRIBUTE_ID = 65L;
    private static final long A_C_REFRIGERANT_TYPE_ATTRIBUTE_ID = 66L;
    private static final long A_C_COMPRESSOR_TYPE_ATTRIBUTE_ID = 67L;
    private static final long A_C_ERROR_CODE_ATTRIBUTE_ID = 68L;
    private static final long A_C_LOUVER_POSITION_ATTRIBUTE_ID = 69L;
    private static final long A_C_COIL_TEMPERATURE_ATTRIBUTE_ID = 70L;
    private static final long A_C_CAPACITYFORMAT_ATTRIBUTE_ID = 71L;
    private static final long PRESET_TYPES_ATTRIBUTE_ID = 72L;
    private static final long SCHEDULE_TYPES_ATTRIBUTE_ID = 73L;
    private static final long NUMBER_OF_PRESETS_ATTRIBUTE_ID = 74L;
    private static final long NUMBER_OF_SCHEDULES_ATTRIBUTE_ID = 75L;
    private static final long NUMBER_OF_SCHEDULE_TRANSITIONS_ATTRIBUTE_ID = 76L;
    private static final long NUMBER_OF_SCHEDULE_TRANSITION_PER_DAY_ATTRIBUTE_ID = 77L;
    private static final long ACTIVE_PRESET_HANDLE_ATTRIBUTE_ID = 78L;
    private static final long ACTIVE_SCHEDULE_HANDLE_ATTRIBUTE_ID = 79L;
    private static final long PRESETS_ATTRIBUTE_ID = 80L;
    private static final long SCHEDULES_ATTRIBUTE_ID = 81L;
    private static final long PRESETS_SCHEDULES_EDITABLE_ATTRIBUTE_ID = 82L;
    private static final long TEMPERATURE_SETPOINT_HOLD_POLICY_ATTRIBUTE_ID = 83L;
    private static final long SETPOINT_HOLD_EXPIRY_TIMESTAMP_ATTRIBUTE_ID = 84L;
    private static final long QUEUED_PRESET_ATTRIBUTE_ID = 85L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ThermostatCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void setpointRaiseLower(DefaultClusterCallback callback, Integer mode, Integer amount) {
      setpointRaiseLower(callback, mode, amount, 0);
    }

    public void setpointRaiseLower(DefaultClusterCallback callback, Integer mode, Integer amount, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long modeFieldID = 0L;
      BaseTLVType modetlvValue = new UIntType(mode);
      elements.add(new StructElement(modeFieldID, modetlvValue));

      final long amountFieldID = 1L;
      BaseTLVType amounttlvValue = new IntType(amount);
      elements.add(new StructElement(amountFieldID, amounttlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void setWeeklySchedule(DefaultClusterCallback callback, Integer numberOfTransitionsForSequence, Integer dayOfWeekForSequence, Integer modeForSequence, ArrayList<ChipStructs.ThermostatClusterWeeklyScheduleTransitionStruct> transitions) {
      setWeeklySchedule(callback, numberOfTransitionsForSequence, dayOfWeekForSequence, modeForSequence, transitions, 0);
    }

    public void setWeeklySchedule(DefaultClusterCallback callback, Integer numberOfTransitionsForSequence, Integer dayOfWeekForSequence, Integer modeForSequence, ArrayList<ChipStructs.ThermostatClusterWeeklyScheduleTransitionStruct> transitions, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long numberOfTransitionsForSequenceFieldID = 0L;
      BaseTLVType numberOfTransitionsForSequencetlvValue = new UIntType(numberOfTransitionsForSequence);
      elements.add(new StructElement(numberOfTransitionsForSequenceFieldID, numberOfTransitionsForSequencetlvValue));

      final long dayOfWeekForSequenceFieldID = 1L;
      BaseTLVType dayOfWeekForSequencetlvValue = new UIntType(dayOfWeekForSequence);
      elements.add(new StructElement(dayOfWeekForSequenceFieldID, dayOfWeekForSequencetlvValue));

      final long modeForSequenceFieldID = 2L;
      BaseTLVType modeForSequencetlvValue = new UIntType(modeForSequence);
      elements.add(new StructElement(modeForSequenceFieldID, modeForSequencetlvValue));

      final long transitionsFieldID = 3L;
      BaseTLVType transitionstlvValue = ArrayType.generateArrayType(transitions, (elementtransitions) -> elementtransitions.encodeTlv());
      elements.add(new StructElement(transitionsFieldID, transitionstlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void getWeeklySchedule(GetWeeklyScheduleResponseCallback callback, Integer daysToReturn, Integer modeToReturn) {
      getWeeklySchedule(callback, daysToReturn, modeToReturn, 0);
    }

    public void getWeeklySchedule(GetWeeklyScheduleResponseCallback callback, Integer daysToReturn, Integer modeToReturn, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long daysToReturnFieldID = 0L;
      BaseTLVType daysToReturntlvValue = new UIntType(daysToReturn);
      elements.add(new StructElement(daysToReturnFieldID, daysToReturntlvValue));

      final long modeToReturnFieldID = 1L;
      BaseTLVType modeToReturntlvValue = new UIntType(modeToReturn);
      elements.add(new StructElement(modeToReturnFieldID, modeToReturntlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long numberOfTransitionsForSequenceFieldID = 0L;
          Integer numberOfTransitionsForSequence = null;
          final long dayOfWeekForSequenceFieldID = 1L;
          Integer dayOfWeekForSequence = null;
          final long modeForSequenceFieldID = 2L;
          Integer modeForSequence = null;
          final long transitionsFieldID = 3L;
          ArrayList<ChipStructs.ThermostatClusterWeeklyScheduleTransitionStruct> transitions = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == numberOfTransitionsForSequenceFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                numberOfTransitionsForSequence = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dayOfWeekForSequenceFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                dayOfWeekForSequence = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == modeForSequenceFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                modeForSequence = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == transitionsFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                transitions = castingValue.map((elementcastingValue) -> ChipStructs.ThermostatClusterWeeklyScheduleTransitionStruct.decodeTlv(elementcastingValue));
              }
            }
          }
          callback.onSuccess(numberOfTransitionsForSequence, dayOfWeekForSequence, modeForSequence, transitions);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void clearWeeklySchedule(DefaultClusterCallback callback) {
      clearWeeklySchedule(callback, 0);
    }

    public void clearWeeklySchedule(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void setActiveScheduleRequest(DefaultClusterCallback callback, byte[] scheduleHandle) {
      setActiveScheduleRequest(callback, scheduleHandle, 0);
    }

    public void setActiveScheduleRequest(DefaultClusterCallback callback, byte[] scheduleHandle, int timedInvokeTimeoutMs) {
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long scheduleHandleFieldID = 0L;
      BaseTLVType scheduleHandletlvValue = new ByteArrayType(scheduleHandle);
      elements.add(new StructElement(scheduleHandleFieldID, scheduleHandletlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void setActivePresetRequest(DefaultClusterCallback callback, byte[] presetHandle, Optional<Integer> delayMinutes) {
      setActivePresetRequest(callback, presetHandle, delayMinutes, 0);
    }

    public void setActivePresetRequest(DefaultClusterCallback callback, byte[] presetHandle, Optional<Integer> delayMinutes, int timedInvokeTimeoutMs) {
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long presetHandleFieldID = 0L;
      BaseTLVType presetHandletlvValue = new ByteArrayType(presetHandle);
      elements.add(new StructElement(presetHandleFieldID, presetHandletlvValue));

      final long delayMinutesFieldID = 1L;
      BaseTLVType delayMinutestlvValue = delayMinutes.<BaseTLVType>map((nonOptionaldelayMinutes) -> new UIntType(nonOptionaldelayMinutes)).orElse(new EmptyType());
      elements.add(new StructElement(delayMinutesFieldID, delayMinutestlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void startPresetsSchedulesEditRequest(DefaultClusterCallback callback, Integer timeoutSeconds) {
      startPresetsSchedulesEditRequest(callback, timeoutSeconds, 0);
    }

    public void startPresetsSchedulesEditRequest(DefaultClusterCallback callback, Integer timeoutSeconds, int timedInvokeTimeoutMs) {
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long timeoutSecondsFieldID = 0L;
      BaseTLVType timeoutSecondstlvValue = new UIntType(timeoutSeconds);
      elements.add(new StructElement(timeoutSecondsFieldID, timeoutSecondstlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void cancelPresetsSchedulesEditRequest(DefaultClusterCallback callback) {
      cancelPresetsSchedulesEditRequest(callback, 0);
    }

    public void cancelPresetsSchedulesEditRequest(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 8L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void commitPresetsSchedulesRequest(DefaultClusterCallback callback) {
      commitPresetsSchedulesRequest(callback, 0);
    }

    public void commitPresetsSchedulesRequest(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 9L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void cancelSetActivePresetRequest(DefaultClusterCallback callback) {
      cancelSetActivePresetRequest(callback, 0);
    }

    public void cancelSetActivePresetRequest(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 10L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void setTemperatureSetpointHoldPolicy(DefaultClusterCallback callback, Integer temperatureSetpointHoldPolicy) {
      setTemperatureSetpointHoldPolicy(callback, temperatureSetpointHoldPolicy, 0);
    }

    public void setTemperatureSetpointHoldPolicy(DefaultClusterCallback callback, Integer temperatureSetpointHoldPolicy, int timedInvokeTimeoutMs) {
      final long commandId = 11L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long temperatureSetpointHoldPolicyFieldID = 0L;
      BaseTLVType temperatureSetpointHoldPolicytlvValue = new UIntType(temperatureSetpointHoldPolicy);
      elements.add(new StructElement(temperatureSetpointHoldPolicyFieldID, temperatureSetpointHoldPolicytlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface GetWeeklyScheduleResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer numberOfTransitionsForSequence, Integer dayOfWeekForSequence, Integer modeForSequence, ArrayList<ChipStructs.ThermostatClusterWeeklyScheduleTransitionStruct> transitions);
    }

    public interface LocalTemperatureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OutdoorTemperatureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface TemperatureSetpointHoldDurationAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface SetpointChangeAmountAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OccupiedSetbackAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OccupiedSetbackMinAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface OccupiedSetbackMaxAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface UnoccupiedSetbackAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface UnoccupiedSetbackMinAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface UnoccupiedSetbackMaxAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ACCoilTemperatureAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface PresetTypesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ThermostatClusterPresetTypeStruct> value);
    }

    public interface ScheduleTypesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ThermostatClusterScheduleTypeStruct> value);
    }

    public interface NumberOfScheduleTransitionPerDayAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ActivePresetHandleAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface ActiveScheduleHandleAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface PresetsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ThermostatClusterPresetStruct> value);
    }

    public interface SchedulesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ThermostatClusterScheduleStruct> value);
    }

    public interface SetpointHoldExpiryTimestampAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface QueuedPresetAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ThermostatClusterQueuedPresetStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readLocalTemperatureAttribute(
        LocalTemperatureAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCAL_TEMPERATURE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCAL_TEMPERATURE_ATTRIBUTE_ID, true);
    }

    public void subscribeLocalTemperatureAttribute(
        LocalTemperatureAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCAL_TEMPERATURE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCAL_TEMPERATURE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOutdoorTemperatureAttribute(
        OutdoorTemperatureAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OUTDOOR_TEMPERATURE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OUTDOOR_TEMPERATURE_ATTRIBUTE_ID, true);
    }

    public void subscribeOutdoorTemperatureAttribute(
        OutdoorTemperatureAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OUTDOOR_TEMPERATURE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OUTDOOR_TEMPERATURE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOccupancyAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPANCY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPANCY_ATTRIBUTE_ID, true);
    }

    public void subscribeOccupancyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPANCY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPANCY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAbsMinHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ABS_MIN_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ABS_MIN_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID, true);
    }

    public void subscribeAbsMinHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ABS_MIN_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ABS_MIN_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAbsMaxHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ABS_MAX_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ABS_MAX_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID, true);
    }

    public void subscribeAbsMaxHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ABS_MAX_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ABS_MAX_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAbsMinCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ABS_MIN_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ABS_MIN_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID, true);
    }

    public void subscribeAbsMinCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ABS_MIN_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ABS_MIN_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAbsMaxCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ABS_MAX_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ABS_MAX_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID, true);
    }

    public void subscribeAbsMaxCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ABS_MAX_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ABS_MAX_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPICoolingDemandAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, P_I_COOLING_DEMAND_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, P_I_COOLING_DEMAND_ATTRIBUTE_ID, true);
    }

    public void subscribePICoolingDemandAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, P_I_COOLING_DEMAND_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, P_I_COOLING_DEMAND_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPIHeatingDemandAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, P_I_HEATING_DEMAND_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, P_I_HEATING_DEMAND_ATTRIBUTE_ID, true);
    }

    public void subscribePIHeatingDemandAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, P_I_HEATING_DEMAND_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, P_I_HEATING_DEMAND_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readHVACSystemTypeConfigurationAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, H_V_A_C_SYSTEM_TYPE_CONFIGURATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, H_V_A_C_SYSTEM_TYPE_CONFIGURATION_ATTRIBUTE_ID, true);
    }

    public void writeHVACSystemTypeConfigurationAttribute(DefaultClusterCallback callback, Integer value) {
      writeHVACSystemTypeConfigurationAttribute(callback, value, 0);
    }

    public void writeHVACSystemTypeConfigurationAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), H_V_A_C_SYSTEM_TYPE_CONFIGURATION_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeHVACSystemTypeConfigurationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, H_V_A_C_SYSTEM_TYPE_CONFIGURATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, H_V_A_C_SYSTEM_TYPE_CONFIGURATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLocalTemperatureCalibrationAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCAL_TEMPERATURE_CALIBRATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCAL_TEMPERATURE_CALIBRATION_ATTRIBUTE_ID, true);
    }

    public void writeLocalTemperatureCalibrationAttribute(DefaultClusterCallback callback, Integer value) {
      writeLocalTemperatureCalibrationAttribute(callback, value, 0);
    }

    public void writeLocalTemperatureCalibrationAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), LOCAL_TEMPERATURE_CALIBRATION_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLocalTemperatureCalibrationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LOCAL_TEMPERATURE_CALIBRATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LOCAL_TEMPERATURE_CALIBRATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOccupiedCoolingSetpointAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, true);
    }

    public void writeOccupiedCoolingSetpointAttribute(DefaultClusterCallback callback, Integer value) {
      writeOccupiedCoolingSetpointAttribute(callback, value, 0);
    }

    public void writeOccupiedCoolingSetpointAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOccupiedCoolingSetpointAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOccupiedHeatingSetpointAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID, true);
    }

    public void writeOccupiedHeatingSetpointAttribute(DefaultClusterCallback callback, Integer value) {
      writeOccupiedHeatingSetpointAttribute(callback, value, 0);
    }

    public void writeOccupiedHeatingSetpointAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), OCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOccupiedHeatingSetpointAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUnoccupiedCoolingSetpointAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNOCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNOCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, true);
    }

    public void writeUnoccupiedCoolingSetpointAttribute(DefaultClusterCallback callback, Integer value) {
      writeUnoccupiedCoolingSetpointAttribute(callback, value, 0);
    }

    public void writeUnoccupiedCoolingSetpointAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), UNOCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeUnoccupiedCoolingSetpointAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNOCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNOCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUnoccupiedHeatingSetpointAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNOCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNOCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID, true);
    }

    public void writeUnoccupiedHeatingSetpointAttribute(DefaultClusterCallback callback, Integer value) {
      writeUnoccupiedHeatingSetpointAttribute(callback, value, 0);
    }

    public void writeUnoccupiedHeatingSetpointAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), UNOCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeUnoccupiedHeatingSetpointAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNOCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNOCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID, true);
    }

    public void writeMinHeatSetpointLimitAttribute(DefaultClusterCallback callback, Integer value) {
      writeMinHeatSetpointLimitAttribute(callback, value, 0);
    }

    public void writeMinHeatSetpointLimitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), MIN_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeMinHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID, true);
    }

    public void writeMaxHeatSetpointLimitAttribute(DefaultClusterCallback callback, Integer value) {
      writeMaxHeatSetpointLimitAttribute(callback, value, 0);
    }

    public void writeMaxHeatSetpointLimitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), MAX_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeMaxHeatSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_HEAT_SETPOINT_LIMIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID, true);
    }

    public void writeMinCoolSetpointLimitAttribute(DefaultClusterCallback callback, Integer value) {
      writeMinCoolSetpointLimitAttribute(callback, value, 0);
    }

    public void writeMinCoolSetpointLimitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), MIN_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeMinCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID, true);
    }

    public void writeMaxCoolSetpointLimitAttribute(DefaultClusterCallback callback, Integer value) {
      writeMaxCoolSetpointLimitAttribute(callback, value, 0);
    }

    public void writeMaxCoolSetpointLimitAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), MAX_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeMaxCoolSetpointLimitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_COOL_SETPOINT_LIMIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinSetpointDeadBandAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_SETPOINT_DEAD_BAND_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_SETPOINT_DEAD_BAND_ATTRIBUTE_ID, true);
    }

    public void writeMinSetpointDeadBandAttribute(DefaultClusterCallback callback, Integer value) {
      writeMinSetpointDeadBandAttribute(callback, value, 0);
    }

    public void writeMinSetpointDeadBandAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), MIN_SETPOINT_DEAD_BAND_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeMinSetpointDeadBandAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_SETPOINT_DEAD_BAND_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_SETPOINT_DEAD_BAND_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRemoteSensingAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REMOTE_SENSING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REMOTE_SENSING_ATTRIBUTE_ID, true);
    }

    public void writeRemoteSensingAttribute(DefaultClusterCallback callback, Integer value) {
      writeRemoteSensingAttribute(callback, value, 0);
    }

    public void writeRemoteSensingAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), REMOTE_SENSING_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRemoteSensingAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REMOTE_SENSING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REMOTE_SENSING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readControlSequenceOfOperationAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CONTROL_SEQUENCE_OF_OPERATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CONTROL_SEQUENCE_OF_OPERATION_ATTRIBUTE_ID, true);
    }

    public void writeControlSequenceOfOperationAttribute(DefaultClusterCallback callback, Integer value) {
      writeControlSequenceOfOperationAttribute(callback, value, 0);
    }

    public void writeControlSequenceOfOperationAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), CONTROL_SEQUENCE_OF_OPERATION_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeControlSequenceOfOperationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CONTROL_SEQUENCE_OF_OPERATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CONTROL_SEQUENCE_OF_OPERATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSystemModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SYSTEM_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SYSTEM_MODE_ATTRIBUTE_ID, true);
    }

    public void writeSystemModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeSystemModeAttribute(callback, value, 0);
    }

    public void writeSystemModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), SYSTEM_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeSystemModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SYSTEM_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SYSTEM_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readThermostatRunningModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, THERMOSTAT_RUNNING_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, THERMOSTAT_RUNNING_MODE_ATTRIBUTE_ID, true);
    }

    public void subscribeThermostatRunningModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, THERMOSTAT_RUNNING_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, THERMOSTAT_RUNNING_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStartOfWeekAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_OF_WEEK_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_OF_WEEK_ATTRIBUTE_ID, true);
    }

    public void subscribeStartOfWeekAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_OF_WEEK_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_OF_WEEK_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfWeeklyTransitionsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_WEEKLY_TRANSITIONS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_WEEKLY_TRANSITIONS_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfWeeklyTransitionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_WEEKLY_TRANSITIONS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_WEEKLY_TRANSITIONS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfDailyTransitionsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_DAILY_TRANSITIONS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_DAILY_TRANSITIONS_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfDailyTransitionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_DAILY_TRANSITIONS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_DAILY_TRANSITIONS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTemperatureSetpointHoldAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TEMPERATURE_SETPOINT_HOLD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TEMPERATURE_SETPOINT_HOLD_ATTRIBUTE_ID, true);
    }

    public void writeTemperatureSetpointHoldAttribute(DefaultClusterCallback callback, Integer value) {
      writeTemperatureSetpointHoldAttribute(callback, value, 0);
    }

    public void writeTemperatureSetpointHoldAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), TEMPERATURE_SETPOINT_HOLD_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeTemperatureSetpointHoldAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TEMPERATURE_SETPOINT_HOLD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TEMPERATURE_SETPOINT_HOLD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTemperatureSetpointHoldDurationAttribute(
        TemperatureSetpointHoldDurationAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TEMPERATURE_SETPOINT_HOLD_DURATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TEMPERATURE_SETPOINT_HOLD_DURATION_ATTRIBUTE_ID, true);
    }

    public void writeTemperatureSetpointHoldDurationAttribute(DefaultClusterCallback callback, Integer value) {
      writeTemperatureSetpointHoldDurationAttribute(callback, value, 0);
    }

    public void writeTemperatureSetpointHoldDurationAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), TEMPERATURE_SETPOINT_HOLD_DURATION_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeTemperatureSetpointHoldDurationAttribute(
        TemperatureSetpointHoldDurationAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TEMPERATURE_SETPOINT_HOLD_DURATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TEMPERATURE_SETPOINT_HOLD_DURATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readThermostatProgrammingOperationModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, THERMOSTAT_PROGRAMMING_OPERATION_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, THERMOSTAT_PROGRAMMING_OPERATION_MODE_ATTRIBUTE_ID, true);
    }

    public void writeThermostatProgrammingOperationModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeThermostatProgrammingOperationModeAttribute(callback, value, 0);
    }

    public void writeThermostatProgrammingOperationModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), THERMOSTAT_PROGRAMMING_OPERATION_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeThermostatProgrammingOperationModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, THERMOSTAT_PROGRAMMING_OPERATION_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, THERMOSTAT_PROGRAMMING_OPERATION_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readThermostatRunningStateAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, THERMOSTAT_RUNNING_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, THERMOSTAT_RUNNING_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeThermostatRunningStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, THERMOSTAT_RUNNING_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, THERMOSTAT_RUNNING_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSetpointChangeSourceAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SETPOINT_CHANGE_SOURCE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SETPOINT_CHANGE_SOURCE_ATTRIBUTE_ID, true);
    }

    public void subscribeSetpointChangeSourceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SETPOINT_CHANGE_SOURCE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SETPOINT_CHANGE_SOURCE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSetpointChangeAmountAttribute(
        SetpointChangeAmountAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SETPOINT_CHANGE_AMOUNT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SETPOINT_CHANGE_AMOUNT_ATTRIBUTE_ID, true);
    }

    public void subscribeSetpointChangeAmountAttribute(
        SetpointChangeAmountAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SETPOINT_CHANGE_AMOUNT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SETPOINT_CHANGE_AMOUNT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSetpointChangeSourceTimestampAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SETPOINT_CHANGE_SOURCE_TIMESTAMP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SETPOINT_CHANGE_SOURCE_TIMESTAMP_ATTRIBUTE_ID, true);
    }

    public void subscribeSetpointChangeSourceTimestampAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SETPOINT_CHANGE_SOURCE_TIMESTAMP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SETPOINT_CHANGE_SOURCE_TIMESTAMP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOccupiedSetbackAttribute(
        OccupiedSetbackAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPIED_SETBACK_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPIED_SETBACK_ATTRIBUTE_ID, true);
    }

    public void writeOccupiedSetbackAttribute(DefaultClusterCallback callback, Integer value) {
      writeOccupiedSetbackAttribute(callback, value, 0);
    }

    public void writeOccupiedSetbackAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), OCCUPIED_SETBACK_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOccupiedSetbackAttribute(
        OccupiedSetbackAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPIED_SETBACK_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPIED_SETBACK_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOccupiedSetbackMinAttribute(
        OccupiedSetbackMinAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPIED_SETBACK_MIN_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPIED_SETBACK_MIN_ATTRIBUTE_ID, true);
    }

    public void subscribeOccupiedSetbackMinAttribute(
        OccupiedSetbackMinAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPIED_SETBACK_MIN_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPIED_SETBACK_MIN_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOccupiedSetbackMaxAttribute(
        OccupiedSetbackMaxAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPIED_SETBACK_MAX_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPIED_SETBACK_MAX_ATTRIBUTE_ID, true);
    }

    public void subscribeOccupiedSetbackMaxAttribute(
        OccupiedSetbackMaxAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPIED_SETBACK_MAX_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPIED_SETBACK_MAX_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUnoccupiedSetbackAttribute(
        UnoccupiedSetbackAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNOCCUPIED_SETBACK_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNOCCUPIED_SETBACK_ATTRIBUTE_ID, true);
    }

    public void writeUnoccupiedSetbackAttribute(DefaultClusterCallback callback, Integer value) {
      writeUnoccupiedSetbackAttribute(callback, value, 0);
    }

    public void writeUnoccupiedSetbackAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), UNOCCUPIED_SETBACK_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeUnoccupiedSetbackAttribute(
        UnoccupiedSetbackAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNOCCUPIED_SETBACK_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNOCCUPIED_SETBACK_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUnoccupiedSetbackMinAttribute(
        UnoccupiedSetbackMinAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNOCCUPIED_SETBACK_MIN_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNOCCUPIED_SETBACK_MIN_ATTRIBUTE_ID, true);
    }

    public void subscribeUnoccupiedSetbackMinAttribute(
        UnoccupiedSetbackMinAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNOCCUPIED_SETBACK_MIN_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNOCCUPIED_SETBACK_MIN_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUnoccupiedSetbackMaxAttribute(
        UnoccupiedSetbackMaxAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNOCCUPIED_SETBACK_MAX_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNOCCUPIED_SETBACK_MAX_ATTRIBUTE_ID, true);
    }

    public void subscribeUnoccupiedSetbackMaxAttribute(
        UnoccupiedSetbackMaxAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNOCCUPIED_SETBACK_MAX_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNOCCUPIED_SETBACK_MAX_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEmergencyHeatDeltaAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EMERGENCY_HEAT_DELTA_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EMERGENCY_HEAT_DELTA_ATTRIBUTE_ID, true);
    }

    public void writeEmergencyHeatDeltaAttribute(DefaultClusterCallback callback, Integer value) {
      writeEmergencyHeatDeltaAttribute(callback, value, 0);
    }

    public void writeEmergencyHeatDeltaAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), EMERGENCY_HEAT_DELTA_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEmergencyHeatDeltaAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EMERGENCY_HEAT_DELTA_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EMERGENCY_HEAT_DELTA_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readACTypeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, A_C_TYPE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, A_C_TYPE_ATTRIBUTE_ID, true);
    }

    public void writeACTypeAttribute(DefaultClusterCallback callback, Integer value) {
      writeACTypeAttribute(callback, value, 0);
    }

    public void writeACTypeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), A_C_TYPE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeACTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, A_C_TYPE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, A_C_TYPE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readACCapacityAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, A_C_CAPACITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, A_C_CAPACITY_ATTRIBUTE_ID, true);
    }

    public void writeACCapacityAttribute(DefaultClusterCallback callback, Integer value) {
      writeACCapacityAttribute(callback, value, 0);
    }

    public void writeACCapacityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), A_C_CAPACITY_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeACCapacityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, A_C_CAPACITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, A_C_CAPACITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readACRefrigerantTypeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, A_C_REFRIGERANT_TYPE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, A_C_REFRIGERANT_TYPE_ATTRIBUTE_ID, true);
    }

    public void writeACRefrigerantTypeAttribute(DefaultClusterCallback callback, Integer value) {
      writeACRefrigerantTypeAttribute(callback, value, 0);
    }

    public void writeACRefrigerantTypeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), A_C_REFRIGERANT_TYPE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeACRefrigerantTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, A_C_REFRIGERANT_TYPE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, A_C_REFRIGERANT_TYPE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readACCompressorTypeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, A_C_COMPRESSOR_TYPE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, A_C_COMPRESSOR_TYPE_ATTRIBUTE_ID, true);
    }

    public void writeACCompressorTypeAttribute(DefaultClusterCallback callback, Integer value) {
      writeACCompressorTypeAttribute(callback, value, 0);
    }

    public void writeACCompressorTypeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), A_C_COMPRESSOR_TYPE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeACCompressorTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, A_C_COMPRESSOR_TYPE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, A_C_COMPRESSOR_TYPE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readACErrorCodeAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, A_C_ERROR_CODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, A_C_ERROR_CODE_ATTRIBUTE_ID, true);
    }

    public void writeACErrorCodeAttribute(DefaultClusterCallback callback, Long value) {
      writeACErrorCodeAttribute(callback, value, 0);
    }

    public void writeACErrorCodeAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), A_C_ERROR_CODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeACErrorCodeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, A_C_ERROR_CODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, A_C_ERROR_CODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readACLouverPositionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, A_C_LOUVER_POSITION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, A_C_LOUVER_POSITION_ATTRIBUTE_ID, true);
    }

    public void writeACLouverPositionAttribute(DefaultClusterCallback callback, Integer value) {
      writeACLouverPositionAttribute(callback, value, 0);
    }

    public void writeACLouverPositionAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), A_C_LOUVER_POSITION_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeACLouverPositionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, A_C_LOUVER_POSITION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, A_C_LOUVER_POSITION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readACCoilTemperatureAttribute(
        ACCoilTemperatureAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, A_C_COIL_TEMPERATURE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, A_C_COIL_TEMPERATURE_ATTRIBUTE_ID, true);
    }

    public void subscribeACCoilTemperatureAttribute(
        ACCoilTemperatureAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, A_C_COIL_TEMPERATURE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, A_C_COIL_TEMPERATURE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readACCapacityformatAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, A_C_CAPACITYFORMAT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, A_C_CAPACITYFORMAT_ATTRIBUTE_ID, true);
    }

    public void writeACCapacityformatAttribute(DefaultClusterCallback callback, Integer value) {
      writeACCapacityformatAttribute(callback, value, 0);
    }

    public void writeACCapacityformatAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), A_C_CAPACITYFORMAT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeACCapacityformatAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, A_C_CAPACITYFORMAT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, A_C_CAPACITYFORMAT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPresetTypesAttribute(
        PresetTypesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRESET_TYPES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThermostatClusterPresetTypeStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRESET_TYPES_ATTRIBUTE_ID, true);
    }

    public void subscribePresetTypesAttribute(
        PresetTypesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRESET_TYPES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThermostatClusterPresetTypeStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRESET_TYPES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readScheduleTypesAttribute(
        ScheduleTypesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCHEDULE_TYPES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThermostatClusterScheduleTypeStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCHEDULE_TYPES_ATTRIBUTE_ID, true);
    }

    public void subscribeScheduleTypesAttribute(
        ScheduleTypesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCHEDULE_TYPES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThermostatClusterScheduleTypeStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCHEDULE_TYPES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfPresetsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_PRESETS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_PRESETS_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfPresetsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_PRESETS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_PRESETS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfSchedulesAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_SCHEDULES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_SCHEDULES_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfSchedulesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_SCHEDULES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_SCHEDULES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfScheduleTransitionsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_SCHEDULE_TRANSITIONS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_SCHEDULE_TRANSITIONS_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfScheduleTransitionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_SCHEDULE_TRANSITIONS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_SCHEDULE_TRANSITIONS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfScheduleTransitionPerDayAttribute(
        NumberOfScheduleTransitionPerDayAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_SCHEDULE_TRANSITION_PER_DAY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_SCHEDULE_TRANSITION_PER_DAY_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfScheduleTransitionPerDayAttribute(
        NumberOfScheduleTransitionPerDayAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_SCHEDULE_TRANSITION_PER_DAY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_SCHEDULE_TRANSITION_PER_DAY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActivePresetHandleAttribute(
        ActivePresetHandleAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_PRESET_HANDLE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_PRESET_HANDLE_ATTRIBUTE_ID, true);
    }

    public void subscribeActivePresetHandleAttribute(
        ActivePresetHandleAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_PRESET_HANDLE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_PRESET_HANDLE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveScheduleHandleAttribute(
        ActiveScheduleHandleAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_SCHEDULE_HANDLE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_SCHEDULE_HANDLE_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveScheduleHandleAttribute(
        ActiveScheduleHandleAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_SCHEDULE_HANDLE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_SCHEDULE_HANDLE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPresetsAttribute(
        PresetsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRESETS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThermostatClusterPresetStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRESETS_ATTRIBUTE_ID, true);
    }

    public void writePresetsAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.ThermostatClusterPresetStruct> value) {
      writePresetsAttribute(callback, value, 0);
    }

    public void writePresetsAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.ThermostatClusterPresetStruct> value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), PRESETS_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribePresetsAttribute(
        PresetsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRESETS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThermostatClusterPresetStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRESETS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSchedulesAttribute(
        SchedulesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCHEDULES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThermostatClusterScheduleStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCHEDULES_ATTRIBUTE_ID, true);
    }

    public void writeSchedulesAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.ThermostatClusterScheduleStruct> value) {
      writeSchedulesAttribute(callback, value, 0);
    }

    public void writeSchedulesAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.ThermostatClusterScheduleStruct> value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), SCHEDULES_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeSchedulesAttribute(
        SchedulesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCHEDULES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ThermostatClusterScheduleStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCHEDULES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPresetsSchedulesEditableAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRESETS_SCHEDULES_EDITABLE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRESETS_SCHEDULES_EDITABLE_ATTRIBUTE_ID, true);
    }

    public void subscribePresetsSchedulesEditableAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRESETS_SCHEDULES_EDITABLE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRESETS_SCHEDULES_EDITABLE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTemperatureSetpointHoldPolicyAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TEMPERATURE_SETPOINT_HOLD_POLICY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TEMPERATURE_SETPOINT_HOLD_POLICY_ATTRIBUTE_ID, true);
    }

    public void subscribeTemperatureSetpointHoldPolicyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TEMPERATURE_SETPOINT_HOLD_POLICY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TEMPERATURE_SETPOINT_HOLD_POLICY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSetpointHoldExpiryTimestampAttribute(
        SetpointHoldExpiryTimestampAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SETPOINT_HOLD_EXPIRY_TIMESTAMP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SETPOINT_HOLD_EXPIRY_TIMESTAMP_ATTRIBUTE_ID, true);
    }

    public void subscribeSetpointHoldExpiryTimestampAttribute(
        SetpointHoldExpiryTimestampAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SETPOINT_HOLD_EXPIRY_TIMESTAMP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SETPOINT_HOLD_EXPIRY_TIMESTAMP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readQueuedPresetAttribute(
        QueuedPresetAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, QUEUED_PRESET_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ThermostatClusterQueuedPresetStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, QUEUED_PRESET_ATTRIBUTE_ID, true);
    }

    public void subscribeQueuedPresetAttribute(
        QueuedPresetAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, QUEUED_PRESET_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ThermostatClusterQueuedPresetStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, QUEUED_PRESET_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class FanControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 514L;

    private static final long FAN_MODE_ATTRIBUTE_ID = 0L;
    private static final long FAN_MODE_SEQUENCE_ATTRIBUTE_ID = 1L;
    private static final long PERCENT_SETTING_ATTRIBUTE_ID = 2L;
    private static final long PERCENT_CURRENT_ATTRIBUTE_ID = 3L;
    private static final long SPEED_MAX_ATTRIBUTE_ID = 4L;
    private static final long SPEED_SETTING_ATTRIBUTE_ID = 5L;
    private static final long SPEED_CURRENT_ATTRIBUTE_ID = 6L;
    private static final long ROCK_SUPPORT_ATTRIBUTE_ID = 7L;
    private static final long ROCK_SETTING_ATTRIBUTE_ID = 8L;
    private static final long WIND_SUPPORT_ATTRIBUTE_ID = 9L;
    private static final long WIND_SETTING_ATTRIBUTE_ID = 10L;
    private static final long AIRFLOW_DIRECTION_ATTRIBUTE_ID = 11L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public FanControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void step(DefaultClusterCallback callback, Integer direction, Optional<Boolean> wrap, Optional<Boolean> lowestOff) {
      step(callback, direction, wrap, lowestOff, 0);
    }

    public void step(DefaultClusterCallback callback, Integer direction, Optional<Boolean> wrap, Optional<Boolean> lowestOff, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long directionFieldID = 0L;
      BaseTLVType directiontlvValue = new UIntType(direction);
      elements.add(new StructElement(directionFieldID, directiontlvValue));

      final long wrapFieldID = 1L;
      BaseTLVType wraptlvValue = wrap.<BaseTLVType>map((nonOptionalwrap) -> new BooleanType(nonOptionalwrap)).orElse(new EmptyType());
      elements.add(new StructElement(wrapFieldID, wraptlvValue));

      final long lowestOffFieldID = 2L;
      BaseTLVType lowestOfftlvValue = lowestOff.<BaseTLVType>map((nonOptionallowestOff) -> new BooleanType(nonOptionallowestOff)).orElse(new EmptyType());
      elements.add(new StructElement(lowestOffFieldID, lowestOfftlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface PercentSettingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface SpeedSettingAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readFanModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FAN_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FAN_MODE_ATTRIBUTE_ID, true);
    }

    public void writeFanModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeFanModeAttribute(callback, value, 0);
    }

    public void writeFanModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), FAN_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeFanModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FAN_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FAN_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFanModeSequenceAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FAN_MODE_SEQUENCE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FAN_MODE_SEQUENCE_ATTRIBUTE_ID, true);
    }

    public void subscribeFanModeSequenceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FAN_MODE_SEQUENCE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FAN_MODE_SEQUENCE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPercentSettingAttribute(
        PercentSettingAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PERCENT_SETTING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PERCENT_SETTING_ATTRIBUTE_ID, true);
    }

    public void writePercentSettingAttribute(DefaultClusterCallback callback, Integer value) {
      writePercentSettingAttribute(callback, value, 0);
    }

    public void writePercentSettingAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), PERCENT_SETTING_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribePercentSettingAttribute(
        PercentSettingAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PERCENT_SETTING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PERCENT_SETTING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPercentCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PERCENT_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PERCENT_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribePercentCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PERCENT_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PERCENT_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSpeedMaxAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SPEED_MAX_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SPEED_MAX_ATTRIBUTE_ID, true);
    }

    public void subscribeSpeedMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SPEED_MAX_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SPEED_MAX_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSpeedSettingAttribute(
        SpeedSettingAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SPEED_SETTING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SPEED_SETTING_ATTRIBUTE_ID, true);
    }

    public void writeSpeedSettingAttribute(DefaultClusterCallback callback, Integer value) {
      writeSpeedSettingAttribute(callback, value, 0);
    }

    public void writeSpeedSettingAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), SPEED_SETTING_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeSpeedSettingAttribute(
        SpeedSettingAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SPEED_SETTING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SPEED_SETTING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSpeedCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SPEED_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SPEED_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeSpeedCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SPEED_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SPEED_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRockSupportAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ROCK_SUPPORT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ROCK_SUPPORT_ATTRIBUTE_ID, true);
    }

    public void subscribeRockSupportAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ROCK_SUPPORT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ROCK_SUPPORT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRockSettingAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ROCK_SETTING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ROCK_SETTING_ATTRIBUTE_ID, true);
    }

    public void writeRockSettingAttribute(DefaultClusterCallback callback, Integer value) {
      writeRockSettingAttribute(callback, value, 0);
    }

    public void writeRockSettingAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), ROCK_SETTING_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRockSettingAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ROCK_SETTING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ROCK_SETTING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readWindSupportAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIND_SUPPORT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIND_SUPPORT_ATTRIBUTE_ID, true);
    }

    public void subscribeWindSupportAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIND_SUPPORT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIND_SUPPORT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readWindSettingAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIND_SETTING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIND_SETTING_ATTRIBUTE_ID, true);
    }

    public void writeWindSettingAttribute(DefaultClusterCallback callback, Integer value) {
      writeWindSettingAttribute(callback, value, 0);
    }

    public void writeWindSettingAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), WIND_SETTING_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeWindSettingAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WIND_SETTING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WIND_SETTING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAirflowDirectionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AIRFLOW_DIRECTION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AIRFLOW_DIRECTION_ATTRIBUTE_ID, true);
    }

    public void writeAirflowDirectionAttribute(DefaultClusterCallback callback, Integer value) {
      writeAirflowDirectionAttribute(callback, value, 0);
    }

    public void writeAirflowDirectionAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), AIRFLOW_DIRECTION_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeAirflowDirectionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AIRFLOW_DIRECTION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AIRFLOW_DIRECTION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ThermostatUserInterfaceConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 516L;

    private static final long TEMPERATURE_DISPLAY_MODE_ATTRIBUTE_ID = 0L;
    private static final long KEYPAD_LOCKOUT_ATTRIBUTE_ID = 1L;
    private static final long SCHEDULE_PROGRAMMING_VISIBILITY_ATTRIBUTE_ID = 2L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ThermostatUserInterfaceConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readTemperatureDisplayModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TEMPERATURE_DISPLAY_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TEMPERATURE_DISPLAY_MODE_ATTRIBUTE_ID, true);
    }

    public void writeTemperatureDisplayModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeTemperatureDisplayModeAttribute(callback, value, 0);
    }

    public void writeTemperatureDisplayModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), TEMPERATURE_DISPLAY_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeTemperatureDisplayModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TEMPERATURE_DISPLAY_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TEMPERATURE_DISPLAY_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readKeypadLockoutAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, KEYPAD_LOCKOUT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, KEYPAD_LOCKOUT_ATTRIBUTE_ID, true);
    }

    public void writeKeypadLockoutAttribute(DefaultClusterCallback callback, Integer value) {
      writeKeypadLockoutAttribute(callback, value, 0);
    }

    public void writeKeypadLockoutAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), KEYPAD_LOCKOUT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeKeypadLockoutAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, KEYPAD_LOCKOUT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, KEYPAD_LOCKOUT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readScheduleProgrammingVisibilityAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCHEDULE_PROGRAMMING_VISIBILITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCHEDULE_PROGRAMMING_VISIBILITY_ATTRIBUTE_ID, true);
    }

    public void writeScheduleProgrammingVisibilityAttribute(DefaultClusterCallback callback, Integer value) {
      writeScheduleProgrammingVisibilityAttribute(callback, value, 0);
    }

    public void writeScheduleProgrammingVisibilityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), SCHEDULE_PROGRAMMING_VISIBILITY_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeScheduleProgrammingVisibilityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCHEDULE_PROGRAMMING_VISIBILITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCHEDULE_PROGRAMMING_VISIBILITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ColorControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 768L;

    private static final long CURRENT_HUE_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_SATURATION_ATTRIBUTE_ID = 1L;
    private static final long REMAINING_TIME_ATTRIBUTE_ID = 2L;
    private static final long CURRENT_X_ATTRIBUTE_ID = 3L;
    private static final long CURRENT_Y_ATTRIBUTE_ID = 4L;
    private static final long DRIFT_COMPENSATION_ATTRIBUTE_ID = 5L;
    private static final long COMPENSATION_TEXT_ATTRIBUTE_ID = 6L;
    private static final long COLOR_TEMPERATURE_MIREDS_ATTRIBUTE_ID = 7L;
    private static final long COLOR_MODE_ATTRIBUTE_ID = 8L;
    private static final long OPTIONS_ATTRIBUTE_ID = 15L;
    private static final long NUMBER_OF_PRIMARIES_ATTRIBUTE_ID = 16L;
    private static final long PRIMARY1_X_ATTRIBUTE_ID = 17L;
    private static final long PRIMARY1_Y_ATTRIBUTE_ID = 18L;
    private static final long PRIMARY1_INTENSITY_ATTRIBUTE_ID = 19L;
    private static final long PRIMARY2_X_ATTRIBUTE_ID = 21L;
    private static final long PRIMARY2_Y_ATTRIBUTE_ID = 22L;
    private static final long PRIMARY2_INTENSITY_ATTRIBUTE_ID = 23L;
    private static final long PRIMARY3_X_ATTRIBUTE_ID = 25L;
    private static final long PRIMARY3_Y_ATTRIBUTE_ID = 26L;
    private static final long PRIMARY3_INTENSITY_ATTRIBUTE_ID = 27L;
    private static final long PRIMARY4_X_ATTRIBUTE_ID = 32L;
    private static final long PRIMARY4_Y_ATTRIBUTE_ID = 33L;
    private static final long PRIMARY4_INTENSITY_ATTRIBUTE_ID = 34L;
    private static final long PRIMARY5_X_ATTRIBUTE_ID = 36L;
    private static final long PRIMARY5_Y_ATTRIBUTE_ID = 37L;
    private static final long PRIMARY5_INTENSITY_ATTRIBUTE_ID = 38L;
    private static final long PRIMARY6_X_ATTRIBUTE_ID = 40L;
    private static final long PRIMARY6_Y_ATTRIBUTE_ID = 41L;
    private static final long PRIMARY6_INTENSITY_ATTRIBUTE_ID = 42L;
    private static final long WHITE_POINT_X_ATTRIBUTE_ID = 48L;
    private static final long WHITE_POINT_Y_ATTRIBUTE_ID = 49L;
    private static final long COLOR_POINT_R_X_ATTRIBUTE_ID = 50L;
    private static final long COLOR_POINT_R_Y_ATTRIBUTE_ID = 51L;
    private static final long COLOR_POINT_R_INTENSITY_ATTRIBUTE_ID = 52L;
    private static final long COLOR_POINT_G_X_ATTRIBUTE_ID = 54L;
    private static final long COLOR_POINT_G_Y_ATTRIBUTE_ID = 55L;
    private static final long COLOR_POINT_G_INTENSITY_ATTRIBUTE_ID = 56L;
    private static final long COLOR_POINT_B_X_ATTRIBUTE_ID = 58L;
    private static final long COLOR_POINT_B_Y_ATTRIBUTE_ID = 59L;
    private static final long COLOR_POINT_B_INTENSITY_ATTRIBUTE_ID = 60L;
    private static final long ENHANCED_CURRENT_HUE_ATTRIBUTE_ID = 16384L;
    private static final long ENHANCED_COLOR_MODE_ATTRIBUTE_ID = 16385L;
    private static final long COLOR_LOOP_ACTIVE_ATTRIBUTE_ID = 16386L;
    private static final long COLOR_LOOP_DIRECTION_ATTRIBUTE_ID = 16387L;
    private static final long COLOR_LOOP_TIME_ATTRIBUTE_ID = 16388L;
    private static final long COLOR_LOOP_START_ENHANCED_HUE_ATTRIBUTE_ID = 16389L;
    private static final long COLOR_LOOP_STORED_ENHANCED_HUE_ATTRIBUTE_ID = 16390L;
    private static final long COLOR_CAPABILITIES_ATTRIBUTE_ID = 16394L;
    private static final long COLOR_TEMP_PHYSICAL_MIN_MIREDS_ATTRIBUTE_ID = 16395L;
    private static final long COLOR_TEMP_PHYSICAL_MAX_MIREDS_ATTRIBUTE_ID = 16396L;
    private static final long COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS_ATTRIBUTE_ID = 16397L;
    private static final long START_UP_COLOR_TEMPERATURE_MIREDS_ATTRIBUTE_ID = 16400L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ColorControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void moveToHue(DefaultClusterCallback callback, Integer hue, Integer direction, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToHue(callback, hue, direction, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void moveToHue(DefaultClusterCallback callback, Integer hue, Integer direction, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long hueFieldID = 0L;
      BaseTLVType huetlvValue = new UIntType(hue);
      elements.add(new StructElement(hueFieldID, huetlvValue));

      final long directionFieldID = 1L;
      BaseTLVType directiontlvValue = new UIntType(direction);
      elements.add(new StructElement(directionFieldID, directiontlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void moveHue(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride) {
      moveHue(callback, moveMode, rate, optionsMask, optionsOverride, 0);
    }

    public void moveHue(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long moveModeFieldID = 0L;
      BaseTLVType moveModetlvValue = new UIntType(moveMode);
      elements.add(new StructElement(moveModeFieldID, moveModetlvValue));

      final long rateFieldID = 1L;
      BaseTLVType ratetlvValue = new UIntType(rate);
      elements.add(new StructElement(rateFieldID, ratetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void stepHue(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      stepHue(callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void stepHue(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long stepModeFieldID = 0L;
      BaseTLVType stepModetlvValue = new UIntType(stepMode);
      elements.add(new StructElement(stepModeFieldID, stepModetlvValue));

      final long stepSizeFieldID = 1L;
      BaseTLVType stepSizetlvValue = new UIntType(stepSize);
      elements.add(new StructElement(stepSizeFieldID, stepSizetlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void moveToSaturation(DefaultClusterCallback callback, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToSaturation(callback, saturation, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void moveToSaturation(DefaultClusterCallback callback, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long saturationFieldID = 0L;
      BaseTLVType saturationtlvValue = new UIntType(saturation);
      elements.add(new StructElement(saturationFieldID, saturationtlvValue));

      final long transitionTimeFieldID = 1L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void moveSaturation(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride) {
      moveSaturation(callback, moveMode, rate, optionsMask, optionsOverride, 0);
    }

    public void moveSaturation(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long moveModeFieldID = 0L;
      BaseTLVType moveModetlvValue = new UIntType(moveMode);
      elements.add(new StructElement(moveModeFieldID, moveModetlvValue));

      final long rateFieldID = 1L;
      BaseTLVType ratetlvValue = new UIntType(rate);
      elements.add(new StructElement(rateFieldID, ratetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void stepSaturation(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      stepSaturation(callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void stepSaturation(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long stepModeFieldID = 0L;
      BaseTLVType stepModetlvValue = new UIntType(stepMode);
      elements.add(new StructElement(stepModeFieldID, stepModetlvValue));

      final long stepSizeFieldID = 1L;
      BaseTLVType stepSizetlvValue = new UIntType(stepSize);
      elements.add(new StructElement(stepSizeFieldID, stepSizetlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void moveToHueAndSaturation(DefaultClusterCallback callback, Integer hue, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToHueAndSaturation(callback, hue, saturation, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void moveToHueAndSaturation(DefaultClusterCallback callback, Integer hue, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long hueFieldID = 0L;
      BaseTLVType huetlvValue = new UIntType(hue);
      elements.add(new StructElement(hueFieldID, huetlvValue));

      final long saturationFieldID = 1L;
      BaseTLVType saturationtlvValue = new UIntType(saturation);
      elements.add(new StructElement(saturationFieldID, saturationtlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void moveToColor(DefaultClusterCallback callback, Integer colorX, Integer colorY, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToColor(callback, colorX, colorY, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void moveToColor(DefaultClusterCallback callback, Integer colorX, Integer colorY, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long colorXFieldID = 0L;
      BaseTLVType colorXtlvValue = new UIntType(colorX);
      elements.add(new StructElement(colorXFieldID, colorXtlvValue));

      final long colorYFieldID = 1L;
      BaseTLVType colorYtlvValue = new UIntType(colorY);
      elements.add(new StructElement(colorYFieldID, colorYtlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void moveColor(DefaultClusterCallback callback, Integer rateX, Integer rateY, Integer optionsMask, Integer optionsOverride) {
      moveColor(callback, rateX, rateY, optionsMask, optionsOverride, 0);
    }

    public void moveColor(DefaultClusterCallback callback, Integer rateX, Integer rateY, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 8L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long rateXFieldID = 0L;
      BaseTLVType rateXtlvValue = new IntType(rateX);
      elements.add(new StructElement(rateXFieldID, rateXtlvValue));

      final long rateYFieldID = 1L;
      BaseTLVType rateYtlvValue = new IntType(rateY);
      elements.add(new StructElement(rateYFieldID, rateYtlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void stepColor(DefaultClusterCallback callback, Integer stepX, Integer stepY, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      stepColor(callback, stepX, stepY, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void stepColor(DefaultClusterCallback callback, Integer stepX, Integer stepY, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 9L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long stepXFieldID = 0L;
      BaseTLVType stepXtlvValue = new IntType(stepX);
      elements.add(new StructElement(stepXFieldID, stepXtlvValue));

      final long stepYFieldID = 1L;
      BaseTLVType stepYtlvValue = new IntType(stepY);
      elements.add(new StructElement(stepYFieldID, stepYtlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void moveToColorTemperature(DefaultClusterCallback callback, Integer colorTemperatureMireds, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      moveToColorTemperature(callback, colorTemperatureMireds, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void moveToColorTemperature(DefaultClusterCallback callback, Integer colorTemperatureMireds, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 10L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long colorTemperatureMiredsFieldID = 0L;
      BaseTLVType colorTemperatureMiredstlvValue = new UIntType(colorTemperatureMireds);
      elements.add(new StructElement(colorTemperatureMiredsFieldID, colorTemperatureMiredstlvValue));

      final long transitionTimeFieldID = 1L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void enhancedMoveToHue(DefaultClusterCallback callback, Integer enhancedHue, Integer direction, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      enhancedMoveToHue(callback, enhancedHue, direction, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void enhancedMoveToHue(DefaultClusterCallback callback, Integer enhancedHue, Integer direction, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 64L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long enhancedHueFieldID = 0L;
      BaseTLVType enhancedHuetlvValue = new UIntType(enhancedHue);
      elements.add(new StructElement(enhancedHueFieldID, enhancedHuetlvValue));

      final long directionFieldID = 1L;
      BaseTLVType directiontlvValue = new UIntType(direction);
      elements.add(new StructElement(directionFieldID, directiontlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void enhancedMoveHue(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride) {
      enhancedMoveHue(callback, moveMode, rate, optionsMask, optionsOverride, 0);
    }

    public void enhancedMoveHue(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 65L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long moveModeFieldID = 0L;
      BaseTLVType moveModetlvValue = new UIntType(moveMode);
      elements.add(new StructElement(moveModeFieldID, moveModetlvValue));

      final long rateFieldID = 1L;
      BaseTLVType ratetlvValue = new UIntType(rate);
      elements.add(new StructElement(rateFieldID, ratetlvValue));

      final long optionsMaskFieldID = 2L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 3L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void enhancedStepHue(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      enhancedStepHue(callback, stepMode, stepSize, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void enhancedStepHue(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 66L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long stepModeFieldID = 0L;
      BaseTLVType stepModetlvValue = new UIntType(stepMode);
      elements.add(new StructElement(stepModeFieldID, stepModetlvValue));

      final long stepSizeFieldID = 1L;
      BaseTLVType stepSizetlvValue = new UIntType(stepSize);
      elements.add(new StructElement(stepSizeFieldID, stepSizetlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void enhancedMoveToHueAndSaturation(DefaultClusterCallback callback, Integer enhancedHue, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride) {
      enhancedMoveToHueAndSaturation(callback, enhancedHue, saturation, transitionTime, optionsMask, optionsOverride, 0);
    }

    public void enhancedMoveToHueAndSaturation(DefaultClusterCallback callback, Integer enhancedHue, Integer saturation, Integer transitionTime, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 67L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long enhancedHueFieldID = 0L;
      BaseTLVType enhancedHuetlvValue = new UIntType(enhancedHue);
      elements.add(new StructElement(enhancedHueFieldID, enhancedHuetlvValue));

      final long saturationFieldID = 1L;
      BaseTLVType saturationtlvValue = new UIntType(saturation);
      elements.add(new StructElement(saturationFieldID, saturationtlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long optionsMaskFieldID = 3L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 4L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void colorLoopSet(DefaultClusterCallback callback, Integer updateFlags, Integer action, Integer direction, Integer time, Integer startHue, Integer optionsMask, Integer optionsOverride) {
      colorLoopSet(callback, updateFlags, action, direction, time, startHue, optionsMask, optionsOverride, 0);
    }

    public void colorLoopSet(DefaultClusterCallback callback, Integer updateFlags, Integer action, Integer direction, Integer time, Integer startHue, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 68L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long updateFlagsFieldID = 0L;
      BaseTLVType updateFlagstlvValue = new UIntType(updateFlags);
      elements.add(new StructElement(updateFlagsFieldID, updateFlagstlvValue));

      final long actionFieldID = 1L;
      BaseTLVType actiontlvValue = new UIntType(action);
      elements.add(new StructElement(actionFieldID, actiontlvValue));

      final long directionFieldID = 2L;
      BaseTLVType directiontlvValue = new UIntType(direction);
      elements.add(new StructElement(directionFieldID, directiontlvValue));

      final long timeFieldID = 3L;
      BaseTLVType timetlvValue = new UIntType(time);
      elements.add(new StructElement(timeFieldID, timetlvValue));

      final long startHueFieldID = 4L;
      BaseTLVType startHuetlvValue = new UIntType(startHue);
      elements.add(new StructElement(startHueFieldID, startHuetlvValue));

      final long optionsMaskFieldID = 5L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 6L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void stopMoveStep(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride) {
      stopMoveStep(callback, optionsMask, optionsOverride, 0);
    }

    public void stopMoveStep(DefaultClusterCallback callback, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 71L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long optionsMaskFieldID = 0L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 1L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void moveColorTemperature(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds, Integer optionsMask, Integer optionsOverride) {
      moveColorTemperature(callback, moveMode, rate, colorTemperatureMinimumMireds, colorTemperatureMaximumMireds, optionsMask, optionsOverride, 0);
    }

    public void moveColorTemperature(DefaultClusterCallback callback, Integer moveMode, Integer rate, Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 75L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long moveModeFieldID = 0L;
      BaseTLVType moveModetlvValue = new UIntType(moveMode);
      elements.add(new StructElement(moveModeFieldID, moveModetlvValue));

      final long rateFieldID = 1L;
      BaseTLVType ratetlvValue = new UIntType(rate);
      elements.add(new StructElement(rateFieldID, ratetlvValue));

      final long colorTemperatureMinimumMiredsFieldID = 2L;
      BaseTLVType colorTemperatureMinimumMiredstlvValue = new UIntType(colorTemperatureMinimumMireds);
      elements.add(new StructElement(colorTemperatureMinimumMiredsFieldID, colorTemperatureMinimumMiredstlvValue));

      final long colorTemperatureMaximumMiredsFieldID = 3L;
      BaseTLVType colorTemperatureMaximumMiredstlvValue = new UIntType(colorTemperatureMaximumMireds);
      elements.add(new StructElement(colorTemperatureMaximumMiredsFieldID, colorTemperatureMaximumMiredstlvValue));

      final long optionsMaskFieldID = 4L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 5L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void stepColorTemperature(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds, Integer optionsMask, Integer optionsOverride) {
      stepColorTemperature(callback, stepMode, stepSize, transitionTime, colorTemperatureMinimumMireds, colorTemperatureMaximumMireds, optionsMask, optionsOverride, 0);
    }

    public void stepColorTemperature(DefaultClusterCallback callback, Integer stepMode, Integer stepSize, Integer transitionTime, Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds, Integer optionsMask, Integer optionsOverride, int timedInvokeTimeoutMs) {
      final long commandId = 76L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long stepModeFieldID = 0L;
      BaseTLVType stepModetlvValue = new UIntType(stepMode);
      elements.add(new StructElement(stepModeFieldID, stepModetlvValue));

      final long stepSizeFieldID = 1L;
      BaseTLVType stepSizetlvValue = new UIntType(stepSize);
      elements.add(new StructElement(stepSizeFieldID, stepSizetlvValue));

      final long transitionTimeFieldID = 2L;
      BaseTLVType transitionTimetlvValue = new UIntType(transitionTime);
      elements.add(new StructElement(transitionTimeFieldID, transitionTimetlvValue));

      final long colorTemperatureMinimumMiredsFieldID = 3L;
      BaseTLVType colorTemperatureMinimumMiredstlvValue = new UIntType(colorTemperatureMinimumMireds);
      elements.add(new StructElement(colorTemperatureMinimumMiredsFieldID, colorTemperatureMinimumMiredstlvValue));

      final long colorTemperatureMaximumMiredsFieldID = 4L;
      BaseTLVType colorTemperatureMaximumMiredstlvValue = new UIntType(colorTemperatureMaximumMireds);
      elements.add(new StructElement(colorTemperatureMaximumMiredsFieldID, colorTemperatureMaximumMiredstlvValue));

      final long optionsMaskFieldID = 5L;
      BaseTLVType optionsMasktlvValue = new UIntType(optionsMask);
      elements.add(new StructElement(optionsMaskFieldID, optionsMasktlvValue));

      final long optionsOverrideFieldID = 6L;
      BaseTLVType optionsOverridetlvValue = new UIntType(optionsOverride);
      elements.add(new StructElement(optionsOverrideFieldID, optionsOverridetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface NumberOfPrimariesAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary1IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary2IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary3IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary4IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary5IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface Primary6IntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ColorPointRIntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ColorPointGIntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ColorPointBIntensityAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface StartUpColorTemperatureMiredsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readCurrentHueAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_HUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_HUE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentHueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_HUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_HUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentSaturationAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_SATURATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_SATURATION_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentSaturationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_SATURATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_SATURATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRemainingTimeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REMAINING_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REMAINING_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeRemainingTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REMAINING_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REMAINING_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentXAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_X_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_X_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentXAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_X_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_X_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentYAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_Y_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_Y_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentYAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_Y_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_Y_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDriftCompensationAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DRIFT_COMPENSATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DRIFT_COMPENSATION_ATTRIBUTE_ID, true);
    }

    public void subscribeDriftCompensationAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DRIFT_COMPENSATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DRIFT_COMPENSATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCompensationTextAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COMPENSATION_TEXT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COMPENSATION_TEXT_ATTRIBUTE_ID, true);
    }

    public void subscribeCompensationTextAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COMPENSATION_TEXT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COMPENSATION_TEXT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorTemperatureMiredsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_TEMPERATURE_MIREDS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_TEMPERATURE_MIREDS_ATTRIBUTE_ID, true);
    }

    public void subscribeColorTemperatureMiredsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_TEMPERATURE_MIREDS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_TEMPERATURE_MIREDS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_MODE_ATTRIBUTE_ID, true);
    }

    public void subscribeColorModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOptionsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPTIONS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPTIONS_ATTRIBUTE_ID, true);
    }

    public void writeOptionsAttribute(DefaultClusterCallback callback, Integer value) {
      writeOptionsAttribute(callback, value, 0);
    }

    public void writeOptionsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), OPTIONS_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOptionsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OPTIONS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OPTIONS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNumberOfPrimariesAttribute(
        NumberOfPrimariesAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_PRIMARIES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_PRIMARIES_ATTRIBUTE_ID, true);
    }

    public void subscribeNumberOfPrimariesAttribute(
        NumberOfPrimariesAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NUMBER_OF_PRIMARIES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NUMBER_OF_PRIMARIES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary1XAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY1_X_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY1_X_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary1XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY1_X_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY1_X_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary1YAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY1_Y_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY1_Y_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary1YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY1_Y_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY1_Y_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary1IntensityAttribute(
        Primary1IntensityAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY1_INTENSITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY1_INTENSITY_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary1IntensityAttribute(
        Primary1IntensityAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY1_INTENSITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY1_INTENSITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary2XAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY2_X_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY2_X_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary2XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY2_X_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY2_X_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary2YAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY2_Y_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY2_Y_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary2YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY2_Y_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY2_Y_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary2IntensityAttribute(
        Primary2IntensityAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY2_INTENSITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY2_INTENSITY_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary2IntensityAttribute(
        Primary2IntensityAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY2_INTENSITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY2_INTENSITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary3XAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY3_X_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY3_X_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary3XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY3_X_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY3_X_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary3YAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY3_Y_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY3_Y_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary3YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY3_Y_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY3_Y_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary3IntensityAttribute(
        Primary3IntensityAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY3_INTENSITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY3_INTENSITY_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary3IntensityAttribute(
        Primary3IntensityAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY3_INTENSITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY3_INTENSITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary4XAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY4_X_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY4_X_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary4XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY4_X_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY4_X_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary4YAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY4_Y_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY4_Y_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary4YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY4_Y_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY4_Y_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary4IntensityAttribute(
        Primary4IntensityAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY4_INTENSITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY4_INTENSITY_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary4IntensityAttribute(
        Primary4IntensityAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY4_INTENSITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY4_INTENSITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary5XAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY5_X_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY5_X_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary5XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY5_X_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY5_X_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary5YAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY5_Y_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY5_Y_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary5YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY5_Y_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY5_Y_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary5IntensityAttribute(
        Primary5IntensityAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY5_INTENSITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY5_INTENSITY_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary5IntensityAttribute(
        Primary5IntensityAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY5_INTENSITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY5_INTENSITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary6XAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY6_X_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY6_X_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary6XAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY6_X_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY6_X_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary6YAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY6_Y_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY6_Y_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary6YAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY6_Y_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY6_Y_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPrimary6IntensityAttribute(
        Primary6IntensityAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY6_INTENSITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY6_INTENSITY_ATTRIBUTE_ID, true);
    }

    public void subscribePrimary6IntensityAttribute(
        Primary6IntensityAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRIMARY6_INTENSITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRIMARY6_INTENSITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readWhitePointXAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WHITE_POINT_X_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WHITE_POINT_X_ATTRIBUTE_ID, true);
    }

    public void writeWhitePointXAttribute(DefaultClusterCallback callback, Integer value) {
      writeWhitePointXAttribute(callback, value, 0);
    }

    public void writeWhitePointXAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), WHITE_POINT_X_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeWhitePointXAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WHITE_POINT_X_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WHITE_POINT_X_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readWhitePointYAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WHITE_POINT_Y_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WHITE_POINT_Y_ATTRIBUTE_ID, true);
    }

    public void writeWhitePointYAttribute(DefaultClusterCallback callback, Integer value) {
      writeWhitePointYAttribute(callback, value, 0);
    }

    public void writeWhitePointYAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), WHITE_POINT_Y_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeWhitePointYAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WHITE_POINT_Y_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WHITE_POINT_Y_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorPointRXAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_R_X_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_R_X_ATTRIBUTE_ID, true);
    }

    public void writeColorPointRXAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointRXAttribute(callback, value, 0);
    }

    public void writeColorPointRXAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), COLOR_POINT_R_X_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointRXAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_R_X_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_R_X_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorPointRYAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_R_Y_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_R_Y_ATTRIBUTE_ID, true);
    }

    public void writeColorPointRYAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointRYAttribute(callback, value, 0);
    }

    public void writeColorPointRYAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), COLOR_POINT_R_Y_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointRYAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_R_Y_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_R_Y_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorPointRIntensityAttribute(
        ColorPointRIntensityAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_R_INTENSITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_R_INTENSITY_ATTRIBUTE_ID, true);
    }

    public void writeColorPointRIntensityAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointRIntensityAttribute(callback, value, 0);
    }

    public void writeColorPointRIntensityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), COLOR_POINT_R_INTENSITY_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointRIntensityAttribute(
        ColorPointRIntensityAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_R_INTENSITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_R_INTENSITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorPointGXAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_G_X_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_G_X_ATTRIBUTE_ID, true);
    }

    public void writeColorPointGXAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointGXAttribute(callback, value, 0);
    }

    public void writeColorPointGXAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), COLOR_POINT_G_X_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointGXAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_G_X_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_G_X_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorPointGYAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_G_Y_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_G_Y_ATTRIBUTE_ID, true);
    }

    public void writeColorPointGYAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointGYAttribute(callback, value, 0);
    }

    public void writeColorPointGYAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), COLOR_POINT_G_Y_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointGYAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_G_Y_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_G_Y_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorPointGIntensityAttribute(
        ColorPointGIntensityAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_G_INTENSITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_G_INTENSITY_ATTRIBUTE_ID, true);
    }

    public void writeColorPointGIntensityAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointGIntensityAttribute(callback, value, 0);
    }

    public void writeColorPointGIntensityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), COLOR_POINT_G_INTENSITY_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointGIntensityAttribute(
        ColorPointGIntensityAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_G_INTENSITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_G_INTENSITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorPointBXAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_B_X_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_B_X_ATTRIBUTE_ID, true);
    }

    public void writeColorPointBXAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointBXAttribute(callback, value, 0);
    }

    public void writeColorPointBXAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), COLOR_POINT_B_X_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointBXAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_B_X_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_B_X_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorPointBYAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_B_Y_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_B_Y_ATTRIBUTE_ID, true);
    }

    public void writeColorPointBYAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointBYAttribute(callback, value, 0);
    }

    public void writeColorPointBYAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), COLOR_POINT_B_Y_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointBYAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_B_Y_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_B_Y_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorPointBIntensityAttribute(
        ColorPointBIntensityAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_B_INTENSITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_B_INTENSITY_ATTRIBUTE_ID, true);
    }

    public void writeColorPointBIntensityAttribute(DefaultClusterCallback callback, Integer value) {
      writeColorPointBIntensityAttribute(callback, value, 0);
    }

    public void writeColorPointBIntensityAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), COLOR_POINT_B_INTENSITY_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeColorPointBIntensityAttribute(
        ColorPointBIntensityAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_POINT_B_INTENSITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_POINT_B_INTENSITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEnhancedCurrentHueAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENHANCED_CURRENT_HUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENHANCED_CURRENT_HUE_ATTRIBUTE_ID, true);
    }

    public void subscribeEnhancedCurrentHueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENHANCED_CURRENT_HUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENHANCED_CURRENT_HUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEnhancedColorModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENHANCED_COLOR_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENHANCED_COLOR_MODE_ATTRIBUTE_ID, true);
    }

    public void subscribeEnhancedColorModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENHANCED_COLOR_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENHANCED_COLOR_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorLoopActiveAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_LOOP_ACTIVE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_LOOP_ACTIVE_ATTRIBUTE_ID, true);
    }

    public void subscribeColorLoopActiveAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_LOOP_ACTIVE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_LOOP_ACTIVE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorLoopDirectionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_LOOP_DIRECTION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_LOOP_DIRECTION_ATTRIBUTE_ID, true);
    }

    public void subscribeColorLoopDirectionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_LOOP_DIRECTION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_LOOP_DIRECTION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorLoopTimeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_LOOP_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_LOOP_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeColorLoopTimeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_LOOP_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_LOOP_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorLoopStartEnhancedHueAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_LOOP_START_ENHANCED_HUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_LOOP_START_ENHANCED_HUE_ATTRIBUTE_ID, true);
    }

    public void subscribeColorLoopStartEnhancedHueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_LOOP_START_ENHANCED_HUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_LOOP_START_ENHANCED_HUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorLoopStoredEnhancedHueAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_LOOP_STORED_ENHANCED_HUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_LOOP_STORED_ENHANCED_HUE_ATTRIBUTE_ID, true);
    }

    public void subscribeColorLoopStoredEnhancedHueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_LOOP_STORED_ENHANCED_HUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_LOOP_STORED_ENHANCED_HUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorCapabilitiesAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_CAPABILITIES_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_CAPABILITIES_ATTRIBUTE_ID, true);
    }

    public void subscribeColorCapabilitiesAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_CAPABILITIES_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_CAPABILITIES_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorTempPhysicalMinMiredsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_TEMP_PHYSICAL_MIN_MIREDS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_TEMP_PHYSICAL_MIN_MIREDS_ATTRIBUTE_ID, true);
    }

    public void subscribeColorTempPhysicalMinMiredsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_TEMP_PHYSICAL_MIN_MIREDS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_TEMP_PHYSICAL_MIN_MIREDS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readColorTempPhysicalMaxMiredsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_TEMP_PHYSICAL_MAX_MIREDS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_TEMP_PHYSICAL_MAX_MIREDS_ATTRIBUTE_ID, true);
    }

    public void subscribeColorTempPhysicalMaxMiredsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COLOR_TEMP_PHYSICAL_MAX_MIREDS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COLOR_TEMP_PHYSICAL_MAX_MIREDS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCoupleColorTempToLevelMinMiredsAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS_ATTRIBUTE_ID, true);
    }

    public void subscribeCoupleColorTempToLevelMinMiredsAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStartUpColorTemperatureMiredsAttribute(
        StartUpColorTemperatureMiredsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_COLOR_TEMPERATURE_MIREDS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_COLOR_TEMPERATURE_MIREDS_ATTRIBUTE_ID, true);
    }

    public void writeStartUpColorTemperatureMiredsAttribute(DefaultClusterCallback callback, Integer value) {
      writeStartUpColorTemperatureMiredsAttribute(callback, value, 0);
    }

    public void writeStartUpColorTemperatureMiredsAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), START_UP_COLOR_TEMPERATURE_MIREDS_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStartUpColorTemperatureMiredsAttribute(
        StartUpColorTemperatureMiredsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_UP_COLOR_TEMPERATURE_MIREDS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_UP_COLOR_TEMPERATURE_MIREDS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class BallastConfigurationCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 769L;

    private static final long PHYSICAL_MIN_LEVEL_ATTRIBUTE_ID = 0L;
    private static final long PHYSICAL_MAX_LEVEL_ATTRIBUTE_ID = 1L;
    private static final long BALLAST_STATUS_ATTRIBUTE_ID = 2L;
    private static final long MIN_LEVEL_ATTRIBUTE_ID = 16L;
    private static final long MAX_LEVEL_ATTRIBUTE_ID = 17L;
    private static final long INTRINSIC_BALLAST_FACTOR_ATTRIBUTE_ID = 20L;
    private static final long BALLAST_FACTOR_ADJUSTMENT_ATTRIBUTE_ID = 21L;
    private static final long LAMP_QUANTITY_ATTRIBUTE_ID = 32L;
    private static final long LAMP_TYPE_ATTRIBUTE_ID = 48L;
    private static final long LAMP_MANUFACTURER_ATTRIBUTE_ID = 49L;
    private static final long LAMP_RATED_HOURS_ATTRIBUTE_ID = 50L;
    private static final long LAMP_BURN_HOURS_ATTRIBUTE_ID = 51L;
    private static final long LAMP_ALARM_MODE_ATTRIBUTE_ID = 52L;
    private static final long LAMP_BURN_HOURS_TRIP_POINT_ATTRIBUTE_ID = 53L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public BallastConfigurationCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface IntrinsicBallastFactorAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface BallastFactorAdjustmentAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface LampRatedHoursAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface LampBurnHoursAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface LampBurnHoursTripPointAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readPhysicalMinLevelAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHYSICAL_MIN_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHYSICAL_MIN_LEVEL_ATTRIBUTE_ID, true);
    }

    public void subscribePhysicalMinLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHYSICAL_MIN_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHYSICAL_MIN_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPhysicalMaxLevelAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHYSICAL_MAX_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHYSICAL_MAX_LEVEL_ATTRIBUTE_ID, true);
    }

    public void subscribePhysicalMaxLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHYSICAL_MAX_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHYSICAL_MAX_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBallastStatusAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BALLAST_STATUS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BALLAST_STATUS_ATTRIBUTE_ID, true);
    }

    public void subscribeBallastStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BALLAST_STATUS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BALLAST_STATUS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinLevelAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_LEVEL_ATTRIBUTE_ID, true);
    }

    public void writeMinLevelAttribute(DefaultClusterCallback callback, Integer value) {
      writeMinLevelAttribute(callback, value, 0);
    }

    public void writeMinLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), MIN_LEVEL_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeMinLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxLevelAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_LEVEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_LEVEL_ATTRIBUTE_ID, true);
    }

    public void writeMaxLevelAttribute(DefaultClusterCallback callback, Integer value) {
      writeMaxLevelAttribute(callback, value, 0);
    }

    public void writeMaxLevelAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), MAX_LEVEL_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeMaxLevelAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_LEVEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_LEVEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readIntrinsicBallastFactorAttribute(
        IntrinsicBallastFactorAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INTRINSIC_BALLAST_FACTOR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INTRINSIC_BALLAST_FACTOR_ATTRIBUTE_ID, true);
    }

    public void writeIntrinsicBallastFactorAttribute(DefaultClusterCallback callback, Integer value) {
      writeIntrinsicBallastFactorAttribute(callback, value, 0);
    }

    public void writeIntrinsicBallastFactorAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), INTRINSIC_BALLAST_FACTOR_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeIntrinsicBallastFactorAttribute(
        IntrinsicBallastFactorAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INTRINSIC_BALLAST_FACTOR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INTRINSIC_BALLAST_FACTOR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBallastFactorAdjustmentAttribute(
        BallastFactorAdjustmentAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BALLAST_FACTOR_ADJUSTMENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BALLAST_FACTOR_ADJUSTMENT_ATTRIBUTE_ID, true);
    }

    public void writeBallastFactorAdjustmentAttribute(DefaultClusterCallback callback, Integer value) {
      writeBallastFactorAdjustmentAttribute(callback, value, 0);
    }

    public void writeBallastFactorAdjustmentAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), BALLAST_FACTOR_ADJUSTMENT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBallastFactorAdjustmentAttribute(
        BallastFactorAdjustmentAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BALLAST_FACTOR_ADJUSTMENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BALLAST_FACTOR_ADJUSTMENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLampQuantityAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAMP_QUANTITY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAMP_QUANTITY_ATTRIBUTE_ID, true);
    }

    public void subscribeLampQuantityAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAMP_QUANTITY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAMP_QUANTITY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLampTypeAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAMP_TYPE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAMP_TYPE_ATTRIBUTE_ID, true);
    }

    public void writeLampTypeAttribute(DefaultClusterCallback callback, String value) {
      writeLampTypeAttribute(callback, value, 0);
    }

    public void writeLampTypeAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), LAMP_TYPE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLampTypeAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAMP_TYPE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAMP_TYPE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLampManufacturerAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAMP_MANUFACTURER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAMP_MANUFACTURER_ATTRIBUTE_ID, true);
    }

    public void writeLampManufacturerAttribute(DefaultClusterCallback callback, String value) {
      writeLampManufacturerAttribute(callback, value, 0);
    }

    public void writeLampManufacturerAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), LAMP_MANUFACTURER_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLampManufacturerAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAMP_MANUFACTURER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAMP_MANUFACTURER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLampRatedHoursAttribute(
        LampRatedHoursAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAMP_RATED_HOURS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAMP_RATED_HOURS_ATTRIBUTE_ID, true);
    }

    public void writeLampRatedHoursAttribute(DefaultClusterCallback callback, Long value) {
      writeLampRatedHoursAttribute(callback, value, 0);
    }

    public void writeLampRatedHoursAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), LAMP_RATED_HOURS_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLampRatedHoursAttribute(
        LampRatedHoursAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAMP_RATED_HOURS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAMP_RATED_HOURS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLampBurnHoursAttribute(
        LampBurnHoursAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAMP_BURN_HOURS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAMP_BURN_HOURS_ATTRIBUTE_ID, true);
    }

    public void writeLampBurnHoursAttribute(DefaultClusterCallback callback, Long value) {
      writeLampBurnHoursAttribute(callback, value, 0);
    }

    public void writeLampBurnHoursAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), LAMP_BURN_HOURS_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLampBurnHoursAttribute(
        LampBurnHoursAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAMP_BURN_HOURS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAMP_BURN_HOURS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLampAlarmModeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAMP_ALARM_MODE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAMP_ALARM_MODE_ATTRIBUTE_ID, true);
    }

    public void writeLampAlarmModeAttribute(DefaultClusterCallback callback, Integer value) {
      writeLampAlarmModeAttribute(callback, value, 0);
    }

    public void writeLampAlarmModeAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), LAMP_ALARM_MODE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLampAlarmModeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAMP_ALARM_MODE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAMP_ALARM_MODE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLampBurnHoursTripPointAttribute(
        LampBurnHoursTripPointAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAMP_BURN_HOURS_TRIP_POINT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAMP_BURN_HOURS_TRIP_POINT_ATTRIBUTE_ID, true);
    }

    public void writeLampBurnHoursTripPointAttribute(DefaultClusterCallback callback, Long value) {
      writeLampBurnHoursTripPointAttribute(callback, value, 0);
    }

    public void writeLampBurnHoursTripPointAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), LAMP_BURN_HOURS_TRIP_POINT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLampBurnHoursTripPointAttribute(
        LampBurnHoursTripPointAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LAMP_BURN_HOURS_TRIP_POINT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LAMP_BURN_HOURS_TRIP_POINT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class IlluminanceMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1024L;

    private static final long MEASURED_VALUE_ATTRIBUTE_ID = 0L;
    private static final long MIN_MEASURED_VALUE_ATTRIBUTE_ID = 1L;
    private static final long MAX_MEASURED_VALUE_ATTRIBUTE_ID = 2L;
    private static final long TOLERANCE_ATTRIBUTE_ID = 3L;
    private static final long LIGHT_SENSOR_TYPE_ATTRIBUTE_ID = 4L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public IlluminanceMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface LightSensorTypeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readToleranceAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOLERANCE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOLERANCE_ATTRIBUTE_ID, true);
    }

    public void subscribeToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOLERANCE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOLERANCE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLightSensorTypeAttribute(
        LightSensorTypeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIGHT_SENSOR_TYPE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIGHT_SENSOR_TYPE_ATTRIBUTE_ID, true);
    }

    public void subscribeLightSensorTypeAttribute(
        LightSensorTypeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIGHT_SENSOR_TYPE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIGHT_SENSOR_TYPE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class TemperatureMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1026L;

    private static final long MEASURED_VALUE_ATTRIBUTE_ID = 0L;
    private static final long MIN_MEASURED_VALUE_ATTRIBUTE_ID = 1L;
    private static final long MAX_MEASURED_VALUE_ATTRIBUTE_ID = 2L;
    private static final long TOLERANCE_ATTRIBUTE_ID = 3L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public TemperatureMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readToleranceAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOLERANCE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOLERANCE_ATTRIBUTE_ID, true);
    }

    public void subscribeToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOLERANCE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOLERANCE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class PressureMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1027L;

    private static final long MEASURED_VALUE_ATTRIBUTE_ID = 0L;
    private static final long MIN_MEASURED_VALUE_ATTRIBUTE_ID = 1L;
    private static final long MAX_MEASURED_VALUE_ATTRIBUTE_ID = 2L;
    private static final long TOLERANCE_ATTRIBUTE_ID = 3L;
    private static final long SCALED_VALUE_ATTRIBUTE_ID = 16L;
    private static final long MIN_SCALED_VALUE_ATTRIBUTE_ID = 17L;
    private static final long MAX_SCALED_VALUE_ATTRIBUTE_ID = 18L;
    private static final long SCALED_TOLERANCE_ATTRIBUTE_ID = 19L;
    private static final long SCALE_ATTRIBUTE_ID = 20L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public PressureMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface ScaledValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinScaledValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxScaledValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readToleranceAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOLERANCE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOLERANCE_ATTRIBUTE_ID, true);
    }

    public void subscribeToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOLERANCE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOLERANCE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readScaledValueAttribute(
        ScaledValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCALED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCALED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeScaledValueAttribute(
        ScaledValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCALED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCALED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinScaledValueAttribute(
        MinScaledValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_SCALED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_SCALED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinScaledValueAttribute(
        MinScaledValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_SCALED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_SCALED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxScaledValueAttribute(
        MaxScaledValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_SCALED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_SCALED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxScaledValueAttribute(
        MaxScaledValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_SCALED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_SCALED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readScaledToleranceAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCALED_TOLERANCE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCALED_TOLERANCE_ATTRIBUTE_ID, true);
    }

    public void subscribeScaledToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCALED_TOLERANCE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCALED_TOLERANCE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readScaleAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCALE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCALE_ATTRIBUTE_ID, true);
    }

    public void subscribeScaleAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCALE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCALE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class FlowMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1028L;

    private static final long MEASURED_VALUE_ATTRIBUTE_ID = 0L;
    private static final long MIN_MEASURED_VALUE_ATTRIBUTE_ID = 1L;
    private static final long MAX_MEASURED_VALUE_ATTRIBUTE_ID = 2L;
    private static final long TOLERANCE_ATTRIBUTE_ID = 3L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public FlowMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readToleranceAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOLERANCE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOLERANCE_ATTRIBUTE_ID, true);
    }

    public void subscribeToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOLERANCE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOLERANCE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class RelativeHumidityMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1029L;

    private static final long MEASURED_VALUE_ATTRIBUTE_ID = 0L;
    private static final long MIN_MEASURED_VALUE_ATTRIBUTE_ID = 1L;
    private static final long MAX_MEASURED_VALUE_ATTRIBUTE_ID = 2L;
    private static final long TOLERANCE_ATTRIBUTE_ID = 3L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public RelativeHumidityMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readToleranceAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOLERANCE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOLERANCE_ATTRIBUTE_ID, true);
    }

    public void subscribeToleranceAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOLERANCE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOLERANCE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class OccupancySensingCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1030L;

    private static final long OCCUPANCY_ATTRIBUTE_ID = 0L;
    private static final long OCCUPANCY_SENSOR_TYPE_ATTRIBUTE_ID = 1L;
    private static final long OCCUPANCY_SENSOR_TYPE_BITMAP_ATTRIBUTE_ID = 2L;
    private static final long P_I_R_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID = 16L;
    private static final long P_I_R_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID = 17L;
    private static final long P_I_R_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID = 18L;
    private static final long ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID = 32L;
    private static final long ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID = 33L;
    private static final long ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID = 34L;
    private static final long PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID = 48L;
    private static final long PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID = 49L;
    private static final long PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID = 50L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public OccupancySensingCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readOccupancyAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPANCY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPANCY_ATTRIBUTE_ID, true);
    }

    public void subscribeOccupancyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPANCY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPANCY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOccupancySensorTypeAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPANCY_SENSOR_TYPE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPANCY_SENSOR_TYPE_ATTRIBUTE_ID, true);
    }

    public void subscribeOccupancySensorTypeAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPANCY_SENSOR_TYPE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPANCY_SENSOR_TYPE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOccupancySensorTypeBitmapAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPANCY_SENSOR_TYPE_BITMAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPANCY_SENSOR_TYPE_BITMAP_ATTRIBUTE_ID, true);
    }

    public void subscribeOccupancySensorTypeBitmapAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCCUPANCY_SENSOR_TYPE_BITMAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCCUPANCY_SENSOR_TYPE_BITMAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPIROccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, P_I_R_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, P_I_R_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID, true);
    }

    public void writePIROccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
      writePIROccupiedToUnoccupiedDelayAttribute(callback, value, 0);
    }

    public void writePIROccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), P_I_R_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribePIROccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, P_I_R_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, P_I_R_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPIRUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, P_I_R_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, P_I_R_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID, true);
    }

    public void writePIRUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
      writePIRUnoccupiedToOccupiedDelayAttribute(callback, value, 0);
    }

    public void writePIRUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), P_I_R_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribePIRUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, P_I_R_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, P_I_R_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPIRUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, P_I_R_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, P_I_R_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID, true);
    }

    public void writePIRUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value) {
      writePIRUnoccupiedToOccupiedThresholdAttribute(callback, value, 0);
    }

    public void writePIRUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), P_I_R_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribePIRUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, P_I_R_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, P_I_R_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUltrasonicOccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID, true);
    }

    public void writeUltrasonicOccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
      writeUltrasonicOccupiedToUnoccupiedDelayAttribute(callback, value, 0);
    }

    public void writeUltrasonicOccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeUltrasonicOccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUltrasonicUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID, true);
    }

    public void writeUltrasonicUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
      writeUltrasonicUnoccupiedToOccupiedDelayAttribute(callback, value, 0);
    }

    public void writeUltrasonicUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeUltrasonicUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUltrasonicUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID, true);
    }

    public void writeUltrasonicUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value) {
      writeUltrasonicUnoccupiedToOccupiedThresholdAttribute(callback, value, 0);
    }

    public void writeUltrasonicUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeUltrasonicUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPhysicalContactOccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID, true);
    }

    public void writePhysicalContactOccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
      writePhysicalContactOccupiedToUnoccupiedDelayAttribute(callback, value, 0);
    }

    public void writePhysicalContactOccupiedToUnoccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribePhysicalContactOccupiedToUnoccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPhysicalContactUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID, true);
    }

    public void writePhysicalContactUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value) {
      writePhysicalContactUnoccupiedToOccupiedDelayAttribute(callback, value, 0);
    }

    public void writePhysicalContactUnoccupiedToOccupiedDelayAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribePhysicalContactUnoccupiedToOccupiedDelayAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPhysicalContactUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID, true);
    }

    public void writePhysicalContactUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value) {
      writePhysicalContactUnoccupiedToOccupiedThresholdAttribute(callback, value, 0);
    }

    public void writePhysicalContactUnoccupiedToOccupiedThresholdAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribePhysicalContactUnoccupiedToOccupiedThresholdAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class CarbonMonoxideConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1036L;

    private static final long MEASURED_VALUE_ATTRIBUTE_ID = 0L;
    private static final long MIN_MEASURED_VALUE_ATTRIBUTE_ID = 1L;
    private static final long MAX_MEASURED_VALUE_ATTRIBUTE_ID = 2L;
    private static final long PEAK_MEASURED_VALUE_ATTRIBUTE_ID = 3L;
    private static final long PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 4L;
    private static final long AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID = 5L;
    private static final long AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 6L;
    private static final long UNCERTAINTY_ATTRIBUTE_ID = 7L;
    private static final long MEASUREMENT_UNIT_ATTRIBUTE_ID = 8L;
    private static final long MEASUREMENT_MEDIUM_ATTRIBUTE_ID = 9L;
    private static final long LEVEL_VALUE_ATTRIBUTE_ID = 10L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public CarbonMonoxideConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class CarbonDioxideConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1037L;

    private static final long MEASURED_VALUE_ATTRIBUTE_ID = 0L;
    private static final long MIN_MEASURED_VALUE_ATTRIBUTE_ID = 1L;
    private static final long MAX_MEASURED_VALUE_ATTRIBUTE_ID = 2L;
    private static final long PEAK_MEASURED_VALUE_ATTRIBUTE_ID = 3L;
    private static final long PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 4L;
    private static final long AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID = 5L;
    private static final long AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 6L;
    private static final long UNCERTAINTY_ATTRIBUTE_ID = 7L;
    private static final long MEASUREMENT_UNIT_ATTRIBUTE_ID = 8L;
    private static final long MEASUREMENT_MEDIUM_ATTRIBUTE_ID = 9L;
    private static final long LEVEL_VALUE_ATTRIBUTE_ID = 10L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public CarbonDioxideConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class NitrogenDioxideConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1043L;

    private static final long MEASURED_VALUE_ATTRIBUTE_ID = 0L;
    private static final long MIN_MEASURED_VALUE_ATTRIBUTE_ID = 1L;
    private static final long MAX_MEASURED_VALUE_ATTRIBUTE_ID = 2L;
    private static final long PEAK_MEASURED_VALUE_ATTRIBUTE_ID = 3L;
    private static final long PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 4L;
    private static final long AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID = 5L;
    private static final long AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 6L;
    private static final long UNCERTAINTY_ATTRIBUTE_ID = 7L;
    private static final long MEASUREMENT_UNIT_ATTRIBUTE_ID = 8L;
    private static final long MEASUREMENT_MEDIUM_ATTRIBUTE_ID = 9L;
    private static final long LEVEL_VALUE_ATTRIBUTE_ID = 10L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public NitrogenDioxideConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class OzoneConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1045L;

    private static final long MEASURED_VALUE_ATTRIBUTE_ID = 0L;
    private static final long MIN_MEASURED_VALUE_ATTRIBUTE_ID = 1L;
    private static final long MAX_MEASURED_VALUE_ATTRIBUTE_ID = 2L;
    private static final long PEAK_MEASURED_VALUE_ATTRIBUTE_ID = 3L;
    private static final long PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 4L;
    private static final long AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID = 5L;
    private static final long AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 6L;
    private static final long UNCERTAINTY_ATTRIBUTE_ID = 7L;
    private static final long MEASUREMENT_UNIT_ATTRIBUTE_ID = 8L;
    private static final long MEASUREMENT_MEDIUM_ATTRIBUTE_ID = 9L;
    private static final long LEVEL_VALUE_ATTRIBUTE_ID = 10L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public OzoneConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class Pm25ConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1066L;

    private static final long MEASURED_VALUE_ATTRIBUTE_ID = 0L;
    private static final long MIN_MEASURED_VALUE_ATTRIBUTE_ID = 1L;
    private static final long MAX_MEASURED_VALUE_ATTRIBUTE_ID = 2L;
    private static final long PEAK_MEASURED_VALUE_ATTRIBUTE_ID = 3L;
    private static final long PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 4L;
    private static final long AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID = 5L;
    private static final long AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 6L;
    private static final long UNCERTAINTY_ATTRIBUTE_ID = 7L;
    private static final long MEASUREMENT_UNIT_ATTRIBUTE_ID = 8L;
    private static final long MEASUREMENT_MEDIUM_ATTRIBUTE_ID = 9L;
    private static final long LEVEL_VALUE_ATTRIBUTE_ID = 10L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public Pm25ConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class FormaldehydeConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1067L;

    private static final long MEASURED_VALUE_ATTRIBUTE_ID = 0L;
    private static final long MIN_MEASURED_VALUE_ATTRIBUTE_ID = 1L;
    private static final long MAX_MEASURED_VALUE_ATTRIBUTE_ID = 2L;
    private static final long PEAK_MEASURED_VALUE_ATTRIBUTE_ID = 3L;
    private static final long PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 4L;
    private static final long AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID = 5L;
    private static final long AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 6L;
    private static final long UNCERTAINTY_ATTRIBUTE_ID = 7L;
    private static final long MEASUREMENT_UNIT_ATTRIBUTE_ID = 8L;
    private static final long MEASUREMENT_MEDIUM_ATTRIBUTE_ID = 9L;
    private static final long LEVEL_VALUE_ATTRIBUTE_ID = 10L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public FormaldehydeConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class Pm1ConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1068L;

    private static final long MEASURED_VALUE_ATTRIBUTE_ID = 0L;
    private static final long MIN_MEASURED_VALUE_ATTRIBUTE_ID = 1L;
    private static final long MAX_MEASURED_VALUE_ATTRIBUTE_ID = 2L;
    private static final long PEAK_MEASURED_VALUE_ATTRIBUTE_ID = 3L;
    private static final long PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 4L;
    private static final long AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID = 5L;
    private static final long AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 6L;
    private static final long UNCERTAINTY_ATTRIBUTE_ID = 7L;
    private static final long MEASUREMENT_UNIT_ATTRIBUTE_ID = 8L;
    private static final long MEASUREMENT_MEDIUM_ATTRIBUTE_ID = 9L;
    private static final long LEVEL_VALUE_ATTRIBUTE_ID = 10L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public Pm1ConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class Pm10ConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1069L;

    private static final long MEASURED_VALUE_ATTRIBUTE_ID = 0L;
    private static final long MIN_MEASURED_VALUE_ATTRIBUTE_ID = 1L;
    private static final long MAX_MEASURED_VALUE_ATTRIBUTE_ID = 2L;
    private static final long PEAK_MEASURED_VALUE_ATTRIBUTE_ID = 3L;
    private static final long PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 4L;
    private static final long AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID = 5L;
    private static final long AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 6L;
    private static final long UNCERTAINTY_ATTRIBUTE_ID = 7L;
    private static final long MEASUREMENT_UNIT_ATTRIBUTE_ID = 8L;
    private static final long MEASUREMENT_MEDIUM_ATTRIBUTE_ID = 9L;
    private static final long LEVEL_VALUE_ATTRIBUTE_ID = 10L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public Pm10ConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class TotalVolatileOrganicCompoundsConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1070L;

    private static final long MEASURED_VALUE_ATTRIBUTE_ID = 0L;
    private static final long MIN_MEASURED_VALUE_ATTRIBUTE_ID = 1L;
    private static final long MAX_MEASURED_VALUE_ATTRIBUTE_ID = 2L;
    private static final long PEAK_MEASURED_VALUE_ATTRIBUTE_ID = 3L;
    private static final long PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 4L;
    private static final long AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID = 5L;
    private static final long AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 6L;
    private static final long UNCERTAINTY_ATTRIBUTE_ID = 7L;
    private static final long MEASUREMENT_UNIT_ATTRIBUTE_ID = 8L;
    private static final long MEASUREMENT_MEDIUM_ATTRIBUTE_ID = 9L;
    private static final long LEVEL_VALUE_ATTRIBUTE_ID = 10L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public TotalVolatileOrganicCompoundsConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class RadonConcentrationMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1071L;

    private static final long MEASURED_VALUE_ATTRIBUTE_ID = 0L;
    private static final long MIN_MEASURED_VALUE_ATTRIBUTE_ID = 1L;
    private static final long MAX_MEASURED_VALUE_ATTRIBUTE_ID = 2L;
    private static final long PEAK_MEASURED_VALUE_ATTRIBUTE_ID = 3L;
    private static final long PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 4L;
    private static final long AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID = 5L;
    private static final long AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID = 6L;
    private static final long UNCERTAINTY_ATTRIBUTE_ID = 7L;
    private static final long MEASUREMENT_UNIT_ATTRIBUTE_ID = 8L;
    private static final long MEASUREMENT_MEDIUM_ATTRIBUTE_ID = 9L;
    private static final long LEVEL_VALUE_ATTRIBUTE_ID = 10L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public RadonConcentrationMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface MeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MinMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface MaxMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface PeakMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface AverageMeasuredValueAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredValueAttribute(
        MeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMinMeasuredValueAttribute(
        MinMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MIN_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MIN_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeMaxMeasuredValueAttribute(
        MaxMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MAX_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MAX_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueAttribute(
        PeakMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribePeakMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PEAK_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueAttribute(
        AverageMeasuredValueAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageMeasuredValueWindowAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_MEASURED_VALUE_WINDOW_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUncertaintyAttribute(
        FloatAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, true);
    }

    public void subscribeUncertaintyAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNCERTAINTY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNCERTAINTY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementUnitAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementUnitAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_UNIT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_UNIT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasurementMediumAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementMediumAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_MEDIUM_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_MEDIUM_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLevelValueAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, true);
    }

    public void subscribeLevelValueAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LEVEL_VALUE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LEVEL_VALUE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class WiFiNetworkManagementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1105L;

    private static final long SSID_ATTRIBUTE_ID = 1L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public WiFiNetworkManagementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void networkPassphraseRequest(NetworkPassphraseResponseCallback callback) {
      networkPassphraseRequest(callback, 0);
    }

    public void networkPassphraseRequest(NetworkPassphraseResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long passphraseFieldID = 0L;
          byte[] passphrase = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == passphraseFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                passphrase = castingValue.value(byte[].class);
              }
            }
          }
          callback.onSuccess(passphrase);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface NetworkPassphraseResponseCallback extends BaseClusterCallback {
      void onSuccess(byte[] passphrase);
    }

    public interface SsidAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readSsidAttribute(
        SsidAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SSID_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SSID_ATTRIBUTE_ID, true);
    }

    public void subscribeSsidAttribute(
        SsidAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SSID_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SSID_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class WakeOnLanCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1283L;

    private static final long M_A_C_ADDRESS_ATTRIBUTE_ID = 0L;
    private static final long LINK_LOCAL_ADDRESS_ATTRIBUTE_ID = 1L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public WakeOnLanCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMACAddressAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, M_A_C_ADDRESS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, M_A_C_ADDRESS_ATTRIBUTE_ID, true);
    }

    public void subscribeMACAddressAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, M_A_C_ADDRESS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, M_A_C_ADDRESS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLinkLocalAddressAttribute(
        OctetStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LINK_LOCAL_ADDRESS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LINK_LOCAL_ADDRESS_ATTRIBUTE_ID, true);
    }

    public void subscribeLinkLocalAddressAttribute(
        OctetStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LINK_LOCAL_ADDRESS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LINK_LOCAL_ADDRESS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ChannelCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1284L;

    private static final long CHANNEL_LIST_ATTRIBUTE_ID = 0L;
    private static final long LINEUP_ATTRIBUTE_ID = 1L;
    private static final long CURRENT_CHANNEL_ATTRIBUTE_ID = 2L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ChannelCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void changeChannel(ChangeChannelResponseCallback callback, String match) {
      changeChannel(callback, match, 0);
    }

    public void changeChannel(ChangeChannelResponseCallback callback, String match, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long matchFieldID = 0L;
      BaseTLVType matchtlvValue = new StringType(match);
      elements.add(new StructElement(matchFieldID, matchtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void changeChannelByNumber(DefaultClusterCallback callback, Integer majorNumber, Integer minorNumber) {
      changeChannelByNumber(callback, majorNumber, minorNumber, 0);
    }

    public void changeChannelByNumber(DefaultClusterCallback callback, Integer majorNumber, Integer minorNumber, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long majorNumberFieldID = 0L;
      BaseTLVType majorNumbertlvValue = new UIntType(majorNumber);
      elements.add(new StructElement(majorNumberFieldID, majorNumbertlvValue));

      final long minorNumberFieldID = 1L;
      BaseTLVType minorNumbertlvValue = new UIntType(minorNumber);
      elements.add(new StructElement(minorNumberFieldID, minorNumbertlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void skipChannel(DefaultClusterCallback callback, Integer count) {
      skipChannel(callback, count, 0);
    }

    public void skipChannel(DefaultClusterCallback callback, Integer count, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long countFieldID = 0L;
      BaseTLVType counttlvValue = new IntType(count);
      elements.add(new StructElement(countFieldID, counttlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void getProgramGuide(ProgramGuideResponseCallback callback, Optional<Long> startTime, Optional<Long> endTime, Optional<ArrayList<ChipStructs.ChannelClusterChannelInfoStruct>> channelList, Optional<ChipStructs.ChannelClusterPageTokenStruct> pageToken, Optional<Long> recordingFlag, Optional<ArrayList<ChipStructs.ChannelClusterAdditionalInfoStruct>> externalIDList, Optional<byte[]> data) {
      getProgramGuide(callback, startTime, endTime, channelList, pageToken, recordingFlag, externalIDList, data, 0);
    }

    public void getProgramGuide(ProgramGuideResponseCallback callback, Optional<Long> startTime, Optional<Long> endTime, Optional<ArrayList<ChipStructs.ChannelClusterChannelInfoStruct>> channelList, Optional<ChipStructs.ChannelClusterPageTokenStruct> pageToken, Optional<Long> recordingFlag, Optional<ArrayList<ChipStructs.ChannelClusterAdditionalInfoStruct>> externalIDList, Optional<byte[]> data, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long startTimeFieldID = 0L;
      BaseTLVType startTimetlvValue = startTime.<BaseTLVType>map((nonOptionalstartTime) -> new UIntType(nonOptionalstartTime)).orElse(new EmptyType());
      elements.add(new StructElement(startTimeFieldID, startTimetlvValue));

      final long endTimeFieldID = 1L;
      BaseTLVType endTimetlvValue = endTime.<BaseTLVType>map((nonOptionalendTime) -> new UIntType(nonOptionalendTime)).orElse(new EmptyType());
      elements.add(new StructElement(endTimeFieldID, endTimetlvValue));

      final long channelListFieldID = 2L;
      BaseTLVType channelListtlvValue = channelList.<BaseTLVType>map((nonOptionalchannelList) -> ArrayType.generateArrayType(nonOptionalchannelList, (elementnonOptionalchannelList) -> elementnonOptionalchannelList.encodeTlv())).orElse(new EmptyType());
      elements.add(new StructElement(channelListFieldID, channelListtlvValue));

      final long pageTokenFieldID = 3L;
      BaseTLVType pageTokentlvValue = pageToken.<BaseTLVType>map((nonOptionalpageToken) -> nonOptionalpageToken.encodeTlv()).orElse(new EmptyType());
      elements.add(new StructElement(pageTokenFieldID, pageTokentlvValue));

      final long recordingFlagFieldID = 4L;
      BaseTLVType recordingFlagtlvValue = recordingFlag.<BaseTLVType>map((nonOptionalrecordingFlag) -> new UIntType(nonOptionalrecordingFlag)).orElse(new EmptyType());
      elements.add(new StructElement(recordingFlagFieldID, recordingFlagtlvValue));

      final long externalIDListFieldID = 5L;
      BaseTLVType externalIDListtlvValue = externalIDList.<BaseTLVType>map((nonOptionalexternalIDList) -> ArrayType.generateArrayType(nonOptionalexternalIDList, (elementnonOptionalexternalIDList) -> elementnonOptionalexternalIDList.encodeTlv())).orElse(new EmptyType());
      elements.add(new StructElement(externalIDListFieldID, externalIDListtlvValue));

      final long dataFieldID = 6L;
      BaseTLVType datatlvValue = data.<BaseTLVType>map((nonOptionaldata) -> new ByteArrayType(nonOptionaldata)).orElse(new EmptyType());
      elements.add(new StructElement(dataFieldID, datatlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long pagingFieldID = 0L;
          ChipStructs.ChannelClusterChannelPagingStruct paging = null;
          final long programListFieldID = 1L;
          ArrayList<ChipStructs.ChannelClusterProgramStruct> programList = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == pagingFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                paging = ChipStructs.ChannelClusterChannelPagingStruct.decodeTlv(castingValue);
              }
            } else if (element.contextTagNum() == programListFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                programList = castingValue.map((elementcastingValue) -> ChipStructs.ChannelClusterProgramStruct.decodeTlv(elementcastingValue));
              }
            }
          }
          callback.onSuccess(paging, programList);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void recordProgram(DefaultClusterCallback callback, String programIdentifier, Boolean shouldRecordSeries, ArrayList<ChipStructs.ChannelClusterAdditionalInfoStruct> externalIDList, byte[] data) {
      recordProgram(callback, programIdentifier, shouldRecordSeries, externalIDList, data, 0);
    }

    public void recordProgram(DefaultClusterCallback callback, String programIdentifier, Boolean shouldRecordSeries, ArrayList<ChipStructs.ChannelClusterAdditionalInfoStruct> externalIDList, byte[] data, int timedInvokeTimeoutMs) {
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long programIdentifierFieldID = 0L;
      BaseTLVType programIdentifiertlvValue = new StringType(programIdentifier);
      elements.add(new StructElement(programIdentifierFieldID, programIdentifiertlvValue));

      final long shouldRecordSeriesFieldID = 1L;
      BaseTLVType shouldRecordSeriestlvValue = new BooleanType(shouldRecordSeries);
      elements.add(new StructElement(shouldRecordSeriesFieldID, shouldRecordSeriestlvValue));

      final long externalIDListFieldID = 2L;
      BaseTLVType externalIDListtlvValue = ArrayType.generateArrayType(externalIDList, (elementexternalIDList) -> elementexternalIDList.encodeTlv());
      elements.add(new StructElement(externalIDListFieldID, externalIDListtlvValue));

      final long dataFieldID = 3L;
      BaseTLVType datatlvValue = new ByteArrayType(data);
      elements.add(new StructElement(dataFieldID, datatlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void cancelRecordProgram(DefaultClusterCallback callback, String programIdentifier, Boolean shouldRecordSeries, ArrayList<ChipStructs.ChannelClusterAdditionalInfoStruct> externalIDList, byte[] data) {
      cancelRecordProgram(callback, programIdentifier, shouldRecordSeries, externalIDList, data, 0);
    }

    public void cancelRecordProgram(DefaultClusterCallback callback, String programIdentifier, Boolean shouldRecordSeries, ArrayList<ChipStructs.ChannelClusterAdditionalInfoStruct> externalIDList, byte[] data, int timedInvokeTimeoutMs) {
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long programIdentifierFieldID = 0L;
      BaseTLVType programIdentifiertlvValue = new StringType(programIdentifier);
      elements.add(new StructElement(programIdentifierFieldID, programIdentifiertlvValue));

      final long shouldRecordSeriesFieldID = 1L;
      BaseTLVType shouldRecordSeriestlvValue = new BooleanType(shouldRecordSeries);
      elements.add(new StructElement(shouldRecordSeriesFieldID, shouldRecordSeriestlvValue));

      final long externalIDListFieldID = 2L;
      BaseTLVType externalIDListtlvValue = ArrayType.generateArrayType(externalIDList, (elementexternalIDList) -> elementexternalIDList.encodeTlv());
      elements.add(new StructElement(externalIDListFieldID, externalIDListtlvValue));

      final long dataFieldID = 3L;
      BaseTLVType datatlvValue = new ByteArrayType(data);
      elements.add(new StructElement(dataFieldID, datatlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface ChangeChannelResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> data);
    }

    public interface ProgramGuideResponseCallback extends BaseClusterCallback {
      void onSuccess(ChipStructs.ChannelClusterChannelPagingStruct paging, ArrayList<ChipStructs.ChannelClusterProgramStruct> programList);
    }

    public interface ChannelListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ChannelClusterChannelInfoStruct> value);
    }

    public interface LineupAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ChannelClusterLineupInfoStruct value);
    }

    public interface CurrentChannelAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ChannelClusterChannelInfoStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readChannelListAttribute(
        ChannelListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHANNEL_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ChannelClusterChannelInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHANNEL_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeChannelListAttribute(
        ChannelListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHANNEL_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ChannelClusterChannelInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHANNEL_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLineupAttribute(
        LineupAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LINEUP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ChannelClusterLineupInfoStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LINEUP_ATTRIBUTE_ID, true);
    }

    public void subscribeLineupAttribute(
        LineupAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LINEUP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ChannelClusterLineupInfoStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LINEUP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentChannelAttribute(
        CurrentChannelAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_CHANNEL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ChannelClusterChannelInfoStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_CHANNEL_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentChannelAttribute(
        CurrentChannelAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_CHANNEL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ChannelClusterChannelInfoStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_CHANNEL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class TargetNavigatorCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1285L;

    private static final long TARGET_LIST_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_TARGET_ATTRIBUTE_ID = 1L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public TargetNavigatorCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void navigateTarget(NavigateTargetResponseCallback callback, Integer target, Optional<String> data) {
      navigateTarget(callback, target, data, 0);
    }

    public void navigateTarget(NavigateTargetResponseCallback callback, Integer target, Optional<String> data, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long targetFieldID = 0L;
      BaseTLVType targettlvValue = new UIntType(target);
      elements.add(new StructElement(targetFieldID, targettlvValue));

      final long dataFieldID = 1L;
      BaseTLVType datatlvValue = data.<BaseTLVType>map((nonOptionaldata) -> new StringType(nonOptionaldata)).orElse(new EmptyType());
      elements.add(new StructElement(dataFieldID, datatlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface NavigateTargetResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> data);
    }

    public interface TargetListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.TargetNavigatorClusterTargetInfoStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readTargetListAttribute(
        TargetListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TARGET_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.TargetNavigatorClusterTargetInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TARGET_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeTargetListAttribute(
        TargetListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TARGET_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.TargetNavigatorClusterTargetInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TARGET_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentTargetAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_TARGET_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_TARGET_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentTargetAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_TARGET_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_TARGET_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class MediaPlaybackCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1286L;

    private static final long CURRENT_STATE_ATTRIBUTE_ID = 0L;
    private static final long START_TIME_ATTRIBUTE_ID = 1L;
    private static final long DURATION_ATTRIBUTE_ID = 2L;
    private static final long SAMPLED_POSITION_ATTRIBUTE_ID = 3L;
    private static final long PLAYBACK_SPEED_ATTRIBUTE_ID = 4L;
    private static final long SEEK_RANGE_END_ATTRIBUTE_ID = 5L;
    private static final long SEEK_RANGE_START_ATTRIBUTE_ID = 6L;
    private static final long ACTIVE_AUDIO_TRACK_ATTRIBUTE_ID = 7L;
    private static final long AVAILABLE_AUDIO_TRACKS_ATTRIBUTE_ID = 8L;
    private static final long ACTIVE_TEXT_TRACK_ATTRIBUTE_ID = 9L;
    private static final long AVAILABLE_TEXT_TRACKS_ATTRIBUTE_ID = 10L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public MediaPlaybackCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void play(PlaybackResponseCallback callback) {
      play(callback, 0);
    }

    public void play(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void pause(PlaybackResponseCallback callback) {
      pause(callback, 0);
    }

    public void pause(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void stop(PlaybackResponseCallback callback) {
      stop(callback, 0);
    }

    public void stop(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void startOver(PlaybackResponseCallback callback) {
      startOver(callback, 0);
    }

    public void startOver(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void previous(PlaybackResponseCallback callback) {
      previous(callback, 0);
    }

    public void previous(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void next(PlaybackResponseCallback callback) {
      next(callback, 0);
    }

    public void next(PlaybackResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void rewind(PlaybackResponseCallback callback, Optional<Boolean> audioAdvanceUnmuted) {
      rewind(callback, audioAdvanceUnmuted, 0);
    }

    public void rewind(PlaybackResponseCallback callback, Optional<Boolean> audioAdvanceUnmuted, int timedInvokeTimeoutMs) {
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long audioAdvanceUnmutedFieldID = 0L;
      BaseTLVType audioAdvanceUnmutedtlvValue = audioAdvanceUnmuted.<BaseTLVType>map((nonOptionalaudioAdvanceUnmuted) -> new BooleanType(nonOptionalaudioAdvanceUnmuted)).orElse(new EmptyType());
      elements.add(new StructElement(audioAdvanceUnmutedFieldID, audioAdvanceUnmutedtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void fastForward(PlaybackResponseCallback callback, Optional<Boolean> audioAdvanceUnmuted) {
      fastForward(callback, audioAdvanceUnmuted, 0);
    }

    public void fastForward(PlaybackResponseCallback callback, Optional<Boolean> audioAdvanceUnmuted, int timedInvokeTimeoutMs) {
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long audioAdvanceUnmutedFieldID = 0L;
      BaseTLVType audioAdvanceUnmutedtlvValue = audioAdvanceUnmuted.<BaseTLVType>map((nonOptionalaudioAdvanceUnmuted) -> new BooleanType(nonOptionalaudioAdvanceUnmuted)).orElse(new EmptyType());
      elements.add(new StructElement(audioAdvanceUnmutedFieldID, audioAdvanceUnmutedtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void skipForward(PlaybackResponseCallback callback, Long deltaPositionMilliseconds) {
      skipForward(callback, deltaPositionMilliseconds, 0);
    }

    public void skipForward(PlaybackResponseCallback callback, Long deltaPositionMilliseconds, int timedInvokeTimeoutMs) {
      final long commandId = 8L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long deltaPositionMillisecondsFieldID = 0L;
      BaseTLVType deltaPositionMillisecondstlvValue = new UIntType(deltaPositionMilliseconds);
      elements.add(new StructElement(deltaPositionMillisecondsFieldID, deltaPositionMillisecondstlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void skipBackward(PlaybackResponseCallback callback, Long deltaPositionMilliseconds) {
      skipBackward(callback, deltaPositionMilliseconds, 0);
    }

    public void skipBackward(PlaybackResponseCallback callback, Long deltaPositionMilliseconds, int timedInvokeTimeoutMs) {
      final long commandId = 9L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long deltaPositionMillisecondsFieldID = 0L;
      BaseTLVType deltaPositionMillisecondstlvValue = new UIntType(deltaPositionMilliseconds);
      elements.add(new StructElement(deltaPositionMillisecondsFieldID, deltaPositionMillisecondstlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void seek(PlaybackResponseCallback callback, Long position) {
      seek(callback, position, 0);
    }

    public void seek(PlaybackResponseCallback callback, Long position, int timedInvokeTimeoutMs) {
      final long commandId = 11L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long positionFieldID = 0L;
      BaseTLVType positiontlvValue = new UIntType(position);
      elements.add(new StructElement(positionFieldID, positiontlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void activateAudioTrack(DefaultClusterCallback callback, String trackID, Integer audioOutputIndex) {
      activateAudioTrack(callback, trackID, audioOutputIndex, 0);
    }

    public void activateAudioTrack(DefaultClusterCallback callback, String trackID, Integer audioOutputIndex, int timedInvokeTimeoutMs) {
      final long commandId = 12L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long trackIDFieldID = 0L;
      BaseTLVType trackIDtlvValue = new StringType(trackID);
      elements.add(new StructElement(trackIDFieldID, trackIDtlvValue));

      final long audioOutputIndexFieldID = 1L;
      BaseTLVType audioOutputIndextlvValue = new UIntType(audioOutputIndex);
      elements.add(new StructElement(audioOutputIndexFieldID, audioOutputIndextlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void activateTextTrack(DefaultClusterCallback callback, String trackID) {
      activateTextTrack(callback, trackID, 0);
    }

    public void activateTextTrack(DefaultClusterCallback callback, String trackID, int timedInvokeTimeoutMs) {
      final long commandId = 13L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long trackIDFieldID = 0L;
      BaseTLVType trackIDtlvValue = new StringType(trackID);
      elements.add(new StructElement(trackIDFieldID, trackIDtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void deactivateTextTrack(DefaultClusterCallback callback) {
      deactivateTextTrack(callback, 0);
    }

    public void deactivateTextTrack(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 14L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface PlaybackResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> data);
    }

    public interface StartTimeAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface DurationAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface SampledPositionAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.MediaPlaybackClusterPlaybackPositionStruct value);
    }

    public interface SeekRangeEndAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface SeekRangeStartAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface ActiveAudioTrackAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.MediaPlaybackClusterTrackStruct value);
    }

    public interface AvailableAudioTracksAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable List<ChipStructs.MediaPlaybackClusterTrackStruct> value);
    }

    public interface ActiveTextTrackAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.MediaPlaybackClusterTrackStruct value);
    }

    public interface AvailableTextTracksAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable List<ChipStructs.MediaPlaybackClusterTrackStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readCurrentStateAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_STATE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_STATE_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentStateAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_STATE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_STATE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStartTimeAttribute(
        StartTimeAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeStartTimeAttribute(
        StartTimeAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, START_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, START_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDurationAttribute(
        DurationAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DURATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DURATION_ATTRIBUTE_ID, true);
    }

    public void subscribeDurationAttribute(
        DurationAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DURATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DURATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSampledPositionAttribute(
        SampledPositionAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SAMPLED_POSITION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.MediaPlaybackClusterPlaybackPositionStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SAMPLED_POSITION_ATTRIBUTE_ID, true);
    }

    public void subscribeSampledPositionAttribute(
        SampledPositionAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SAMPLED_POSITION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.MediaPlaybackClusterPlaybackPositionStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SAMPLED_POSITION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPlaybackSpeedAttribute(
        FloatAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PLAYBACK_SPEED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PLAYBACK_SPEED_ATTRIBUTE_ID, true);
    }

    public void subscribePlaybackSpeedAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PLAYBACK_SPEED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PLAYBACK_SPEED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSeekRangeEndAttribute(
        SeekRangeEndAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SEEK_RANGE_END_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SEEK_RANGE_END_ATTRIBUTE_ID, true);
    }

    public void subscribeSeekRangeEndAttribute(
        SeekRangeEndAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SEEK_RANGE_END_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SEEK_RANGE_END_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSeekRangeStartAttribute(
        SeekRangeStartAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SEEK_RANGE_START_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SEEK_RANGE_START_ATTRIBUTE_ID, true);
    }

    public void subscribeSeekRangeStartAttribute(
        SeekRangeStartAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SEEK_RANGE_START_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SEEK_RANGE_START_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveAudioTrackAttribute(
        ActiveAudioTrackAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_AUDIO_TRACK_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.MediaPlaybackClusterTrackStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_AUDIO_TRACK_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveAudioTrackAttribute(
        ActiveAudioTrackAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_AUDIO_TRACK_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.MediaPlaybackClusterTrackStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_AUDIO_TRACK_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAvailableAudioTracksAttribute(
        AvailableAudioTracksAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVAILABLE_AUDIO_TRACKS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<ChipStructs.MediaPlaybackClusterTrackStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVAILABLE_AUDIO_TRACKS_ATTRIBUTE_ID, true);
    }

    public void subscribeAvailableAudioTracksAttribute(
        AvailableAudioTracksAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVAILABLE_AUDIO_TRACKS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<ChipStructs.MediaPlaybackClusterTrackStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVAILABLE_AUDIO_TRACKS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveTextTrackAttribute(
        ActiveTextTrackAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_TEXT_TRACK_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.MediaPlaybackClusterTrackStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_TEXT_TRACK_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveTextTrackAttribute(
        ActiveTextTrackAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_TEXT_TRACK_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.MediaPlaybackClusterTrackStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_TEXT_TRACK_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAvailableTextTracksAttribute(
        AvailableTextTracksAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVAILABLE_TEXT_TRACKS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<ChipStructs.MediaPlaybackClusterTrackStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVAILABLE_TEXT_TRACKS_ATTRIBUTE_ID, true);
    }

    public void subscribeAvailableTextTracksAttribute(
        AvailableTextTracksAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVAILABLE_TEXT_TRACKS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable List<ChipStructs.MediaPlaybackClusterTrackStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVAILABLE_TEXT_TRACKS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class MediaInputCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1287L;

    private static final long INPUT_LIST_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_INPUT_ATTRIBUTE_ID = 1L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public MediaInputCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void selectInput(DefaultClusterCallback callback, Integer index) {
      selectInput(callback, index, 0);
    }

    public void selectInput(DefaultClusterCallback callback, Integer index, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long indexFieldID = 0L;
      BaseTLVType indextlvValue = new UIntType(index);
      elements.add(new StructElement(indexFieldID, indextlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void showInputStatus(DefaultClusterCallback callback) {
      showInputStatus(callback, 0);
    }

    public void showInputStatus(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void hideInputStatus(DefaultClusterCallback callback) {
      hideInputStatus(callback, 0);
    }

    public void hideInputStatus(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void renameInput(DefaultClusterCallback callback, Integer index, String name) {
      renameInput(callback, index, name, 0);
    }

    public void renameInput(DefaultClusterCallback callback, Integer index, String name, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long indexFieldID = 0L;
      BaseTLVType indextlvValue = new UIntType(index);
      elements.add(new StructElement(indexFieldID, indextlvValue));

      final long nameFieldID = 1L;
      BaseTLVType nametlvValue = new StringType(name);
      elements.add(new StructElement(nameFieldID, nametlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface InputListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.MediaInputClusterInputInfoStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readInputListAttribute(
        InputListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INPUT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.MediaInputClusterInputInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INPUT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeInputListAttribute(
        InputListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INPUT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.MediaInputClusterInputInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INPUT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentInputAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_INPUT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_INPUT_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentInputAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_INPUT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_INPUT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class LowPowerCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1288L;

    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public LowPowerCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void sleep(DefaultClusterCallback callback) {
      sleep(callback, 0);
    }

    public void sleep(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class KeypadInputCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1289L;

    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public KeypadInputCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void sendKey(SendKeyResponseCallback callback, Integer keyCode) {
      sendKey(callback, keyCode, 0);
    }

    public void sendKey(SendKeyResponseCallback callback, Integer keyCode, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long keyCodeFieldID = 0L;
      BaseTLVType keyCodetlvValue = new UIntType(keyCode);
      elements.add(new StructElement(keyCodeFieldID, keyCodetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(status);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface SendKeyResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ContentLauncherCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1290L;

    private static final long ACCEPT_HEADER_ATTRIBUTE_ID = 0L;
    private static final long SUPPORTED_STREAMING_PROTOCOLS_ATTRIBUTE_ID = 1L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ContentLauncherCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void launchContent(LauncherResponseCallback callback, ChipStructs.ContentLauncherClusterContentSearchStruct search, Boolean autoPlay, Optional<String> data, Optional<ChipStructs.ContentLauncherClusterPlaybackPreferencesStruct> playbackPreferences, Optional<Boolean> useCurrentContext) {
      launchContent(callback, search, autoPlay, data, playbackPreferences, useCurrentContext, 0);
    }

    public void launchContent(LauncherResponseCallback callback, ChipStructs.ContentLauncherClusterContentSearchStruct search, Boolean autoPlay, Optional<String> data, Optional<ChipStructs.ContentLauncherClusterPlaybackPreferencesStruct> playbackPreferences, Optional<Boolean> useCurrentContext, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long searchFieldID = 0L;
      BaseTLVType searchtlvValue = search.encodeTlv();
      elements.add(new StructElement(searchFieldID, searchtlvValue));

      final long autoPlayFieldID = 1L;
      BaseTLVType autoPlaytlvValue = new BooleanType(autoPlay);
      elements.add(new StructElement(autoPlayFieldID, autoPlaytlvValue));

      final long dataFieldID = 2L;
      BaseTLVType datatlvValue = data.<BaseTLVType>map((nonOptionaldata) -> new StringType(nonOptionaldata)).orElse(new EmptyType());
      elements.add(new StructElement(dataFieldID, datatlvValue));

      final long playbackPreferencesFieldID = 3L;
      BaseTLVType playbackPreferencestlvValue = playbackPreferences.<BaseTLVType>map((nonOptionalplaybackPreferences) -> nonOptionalplaybackPreferences.encodeTlv()).orElse(new EmptyType());
      elements.add(new StructElement(playbackPreferencesFieldID, playbackPreferencestlvValue));

      final long useCurrentContextFieldID = 4L;
      BaseTLVType useCurrentContexttlvValue = useCurrentContext.<BaseTLVType>map((nonOptionaluseCurrentContext) -> new BooleanType(nonOptionaluseCurrentContext)).orElse(new EmptyType());
      elements.add(new StructElement(useCurrentContextFieldID, useCurrentContexttlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void launchURL(LauncherResponseCallback callback, String contentURL, Optional<String> displayString, Optional<ChipStructs.ContentLauncherClusterBrandingInformationStruct> brandingInformation) {
      launchURL(callback, contentURL, displayString, brandingInformation, 0);
    }

    public void launchURL(LauncherResponseCallback callback, String contentURL, Optional<String> displayString, Optional<ChipStructs.ContentLauncherClusterBrandingInformationStruct> brandingInformation, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long contentURLFieldID = 0L;
      BaseTLVType contentURLtlvValue = new StringType(contentURL);
      elements.add(new StructElement(contentURLFieldID, contentURLtlvValue));

      final long displayStringFieldID = 1L;
      BaseTLVType displayStringtlvValue = displayString.<BaseTLVType>map((nonOptionaldisplayString) -> new StringType(nonOptionaldisplayString)).orElse(new EmptyType());
      elements.add(new StructElement(displayStringFieldID, displayStringtlvValue));

      final long brandingInformationFieldID = 2L;
      BaseTLVType brandingInformationtlvValue = brandingInformation.<BaseTLVType>map((nonOptionalbrandingInformation) -> nonOptionalbrandingInformation.encodeTlv()).orElse(new EmptyType());
      elements.add(new StructElement(brandingInformationFieldID, brandingInformationtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface LauncherResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> data);
    }

    public interface AcceptHeaderAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<String> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readAcceptHeaderAttribute(
        AcceptHeaderAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPT_HEADER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPT_HEADER_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptHeaderAttribute(
        AcceptHeaderAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPT_HEADER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<String> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPT_HEADER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readSupportedStreamingProtocolsAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_STREAMING_PROTOCOLS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_STREAMING_PROTOCOLS_ATTRIBUTE_ID, true);
    }

    public void subscribeSupportedStreamingProtocolsAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SUPPORTED_STREAMING_PROTOCOLS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SUPPORTED_STREAMING_PROTOCOLS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class AudioOutputCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1291L;

    private static final long OUTPUT_LIST_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_OUTPUT_ATTRIBUTE_ID = 1L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public AudioOutputCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void selectOutput(DefaultClusterCallback callback, Integer index) {
      selectOutput(callback, index, 0);
    }

    public void selectOutput(DefaultClusterCallback callback, Integer index, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long indexFieldID = 0L;
      BaseTLVType indextlvValue = new UIntType(index);
      elements.add(new StructElement(indexFieldID, indextlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void renameOutput(DefaultClusterCallback callback, Integer index, String name) {
      renameOutput(callback, index, name, 0);
    }

    public void renameOutput(DefaultClusterCallback callback, Integer index, String name, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long indexFieldID = 0L;
      BaseTLVType indextlvValue = new UIntType(index);
      elements.add(new StructElement(indexFieldID, indextlvValue));

      final long nameFieldID = 1L;
      BaseTLVType nametlvValue = new StringType(name);
      elements.add(new StructElement(nameFieldID, nametlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface OutputListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.AudioOutputClusterOutputInfoStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readOutputListAttribute(
        OutputListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OUTPUT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.AudioOutputClusterOutputInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OUTPUT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeOutputListAttribute(
        OutputListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OUTPUT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.AudioOutputClusterOutputInfoStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OUTPUT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentOutputAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_OUTPUT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_OUTPUT_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentOutputAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_OUTPUT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_OUTPUT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ApplicationLauncherCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1292L;

    private static final long CATALOG_LIST_ATTRIBUTE_ID = 0L;
    private static final long CURRENT_APP_ATTRIBUTE_ID = 1L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ApplicationLauncherCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void launchApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application, Optional<byte[]> data) {
      launchApp(callback, application, data, 0);
    }

    public void launchApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application, Optional<byte[]> data, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long applicationFieldID = 0L;
      BaseTLVType applicationtlvValue = application.<BaseTLVType>map((nonOptionalapplication) -> nonOptionalapplication.encodeTlv()).orElse(new EmptyType());
      elements.add(new StructElement(applicationFieldID, applicationtlvValue));

      final long dataFieldID = 1L;
      BaseTLVType datatlvValue = data.<BaseTLVType>map((nonOptionaldata) -> new ByteArrayType(nonOptionaldata)).orElse(new EmptyType());
      elements.add(new StructElement(dataFieldID, datatlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<byte[]> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                data = Optional.of(castingValue.value(byte[].class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void stopApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application) {
      stopApp(callback, application, 0);
    }

    public void stopApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long applicationFieldID = 0L;
      BaseTLVType applicationtlvValue = application.<BaseTLVType>map((nonOptionalapplication) -> nonOptionalapplication.encodeTlv()).orElse(new EmptyType());
      elements.add(new StructElement(applicationFieldID, applicationtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<byte[]> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                data = Optional.of(castingValue.value(byte[].class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void hideApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application) {
      hideApp(callback, application, 0);
    }

    public void hideApp(LauncherResponseCallback callback, Optional<ChipStructs.ApplicationLauncherClusterApplicationStruct> application, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long applicationFieldID = 0L;
      BaseTLVType applicationtlvValue = application.<BaseTLVType>map((nonOptionalapplication) -> nonOptionalapplication.encodeTlv()).orElse(new EmptyType());
      elements.add(new StructElement(applicationFieldID, applicationtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<byte[]> data = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                data = Optional.of(castingValue.value(byte[].class));
              }
            }
          }
          callback.onSuccess(status, data);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface LauncherResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<byte[]> data);
    }

    public interface CatalogListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface CurrentAppAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.ApplicationLauncherClusterApplicationEPStruct value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readCatalogListAttribute(
        CatalogListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CATALOG_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CATALOG_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeCatalogListAttribute(
        CatalogListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CATALOG_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CATALOG_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentAppAttribute(
        CurrentAppAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_APP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ApplicationLauncherClusterApplicationEPStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_APP_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentAppAttribute(
        CurrentAppAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_APP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.ApplicationLauncherClusterApplicationEPStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_APP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ApplicationBasicCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1293L;

    private static final long VENDOR_NAME_ATTRIBUTE_ID = 0L;
    private static final long VENDOR_I_D_ATTRIBUTE_ID = 1L;
    private static final long APPLICATION_NAME_ATTRIBUTE_ID = 2L;
    private static final long PRODUCT_I_D_ATTRIBUTE_ID = 3L;
    private static final long APPLICATION_ATTRIBUTE_ID = 4L;
    private static final long STATUS_ATTRIBUTE_ID = 5L;
    private static final long APPLICATION_VERSION_ATTRIBUTE_ID = 6L;
    private static final long ALLOWED_VENDOR_LIST_ATTRIBUTE_ID = 7L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ApplicationBasicCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public interface ApplicationAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.ApplicationBasicClusterApplicationStruct value);
    }

    public interface AllowedVendorListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readVendorNameAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VENDOR_NAME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VENDOR_NAME_ATTRIBUTE_ID, true);
    }

    public void subscribeVendorNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VENDOR_NAME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VENDOR_NAME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readVendorIDAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VENDOR_I_D_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VENDOR_I_D_ATTRIBUTE_ID, true);
    }

    public void subscribeVendorIDAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VENDOR_I_D_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VENDOR_I_D_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readApplicationNameAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPLICATION_NAME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPLICATION_NAME_ATTRIBUTE_ID, true);
    }

    public void subscribeApplicationNameAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPLICATION_NAME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPLICATION_NAME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readProductIDAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_I_D_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_I_D_ATTRIBUTE_ID, true);
    }

    public void subscribeProductIDAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PRODUCT_I_D_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PRODUCT_I_D_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readApplicationAttribute(
        ApplicationAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPLICATION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.ApplicationBasicClusterApplicationStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPLICATION_ATTRIBUTE_ID, true);
    }

    public void subscribeApplicationAttribute(
        ApplicationAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPLICATION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.ApplicationBasicClusterApplicationStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPLICATION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStatusAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STATUS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STATUS_ATTRIBUTE_ID, true);
    }

    public void subscribeStatusAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STATUS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STATUS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readApplicationVersionAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPLICATION_VERSION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPLICATION_VERSION_ATTRIBUTE_ID, true);
    }

    public void subscribeApplicationVersionAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPLICATION_VERSION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPLICATION_VERSION_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAllowedVendorListAttribute(
        AllowedVendorListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALLOWED_VENDOR_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALLOWED_VENDOR_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAllowedVendorListAttribute(
        AllowedVendorListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ALLOWED_VENDOR_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ALLOWED_VENDOR_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class AccountLoginCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1294L;

    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public AccountLoginCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }


    public void getSetupPIN(GetSetupPINResponseCallback callback, String tempAccountIdentifier, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long tempAccountIdentifierFieldID = 0L;
      BaseTLVType tempAccountIdentifiertlvValue = new StringType(tempAccountIdentifier);
      elements.add(new StructElement(tempAccountIdentifierFieldID, tempAccountIdentifiertlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long setupPINFieldID = 0L;
          String setupPIN = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == setupPINFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                setupPIN = castingValue.value(String.class);
              }
            }
          }
          callback.onSuccess(setupPIN);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void login(DefaultClusterCallback callback, String tempAccountIdentifier, String setupPIN, Optional<Long> node, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long tempAccountIdentifierFieldID = 0L;
      BaseTLVType tempAccountIdentifiertlvValue = new StringType(tempAccountIdentifier);
      elements.add(new StructElement(tempAccountIdentifierFieldID, tempAccountIdentifiertlvValue));

      final long setupPINFieldID = 1L;
      BaseTLVType setupPINtlvValue = new StringType(setupPIN);
      elements.add(new StructElement(setupPINFieldID, setupPINtlvValue));

      final long nodeFieldID = 2L;
      BaseTLVType nodetlvValue = node.<BaseTLVType>map((nonOptionalnode) -> new UIntType(nonOptionalnode)).orElse(new EmptyType());
      elements.add(new StructElement(nodeFieldID, nodetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void logout(DefaultClusterCallback callback, Optional<Long> node, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long nodeFieldID = 0L;
      BaseTLVType nodetlvValue = node.<BaseTLVType>map((nonOptionalnode) -> new UIntType(nonOptionalnode)).orElse(new EmptyType());
      elements.add(new StructElement(nodeFieldID, nodetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface GetSetupPINResponseCallback extends BaseClusterCallback {
      void onSuccess(String setupPIN);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ContentControlCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1295L;

    private static final long ENABLED_ATTRIBUTE_ID = 0L;
    private static final long ON_DEMAND_RATINGS_ATTRIBUTE_ID = 1L;
    private static final long ON_DEMAND_RATING_THRESHOLD_ATTRIBUTE_ID = 2L;
    private static final long SCHEDULED_CONTENT_RATINGS_ATTRIBUTE_ID = 3L;
    private static final long SCHEDULED_CONTENT_RATING_THRESHOLD_ATTRIBUTE_ID = 4L;
    private static final long SCREEN_DAILY_TIME_ATTRIBUTE_ID = 5L;
    private static final long REMAINING_SCREEN_TIME_ATTRIBUTE_ID = 6L;
    private static final long BLOCK_UNRATED_ATTRIBUTE_ID = 7L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ContentControlCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void updatePIN(DefaultClusterCallback callback, Optional<String> oldPIN, String newPIN) {
      updatePIN(callback, oldPIN, newPIN, 0);
    }

    public void updatePIN(DefaultClusterCallback callback, Optional<String> oldPIN, String newPIN, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long oldPINFieldID = 0L;
      BaseTLVType oldPINtlvValue = oldPIN.<BaseTLVType>map((nonOptionaloldPIN) -> new StringType(nonOptionaloldPIN)).orElse(new EmptyType());
      elements.add(new StructElement(oldPINFieldID, oldPINtlvValue));

      final long newPINFieldID = 1L;
      BaseTLVType newPINtlvValue = new StringType(newPIN);
      elements.add(new StructElement(newPINFieldID, newPINtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void resetPIN(ResetPINResponseCallback callback) {
      resetPIN(callback, 0);
    }

    public void resetPIN(ResetPINResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long PINCodeFieldID = 0L;
          String PINCode = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == PINCodeFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                PINCode = castingValue.value(String.class);
              }
            }
          }
          callback.onSuccess(PINCode);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void enable(DefaultClusterCallback callback) {
      enable(callback, 0);
    }

    public void enable(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void disable(DefaultClusterCallback callback) {
      disable(callback, 0);
    }

    public void disable(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void addBonusTime(DefaultClusterCallback callback, Optional<String> PINCode, Optional<Long> bonusTime) {
      addBonusTime(callback, PINCode, bonusTime, 0);
    }

    public void addBonusTime(DefaultClusterCallback callback, Optional<String> PINCode, Optional<Long> bonusTime, int timedInvokeTimeoutMs) {
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long PINCodeFieldID = 0L;
      BaseTLVType PINCodetlvValue = PINCode.<BaseTLVType>map((nonOptionalPINCode) -> new StringType(nonOptionalPINCode)).orElse(new EmptyType());
      elements.add(new StructElement(PINCodeFieldID, PINCodetlvValue));

      final long bonusTimeFieldID = 1L;
      BaseTLVType bonusTimetlvValue = bonusTime.<BaseTLVType>map((nonOptionalbonusTime) -> new UIntType(nonOptionalbonusTime)).orElse(new EmptyType());
      elements.add(new StructElement(bonusTimeFieldID, bonusTimetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void setScreenDailyTime(DefaultClusterCallback callback, Long screenTime) {
      setScreenDailyTime(callback, screenTime, 0);
    }

    public void setScreenDailyTime(DefaultClusterCallback callback, Long screenTime, int timedInvokeTimeoutMs) {
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long screenTimeFieldID = 0L;
      BaseTLVType screenTimetlvValue = new UIntType(screenTime);
      elements.add(new StructElement(screenTimeFieldID, screenTimetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void blockUnratedContent(DefaultClusterCallback callback) {
      blockUnratedContent(callback, 0);
    }

    public void blockUnratedContent(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void unblockUnratedContent(DefaultClusterCallback callback) {
      unblockUnratedContent(callback, 0);
    }

    public void unblockUnratedContent(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 8L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void setOnDemandRatingThreshold(DefaultClusterCallback callback, String rating) {
      setOnDemandRatingThreshold(callback, rating, 0);
    }

    public void setOnDemandRatingThreshold(DefaultClusterCallback callback, String rating, int timedInvokeTimeoutMs) {
      final long commandId = 9L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long ratingFieldID = 0L;
      BaseTLVType ratingtlvValue = new StringType(rating);
      elements.add(new StructElement(ratingFieldID, ratingtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void setScheduledContentRatingThreshold(DefaultClusterCallback callback, String rating) {
      setScheduledContentRatingThreshold(callback, rating, 0);
    }

    public void setScheduledContentRatingThreshold(DefaultClusterCallback callback, String rating, int timedInvokeTimeoutMs) {
      final long commandId = 10L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long ratingFieldID = 0L;
      BaseTLVType ratingtlvValue = new StringType(rating);
      elements.add(new StructElement(ratingFieldID, ratingtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface ResetPINResponseCallback extends BaseClusterCallback {
      void onSuccess(String PINCode);
    }

    public interface OnDemandRatingsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ContentControlClusterRatingNameStruct> value);
    }

    public interface ScheduledContentRatingsAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.ContentControlClusterRatingNameStruct> value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readEnabledAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENABLED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENABLED_ATTRIBUTE_ID, true);
    }

    public void subscribeEnabledAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENABLED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENABLED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOnDemandRatingsAttribute(
        OnDemandRatingsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_DEMAND_RATINGS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ContentControlClusterRatingNameStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_DEMAND_RATINGS_ATTRIBUTE_ID, true);
    }

    public void subscribeOnDemandRatingsAttribute(
        OnDemandRatingsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_DEMAND_RATINGS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ContentControlClusterRatingNameStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_DEMAND_RATINGS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOnDemandRatingThresholdAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_DEMAND_RATING_THRESHOLD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_DEMAND_RATING_THRESHOLD_ATTRIBUTE_ID, true);
    }

    public void subscribeOnDemandRatingThresholdAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ON_DEMAND_RATING_THRESHOLD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ON_DEMAND_RATING_THRESHOLD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readScheduledContentRatingsAttribute(
        ScheduledContentRatingsAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCHEDULED_CONTENT_RATINGS_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ContentControlClusterRatingNameStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCHEDULED_CONTENT_RATINGS_ATTRIBUTE_ID, true);
    }

    public void subscribeScheduledContentRatingsAttribute(
        ScheduledContentRatingsAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCHEDULED_CONTENT_RATINGS_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.ContentControlClusterRatingNameStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCHEDULED_CONTENT_RATINGS_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readScheduledContentRatingThresholdAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCHEDULED_CONTENT_RATING_THRESHOLD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCHEDULED_CONTENT_RATING_THRESHOLD_ATTRIBUTE_ID, true);
    }

    public void subscribeScheduledContentRatingThresholdAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCHEDULED_CONTENT_RATING_THRESHOLD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCHEDULED_CONTENT_RATING_THRESHOLD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readScreenDailyTimeAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCREEN_DAILY_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCREEN_DAILY_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeScreenDailyTimeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, SCREEN_DAILY_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, SCREEN_DAILY_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRemainingScreenTimeAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REMAINING_SCREEN_TIME_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REMAINING_SCREEN_TIME_ATTRIBUTE_ID, true);
    }

    public void subscribeRemainingScreenTimeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REMAINING_SCREEN_TIME_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REMAINING_SCREEN_TIME_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBlockUnratedAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BLOCK_UNRATED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BLOCK_UNRATED_ATTRIBUTE_ID, true);
    }

    public void subscribeBlockUnratedAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BLOCK_UNRATED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BLOCK_UNRATED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ContentAppObserverCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 1296L;

    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ContentAppObserverCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void contentAppMessage(ContentAppMessageResponseCallback callback, Optional<String> data, String encodingHint) {
      contentAppMessage(callback, data, encodingHint, 0);
    }

    public void contentAppMessage(ContentAppMessageResponseCallback callback, Optional<String> data, String encodingHint, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long dataFieldID = 0L;
      BaseTLVType datatlvValue = data.<BaseTLVType>map((nonOptionaldata) -> new StringType(nonOptionaldata)).orElse(new EmptyType());
      elements.add(new StructElement(dataFieldID, datatlvValue));

      final long encodingHintFieldID = 1L;
      BaseTLVType encodingHinttlvValue = new StringType(encodingHint);
      elements.add(new StructElement(encodingHintFieldID, encodingHinttlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long statusFieldID = 0L;
          Integer status = null;
          final long dataFieldID = 1L;
          Optional<String> data = Optional.empty();
          final long encodingHintFieldID = 2L;
          Optional<String> encodingHint = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == statusFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                status = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == dataFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                data = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == encodingHintFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                encodingHint = Optional.of(castingValue.value(String.class));
              }
            }
          }
          callback.onSuccess(status, data, encodingHint);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface ContentAppMessageResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer status, Optional<String> data, Optional<String> encodingHint);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class ElectricalMeasurementCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 2820L;

    private static final long MEASUREMENT_TYPE_ATTRIBUTE_ID = 0L;
    private static final long DC_VOLTAGE_ATTRIBUTE_ID = 256L;
    private static final long DC_VOLTAGE_MIN_ATTRIBUTE_ID = 257L;
    private static final long DC_VOLTAGE_MAX_ATTRIBUTE_ID = 258L;
    private static final long DC_CURRENT_ATTRIBUTE_ID = 259L;
    private static final long DC_CURRENT_MIN_ATTRIBUTE_ID = 260L;
    private static final long DC_CURRENT_MAX_ATTRIBUTE_ID = 261L;
    private static final long DC_POWER_ATTRIBUTE_ID = 262L;
    private static final long DC_POWER_MIN_ATTRIBUTE_ID = 263L;
    private static final long DC_POWER_MAX_ATTRIBUTE_ID = 264L;
    private static final long DC_VOLTAGE_MULTIPLIER_ATTRIBUTE_ID = 512L;
    private static final long DC_VOLTAGE_DIVISOR_ATTRIBUTE_ID = 513L;
    private static final long DC_CURRENT_MULTIPLIER_ATTRIBUTE_ID = 514L;
    private static final long DC_CURRENT_DIVISOR_ATTRIBUTE_ID = 515L;
    private static final long DC_POWER_MULTIPLIER_ATTRIBUTE_ID = 516L;
    private static final long DC_POWER_DIVISOR_ATTRIBUTE_ID = 517L;
    private static final long AC_FREQUENCY_ATTRIBUTE_ID = 768L;
    private static final long AC_FREQUENCY_MIN_ATTRIBUTE_ID = 769L;
    private static final long AC_FREQUENCY_MAX_ATTRIBUTE_ID = 770L;
    private static final long NEUTRAL_CURRENT_ATTRIBUTE_ID = 771L;
    private static final long TOTAL_ACTIVE_POWER_ATTRIBUTE_ID = 772L;
    private static final long TOTAL_REACTIVE_POWER_ATTRIBUTE_ID = 773L;
    private static final long TOTAL_APPARENT_POWER_ATTRIBUTE_ID = 774L;
    private static final long MEASURED1ST_HARMONIC_CURRENT_ATTRIBUTE_ID = 775L;
    private static final long MEASURED3RD_HARMONIC_CURRENT_ATTRIBUTE_ID = 776L;
    private static final long MEASURED5TH_HARMONIC_CURRENT_ATTRIBUTE_ID = 777L;
    private static final long MEASURED7TH_HARMONIC_CURRENT_ATTRIBUTE_ID = 778L;
    private static final long MEASURED9TH_HARMONIC_CURRENT_ATTRIBUTE_ID = 779L;
    private static final long MEASURED11TH_HARMONIC_CURRENT_ATTRIBUTE_ID = 780L;
    private static final long MEASURED_PHASE1ST_HARMONIC_CURRENT_ATTRIBUTE_ID = 781L;
    private static final long MEASURED_PHASE3RD_HARMONIC_CURRENT_ATTRIBUTE_ID = 782L;
    private static final long MEASURED_PHASE5TH_HARMONIC_CURRENT_ATTRIBUTE_ID = 783L;
    private static final long MEASURED_PHASE7TH_HARMONIC_CURRENT_ATTRIBUTE_ID = 784L;
    private static final long MEASURED_PHASE9TH_HARMONIC_CURRENT_ATTRIBUTE_ID = 785L;
    private static final long MEASURED_PHASE11TH_HARMONIC_CURRENT_ATTRIBUTE_ID = 786L;
    private static final long AC_FREQUENCY_MULTIPLIER_ATTRIBUTE_ID = 1024L;
    private static final long AC_FREQUENCY_DIVISOR_ATTRIBUTE_ID = 1025L;
    private static final long POWER_MULTIPLIER_ATTRIBUTE_ID = 1026L;
    private static final long POWER_DIVISOR_ATTRIBUTE_ID = 1027L;
    private static final long HARMONIC_CURRENT_MULTIPLIER_ATTRIBUTE_ID = 1028L;
    private static final long PHASE_HARMONIC_CURRENT_MULTIPLIER_ATTRIBUTE_ID = 1029L;
    private static final long INSTANTANEOUS_VOLTAGE_ATTRIBUTE_ID = 1280L;
    private static final long INSTANTANEOUS_LINE_CURRENT_ATTRIBUTE_ID = 1281L;
    private static final long INSTANTANEOUS_ACTIVE_CURRENT_ATTRIBUTE_ID = 1282L;
    private static final long INSTANTANEOUS_REACTIVE_CURRENT_ATTRIBUTE_ID = 1283L;
    private static final long INSTANTANEOUS_POWER_ATTRIBUTE_ID = 1284L;
    private static final long RMS_VOLTAGE_ATTRIBUTE_ID = 1285L;
    private static final long RMS_VOLTAGE_MIN_ATTRIBUTE_ID = 1286L;
    private static final long RMS_VOLTAGE_MAX_ATTRIBUTE_ID = 1287L;
    private static final long RMS_CURRENT_ATTRIBUTE_ID = 1288L;
    private static final long RMS_CURRENT_MIN_ATTRIBUTE_ID = 1289L;
    private static final long RMS_CURRENT_MAX_ATTRIBUTE_ID = 1290L;
    private static final long ACTIVE_POWER_ATTRIBUTE_ID = 1291L;
    private static final long ACTIVE_POWER_MIN_ATTRIBUTE_ID = 1292L;
    private static final long ACTIVE_POWER_MAX_ATTRIBUTE_ID = 1293L;
    private static final long REACTIVE_POWER_ATTRIBUTE_ID = 1294L;
    private static final long APPARENT_POWER_ATTRIBUTE_ID = 1295L;
    private static final long POWER_FACTOR_ATTRIBUTE_ID = 1296L;
    private static final long AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_ATTRIBUTE_ID = 1297L;
    private static final long AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_ATTRIBUTE_ID = 1299L;
    private static final long RMS_EXTREME_OVER_VOLTAGE_PERIOD_ATTRIBUTE_ID = 1300L;
    private static final long RMS_EXTREME_UNDER_VOLTAGE_PERIOD_ATTRIBUTE_ID = 1301L;
    private static final long RMS_VOLTAGE_SAG_PERIOD_ATTRIBUTE_ID = 1302L;
    private static final long RMS_VOLTAGE_SWELL_PERIOD_ATTRIBUTE_ID = 1303L;
    private static final long AC_VOLTAGE_MULTIPLIER_ATTRIBUTE_ID = 1536L;
    private static final long AC_VOLTAGE_DIVISOR_ATTRIBUTE_ID = 1537L;
    private static final long AC_CURRENT_MULTIPLIER_ATTRIBUTE_ID = 1538L;
    private static final long AC_CURRENT_DIVISOR_ATTRIBUTE_ID = 1539L;
    private static final long AC_POWER_MULTIPLIER_ATTRIBUTE_ID = 1540L;
    private static final long AC_POWER_DIVISOR_ATTRIBUTE_ID = 1541L;
    private static final long OVERLOAD_ALARMS_MASK_ATTRIBUTE_ID = 1792L;
    private static final long VOLTAGE_OVERLOAD_ATTRIBUTE_ID = 1793L;
    private static final long CURRENT_OVERLOAD_ATTRIBUTE_ID = 1794L;
    private static final long AC_OVERLOAD_ALARMS_MASK_ATTRIBUTE_ID = 2048L;
    private static final long AC_VOLTAGE_OVERLOAD_ATTRIBUTE_ID = 2049L;
    private static final long AC_CURRENT_OVERLOAD_ATTRIBUTE_ID = 2050L;
    private static final long AC_ACTIVE_POWER_OVERLOAD_ATTRIBUTE_ID = 2051L;
    private static final long AC_REACTIVE_POWER_OVERLOAD_ATTRIBUTE_ID = 2052L;
    private static final long AVERAGE_RMS_OVER_VOLTAGE_ATTRIBUTE_ID = 2053L;
    private static final long AVERAGE_RMS_UNDER_VOLTAGE_ATTRIBUTE_ID = 2054L;
    private static final long RMS_EXTREME_OVER_VOLTAGE_ATTRIBUTE_ID = 2055L;
    private static final long RMS_EXTREME_UNDER_VOLTAGE_ATTRIBUTE_ID = 2056L;
    private static final long RMS_VOLTAGE_SAG_ATTRIBUTE_ID = 2057L;
    private static final long RMS_VOLTAGE_SWELL_ATTRIBUTE_ID = 2058L;
    private static final long LINE_CURRENT_PHASE_B_ATTRIBUTE_ID = 2305L;
    private static final long ACTIVE_CURRENT_PHASE_B_ATTRIBUTE_ID = 2306L;
    private static final long REACTIVE_CURRENT_PHASE_B_ATTRIBUTE_ID = 2307L;
    private static final long RMS_VOLTAGE_PHASE_B_ATTRIBUTE_ID = 2309L;
    private static final long RMS_VOLTAGE_MIN_PHASE_B_ATTRIBUTE_ID = 2310L;
    private static final long RMS_VOLTAGE_MAX_PHASE_B_ATTRIBUTE_ID = 2311L;
    private static final long RMS_CURRENT_PHASE_B_ATTRIBUTE_ID = 2312L;
    private static final long RMS_CURRENT_MIN_PHASE_B_ATTRIBUTE_ID = 2313L;
    private static final long RMS_CURRENT_MAX_PHASE_B_ATTRIBUTE_ID = 2314L;
    private static final long ACTIVE_POWER_PHASE_B_ATTRIBUTE_ID = 2315L;
    private static final long ACTIVE_POWER_MIN_PHASE_B_ATTRIBUTE_ID = 2316L;
    private static final long ACTIVE_POWER_MAX_PHASE_B_ATTRIBUTE_ID = 2317L;
    private static final long REACTIVE_POWER_PHASE_B_ATTRIBUTE_ID = 2318L;
    private static final long APPARENT_POWER_PHASE_B_ATTRIBUTE_ID = 2319L;
    private static final long POWER_FACTOR_PHASE_B_ATTRIBUTE_ID = 2320L;
    private static final long AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHASE_B_ATTRIBUTE_ID = 2321L;
    private static final long AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHASE_B_ATTRIBUTE_ID = 2322L;
    private static final long AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHASE_B_ATTRIBUTE_ID = 2323L;
    private static final long RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHASE_B_ATTRIBUTE_ID = 2324L;
    private static final long RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHASE_B_ATTRIBUTE_ID = 2325L;
    private static final long RMS_VOLTAGE_SAG_PERIOD_PHASE_B_ATTRIBUTE_ID = 2326L;
    private static final long RMS_VOLTAGE_SWELL_PERIOD_PHASE_B_ATTRIBUTE_ID = 2327L;
    private static final long LINE_CURRENT_PHASE_C_ATTRIBUTE_ID = 2561L;
    private static final long ACTIVE_CURRENT_PHASE_C_ATTRIBUTE_ID = 2562L;
    private static final long REACTIVE_CURRENT_PHASE_C_ATTRIBUTE_ID = 2563L;
    private static final long RMS_VOLTAGE_PHASE_C_ATTRIBUTE_ID = 2565L;
    private static final long RMS_VOLTAGE_MIN_PHASE_C_ATTRIBUTE_ID = 2566L;
    private static final long RMS_VOLTAGE_MAX_PHASE_C_ATTRIBUTE_ID = 2567L;
    private static final long RMS_CURRENT_PHASE_C_ATTRIBUTE_ID = 2568L;
    private static final long RMS_CURRENT_MIN_PHASE_C_ATTRIBUTE_ID = 2569L;
    private static final long RMS_CURRENT_MAX_PHASE_C_ATTRIBUTE_ID = 2570L;
    private static final long ACTIVE_POWER_PHASE_C_ATTRIBUTE_ID = 2571L;
    private static final long ACTIVE_POWER_MIN_PHASE_C_ATTRIBUTE_ID = 2572L;
    private static final long ACTIVE_POWER_MAX_PHASE_C_ATTRIBUTE_ID = 2573L;
    private static final long REACTIVE_POWER_PHASE_C_ATTRIBUTE_ID = 2574L;
    private static final long APPARENT_POWER_PHASE_C_ATTRIBUTE_ID = 2575L;
    private static final long POWER_FACTOR_PHASE_C_ATTRIBUTE_ID = 2576L;
    private static final long AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHASE_C_ATTRIBUTE_ID = 2577L;
    private static final long AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHASE_C_ATTRIBUTE_ID = 2578L;
    private static final long AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHASE_C_ATTRIBUTE_ID = 2579L;
    private static final long RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHASE_C_ATTRIBUTE_ID = 2580L;
    private static final long RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHASE_C_ATTRIBUTE_ID = 2581L;
    private static final long RMS_VOLTAGE_SAG_PERIOD_PHASE_C_ATTRIBUTE_ID = 2582L;
    private static final long RMS_VOLTAGE_SWELL_PERIOD_PHASE_C_ATTRIBUTE_ID = 2583L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public ElectricalMeasurementCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void getProfileInfoCommand(DefaultClusterCallback callback) {
      getProfileInfoCommand(callback, 0);
    }

    public void getProfileInfoCommand(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void getMeasurementProfileCommand(DefaultClusterCallback callback, Integer attributeId, Long startTime, Integer numberOfIntervals) {
      getMeasurementProfileCommand(callback, attributeId, startTime, numberOfIntervals, 0);
    }

    public void getMeasurementProfileCommand(DefaultClusterCallback callback, Integer attributeId, Long startTime, Integer numberOfIntervals, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long attributeIdFieldID = 0L;
      BaseTLVType attributeIdtlvValue = new UIntType(attributeId);
      elements.add(new StructElement(attributeIdFieldID, attributeIdtlvValue));

      final long startTimeFieldID = 1L;
      BaseTLVType startTimetlvValue = new UIntType(startTime);
      elements.add(new StructElement(startTimeFieldID, startTimetlvValue));

      final long numberOfIntervalsFieldID = 2L;
      BaseTLVType numberOfIntervalstlvValue = new UIntType(numberOfIntervals);
      elements.add(new StructElement(numberOfIntervalsFieldID, numberOfIntervalstlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readMeasurementTypeAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_TYPE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_TYPE_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasurementTypeAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASUREMENT_TYPE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASUREMENT_TYPE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDcVoltageAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_VOLTAGE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_VOLTAGE_ATTRIBUTE_ID, true);
    }

    public void subscribeDcVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_VOLTAGE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_VOLTAGE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDcVoltageMinAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_VOLTAGE_MIN_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_VOLTAGE_MIN_ATTRIBUTE_ID, true);
    }

    public void subscribeDcVoltageMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_VOLTAGE_MIN_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_VOLTAGE_MIN_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDcVoltageMaxAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_VOLTAGE_MAX_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_VOLTAGE_MAX_ATTRIBUTE_ID, true);
    }

    public void subscribeDcVoltageMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_VOLTAGE_MAX_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_VOLTAGE_MAX_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDcCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeDcCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDcCurrentMinAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_CURRENT_MIN_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_CURRENT_MIN_ATTRIBUTE_ID, true);
    }

    public void subscribeDcCurrentMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_CURRENT_MIN_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_CURRENT_MIN_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDcCurrentMaxAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_CURRENT_MAX_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_CURRENT_MAX_ATTRIBUTE_ID, true);
    }

    public void subscribeDcCurrentMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_CURRENT_MAX_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_CURRENT_MAX_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDcPowerAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_POWER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_POWER_ATTRIBUTE_ID, true);
    }

    public void subscribeDcPowerAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_POWER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_POWER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDcPowerMinAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_POWER_MIN_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_POWER_MIN_ATTRIBUTE_ID, true);
    }

    public void subscribeDcPowerMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_POWER_MIN_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_POWER_MIN_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDcPowerMaxAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_POWER_MAX_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_POWER_MAX_ATTRIBUTE_ID, true);
    }

    public void subscribeDcPowerMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_POWER_MAX_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_POWER_MAX_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDcVoltageMultiplierAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_VOLTAGE_MULTIPLIER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_VOLTAGE_MULTIPLIER_ATTRIBUTE_ID, true);
    }

    public void subscribeDcVoltageMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_VOLTAGE_MULTIPLIER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_VOLTAGE_MULTIPLIER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDcVoltageDivisorAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_VOLTAGE_DIVISOR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_VOLTAGE_DIVISOR_ATTRIBUTE_ID, true);
    }

    public void subscribeDcVoltageDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_VOLTAGE_DIVISOR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_VOLTAGE_DIVISOR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDcCurrentMultiplierAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_CURRENT_MULTIPLIER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_CURRENT_MULTIPLIER_ATTRIBUTE_ID, true);
    }

    public void subscribeDcCurrentMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_CURRENT_MULTIPLIER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_CURRENT_MULTIPLIER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDcCurrentDivisorAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_CURRENT_DIVISOR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_CURRENT_DIVISOR_ATTRIBUTE_ID, true);
    }

    public void subscribeDcCurrentDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_CURRENT_DIVISOR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_CURRENT_DIVISOR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDcPowerMultiplierAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_POWER_MULTIPLIER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_POWER_MULTIPLIER_ATTRIBUTE_ID, true);
    }

    public void subscribeDcPowerMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_POWER_MULTIPLIER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_POWER_MULTIPLIER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readDcPowerDivisorAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_POWER_DIVISOR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_POWER_DIVISOR_ATTRIBUTE_ID, true);
    }

    public void subscribeDcPowerDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, DC_POWER_DIVISOR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, DC_POWER_DIVISOR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcFrequencyAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_FREQUENCY_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_FREQUENCY_ATTRIBUTE_ID, true);
    }

    public void subscribeAcFrequencyAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_FREQUENCY_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_FREQUENCY_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcFrequencyMinAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_FREQUENCY_MIN_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_FREQUENCY_MIN_ATTRIBUTE_ID, true);
    }

    public void subscribeAcFrequencyMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_FREQUENCY_MIN_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_FREQUENCY_MIN_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcFrequencyMaxAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_FREQUENCY_MAX_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_FREQUENCY_MAX_ATTRIBUTE_ID, true);
    }

    public void subscribeAcFrequencyMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_FREQUENCY_MAX_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_FREQUENCY_MAX_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNeutralCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NEUTRAL_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NEUTRAL_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeNeutralCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NEUTRAL_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NEUTRAL_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTotalActivePowerAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOTAL_ACTIVE_POWER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOTAL_ACTIVE_POWER_ATTRIBUTE_ID, true);
    }

    public void subscribeTotalActivePowerAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOTAL_ACTIVE_POWER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOTAL_ACTIVE_POWER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTotalReactivePowerAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOTAL_REACTIVE_POWER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOTAL_REACTIVE_POWER_ATTRIBUTE_ID, true);
    }

    public void subscribeTotalReactivePowerAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOTAL_REACTIVE_POWER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOTAL_REACTIVE_POWER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTotalApparentPowerAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOTAL_APPARENT_POWER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOTAL_APPARENT_POWER_ATTRIBUTE_ID, true);
    }

    public void subscribeTotalApparentPowerAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TOTAL_APPARENT_POWER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TOTAL_APPARENT_POWER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasured1stHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED1ST_HARMONIC_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED1ST_HARMONIC_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasured1stHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED1ST_HARMONIC_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED1ST_HARMONIC_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasured3rdHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED3RD_HARMONIC_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED3RD_HARMONIC_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasured3rdHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED3RD_HARMONIC_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED3RD_HARMONIC_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasured5thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED5TH_HARMONIC_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED5TH_HARMONIC_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasured5thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED5TH_HARMONIC_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED5TH_HARMONIC_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasured7thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED7TH_HARMONIC_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED7TH_HARMONIC_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasured7thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED7TH_HARMONIC_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED7TH_HARMONIC_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasured9thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED9TH_HARMONIC_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED9TH_HARMONIC_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasured9thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED9TH_HARMONIC_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED9TH_HARMONIC_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasured11thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED11TH_HARMONIC_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED11TH_HARMONIC_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasured11thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED11TH_HARMONIC_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED11TH_HARMONIC_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasuredPhase1stHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_PHASE1ST_HARMONIC_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_PHASE1ST_HARMONIC_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredPhase1stHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_PHASE1ST_HARMONIC_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_PHASE1ST_HARMONIC_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasuredPhase3rdHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_PHASE3RD_HARMONIC_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_PHASE3RD_HARMONIC_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredPhase3rdHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_PHASE3RD_HARMONIC_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_PHASE3RD_HARMONIC_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasuredPhase5thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_PHASE5TH_HARMONIC_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_PHASE5TH_HARMONIC_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredPhase5thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_PHASE5TH_HARMONIC_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_PHASE5TH_HARMONIC_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasuredPhase7thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_PHASE7TH_HARMONIC_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_PHASE7TH_HARMONIC_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredPhase7thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_PHASE7TH_HARMONIC_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_PHASE7TH_HARMONIC_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasuredPhase9thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_PHASE9TH_HARMONIC_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_PHASE9TH_HARMONIC_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredPhase9thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_PHASE9TH_HARMONIC_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_PHASE9TH_HARMONIC_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeasuredPhase11thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_PHASE11TH_HARMONIC_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_PHASE11TH_HARMONIC_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeMeasuredPhase11thHarmonicCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEASURED_PHASE11TH_HARMONIC_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEASURED_PHASE11TH_HARMONIC_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcFrequencyMultiplierAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_FREQUENCY_MULTIPLIER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_FREQUENCY_MULTIPLIER_ATTRIBUTE_ID, true);
    }

    public void subscribeAcFrequencyMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_FREQUENCY_MULTIPLIER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_FREQUENCY_MULTIPLIER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcFrequencyDivisorAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_FREQUENCY_DIVISOR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_FREQUENCY_DIVISOR_ATTRIBUTE_ID, true);
    }

    public void subscribeAcFrequencyDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_FREQUENCY_DIVISOR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_FREQUENCY_DIVISOR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPowerMultiplierAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_MULTIPLIER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_MULTIPLIER_ATTRIBUTE_ID, true);
    }

    public void subscribePowerMultiplierAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_MULTIPLIER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_MULTIPLIER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPowerDivisorAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_DIVISOR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_DIVISOR_ATTRIBUTE_ID, true);
    }

    public void subscribePowerDivisorAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_DIVISOR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_DIVISOR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readHarmonicCurrentMultiplierAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HARMONIC_CURRENT_MULTIPLIER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HARMONIC_CURRENT_MULTIPLIER_ATTRIBUTE_ID, true);
    }

    public void subscribeHarmonicCurrentMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, HARMONIC_CURRENT_MULTIPLIER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, HARMONIC_CURRENT_MULTIPLIER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPhaseHarmonicCurrentMultiplierAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHASE_HARMONIC_CURRENT_MULTIPLIER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHASE_HARMONIC_CURRENT_MULTIPLIER_ATTRIBUTE_ID, true);
    }

    public void subscribePhaseHarmonicCurrentMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, PHASE_HARMONIC_CURRENT_MULTIPLIER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, PHASE_HARMONIC_CURRENT_MULTIPLIER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInstantaneousVoltageAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTANTANEOUS_VOLTAGE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTANTANEOUS_VOLTAGE_ATTRIBUTE_ID, true);
    }

    public void subscribeInstantaneousVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTANTANEOUS_VOLTAGE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTANTANEOUS_VOLTAGE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInstantaneousLineCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTANTANEOUS_LINE_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTANTANEOUS_LINE_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeInstantaneousLineCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTANTANEOUS_LINE_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTANTANEOUS_LINE_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInstantaneousActiveCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTANTANEOUS_ACTIVE_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTANTANEOUS_ACTIVE_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeInstantaneousActiveCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTANTANEOUS_ACTIVE_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTANTANEOUS_ACTIVE_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInstantaneousReactiveCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTANTANEOUS_REACTIVE_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTANTANEOUS_REACTIVE_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeInstantaneousReactiveCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTANTANEOUS_REACTIVE_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTANTANEOUS_REACTIVE_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInstantaneousPowerAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTANTANEOUS_POWER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTANTANEOUS_POWER_ATTRIBUTE_ID, true);
    }

    public void subscribeInstantaneousPowerAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INSTANTANEOUS_POWER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INSTANTANEOUS_POWER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsVoltageAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsVoltageMinAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_MIN_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_MIN_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsVoltageMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_MIN_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_MIN_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsVoltageMaxAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_MAX_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_MAX_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsVoltageMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_MAX_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_MAX_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsCurrentAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsCurrentAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsCurrentMinAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_MIN_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_MIN_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsCurrentMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_MIN_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_MIN_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsCurrentMaxAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_MAX_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_MAX_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsCurrentMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_MAX_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_MAX_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActivePowerAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_ATTRIBUTE_ID, true);
    }

    public void subscribeActivePowerAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActivePowerMinAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_MIN_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_MIN_ATTRIBUTE_ID, true);
    }

    public void subscribeActivePowerMinAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_MIN_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_MIN_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActivePowerMaxAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_MAX_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_MAX_ATTRIBUTE_ID, true);
    }

    public void subscribeActivePowerMaxAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_MAX_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_MAX_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readReactivePowerAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACTIVE_POWER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACTIVE_POWER_ATTRIBUTE_ID, true);
    }

    public void subscribeReactivePowerAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACTIVE_POWER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACTIVE_POWER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readApparentPowerAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPARENT_POWER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPARENT_POWER_ATTRIBUTE_ID, true);
    }

    public void subscribeApparentPowerAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPARENT_POWER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPARENT_POWER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPowerFactorAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_FACTOR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_FACTOR_ATTRIBUTE_ID, true);
    }

    public void subscribePowerFactorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_FACTOR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_FACTOR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageRmsVoltageMeasurementPeriodAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_ATTRIBUTE_ID, true);
    }

    public void writeAverageRmsVoltageMeasurementPeriodAttribute(DefaultClusterCallback callback, Integer value) {
      writeAverageRmsVoltageMeasurementPeriodAttribute(callback, value, 0);
    }

    public void writeAverageRmsVoltageMeasurementPeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeAverageRmsVoltageMeasurementPeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageRmsUnderVoltageCounterAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_ATTRIBUTE_ID, true);
    }

    public void writeAverageRmsUnderVoltageCounterAttribute(DefaultClusterCallback callback, Integer value) {
      writeAverageRmsUnderVoltageCounterAttribute(callback, value, 0);
    }

    public void writeAverageRmsUnderVoltageCounterAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeAverageRmsUnderVoltageCounterAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsExtremeOverVoltagePeriodAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_EXTREME_OVER_VOLTAGE_PERIOD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_EXTREME_OVER_VOLTAGE_PERIOD_ATTRIBUTE_ID, true);
    }

    public void writeRmsExtremeOverVoltagePeriodAttribute(DefaultClusterCallback callback, Integer value) {
      writeRmsExtremeOverVoltagePeriodAttribute(callback, value, 0);
    }

    public void writeRmsExtremeOverVoltagePeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), RMS_EXTREME_OVER_VOLTAGE_PERIOD_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRmsExtremeOverVoltagePeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_EXTREME_OVER_VOLTAGE_PERIOD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_EXTREME_OVER_VOLTAGE_PERIOD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsExtremeUnderVoltagePeriodAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_EXTREME_UNDER_VOLTAGE_PERIOD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_EXTREME_UNDER_VOLTAGE_PERIOD_ATTRIBUTE_ID, true);
    }

    public void writeRmsExtremeUnderVoltagePeriodAttribute(DefaultClusterCallback callback, Integer value) {
      writeRmsExtremeUnderVoltagePeriodAttribute(callback, value, 0);
    }

    public void writeRmsExtremeUnderVoltagePeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), RMS_EXTREME_UNDER_VOLTAGE_PERIOD_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRmsExtremeUnderVoltagePeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_EXTREME_UNDER_VOLTAGE_PERIOD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_EXTREME_UNDER_VOLTAGE_PERIOD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsVoltageSagPeriodAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_SAG_PERIOD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_SAG_PERIOD_ATTRIBUTE_ID, true);
    }

    public void writeRmsVoltageSagPeriodAttribute(DefaultClusterCallback callback, Integer value) {
      writeRmsVoltageSagPeriodAttribute(callback, value, 0);
    }

    public void writeRmsVoltageSagPeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), RMS_VOLTAGE_SAG_PERIOD_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRmsVoltageSagPeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_SAG_PERIOD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_SAG_PERIOD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsVoltageSwellPeriodAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_SWELL_PERIOD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_SWELL_PERIOD_ATTRIBUTE_ID, true);
    }

    public void writeRmsVoltageSwellPeriodAttribute(DefaultClusterCallback callback, Integer value) {
      writeRmsVoltageSwellPeriodAttribute(callback, value, 0);
    }

    public void writeRmsVoltageSwellPeriodAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), RMS_VOLTAGE_SWELL_PERIOD_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRmsVoltageSwellPeriodAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_SWELL_PERIOD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_SWELL_PERIOD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcVoltageMultiplierAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_VOLTAGE_MULTIPLIER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_VOLTAGE_MULTIPLIER_ATTRIBUTE_ID, true);
    }

    public void subscribeAcVoltageMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_VOLTAGE_MULTIPLIER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_VOLTAGE_MULTIPLIER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcVoltageDivisorAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_VOLTAGE_DIVISOR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_VOLTAGE_DIVISOR_ATTRIBUTE_ID, true);
    }

    public void subscribeAcVoltageDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_VOLTAGE_DIVISOR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_VOLTAGE_DIVISOR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcCurrentMultiplierAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_CURRENT_MULTIPLIER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_CURRENT_MULTIPLIER_ATTRIBUTE_ID, true);
    }

    public void subscribeAcCurrentMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_CURRENT_MULTIPLIER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_CURRENT_MULTIPLIER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcCurrentDivisorAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_CURRENT_DIVISOR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_CURRENT_DIVISOR_ATTRIBUTE_ID, true);
    }

    public void subscribeAcCurrentDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_CURRENT_DIVISOR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_CURRENT_DIVISOR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcPowerMultiplierAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_POWER_MULTIPLIER_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_POWER_MULTIPLIER_ATTRIBUTE_ID, true);
    }

    public void subscribeAcPowerMultiplierAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_POWER_MULTIPLIER_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_POWER_MULTIPLIER_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcPowerDivisorAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_POWER_DIVISOR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_POWER_DIVISOR_ATTRIBUTE_ID, true);
    }

    public void subscribeAcPowerDivisorAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_POWER_DIVISOR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_POWER_DIVISOR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOverloadAlarmsMaskAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OVERLOAD_ALARMS_MASK_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OVERLOAD_ALARMS_MASK_ATTRIBUTE_ID, true);
    }

    public void writeOverloadAlarmsMaskAttribute(DefaultClusterCallback callback, Integer value) {
      writeOverloadAlarmsMaskAttribute(callback, value, 0);
    }

    public void writeOverloadAlarmsMaskAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), OVERLOAD_ALARMS_MASK_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOverloadAlarmsMaskAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OVERLOAD_ALARMS_MASK_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OVERLOAD_ALARMS_MASK_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readVoltageOverloadAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VOLTAGE_OVERLOAD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VOLTAGE_OVERLOAD_ATTRIBUTE_ID, true);
    }

    public void subscribeVoltageOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VOLTAGE_OVERLOAD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VOLTAGE_OVERLOAD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCurrentOverloadAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_OVERLOAD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_OVERLOAD_ATTRIBUTE_ID, true);
    }

    public void subscribeCurrentOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CURRENT_OVERLOAD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CURRENT_OVERLOAD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcOverloadAlarmsMaskAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_OVERLOAD_ALARMS_MASK_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_OVERLOAD_ALARMS_MASK_ATTRIBUTE_ID, true);
    }

    public void writeAcOverloadAlarmsMaskAttribute(DefaultClusterCallback callback, Integer value) {
      writeAcOverloadAlarmsMaskAttribute(callback, value, 0);
    }

    public void writeAcOverloadAlarmsMaskAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), AC_OVERLOAD_ALARMS_MASK_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeAcOverloadAlarmsMaskAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_OVERLOAD_ALARMS_MASK_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_OVERLOAD_ALARMS_MASK_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcVoltageOverloadAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_VOLTAGE_OVERLOAD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_VOLTAGE_OVERLOAD_ATTRIBUTE_ID, true);
    }

    public void subscribeAcVoltageOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_VOLTAGE_OVERLOAD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_VOLTAGE_OVERLOAD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcCurrentOverloadAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_CURRENT_OVERLOAD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_CURRENT_OVERLOAD_ATTRIBUTE_ID, true);
    }

    public void subscribeAcCurrentOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_CURRENT_OVERLOAD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_CURRENT_OVERLOAD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcActivePowerOverloadAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_ACTIVE_POWER_OVERLOAD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_ACTIVE_POWER_OVERLOAD_ATTRIBUTE_ID, true);
    }

    public void subscribeAcActivePowerOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_ACTIVE_POWER_OVERLOAD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_ACTIVE_POWER_OVERLOAD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcReactivePowerOverloadAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_REACTIVE_POWER_OVERLOAD_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_REACTIVE_POWER_OVERLOAD_ATTRIBUTE_ID, true);
    }

    public void subscribeAcReactivePowerOverloadAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AC_REACTIVE_POWER_OVERLOAD_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AC_REACTIVE_POWER_OVERLOAD_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageRmsOverVoltageAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_OVER_VOLTAGE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_OVER_VOLTAGE_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageRmsOverVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_OVER_VOLTAGE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_OVER_VOLTAGE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageRmsUnderVoltageAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_UNDER_VOLTAGE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_UNDER_VOLTAGE_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageRmsUnderVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_UNDER_VOLTAGE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_UNDER_VOLTAGE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsExtremeOverVoltageAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_EXTREME_OVER_VOLTAGE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_EXTREME_OVER_VOLTAGE_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsExtremeOverVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_EXTREME_OVER_VOLTAGE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_EXTREME_OVER_VOLTAGE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsExtremeUnderVoltageAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_EXTREME_UNDER_VOLTAGE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_EXTREME_UNDER_VOLTAGE_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsExtremeUnderVoltageAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_EXTREME_UNDER_VOLTAGE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_EXTREME_UNDER_VOLTAGE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsVoltageSagAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_SAG_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_SAG_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsVoltageSagAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_SAG_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_SAG_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsVoltageSwellAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_SWELL_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_SWELL_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsVoltageSwellAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_SWELL_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_SWELL_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLineCurrentPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LINE_CURRENT_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LINE_CURRENT_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeLineCurrentPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LINE_CURRENT_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LINE_CURRENT_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveCurrentPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_CURRENT_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_CURRENT_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveCurrentPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_CURRENT_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_CURRENT_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readReactiveCurrentPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACTIVE_CURRENT_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACTIVE_CURRENT_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeReactiveCurrentPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACTIVE_CURRENT_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACTIVE_CURRENT_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsVoltagePhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsVoltagePhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsVoltageMinPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_MIN_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_MIN_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsVoltageMinPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_MIN_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_MIN_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsVoltageMaxPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_MAX_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_MAX_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsVoltageMaxPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_MAX_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_MAX_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsCurrentPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsCurrentPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsCurrentMinPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_MIN_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_MIN_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsCurrentMinPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_MIN_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_MIN_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsCurrentMaxPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_MAX_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_MAX_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsCurrentMaxPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_MAX_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_MAX_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActivePowerPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeActivePowerPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActivePowerMinPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_MIN_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_MIN_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeActivePowerMinPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_MIN_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_MIN_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActivePowerMaxPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_MAX_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_MAX_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeActivePowerMaxPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_MAX_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_MAX_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readReactivePowerPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACTIVE_POWER_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACTIVE_POWER_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeReactivePowerPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACTIVE_POWER_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACTIVE_POWER_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readApparentPowerPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPARENT_POWER_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPARENT_POWER_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeApparentPowerPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPARENT_POWER_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPARENT_POWER_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPowerFactorPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_FACTOR_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_FACTOR_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribePowerFactorPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_FACTOR_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_FACTOR_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageRmsVoltageMeasurementPeriodPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageRmsVoltageMeasurementPeriodPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageRmsOverVoltageCounterPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageRmsOverVoltageCounterPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageRmsUnderVoltageCounterPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageRmsUnderVoltageCounterPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsExtremeOverVoltagePeriodPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsExtremeOverVoltagePeriodPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsExtremeUnderVoltagePeriodPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsExtremeUnderVoltagePeriodPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsVoltageSagPeriodPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_SAG_PERIOD_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_SAG_PERIOD_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsVoltageSagPeriodPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_SAG_PERIOD_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_SAG_PERIOD_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsVoltageSwellPeriodPhaseBAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_SWELL_PERIOD_PHASE_B_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_SWELL_PERIOD_PHASE_B_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsVoltageSwellPeriodPhaseBAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_SWELL_PERIOD_PHASE_B_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_SWELL_PERIOD_PHASE_B_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLineCurrentPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LINE_CURRENT_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LINE_CURRENT_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeLineCurrentPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LINE_CURRENT_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LINE_CURRENT_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActiveCurrentPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_CURRENT_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_CURRENT_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeActiveCurrentPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_CURRENT_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_CURRENT_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readReactiveCurrentPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACTIVE_CURRENT_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACTIVE_CURRENT_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeReactiveCurrentPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACTIVE_CURRENT_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACTIVE_CURRENT_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsVoltagePhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsVoltagePhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsVoltageMinPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_MIN_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_MIN_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsVoltageMinPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_MIN_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_MIN_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsVoltageMaxPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_MAX_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_MAX_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsVoltageMaxPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_MAX_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_MAX_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsCurrentPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsCurrentPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsCurrentMinPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_MIN_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_MIN_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsCurrentMinPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_MIN_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_MIN_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsCurrentMaxPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_MAX_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_MAX_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsCurrentMaxPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_CURRENT_MAX_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_CURRENT_MAX_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActivePowerPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeActivePowerPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActivePowerMinPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_MIN_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_MIN_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeActivePowerMinPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_MIN_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_MIN_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readActivePowerMaxPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_MAX_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_MAX_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeActivePowerMaxPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACTIVE_POWER_MAX_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACTIVE_POWER_MAX_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readReactivePowerPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACTIVE_POWER_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACTIVE_POWER_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeReactivePowerPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, REACTIVE_POWER_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, REACTIVE_POWER_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readApparentPowerPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPARENT_POWER_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPARENT_POWER_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeApparentPowerPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, APPARENT_POWER_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, APPARENT_POWER_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readPowerFactorPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_FACTOR_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_FACTOR_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribePowerFactorPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, POWER_FACTOR_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, POWER_FACTOR_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageRmsVoltageMeasurementPeriodPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageRmsVoltageMeasurementPeriodPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageRmsOverVoltageCounterPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageRmsOverVoltageCounterPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAverageRmsUnderVoltageCounterPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeAverageRmsUnderVoltageCounterPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsExtremeOverVoltagePeriodPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsExtremeOverVoltagePeriodPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsExtremeUnderVoltagePeriodPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsExtremeUnderVoltagePeriodPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsVoltageSagPeriodPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_SAG_PERIOD_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_SAG_PERIOD_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsVoltageSagPeriodPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_SAG_PERIOD_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_SAG_PERIOD_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRmsVoltageSwellPeriodPhaseCAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_SWELL_PERIOD_PHASE_C_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_SWELL_PERIOD_PHASE_C_ATTRIBUTE_ID, true);
    }

    public void subscribeRmsVoltageSwellPeriodPhaseCAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RMS_VOLTAGE_SWELL_PERIOD_PHASE_C_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RMS_VOLTAGE_SWELL_PERIOD_PHASE_C_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class UnitTestingCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 4294048773L;

    private static final long BOOLEAN_ATTRIBUTE_ID = 0L;
    private static final long BITMAP8_ATTRIBUTE_ID = 1L;
    private static final long BITMAP16_ATTRIBUTE_ID = 2L;
    private static final long BITMAP32_ATTRIBUTE_ID = 3L;
    private static final long BITMAP64_ATTRIBUTE_ID = 4L;
    private static final long INT8U_ATTRIBUTE_ID = 5L;
    private static final long INT16U_ATTRIBUTE_ID = 6L;
    private static final long INT24U_ATTRIBUTE_ID = 7L;
    private static final long INT32U_ATTRIBUTE_ID = 8L;
    private static final long INT40U_ATTRIBUTE_ID = 9L;
    private static final long INT48U_ATTRIBUTE_ID = 10L;
    private static final long INT56U_ATTRIBUTE_ID = 11L;
    private static final long INT64U_ATTRIBUTE_ID = 12L;
    private static final long INT8S_ATTRIBUTE_ID = 13L;
    private static final long INT16S_ATTRIBUTE_ID = 14L;
    private static final long INT24S_ATTRIBUTE_ID = 15L;
    private static final long INT32S_ATTRIBUTE_ID = 16L;
    private static final long INT40S_ATTRIBUTE_ID = 17L;
    private static final long INT48S_ATTRIBUTE_ID = 18L;
    private static final long INT56S_ATTRIBUTE_ID = 19L;
    private static final long INT64S_ATTRIBUTE_ID = 20L;
    private static final long ENUM8_ATTRIBUTE_ID = 21L;
    private static final long ENUM16_ATTRIBUTE_ID = 22L;
    private static final long FLOAT_SINGLE_ATTRIBUTE_ID = 23L;
    private static final long FLOAT_DOUBLE_ATTRIBUTE_ID = 24L;
    private static final long OCTET_STRING_ATTRIBUTE_ID = 25L;
    private static final long LIST_INT8U_ATTRIBUTE_ID = 26L;
    private static final long LIST_OCTET_STRING_ATTRIBUTE_ID = 27L;
    private static final long LIST_STRUCT_OCTET_STRING_ATTRIBUTE_ID = 28L;
    private static final long LONG_OCTET_STRING_ATTRIBUTE_ID = 29L;
    private static final long CHAR_STRING_ATTRIBUTE_ID = 30L;
    private static final long LONG_CHAR_STRING_ATTRIBUTE_ID = 31L;
    private static final long EPOCH_US_ATTRIBUTE_ID = 32L;
    private static final long EPOCH_S_ATTRIBUTE_ID = 33L;
    private static final long VENDOR_ID_ATTRIBUTE_ID = 34L;
    private static final long LIST_NULLABLES_AND_OPTIONALS_STRUCT_ATTRIBUTE_ID = 35L;
    private static final long ENUM_ATTR_ATTRIBUTE_ID = 36L;
    private static final long STRUCT_ATTR_ATTRIBUTE_ID = 37L;
    private static final long RANGE_RESTRICTED_INT8U_ATTRIBUTE_ID = 38L;
    private static final long RANGE_RESTRICTED_INT8S_ATTRIBUTE_ID = 39L;
    private static final long RANGE_RESTRICTED_INT16U_ATTRIBUTE_ID = 40L;
    private static final long RANGE_RESTRICTED_INT16S_ATTRIBUTE_ID = 41L;
    private static final long LIST_LONG_OCTET_STRING_ATTRIBUTE_ID = 42L;
    private static final long LIST_FABRIC_SCOPED_ATTRIBUTE_ID = 43L;
    private static final long TIMED_WRITE_BOOLEAN_ATTRIBUTE_ID = 48L;
    private static final long GENERAL_ERROR_BOOLEAN_ATTRIBUTE_ID = 49L;
    private static final long CLUSTER_ERROR_BOOLEAN_ATTRIBUTE_ID = 50L;
    private static final long UNSUPPORTED_ATTRIBUTE_ID = 255L;
    private static final long NULLABLE_BOOLEAN_ATTRIBUTE_ID = 16384L;
    private static final long NULLABLE_BITMAP8_ATTRIBUTE_ID = 16385L;
    private static final long NULLABLE_BITMAP16_ATTRIBUTE_ID = 16386L;
    private static final long NULLABLE_BITMAP32_ATTRIBUTE_ID = 16387L;
    private static final long NULLABLE_BITMAP64_ATTRIBUTE_ID = 16388L;
    private static final long NULLABLE_INT8U_ATTRIBUTE_ID = 16389L;
    private static final long NULLABLE_INT16U_ATTRIBUTE_ID = 16390L;
    private static final long NULLABLE_INT24U_ATTRIBUTE_ID = 16391L;
    private static final long NULLABLE_INT32U_ATTRIBUTE_ID = 16392L;
    private static final long NULLABLE_INT40U_ATTRIBUTE_ID = 16393L;
    private static final long NULLABLE_INT48U_ATTRIBUTE_ID = 16394L;
    private static final long NULLABLE_INT56U_ATTRIBUTE_ID = 16395L;
    private static final long NULLABLE_INT64U_ATTRIBUTE_ID = 16396L;
    private static final long NULLABLE_INT8S_ATTRIBUTE_ID = 16397L;
    private static final long NULLABLE_INT16S_ATTRIBUTE_ID = 16398L;
    private static final long NULLABLE_INT24S_ATTRIBUTE_ID = 16399L;
    private static final long NULLABLE_INT32S_ATTRIBUTE_ID = 16400L;
    private static final long NULLABLE_INT40S_ATTRIBUTE_ID = 16401L;
    private static final long NULLABLE_INT48S_ATTRIBUTE_ID = 16402L;
    private static final long NULLABLE_INT56S_ATTRIBUTE_ID = 16403L;
    private static final long NULLABLE_INT64S_ATTRIBUTE_ID = 16404L;
    private static final long NULLABLE_ENUM8_ATTRIBUTE_ID = 16405L;
    private static final long NULLABLE_ENUM16_ATTRIBUTE_ID = 16406L;
    private static final long NULLABLE_FLOAT_SINGLE_ATTRIBUTE_ID = 16407L;
    private static final long NULLABLE_FLOAT_DOUBLE_ATTRIBUTE_ID = 16408L;
    private static final long NULLABLE_OCTET_STRING_ATTRIBUTE_ID = 16409L;
    private static final long NULLABLE_CHAR_STRING_ATTRIBUTE_ID = 16414L;
    private static final long NULLABLE_ENUM_ATTR_ATTRIBUTE_ID = 16420L;
    private static final long NULLABLE_STRUCT_ATTRIBUTE_ID = 16421L;
    private static final long NULLABLE_RANGE_RESTRICTED_INT8U_ATTRIBUTE_ID = 16422L;
    private static final long NULLABLE_RANGE_RESTRICTED_INT8S_ATTRIBUTE_ID = 16423L;
    private static final long NULLABLE_RANGE_RESTRICTED_INT16U_ATTRIBUTE_ID = 16424L;
    private static final long NULLABLE_RANGE_RESTRICTED_INT16S_ATTRIBUTE_ID = 16425L;
    private static final long WRITE_ONLY_INT8U_ATTRIBUTE_ID = 16426L;
    private static final long MEI_INT8U_ATTRIBUTE_ID = 4294070017L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public UnitTestingCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void test(DefaultClusterCallback callback) {
      test(callback, 0);
    }

    public void test(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testNotHandled(DefaultClusterCallback callback) {
      testNotHandled(callback, 0);
    }

    public void testNotHandled(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testSpecific(TestSpecificResponseCallback callback) {
      testSpecific(callback, 0);
    }

    public void testSpecific(TestSpecificResponseCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long returnValueFieldID = 0L;
          Integer returnValue = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == returnValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                returnValue = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(returnValue);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testUnknownCommand(DefaultClusterCallback callback) {
      testUnknownCommand(callback, 0);
    }

    public void testUnknownCommand(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 3L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testAddArguments(TestAddArgumentsResponseCallback callback, Integer arg1, Integer arg2) {
      testAddArguments(callback, arg1, arg2, 0);
    }

    public void testAddArguments(TestAddArgumentsResponseCallback callback, Integer arg1, Integer arg2, int timedInvokeTimeoutMs) {
      final long commandId = 4L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = new UIntType(arg1);
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      final long arg2FieldID = 1L;
      BaseTLVType arg2tlvValue = new UIntType(arg2);
      elements.add(new StructElement(arg2FieldID, arg2tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long returnValueFieldID = 0L;
          Integer returnValue = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == returnValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                returnValue = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(returnValue);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testSimpleArgumentRequest(TestSimpleArgumentResponseCallback callback, Boolean arg1) {
      testSimpleArgumentRequest(callback, arg1, 0);
    }

    public void testSimpleArgumentRequest(TestSimpleArgumentResponseCallback callback, Boolean arg1, int timedInvokeTimeoutMs) {
      final long commandId = 5L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = new BooleanType(arg1);
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long returnValueFieldID = 0L;
          Boolean returnValue = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == returnValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                returnValue = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(returnValue);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testStructArrayArgumentRequest(TestStructArrayArgumentResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1, ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg2, ArrayList<Integer> arg3, ArrayList<Boolean> arg4, Integer arg5, Boolean arg6) {
      testStructArrayArgumentRequest(callback, arg1, arg2, arg3, arg4, arg5, arg6, 0);
    }

    public void testStructArrayArgumentRequest(TestStructArrayArgumentResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1, ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg2, ArrayList<Integer> arg3, ArrayList<Boolean> arg4, Integer arg5, Boolean arg6, int timedInvokeTimeoutMs) {
      final long commandId = 6L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = ArrayType.generateArrayType(arg1, (elementarg1) -> elementarg1.encodeTlv());
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      final long arg2FieldID = 1L;
      BaseTLVType arg2tlvValue = ArrayType.generateArrayType(arg2, (elementarg2) -> elementarg2.encodeTlv());
      elements.add(new StructElement(arg2FieldID, arg2tlvValue));

      final long arg3FieldID = 2L;
      BaseTLVType arg3tlvValue = ArrayType.generateArrayType(arg3, (elementarg3) -> new UIntType(elementarg3));
      elements.add(new StructElement(arg3FieldID, arg3tlvValue));

      final long arg4FieldID = 3L;
      BaseTLVType arg4tlvValue = ArrayType.generateArrayType(arg4, (elementarg4) -> new BooleanType(elementarg4));
      elements.add(new StructElement(arg4FieldID, arg4tlvValue));

      final long arg5FieldID = 4L;
      BaseTLVType arg5tlvValue = new UIntType(arg5);
      elements.add(new StructElement(arg5FieldID, arg5tlvValue));

      final long arg6FieldID = 5L;
      BaseTLVType arg6tlvValue = new BooleanType(arg6);
      elements.add(new StructElement(arg6FieldID, arg6tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long arg1FieldID = 0L;
          ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1 = null;
          final long arg2FieldID = 1L;
          ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg2 = null;
          final long arg3FieldID = 2L;
          ArrayList<Integer> arg3 = null;
          final long arg4FieldID = 3L;
          ArrayList<Boolean> arg4 = null;
          final long arg5FieldID = 4L;
          Integer arg5 = null;
          final long arg6FieldID = 5L;
          Boolean arg6 = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == arg1FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                arg1 = castingValue.map((elementcastingValue) -> ChipStructs.UnitTestingClusterNestedStructList.decodeTlv(elementcastingValue));
              }
            } else if (element.contextTagNum() == arg2FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                arg2 = castingValue.map((elementcastingValue) -> ChipStructs.UnitTestingClusterSimpleStruct.decodeTlv(elementcastingValue));
              }
            } else if (element.contextTagNum() == arg3FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                arg3 = castingValue.map((elementcastingValue) -> elementcastingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == arg4FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                arg4 = castingValue.map((elementcastingValue) -> elementcastingValue.value(Boolean.class));
              }
            } else if (element.contextTagNum() == arg5FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                arg5 = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == arg6FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                arg6 = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(arg1, arg2, arg3, arg4, arg5, arg6);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testStructArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterSimpleStruct arg1) {
      testStructArgumentRequest(callback, arg1, 0);
    }

    public void testStructArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterSimpleStruct arg1, int timedInvokeTimeoutMs) {
      final long commandId = 7L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = arg1.encodeTlv();
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long valueFieldID = 0L;
          Boolean value = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                value = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(value);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testNestedStructArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterNestedStruct arg1) {
      testNestedStructArgumentRequest(callback, arg1, 0);
    }

    public void testNestedStructArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterNestedStruct arg1, int timedInvokeTimeoutMs) {
      final long commandId = 8L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = arg1.encodeTlv();
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long valueFieldID = 0L;
          Boolean value = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                value = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(value);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testListStructArgumentRequest(BooleanResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg1) {
      testListStructArgumentRequest(callback, arg1, 0);
    }

    public void testListStructArgumentRequest(BooleanResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg1, int timedInvokeTimeoutMs) {
      final long commandId = 9L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = ArrayType.generateArrayType(arg1, (elementarg1) -> elementarg1.encodeTlv());
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long valueFieldID = 0L;
          Boolean value = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                value = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(value);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testListInt8UArgumentRequest(BooleanResponseCallback callback, ArrayList<Integer> arg1) {
      testListInt8UArgumentRequest(callback, arg1, 0);
    }

    public void testListInt8UArgumentRequest(BooleanResponseCallback callback, ArrayList<Integer> arg1, int timedInvokeTimeoutMs) {
      final long commandId = 10L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = ArrayType.generateArrayType(arg1, (elementarg1) -> new UIntType(elementarg1));
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long valueFieldID = 0L;
          Boolean value = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                value = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(value);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testNestedStructListArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterNestedStructList arg1) {
      testNestedStructListArgumentRequest(callback, arg1, 0);
    }

    public void testNestedStructListArgumentRequest(BooleanResponseCallback callback, ChipStructs.UnitTestingClusterNestedStructList arg1, int timedInvokeTimeoutMs) {
      final long commandId = 11L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = arg1.encodeTlv();
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long valueFieldID = 0L;
          Boolean value = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                value = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(value);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testListNestedStructListArgumentRequest(BooleanResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1) {
      testListNestedStructListArgumentRequest(callback, arg1, 0);
    }

    public void testListNestedStructListArgumentRequest(BooleanResponseCallback callback, ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1, int timedInvokeTimeoutMs) {
      final long commandId = 12L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = ArrayType.generateArrayType(arg1, (elementarg1) -> elementarg1.encodeTlv());
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long valueFieldID = 0L;
          Boolean value = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                value = castingValue.value(Boolean.class);
              }
            }
          }
          callback.onSuccess(value);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testListInt8UReverseRequest(TestListInt8UReverseResponseCallback callback, ArrayList<Integer> arg1) {
      testListInt8UReverseRequest(callback, arg1, 0);
    }

    public void testListInt8UReverseRequest(TestListInt8UReverseResponseCallback callback, ArrayList<Integer> arg1, int timedInvokeTimeoutMs) {
      final long commandId = 13L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = ArrayType.generateArrayType(arg1, (elementarg1) -> new UIntType(elementarg1));
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long arg1FieldID = 0L;
          ArrayList<Integer> arg1 = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == arg1FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                arg1 = castingValue.map((elementcastingValue) -> elementcastingValue.value(Integer.class));
              }
            }
          }
          callback.onSuccess(arg1);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testEnumsRequest(TestEnumsResponseCallback callback, Integer arg1, Integer arg2) {
      testEnumsRequest(callback, arg1, arg2, 0);
    }

    public void testEnumsRequest(TestEnumsResponseCallback callback, Integer arg1, Integer arg2, int timedInvokeTimeoutMs) {
      final long commandId = 14L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = new UIntType(arg1);
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      final long arg2FieldID = 1L;
      BaseTLVType arg2tlvValue = new UIntType(arg2);
      elements.add(new StructElement(arg2FieldID, arg2tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long arg1FieldID = 0L;
          Integer arg1 = null;
          final long arg2FieldID = 1L;
          Integer arg2 = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == arg1FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                arg1 = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == arg2FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                arg2 = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(arg1, arg2);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testNullableOptionalRequest(TestNullableOptionalResponseCallback callback, @Nullable Optional<Integer> arg1) {
      testNullableOptionalRequest(callback, arg1, 0);
    }

    public void testNullableOptionalRequest(TestNullableOptionalResponseCallback callback, @Nullable Optional<Integer> arg1, int timedInvokeTimeoutMs) {
      final long commandId = 15L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = arg1 != null ? arg1.<BaseTLVType>map((nonOptionalarg1) -> new UIntType(nonOptionalarg1)).orElse(new EmptyType()) : new NullType();
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long wasPresentFieldID = 0L;
          Boolean wasPresent = null;
          final long wasNullFieldID = 1L;
          Optional<Boolean> wasNull = Optional.empty();
          final long valueFieldID = 2L;
          Optional<Integer> value = Optional.empty();
          final long originalValueFieldID = 3L;
          @Nullable Optional<Integer> originalValue = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == wasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                wasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == wasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                wasNull = Optional.of(castingValue.value(Boolean.class));
              }
            } else if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                value = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == originalValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                originalValue = Optional.of(castingValue.value(Integer.class));
              }
            }
          }
          callback.onSuccess(wasPresent, wasNull, value, originalValue);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testComplexNullableOptionalRequest(TestComplexNullableOptionalResponseCallback callback, @Nullable Integer nullableInt, Optional<Integer> optionalInt, @Nullable Optional<Integer> nullableOptionalInt, @Nullable String nullableString, Optional<String> optionalString, @Nullable Optional<String> nullableOptionalString, @Nullable ChipStructs.UnitTestingClusterSimpleStruct nullableStruct, Optional<ChipStructs.UnitTestingClusterSimpleStruct> optionalStruct, @Nullable Optional<ChipStructs.UnitTestingClusterSimpleStruct> nullableOptionalStruct, @Nullable ArrayList<Integer> nullableList, Optional<ArrayList<Integer>> optionalList, @Nullable Optional<ArrayList<Integer>> nullableOptionalList) {
      testComplexNullableOptionalRequest(callback, nullableInt, optionalInt, nullableOptionalInt, nullableString, optionalString, nullableOptionalString, nullableStruct, optionalStruct, nullableOptionalStruct, nullableList, optionalList, nullableOptionalList, 0);
    }

    public void testComplexNullableOptionalRequest(TestComplexNullableOptionalResponseCallback callback, @Nullable Integer nullableInt, Optional<Integer> optionalInt, @Nullable Optional<Integer> nullableOptionalInt, @Nullable String nullableString, Optional<String> optionalString, @Nullable Optional<String> nullableOptionalString, @Nullable ChipStructs.UnitTestingClusterSimpleStruct nullableStruct, Optional<ChipStructs.UnitTestingClusterSimpleStruct> optionalStruct, @Nullable Optional<ChipStructs.UnitTestingClusterSimpleStruct> nullableOptionalStruct, @Nullable ArrayList<Integer> nullableList, Optional<ArrayList<Integer>> optionalList, @Nullable Optional<ArrayList<Integer>> nullableOptionalList, int timedInvokeTimeoutMs) {
      final long commandId = 16L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long nullableIntFieldID = 0L;
      BaseTLVType nullableInttlvValue = nullableInt != null ? new UIntType(nullableInt) : new NullType();
      elements.add(new StructElement(nullableIntFieldID, nullableInttlvValue));

      final long optionalIntFieldID = 1L;
      BaseTLVType optionalInttlvValue = optionalInt.<BaseTLVType>map((nonOptionaloptionalInt) -> new UIntType(nonOptionaloptionalInt)).orElse(new EmptyType());
      elements.add(new StructElement(optionalIntFieldID, optionalInttlvValue));

      final long nullableOptionalIntFieldID = 2L;
      BaseTLVType nullableOptionalInttlvValue = nullableOptionalInt != null ? nullableOptionalInt.<BaseTLVType>map((nonOptionalnullableOptionalInt) -> new UIntType(nonOptionalnullableOptionalInt)).orElse(new EmptyType()) : new NullType();
      elements.add(new StructElement(nullableOptionalIntFieldID, nullableOptionalInttlvValue));

      final long nullableStringFieldID = 3L;
      BaseTLVType nullableStringtlvValue = nullableString != null ? new StringType(nullableString) : new NullType();
      elements.add(new StructElement(nullableStringFieldID, nullableStringtlvValue));

      final long optionalStringFieldID = 4L;
      BaseTLVType optionalStringtlvValue = optionalString.<BaseTLVType>map((nonOptionaloptionalString) -> new StringType(nonOptionaloptionalString)).orElse(new EmptyType());
      elements.add(new StructElement(optionalStringFieldID, optionalStringtlvValue));

      final long nullableOptionalStringFieldID = 5L;
      BaseTLVType nullableOptionalStringtlvValue = nullableOptionalString != null ? nullableOptionalString.<BaseTLVType>map((nonOptionalnullableOptionalString) -> new StringType(nonOptionalnullableOptionalString)).orElse(new EmptyType()) : new NullType();
      elements.add(new StructElement(nullableOptionalStringFieldID, nullableOptionalStringtlvValue));

      final long nullableStructFieldID = 6L;
      BaseTLVType nullableStructtlvValue = nullableStruct != null ? nullableStruct.encodeTlv() : new NullType();
      elements.add(new StructElement(nullableStructFieldID, nullableStructtlvValue));

      final long optionalStructFieldID = 7L;
      BaseTLVType optionalStructtlvValue = optionalStruct.<BaseTLVType>map((nonOptionaloptionalStruct) -> nonOptionaloptionalStruct.encodeTlv()).orElse(new EmptyType());
      elements.add(new StructElement(optionalStructFieldID, optionalStructtlvValue));

      final long nullableOptionalStructFieldID = 8L;
      BaseTLVType nullableOptionalStructtlvValue = nullableOptionalStruct != null ? nullableOptionalStruct.<BaseTLVType>map((nonOptionalnullableOptionalStruct) -> nonOptionalnullableOptionalStruct.encodeTlv()).orElse(new EmptyType()) : new NullType();
      elements.add(new StructElement(nullableOptionalStructFieldID, nullableOptionalStructtlvValue));

      final long nullableListFieldID = 9L;
      BaseTLVType nullableListtlvValue = nullableList != null ? ArrayType.generateArrayType(nullableList, (elementnullableList) -> new UIntType(elementnullableList)) : new NullType();
      elements.add(new StructElement(nullableListFieldID, nullableListtlvValue));

      final long optionalListFieldID = 10L;
      BaseTLVType optionalListtlvValue = optionalList.<BaseTLVType>map((nonOptionaloptionalList) -> ArrayType.generateArrayType(nonOptionaloptionalList, (elementnonOptionaloptionalList) -> new UIntType(elementnonOptionaloptionalList))).orElse(new EmptyType());
      elements.add(new StructElement(optionalListFieldID, optionalListtlvValue));

      final long nullableOptionalListFieldID = 11L;
      BaseTLVType nullableOptionalListtlvValue = nullableOptionalList != null ? nullableOptionalList.<BaseTLVType>map((nonOptionalnullableOptionalList) -> ArrayType.generateArrayType(nonOptionalnullableOptionalList, (elementnonOptionalnullableOptionalList) -> new UIntType(elementnonOptionalnullableOptionalList))).orElse(new EmptyType()) : new NullType();
      elements.add(new StructElement(nullableOptionalListFieldID, nullableOptionalListtlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long nullableIntWasNullFieldID = 0L;
          Boolean nullableIntWasNull = null;
          final long nullableIntValueFieldID = 1L;
          Optional<Integer> nullableIntValue = Optional.empty();
          final long optionalIntWasPresentFieldID = 2L;
          Boolean optionalIntWasPresent = null;
          final long optionalIntValueFieldID = 3L;
          Optional<Integer> optionalIntValue = Optional.empty();
          final long nullableOptionalIntWasPresentFieldID = 4L;
          Boolean nullableOptionalIntWasPresent = null;
          final long nullableOptionalIntWasNullFieldID = 5L;
          Optional<Boolean> nullableOptionalIntWasNull = Optional.empty();
          final long nullableOptionalIntValueFieldID = 6L;
          Optional<Integer> nullableOptionalIntValue = Optional.empty();
          final long nullableStringWasNullFieldID = 7L;
          Boolean nullableStringWasNull = null;
          final long nullableStringValueFieldID = 8L;
          Optional<String> nullableStringValue = Optional.empty();
          final long optionalStringWasPresentFieldID = 9L;
          Boolean optionalStringWasPresent = null;
          final long optionalStringValueFieldID = 10L;
          Optional<String> optionalStringValue = Optional.empty();
          final long nullableOptionalStringWasPresentFieldID = 11L;
          Boolean nullableOptionalStringWasPresent = null;
          final long nullableOptionalStringWasNullFieldID = 12L;
          Optional<Boolean> nullableOptionalStringWasNull = Optional.empty();
          final long nullableOptionalStringValueFieldID = 13L;
          Optional<String> nullableOptionalStringValue = Optional.empty();
          final long nullableStructWasNullFieldID = 14L;
          Boolean nullableStructWasNull = null;
          final long nullableStructValueFieldID = 15L;
          Optional<ChipStructs.UnitTestingClusterSimpleStruct> nullableStructValue = Optional.empty();
          final long optionalStructWasPresentFieldID = 16L;
          Boolean optionalStructWasPresent = null;
          final long optionalStructValueFieldID = 17L;
          Optional<ChipStructs.UnitTestingClusterSimpleStruct> optionalStructValue = Optional.empty();
          final long nullableOptionalStructWasPresentFieldID = 18L;
          Boolean nullableOptionalStructWasPresent = null;
          final long nullableOptionalStructWasNullFieldID = 19L;
          Optional<Boolean> nullableOptionalStructWasNull = Optional.empty();
          final long nullableOptionalStructValueFieldID = 20L;
          Optional<ChipStructs.UnitTestingClusterSimpleStruct> nullableOptionalStructValue = Optional.empty();
          final long nullableListWasNullFieldID = 21L;
          Boolean nullableListWasNull = null;
          final long nullableListValueFieldID = 22L;
          Optional<ArrayList<Integer>> nullableListValue = Optional.empty();
          final long optionalListWasPresentFieldID = 23L;
          Boolean optionalListWasPresent = null;
          final long optionalListValueFieldID = 24L;
          Optional<ArrayList<Integer>> optionalListValue = Optional.empty();
          final long nullableOptionalListWasPresentFieldID = 25L;
          Boolean nullableOptionalListWasPresent = null;
          final long nullableOptionalListWasNullFieldID = 26L;
          Optional<Boolean> nullableOptionalListWasNull = Optional.empty();
          final long nullableOptionalListValueFieldID = 27L;
          Optional<ArrayList<Integer>> nullableOptionalListValue = Optional.empty();
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == nullableIntWasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableIntWasNull = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == nullableIntValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                nullableIntValue = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == optionalIntWasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                optionalIntWasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == optionalIntValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                optionalIntValue = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == nullableOptionalIntWasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableOptionalIntWasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == nullableOptionalIntWasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableOptionalIntWasNull = Optional.of(castingValue.value(Boolean.class));
              }
            } else if (element.contextTagNum() == nullableOptionalIntValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                nullableOptionalIntValue = Optional.of(castingValue.value(Integer.class));
              }
            } else if (element.contextTagNum() == nullableStringWasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableStringWasNull = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == nullableStringValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                nullableStringValue = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == optionalStringWasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                optionalStringWasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == optionalStringValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                optionalStringValue = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == nullableOptionalStringWasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableOptionalStringWasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == nullableOptionalStringWasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableOptionalStringWasNull = Optional.of(castingValue.value(Boolean.class));
              }
            } else if (element.contextTagNum() == nullableOptionalStringValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.String) {
                StringType castingValue = element.value(StringType.class);
                nullableOptionalStringValue = Optional.of(castingValue.value(String.class));
              }
            } else if (element.contextTagNum() == nullableStructWasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableStructWasNull = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == nullableStructValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                nullableStructValue = Optional.of(ChipStructs.UnitTestingClusterSimpleStruct.decodeTlv(castingValue));
              }
            } else if (element.contextTagNum() == optionalStructWasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                optionalStructWasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == optionalStructValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                optionalStructValue = Optional.of(ChipStructs.UnitTestingClusterSimpleStruct.decodeTlv(castingValue));
              }
            } else if (element.contextTagNum() == nullableOptionalStructWasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableOptionalStructWasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == nullableOptionalStructWasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableOptionalStructWasNull = Optional.of(castingValue.value(Boolean.class));
              }
            } else if (element.contextTagNum() == nullableOptionalStructValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                nullableOptionalStructValue = Optional.of(ChipStructs.UnitTestingClusterSimpleStruct.decodeTlv(castingValue));
              }
            } else if (element.contextTagNum() == nullableListWasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableListWasNull = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == nullableListValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                nullableListValue = Optional.of(castingValue.map((elementcastingValue) -> elementcastingValue.value(Integer.class)));
              }
            } else if (element.contextTagNum() == optionalListWasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                optionalListWasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == optionalListValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                optionalListValue = Optional.of(castingValue.map((elementcastingValue) -> elementcastingValue.value(Integer.class)));
              }
            } else if (element.contextTagNum() == nullableOptionalListWasPresentFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableOptionalListWasPresent = castingValue.value(Boolean.class);
              }
            } else if (element.contextTagNum() == nullableOptionalListWasNullFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Boolean) {
                BooleanType castingValue = element.value(BooleanType.class);
                nullableOptionalListWasNull = Optional.of(castingValue.value(Boolean.class));
              }
            } else if (element.contextTagNum() == nullableOptionalListValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Array) {
                ArrayType castingValue = element.value(ArrayType.class);
                nullableOptionalListValue = Optional.of(castingValue.map((elementcastingValue) -> elementcastingValue.value(Integer.class)));
              }
            }
          }
          callback.onSuccess(nullableIntWasNull, nullableIntValue, optionalIntWasPresent, optionalIntValue, nullableOptionalIntWasPresent, nullableOptionalIntWasNull, nullableOptionalIntValue, nullableStringWasNull, nullableStringValue, optionalStringWasPresent, optionalStringValue, nullableOptionalStringWasPresent, nullableOptionalStringWasNull, nullableOptionalStringValue, nullableStructWasNull, nullableStructValue, optionalStructWasPresent, optionalStructValue, nullableOptionalStructWasPresent, nullableOptionalStructWasNull, nullableOptionalStructValue, nullableListWasNull, nullableListValue, optionalListWasPresent, optionalListValue, nullableOptionalListWasPresent, nullableOptionalListWasNull, nullableOptionalListValue);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void simpleStructEchoRequest(SimpleStructResponseCallback callback, ChipStructs.UnitTestingClusterSimpleStruct arg1) {
      simpleStructEchoRequest(callback, arg1, 0);
    }

    public void simpleStructEchoRequest(SimpleStructResponseCallback callback, ChipStructs.UnitTestingClusterSimpleStruct arg1, int timedInvokeTimeoutMs) {
      final long commandId = 17L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = arg1.encodeTlv();
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long arg1FieldID = 0L;
          ChipStructs.UnitTestingClusterSimpleStruct arg1 = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == arg1FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.Struct) {
                StructType castingValue = element.value(StructType.class);
                arg1 = ChipStructs.UnitTestingClusterSimpleStruct.decodeTlv(castingValue);
              }
            }
          }
          callback.onSuccess(arg1);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }


    public void timedInvokeRequest(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 18L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testSimpleOptionalArgumentRequest(DefaultClusterCallback callback, Optional<Boolean> arg1) {
      testSimpleOptionalArgumentRequest(callback, arg1, 0);
    }

    public void testSimpleOptionalArgumentRequest(DefaultClusterCallback callback, Optional<Boolean> arg1, int timedInvokeTimeoutMs) {
      final long commandId = 19L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = arg1.<BaseTLVType>map((nonOptionalarg1) -> new BooleanType(nonOptionalarg1)).orElse(new EmptyType());
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testEmitTestEventRequest(TestEmitTestEventResponseCallback callback, Integer arg1, Integer arg2, Boolean arg3) {
      testEmitTestEventRequest(callback, arg1, arg2, arg3, 0);
    }

    public void testEmitTestEventRequest(TestEmitTestEventResponseCallback callback, Integer arg1, Integer arg2, Boolean arg3, int timedInvokeTimeoutMs) {
      final long commandId = 20L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = new UIntType(arg1);
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      final long arg2FieldID = 1L;
      BaseTLVType arg2tlvValue = new UIntType(arg2);
      elements.add(new StructElement(arg2FieldID, arg2tlvValue));

      final long arg3FieldID = 2L;
      BaseTLVType arg3tlvValue = new BooleanType(arg3);
      elements.add(new StructElement(arg3FieldID, arg3tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long valueFieldID = 0L;
          Long value = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                value = castingValue.value(Long.class);
              }
            }
          }
          callback.onSuccess(value);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testEmitTestFabricScopedEventRequest(TestEmitTestFabricScopedEventResponseCallback callback, Integer arg1) {
      testEmitTestFabricScopedEventRequest(callback, arg1, 0);
    }

    public void testEmitTestFabricScopedEventRequest(TestEmitTestFabricScopedEventResponseCallback callback, Integer arg1, int timedInvokeTimeoutMs) {
      final long commandId = 21L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = new UIntType(arg1);
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long valueFieldID = 0L;
          Long value = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == valueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                value = castingValue.value(Long.class);
              }
            }
          }
          callback.onSuccess(value);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testBatchHelperRequest(TestBatchHelperResponseCallback callback, Integer sleepBeforeResponseTimeMs, Integer sizeOfResponseBuffer, Integer fillCharacter) {
      testBatchHelperRequest(callback, sleepBeforeResponseTimeMs, sizeOfResponseBuffer, fillCharacter, 0);
    }

    public void testBatchHelperRequest(TestBatchHelperResponseCallback callback, Integer sleepBeforeResponseTimeMs, Integer sizeOfResponseBuffer, Integer fillCharacter, int timedInvokeTimeoutMs) {
      final long commandId = 22L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long sleepBeforeResponseTimeMsFieldID = 0L;
      BaseTLVType sleepBeforeResponseTimeMstlvValue = new UIntType(sleepBeforeResponseTimeMs);
      elements.add(new StructElement(sleepBeforeResponseTimeMsFieldID, sleepBeforeResponseTimeMstlvValue));

      final long sizeOfResponseBufferFieldID = 1L;
      BaseTLVType sizeOfResponseBuffertlvValue = new UIntType(sizeOfResponseBuffer);
      elements.add(new StructElement(sizeOfResponseBufferFieldID, sizeOfResponseBuffertlvValue));

      final long fillCharacterFieldID = 2L;
      BaseTLVType fillCharactertlvValue = new UIntType(fillCharacter);
      elements.add(new StructElement(fillCharacterFieldID, fillCharactertlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long bufferFieldID = 0L;
          byte[] buffer = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == bufferFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                buffer = castingValue.value(byte[].class);
              }
            }
          }
          callback.onSuccess(buffer);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testSecondBatchHelperRequest(TestBatchHelperResponseCallback callback, Integer sleepBeforeResponseTimeMs, Integer sizeOfResponseBuffer, Integer fillCharacter) {
      testSecondBatchHelperRequest(callback, sleepBeforeResponseTimeMs, sizeOfResponseBuffer, fillCharacter, 0);
    }

    public void testSecondBatchHelperRequest(TestBatchHelperResponseCallback callback, Integer sleepBeforeResponseTimeMs, Integer sizeOfResponseBuffer, Integer fillCharacter, int timedInvokeTimeoutMs) {
      final long commandId = 23L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long sleepBeforeResponseTimeMsFieldID = 0L;
      BaseTLVType sleepBeforeResponseTimeMstlvValue = new UIntType(sleepBeforeResponseTimeMs);
      elements.add(new StructElement(sleepBeforeResponseTimeMsFieldID, sleepBeforeResponseTimeMstlvValue));

      final long sizeOfResponseBufferFieldID = 1L;
      BaseTLVType sizeOfResponseBuffertlvValue = new UIntType(sizeOfResponseBuffer);
      elements.add(new StructElement(sizeOfResponseBufferFieldID, sizeOfResponseBuffertlvValue));

      final long fillCharacterFieldID = 2L;
      BaseTLVType fillCharactertlvValue = new UIntType(fillCharacter);
      elements.add(new StructElement(fillCharacterFieldID, fillCharactertlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long bufferFieldID = 0L;
          byte[] buffer = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == bufferFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.ByteArray) {
                ByteArrayType castingValue = element.value(ByteArrayType.class);
                buffer = castingValue.value(byte[].class);
              }
            }
          }
          callback.onSuccess(buffer);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void testDifferentVendorMeiRequest(TestDifferentVendorMeiResponseCallback callback, Integer arg1) {
      testDifferentVendorMeiRequest(callback, arg1, 0);
    }

    public void testDifferentVendorMeiRequest(TestDifferentVendorMeiResponseCallback callback, Integer arg1, int timedInvokeTimeoutMs) {
      final long commandId = 4294049962L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = new UIntType(arg1);
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long arg1FieldID = 0L;
          Integer arg1 = null;
          final long eventNumberFieldID = 1L;
          Long eventNumber = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == arg1FieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                arg1 = castingValue.value(Integer.class);
              }
            } else if (element.contextTagNum() == eventNumberFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                eventNumber = castingValue.value(Long.class);
              }
            }
          }
          callback.onSuccess(arg1, eventNumber);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface TestSpecificResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer returnValue);
    }

    public interface TestAddArgumentsResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer returnValue);
    }

    public interface TestSimpleArgumentResponseCallback extends BaseClusterCallback {
      void onSuccess(Boolean returnValue);
    }

    public interface TestStructArrayArgumentResponseCallback extends BaseClusterCallback {
      void onSuccess(ArrayList<ChipStructs.UnitTestingClusterNestedStructList> arg1, ArrayList<ChipStructs.UnitTestingClusterSimpleStruct> arg2, ArrayList<Integer> arg3, ArrayList<Boolean> arg4, Integer arg5, Boolean arg6);
    }

    public interface BooleanResponseCallback extends BaseClusterCallback {
      void onSuccess(Boolean value);
    }

    public interface TestListInt8UReverseResponseCallback extends BaseClusterCallback {
      void onSuccess(ArrayList<Integer> arg1);
    }

    public interface TestEnumsResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer arg1, Integer arg2);
    }

    public interface TestNullableOptionalResponseCallback extends BaseClusterCallback {
      void onSuccess(Boolean wasPresent, Optional<Boolean> wasNull, Optional<Integer> value, @Nullable Optional<Integer> originalValue);
    }

    public interface TestComplexNullableOptionalResponseCallback extends BaseClusterCallback {
      void onSuccess(Boolean nullableIntWasNull, Optional<Integer> nullableIntValue, Boolean optionalIntWasPresent, Optional<Integer> optionalIntValue, Boolean nullableOptionalIntWasPresent, Optional<Boolean> nullableOptionalIntWasNull, Optional<Integer> nullableOptionalIntValue, Boolean nullableStringWasNull, Optional<String> nullableStringValue, Boolean optionalStringWasPresent, Optional<String> optionalStringValue, Boolean nullableOptionalStringWasPresent, Optional<Boolean> nullableOptionalStringWasNull, Optional<String> nullableOptionalStringValue, Boolean nullableStructWasNull, Optional<ChipStructs.UnitTestingClusterSimpleStruct> nullableStructValue, Boolean optionalStructWasPresent, Optional<ChipStructs.UnitTestingClusterSimpleStruct> optionalStructValue, Boolean nullableOptionalStructWasPresent, Optional<Boolean> nullableOptionalStructWasNull, Optional<ChipStructs.UnitTestingClusterSimpleStruct> nullableOptionalStructValue, Boolean nullableListWasNull, Optional<ArrayList<Integer>> nullableListValue, Boolean optionalListWasPresent, Optional<ArrayList<Integer>> optionalListValue, Boolean nullableOptionalListWasPresent, Optional<Boolean> nullableOptionalListWasNull, Optional<ArrayList<Integer>> nullableOptionalListValue);
    }

    public interface SimpleStructResponseCallback extends BaseClusterCallback {
      void onSuccess(ChipStructs.UnitTestingClusterSimpleStruct arg1);
    }

    public interface TestEmitTestEventResponseCallback extends BaseClusterCallback {
      void onSuccess(Long value);
    }

    public interface TestEmitTestFabricScopedEventResponseCallback extends BaseClusterCallback {
      void onSuccess(Long value);
    }

    public interface TestBatchHelperResponseCallback extends BaseClusterCallback {
      void onSuccess(byte[] buffer);
    }

    public interface TestDifferentVendorMeiResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer arg1, Long eventNumber);
    }

    public interface ListInt8uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Integer> value);
    }

    public interface ListOctetStringAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<byte[]> value);
    }

    public interface ListStructOctetStringAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.UnitTestingClusterTestListStructOctet> value);
    }

    public interface ListNullablesAndOptionalsStructAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.UnitTestingClusterNullablesAndOptionalsStruct> value);
    }

    public interface StructAttrAttributeCallback extends BaseAttributeCallback {
      void onSuccess(ChipStructs.UnitTestingClusterSimpleStruct value);
    }

    public interface ListLongOctetStringAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<byte[]> value);
    }

    public interface ListFabricScopedAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<ChipStructs.UnitTestingClusterTestFabricScoped> value);
    }

    public interface NullableBooleanAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Boolean value);
    }

    public interface NullableBitmap8AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableBitmap16AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableBitmap32AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableBitmap64AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt8uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableInt16uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableInt24uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt32uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt40uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt48uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt56uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt64uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt8sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableInt16sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableInt24sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt32sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt40sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt48sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt56sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableInt64sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Long value);
    }

    public interface NullableEnum8AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableEnum16AttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableFloatSingleAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Float value);
    }

    public interface NullableFloatDoubleAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Double value);
    }

    public interface NullableOctetStringAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable byte[] value);
    }

    public interface NullableCharStringAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable String value);
    }

    public interface NullableEnumAttrAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableStructAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable ChipStructs.UnitTestingClusterSimpleStruct value);
    }

    public interface NullableRangeRestrictedInt8uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableRangeRestrictedInt8sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableRangeRestrictedInt16uAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface NullableRangeRestrictedInt16sAttributeCallback extends BaseAttributeCallback {
      void onSuccess(@Nullable Integer value);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readBooleanAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BOOLEAN_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BOOLEAN_ATTRIBUTE_ID, true);
    }

    public void writeBooleanAttribute(DefaultClusterCallback callback, Boolean value) {
      writeBooleanAttribute(callback, value, 0);
    }

    public void writeBooleanAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), BOOLEAN_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBooleanAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BOOLEAN_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BOOLEAN_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBitmap8Attribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BITMAP8_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BITMAP8_ATTRIBUTE_ID, true);
    }

    public void writeBitmap8Attribute(DefaultClusterCallback callback, Integer value) {
      writeBitmap8Attribute(callback, value, 0);
    }

    public void writeBitmap8Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), BITMAP8_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBitmap8Attribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BITMAP8_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BITMAP8_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBitmap16Attribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BITMAP16_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BITMAP16_ATTRIBUTE_ID, true);
    }

    public void writeBitmap16Attribute(DefaultClusterCallback callback, Integer value) {
      writeBitmap16Attribute(callback, value, 0);
    }

    public void writeBitmap16Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), BITMAP16_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBitmap16Attribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BITMAP16_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BITMAP16_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBitmap32Attribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BITMAP32_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BITMAP32_ATTRIBUTE_ID, true);
    }

    public void writeBitmap32Attribute(DefaultClusterCallback callback, Long value) {
      writeBitmap32Attribute(callback, value, 0);
    }

    public void writeBitmap32Attribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), BITMAP32_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBitmap32Attribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BITMAP32_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BITMAP32_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readBitmap64Attribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BITMAP64_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BITMAP64_ATTRIBUTE_ID, true);
    }

    public void writeBitmap64Attribute(DefaultClusterCallback callback, Long value) {
      writeBitmap64Attribute(callback, value, 0);
    }

    public void writeBitmap64Attribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), BITMAP64_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeBitmap64Attribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, BITMAP64_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, BITMAP64_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInt8uAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT8U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT8U_ATTRIBUTE_ID, true);
    }

    public void writeInt8uAttribute(DefaultClusterCallback callback, Integer value) {
      writeInt8uAttribute(callback, value, 0);
    }

    public void writeInt8uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INT8U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt8uAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT8U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT8U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInt16uAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT16U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT16U_ATTRIBUTE_ID, true);
    }

    public void writeInt16uAttribute(DefaultClusterCallback callback, Integer value) {
      writeInt16uAttribute(callback, value, 0);
    }

    public void writeInt16uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INT16U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt16uAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT16U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT16U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInt24uAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT24U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT24U_ATTRIBUTE_ID, true);
    }

    public void writeInt24uAttribute(DefaultClusterCallback callback, Long value) {
      writeInt24uAttribute(callback, value, 0);
    }

    public void writeInt24uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INT24U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt24uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT24U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT24U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInt32uAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT32U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT32U_ATTRIBUTE_ID, true);
    }

    public void writeInt32uAttribute(DefaultClusterCallback callback, Long value) {
      writeInt32uAttribute(callback, value, 0);
    }

    public void writeInt32uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INT32U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt32uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT32U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT32U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInt40uAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT40U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT40U_ATTRIBUTE_ID, true);
    }

    public void writeInt40uAttribute(DefaultClusterCallback callback, Long value) {
      writeInt40uAttribute(callback, value, 0);
    }

    public void writeInt40uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INT40U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt40uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT40U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT40U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInt48uAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT48U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT48U_ATTRIBUTE_ID, true);
    }

    public void writeInt48uAttribute(DefaultClusterCallback callback, Long value) {
      writeInt48uAttribute(callback, value, 0);
    }

    public void writeInt48uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INT48U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt48uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT48U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT48U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInt56uAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT56U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT56U_ATTRIBUTE_ID, true);
    }

    public void writeInt56uAttribute(DefaultClusterCallback callback, Long value) {
      writeInt56uAttribute(callback, value, 0);
    }

    public void writeInt56uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INT56U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt56uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT56U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT56U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInt64uAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT64U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT64U_ATTRIBUTE_ID, true);
    }

    public void writeInt64uAttribute(DefaultClusterCallback callback, Long value) {
      writeInt64uAttribute(callback, value, 0);
    }

    public void writeInt64uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INT64U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt64uAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT64U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT64U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInt8sAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT8S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT8S_ATTRIBUTE_ID, true);
    }

    public void writeInt8sAttribute(DefaultClusterCallback callback, Integer value) {
      writeInt8sAttribute(callback, value, 0);
    }

    public void writeInt8sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INT8S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt8sAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT8S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT8S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInt16sAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT16S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT16S_ATTRIBUTE_ID, true);
    }

    public void writeInt16sAttribute(DefaultClusterCallback callback, Integer value) {
      writeInt16sAttribute(callback, value, 0);
    }

    public void writeInt16sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INT16S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt16sAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT16S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT16S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInt24sAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT24S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT24S_ATTRIBUTE_ID, true);
    }

    public void writeInt24sAttribute(DefaultClusterCallback callback, Long value) {
      writeInt24sAttribute(callback, value, 0);
    }

    public void writeInt24sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INT24S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt24sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT24S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT24S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInt32sAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT32S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT32S_ATTRIBUTE_ID, true);
    }

    public void writeInt32sAttribute(DefaultClusterCallback callback, Long value) {
      writeInt32sAttribute(callback, value, 0);
    }

    public void writeInt32sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INT32S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt32sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT32S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT32S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInt40sAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT40S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT40S_ATTRIBUTE_ID, true);
    }

    public void writeInt40sAttribute(DefaultClusterCallback callback, Long value) {
      writeInt40sAttribute(callback, value, 0);
    }

    public void writeInt40sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INT40S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt40sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT40S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT40S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInt48sAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT48S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT48S_ATTRIBUTE_ID, true);
    }

    public void writeInt48sAttribute(DefaultClusterCallback callback, Long value) {
      writeInt48sAttribute(callback, value, 0);
    }

    public void writeInt48sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INT48S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt48sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT48S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT48S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInt56sAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT56S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT56S_ATTRIBUTE_ID, true);
    }

    public void writeInt56sAttribute(DefaultClusterCallback callback, Long value) {
      writeInt56sAttribute(callback, value, 0);
    }

    public void writeInt56sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INT56S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt56sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT56S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT56S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readInt64sAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT64S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT64S_ATTRIBUTE_ID, true);
    }

    public void writeInt64sAttribute(DefaultClusterCallback callback, Long value) {
      writeInt64sAttribute(callback, value, 0);
    }

    public void writeInt64sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), INT64S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeInt64sAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, INT64S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, INT64S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEnum8Attribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENUM8_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENUM8_ATTRIBUTE_ID, true);
    }

    public void writeEnum8Attribute(DefaultClusterCallback callback, Integer value) {
      writeEnum8Attribute(callback, value, 0);
    }

    public void writeEnum8Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), ENUM8_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEnum8Attribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENUM8_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENUM8_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEnum16Attribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENUM16_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENUM16_ATTRIBUTE_ID, true);
    }

    public void writeEnum16Attribute(DefaultClusterCallback callback, Integer value) {
      writeEnum16Attribute(callback, value, 0);
    }

    public void writeEnum16Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), ENUM16_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEnum16Attribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENUM16_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENUM16_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFloatSingleAttribute(
        FloatAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FLOAT_SINGLE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FLOAT_SINGLE_ATTRIBUTE_ID, true);
    }

    public void writeFloatSingleAttribute(DefaultClusterCallback callback, Float value) {
      writeFloatSingleAttribute(callback, value, 0);
    }

    public void writeFloatSingleAttribute(DefaultClusterCallback callback, Float value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new FloatType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), FLOAT_SINGLE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeFloatSingleAttribute(
        FloatAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FLOAT_SINGLE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FLOAT_SINGLE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFloatDoubleAttribute(
        DoubleAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FLOAT_DOUBLE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Double value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FLOAT_DOUBLE_ATTRIBUTE_ID, true);
    }

    public void writeFloatDoubleAttribute(DefaultClusterCallback callback, Double value) {
      writeFloatDoubleAttribute(callback, value, 0);
    }

    public void writeFloatDoubleAttribute(DefaultClusterCallback callback, Double value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new DoubleType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), FLOAT_DOUBLE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeFloatDoubleAttribute(
        DoubleAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FLOAT_DOUBLE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Double value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FLOAT_DOUBLE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readOctetStringAttribute(
        OctetStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCTET_STRING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCTET_STRING_ATTRIBUTE_ID, true);
    }

    public void writeOctetStringAttribute(DefaultClusterCallback callback, byte[] value) {
      writeOctetStringAttribute(callback, value, 0);
    }

    public void writeOctetStringAttribute(DefaultClusterCallback callback, byte[] value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new ByteArrayType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), OCTET_STRING_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeOctetStringAttribute(
        OctetStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, OCTET_STRING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, OCTET_STRING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readListInt8uAttribute(
        ListInt8uAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIST_INT8U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIST_INT8U_ATTRIBUTE_ID, true);
    }

    public void writeListInt8uAttribute(DefaultClusterCallback callback, ArrayList<Integer> value) {
      writeListInt8uAttribute(callback, value, 0);
    }

    public void writeListInt8uAttribute(DefaultClusterCallback callback, ArrayList<Integer> value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> new UIntType(elementvalue));
      writeAttribute(new WriteAttributesCallbackImpl(callback), LIST_INT8U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeListInt8uAttribute(
        ListInt8uAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIST_INT8U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Integer> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIST_INT8U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readListOctetStringAttribute(
        ListOctetStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIST_OCTET_STRING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIST_OCTET_STRING_ATTRIBUTE_ID, true);
    }

    public void writeListOctetStringAttribute(DefaultClusterCallback callback, ArrayList<byte[]> value) {
      writeListOctetStringAttribute(callback, value, 0);
    }

    public void writeListOctetStringAttribute(DefaultClusterCallback callback, ArrayList<byte[]> value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> new ByteArrayType(elementvalue));
      writeAttribute(new WriteAttributesCallbackImpl(callback), LIST_OCTET_STRING_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeListOctetStringAttribute(
        ListOctetStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIST_OCTET_STRING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIST_OCTET_STRING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readListStructOctetStringAttribute(
        ListStructOctetStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIST_STRUCT_OCTET_STRING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UnitTestingClusterTestListStructOctet> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIST_STRUCT_OCTET_STRING_ATTRIBUTE_ID, true);
    }

    public void writeListStructOctetStringAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterTestListStructOctet> value) {
      writeListStructOctetStringAttribute(callback, value, 0);
    }

    public void writeListStructOctetStringAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterTestListStructOctet> value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), LIST_STRUCT_OCTET_STRING_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeListStructOctetStringAttribute(
        ListStructOctetStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIST_STRUCT_OCTET_STRING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UnitTestingClusterTestListStructOctet> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIST_STRUCT_OCTET_STRING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLongOctetStringAttribute(
        OctetStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LONG_OCTET_STRING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LONG_OCTET_STRING_ATTRIBUTE_ID, true);
    }

    public void writeLongOctetStringAttribute(DefaultClusterCallback callback, byte[] value) {
      writeLongOctetStringAttribute(callback, value, 0);
    }

    public void writeLongOctetStringAttribute(DefaultClusterCallback callback, byte[] value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new ByteArrayType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), LONG_OCTET_STRING_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLongOctetStringAttribute(
        OctetStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LONG_OCTET_STRING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LONG_OCTET_STRING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readCharStringAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHAR_STRING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHAR_STRING_ATTRIBUTE_ID, true);
    }

    public void writeCharStringAttribute(DefaultClusterCallback callback, String value) {
      writeCharStringAttribute(callback, value, 0);
    }

    public void writeCharStringAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), CHAR_STRING_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeCharStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CHAR_STRING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CHAR_STRING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readLongCharStringAttribute(
        CharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LONG_CHAR_STRING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LONG_CHAR_STRING_ATTRIBUTE_ID, true);
    }

    public void writeLongCharStringAttribute(DefaultClusterCallback callback, String value) {
      writeLongCharStringAttribute(callback, value, 0);
    }

    public void writeLongCharStringAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new StringType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), LONG_CHAR_STRING_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeLongCharStringAttribute(
        CharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LONG_CHAR_STRING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LONG_CHAR_STRING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEpochUsAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EPOCH_US_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EPOCH_US_ATTRIBUTE_ID, true);
    }

    public void writeEpochUsAttribute(DefaultClusterCallback callback, Long value) {
      writeEpochUsAttribute(callback, value, 0);
    }

    public void writeEpochUsAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), EPOCH_US_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEpochUsAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EPOCH_US_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EPOCH_US_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEpochSAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EPOCH_S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EPOCH_S_ATTRIBUTE_ID, true);
    }

    public void writeEpochSAttribute(DefaultClusterCallback callback, Long value) {
      writeEpochSAttribute(callback, value, 0);
    }

    public void writeEpochSAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), EPOCH_S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEpochSAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EPOCH_S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EPOCH_S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readVendorIdAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VENDOR_ID_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VENDOR_ID_ATTRIBUTE_ID, true);
    }

    public void writeVendorIdAttribute(DefaultClusterCallback callback, Integer value) {
      writeVendorIdAttribute(callback, value, 0);
    }

    public void writeVendorIdAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), VENDOR_ID_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeVendorIdAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, VENDOR_ID_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, VENDOR_ID_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readListNullablesAndOptionalsStructAttribute(
        ListNullablesAndOptionalsStructAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIST_NULLABLES_AND_OPTIONALS_STRUCT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UnitTestingClusterNullablesAndOptionalsStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIST_NULLABLES_AND_OPTIONALS_STRUCT_ATTRIBUTE_ID, true);
    }

    public void writeListNullablesAndOptionalsStructAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterNullablesAndOptionalsStruct> value) {
      writeListNullablesAndOptionalsStructAttribute(callback, value, 0);
    }

    public void writeListNullablesAndOptionalsStructAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterNullablesAndOptionalsStruct> value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), LIST_NULLABLES_AND_OPTIONALS_STRUCT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeListNullablesAndOptionalsStructAttribute(
        ListNullablesAndOptionalsStructAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIST_NULLABLES_AND_OPTIONALS_STRUCT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UnitTestingClusterNullablesAndOptionalsStruct> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIST_NULLABLES_AND_OPTIONALS_STRUCT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEnumAttrAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENUM_ATTR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENUM_ATTR_ATTRIBUTE_ID, true);
    }

    public void writeEnumAttrAttribute(DefaultClusterCallback callback, Integer value) {
      writeEnumAttrAttribute(callback, value, 0);
    }

    public void writeEnumAttrAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), ENUM_ATTR_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeEnumAttrAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ENUM_ATTR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ENUM_ATTR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readStructAttrAttribute(
        StructAttrAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STRUCT_ATTR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.UnitTestingClusterSimpleStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STRUCT_ATTR_ATTRIBUTE_ID, true);
    }

    public void writeStructAttrAttribute(DefaultClusterCallback callback, ChipStructs.UnitTestingClusterSimpleStruct value) {
      writeStructAttrAttribute(callback, value, 0);
    }

    public void writeStructAttrAttribute(DefaultClusterCallback callback, ChipStructs.UnitTestingClusterSimpleStruct value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value.encodeTlv();
      writeAttribute(new WriteAttributesCallbackImpl(callback), STRUCT_ATTR_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeStructAttrAttribute(
        StructAttrAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, STRUCT_ATTR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            ChipStructs.UnitTestingClusterSimpleStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, STRUCT_ATTR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRangeRestrictedInt8uAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RANGE_RESTRICTED_INT8U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RANGE_RESTRICTED_INT8U_ATTRIBUTE_ID, true);
    }

    public void writeRangeRestrictedInt8uAttribute(DefaultClusterCallback callback, Integer value) {
      writeRangeRestrictedInt8uAttribute(callback, value, 0);
    }

    public void writeRangeRestrictedInt8uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), RANGE_RESTRICTED_INT8U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRangeRestrictedInt8uAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RANGE_RESTRICTED_INT8U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RANGE_RESTRICTED_INT8U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRangeRestrictedInt8sAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RANGE_RESTRICTED_INT8S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RANGE_RESTRICTED_INT8S_ATTRIBUTE_ID, true);
    }

    public void writeRangeRestrictedInt8sAttribute(DefaultClusterCallback callback, Integer value) {
      writeRangeRestrictedInt8sAttribute(callback, value, 0);
    }

    public void writeRangeRestrictedInt8sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), RANGE_RESTRICTED_INT8S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRangeRestrictedInt8sAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RANGE_RESTRICTED_INT8S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RANGE_RESTRICTED_INT8S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRangeRestrictedInt16uAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RANGE_RESTRICTED_INT16U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RANGE_RESTRICTED_INT16U_ATTRIBUTE_ID, true);
    }

    public void writeRangeRestrictedInt16uAttribute(DefaultClusterCallback callback, Integer value) {
      writeRangeRestrictedInt16uAttribute(callback, value, 0);
    }

    public void writeRangeRestrictedInt16uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), RANGE_RESTRICTED_INT16U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRangeRestrictedInt16uAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RANGE_RESTRICTED_INT16U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RANGE_RESTRICTED_INT16U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readRangeRestrictedInt16sAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RANGE_RESTRICTED_INT16S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RANGE_RESTRICTED_INT16S_ATTRIBUTE_ID, true);
    }

    public void writeRangeRestrictedInt16sAttribute(DefaultClusterCallback callback, Integer value) {
      writeRangeRestrictedInt16sAttribute(callback, value, 0);
    }

    public void writeRangeRestrictedInt16sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new IntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), RANGE_RESTRICTED_INT16S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeRangeRestrictedInt16sAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, RANGE_RESTRICTED_INT16S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, RANGE_RESTRICTED_INT16S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readListLongOctetStringAttribute(
        ListLongOctetStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIST_LONG_OCTET_STRING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIST_LONG_OCTET_STRING_ATTRIBUTE_ID, true);
    }

    public void writeListLongOctetStringAttribute(DefaultClusterCallback callback, ArrayList<byte[]> value) {
      writeListLongOctetStringAttribute(callback, value, 0);
    }

    public void writeListLongOctetStringAttribute(DefaultClusterCallback callback, ArrayList<byte[]> value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> new ByteArrayType(elementvalue));
      writeAttribute(new WriteAttributesCallbackImpl(callback), LIST_LONG_OCTET_STRING_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeListLongOctetStringAttribute(
        ListLongOctetStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIST_LONG_OCTET_STRING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<byte[]> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIST_LONG_OCTET_STRING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readListFabricScopedAttribute(
        ListFabricScopedAttributeCallback callback) {
      readListFabricScopedAttributeWithFabricFilter(callback, true);
    }

    public void readListFabricScopedAttributeWithFabricFilter(
        ListFabricScopedAttributeCallback callback, boolean isFabricFiltered) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIST_FABRIC_SCOPED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UnitTestingClusterTestFabricScoped> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIST_FABRIC_SCOPED_ATTRIBUTE_ID, isFabricFiltered);
    }

    public void writeListFabricScopedAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterTestFabricScoped> value) {
      writeListFabricScopedAttribute(callback, value, 0);
    }

    public void writeListFabricScopedAttribute(DefaultClusterCallback callback, ArrayList<ChipStructs.UnitTestingClusterTestFabricScoped> value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = ArrayType.generateArrayType(value, (elementvalue) -> elementvalue.encodeTlv());
      writeAttribute(new WriteAttributesCallbackImpl(callback), LIST_FABRIC_SCOPED_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeListFabricScopedAttribute(
        ListFabricScopedAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, LIST_FABRIC_SCOPED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<ChipStructs.UnitTestingClusterTestFabricScoped> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, LIST_FABRIC_SCOPED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readTimedWriteBooleanAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TIMED_WRITE_BOOLEAN_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TIMED_WRITE_BOOLEAN_ATTRIBUTE_ID, true);
    }

    public void writeTimedWriteBooleanAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), TIMED_WRITE_BOOLEAN_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeTimedWriteBooleanAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, TIMED_WRITE_BOOLEAN_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, TIMED_WRITE_BOOLEAN_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneralErrorBooleanAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERAL_ERROR_BOOLEAN_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERAL_ERROR_BOOLEAN_ATTRIBUTE_ID, true);
    }

    public void writeGeneralErrorBooleanAttribute(DefaultClusterCallback callback, Boolean value) {
      writeGeneralErrorBooleanAttribute(callback, value, 0);
    }

    public void writeGeneralErrorBooleanAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), GENERAL_ERROR_BOOLEAN_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeGeneralErrorBooleanAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERAL_ERROR_BOOLEAN_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERAL_ERROR_BOOLEAN_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterErrorBooleanAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_ERROR_BOOLEAN_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_ERROR_BOOLEAN_ATTRIBUTE_ID, true);
    }

    public void writeClusterErrorBooleanAttribute(DefaultClusterCallback callback, Boolean value) {
      writeClusterErrorBooleanAttribute(callback, value, 0);
    }

    public void writeClusterErrorBooleanAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), CLUSTER_ERROR_BOOLEAN_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeClusterErrorBooleanAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_ERROR_BOOLEAN_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_ERROR_BOOLEAN_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readUnsupportedAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNSUPPORTED_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNSUPPORTED_ATTRIBUTE_ID, true);
    }

    public void writeUnsupportedAttribute(DefaultClusterCallback callback, Boolean value) {
      writeUnsupportedAttribute(callback, value, 0);
    }

    public void writeUnsupportedAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), UNSUPPORTED_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeUnsupportedAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, UNSUPPORTED_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, UNSUPPORTED_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableBooleanAttribute(
        NullableBooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_BOOLEAN_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_BOOLEAN_ATTRIBUTE_ID, true);
    }

    public void writeNullableBooleanAttribute(DefaultClusterCallback callback, Boolean value) {
      writeNullableBooleanAttribute(callback, value, 0);
    }

    public void writeNullableBooleanAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new BooleanType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_BOOLEAN_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableBooleanAttribute(
        NullableBooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_BOOLEAN_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_BOOLEAN_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableBitmap8Attribute(
        NullableBitmap8AttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_BITMAP8_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_BITMAP8_ATTRIBUTE_ID, true);
    }

    public void writeNullableBitmap8Attribute(DefaultClusterCallback callback, Integer value) {
      writeNullableBitmap8Attribute(callback, value, 0);
    }

    public void writeNullableBitmap8Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_BITMAP8_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableBitmap8Attribute(
        NullableBitmap8AttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_BITMAP8_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_BITMAP8_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableBitmap16Attribute(
        NullableBitmap16AttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_BITMAP16_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_BITMAP16_ATTRIBUTE_ID, true);
    }

    public void writeNullableBitmap16Attribute(DefaultClusterCallback callback, Integer value) {
      writeNullableBitmap16Attribute(callback, value, 0);
    }

    public void writeNullableBitmap16Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_BITMAP16_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableBitmap16Attribute(
        NullableBitmap16AttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_BITMAP16_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_BITMAP16_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableBitmap32Attribute(
        NullableBitmap32AttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_BITMAP32_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_BITMAP32_ATTRIBUTE_ID, true);
    }

    public void writeNullableBitmap32Attribute(DefaultClusterCallback callback, Long value) {
      writeNullableBitmap32Attribute(callback, value, 0);
    }

    public void writeNullableBitmap32Attribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_BITMAP32_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableBitmap32Attribute(
        NullableBitmap32AttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_BITMAP32_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_BITMAP32_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableBitmap64Attribute(
        NullableBitmap64AttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_BITMAP64_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_BITMAP64_ATTRIBUTE_ID, true);
    }

    public void writeNullableBitmap64Attribute(DefaultClusterCallback callback, Long value) {
      writeNullableBitmap64Attribute(callback, value, 0);
    }

    public void writeNullableBitmap64Attribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_BITMAP64_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableBitmap64Attribute(
        NullableBitmap64AttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_BITMAP64_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_BITMAP64_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableInt8uAttribute(
        NullableInt8uAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT8U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT8U_ATTRIBUTE_ID, true);
    }

    public void writeNullableInt8uAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableInt8uAttribute(callback, value, 0);
    }

    public void writeNullableInt8uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_INT8U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt8uAttribute(
        NullableInt8uAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT8U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT8U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableInt16uAttribute(
        NullableInt16uAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT16U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT16U_ATTRIBUTE_ID, true);
    }

    public void writeNullableInt16uAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableInt16uAttribute(callback, value, 0);
    }

    public void writeNullableInt16uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_INT16U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt16uAttribute(
        NullableInt16uAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT16U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT16U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableInt24uAttribute(
        NullableInt24uAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT24U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT24U_ATTRIBUTE_ID, true);
    }

    public void writeNullableInt24uAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt24uAttribute(callback, value, 0);
    }

    public void writeNullableInt24uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_INT24U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt24uAttribute(
        NullableInt24uAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT24U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT24U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableInt32uAttribute(
        NullableInt32uAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT32U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT32U_ATTRIBUTE_ID, true);
    }

    public void writeNullableInt32uAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt32uAttribute(callback, value, 0);
    }

    public void writeNullableInt32uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_INT32U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt32uAttribute(
        NullableInt32uAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT32U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT32U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableInt40uAttribute(
        NullableInt40uAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT40U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT40U_ATTRIBUTE_ID, true);
    }

    public void writeNullableInt40uAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt40uAttribute(callback, value, 0);
    }

    public void writeNullableInt40uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_INT40U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt40uAttribute(
        NullableInt40uAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT40U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT40U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableInt48uAttribute(
        NullableInt48uAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT48U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT48U_ATTRIBUTE_ID, true);
    }

    public void writeNullableInt48uAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt48uAttribute(callback, value, 0);
    }

    public void writeNullableInt48uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_INT48U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt48uAttribute(
        NullableInt48uAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT48U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT48U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableInt56uAttribute(
        NullableInt56uAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT56U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT56U_ATTRIBUTE_ID, true);
    }

    public void writeNullableInt56uAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt56uAttribute(callback, value, 0);
    }

    public void writeNullableInt56uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_INT56U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt56uAttribute(
        NullableInt56uAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT56U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT56U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableInt64uAttribute(
        NullableInt64uAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT64U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT64U_ATTRIBUTE_ID, true);
    }

    public void writeNullableInt64uAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt64uAttribute(callback, value, 0);
    }

    public void writeNullableInt64uAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_INT64U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt64uAttribute(
        NullableInt64uAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT64U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT64U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableInt8sAttribute(
        NullableInt8sAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT8S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT8S_ATTRIBUTE_ID, true);
    }

    public void writeNullableInt8sAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableInt8sAttribute(callback, value, 0);
    }

    public void writeNullableInt8sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_INT8S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt8sAttribute(
        NullableInt8sAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT8S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT8S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableInt16sAttribute(
        NullableInt16sAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT16S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT16S_ATTRIBUTE_ID, true);
    }

    public void writeNullableInt16sAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableInt16sAttribute(callback, value, 0);
    }

    public void writeNullableInt16sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_INT16S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt16sAttribute(
        NullableInt16sAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT16S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT16S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableInt24sAttribute(
        NullableInt24sAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT24S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT24S_ATTRIBUTE_ID, true);
    }

    public void writeNullableInt24sAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt24sAttribute(callback, value, 0);
    }

    public void writeNullableInt24sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_INT24S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt24sAttribute(
        NullableInt24sAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT24S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT24S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableInt32sAttribute(
        NullableInt32sAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT32S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT32S_ATTRIBUTE_ID, true);
    }

    public void writeNullableInt32sAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt32sAttribute(callback, value, 0);
    }

    public void writeNullableInt32sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_INT32S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt32sAttribute(
        NullableInt32sAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT32S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT32S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableInt40sAttribute(
        NullableInt40sAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT40S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT40S_ATTRIBUTE_ID, true);
    }

    public void writeNullableInt40sAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt40sAttribute(callback, value, 0);
    }

    public void writeNullableInt40sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_INT40S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt40sAttribute(
        NullableInt40sAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT40S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT40S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableInt48sAttribute(
        NullableInt48sAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT48S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT48S_ATTRIBUTE_ID, true);
    }

    public void writeNullableInt48sAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt48sAttribute(callback, value, 0);
    }

    public void writeNullableInt48sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_INT48S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt48sAttribute(
        NullableInt48sAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT48S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT48S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableInt56sAttribute(
        NullableInt56sAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT56S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT56S_ATTRIBUTE_ID, true);
    }

    public void writeNullableInt56sAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt56sAttribute(callback, value, 0);
    }

    public void writeNullableInt56sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_INT56S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt56sAttribute(
        NullableInt56sAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT56S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT56S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableInt64sAttribute(
        NullableInt64sAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT64S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT64S_ATTRIBUTE_ID, true);
    }

    public void writeNullableInt64sAttribute(DefaultClusterCallback callback, Long value) {
      writeNullableInt64sAttribute(callback, value, 0);
    }

    public void writeNullableInt64sAttribute(DefaultClusterCallback callback, Long value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_INT64S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableInt64sAttribute(
        NullableInt64sAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_INT64S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_INT64S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableEnum8Attribute(
        NullableEnum8AttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_ENUM8_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_ENUM8_ATTRIBUTE_ID, true);
    }

    public void writeNullableEnum8Attribute(DefaultClusterCallback callback, Integer value) {
      writeNullableEnum8Attribute(callback, value, 0);
    }

    public void writeNullableEnum8Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_ENUM8_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableEnum8Attribute(
        NullableEnum8AttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_ENUM8_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_ENUM8_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableEnum16Attribute(
        NullableEnum16AttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_ENUM16_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_ENUM16_ATTRIBUTE_ID, true);
    }

    public void writeNullableEnum16Attribute(DefaultClusterCallback callback, Integer value) {
      writeNullableEnum16Attribute(callback, value, 0);
    }

    public void writeNullableEnum16Attribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_ENUM16_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableEnum16Attribute(
        NullableEnum16AttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_ENUM16_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_ENUM16_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableFloatSingleAttribute(
        NullableFloatSingleAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_FLOAT_SINGLE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_FLOAT_SINGLE_ATTRIBUTE_ID, true);
    }

    public void writeNullableFloatSingleAttribute(DefaultClusterCallback callback, Float value) {
      writeNullableFloatSingleAttribute(callback, value, 0);
    }

    public void writeNullableFloatSingleAttribute(DefaultClusterCallback callback, Float value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new FloatType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_FLOAT_SINGLE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableFloatSingleAttribute(
        NullableFloatSingleAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_FLOAT_SINGLE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Float value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_FLOAT_SINGLE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableFloatDoubleAttribute(
        NullableFloatDoubleAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_FLOAT_DOUBLE_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Double value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_FLOAT_DOUBLE_ATTRIBUTE_ID, true);
    }

    public void writeNullableFloatDoubleAttribute(DefaultClusterCallback callback, Double value) {
      writeNullableFloatDoubleAttribute(callback, value, 0);
    }

    public void writeNullableFloatDoubleAttribute(DefaultClusterCallback callback, Double value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new DoubleType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_FLOAT_DOUBLE_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableFloatDoubleAttribute(
        NullableFloatDoubleAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_FLOAT_DOUBLE_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Double value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_FLOAT_DOUBLE_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableOctetStringAttribute(
        NullableOctetStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_OCTET_STRING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_OCTET_STRING_ATTRIBUTE_ID, true);
    }

    public void writeNullableOctetStringAttribute(DefaultClusterCallback callback, byte[] value) {
      writeNullableOctetStringAttribute(callback, value, 0);
    }

    public void writeNullableOctetStringAttribute(DefaultClusterCallback callback, byte[] value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new ByteArrayType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_OCTET_STRING_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableOctetStringAttribute(
        NullableOctetStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_OCTET_STRING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable byte[] value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_OCTET_STRING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableCharStringAttribute(
        NullableCharStringAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_CHAR_STRING_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_CHAR_STRING_ATTRIBUTE_ID, true);
    }

    public void writeNullableCharStringAttribute(DefaultClusterCallback callback, String value) {
      writeNullableCharStringAttribute(callback, value, 0);
    }

    public void writeNullableCharStringAttribute(DefaultClusterCallback callback, String value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new StringType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_CHAR_STRING_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableCharStringAttribute(
        NullableCharStringAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_CHAR_STRING_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable String value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_CHAR_STRING_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableEnumAttrAttribute(
        NullableEnumAttrAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_ENUM_ATTR_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_ENUM_ATTR_ATTRIBUTE_ID, true);
    }

    public void writeNullableEnumAttrAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableEnumAttrAttribute(callback, value, 0);
    }

    public void writeNullableEnumAttrAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_ENUM_ATTR_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableEnumAttrAttribute(
        NullableEnumAttrAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_ENUM_ATTR_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_ENUM_ATTR_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableStructAttribute(
        NullableStructAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_STRUCT_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.UnitTestingClusterSimpleStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_STRUCT_ATTRIBUTE_ID, true);
    }

    public void writeNullableStructAttribute(DefaultClusterCallback callback, ChipStructs.UnitTestingClusterSimpleStruct value) {
      writeNullableStructAttribute(callback, value, 0);
    }

    public void writeNullableStructAttribute(DefaultClusterCallback callback, ChipStructs.UnitTestingClusterSimpleStruct value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? value.encodeTlv() : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_STRUCT_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableStructAttribute(
        NullableStructAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_STRUCT_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable ChipStructs.UnitTestingClusterSimpleStruct value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_STRUCT_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableRangeRestrictedInt8uAttribute(
        NullableRangeRestrictedInt8uAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_RANGE_RESTRICTED_INT8U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_RANGE_RESTRICTED_INT8U_ATTRIBUTE_ID, true);
    }

    public void writeNullableRangeRestrictedInt8uAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableRangeRestrictedInt8uAttribute(callback, value, 0);
    }

    public void writeNullableRangeRestrictedInt8uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_RANGE_RESTRICTED_INT8U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableRangeRestrictedInt8uAttribute(
        NullableRangeRestrictedInt8uAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_RANGE_RESTRICTED_INT8U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_RANGE_RESTRICTED_INT8U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableRangeRestrictedInt8sAttribute(
        NullableRangeRestrictedInt8sAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_RANGE_RESTRICTED_INT8S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_RANGE_RESTRICTED_INT8S_ATTRIBUTE_ID, true);
    }

    public void writeNullableRangeRestrictedInt8sAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableRangeRestrictedInt8sAttribute(callback, value, 0);
    }

    public void writeNullableRangeRestrictedInt8sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_RANGE_RESTRICTED_INT8S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableRangeRestrictedInt8sAttribute(
        NullableRangeRestrictedInt8sAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_RANGE_RESTRICTED_INT8S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_RANGE_RESTRICTED_INT8S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableRangeRestrictedInt16uAttribute(
        NullableRangeRestrictedInt16uAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_RANGE_RESTRICTED_INT16U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_RANGE_RESTRICTED_INT16U_ATTRIBUTE_ID, true);
    }

    public void writeNullableRangeRestrictedInt16uAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableRangeRestrictedInt16uAttribute(callback, value, 0);
    }

    public void writeNullableRangeRestrictedInt16uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new UIntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_RANGE_RESTRICTED_INT16U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableRangeRestrictedInt16uAttribute(
        NullableRangeRestrictedInt16uAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_RANGE_RESTRICTED_INT16U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_RANGE_RESTRICTED_INT16U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readNullableRangeRestrictedInt16sAttribute(
        NullableRangeRestrictedInt16sAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_RANGE_RESTRICTED_INT16S_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_RANGE_RESTRICTED_INT16S_ATTRIBUTE_ID, true);
    }

    public void writeNullableRangeRestrictedInt16sAttribute(DefaultClusterCallback callback, Integer value) {
      writeNullableRangeRestrictedInt16sAttribute(callback, value, 0);
    }

    public void writeNullableRangeRestrictedInt16sAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = value != null ? new IntType(value) : new NullType();
      writeAttribute(new WriteAttributesCallbackImpl(callback), NULLABLE_RANGE_RESTRICTED_INT16S_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeNullableRangeRestrictedInt16sAttribute(
        NullableRangeRestrictedInt16sAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, NULLABLE_RANGE_RESTRICTED_INT16S_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            @Nullable Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, NULLABLE_RANGE_RESTRICTED_INT16S_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readWriteOnlyInt8uAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WRITE_ONLY_INT8U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WRITE_ONLY_INT8U_ATTRIBUTE_ID, true);
    }

    public void writeWriteOnlyInt8uAttribute(DefaultClusterCallback callback, Integer value) {
      writeWriteOnlyInt8uAttribute(callback, value, 0);
    }

    public void writeWriteOnlyInt8uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), WRITE_ONLY_INT8U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeWriteOnlyInt8uAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, WRITE_ONLY_INT8U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, WRITE_ONLY_INT8U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readMeiInt8uAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEI_INT8U_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEI_INT8U_ATTRIBUTE_ID, true);
    }

    public void writeMeiInt8uAttribute(DefaultClusterCallback callback, Integer value) {
      writeMeiInt8uAttribute(callback, value, 0);
    }

    public void writeMeiInt8uAttribute(DefaultClusterCallback callback, Integer value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new UIntType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), MEI_INT8U_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeMeiInt8uAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, MEI_INT8U_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, MEI_INT8U_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class FaultInjectionCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 4294048774L;

    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public FaultInjectionCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void failAtFault(DefaultClusterCallback callback, Integer type, Long id, Long numCallsToSkip, Long numCallsToFail, Boolean takeMutex) {
      failAtFault(callback, type, id, numCallsToSkip, numCallsToFail, takeMutex, 0);
    }

    public void failAtFault(DefaultClusterCallback callback, Integer type, Long id, Long numCallsToSkip, Long numCallsToFail, Boolean takeMutex, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long typeFieldID = 0L;
      BaseTLVType typetlvValue = new UIntType(type);
      elements.add(new StructElement(typeFieldID, typetlvValue));

      final long idFieldID = 1L;
      BaseTLVType idtlvValue = new UIntType(id);
      elements.add(new StructElement(idFieldID, idtlvValue));

      final long numCallsToSkipFieldID = 2L;
      BaseTLVType numCallsToSkiptlvValue = new UIntType(numCallsToSkip);
      elements.add(new StructElement(numCallsToSkipFieldID, numCallsToSkiptlvValue));

      final long numCallsToFailFieldID = 3L;
      BaseTLVType numCallsToFailtlvValue = new UIntType(numCallsToFail);
      elements.add(new StructElement(numCallsToFailFieldID, numCallsToFailtlvValue));

      final long takeMutexFieldID = 4L;
      BaseTLVType takeMutextlvValue = new BooleanType(takeMutex);
      elements.add(new StructElement(takeMutexFieldID, takeMutextlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void failRandomlyAtFault(DefaultClusterCallback callback, Integer type, Long id, Integer percentage) {
      failRandomlyAtFault(callback, type, id, percentage, 0);
    }

    public void failRandomlyAtFault(DefaultClusterCallback callback, Integer type, Long id, Integer percentage, int timedInvokeTimeoutMs) {
      final long commandId = 1L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long typeFieldID = 0L;
      BaseTLVType typetlvValue = new UIntType(type);
      elements.add(new StructElement(typeFieldID, typetlvValue));

      final long idFieldID = 1L;
      BaseTLVType idtlvValue = new UIntType(id);
      elements.add(new StructElement(idFieldID, idtlvValue));

      final long percentageFieldID = 2L;
      BaseTLVType percentagetlvValue = new UIntType(percentage);
      elements.add(new StructElement(percentageFieldID, percentagetlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }

  public static class SampleMeiCluster extends BaseChipCluster {
    public static final long CLUSTER_ID = 4294048800L;

    private static final long FLIP_FLOP_ATTRIBUTE_ID = 0L;
    private static final long GENERATED_COMMAND_LIST_ATTRIBUTE_ID = 65528L;
    private static final long ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID = 65529L;
    private static final long EVENT_LIST_ATTRIBUTE_ID = 65530L;
    private static final long ATTRIBUTE_LIST_ATTRIBUTE_ID = 65531L;
    private static final long FEATURE_MAP_ATTRIBUTE_ID = 65532L;
    private static final long CLUSTER_REVISION_ATTRIBUTE_ID = 65533L;

    public SampleMeiCluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId, CLUSTER_ID);
    }

    @Override
    @Deprecated
    public long initWithDevice(long devicePtr, int endpointId) {
      return 0L;
    }

    public void ping(DefaultClusterCallback callback) {
      ping(callback, 0);
    }

    public void ping(DefaultClusterCallback callback, int timedInvokeTimeoutMs) {
      final long commandId = 0L;

      ArrayList<StructElement> elements = new ArrayList<>();
      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          callback.onSuccess();
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public void addArguments(AddArgumentsResponseCallback callback, Integer arg1, Integer arg2) {
      addArguments(callback, arg1, arg2, 0);
    }

    public void addArguments(AddArgumentsResponseCallback callback, Integer arg1, Integer arg2, int timedInvokeTimeoutMs) {
      final long commandId = 2L;

      ArrayList<StructElement> elements = new ArrayList<>();
      final long arg1FieldID = 0L;
      BaseTLVType arg1tlvValue = new UIntType(arg1);
      elements.add(new StructElement(arg1FieldID, arg1tlvValue));

      final long arg2FieldID = 1L;
      BaseTLVType arg2tlvValue = new UIntType(arg2);
      elements.add(new StructElement(arg2FieldID, arg2tlvValue));

      StructType commandArgs = new StructType(elements);
      invoke(new InvokeCallbackImpl(callback) {
          @Override
          public void onResponse(StructType invokeStructValue) {
          final long returnValueFieldID = 0L;
          Integer returnValue = null;
          for (StructElement element: invokeStructValue.value()) {
            if (element.contextTagNum() == returnValueFieldID) {
              if (element.value(BaseTLVType.class).type() == TLVType.UInt) {
                UIntType castingValue = element.value(UIntType.class);
                returnValue = castingValue.value(Integer.class);
              }
            }
          }
          callback.onSuccess(returnValue);
        }}, commandId, commandArgs, timedInvokeTimeoutMs);
    }

    public interface AddArgumentsResponseCallback extends BaseClusterCallback {
      void onSuccess(Integer returnValue);
    }

    public interface GeneratedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AcceptedCommandListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface EventListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public interface AttributeListAttributeCallback extends BaseAttributeCallback {
      void onSuccess(List<Long> value);
    }

    public void readFlipFlopAttribute(
        BooleanAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FLIP_FLOP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FLIP_FLOP_ATTRIBUTE_ID, true);
    }

    public void writeFlipFlopAttribute(DefaultClusterCallback callback, Boolean value) {
      writeFlipFlopAttribute(callback, value, 0);
    }

    public void writeFlipFlopAttribute(DefaultClusterCallback callback, Boolean value, int timedWriteTimeoutMs) {
      BaseTLVType tlvValue = new BooleanType(value);
      writeAttribute(new WriteAttributesCallbackImpl(callback), FLIP_FLOP_ATTRIBUTE_ID, tlvValue, timedWriteTimeoutMs);
    }

    public void subscribeFlipFlopAttribute(
        BooleanAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FLIP_FLOP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Boolean value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FLIP_FLOP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeGeneratedCommandListAttribute(
        GeneratedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, GENERATED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, GENERATED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAcceptedCommandListAttribute(
        AcceptedCommandListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ACCEPTED_COMMAND_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readEventListAttribute(
        EventListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeEventListAttribute(
        EventListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, EVENT_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, EVENT_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readAttributeListAttribute(
        AttributeListAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, true);
    }

    public void subscribeAttributeListAttribute(
        AttributeListAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, ATTRIBUTE_LIST_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            List<Long> value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, ATTRIBUTE_LIST_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readFeatureMapAttribute(
        LongAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, true);
    }

    public void subscribeFeatureMapAttribute(
        LongAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, FEATURE_MAP_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Long value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, FEATURE_MAP_ATTRIBUTE_ID, minInterval, maxInterval);
    }

    public void readClusterRevisionAttribute(
        IntegerAttributeCallback callback) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      readAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, true);
    }

    public void subscribeClusterRevisionAttribute(
        IntegerAttributeCallback callback, int minInterval, int maxInterval) {
      ChipAttributePath path = ChipAttributePath.newInstance(endpointId, clusterId, CLUSTER_REVISION_ATTRIBUTE_ID);

      subscribeAttribute(new ReportCallbackImpl(callback, path) {
          @Override
          public void onSuccess(byte[] tlv) {
            Integer value = ChipTLVValueDecoder.decodeAttributeValue(path, tlv);
            callback.onSuccess(value);
          }
        }, CLUSTER_REVISION_ATTRIBUTE_ID, minInterval, maxInterval);
    }
  }
}
