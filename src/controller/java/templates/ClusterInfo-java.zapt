{{> header}}
{{#if (chip_has_client_clusters)}}

package chip.devicecontroller;

import java.util.*;
import chip.clusterinfo.ClusterInfo;
import chip.clusterinfo.CommandInfo;
import chip.clusterinfo.CommandParameter;
import chip.clusterinfo.ParameterType;


public class ClusterInfoMapping {

 public Map<String, ClusterInfo> getClusterMap() {
     Map<String, ClusterInfo> clusterInfoMapping = new HashMap<>();
     {{#chip_client_clusters}}
     ClusterInfo {{asLowerCamelCase name}}_clusterInfo = new ClusterInfo("{{asLowerCamelCase name}}");
     {{#chip_cluster_commands}}
           List<CommandParameter> {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_parametersList = new ArrayList<>();
           CommandInfo {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_commandInfo = new CommandInfo();
           {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_commandInfo.name = "{{asLowerCamelCase name}}";
           {{#if (zcl_command_arguments_count this.id)}}
               {{#if hasSpecificResponse}}
                 {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_commandInfo.callbackClass = ChipClusters.{{asUpperCamelCase ../name}}Cluster.{{asUpperCamelCase responseName}}Callback.class;
               {{else}}
                 {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
               {{/if}}
               {{#chip_cluster_command_arguments}}
                 CommandParameter {{asLowerCamelCase ../name}}_{{asLowerCamelCase label}}_commandParameter = new CommandParameter("{{asLowerCamelCase label}}", {{asJavaBasicType type}}.class);
                 {{asLowerCamelCase ../../name}}_{{asLowerCamelCase ../name}}_parametersList.add({{asLowerCamelCase ../name}}_{{asLowerCamelCase label}}_commandParameter);
                 {{#not_last}} {{/not_last}}
               {{/chip_cluster_command_arguments}}
           {{else}}
             {{#if hasSpecificResponse}}
               {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_commandInfo.callbackClass = ChipClusters.{{asUpperCamelCase ../name}}Cluster.{{asUpperCamelCase responseName}}Callback.class;
             {{else}}
               {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_commandInfo.callbackClass = ChipClusters.DefaultClusterCallback.class;
             {{/if}}
           {{/if}}
           {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_commandInfo.parameters = {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_parametersList;
           {{asLowerCamelCase ../name}}_clusterInfo.commands.add({{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_commandInfo);
     {{/chip_cluster_commands}}
     clusterInfoMapping.put("{{asLowerCamelCase name}}", {{asLowerCamelCase name}}_clusterInfo);
     {{/chip_client_clusters}}
     return clusterInfoMapping;
  }
}

{{/if}}
