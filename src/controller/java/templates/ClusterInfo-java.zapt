{{> header}}
{{#if (chip_has_client_clusters)}}

package chip.devicecontroller;

import java.util.*;
import chip.clusterinfo.ClusterInfo;
import chip.clusterinfo.CommandInfo;
import chip.clusterinfo.CommandParameter;
import chip.clusterinfo.ParameterType;
import chip.clusterinfo.DelegatedClusterCallback;
import chip.clusterinfo.ClusterCommandCallback;
import chip.devicecontroller.ChipClusters.DefaultClusterCallback;


public class ClusterInfoMapping {

  class DelegatedDefaultClusterCallback implements DefaultClusterCallback, DelegatedClusterCallback {
    private ClusterCommandCallback callback;

    @Override
    public void setCallbackDelegate(ClusterCommandCallback callback) {
      this.callback = callback;
    }

    // Parameters and list-adds here should be generated - refer to the template code that creates each callback interface.
    @Override
    public void onSuccess() {
      List<Object> responseValues = new ArrayList<>();
      callback.onSuccess(responseValues);
    }

    @Override
    public void onError(Exception e) {
      callback.onFailure(e);
    }
  }
  {{#chip_client_clusters}}
    {{#chip_cluster_responses}}
      public class Delegated{{asUpperCamelCase name}}Callback implements ChipClusters.{{asUpperCamelCase ../name}}Cluster.{{asUpperCamelCase name}}Callback, DelegatedClusterCallback {
        private ClusterCommandCallback callback;

        @Override
        public void setCallbackDelegate(ClusterCommandCallback callback) {
          this.callback = callback;
        }
        @Override
        public void onSuccess(
              {{#chip_cluster_response_arguments}}
              {{#if isArray}}
                  // {{asSymbol label}}: {{asUnderlyingZclType type}}
                  // Conversion from this type to Java is not properly implemented yet
              {{else if (isOctetString type)}}
                  {{omitCommaForFirstNonStatusCommand parent.id index}}byte[] {{asSymbol label}}
              {{else if (isShortString type)}}
                  {{omitCommaForFirstNonStatusCommand parent.id index}}String {{asSymbol label}}
              {{else}}
                  {{omitCommaForFirstNonStatusCommand parent.id index}}{{asJavaBasicTypeForZclType type false}} {{asSymbol label}}
              {{/if}}
              {{/chip_cluster_response_arguments}}
        ) {
            List<Object> responseValues = new ArrayList<>();
            {{#chip_cluster_response_arguments}}
              {{#if isArray}}
                // {{asSymbol label}}: {{asUnderlyingZclType type}}
                // Conversion from this type to Java is not properly implemented yet
              {{else}}
              responseValues.add({{asSymbol label}});
              {{/if}}
            {{/chip_cluster_response_arguments}}
            callback.onSuccess(responseValues);
        }

        @Override
        public void onError(Exception error) {
          callback.onFailure(error);
        }
      }

    {{/chip_cluster_responses}}
 {{/chip_client_clusters}}

 public Map<String, ClusterInfo> getClusterMap() {
     Map<String, ClusterInfo> clusterMap = new HashMap<>();
     {{#chip_client_clusters}}
     Map<String, CommandInfo> {{asLowerCamelCase name}}_ClusterCommandInfo = new HashMap<>();
     {{#chip_cluster_commands}}
           Map<String, CommandParameter> {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_commandParams = new HashMap<String, CommandParameter>();
           // TODO: fill out parameter types
           {{#if (zcl_command_arguments_count this.id)}}
               {{#if hasSpecificResponse}}
                 CommandParameter {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_commandParameter = new CommandParameter("{{asUpperCamelCase ../name}}", ChipClusters.{{asUpperCamelCase ../name}}Cluster.{{asUpperCamelCase responseName}}Callback.class);
               {{else}}
                 CommandParameter {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_commandParameter = new CommandParameter("{{asUpperCamelCase ../name}}", ChipClusters.DefaultClusterCallback.class);
               {{/if}}
               {{#chip_cluster_command_arguments}}
                 CommandParameter {{asLowerCamelCase ../../name}}_{{asLowerCamelCase ../name}}_{{asLowerCamelCase label}}_commandParameter = new CommandParameter("{{asLowerCamelCase label}}", {{asJavaBasicType type}}.class);
                 {{asLowerCamelCase ../../name}}_{{asLowerCamelCase ../name}}_commandParams.put("{{asLowerCamelCase label}}",{{asLowerCamelCase ../../name}}_{{asLowerCamelCase ../name}}_{{asLowerCamelCase label}}_commandParameter);
                 {{#not_last}} {{/not_last}}
               {{/chip_cluster_command_arguments}}
           {{else}}
               {{#if hasSpecificResponse}}
                 CommandParameter {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_commandParameter = new CommandParameter("{{asUpperCamelCase ../name}}", ChipClusters.{{asUpperCamelCase ../name}}Cluster.{{asUpperCamelCase responseName}}Callback.class);
               {{else}}
                 CommandParameter {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_commandParameter = new CommandParameter("{{asUpperCamelCase ../name}}", ChipClusters.DefaultClusterCallback.class);
               {{/if}}
           {{/if}}
           // Populate commands
           {{#if hasSpecificResponse}}
           CommandInfo {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_CommandInfo = new CommandInfo(
                   (cluster, callback, commandArguments) -> {
                       ((ChipClusters.{{asUpperCamelCase ../name}}Cluster) cluster)
                           .{{asLowerCamelCase name}}((ChipClusters.{{asUpperCamelCase ../name}}Cluster.{{asUpperCamelCase responseName}}Callback) callback
                           {{#chip_cluster_command_arguments}}
                           ,
                              ({{asJavaBoxedType type}})
                            commandArguments.get("{{asLowerCamelCase label}}")
                       {{/chip_cluster_command_arguments}}
                       );
                   },
                   () -> new DelegatedDefaultClusterCallback(),
                   {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_commandParams
           );
           {{else}}
           CommandInfo {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_CommandInfo = new CommandInfo(
                   (cluster, callback, commandArguments) -> {
                       ((ChipClusters.{{asUpperCamelCase ../name}}Cluster) cluster)
                          .{{asLowerCamelCase name}}((DefaultClusterCallback) callback
                          {{#chip_cluster_command_arguments}}
                          ,
                             ({{asJavaBoxedType type}})
                           commandArguments.get("{{asLowerCamelCase label}}")
                {{/chip_cluster_command_arguments}}
                );
                   },
                   () -> new DelegatedDefaultClusterCallback(),
                   {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_commandParams
           );
           {{/if}}
           {{asLowerCamelCase ../name}}_ClusterCommandInfo.put("{{asLowerCamelCase name}}", {{asLowerCamelCase ../name}}_{{asLowerCamelCase name}}_CommandInfo);
     {{/chip_cluster_commands}}
     // Populate cluster
     ClusterInfo {{asLowerCamelCase name}}_clusterInfo = new ClusterInfo(
          (ptr, endpointId) -> new ChipClusters.{{asUpperCamelCase name}}Cluster(ptr, endpointId), {{asLowerCamelCase name}}_ClusterCommandInfo);
     clusterMap.put("{{asLowerCamelCase name}}", {{asLowerCamelCase name}}_clusterInfo);
     {{/chip_client_clusters}}
     return clusterMap;
  }
}

{{/if}}
