jobject {{target}};
{{#if isOptional}}
if (!{{source}}.HasValue()) {
  chip::JniReferences::GetInstance().CreateOptional(nullptr, {{target}});
} else {
{{#if isNullable}}
if ({{source}}.Value().IsNull()) {
  chip::JniReferences::GetInstance().CreateOptional(nullptr, {{target}});
} else {
{{/if}}
{{/if}}
{{~#*inline "item"}}{{source}}{{#if isOptional}}.Value(){{/if}}{{#if isNullable}}.Value(){{/if}}{{/inline}}
{{#if isArray}}
{{asSymbol label}} = nullptr; /* Array - Conversion from this type to Java is not properly implemented yet */
{{! TODO: Use if_is_struct, which works better for nested types. Currently can't because inline partials aren't found in its else block. }}
{{else if isStruct}}
{{asSymbol label}} = nullptr; /* Struct - conversion from this type to Java is not properly implemented yet */
{{else if (isOctetString type)}}
chip::ByteArray {{target}}ByteArray(env, {{>item}});
{{target}} = {{target}}ByteArray.jniValue();
{{else if (isCharString type)}}
chip::UtfString {{target}}UtfString(env, {{>item}});
{{target}} = {{target}}UtfString.jniValue();
{{else}}
std::string {{target}}ClassName = "java/lang/{{asJavaBasicTypeForZclType type true}}";
std::string {{target}}CtorSignature = "({{asJniSignature type false}})V";
chip::JniReferences::GetInstance().CreateBoxedObject<{{zapTypeToDecodableClusterObjectType type ns=cluster forceNotNullable=true forceNotOptional=true}}>({{target}}ClassName.c_str(), {{target}}CtorSignature.c_str(), {{>item}}, {{target}});
{{/if}}
{{#if isOptional}}
chip::JniReferences::GetInstance().CreateOptional({{target}}, {{target}});
{{#if isNullable}}
}
{{/if}}
}
{{/if}}