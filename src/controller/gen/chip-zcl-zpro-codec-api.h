/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

// Prevent multiple inclusion
#pragma once

#include <app/util/basic-types.h>
#include <lib/support/Span.h>
#include <stdint.h>
#include <system/SystemPacketBuffer.h>

/*----------------------------------------------------------------------------*\
| Cluster Name                                                        |   ID   |
|---------------------------------------------------------------------+--------|
| Basic                                                               | 0x0028 |
| GeneralCommissioning                                                | 0x0030 |
| NetworkCommissioning                                                | 0x0031 |
| OperationalCredentials                                              | 0x003E |
| TrustedRootCertificates                                             | 0x003F |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster Basic                                                       | 0x0028 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * MfgSpecificPing                                                   |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * InteractionModelVersion                                           | 0x0000 |
| * VendorName                                                        | 0x0001 |
| * VendorID                                                          | 0x0002 |
| * ProductName                                                       | 0x0003 |
| * ProductID                                                         | 0x0004 |
| * UserLabel                                                         | 0x0005 |
| * Location                                                          | 0x0006 |
| * HardwareVersion                                                   | 0x0007 |
| * HardwareVersionString                                             | 0x0008 |
| * SoftwareVersion                                                   | 0x0009 |
| * SoftwareVersionString                                             | 0x000A |
| * ManufacturingDate                                                 | 0x000B |
| * PartNumber                                                        | 0x000C |
| * ProductURL                                                        | 0x000D |
| * ProductLabel                                                      | 0x000E |
| * SerialNumber                                                      | 0x000F |
| * LocalConfigDisabled                                               | 0x0010 |
| * ClusterRevision                                                   | 0xFFFD |
\*----------------------------------------------------------------------------*/

/**
 * @brief
 *    Encode a Basic server discover command into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterDiscoverAttributes(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server read command for the InteractionModelVersion attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadInteractionModelVersionAttribute(uint8_t seqNum,
                                                                                        chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server read command for the VendorName attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadVendorNameAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server read command for the VendorID attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadVendorIDAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server read command for the ProductName attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadProductNameAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server read command for the ProductID attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadProductIDAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server read command for the UserLabel attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadUserLabelAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server write command for the UserLabel attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterWriteUserLabelAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint,
                                                                           chip::ByteSpan userLabel);

/**
 * @brief
 *    Encode a Basic server read command for the Location attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadLocationAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server write command for the Location attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterWriteLocationAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint,
                                                                          chip::ByteSpan location);

/**
 * @brief
 *    Encode a Basic server read command for the HardwareVersion attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadHardwareVersionAttribute(uint8_t seqNum,
                                                                                chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server read command for the HardwareVersionString attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadHardwareVersionStringAttribute(uint8_t seqNum,
                                                                                      chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server read command for the SoftwareVersion attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadSoftwareVersionAttribute(uint8_t seqNum,
                                                                                chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server read command for the SoftwareVersionString attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadSoftwareVersionStringAttribute(uint8_t seqNum,
                                                                                      chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server read command for the ManufacturingDate attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadManufacturingDateAttribute(uint8_t seqNum,
                                                                                  chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server read command for the PartNumber attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadPartNumberAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server read command for the ProductURL attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadProductURLAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server read command for the ProductLabel attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadProductLabelAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server read command for the SerialNumber attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadSerialNumberAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server read command for the LocalConfigDisabled attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadLocalConfigDisabledAttribute(uint8_t seqNum,
                                                                                    chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Basic server write command for the LocalConfigDisabled attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterWriteLocalConfigDisabledAttribute(uint8_t seqNum,
                                                                                     chip::EndpointId destinationEndpoint,
                                                                                     uint8_t localConfigDisabled);

/**
 * @brief
 *    Encode a Basic server read command for the cluster revision attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeBasicClusterReadClusterRevisionAttribute(uint8_t seqNum,
                                                                                chip::EndpointId destinationEndpoint);

/*----------------------------------------------------------------------------*\
| Cluster GeneralCommissioning                                        | 0x0030 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * ArmFailSafe                                                       |   0x00 |
| * CommissioningComplete                                             |   0x04 |
| * SetRegulatoryConfig                                               |   0x02 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * FabricId                                                          | 0x0000 |
| * Breadcrumb                                                        | 0x0001 |
| * ClusterRevision                                                   | 0xFFFD |
\*----------------------------------------------------------------------------*/

/**
 * @brief
 *    Encode a General Commissioning server discover command into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeGeneralCommissioningClusterDiscoverAttributes(uint8_t seqNum,
                                                                                     chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a General Commissioning server read command for the FabricId attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeGeneralCommissioningClusterReadFabricIdAttribute(uint8_t seqNum,
                                                                                        chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a General Commissioning server read command for the Breadcrumb attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeGeneralCommissioningClusterReadBreadcrumbAttribute(uint8_t seqNum,
                                                                                          chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a General Commissioning server write command for the Breadcrumb attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeGeneralCommissioningClusterWriteBreadcrumbAttribute(uint8_t seqNum,
                                                                                           chip::EndpointId destinationEndpoint,
                                                                                           uint64_t breadcrumb);

/**
 * @brief
 *    Encode a General Commissioning server read command for the cluster revision attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle
encodeGeneralCommissioningClusterReadClusterRevisionAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/*----------------------------------------------------------------------------*\
| Cluster NetworkCommissioning                                        | 0x0031 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * AddThreadNetwork                                                  |   0x06 |
| * AddWiFiNetwork                                                    |   0x02 |
| * DisableNetwork                                                    |   0x0E |
| * EnableNetwork                                                     |   0x0C |
| * GetLastNetworkCommissioningResult                                 |   0x10 |
| * RemoveNetwork                                                     |   0x0A |
| * ScanNetworks                                                      |   0x00 |
| * UpdateThreadNetwork                                               |   0x08 |
| * UpdateWiFiNetwork                                                 |   0x04 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * ClusterRevision                                                   | 0xFFFD |
\*----------------------------------------------------------------------------*/

/**
 * @brief
 *    Encode a Network Commissioning server discover command into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeNetworkCommissioningClusterDiscoverAttributes(uint8_t seqNum,
                                                                                     chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Network Commissioning server read command for the cluster revision attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle
encodeNetworkCommissioningClusterReadClusterRevisionAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/*----------------------------------------------------------------------------*\
| Cluster OperationalCredentials                                      | 0x003E |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * AddOpCert                                                         |   0x06 |
| * OpCSRRequest                                                      |   0x04 |
| * RemoveAllFabrics                                                  |   0x0B |
| * RemoveFabric                                                      |   0x0A |
| * SetFabric                                                         |   0x00 |
| * UpdateFabricLabel                                                 |   0x09 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * FabricsList                                                       | 0x0001 |
| * ClusterRevision                                                   | 0xFFFD |
\*----------------------------------------------------------------------------*/

/**
 * @brief
 *    Encode a Operational Credentials server discover command into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeOperationalCredentialsClusterDiscoverAttributes(uint8_t seqNum,
                                                                                       chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Operational Credentials server read command for the fabrics list attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeOperationalCredentialsClusterReadFabricsListAttribute(uint8_t seqNum,
                                                                                             chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Operational Credentials server read command for the cluster revision attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle
encodeOperationalCredentialsClusterReadClusterRevisionAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

/*----------------------------------------------------------------------------*\
| Cluster TrustedRootCertificates                                     | 0x003F |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * AddTrustedRootCertificate                                         |   0x00 |
| * RemoveTrustedRootCertificate                                      |   0x01 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * ClusterRevision                                                   | 0xFFFD |
\*----------------------------------------------------------------------------*/

/**
 * @brief
 *    Encode a Trusted Root Certificates server discover command into buffer including the APS frame
 */
chip::System::PacketBufferHandle encodeTrustedRootCertificatesClusterDiscoverAttributes(uint8_t seqNum,
                                                                                        chip::EndpointId destinationEndpoint);

/**
 * @brief
 *    Encode a Trusted Root Certificates server read command for the cluster revision attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle
encodeTrustedRootCertificatesClusterReadClusterRevisionAttribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);
