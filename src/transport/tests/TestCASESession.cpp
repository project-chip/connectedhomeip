/*
 *
 *    Copyright (c) 2020 Project CHIP Authors
 *    All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *    @file
 *      This file implements unit tests for the CASESession implementation.
 */

#include <errno.h>
#include <nlunit-test.h>

#include <core/CHIPCore.h>
#include <core/CHIPSafeCasts.h>
#include <credentials/CHIPCert.h>
#include <stdarg.h>
#include <support/CHIPMem.h>
#include <support/CodeUtils.h>
#include <support/UnitTestRegistration.h>
#include <transport/CASESession.h>

using namespace chip;
using namespace Credentials;

ChipCertificateSet commissionerCertificateSet;
ChipCertificateSet accessoryCertificateSet;

uint8_t chip_cert_root[2048];
uint32_t chip_cert_root_len;
uint8_t chip_cert_int[2048];
uint32_t chip_cert_int_len;

P256SerializedKeypair commissionerOpKeysSerialized;
P256SerializedKeypair accessoryOpKeysSerialized;

enum
{
    kStandardCertsCount = 4,
    kTestCertBufSize    = 1024, // Size of buffer needed to hold any of the test certificates
                                // (in either CHIP or DER form), or to decode the certificates.
};

uint8_t accessoryOpCredentials[] = {
    0x30, 0x82, 0x01, 0xb9, 0x30, 0x82, 0x01, 0x60, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x16, 0x89, 0xdb, 0x69, 0x33, 0x36,
    0x91, 0xf7, 0x37, 0x9c, 0xe4, 0xbc, 0xfa, 0xc8, 0xf0, 0x45, 0xca, 0x5f, 0x3e, 0xd0, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48,
    0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x1e, 0x31, 0x1c, 0x30, 0x1a, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x13, 0x43, 0x48, 0x49,
    0x50, 0x20, 0x44, 0x45, 0x56, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x33, 0x20, 0x49, 0x43, 0x41, 0x30, 0x1e, 0x17, 0x0d, 0x32,
    0x31, 0x30, 0x32, 0x31, 0x30, 0x30, 0x36, 0x31, 0x36, 0x30, 0x30, 0x5a, 0x17, 0x0d, 0x32, 0x32, 0x30, 0x32, 0x31, 0x30, 0x30,
    0x38, 0x31, 0x36, 0x30, 0x30, 0x5a, 0x30, 0x1b, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x38, 0x37,
    0x64, 0x31, 0x38, 0x66, 0x63, 0x66, 0x36, 0x65, 0x34, 0x31, 0x30, 0x30, 0x36, 0x34, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x84,
    0x00, 0x38, 0x19, 0x7d, 0x4b, 0x84, 0xf4, 0x16, 0xdf, 0xd4, 0xac, 0x4c, 0x27, 0x1a, 0x74, 0xcc, 0x4b, 0x10, 0x17, 0x07, 0xce,
    0x21, 0x11, 0x6b, 0xdb, 0x0e, 0x7e, 0x07, 0x1b, 0x51, 0x3f, 0xa8, 0x42, 0xb5, 0xc1, 0x20, 0x76, 0xea, 0x14, 0xf8, 0x06, 0x54,
    0x6c, 0x92, 0x8e, 0xd3, 0xc8, 0xfc, 0x24, 0x39, 0x10, 0x57, 0x95, 0xa4, 0x38, 0x52, 0x67, 0xb4, 0x30, 0xff, 0x47, 0x9e, 0xd5,
    0xa3, 0x7f, 0x30, 0x7d, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05,
    0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13,
    0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x9e,
    0x6f, 0x44, 0xaa, 0x8d, 0xfb, 0x62, 0x5b, 0x78, 0xcd, 0x0f, 0x76, 0x1f, 0xc9, 0x21, 0xba, 0x4c, 0x3b, 0x9a, 0x90, 0x30, 0x1d,
    0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xc8, 0xec, 0xdf, 0x1d, 0x3c, 0xd3, 0x2d, 0xc8, 0x96, 0xe4, 0xad, 0xb4,
    0xb6, 0xd3, 0xa2, 0xcc, 0x5c, 0x74, 0xf5, 0x70, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03,
    0x02, 0x05, 0xa0, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02,
    0x20, 0x37, 0x42, 0xab, 0xdc, 0x17, 0xa1, 0x28, 0x5d, 0xd4, 0x22, 0x6f, 0x3b, 0x38, 0x99, 0xe2, 0x14, 0xec, 0xea, 0x96, 0x8e,
    0x45, 0x59, 0x8a, 0x1e, 0x22, 0x9d, 0x49, 0x79, 0xde, 0x87, 0x93, 0x4f, 0x02, 0x20, 0x50, 0x39, 0xbb, 0xb7, 0x6b, 0x86, 0xb2,
    0xcc, 0xc0, 0xc4, 0xd2, 0x15, 0x74, 0x10, 0x7d, 0x93, 0x0b, 0xa7, 0xe2, 0x0c, 0xb8, 0x08, 0x25, 0x62, 0x99, 0x42, 0x0a, 0xc9,
    0x9e, 0x5e, 0x2b, 0x09
};

uint8_t accessoryOpKeysBinary[] = {
    // Public key, 65 bytes
    0x04, 0x84, 0x00, 0x38, 0x19, 0x7d, 0x4b, 0x84, 0xf4, 0x16, 0xdf, 0xd4, 0xac, 0x4c, 0x27, 0x1a, 0x74, 0xcc, 0x4b, 0x10, 0x17,
    0x07, 0xce, 0x21, 0x11, 0x6b, 0xdb, 0x0e, 0x7e, 0x07, 0x1b, 0x51, 0x3f, 0xa8, 0x42, 0xb5, 0xc1, 0x20, 0x76, 0xea, 0x14, 0xf8,
    0x06, 0x54, 0x6c, 0x92, 0x8e, 0xd3, 0xc8, 0xfc, 0x24, 0x39, 0x10, 0x57, 0x95, 0xa4, 0x38, 0x52, 0x67, 0xb4, 0x30, 0xff, 0x47,
    0x9e, 0xd5,

    // Private key, 32 bytes
    0x45, 0x28, 0x72, 0x60, 0xfb, 0xfc, 0x99, 0x44, 0xd9, 0xe5, 0xf3, 0x4f, 0x28, 0x29, 0x82, 0xb6, 0x73, 0x0b, 0xba, 0xe2, 0x8b,
    0xa1, 0x23, 0x76, 0x4c, 0x36, 0x08, 0x88, 0x61, 0xb6, 0x0d, 0xc2
};

uint8_t commissionerOpCredentials[] = {
    0x30, 0x82, 0x01, 0xbb, 0x30, 0x82, 0x01, 0x60, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x64, 0x21, 0x22, 0x85, 0x87, 0x1c,
    0x7b, 0x71, 0x5f, 0x7e, 0x46, 0xe7, 0x3f, 0xcc, 0xe2, 0x52, 0x77, 0x49, 0xa8, 0xb9, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48,
    0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x1e, 0x31, 0x1c, 0x30, 0x1a, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x13, 0x43, 0x48, 0x49,
    0x50, 0x20, 0x44, 0x45, 0x56, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x33, 0x20, 0x49, 0x43, 0x41, 0x30, 0x1e, 0x17, 0x0d, 0x32,
    0x31, 0x30, 0x32, 0x31, 0x30, 0x30, 0x36, 0x32, 0x34, 0x33, 0x36, 0x5a, 0x17, 0x0d, 0x32, 0x32, 0x30, 0x32, 0x31, 0x30, 0x30,
    0x38, 0x32, 0x34, 0x33, 0x36, 0x5a, 0x30, 0x1b, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x33, 0x61,
    0x66, 0x61, 0x33, 0x39, 0x63, 0x66, 0x66, 0x35, 0x63, 0x63, 0x33, 0x30, 0x32, 0x64, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x93,
    0xa9, 0x1c, 0x59, 0x0f, 0xcf, 0xc3, 0xeb, 0x89, 0x05, 0xcb, 0x5f, 0xe5, 0x1f, 0x9f, 0xd5, 0xeb, 0x2c, 0x06, 0x49, 0x1a, 0xb7,
    0x68, 0xc6, 0x2a, 0xfd, 0x58, 0x0a, 0x8a, 0x36, 0x3c, 0x82, 0x5c, 0xe4, 0xf0, 0x93, 0x12, 0x1d, 0x0b, 0x8f, 0x8a, 0x03, 0x88,
    0x36, 0xcc, 0x10, 0x43, 0x89, 0xab, 0xd1, 0x24, 0x1b, 0xac, 0x52, 0x05, 0xc8, 0x30, 0x5c, 0x29, 0xcc, 0x7b, 0x83, 0xa9, 0x45,
    0xa3, 0x7f, 0x30, 0x7d, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05,
    0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13,
    0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x9e,
    0x6f, 0x44, 0xaa, 0x8d, 0xfb, 0x62, 0x5b, 0x78, 0xcd, 0x0f, 0x76, 0x1f, 0xc9, 0x21, 0xba, 0x4c, 0x3b, 0x9a, 0x90, 0x30, 0x1d,
    0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x37, 0xd6, 0x52, 0x41, 0x1a, 0xcf, 0xcb, 0x2a, 0xad, 0x2a, 0x35, 0x2f,
    0xcb, 0x62, 0xa8, 0x22, 0x4b, 0x05, 0x8e, 0xe8, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03,
    0x02, 0x05, 0xa0, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02,
    0x21, 0x00, 0x9a, 0xe4, 0x14, 0x5d, 0x6b, 0xd3, 0x30, 0x33, 0x29, 0xa3, 0xff, 0x31, 0x11, 0x7a, 0x9d, 0xf8, 0x2f, 0x49, 0x85,
    0x24, 0x91, 0x5e, 0x57, 0xae, 0xda, 0xad, 0x28, 0x4a, 0x2f, 0xf9, 0xa9, 0xe1, 0x02, 0x21, 0x00, 0x96, 0xe5, 0x26, 0x3e, 0x07,
    0xe9, 0xb9, 0xcb, 0x36, 0xb5, 0xac, 0x46, 0xdb, 0xd2, 0xc3, 0x53, 0xe3, 0x08, 0xd9, 0xc8, 0xf5, 0xef, 0x87, 0xa3, 0x6f, 0xae,
    0x61, 0x43, 0x2b, 0xeb, 0x47, 0x9b
};

uint8_t commissionerOpKeysBinary[] = {
    // Public key, 65 bytes
    0x04, 0x93, 0xa9, 0x1c, 0x59, 0x0f, 0xcf, 0xc3, 0xeb, 0x89, 0x05, 0xcb, 0x5f, 0xe5, 0x1f, 0x9f, 0xd5, 0xeb, 0x2c, 0x06, 0x49,
    0x1a, 0xb7, 0x68, 0xc6, 0x2a, 0xfd, 0x58, 0x0a, 0x8a, 0x36, 0x3c, 0x82, 0x5c, 0xe4, 0xf0, 0x93, 0x12, 0x1d, 0x0b, 0x8f, 0x8a,
    0x03, 0x88, 0x36, 0xcc, 0x10, 0x43, 0x89, 0xab, 0xd1, 0x24, 0x1b, 0xac, 0x52, 0x05, 0xc8, 0x30, 0x5c, 0x29, 0xcc, 0x7b, 0x83,
    0xa9, 0x45,

    // Private key, 32 bytes
    0x9e, 0xfc, 0xc9, 0x0d, 0x6a, 0xc8, 0x0f, 0x63, 0xc0, 0xb1, 0x13, 0x53, 0x9d, 0xdd, 0x84, 0x90, 0xc0, 0xc9, 0x45, 0xed, 0xc2,
    0x66, 0xb3, 0xde, 0xab, 0x76, 0xd2, 0x2d, 0x73, 0xb8, 0x3a, 0x01
};

uint8_t intermediateCertificateBinary[] = {
    0x30, 0x82, 0x01, 0xbe, 0x30, 0x82, 0x01, 0x65, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x22, 0x43, 0xa6, 0x1b, 0xe5, 0xf0,
    0xdb, 0x43, 0x78, 0x1c, 0xc2, 0xf2, 0x79, 0x7c, 0x9b, 0x93, 0x48, 0xe6, 0x96, 0x8f, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48,
    0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x39, 0x31, 0x37, 0x30, 0x35, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x2e, 0x43, 0x6f, 0x6d,
    0x63, 0x61, 0x73, 0x74, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x65, 0x73, 0x74,
    0x69, 0x6e, 0x67, 0x20, 0x45, 0x43, 0x43, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x49, 0x49, 0x49, 0x20, 0x52, 0x6f, 0x6f,
    0x74, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x30, 0x37, 0x30, 0x37, 0x32, 0x33, 0x30, 0x37, 0x35, 0x31, 0x5a, 0x17, 0x0d, 0x34,
    0x35, 0x30, 0x35, 0x30, 0x35, 0x32, 0x33, 0x31, 0x31, 0x33, 0x38, 0x5a, 0x30, 0x1e, 0x31, 0x1c, 0x30, 0x1a, 0x06, 0x03, 0x55,
    0x04, 0x03, 0x0c, 0x13, 0x43, 0x48, 0x49, 0x50, 0x20, 0x44, 0x45, 0x56, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x33, 0x20, 0x49,
    0x43, 0x41, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,
    0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x34, 0xc2, 0x60, 0xdb, 0x62, 0x61, 0xe6, 0x54, 0x59, 0xfa, 0x2f, 0x2f, 0xcb,
    0xa8, 0x51, 0x59, 0x42, 0x61, 0x52, 0xfb, 0x5b, 0x5d, 0xee, 0xcf, 0xb2, 0x64, 0x3f, 0x0b, 0x6e, 0x83, 0x37, 0x8d, 0xca, 0xc1,
    0x5b, 0xf6, 0xb2, 0x4b, 0x70, 0x27, 0x20, 0xee, 0x9c, 0x34, 0x70, 0xf8, 0x88, 0x90, 0xe2, 0xa0, 0xd2, 0xc5, 0x31, 0xa6, 0xfd,
    0xc5, 0x4c, 0xd5, 0x1a, 0x64, 0x98, 0x82, 0x85, 0x02, 0xa3, 0x66, 0x30, 0x64, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01,
    0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xff, 0x02, 0x01, 0x00, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18,
    0x30, 0x16, 0x80, 0x14, 0x36, 0xf4, 0x0a, 0xa5, 0x0a, 0xf4, 0x2b, 0xce, 0x4e, 0x57, 0xd4, 0xcc, 0x7f, 0xb0, 0x32, 0xac, 0xaa,
    0xcb, 0xd8, 0xb5, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x9e, 0x6f, 0x44, 0xaa, 0x8d, 0xfb, 0x62,
    0x5b, 0x78, 0xcd, 0x0f, 0x76, 0x1f, 0xc9, 0x21, 0xba, 0x4c, 0x3b, 0x9a, 0x90, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01,
    0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x86, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03,
    0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x69, 0x94, 0x11, 0xc5, 0x90, 0x00, 0xf1, 0x15, 0x72, 0x8c, 0x3d, 0x68, 0x4c, 0xdc, 0x6a,
    0x74, 0x49, 0x0a, 0x34, 0x2b, 0x9e, 0x7b, 0x0f, 0x6d, 0x33, 0xc1, 0xf3, 0x67, 0xdf, 0xab, 0x19, 0x3e, 0x02, 0x20, 0x31, 0x43,
    0xff, 0x78, 0xb9, 0xc0, 0x37, 0x24, 0xd8, 0x6c, 0x60, 0x42, 0xa8, 0x10, 0xd4, 0x30, 0x94, 0x80, 0x3b, 0xb0, 0xa4, 0x2b, 0xc5,
    0xa2, 0xc3, 0xd9, 0xd4, 0x6c, 0xe6, 0x0c, 0x17, 0x28
};

uint8_t intermediateCertificateCHIP[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x14, 0x22, 0x43, 0xa6, 0x1b, 0xe5, 0xf0, 0xdb, 0x43, 0x78, 0x1c,
    0xc2, 0xf2, 0x79, 0x7c, 0x9b, 0x93, 0x48, 0xe6, 0x96, 0x8f, 0x24, 0x02, 0x01, 0x37, 0x03, 0x2c, 0x01, 0x2e, 0x43, 0x6f,
    0x6d, 0x63, 0x61, 0x73, 0x74, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x65,
    0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x45, 0x43, 0x43, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x49, 0x49, 0x49, 0x20,
    0x52, 0x6f, 0x6f, 0x74, 0x18, 0x26, 0x04, 0x47, 0x65, 0xfe, 0x00, 0x26, 0x05, 0x2a, 0xc4, 0x8e, 0x30, 0x37, 0x06, 0x2c,
    0x01, 0x13, 0x43, 0x48, 0x49, 0x50, 0x20, 0x44, 0x45, 0x56, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x33, 0x20, 0x49, 0x43,
    0x41, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x34, 0xc2, 0x60, 0xdb, 0x62, 0x61, 0xe6, 0x54,
    0x59, 0xfa, 0x2f, 0x2f, 0xcb, 0xa8, 0x51, 0x59, 0x42, 0x61, 0x52, 0xfb, 0x5b, 0x5d, 0xee, 0xcf, 0xb2, 0x64, 0x3f, 0x0b,
    0x6e, 0x83, 0x37, 0x8d, 0xca, 0xc1, 0x5b, 0xf6, 0xb2, 0x4b, 0x70, 0x27, 0x20, 0xee, 0x9c, 0x34, 0x70, 0xf8, 0x88, 0x90,
    0xe2, 0xa0, 0xd2, 0xc5, 0x31, 0xa6, 0xfd, 0xc5, 0x4c, 0xd5, 0x1a, 0x64, 0x98, 0x82, 0x85, 0x02, 0x35, 0x80, 0x29, 0x01,
    0x29, 0x02, 0x24, 0x03, 0x00, 0x18, 0x35, 0x84, 0x30, 0x02, 0x14, 0x36, 0xf4, 0x0a, 0xa5, 0x0a, 0xf4, 0x2b, 0xce, 0x4e,
    0x57, 0xd4, 0xcc, 0x7f, 0xb0, 0x32, 0xac, 0xaa, 0xcb, 0xd8, 0xb5, 0x18, 0x35, 0x83, 0x30, 0x02, 0x14, 0x9e, 0x6f, 0x44,
    0xaa, 0x8d, 0xfb, 0x62, 0x5b, 0x78, 0xcd, 0x0f, 0x76, 0x1f, 0xc9, 0x21, 0xba, 0x4c, 0x3b, 0x9a, 0x90, 0x18, 0x35, 0x81,
    0x29, 0x01, 0x24, 0x02, 0x61, 0x18, 0x35, 0x0a, 0x30, 0x01, 0x20, 0x69, 0x94, 0x11, 0xc5, 0x90, 0x00, 0xf1, 0x15, 0x72,
    0x8c, 0x3d, 0x68, 0x4c, 0xdc, 0x6a, 0x74, 0x49, 0x0a, 0x34, 0x2b, 0x9e, 0x7b, 0x0f, 0x6d, 0x33, 0xc1, 0xf3, 0x67, 0xdf,
    0xab, 0x19, 0x3e, 0x30, 0x02, 0x20, 0x31, 0x43, 0xff, 0x78, 0xb9, 0xc0, 0x37, 0x24, 0xd8, 0x6c, 0x60, 0x42, 0xa8, 0x10,
    0xd4, 0x30, 0x94, 0x80, 0x3b, 0xb0, 0xa4, 0x2b, 0xc5, 0xa2, 0xc3, 0xd9, 0xd4, 0x6c, 0xe6, 0x0c, 0x17, 0x28, 0x18, 0x18
};

uint8_t rootCertificateBinary[] = {
    0x30, 0x82, 0x01, 0xda, 0x30, 0x82, 0x01, 0x80, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x4a, 0x9c, 0x38, 0x34, 0x38, 0x23,
    0xa5, 0x27, 0x9f, 0x63, 0xc7, 0xc3, 0x7e, 0x71, 0x15, 0xc3, 0x7a, 0x51, 0x89, 0x32, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48,
    0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x39, 0x31, 0x37, 0x30, 0x35, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x2e, 0x43, 0x6f, 0x6d,
    0x63, 0x61, 0x73, 0x74, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x65, 0x73, 0x74,
    0x69, 0x6e, 0x67, 0x20, 0x45, 0x43, 0x43, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x49, 0x49, 0x49, 0x20, 0x52, 0x6f, 0x6f,
    0x74, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x30, 0x35, 0x31, 0x31, 0x32, 0x33, 0x31, 0x31, 0x33, 0x38, 0x5a, 0x17, 0x0d, 0x34,
    0x35, 0x30, 0x35, 0x30, 0x35, 0x32, 0x33, 0x31, 0x31, 0x33, 0x38, 0x5a, 0x30, 0x39, 0x31, 0x37, 0x30, 0x35, 0x06, 0x03, 0x55,
    0x04, 0x03, 0x0c, 0x2e, 0x43, 0x6f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x20, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x45, 0x43, 0x43, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x20,
    0x49, 0x49, 0x49, 0x20, 0x52, 0x6f, 0x6f, 0x74, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01,
    0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x1e, 0x1e, 0xf4, 0x36, 0xe2, 0x67, 0x6c,
    0xe0, 0x79, 0x12, 0x91, 0x9b, 0x4c, 0x72, 0xec, 0xf2, 0x40, 0xee, 0x70, 0x49, 0x62, 0x10, 0x31, 0x17, 0xce, 0x43, 0x87, 0xd7,
    0xcf, 0xe8, 0xb5, 0xd4, 0x0f, 0xdc, 0x78, 0x9f, 0x1f, 0x69, 0xce, 0x23, 0xe1, 0xae, 0x76, 0xbc, 0x3f, 0x25, 0x9b, 0xfd, 0x4f,
    0x98, 0x78, 0x3e, 0x17, 0x1f, 0x15, 0x48, 0x15, 0x7d, 0x0e, 0x2b, 0x26, 0x83, 0xa4, 0x8f, 0xa3, 0x66, 0x30, 0x64, 0x30, 0x12,
    0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xff, 0x02, 0x01, 0x01, 0x30, 0x1f, 0x06,
    0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x36, 0xf4, 0x0a, 0xa5, 0x0a, 0xf4, 0x2b, 0xce, 0x4e, 0x57, 0xd4,
    0xcc, 0x7f, 0xb0, 0x32, 0xac, 0xaa, 0xcb, 0xd8, 0xb5, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x36,
    0xf4, 0x0a, 0xa5, 0x0a, 0xf4, 0x2b, 0xce, 0x4e, 0x57, 0xd4, 0xcc, 0x7f, 0xb0, 0x32, 0xac, 0xaa, 0xcb, 0xd8, 0xb5, 0x30, 0x0e,
    0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x86, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48,
    0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0x93, 0x58, 0x2c, 0x17, 0xec, 0xc7, 0x4f, 0x89,
    0x16, 0x58, 0x9c, 0x62, 0x5d, 0x41, 0x64, 0x47, 0x24, 0x81, 0x16, 0xb3, 0x9d, 0xd7, 0x57, 0x02, 0xc3, 0x30, 0xef, 0xe5, 0xd0,
    0x36, 0x8d, 0xcf, 0x02, 0x20, 0x29, 0xbe, 0x43, 0x64, 0x91, 0x32, 0x64, 0xe1, 0xc0, 0x31, 0xb9, 0x0a, 0x6d, 0x5b, 0xc3, 0xbf,
    0xa2, 0xff, 0x7d, 0x0b, 0x79, 0xdc, 0xf5, 0xda, 0xde, 0x3c, 0x1b, 0xe8, 0xd9, 0x10, 0x3c, 0x66
};

uint8_t rootCertificateCHIP[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x14, 0x4a, 0x9c, 0x38, 0x34, 0x38, 0x23, 0xa5, 0x27, 0x9f, 0x63, 0xc7,
    0xc3, 0x7e, 0x71, 0x15, 0xc3, 0x7a, 0x51, 0x89, 0x32, 0x24, 0x02, 0x01, 0x37, 0x03, 0x2c, 0x01, 0x2e, 0x43, 0x6f, 0x6d, 0x63,
    0x61, 0x73, 0x74, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x65, 0x73, 0x74, 0x69,
    0x6e, 0x67, 0x20, 0x45, 0x43, 0x43, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x49, 0x49, 0x49, 0x20, 0x52, 0x6f, 0x6f, 0x74,
    0x18, 0x26, 0x04, 0x2a, 0xef, 0xb1, 0x00, 0x26, 0x05, 0x2a, 0xc4, 0x8e, 0x30, 0x37, 0x06, 0x2c, 0x01, 0x2e, 0x43, 0x6f, 0x6d,
    0x63, 0x61, 0x73, 0x74, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x65, 0x73, 0x74,
    0x69, 0x6e, 0x67, 0x20, 0x45, 0x43, 0x43, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x49, 0x49, 0x49, 0x20, 0x52, 0x6f, 0x6f,
    0x74, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x1e, 0x1e, 0xf4, 0x36, 0xe2, 0x67, 0x6c, 0xe0, 0x79,
    0x12, 0x91, 0x9b, 0x4c, 0x72, 0xec, 0xf2, 0x40, 0xee, 0x70, 0x49, 0x62, 0x10, 0x31, 0x17, 0xce, 0x43, 0x87, 0xd7, 0xcf, 0xe8,
    0xb5, 0xd4, 0x0f, 0xdc, 0x78, 0x9f, 0x1f, 0x69, 0xce, 0x23, 0xe1, 0xae, 0x76, 0xbc, 0x3f, 0x25, 0x9b, 0xfd, 0x4f, 0x98, 0x78,
    0x3e, 0x17, 0x1f, 0x15, 0x48, 0x15, 0x7d, 0x0e, 0x2b, 0x26, 0x83, 0xa4, 0x8f, 0x35, 0x80, 0x29, 0x01, 0x29, 0x02, 0x24, 0x03,
    0x01, 0x18, 0x35, 0x84, 0x30, 0x02, 0x14, 0x36, 0xf4, 0x0a, 0xa5, 0x0a, 0xf4, 0x2b, 0xce, 0x4e, 0x57, 0xd4, 0xcc, 0x7f, 0xb0,
    0x32, 0xac, 0xaa, 0xcb, 0xd8, 0xb5, 0x18, 0x35, 0x83, 0x30, 0x02, 0x14, 0x36, 0xf4, 0x0a, 0xa5, 0x0a, 0xf4, 0x2b, 0xce, 0x4e,
    0x57, 0xd4, 0xcc, 0x7f, 0xb0, 0x32, 0xac, 0xaa, 0xcb, 0xd8, 0xb5, 0x18, 0x35, 0x81, 0x29, 0x01, 0x24, 0x02, 0x61, 0x18, 0x35,
    0x0a, 0x30, 0x01, 0x21, 0x00, 0x93, 0x58, 0x2c, 0x17, 0xec, 0xc7, 0x4f, 0x89, 0x16, 0x58, 0x9c, 0x62, 0x5d, 0x41, 0x64, 0x47,
    0x24, 0x81, 0x16, 0xb3, 0x9d, 0xd7, 0x57, 0x02, 0xc3, 0x30, 0xef, 0xe5, 0xd0, 0x36, 0x8d, 0xcf, 0x30, 0x02, 0x20, 0x29, 0xbe,
    0x43, 0x64, 0x91, 0x32, 0x64, 0xe1, 0xc0, 0x31, 0xb9, 0x0a, 0x6d, 0x5b, 0xc3, 0xbf, 0xa2, 0xff, 0x7d, 0x0b, 0x79, 0xdc, 0xf5,
    0xda, 0xde, 0x3c, 0x1b, 0xe8, 0xd9, 0x10, 0x3c, 0x66, 0x18, 0x18
};

class TestSecurePairingDelegate : public SessionEstablishmentDelegate
{
public:
    CHIP_ERROR SendSessionEstablishmentMessage(const PacketHeader & header, const Transport::PeerAddress & peerAddress,
                                               System::PacketBufferHandle msgBuf) override
    {
        mNumMessageSend++;
        return (peer != nullptr) ? peer->HandlePeerMessage(header, peerAddress, std::move(msgBuf)) : mMessageSendError;
    }

    void OnSessionEstablishmentError(CHIP_ERROR error) override { mNumPairingErrors++; }

    void OnSessionEstablished() override { mNumPairingComplete++; }

    uint32_t mNumMessageSend     = 0;
    uint32_t mNumPairingErrors   = 0;
    uint32_t mNumPairingComplete = 0;
    CHIP_ERROR mMessageSendError = CHIP_NO_ERROR;

    CASESession * peer = nullptr;
};

void SecurePairingWaitTest(nlTestSuite * inSuite, void * inContext)
{
    // Test all combinations of invalid parameters
    TestSecurePairingDelegate delegate;
    CASESession pairing;
    NodeId nodeId = 1;

    NL_TEST_ASSERT(inSuite,
                   pairing.WaitForSessionEstablishment(&accessoryCertificateSet, accessoryOpCredentials,
                                                       sizeof(accessoryOpCredentials), accessoryOpKeysSerialized, nodeId, 0,
                                                       nullptr) == CHIP_ERROR_INVALID_ARGUMENT);
    NL_TEST_ASSERT(inSuite,
                   pairing.WaitForSessionEstablishment(&accessoryCertificateSet, accessoryOpCredentials,
                                                       sizeof(accessoryOpCredentials), accessoryOpKeysSerialized, nodeId, 0,
                                                       &delegate) == CHIP_NO_ERROR);
}

void SecurePairingStartTest(nlTestSuite * inSuite, void * inContext)
{
    // Test all combinations of invalid parameters
    TestSecurePairingDelegate delegate;
    CASESession pairing;
    NodeId nodeId = 1;

    NL_TEST_ASSERT(inSuite,
                   pairing.EstablishSession(Transport::PeerAddress(Transport::Type::kBle), &commissionerCertificateSet,
                                            commissionerOpCredentials, sizeof(commissionerOpCredentials),
                                            commissionerOpKeysSerialized, nodeId, 2, 0, nullptr) != CHIP_NO_ERROR);
    NL_TEST_ASSERT(inSuite,
                   pairing.EstablishSession(Transport::PeerAddress(Transport::Type::kBle), &commissionerCertificateSet,
                                            commissionerOpCredentials, sizeof(commissionerOpCredentials),
                                            commissionerOpKeysSerialized, nodeId, 2, 0, &delegate) == CHIP_NO_ERROR);

    NL_TEST_ASSERT(inSuite, delegate.mNumMessageSend == 1);

    delegate.mMessageSendError = CHIP_ERROR_BAD_REQUEST;

    CASESession pairing1;

    NL_TEST_ASSERT(inSuite,
                   pairing1.EstablishSession(Transport::PeerAddress(Transport::Type::kBle), &commissionerCertificateSet,
                                             commissionerOpCredentials, sizeof(commissionerOpCredentials),
                                             commissionerOpKeysSerialized, nodeId, 2, 0, &delegate) == CHIP_ERROR_BAD_REQUEST);
}

void SecurePairingHandshakeTestCommon(nlTestSuite * inSuite, void * inContext, CASESession & pairingCommissioner,
                                      TestSecurePairingDelegate & delegateCommissioner)
{
    // Test all combinations of invalid parameters
    TestSecurePairingDelegate delegateAccessory;
    CASESession pairingAccessory;
    NodeId nodeIdResponder = 1;
    NodeId nodeIdInitiator = 2;
    CASESessionSerializable serializableCommissioner;
    CASESessionSerializable serializableAccessory;

    delegateCommissioner.peer = &pairingAccessory;
    delegateAccessory.peer    = &pairingCommissioner;

    NL_TEST_ASSERT(inSuite,
                   pairingAccessory.WaitForSessionEstablishment(&accessoryCertificateSet, accessoryOpCredentials,
                                                                sizeof(accessoryOpCredentials), accessoryOpKeysSerialized,
                                                                nodeIdResponder, 0, &delegateAccessory) == CHIP_NO_ERROR);
    NL_TEST_ASSERT(inSuite,
                   pairingCommissioner.EstablishSession(Transport::PeerAddress(Transport::Type::kBle), &commissionerCertificateSet,
                                                        commissionerOpCredentials, sizeof(commissionerOpCredentials),
                                                        commissionerOpKeysSerialized, nodeIdInitiator, nodeIdResponder, 0,
                                                        &delegateCommissioner) == CHIP_NO_ERROR);

    NL_TEST_ASSERT(inSuite, delegateAccessory.mNumMessageSend == 1);
    NL_TEST_ASSERT(inSuite, delegateAccessory.mNumPairingComplete == 1);

    NL_TEST_ASSERT(inSuite, delegateCommissioner.mNumMessageSend == 2);
    NL_TEST_ASSERT(inSuite, delegateCommissioner.mNumPairingComplete == 1);

    NL_TEST_ASSERT(inSuite, pairingCommissioner.ToSerializable(serializableCommissioner) == CHIP_NO_ERROR);
    NL_TEST_ASSERT(inSuite, pairingAccessory.ToSerializable(serializableAccessory) == CHIP_NO_ERROR);
    NL_TEST_ASSERT(
        inSuite,
        memcmp(serializableCommissioner.mI2RR2IKey, serializableAccessory.mI2RR2IKey, serializableCommissioner.mI2RR2IKeyLen) == 0);
}

void SecurePairingHandshakeTest(nlTestSuite * inSuite, void * inContext)
{
    TestSecurePairingDelegate delegateCommissioner;
    CASESession pairingCommissioner;
    SecurePairingHandshakeTestCommon(inSuite, inContext, pairingCommissioner, delegateCommissioner);
}

void SecurePairingDeserialize(nlTestSuite * inSuite, void * inContext, CASESession & pairingCommissioner,
                              CASESession & deserialized)
{
    CASESessionSerialized serialized;
    NL_TEST_ASSERT(inSuite, pairingCommissioner.Serialize(serialized) == CHIP_NO_ERROR);

    NL_TEST_ASSERT(inSuite, deserialized.Deserialize(serialized) == CHIP_NO_ERROR);

    // Serialize from the deserialized session, and check we get the same string back
    CASESessionSerialized serialized2;
    NL_TEST_ASSERT(inSuite, deserialized.Serialize(serialized2) == CHIP_NO_ERROR);

    NL_TEST_ASSERT(inSuite, strncmp(Uint8::to_char(serialized.inner), Uint8::to_char(serialized2.inner), sizeof(serialized)) == 0);
}

void SecurePairingSerializeTest(nlTestSuite * inSuite, void * inContext)
{
    TestSecurePairingDelegate delegateCommissioner;

    // Allocate on the heap to avoid stack overflow in some restricted test scenarios (e.g. QEMU)
    auto * testPairingSession1 = chip::Platform::New<CASESession>();
    auto * testPairingSession2 = chip::Platform::New<CASESession>();

    SecurePairingHandshakeTestCommon(inSuite, inContext, *testPairingSession1, delegateCommissioner);
    SecurePairingDeserialize(inSuite, inContext, *testPairingSession1, *testPairingSession2);

    const uint8_t plain_text[] = { 0x86, 0x74, 0x64, 0xe5, 0x0b, 0xd4, 0x0d, 0x90, 0xe1, 0x17, 0xa3, 0x2d, 0x4b, 0xd4, 0xe1, 0xe6 };
    uint8_t encrypted[64];
    PacketHeader header;
    MessageAuthenticationCode mac;

    // Let's try encrypting using original session, and decrypting using deserialized
    {
        SecureSession session1;

        NL_TEST_ASSERT(inSuite,
                       testPairingSession1->DeriveSecureSession(Uint8::from_const_char("abc"), 3, session1) == CHIP_NO_ERROR);

        NL_TEST_ASSERT(inSuite, session1.Encrypt(plain_text, sizeof(plain_text), encrypted, header, mac) == CHIP_NO_ERROR);
    }

    {
        SecureSession session2;
        NL_TEST_ASSERT(inSuite,
                       testPairingSession2->DeriveSecureSession(Uint8::from_const_char("abc"), 3, session2) == CHIP_NO_ERROR);

        uint8_t decrypted[64];
        NL_TEST_ASSERT(inSuite, session2.Decrypt(encrypted, sizeof(plain_text), decrypted, header, mac) == CHIP_NO_ERROR);
        NL_TEST_ASSERT(inSuite, memcmp(plain_text, decrypted, sizeof(plain_text)) == 0);
    }

    chip::Platform::Delete(testPairingSession1);
    chip::Platform::Delete(testPairingSession2);
}

// Test Suite

/**
 *  Test Suite that lists all the test functions.
 */
// clang-format off
static const nlTest sTests[] =
{
    NL_TEST_DEF("WaitInit",    SecurePairingWaitTest),
    NL_TEST_DEF("Start",       SecurePairingStartTest),
    NL_TEST_DEF("Handshake",   SecurePairingHandshakeTest),
    NL_TEST_DEF("Serialize",   SecurePairingSerializeTest),

    NL_TEST_SENTINEL()
};
// clang-format on
//
/**
 *  Set up the test suite.
 */
int TestSecurePairing_Setup(void * inContext)
{
    CHIP_ERROR error;

    error = chip::Platform::MemoryInit();
    if (error != CHIP_NO_ERROR)
        return FAILURE;

    error = commissionerOpKeysSerialized.SetLength(sizeof(commissionerOpKeysBinary));
    if (error != CHIP_NO_ERROR)
        return FAILURE;
    memcpy((uint8_t *) (commissionerOpKeysSerialized), commissionerOpKeysBinary, sizeof(commissionerOpKeysBinary));

    error = accessoryOpKeysSerialized.SetLength(sizeof(accessoryOpKeysBinary));
    if (error != CHIP_NO_ERROR)
        return FAILURE;
    memcpy((uint8_t *) (accessoryOpKeysSerialized), accessoryOpKeysBinary, sizeof(accessoryOpKeysBinary));

    error = commissionerCertificateSet.Init(kStandardCertsCount, kTestCertBufSize);
    if (error != CHIP_NO_ERROR)
        return FAILURE;

    error = accessoryCertificateSet.Init(kStandardCertsCount, kTestCertBufSize);
    if (error != CHIP_NO_ERROR)
        return FAILURE;

    error = ConvertX509CertToChipCert(rootCertificateBinary, sizeof(rootCertificateBinary), chip_cert_root, sizeof(chip_cert_root),
                                      chip_cert_root_len);
    if (error != CHIP_NO_ERROR)
        return FAILURE;

    // Add the trusted root certificate to the certificate set.
    error = commissionerCertificateSet.LoadCert(chip_cert_root, chip_cert_root_len,
                                                BitFlags<uint8_t, CertDecodeFlags>(CertDecodeFlags::kIsTrustAnchor));
    if (error != CHIP_NO_ERROR)
        return FAILURE;

    error = accessoryCertificateSet.LoadCert(chip_cert_root, chip_cert_root_len,
                                             BitFlags<uint8_t, CertDecodeFlags>(CertDecodeFlags::kIsTrustAnchor));
    if (error != CHIP_NO_ERROR)
        return FAILURE;

    // Add the intermediate certificate to the certificate set.
    error = ConvertX509CertToChipCert(intermediateCertificateBinary, sizeof(intermediateCertificateBinary), chip_cert_int,
                                      sizeof(chip_cert_int), chip_cert_int_len);
    if (error != CHIP_NO_ERROR)
        return FAILURE;

    error = commissionerCertificateSet.LoadCert(chip_cert_int, chip_cert_int_len,
                                                BitFlags<uint8_t, CertDecodeFlags>(CertDecodeFlags::kIsTrustAnchor));
    if (error != CHIP_NO_ERROR)
        return FAILURE;

    error = accessoryCertificateSet.LoadCert(chip_cert_int, chip_cert_int_len,
                                             BitFlags<uint8_t, CertDecodeFlags>(CertDecodeFlags::kIsTrustAnchor));
    if (error != CHIP_NO_ERROR)
        return FAILURE;

    return SUCCESS;
}

/**
 *  Tear down the test suite.
 */
int TestSecurePairing_Teardown(void * inContext)
{
    commissionerCertificateSet.Release();
    accessoryCertificateSet.Release();
    chip::Platform::MemoryShutdown();
    return SUCCESS;
}

// clang-format off
static nlTestSuite sSuite =
{
    "Test-CHIP-SecurePairing",
    &sTests[0],
    TestSecurePairing_Setup,
    TestSecurePairing_Teardown,
};
// clang-format on

/**
 *  Main
 */
int TestCASESession()
{
    // Run test suit against one context
    nlTestRunner(&sSuite, nullptr);

    return (nlTestRunnerStats(&sSuite));
}

CHIP_REGISTER_TEST_SUITE(TestCASESession)
