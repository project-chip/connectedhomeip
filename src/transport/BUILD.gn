# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/nlio.gni")
import("//build_overrides/certifier.gni")
import("${chip_root}/src/ble/ble.gni")

config("includes") {
  include_dirs = [
    ".",
    "${chip_root}/third_party/certifier/repo/include",
    "${chip_root}/third_party/certifier/repo/internal_headers",
    "$root_out_dir", 
  ]
  libs = [
    "curl",
  ]
}

action("generate_dac_chain") {
  script = "${chip_root}/third_party/certifier/generate_dac_chain.py"
  sources = [ "${chip_root}/third_party/certifier/repo/resources/device-attestation-certificate.p12" ]
  outputs = [ "$root_out_dir/dac_chain.h" ]

  args = rebase_path(sources, "") + rebase_path(outputs, root_out_dir)
}

static_library("transport") {
  output_name = "libTransportLayer"

  sources = [
    "AdminPairingTable.cpp",
    "AdminPairingTable.h",
    "CASESession.cpp",
    "CASESession.h",
    "DeviceAttestation.cpp",
    "DeviceAttestation.h",
    "NetworkProvisioning.cpp",
    "NetworkProvisioning.h",
    "PASESession.cpp",
    "PASESession.h",
    "PeerConnectionState.h",
    "PeerConnections.h",
    "RendezvousParameters.h",
    "RendezvousSession.cpp",
    "RendezvousSession.h",
    "RendezvousSessionDelegate.h",
    "SecureMessageCodec.cpp",
    "SecureMessageCodec.h",
    "SecureSession.cpp",
    "SecureSession.h",
    "SecureSessionMgr.cpp",
    "SecureSessionMgr.h",
    "SessionEstablisher.h",
    "SessionEstablishmentDelegate.h",
    "StorablePeerConnection.cpp",
    "StorablePeerConnection.h",
    "TransportMgr.h",
    "TransportMgrBase.cpp",
    "TransportMgrBase.h",
    "${chip_root}/src/credentials/tests/CHIPCert_test_vectors.cpp",
    "${chip_root}/src/credentials/tests/CHIPCert_test_vectors.h",
  ]

  if (chip_config_network_layer_ble) {
    sources += [
      "BLE.cpp",
      "BLE.h",
    ]
  }

  cflags = [ "-Wconversion" ]

  public_deps = [
    "${chip_root}/src/credentials",
    "${chip_root}/src/crypto",
    "${chip_root}/src/inet",
    "${chip_root}/src/lib/core",
    "${chip_root}/src/lib/mdns",
    "${chip_root}/src/lib/support",
    "${chip_root}/src/platform",
    "${chip_root}/src/setup_payload",
    "${chip_root}/src/transport/raw",
    "${nlio_root}:nlio",
    "${certifier_root}:certifier",
  ]

  data_deps = [ ":generate_dac_chain" ]

  public_configs = [ ":includes" ]
}
