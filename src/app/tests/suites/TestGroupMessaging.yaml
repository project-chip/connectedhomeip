# Copyright (c) 2021 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# !!!!!!!!!! TEST INFORMATION !!!!!!!!!!!!!!!!!!
# This test file tests Group Multicast Messaging.
# For this test to work, A Group Write/Command and a unicast read need to occur to be able to confirm that the group Communication works. Every test comes in a pair
# Only Works on Linux machines
# When building chip-tool, chip_enable_group_messaging_tests needs to be set to true in the build command for the test to pass
# ./scripts/examples/gn_build_example.sh examples/all-clusters-app/linux out/debug/standalone/ chip_config_network_layer_ble=false is_tsan=true chip_enable_group_messaging_tests=true
name: Basic Group Messaging Tests

config:
    nodeId: 0x12344321
    cluster: "Basic"
    endpoint: 0

tests:
    - label: "Wait for the commissioned device to be retrieved"
      cluster: "DelayCommands"
      command: "WaitForCommissionee"
      arguments:
          values:
              - name: "nodeId"
                value: nodeId

    - label: "Add Group 1 (endpoint 1)"
      cluster: "Groups"
      command: "AddGroup"
      endpoint: 1
      arguments:
          values:
              - name: "groupId"
                value: 0x0101
              - name: "groupName"
                value: "Group #1"
      response:
          values:
              - name: "status"
                value: 0
              - name: "groupId"
                value: 0x0101

    - label: "Add Group 2 (endpoint 0)"
      cluster: "Groups"
      command: "AddGroup"
      endpoint: 0
      arguments:
          values:
              - name: "groupId"
                value: 0x0102
              - name: "groupName"
                value: "Group #2"
      response:
          values:
              - name: "status"
                value: 0
              - name: "groupId"
                value: 0x0102

    - label: "KeySet Write 1"
      cluster: "Group Key Management"
      command: "KeySetWrite"
      arguments:
          values:
              - name: "GroupKeySet"
                value:
                    {
                        GroupKeySetID: 0x01a1,
                        GroupKeySecurityPolicy: 0,
                        EpochKey0: "\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf",
                        EpochStartTime0: 1110000,
                        EpochKey1: "\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf",
                        EpochStartTime1: 1110001,
                        EpochKey2: "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf",
                        EpochStartTime2: 1110002,
                    }

    - label: "KeySet Write 2"
      cluster: "Group Key Management"
      command: "KeySetWrite"
      arguments:
          values:
              - name: "GroupKeySet"
                value:
                    {
                        GroupKeySetID: 0x01a2,
                        GroupKeySecurityPolicy: 1,
                        EpochKey0: "\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf",
                        EpochStartTime0: 2220000,
                        EpochKey1: "\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef",
                        EpochStartTime1: 2220001,
                        EpochKey2: "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff",
                        EpochStartTime2: 2220002,
                    }

    - label: "Write Group Keys"
      cluster: "Group Key Management"
      command: "writeAttribute"
      attribute: "GroupKeyMap"
      arguments:
          value:
              [
                  { FabricIndex: 1, GroupId: 0x0101, GroupKeySetID: 0x01a1 },
                  { FabricIndex: 1, GroupId: 0x0102, GroupKeySetID: 0x01a2 },
              ]

    - label: "Install ACLs for test"
      cluster: "Access Control"
      command: "writeAttribute"
      attribute: "ACL"
      arguments:
          value: [
                  # Any CASE can admin
                  {
                      FabricIndex: 1,
                      Privilege: 5,
                      AuthMode: 2,
                      Subjects: null,
                      Targets: null,
                  },
                  # These groups can operate
                  {
                      FabricIndex: 1,
                      Privilege: 3,
                      AuthMode: 3,
                      Subjects: [0x0101, 0x0102],
                      Targets: null,
                  },
              ]

    # Test Pair 1 : Sends a Group Write Attribute
    - label: "Group Write Attribute"
      command: "writeAttribute"
      attribute: "location"
      groupId: 0x0102
      arguments:
          value: "US"

      # Test Pair 1 : Validates previous group write attribute with a unicast to read
    - label: "Read back Attribute"
      command: "readAttribute"
      attribute: "location"
      response:
          value: "US"

    # Test Pair 2 : Sends a Group Write Attribute
    - label: "Restore initial location value"
      command: "writeAttribute"
      attribute: "location"
      groupId: 0x0102
      arguments:
          value: "XX"

    # Test Pair 2 : Validates previous group write attribute with a unicast to read
    - label: "Read back Attribute"
      command: "readAttribute"
      attribute: "location"
      response:
          value: "XX"

    # Test Pair 3 : Sends a Group command
    - label: "Turn On the light to see attribute change"
      cluster: "On/Off"
      command: "On"
      groupId: 0x0101

    # Test Pair 3 : Validates previous group command with a unicast to read
    - label:
          "Check on/off attribute value is true after on command for endpoint 1"
      cluster: "On/Off"
      command: "readAttribute"
      attribute: "OnOff"
      endpoint: 1
      response:
          value: 1
