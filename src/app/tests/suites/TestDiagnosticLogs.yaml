# Copyright (c) 2023 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Diagnostic Logs Tests

config:
    nodeId: 0x12344321
    cluster: "Diagnostic Logs"
    endpoint: 0
    end_user_support_log_file_path: "/tmp/end_user_support_log.txt"
    end_user_support_log_file_content: "End User Support Log Content"
    end_user_support_log_file_content_long:
        "End User Support Log Content is more than 1024
        bytes
    network_diagnostics_log_file_path: "/tmp/network_diagnostics_log.txt"
    network_diagnostics_log_file_content: "Network Diagnostic Log Content"
    crash_log_file_path: "/tmp/crash_log.txt"
    crash_log_file_content: "Crash Log Content"

tests:
    #
    # Set up the test by adding some destination log files for the target accessory:
    #  1. End User Support
    #  2. Network Diagnostics
    #  3. Crash
    #
    # The first thing to do is to delete them if they exist. It could be some
    # left over from a previous test run.
    #

    - label: "Delete EndUserSupport logs"
      cluster: "SystemCommands"
      command: "DeleteFile"
      arguments:
          values:
              - name: "filePath"
                value: end_user_support_log_file_path

    - label: "Delete NetworkDiag logs"
      cluster: "SystemCommands"
      command: "DeleteFile"
      arguments:
          values:
              - name: "filePath"
                value: network_diagnostics_log_file_path

    - label: "Delete CrashLogs logs"
      cluster: "SystemCommands"
      command: "DeleteFile"
      arguments:
          values:
              - name: "filePath"
                value: crash_log_file_path

    - label: "Stop the accessory"
      cluster: "SystemCommands"
      command: "Stop"

    - label: "Start the accessory with the destination logs files"
      cluster: "SystemCommands"
      command: "Start"
      arguments:
          values:
              - name: "endUserSupportLogPath"
                value: end_user_support_log_file_path
              - name: "networkDiagnosticsLogPath"
                value: network_diagnostics_log_file_path
              - name: "crashLogPath"
                value: crash_log_file_path

    - label: "Wait for the commissioned device to be retrieved"
      cluster: "DelayCommands"
      command: "WaitForCommissionee"
      arguments:
          values:
              - name: "nodeId"
                value: nodeId

    - label: "Read End User Support log intent"
      command: "RetrieveLogsRequest"
      arguments:
          values:
              - name: "Intent"
                value: 0 # EndUserSupport
              - name: "RequestedProtocol"
                value: 0 # ResponsePayload
      response:
          values:
              - name: "Status"
                value: 2 # NoLogs
              - name: "LogContent"
                value: ""

    - label: "Create End User Support logs"
      cluster: "SystemCommands"
      command: "CreateFile"
      arguments:
          values:
              - name: "filePath"
                value: end_user_support_log_file_path
              - name: "fileContent"
                value: end_user_support_log_file_content

    - label: "Read End User Support log intent"
      command: "RetrieveLogsRequest"
      arguments:
          values:
              - name: "Intent"
                value: 0 # EndUserSupport
              - name: "RequestedProtocol"
                value: 0 # ResponsePayload
      response:
          values:
              - name: "Status"
                value: 0 # Success
              - name: "LogContent"
                value: end_user_support_log_file_content

    - label: "Read NetworkDiag intent"
      command: "RetrieveLogsRequest"
      arguments:
          values:
              - name: "Intent"
                value: 1 # NetworkDiag
              - name: "RequestedProtocol"
                value: 0 # ResponsePayload
      response:
          values:
              - name: "Status"
                value: 2 # NoLogs
              - name: "LogContent"
                value: ""

    - label: "Create NetworkDiag logs"
      cluster: "SystemCommands"
      command: "CreateFile"
      arguments:
          values:
              - name: "filePath"
                value: network_diagnostics_log_file_path
              - name: "fileContent"
                value: network_diagnostics_log_file_content

    - label: "Read NetworkDiag intent"
      command: "RetrieveLogsRequest"
      arguments:
          values:
              - name: "Intent"
                value: 1 # NetworkDiag
              - name: "RequestedProtocol"
                value: 0 # ResponsePayload
      response:
          values:
              - name: "Status"
                value: 0 # Success
              - name: "LogContent"
                value: network_diagnostics_log_file_content

    - label: "Read CrashLogs intent"
      command: "RetrieveLogsRequest"
      arguments:
          values:
              - name: "Intent"
                value: 2 # CrashLogs
              - name: "RequestedProtocol"
                value: 0 # ResponsePayload
      response:
          values:
              - name: "Status"
                value: 2 # NoLogs
              - name: "LogContent"
                value: ""

    - label: "Create CrashLogs logs"
      cluster: "SystemCommands"
      command: "CreateFile"
      arguments:
          values:
              - name: "filePath"
                value: crash_log_file_path
              - name: "fileContent"
                value: crash_log_file_content

    - label: "Read CrashLogs intent"
      command: "RetrieveLogsRequest"
      arguments:
          values:
              - name: "Intent"
                value: 2 # CrashLogs
              - name: "RequestedProtocol"
                value: 0 # ResponsePayload
      response:
          values:
              - name: "Status"
                value: 0 # Success
              - name: "LogContent"
                value: crash_log_file_content

    - label: "Write End User Support logs to be over the 1024 bytes limit"
      cluster: "SystemCommands"
      command: "CreateFile"
      arguments:
          values:
              - name: "filePath"
                value: end_user_support_log_file_path
              - name: "fileContent"
                value: end_user_support_log_file_content_long

    - label: "Read End User Support log intent"
      command: "RetrieveLogsRequest"
      arguments:
          values:
              - name: "Intent"
                value: 0 # EndUserSupport
              - name: "RequestedProtocol"
                value: 0 # ResponsePayload
      response:
          values:
              - name: "Status"
                value: 0 # Success
              - name: "LogContent"
                constraints:
                    minLength: 1024
                    maxLength: 1024

    - label: "Write End User Support logs back to the previous value"
      cluster: "SystemCommands"
      command: "CreateFile"
      arguments:
          values:
              - name: "filePath"
                value: end_user_support_log_file_path
              - name: "fileContent"
                value: end_user_support_log_file_content

    #
    # Check BDX Implementation
    #

    # In the case where the Node is able to fit the entirety of the requested logs within the LogContent field, the Status field of
    # the RetrieveLogsResponse SHALL be set to Exhausted and a BDX session SHALL NOT be initiated.
    - label: "Read End User Support log using BDX"
      command: "RetrieveLogsRequest"
      arguments:
          values:
              - name: "Intent"
                value: 0 # EndUserSupport
              - name: "RequestedProtocol"
                value: 1 # BDX
              - name: "TransferFileDesignator"
                value: "ItDoesNotMatterForThisTest"
      response:
          values:
              - name: "Status"
                value: 1 # Exhausted
              - name: "LogContent"
                value: end_user_support_log_file_content

    #
    # If the Intent and/or the RequestedProtocol arguments contain invalid (out of range) values the command SHALL fail with a Status Code of INVALID_COMMAND.
    #
    - label: "Read unknown log intent"
      command: "RetrieveLogsRequest"
      arguments:
          values:
              - name: "Intent"
                value: 128 # undefined value
              - name: "RequestedProtocol"
                value: 0 # ResponsePayload
      response:
          error: "INVALID_COMMAND"

    - label: "Read known log intent on unknown protocol"
      command: "RetrieveLogsRequest"
      arguments:
          values:
              - name: "Intent"
                value: 0 # EndUserSupport
              - name: "RequestedProtocol"
                value: 128 # undefined value
      response:
          error: "INVALID_COMMAND"

    #
    # If the RequestedProtocol is set to BDX and there is no TransferFileDesignator the command SHALL fail with a Status Code of INVALID_COMMAND.
    #
    - label:
          "Read End User Support log intent using BDX but without a
          TransferFileDesignator"
      command: "RetrieveLogsRequest"
      arguments:
          values:
              - name: "Intent"
                value: 0 # EndUserSupport
              - name: "RequestedProtocol"
                value: 1 # BDX
      response:
          error: "INVALID_COMMAND"

    - label:
          "Read End User Support log intent using BDX but with a
          TransferFileDesignator that is longer than the kMaxFileDesignatorLen
          character limit"
      command: "RetrieveLogsRequest"
      arguments:
          values:
              - name: "Intent"
                value: 0 # EndUserSupport
              - name: "RequestedProtocol"
                value: 1 # BDX
              - name: "TransferFileDesignator"
                value: "ThisNameIsLongerThanThekMaxFileDesignatorLenCharacterConstraint"
      response:
          error: "CONSTRAINT_ERROR"
