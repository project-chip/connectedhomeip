{{chip_header}}

#include "chip-zcl-zpro-codec.h"

#include <support/BufBound.h>
#include <support/SafeInt.h>
#include <support/logging/CHIPLogging.h>

#include <app/util/basic-types.h>

using namespace chip;

#define CHECK_FRAME_LENGTH(value, name)                                                                                            \
    if (value == 0)                                                                                                                \
    {                                                                                                                              \
        ChipLogError(Zcl, "Error encoding APS Frame: %s", name);                                                                   \
        return 0;                                                                                                                  \
    }


#define READ_ATTRIBUTES(name, cluster_id)                                                                                          \
    uint16_t attr_id_count = sizeof(attr_ids) / sizeof(attr_ids[0]);                                                               \
    uint16_t result = encodeReadAttributesCommand(buffer, buf_length, destination_endpoint, cluster_id, attr_ids, attr_id_count);  \
    if (result == 0)                                                                                                               \
    {                                                                                                                              \
        ChipLogError(Zcl, "Error encoding %s command", name);                                                                      \
        return 0;                                                                                                                  \
    }                                                                                                                              \
    return result;

#define WRITE_ATTRIBUTE(name, cluster_id, value)                                                                                   \
    BufBound buf = BufBound(buffer, buf_length);                                                                                   \
    if (_encodeGlobalCommand(buf, destination_endpoint, cluster_id, 0x02))                                                         \
    {                                                                                                                              \
        buf.Put16(attr_id);                                                                                                        \
        buf.Put(attr_type);                                                                                                        \
        switch (attr_type)                                                                                                         \
        {                                                                                                                          \
        {{#chip_server_writable_attributes_types}}
        case {{atomicTypeId}}:                                                                                                     \
          buf.Put{{chipTypePutLength}}(static_cast<{{chipTypePutCastType}}>(value));                                               \
          break;                                                                                                                   \
        {{/chip_server_writable_attributes_types}}
        default:                                                                                                                   \
          ChipLogError(Zcl, "Error encoding %s command", name);                                                                    \
          return 0;                                                                                                                \
        }                                                                                                                          \
    }                                                                                                                              \
                                                                                                                                   \
    uint16_t result = buf.Fit() && CanCastTo<uint16_t>(buf.Needed()) ? static_cast<uint16_t>(buf.Needed()) : 0;                    \
    if (result == 0)                                                                                                               \
    {                                                                                                                              \
        ChipLogError(Zcl, "Error encoding %s command", name);                                                                      \
        return 0;                                                                                                                  \
    }                                                                                                                              \
    return result;

#define REPORT_ATTRIBUTE(name, cluster_id, isAnalog, value)                                                                        \
    BufBound buf = BufBound(buffer, buf_length);                                                                                   \
    if (_encodeGlobalCommand(buf, destination_endpoint, cluster_id, 0x06))                                                         \
    {                                                                                                                              \
        uint8_t direction = 0x00;                                                                                                  \
        buf.Put(direction);                                                                                                        \
        buf.Put16(attr_id);                                                                                                        \
        buf.Put(attr_type);                                                                                                        \
        buf.Put16(min_interval);                                                                                                   \
        buf.Put16(max_interval);                                                                                                   \
        if (isAnalog)                                                                                                              \
        {                                                                                                                          \
            switch (attr_type)                                                                                                     \
            {                                                                                                                      \
            {{#chip_server_reportable_attributes_types}}
            {{#unless (isDiscreteType)}}
              case {{atomicTypeId}}:                                                                                               \
                buf.Put{{chipTypePutLength}}(static_cast<{{chipTypePutCastType}}>(value));                                         \
                break;                                                                                                             \
            {{/unless}}
            {{/chip_server_reportable_attributes_types}}
            default:                                                                                                               \
              ChipLogError(Zcl, "Type is not supported for report attribute: '0x%02x'", attr_type);                                \
              break;                                                                                                               \
            }                                                                                                                      \
        }                                                                                                                          \
    }                                                                                                                              \
                                                                                                                                   \
    uint16_t result = buf.Fit() && CanCastTo<uint16_t>(buf.Needed()) ? static_cast<uint16_t>(buf.Needed()) : 0;                    \
    if (result == 0)                                                                                                               \
    {                                                                                                                              \
        ChipLogError(Zcl, "Error encoding %s command", name);                                                                      \
        return 0;                                                                                                                  \
    }                                                                                                                              \
    return result;

#define DISCOVER_ATTRIBUTES(name, cluster_id)                                                                                      \
    BufBound buf = BufBound(buffer, buf_length);                                                                                   \
    if (_encodeGlobalCommand(buf, destination_endpoint, cluster_id, 0x0c))                                                         \
    {                                                                                                                              \
        /* Discover all attributes */                                                                                              \
        buf.Put16(0x0000);                                                                                                         \
        buf.Put(0xFF);                                                                                                             \
    }                                                                                                                              \
                                                                                                                                   \
    uint16_t result = buf.Fit() && CanCastTo<uint16_t>(buf.Needed()) ? static_cast<uint16_t>(buf.Needed()) : 0;                    \
    if (result == 0)                                                                                                               \
    {                                                                                                                              \
        ChipLogError(Zcl, "Error encoding %s command", name);                                                                      \
        return 0;                                                                                                                  \
    }                                                                                                                              \
    return result;

#define COMMAND_HEADER(name, cluster_id, command_id)                                                                               \
    BufBound buf    = BufBound(buffer, buf_length);                                                                                \
    uint16_t result = _encodeClusterSpecificCommand(buf, destination_endpoint, cluster_id, command_id);                            \
    if (result == 0)                                                                                                               \
    {                                                                                                                              \
        ChipLogError(Zcl, "Error encoding %s command", name);                                                                      \
        return 0;                                                                                                                  \
    }

#define COMMAND_FOOTER(name)                                                                                                       \
    result = buf.Fit() && CanCastTo<uint16_t>(buf.Needed()) ? static_cast<uint16_t>(buf.Needed()) : 0;                             \
    if (result == 0)                                                                                                               \
    {                                                                                                                              \
        ChipLogError(Zcl, "Error encoding %s command", name);                                                                      \
        return 0;                                                                                                                  \
    }                                                                                                                              \
    return result;

#define COMMAND_INSERT_STRING(name, str)                                                                                           \
    {                                                                                                                              \
        size_t str_length = strlen(str);                                                                                           \
        if (!CanCastTo<uint8_t>(str_length))                                                                                       \
        {                                                                                                                          \
            ChipLogError(Zcl, "Error encoding %s command. String too long: %d", name, str_length);                                 \
            return 0;                                                                                                              \
        }                                                                                                                          \
        buf.Put(static_cast<uint8_t>(str_length));                                                                                 \
        buf.Put(str);                                                                                                              \
    }                                                                                                                              \

#define COMMAND(name, cluster_id, command_id)                                                                                      \
    COMMAND_HEADER(name, cluster_id, command_id);                                                                                  \
    COMMAND_FOOTER(name);

using namespace chip;
extern "C" {

{{> clusters_header}}

{{#chip_server_clusters}}
#define {{define}}_ID {{asHex code 4}}
{{/chip_server_clusters}}

static uint16_t doEncodeApsFrame(BufBound & buf, ClusterId clusterId, EndpointId sourceEndpoint,
                                 EndpointId destinationEndpoint, EmberApsOption options, GroupId groupId, uint8_t sequence,
                                 uint8_t radius, bool isMeasuring)
{

    uint8_t control_byte = 0;
    buf.Put(control_byte) // Put in a control byte
        .Put16(clusterId)
        .Put(sourceEndpoint)
        .Put(destinationEndpoint)
        .Put(options, sizeof(EmberApsOption))
        .Put16(groupId)
        .Put(sequence)
        .Put(radius);

    size_t result = 0;
    if (isMeasuring)
    {
        result = buf.Needed();
        ChipLogDetail(Zcl, "Measured APS frame size %d", result);
    }
    else
    {
        result = buf.Fit() ? buf.Needed() : 0;
        CHECK_FRAME_LENGTH(result, "Buffer too small");
        ChipLogDetail(Zcl, "Successfully encoded %d bytes", result);
    }
    if (!CanCastTo<uint16_t>(result))
    {
        ChipLogError(Zcl, "Can't fit our measured size in uint16_t");
        result = 0;
    }

    return static_cast<uint16_t>(result);
}

uint16_t encodeApsFrame(uint8_t * buffer, uint16_t buf_length, EmberApsFrame * apsFrame)
{
    BufBound buf = BufBound(buffer, buf_length);
    return doEncodeApsFrame(buf, apsFrame->clusterId, apsFrame->sourceEndpoint, apsFrame->destinationEndpoint,
                            apsFrame->options, apsFrame->groupId, apsFrame->sequence, apsFrame->radius, !buffer);
}

uint16_t _encodeCommand(BufBound & buf, EndpointId destination_endpoint, ClusterId cluster_id, CommandId command, uint8_t frame_control)
{
    CHECK_FRAME_LENGTH(buf.Size(), "Buffer is empty");

    uint8_t seq_num            = 1;     // Transaction sequence number.  Just pick something.
    EndpointId source_endpoint = 1;     // Pick source endpoint as 1 for now.

    if (doEncodeApsFrame(buf, cluster_id, source_endpoint, destination_endpoint, 0, 0, 0, 0, false))
    {
        buf.Put(frame_control);
        buf.Put(seq_num);
        buf.Put(command);
    }

    return buf.Fit() && CanCastTo<uint16_t>(buf.Needed()) ? static_cast<uint16_t>(buf.Needed()) : 0;
}

uint16_t _encodeClusterSpecificCommand(BufBound & buf, EndpointId destination_endpoint, ClusterId cluster_id, CommandId command)
{
    // This is a cluster-specific command so low two bits are 0b01.  The command
    // is standard, so does not need a manufacturer code, and we're sending
    // client to server, so all the remaining bits are 0.
    uint8_t frame_control = 0x01;

    return _encodeCommand(buf, destination_endpoint, cluster_id, command, frame_control);
}

uint16_t _encodeGlobalCommand(BufBound & buf, EndpointId destination_endpoint, ClusterId cluster_id, CommandId command)
{
    // This is a global command, so the low bits are 0b00.  The command is
    // standard, so does not need a manufacturer code, and we're sending client
    // to server, so all the remaining bits are 0.
    uint8_t frame_control = 0x00;

    return _encodeCommand(buf, destination_endpoint, cluster_id, command, frame_control);
}

uint16_t encodeReadAttributesCommand(uint8_t * buffer, uint16_t buf_length, EndpointId destination_endpoint, ClusterId cluster_id,
                                     const uint16_t * attr_ids, uint16_t attr_id_count)
{
    BufBound buf = BufBound(buffer, buf_length);
    if (_encodeGlobalCommand(buf, destination_endpoint, cluster_id, 0x00))
    {
        for (uint16_t i = 0; i < attr_id_count; ++i)
        {
            uint16_t attr_id = attr_ids[i];
            buf.Put16(attr_id);
        }
    }

    return buf.Fit() && CanCastTo<uint16_t>(buf.Needed()) ? static_cast<uint16_t>(buf.Needed()) : 0;
}

{{#chip_server_clusters}}
{{> cluster_header}}

{{#chip_server_cluster_commands}}
/*
 * Command {{asCamelCased name false}}
 */
uint16_t encode{{asCamelCased clusterName false}}Cluster{{asType name}}Command(uint8_t * buffer, uint16_t buf_length, EndpointId destination_endpoint{{#chip_server_cluster_command_arguments}}, {{chipType}} {{asCamelCased label}}{{/chip_server_cluster_command_arguments}})
{
    const char * kName = "{{asCamelCased clusterName false}}{{asType name}}";
    COMMAND_HEADER(kName, {{parent.define}}_ID, {{asHex code 2}});
    {{#chip_server_cluster_command_arguments}}
    {{#if (isString type)}}
    COMMAND_INSERT_STRING(kName, {{asCamelCased label}});
    {{else if (isSignedType)}}
    buf.Put{{chipTypePutLength}}(static_cast<{{chipTypePutCastType}}>({{asCamelCased label}}));
    {{else}}
    buf.Put{{chipTypePutLength}}({{asCamelCased label}});
    {{/if}}
    {{/chip_server_cluster_command_arguments}}
    COMMAND_FOOTER(kName);
}

{{/chip_server_cluster_commands}}
uint16_t encode{{asCamelCased name false}}ClusterDiscoverAttributes(uint8_t * buffer, uint16_t buf_length, EndpointId destination_endpoint)
{
    DISCOVER_ATTRIBUTES("Discover{{asCamelCased name false}}Attributes", {{define}}_ID);
}

{{#chip_server_cluster_attributes}}
/*
 * Attribute {{asCamelCased name false}}
 */
uint16_t encode{{asCamelCased parent.name false}}ClusterRead{{asCamelCased name false}}Attribute(uint8_t * buffer, uint16_t buf_length, EndpointId destination_endpoint)
{
    uint16_t attr_ids[] = { {{asHex attributeCode 4}} };
    READ_ATTRIBUTES("Read{{asCamelCased parent.name false}}{{asCamelCased name false}}", {{parent.define}}_ID);
}

{{#if (isWritableAttribute)}}
uint16_t encode{{asCamelCased parent.name false}}ClusterWrite{{asCamelCased name false}}Attribute(uint8_t * buffer, uint16_t buf_length, EndpointId destination_endpoint, {{asUnderlyingZclType type}} {{asCamelCased name}})
{
    uint16_t attr_id = {{asHex attributeCode 4}};
    uint8_t attr_type = { {{atomicTypeId}} };
    WRITE_ATTRIBUTE("Write{{asCamelCased parent.name false}}{{asCamelCased name false}}", {{parent.define}}_ID, {{asCamelCased name}});
}

{{/if}}
{{#if (isReportableAttribute)}}
uint16_t encode{{asCamelCased parent.name false}}ClusterReport{{asCamelCased name false}}Attribute(uint8_t * buffer, uint16_t buf_length, EndpointId destination_endpoint, uint16_t min_interval, uint16_t max_interval{{#unless (isDiscreteType)}}, {{chipType}} change{{/unless}})
{
    uint16_t attr_id = {{asHex attributeCode 4}};
    uint8_t attr_type = { {{atomicTypeId}} };
    REPORT_ATTRIBUTE("Report{{asCamelCased parent.name false}}{{asCamelCased name false}}", {{parent.define}}_ID, {{#unless (isDiscreteType)}}true, change{{else}}false, 0{{/unless}});
}

{{/if}}
{{/chip_server_cluster_attributes}}
{{/chip_server_clusters}}
} // extern "C"
