{{> header}}

{{#if (chip_has_client_clusters)}}
// Prevent multiple inclusion
#pragma once

#include <app/util/basic-types.h>
#include <lib/support/Span.h>
#include <stdint.h>
#include <system/SystemPacketBuffer.h>

{{> clusters_header}}

{{#chip_client_clusters}}
{{> cluster_header}}

/**
 * @brief
 *    Encode a {{name}} server discover command into buffer including the APS frame
 */
chip::System::PacketBufferHandle encode{{asCamelCased name false}}ClusterDiscoverAttributes(uint8_t seqNum, chip::EndpointId destinationEndpoint);

{{#chip_server_cluster_attributes}}
/**
 * @brief
 *    Encode a {{parent.name}} server read command for the {{name}} attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encode{{asCamelCased parent.name false}}ClusterRead{{asCamelCased name false}}Attribute(uint8_t seqNum, chip::EndpointId destinationEndpoint);

{{#if (isWritableAttribute)}}
/**
 * @brief
 *    Encode a {{parent.name}} server write command for the {{name}} attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encode{{asCamelCased parent.name false}}ClusterWrite{{asCamelCased name false}}Attribute(uint8_t seqNum, chip::EndpointId destinationEndpoint, {{chipType}} {{asCamelCased name}});

{{/if}}
{{#if (isReportableAttribute)}}
/**
 * @brief
 *    Encode a {{parent.name}} server configure report command for the {{name}} attribute into buffer including the APS frame
 */
chip::System::PacketBufferHandle encode{{asCamelCased parent.name false}}ClusterConfigure{{asCamelCased name false}}Attribute(uint8_t seqNum, chip::EndpointId destinationEndpoint, uint16_t minInterval, uint16_t maxInterval{{#unless (isDiscreteType)}}, {{chipType}} change{{/unless}});

{{/if}}
{{/chip_server_cluster_attributes}}
{{/chip_client_clusters}}
{{/if}}
