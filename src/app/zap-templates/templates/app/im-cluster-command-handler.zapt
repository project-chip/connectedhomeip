{{> header}}

#include <cstdint>
#include <cinttypes>

#include "af-structs.h"
#include "call-command-handler.h"
#include "callback.h"
#include "cluster-id.h"
#include "command-id.h"
#include "util.h"

#include <app/InteractionModelEngine.h>

// Currently we need some work to keep compatible with ember lib.
#include <util/ember-compatibility-functions.h>

namespace chip {
namespace app {

// Cluster specific command parsing

namespace clusters {

{{#all_user_clusters}}
{{#if (user_cluster_has_enabled_command name side)}}
namespace {{asCamelCased name false}} {

void Dispatch{{asCamelCased side false}}Command(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {{#if (user_cluster_has_enabled_manufacturer_command name side)}}
    {{else}}
    {{/if}}
    {
        switch (commandId)
        {
        {{#all_user_cluster_commands}}
        {{#unless mfgCode}}
        {{#if (isStrEqual clusterName parent.name)}}
        {{#if (isCommandAvailable parent.side incoming outgoing commandSource name)}}
        case ZCL_{{asDelimitedMacro name}}_COMMAND_ID: {
        {{> im_command_handler_cluster_commands}}
            break;
        }
        {{/if}}
        {{/if}}
        {{/unless}}
        {{/all_user_cluster_commands}}
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_{{asDelimitedMacro define}}_ID);
            break;
        }
        }
    }
}

}

{{/if}}
{{/all_user_clusters}}

} // namespace clusters

void DispatchSingleClusterCommand(chip::ClusterId aClusterId, chip::CommandId aCommandId, chip::EndpointId aEndPointId,
                             chip::TLV::TLVReader & aReader, Command * apCommandObj)
{
    ChipLogDetail(Zcl, "Received Cluster Command: Cluster=%" PRIx16 " Command=%" PRIx8 " Endpoint=%" PRIx8, aClusterId,
                  aCommandId, aEndPointId);
    Compatibility::SetupEmberAfObjects(apCommandObj, aClusterId, aCommandId, aEndPointId);
    switch (aClusterId)
    {
    {{#all_user_clusters}}
    {{#if (user_cluster_has_enabled_command name side)}}
    {{#unless (isClient side) }}
    case ZCL_{{asDelimitedMacro define}}_ID :
        clusters::{{asCamelCased name false}}::Dispatch{{asCamelCased side false}}Command(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    {{/unless}}
    {{/if}}
    {{/all_user_clusters}}
    default:
        // Unrecognized cluster ID, error status will apply.
        // TODO: Encode response for Cluster not found
        ChipLogError(Zcl, "Unknown cluster %" PRIx16, aClusterId);
        break;
    }
    Compatibility::ResetEmberAfObjects();
}

} // namespace app
} // namespace chip
