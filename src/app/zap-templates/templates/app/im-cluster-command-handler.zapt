{{> header}}

#include <cstdint>
#include <cinttypes>

#include "app/common/gen/af-structs.h"
#include "app/common/gen/cluster-id.h"
#include "app/common/gen/command-id.h"
#include "call-command-handler.h"
#include "callback.h"
#include "app/util/util.h"

#include <app/InteractionModelEngine.h>

// Currently we need some work to keep compatible with ember lib.
#include <app/util/ember-compatibility-functions.h>

namespace chip {
namespace app {

// Cluster specific command parsing

namespace clusters {

{{#all_user_clusters}}
{{#if (user_cluster_has_enabled_command name side)}}
namespace {{asCamelCased name false}} {

void Dispatch{{asCamelCased side false}}Command(app::Command * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
    // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
    // Any error value TLVUnpackError means we have received an illegal value.
    // The following variables are used for all commands to save code size.
    CHIP_ERROR TLVError = CHIP_NO_ERROR;
    CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
    uint32_t validArgumentCount = 0;
    uint32_t expectArgumentCount = 0;
    uint32_t currentDecodeTagId = 0;
    bool wasHandled = false;
    {{#if (user_cluster_has_enabled_manufacturer_command name side)}}
    {{else}}
    {{/if}}
    {
        switch (aCommandId)
        {
        {{#all_user_cluster_commands}}
        {{#unless mfgCode}}
        {{#if (isStrEqual clusterName parent.name)}}
        {{#if (isCommandAvailable parent.side incoming outgoing commandSource name)}}
        case ZCL_{{asDelimitedMacro name}}_COMMAND_ID: {
        {{> im_command_handler_cluster_commands}}
            break;
        }
        {{/if}}
        {{/if}}
        {{/unless}}
        {{/all_user_cluster_commands}}
        default: {
            // Unrecognized command ID, error status will apply.
            chip::app::CommandPathParams returnStatusParam = { aEndpointId,
                                                       0, // GroupId
                                                       ZCL_{{asDelimitedMacro define}}_ID,
                                                       aCommandId,
                                                       (chip::app::CommandPathFlags::kEndpointIdValid) };
            apCommandObj->AddStatusCode(&returnStatusParam, Protocols::SecureChannel::GeneralStatusCode::kNotFound, Protocols::SecureChannel::Id,
                            Protocols::SecureChannel::kProtocolCodeGeneralFailure);
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, aCommandId, ZCL_{{asDelimitedMacro define}}_ID);
            return;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || CHIP_NO_ERROR != TLVUnpackError || expectArgumentCount != validArgumentCount || !wasHandled)
    {
      chip::app::CommandPathParams returnStatusParam = { aEndpointId,
                                                       0, // GroupId
                                                       ZCL_{{asDelimitedMacro define}}_ID,
                                                       aCommandId,
                                                       (chip::app::CommandPathFlags::kEndpointIdValid) };
      apCommandObj->AddStatusCode(&returnStatusParam, Protocols::SecureChannel::GeneralStatusCode::kBadRequest, Protocols::SecureChannel::Id,
                      Protocols::SecureChannel::kProtocolCodeGeneralFailure);
      ChipLogProgress(Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32 " (last decoded tag = %" PRIu32, validArgumentCount, expectArgumentCount, TLVError, TLVUnpackError, currentDecodeTagId);
    }
}

}

{{/if}}
{{/all_user_clusters}}

} // namespace clusters

void DispatchSingleClusterCommand(chip::ClusterId aClusterId, chip::CommandId aCommandId, chip::EndpointId aEndPointId,
                             chip::TLV::TLVReader & aReader, Command * apCommandObj)
{
    ChipLogDetail(Zcl, "Received Cluster Command: Cluster=%" PRIx16 " Command=%" PRIx8 " Endpoint=%" PRIx8, aClusterId,
                  aCommandId, aEndPointId);
    Compatibility::SetupEmberAfObjects(apCommandObj, aClusterId, aCommandId, aEndPointId);
    TLV::TLVType dataTlvType;
    SuccessOrExit(aReader.EnterContainer(dataTlvType));
    switch (aClusterId)
    {
    {{#all_user_clusters}}
    {{#if (user_cluster_has_enabled_command name side)}}
    case ZCL_{{asDelimitedMacro define}}_ID :
        clusters::{{asCamelCased name false}}::Dispatch{{asCamelCased side false}}Command(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    {{/if}}
    {{/all_user_clusters}}
    default:
        // Unrecognized cluster ID, error status will apply.
        chip::app::CommandPathParams returnStatusParam = { aEndPointId,
                                                       0, // GroupId
                                                       aClusterId,
                                                       aCommandId,
                                                       (chip::app::CommandPathFlags::kEndpointIdValid) };

        apCommandObj->AddStatusCode(&returnStatusParam, Protocols::SecureChannel::GeneralStatusCode::kNotFound, Protocols::SecureChannel::Id,
                            Protocols::SecureChannel::kProtocolCodeGeneralFailure);
        ChipLogError(Zcl, "Unknown cluster %" PRIx16, aClusterId);
        break;
    }
exit:
    Compatibility::ResetEmberAfObjects();
    aReader.ExitContainer(dataTlvType);
}

} // namespace app
} // namespace chip
