{{>header}}

/**
 *  @file
 *    This file contains definitions for accessors around clusters attributes.
 */

#include <app-common/zap-generated/attributes/Accessors.h>

#include <app-common/zap-generated/attribute-type.h>
#include <app-common/zap-generated/ids/Attributes.h>
#include <app-common/zap-generated/ids/Clusters.h>
#include <app/util/af.h>

namespace chip {
namespace app {
namespace Clusters {

{{#zcl_clusters}}
{{#zcl_attributes_server}}
{{#if (hasSpecificAttributes)}}
{{#first}}
namespace {{asUpperCamelCase parent.label}} {
namespace Attributes {

{{/first}}
{{#if clusterRef}}
{{#if (canHaveSimpleAccessors type)}}
namespace {{asUpperCamelCase label}} {

EmberAfStatus Get(chip::EndpointId endpoint, {{asUnderlyingZclType type}} * {{asLowerCamelCase label}})
{
    return emberAfReadServerAttribute(endpoint, {{asUpperCamelCase parent.label}}::Id, {{asUpperCamelCase label}}::Id, (uint8_t *) {{asLowerCamelCase label}}, sizeof(*{{asLowerCamelCase label}}));

}
EmberAfStatus Set(chip::EndpointId endpoint, {{asUnderlyingZclType type}} {{asLowerCamelCase label}})
{
    return emberAfWriteServerAttribute(endpoint, {{asUpperCamelCase parent.label}}::Id, {{asUpperCamelCase label}}::Id, (uint8_t *) &{{asLowerCamelCase label}}, ZCL_{{asDelimitedMacro type}}_ATTRIBUTE_TYPE);
}

} // namespace {{asUpperCamelCase label}}

{{/if}}
{{/if}}
{{#last}}
} // namespace Attributes
} // {{asUpperCamelCase parent.label}}

{{/last}}
{{/if}}
{{/zcl_attributes_server}}
{{/zcl_clusters}}

} // Clusters
} // app
} // chip
