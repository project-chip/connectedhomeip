{{> header}}
#pragma once

#include <app/data-model/DecodableList.h>
#include <app/data-model/List.h>
#include <app/data-model/Nullable.h>
#include <app/EventLoggingTypes.h>
#include <lib/core/DataModelTypes.h>
#include <lib/core/TLV.h>
#include <lib/support/BitMask.h>

#include <clusters/shared/Enums.h>
#include <clusters/shared/Structs.h>

#include <clusters/{{asUpperCamelCase name}}/ClusterId.h>
#include <clusters/{{asUpperCamelCase name}}/EventIds.h>
#include <clusters/{{asUpperCamelCase name}}/Enums.h>
#include <clusters/{{asUpperCamelCase name}}/Structs.h>

#include <cstdint>

namespace chip {
namespace app {
namespace Clusters {
namespace {{asUpperCamelCase name}} {
namespace Events {
{{#zcl_events}}
namespace {{asUpperCamelCase name}} {
static constexpr PriorityLevel kPriorityLevel = PriorityLevel::{{asUpperCamelCase priority}};

enum class Fields : uint8_t {
    {{#zcl_event_fields}}
    k{{asUpperCamelCase name}} = {{fieldIdentifier}},
    {{/zcl_event_fields}}
};

struct Type
{
public:
    static constexpr PriorityLevel GetPriorityLevel() { return kPriorityLevel; }
    static constexpr EventId GetEventId() { return Events::{{asUpperCamelCase name}}::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::{{asUpperCamelCase parent.name}}::Id; }
    static constexpr bool kIsFabricScoped = {{isFabricSensitive}};

    {{#zcl_event_fields}}
    {{zapTypeToEncodableClusterObjectType type cluster=../../name}} {{asLowerCamelCase name}}{{> cluster_objects_field_init cluster=../../name}};
    {{/zcl_event_fields}}

    {{#if isFabricSensitive}}
    auto GetFabricIndex() const {
        return fabricIndex;
    }
    {{/if}}

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;
};

struct DecodableType {
public:
    static constexpr PriorityLevel GetPriorityLevel() { return kPriorityLevel; }
    static constexpr EventId GetEventId() { return Events::{{asUpperCamelCase name}}::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::{{asUpperCamelCase parent.name}}::Id; }

    {{#zcl_event_fields}}
    {{zapTypeToDecodableClusterObjectType type cluster=../../name}} {{asLowerCamelCase name}}{{> cluster_objects_field_init cluster=../../name}};
    {{/zcl_event_fields}}

    CHIP_ERROR Decode(TLV::TLVReader &reader);
};
} // namespace {{asUpperCamelCase name}}
{{/zcl_events}}
} // namespace Events
} // namespace {{asUpperCamelCase name}}
} // namespace Clusters
} // namespace app
} // namespace chip
