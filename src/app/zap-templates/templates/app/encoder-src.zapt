{{> header}}

{{#if (chip_has_client_clusters)}}
#include <app/chip-zcl-zpro-codec.h>

#include <support/BufferWriter.h>
#include <support/SafeInt.h>
#include <support/logging/CHIPLogging.h>

#include <app/util/basic-types.h>
#include <lib/support/Span.h>

using namespace chip;
using namespace chip::System;
using namespace chip::Encoding::LittleEndian;

#define COMMAND_HEADER(name, clusterId)                                                                                            \
    const char * kName = name;                                                                                                     \
                                                                                                                                   \
    PacketBufferWriter buf(System::PacketBufferHandle::New(kMaxBufferSize));                                                       \
    if (buf.IsNull())                                                                                                              \
    {                                                                                                                              \
        ChipLogError(Zcl, "Could not allocate packet buffer while trying to encode %s command", kName);                            \
        return PacketBufferHandle();                                                                                               \
    }                                                                                                                              \
                                                                                                                                   \
    if (doEncodeApsFrame(buf, clusterId, kSourceEndpoint, destinationEndpoint, 0, 0, 0, 0, false))                                 \
    {

#define COMMAND_FOOTER()                                                                                                           \
    }                                                                                                                              \
    if (!buf.Fit())                                                                                                                \
    {                                                                                                                              \
        ChipLogError(Zcl, "Command %s can't fit in the allocated buffer", kName);                                                  \
    }                                                                                                                              \
    return buf.Finalize();


{{> clusters_header}}

#define EMBER_ZCL_REPORTING_DIRECTION_REPORTED 0x00

{{#zcl_global_commands}}
#define ZCL_{{asDelimitedMacro label}}_COMMAND_ID ({{asHex code 2}})
{{/zcl_global_commands}}

{{#chip_client_clusters}}
#define {{define}}_ID {{asHex code 4}}
{{#chip_server_cluster_commands}}
#define ZCL_{{asDelimitedMacro name}}_COMMAND_ID ({{asHex code 2}})
{{/chip_server_cluster_commands}}

{{/chip_client_clusters}}

// TODO: Find a way to calculate maximum message length for clusters
//       https://github.com/project-chip/connectedhomeip/issues/965
constexpr uint16_t kMaxBufferSize = 1024;

// This is a global command, so the low bits are 0b00.  The command is
// standard, so does not need a manufacturer code, and we're sending client
// to server, so all the remaining bits are 0.
constexpr uint8_t kFrameControlGlobalCommand = 0x00;

// Pick source endpoint as 1 for now
constexpr EndpointId kSourceEndpoint = 1;

{{#chip_client_clusters}}
{{> cluster_header}}

PacketBufferHandle encode{{asCamelCased name false}}ClusterDiscoverAttributes(uint8_t seqNum, EndpointId destinationEndpoint)
{
    COMMAND_HEADER("Discover{{asCamelCased name false}}Attributes", {{define}}_ID);
    buf.Put8(kFrameControlGlobalCommand)
       .Put8(seqNum)
       .Put8(ZCL_DISCOVER_ATTRIBUTES_COMMAND_ID)
       .Put16(0x0000)
       .Put8(0xFF);
    COMMAND_FOOTER();
}

{{#chip_server_cluster_attributes}}
/*
 * Attribute {{asCamelCased name false}}
 */
PacketBufferHandle encode{{asCamelCased parent.name false}}ClusterRead{{asCamelCased name false}}Attribute(uint8_t seqNum, EndpointId destinationEndpoint)
{
    COMMAND_HEADER("Read{{asCamelCased parent.name false}}{{asCamelCased name false}}", {{parent.define}}_ID);
    buf.Put8(kFrameControlGlobalCommand)
       .Put8(seqNum)
       .Put8(ZCL_READ_ATTRIBUTES_COMMAND_ID)
       .Put16({{asHex code 4}});
    COMMAND_FOOTER();
}

{{#if (isWritableAttribute)}}
PacketBufferHandle encode{{asCamelCased parent.name false}}ClusterWrite{{asCamelCased name false}}Attribute(uint8_t seqNum, EndpointId destinationEndpoint, {{chipType}} {{asCamelCased name}})
{
    COMMAND_HEADER("Write{{asCamelCased parent.name false}}{{asCamelCased name false}}", {{parent.define}}_ID);
    {{#if (isString type)}}
    size_t {{asCamelCased name}}StrLen = {{asCamelCased name}}.size();
    if (!CanCastTo<{{#if (isShortString type)}}uint8_t{{else}}uint16_t{{/if}}>({{asCamelCased name}}StrLen))
    {
        ChipLogError(Zcl, "Error encoding %s command. String too long: %zu", kName, {{asCamelCased name}}StrLen);
        return PacketBufferHandle();
    }

    {{/if}}
    buf.Put8(kFrameControlGlobalCommand)
       .Put8(seqNum)
       .Put8(ZCL_WRITE_ATTRIBUTES_COMMAND_ID)
       .Put16({{asHex code 4}})
       .Put8({{atomicTypeId}})
    {{#if (isString type)}}
       .Put{{#if (isLongString type)}}16{{/if}}(static_cast<{{#if (isShortString type)}}uint8_t{{else}}uint16_t{{/if}}>({{asCamelCased name}}StrLen))
       .Put({{asCamelCased name}}.data(), {{asCamelCased name }}StrLen)
    {{else}}
       .Put{{chipTypePutLength}}(static_cast<{{chipTypePutCastType}}>({{asCamelCased name}}))
    {{/if}}
       ;
    COMMAND_FOOTER();
}

{{/if}}
{{#if (isReportableAttribute)}}
PacketBufferHandle encode{{asCamelCased parent.name false}}ClusterConfigure{{asCamelCased name false}}Attribute(uint8_t seqNum, EndpointId destinationEndpoint, uint16_t minInterval, uint16_t maxInterval{{#unless (isDiscreteType)}}, {{chipType}} change{{/unless}})
{
    COMMAND_HEADER("Report{{asCamelCased parent.name false}}{{asCamelCased name false}}", {{parent.define}}_ID);
    buf.Put8(kFrameControlGlobalCommand)
       .Put8(seqNum)
       .Put8(ZCL_CONFIGURE_REPORTING_COMMAND_ID)
       .Put8(EMBER_ZCL_REPORTING_DIRECTION_REPORTED)
       .Put16({{asHex code 4}})
       .Put8({{atomicTypeId}})
       .Put16(minInterval)
       .Put16(maxInterval);
    {{#unless (isDiscreteType)}}
    buf.Put{{chipTypePutLength}}(static_cast<{{chipTypePutCastType}}>(change));
    {{/unless}}
    COMMAND_FOOTER();
}

{{/if}}
{{/chip_server_cluster_attributes}}
{{/chip_client_clusters}}
{{/if}}
