{{> header}}

#include <stdint.h>

#include "af-structs.h"
#include "call-command-handler.h"
#include "callback.h"
#include "cluster-id.h"
#include "command-id.h"
#include "util.h"

#include <app/Command.h>
#include <core/CHIPTLV.h>

// The IM_HAVE_XXX_CLUSTER_YYY_COMMAND is used for compatibility handlers.

namespace chip{
namespace app {
namespace clusters {
{{#all_user_clusters}}
{{#if (user_cluster_has_enabled_command name side)}}
namespace {{asCamelCased name false}} {
void Dispatch{{asCamelCased side false}}Command(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv);
{{#all_user_cluster_commands}}
{{#unless mfgCode}}
{{#if (isStrEqual clusterName parent.name)}}
{{#if (isCommandAvailable parent.side incoming outgoing commandSource name)}}
#define IM_HAVE_{{as_delimited_macro parent.name}}_CLUSTER_{{as_delimited_macro name}}_COMMAND 1
{{/if}}
{{/if}}
{{/unless}}
{{/all_user_cluster_commands}}
{{#all_user_cluster_commands}}
{{#unless mfgCode}}
{{#if (isStrEqual clusterName parent.name)}}
{{#if (isCommandAvailable parent.side incoming outgoing commandSource name)}}
void On{{asCamelCased name false}}CommandCallback(app::Command*, EndpointId{{#zcl_command_arguments}}, {{#if (isString type)}}const uint8_t * {{asSymbol label}}{{else}}{{asUnderlyingZclType type}} {{asSymbol label}}{{/if}}{{/zcl_command_arguments}});
{{/if}}
{{/if}}
{{/unless}}
{{/all_user_cluster_commands}}
}

{{/if}}
{{/all_user_clusters}}
}
}
}
