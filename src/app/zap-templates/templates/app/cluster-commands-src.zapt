{{> header}}
#include <clusters/{{asUpperCamelCase name}}/Commands.h>

#include <app/data-model/StructDecodeIterator.h>
#include <app/data-model/WrappedStructEncoder.h>
#include <app/data-model/Decode.h>

namespace chip {
namespace app {
namespace Clusters {
namespace {{asUpperCamelCase name}} {
namespace Commands {
{{#zcl_commands}}
namespace {{asUpperCamelCase name}} {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const{
    DataModel::WrappedStructEncoder encoder{aWriter, aTag};
    {{#zcl_command_arguments}}
    encoder.Encode(to_underlying(Fields::k{{asUpperCamelCase label}}), {{asLowerCamelCase label}});
    {{/zcl_command_arguments}}
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader &reader) {
    detail::StructDecodeIterator __iterator(reader);
    while (true) {
        uint8_t __context_tag  = 0;
        CHIP_ERROR err = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        {{#zcl_command_arguments~}}
        {{! NOTE: using if/else instead of switch because it seems to generate smaller code. ~}}
        if (__context_tag == to_underlying(Fields::k{{asUpperCamelCase label}}))
        {
            err = DataModel::Decode(reader, {{asLowerCamelCase label}});
        }
        else
        {{#last}}
        {
        }
        {{/last}}
        {{/zcl_command_arguments}}

        ReturnErrorOnFailure(err);
    }
}
} // namespace {{asUpperCamelCase name}}.
{{/zcl_commands}}
} // namespace Commands
} // namespace {{asUpperCamelCase name}}
} // namespace Clusters
} // namespace app
} // namespace chip
