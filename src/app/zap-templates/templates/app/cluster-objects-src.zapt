{{> header}}

#include <app-common/zap-generated/cluster-objects.h>

// Includes below are because the compiler seems to be able to optimize better if all
// structures are visible in one compilation unit (saves aroud 500 bytes of flash on
// a lighting app when compared to individual cpp compilation)
#include <clusters/shared/Structs.ipp>
{{#zcl_clusters}}
#include <clusters/{{asUpperCamelCase name}}/Attributes.ipp>
#include <clusters/{{asUpperCamelCase name}}/Commands.ipp>
#include <clusters/{{asUpperCamelCase name}}/Events.ipp>
#include <clusters/{{asUpperCamelCase name}}/Structs.ipp>
{{/zcl_clusters}}

namespace chip {
namespace app {

bool CommandNeedsTimedInvoke(ClusterId aCluster, CommandId aCommand)
{
    // Maybe it would be smaller code to codegen a table and walk over it?
    // Not sure.
    switch (aCluster)
    {
    {{#zcl_clusters}}
      {{#zcl_commands_that_need_timed_invoke}}
      {{#first}}
      case Clusters::{{asUpperCamelCase parent.name}}::Id:
      {
          switch (aCommand) {
      {{/first}}
          case Clusters::{{asUpperCamelCase parent.name}}::Commands::{{asUpperCamelCase name}}::Id:
      {{#last}}
              return true;
          default:
              return false;
          }
      }
      {{/last}}
      {{/zcl_commands_that_need_timed_invoke}}
    {{/zcl_clusters}}
    default:
        break;
    }

    return false;
}

bool CommandIsFabricScoped(ClusterId aCluster, CommandId aCommand)
{
    // Maybe it would be smaller code to codegen a table and walk over it?
    // Not sure.
    switch (aCluster)
    {
    {{#zcl_clusters}}
      {{#zcl_commands}}
      {{#first}}
      case Clusters::{{asUpperCamelCase parent.name}}::Id:
      {
          switch (aCommand) {
      {{/first}}
          {{#if isFabricScoped}}
          case Clusters::{{asUpperCamelCase parent.name}}::Commands::{{asUpperCamelCase name}}::Id:
              return true;
          {{/if}}
      {{#last}}
          default:
              return false;
          }
      }
      {{/last}}
      {{/zcl_commands}}
    {{/zcl_clusters}}
    }
    return false;
}

bool CommandHasLargePayload(ClusterId aCluster, CommandId aCommand)
{
    {{#zcl_clusters}}
      {{#zcl_commands}}
          {{#if isLargeMessage}}
          if ((aCluster == Clusters::{{asUpperCamelCase parent.name}}::Id) &&
              (aCommand == Clusters::{{asUpperCamelCase parent.name}}::Commands::{{asUpperCamelCase name}}::Id))
          {
              return true;
          }
          {{/if}}
      {{/zcl_commands}}
    {{/zcl_clusters}}
    return false;
}

} // namespace app
} // namespace chip
