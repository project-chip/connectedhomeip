// This IDL was generated automatically by ZAP.
// It is for view/code review purposes only.

{{#chip_shared_structs}}
{{>idl_structure_definition extraIndent=0}}

{{/chip_shared_structs}}
{{!TODO: consider #chip_clusters as iteration point as well.
{{!      Unsure about the differences}}
{{#all_user_clusters}}
{{side}} cluster {{asUpperCamelCase name}} = {{code}} {
  {{#zcl_enums}}
  enum {{asUpperCamelCase name}} : {{type}} {
    {{#zcl_enum_items}}
    k{{asUpperCamelCase label}} = {{value}};
    {{/zcl_enum_items}}
  }

  {{/zcl_enums}}
  {{#chip_cluster_specific_structs}}
{{>idl_structure_definition extraIndent=1}}

  {{/chip_cluster_specific_structs}}
  {{#zcl_events}}
  {{priority}} event {{asUpperCamelCase name}} = {{code}} {
    {{#zcl_event_fields}}
    {{>idl_structure_member label=name}}

    {{/zcl_event_fields}}
  }

  {{/zcl_events}}
  {{#chip_server_cluster_attributes}}
  {{! ensure indent }}{{#unless isWritableAttribute~}}
    readonly {{!marker to place a space even with whitespace removal~}}
  {{~/unless~}}{{#if isGlobalAttribute~}}
    global {{!marker to place a space even with whitespace removal~}}
  {{~/if~}}
  {{~!TODO: write only attributes should also be supported~}}
  {{~#unless isReportableAttribute~}}
    nosubscribe {{!marker to place a space even with whitespace removal~}}
  {{~/unless~}}
  {{~!Removes spaces~}} attribute {{!ensure space}}
    {{~#if isNullable~}}
      nullable {{!marker to place a space even with whitespace removal~}}
    {{~/if~}} {{type}}
    {{~#unless isArray~}}
      {{~#if (isString type)~}}
        {{~#if maxLength~}} 
          <{{maxLength}}> 
        {{~/if~}}
      {{~/if~}}
    {{/unless}} {{asLowerCamelCase name~}}
    {{~#if isList~}} [] {{~/if}} = {{code}};
  {{/chip_server_cluster_attributes}}
  {{#chip_cluster_commands}}
  {{#if arguments}}

  request struct {{asUpperCamelCase name}}Request {
    {{#chip_cluster_command_arguments}}
    {{> idl_structure_member}}

    {{/chip_cluster_command_arguments}}
  }
  {{/if}}
  {{/chip_cluster_commands}}
  {{#chip_cluster_responses}}

  response struct {{asUpperCamelCase name}} {
    {{#chip_cluster_response_arguments}}
    {{> idl_structure_member}}

    {{/chip_cluster_response_arguments}}
  }
  {{/chip_cluster_responses}}
  {{#chip_cluster_commands}}
  {{#first}}

  {{/first}}
  command {{asUpperCamelCase name}}(
    {{~#if arguments~}}
       {{asUpperCamelCase name}}Request
    {{~/if~}}
  ): {{asUpperCamelCase responseName}} = {{code}};
  {{/chip_cluster_commands}}
}

{{/all_user_clusters}}

{{#chip_endpoints}}
endpoint {{endpointId}} {
  {{#chip_endpoint_clusters}}
  {{#if (isServer side)~}} server  {{else~}} binding {{/if~}}
  cluster {{asUpperCamelCase name}};
  {{/chip_endpoint_clusters}}
}

{{/chip_endpoints}}
