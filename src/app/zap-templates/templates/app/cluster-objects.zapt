{{> header}}

#pragma once

#include <app/data-model/DecodableList.h>
#include <app/data-model/Decode.h>
#include <app/data-model/Encode.h>
#include <app/data-model/List.h>
#include <app/EventLoggingTypes.h>
#include <app/util/basic-types.h>
#include <lib/support/BitFlags.h>
#include <protocols/interaction_model/Constants.h>
#include <app-common/zap-generated/enums.h>
#include <app-common/zap-generated/ids/Commands.h>
#include <app-common/zap-generated/ids/Clusters.h>
#include <app-common/zap-generated/ids/Attributes.h>

namespace chip {
namespace app {
namespace Clusters {

{{#zcl_clusters}}
namespace {{asUpperCamelCase name}} {
{{#zcl_enums}}
// Need to convert consumers to using the new enum classes, so we
// don't just have casts all over.
#ifdef CHIP_USE_ENUM_CLASS_FOR_IM_ENUM
// Enum for {{label}}
enum class {{asType label}} : {{asUnderlyingZclType type}} {
{{#zcl_enum_items}}
k{{asUpperCamelCase label}} = {{asHex value 2}},
{{/zcl_enum_items}}
};
#else // CHIP_USE_ENUM_CLASS_FOR_IM_ENUM
using {{asType label}} = EmberAf{{asType label}};
#endif
{{/zcl_enums}}

{{#zcl_bitmaps}}

// Bitmap for {{label}}
enum class {{asType label}} : {{asUnderlyingZclType type}} {
{{#zcl_bitmap_items}}
k{{asUpperCamelCase label}} = {{asOffset mask}},
{{/zcl_bitmap_items}}
};
{{/zcl_bitmaps}}

{{#zcl_structs}}
{{#first}}
namespace Structs {
{{/first}}
namespace {{asUpperCamelCase name}} {
    enum class Fields {
    {{#zcl_struct_items}}
    k{{asUpperCamelCase label}} = {{index}},
    {{/zcl_struct_items}}
    };

    struct Type {
    public:
        {{#zcl_struct_items}}
        {{zapTypeToEncodableClusterObjectType type}} {{asLowerCamelCase label}};
        {{/zcl_struct_items}}

        CHIP_ERROR Encode(TLV::TLVWriter &writer, TLV::Tag tag) const;
        {{#unless struct_contains_array}}
        CHIP_ERROR Decode(TLV::TLVReader &reader);
        {{/unless}}
    };

    {{#if struct_contains_array}}
    struct DecodableType {
    public:
        {{#zcl_struct_items}}
        {{zapTypeToDecodableClusterObjectType type}} {{asLowerCamelCase label}};
        {{/zcl_struct_items}}
        CHIP_ERROR Decode(TLV::TLVReader &reader);
    };
    {{else}}
    using DecodableType = Type;
    {{/if}}

} // namespace {{asUpperCamelCase name}}
{{#last}}
} // namespace Structs
{{/last}}
{{/zcl_structs}}

{{#zcl_commands}}
{{#first}}
namespace Commands {
{{/first}}
namespace {{asUpperCamelCase name}} {
enum class Fields {
    {{#zcl_command_arguments}}
    k{{asUpperCamelCase label}} = {{index}},
    {{/zcl_command_arguments}}
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return {{asUpperCamelCase name}}::Id; }
    static constexpr ClusterId GetClusterId() { return {{asUpperCamelCase parent.name}}::Id; }

    {{#zcl_command_arguments}}
    {{zapTypeToEncodableClusterObjectType type}} {{asLowerCamelCase label}};
    {{/zcl_command_arguments}}

    CHIP_ERROR Encode(TLV::TLVWriter &writer, TLV::Tag tag) const;
};

struct DecodableType {
public:
    static constexpr CommandId GetCommandId() { return {{asUpperCamelCase name}}::Id; }
    static constexpr ClusterId GetClusterId() { return {{asUpperCamelCase parent.name}}::Id; }

    {{#zcl_command_arguments}}
    {{zapTypeToDecodableClusterObjectType type}} {{asLowerCamelCase label}};
    {{/zcl_command_arguments}}
    CHIP_ERROR Decode(TLV::TLVReader &reader);
};
}; // namespace {{asUpperCamelCase name}}
{{#last}}
} // namespace Commands
{{/last}}
{{/zcl_commands}}

{{#zcl_attributes_server}}
{{#first}}
namespace Attributes {
{{/first}}
namespace {{asUpperCamelCase label}} {
    struct TypeInfo {
    {{! forceNotOptional=true because the optionality is on the attribute
        itself, but we want just the type of the attribute. }}
    {{#if entryType}}
        using Type = {{zapTypeToEncodableClusterObjectType entryType forceNotOptional=true}};
        using DecodableType = {{zapTypeToDecodableClusterObjectType entryType forceNotOptional=true}};
    {{else}}
        using Type = {{zapTypeToEncodableClusterObjectType type forceNotOptional=true}};
        using DecodableType = {{zapTypeToDecodableClusterObjectType type forceNotOptional=true}};
    {{/if}}

        static constexpr ClusterId GetClusterId() { return Clusters::{{asUpperCamelCase parent.name}}::Id; }
        static constexpr AttributeId GetAttributeId() { return Attributes::{{asUpperCamelCase label}}::Id; }
    };
} // namespace {{asUpperCamelCase label}}
{{#last}}
} // namespace Attributes
{{/last}}
{{/zcl_attributes_server}}
{{#zcl_events}}
{{#first}}
namespace Events {
{{/first}}
namespace {{asUpperCamelCase name}} {
static constexpr PriorityLevel kPriorityLevel = PriorityLevel::{{asUpperCamelCase priority}};
static constexpr EventId kEventId = {{asMEI manufacturerCode code}};

enum class Fields {
    {{#zcl_event_fields}}
    k{{asUpperCamelCase name}} = {{fieldIdentifier}},
    {{/zcl_event_fields}}
};

struct Type
{
public:
    static constexpr PriorityLevel priorityLevel = PriorityLevel::{{asUpperCamelCase priority}};
    static constexpr EventId eventId = {{asMEI manufacturerCode code}};
    static constexpr ClusterId GetClusterId() { return {{asUpperCamelCase parent.name}}::Id; }

    {{#zcl_event_fields}}
    {{zapTypeToEncodableClusterObjectType type}} {{asLowerCamelCase name}};
    {{/zcl_event_fields}}

    CHIP_ERROR Encode(TLV::TLVWriter &writer, TLV::Tag tag) const;
};

struct DecodableType {
public:
    static constexpr PriorityLevel GetPriorityLevel() { return kPriorityLevel; }
    static constexpr EventId GetEventId() { return kEventId; }
    static constexpr ClusterId GetClusterId() { return {{asUpperCamelCase parent.name}}::Id; }

    {{#zcl_event_fields}}
    {{zapTypeToDecodableClusterObjectType type}} {{asLowerCamelCase name}};
    {{/zcl_event_fields}}

    CHIP_ERROR Decode(TLV::TLVReader &reader);
};
} // namespace {{asUpperCamelCase name}}
{{#last}}
} // namespace Events
{{/last}}
{{/zcl_events}}
} // namespace {{asUpperCamelCase name}}
{{/zcl_clusters}}

} // namespace Clusters
} // namespace app
} // namespace chip
