{{> header}}

{{#if (chip_has_client_clusters)}}
#include "CHIPClusters.h"

#include <cstdint>

#include <support/BufferWriter.h>
#include <support/SafeInt.h>
#include <support/logging/CHIPLogging.h>
#include <system/SystemPacketBuffer.h>

#include <app/chip-zcl-zpro-codec.h>
#include <app/common/gen/ids/Attributes.h>
#include <app/util/basic-types.h>

#include <gen/CHIPClientCallbacks.h>
#include <lib/support/SafeInt.h>
#include <lib/support/CodeUtils.h>
#include <app/InteractionModelEngine.h>

#define COMMAND_HEADER(name, clusterId)                                                                                            \
    const char * kName = name;                                                                                                     \
    uint8_t seqNum     = mDevice->GetNextSequenceNumber();                                                                         \
                                                                                                                                   \
    PacketBufferWriter buf(System::PacketBufferHandle::New(kMaxBufferSize));                                                       \
    if (buf.IsNull())                                                                                                              \
    {                                                                                                                              \
        ChipLogError(Zcl, "Could not allocate packet buffer while trying to encode %s command", kName);                            \
        return CHIP_ERROR_INTERNAL;                                                                                                \
    }                                                                                                                              \
                                                                                                                                   \
    if (doEncodeApsFrame(buf, clusterId, kSourceEndpoint, mEndpoint, 0, 0, 0, 0, false))                                           \
    {

#define COMMAND_FOOTER()                                                                                                           \
    }                                                                                                                              \
    if (!buf.Fit())                                                                                                                \
    {                                                                                                                              \
        ChipLogError(Zcl, "Command %s can't fit in the allocated buffer", kName);                                                  \
    }                                                                                                                              \
    return SendCommand(seqNum, buf.Finalize(), onSuccessCallback, onFailureCallback);

namespace {
  // TODO: Find a way to calculate maximum message length for clusters
  //       https://github.com/project-chip/connectedhomeip/issues/965
  constexpr uint16_t kMaxBufferSize = 1024;

  // This is a global command, so the low bits are 0b00.  The command is
  // standard, so does not need a manufacturer code, and we're sending client
  // to server, so all the remaining bits are 0.
  constexpr uint8_t kFrameControlGlobalCommand = 0x00;

  // Pick source endpoint as 1 for now
  constexpr chip::EndpointId kSourceEndpoint = 1;

  const uint8_t kReportingDirectionReported = 0x00;
}

using namespace chip::app::Clusters;
using namespace chip::System;
using namespace chip::Encoding::LittleEndian;

namespace chip {
namespace Controller {

// TODO(#4502): onCompletion is not used by IM for now.
// TODO(#4503): length should be passed to commands when byte string is in argument list.
// TODO(#4503): Commands should take group id as an argument.

{{#chip_client_clusters}}

// {{asUpperCamelCase name}} Cluster Commands
{{#chip_cluster_commands}}
CHIP_ERROR {{asUpperCamelCase clusterName}}Cluster::{{asUpperCamelCase name}}(Callback::Cancelable * onSuccessCallback, Callback::Cancelable * onFailureCallback{{#chip_cluster_command_arguments}}, {{chipType}} {{asLowerCamelCase label}}{{/chip_cluster_command_arguments}})
{
    CHIP_ERROR err = CHIP_NO_ERROR;
    app::CommandSender * sender = nullptr;
    TLV::TLVWriter * writer     = nullptr;
    uint8_t argSeqNumber        = 0;

    // Used when encoding non-empty command. Suppress error message when encoding empty commands.
    (void) writer;
    (void) argSeqNumber;

    VerifyOrReturnError(mDevice != nullptr, CHIP_ERROR_INCORRECT_STATE);

    app::CommandPathParams cmdParams = { mEndpoint, /* group id */ 0, mClusterId, {{asUpperCamelCase parent.name}}::Commands::Ids::{{asUpperCamelCase name}},
                                         (chip::app::CommandPathFlags::kEndpointIdValid) };

    SuccessOrExit(err = chip::app::InteractionModelEngine::GetInstance()->NewCommandSender(&sender));

    SuccessOrExit(err = sender->PrepareCommand(cmdParams));

{{#chip_cluster_command_arguments}}
{{#first}}
    VerifyOrExit((writer = sender->GetCommandDataElementTLVWriter()) != nullptr, err = CHIP_ERROR_INCORRECT_STATE);
{{/first}}
    // {{asLowerCamelCase label}}: {{asLowerCamelCase type}}
    SuccessOrExit(err = writer->Put(TLV::ContextTag(argSeqNumber++), {{asLowerCamelCase label}}));
{{else}}
    // Command takes no arguments.
{{/chip_cluster_command_arguments}}

    SuccessOrExit(err = sender->FinishCommand());

    // #6308: This is a temporary solution before we fully support IM on application side and should be replaced by IMDelegate.
    mDevice->AddIMResponseHandler(sender, onSuccessCallback, onFailureCallback);

    err = mDevice->SendCommands(sender);

exit:
    // On error, we are responsible to close the sender.
    if (err != CHIP_NO_ERROR && sender != nullptr)
    {
        sender->Shutdown();
    }
    return err;
}

{{/chip_cluster_commands}}
// {{asUpperCamelCase name}} Cluster Attributes
CHIP_ERROR {{asCamelCased name false}}Cluster::DiscoverAttributes(Callback::Cancelable * onSuccessCallback, Callback::Cancelable * onFailureCallback)
{
    COMMAND_HEADER("Discover{{asUpperCamelCase name}}Attributes", {{asUpperCamelCase name}}::Id);
    buf.Put8(kFrameControlGlobalCommand)
       .Put8(seqNum)
       .Put32(Globals::Commands::Ids::DiscoverAttributes)
       .Put32(0x0000)
       .Put8(0xFF);
    COMMAND_FOOTER();
}

{{#chip_server_cluster_attributes}}
CHIP_ERROR {{asUpperCamelCase parent.name}}Cluster::ReadAttribute{{asUpperCamelCase name}}(Callback::Cancelable * onSuccessCallback, Callback::Cancelable * onFailureCallback)
{
    chip::app::AttributePathParams attributePath;
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = {{asHex code 8}};
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);
    return mDevice->SendReadAttributeRequest(attributePath, onSuccessCallback, onFailureCallback,{{#if isList}}{{asUpperCamelCase parent.name}}Cluster{{asUpperCamelCase name}}ListAttributeFilter{{else}}BasicAttributeFilter<{{chipCallback.name}}AttributeCallback>{{/if}});
}

{{#if isWritableAttribute}}
CHIP_ERROR {{asUpperCamelCase parent.name}}Cluster::WriteAttribute{{asUpperCamelCase name}}(Callback::Cancelable * onSuccessCallback, Callback::Cancelable * onFailureCallback, {{chipType}} value)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId         = mDevice->GetDeviceId();
    attributePath.mEndpointId     = mEndpoint;
    attributePath.mClusterId      = mClusterId;
    attributePath.mFieldId        = {{ asHex code 8 }};
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, value));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

{{/if}}
{{#if isReportableAttribute}}
CHIP_ERROR {{asUpperCamelCase parent.name}}Cluster::ConfigureAttribute{{asUpperCamelCase name}}(Callback::Cancelable * onSuccessCallback, Callback::Cancelable * onFailureCallback, uint16_t minInterval, uint16_t maxInterval{{#if isAnalog}}, {{chipType}} change{{/if}})
{
    COMMAND_HEADER("Report{{asUpperCamelCase parent.name}}{{asUpperCamelCase name}}", {{asUpperCamelCase parent.name}}::Id);
    buf.Put8(kFrameControlGlobalCommand)
       .Put8(seqNum)
       .Put32(Globals::Commands::Ids::ConfigureReporting)
       .Put8(kReportingDirectionReported)
       .Put32({{#if isGlobalAttribute}}Globals{{else}}{{asUpperCamelCase parent.name}}{{/if}}::Attributes::Ids::{{asUpperCamelCase name}})
       .Put8({{atomicTypeId}})
       .Put16(minInterval)
       .Put16(maxInterval);
    {{#if isAnalog}}
    buf.Put{{chipTypePutLength}}(static_cast<{{chipTypePutCastType}}>(change));
    {{/if}}
    COMMAND_FOOTER();
}

CHIP_ERROR {{asUpperCamelCase parent.name}}Cluster::ReportAttribute{{asUpperCamelCase name}}(Callback::Cancelable * onReportCallback)
{
    return RequestAttributeReporting({{asHex code 4}}, onReportCallback);
}

{{/if}}
{{/chip_server_cluster_attributes}}
{{/chip_client_clusters}}

} // namespace Controller
} // namespace chip
{{/if}}
