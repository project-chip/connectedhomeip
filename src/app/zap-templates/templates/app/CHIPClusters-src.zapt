{{> header}}
#include "CHIPClusters.h"

#include <cstdint>

#include "chip-zcl-zpro-codec-api.h"
#include <lib/support/Span.h>
#include <gen/CHIPClientCallbacks.h>
#include <lib/support/SafeInt.h>
#include <lib/support/CodeUtils.h>

namespace chip {
namespace Controller {

// TODO(#4502): onCompletion is not used by IM for now.
// TODO(#4503): length should be passed to commands when byte string is in argument list.
// TODO(#4503): Commands should take group id as an argument.

{{#chip_client_clusters}}

// {{asCamelCased name false}} Cluster Commands
{{#chip_server_cluster_commands}}
CHIP_ERROR {{asCamelCased clusterName false}}Cluster::{{asCamelCased name false}}(Callback::Cancelable * onSuccessCallback, Callback::Cancelable * onFailureCallback{{#chip_server_cluster_command_arguments}}, {{chipType}} {{asCamelCased label}}{{/chip_server_cluster_command_arguments}})
{
    CHIP_ERROR err = CHIP_NO_ERROR;
    app::CommandSender * sender = nullptr;
    TLV::TLVWriter * writer     = nullptr;
    uint8_t argSeqNumber        = 0;

    // Used when encoding non-empty command. Suppress error message when encoding empty commands.
    (void) writer;
    (void) argSeqNumber;

    VerifyOrReturnError(mDevice != nullptr, CHIP_ERROR_INCORRECT_STATE);

    app::CommandPathParams cmdParams = { mEndpoint, /* group id */ 0, mClusterId, k{{asCamelCased name false}}CommandId,
                                         (chip::app::CommandPathFlags::kEndpointIdValid) };

    SuccessOrExit(err = chip::app::InteractionModelEngine::GetInstance()->NewCommandSender(&sender));

    SuccessOrExit(err = sender->PrepareCommand(cmdParams));

{{#chip_server_cluster_command_arguments}}
{{#first}}
    VerifyOrExit((writer = sender->GetCommandDataElementTLVWriter()) != nullptr, err = CHIP_ERROR_INCORRECT_STATE);
{{/first}}
    // {{asCamelCased label}}: {{asCamelCased type}}
    SuccessOrExit(err = writer->Put(TLV::ContextTag(argSeqNumber++), {{asCamelCased label}}));
{{else}}
    // Command takes no arguments.
{{/chip_server_cluster_command_arguments}}

    SuccessOrExit(err = sender->FinishCommand());

    // #6308: This is a temporary solution before we fully support IM on application side and should be replaced by IMDelegate.
    mDevice->AddIMResponseHandler(sender, onSuccessCallback, onFailureCallback);

    err = mDevice->SendCommands(sender);

exit:
    // On error, we are responsible to close the sender.
    if (err != CHIP_NO_ERROR && sender != nullptr)
    {
        sender->Shutdown();
    }
    return err;
}

{{/chip_server_cluster_commands}}
// {{asCamelCased name false}} Cluster Attributes
CHIP_ERROR {{asCamelCased name false}}Cluster::DiscoverAttributes(Callback::Cancelable * onSuccessCallback, Callback::Cancelable * onFailureCallback)
{
    uint8_t seqNum = mDevice->GetNextSequenceNumber();
    System::PacketBufferHandle encodedCommand = encode{{asCamelCased name false}}ClusterDiscoverAttributes(seqNum, mEndpoint);
    return SendCommand(seqNum, std::move(encodedCommand), onSuccessCallback, onFailureCallback);
}
{{#chip_server_cluster_attributes}}
CHIP_ERROR {{asCamelCased parent.name false}}Cluster::ReadAttribute{{asCamelCased name false}}(Callback::Cancelable * onSuccessCallback, Callback::Cancelable * onFailureCallback)
{
    chip::app::AttributePathParams attributePath;
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = {{asHex code 4}};
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);
    return mDevice->SendReadAttributeRequest(attributePath, onSuccessCallback, onFailureCallback,
{{#if isList}}
        {{asCamelCased parent.name false}}Cluster{{asCamelCased name false}}ListAttributeFilter
{{else}}
         BasicAttributeFilter<{{asCallbackAttributeType atomicTypeId}}AttributeCallback>
{{/if}}
        );
}

{{#if (isWritableAttribute)}}
CHIP_ERROR {{asCamelCased parent.name false}}Cluster::WriteAttribute{{asCamelCased name false}}(Callback::Cancelable * onSuccessCallback, Callback::Cancelable * onFailureCallback, {{chipType}} value)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    chip::TLV::TLVWriter * writer = nullptr;
    attributePath.mNodeId         = mDevice->GetDeviceId();
    attributePath.mEndpointId     = mEndpoint;
    attributePath.mClusterId      = mClusterId;
    attributePath.mFieldId        = {{ asHex code 4 }};
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

{{#if (isString type)}}
    VerifyOrReturnError(CanCastTo<uint16_t>(value.size()), CHIP_ERROR_INVALID_ARGUMENT);
{{/if}}

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle->PrepareAttribute(attributePath));
    VerifyOrReturnError((writer = handle->GetAttributeDataElementTLVWriter()) != nullptr, CHIP_ERROR_INCORRECT_STATE);
{{#if (isString type)}}
    ReturnErrorOnFailure(writer->PutBytes(chip::TLV::ContextTag(chip::app::AttributeDataElement::kCsTag_Data), value.data(), static_cast<uint16_t>(value.size())));
{{else if (isBoolean type)}}
    ReturnErrorOnFailure(writer->PutBoolean(chip::TLV::ContextTag(chip::app::AttributeDataElement::kCsTag_Data), value));
{{else}}
    ReturnErrorOnFailure(writer->Put(chip::TLV::ContextTag(chip::app::AttributeDataElement::kCsTag_Data), value));
{{/if}}
    ReturnErrorOnFailure(handle->FinishAttribute());
    ReturnErrorOnFailure(mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback));
    return CHIP_NO_ERROR;
}

{{/if}}
{{#if (isReportableAttribute)}}
CHIP_ERROR {{asCamelCased parent.name false}}Cluster::ConfigureAttribute{{asCamelCased name false}}(Callback::Cancelable * onSuccessCallback, Callback::Cancelable * onFailureCallback, uint16_t minInterval, uint16_t maxInterval{{#if isAnalog}}, {{chipType}} change{{/if}})
{
    uint8_t seqNum = mDevice->GetNextSequenceNumber();
    System::PacketBufferHandle encodedCommand = encode{{asCamelCased parent.name false}}ClusterConfigure{{asCamelCased name false}}Attribute(seqNum, mEndpoint, minInterval, maxInterval{{#if isAnalog}}, change{{/if}});
    return SendCommand(seqNum, std::move(encodedCommand), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR {{asCamelCased parent.name false}}Cluster::ReportAttribute{{asCamelCased name false}}(Callback::Cancelable * onReportCallback)
{
    return RequestAttributeReporting({{asHex code 4}}, onReportCallback);
}

{{/if}}
{{/chip_server_cluster_attributes}}
{{/chip_client_clusters}}

} // namespace Controller
} // namespace chip
