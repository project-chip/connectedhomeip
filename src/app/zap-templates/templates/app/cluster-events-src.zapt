{{> header}}
#include <clusters/{{asUpperCamelCase name}}/Events.h>

#include <app/data-model/Decode.h>
#include <app/data-model/Encode.h>
#include <app/data-model/StructDecodeIterator.h>
#include <app/data-model/WrappedStructEncoder.h>

namespace chip {
namespace app {
namespace Clusters {
namespace {{asUpperCamelCase name}} {
namespace Events {
{{#zcl_events}}
namespace {{asUpperCamelCase name}} {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const{
    TLV::TLVType outer;
    ReturnErrorOnFailure(aWriter.StartContainer(aTag, TLV::kTLVType_Structure, outer));
    {{#zcl_event_fields}}
    {{#if_is_fabric_scoped_struct type cluster=../../name}}
    ReturnErrorOnFailure(DataModel::EncodeForRead(aWriter, TLV::ContextTag(Fields::k{{asUpperCamelCase name}}), GetFabricIndex(), {{asLowerCamelCase name}}));
    {{else}}
    ReturnErrorOnFailure(DataModel::Encode(aWriter, TLV::ContextTag(Fields::k{{asUpperCamelCase name}}), {{asLowerCamelCase name}}));
    {{/if_is_fabric_scoped_struct}}
    {{/zcl_event_fields}}
    return aWriter.EndContainer(outer);
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader &reader) {
    detail::StructDecodeIterator __iterator(reader);
    while (true) {
        uint8_t __context_tag  = 0;
        CHIP_ERROR err = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        {{#zcl_event_fields}}
        {{! NOTE: using if/else instead of switch because it seems to generate smaller code. ~}}
        if (__context_tag == to_underlying(Fields::k{{asUpperCamelCase name}}))
        {
            err = DataModel::Decode(reader, {{asLowerCamelCase name}});
        }
        else
        {{#last}}
        {
        }
        {{/last}}
        {{/zcl_event_fields}}

        ReturnErrorOnFailure(err);
    }
}
} // namespace {{asUpperCamelCase name}}.
{{/zcl_events}}
} // namespace Events
} // namespace {{asUpperCamelCase name}}
} // namespace Clusters
} // namespace app
} // namespace chip
