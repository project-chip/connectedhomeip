{{> header}}

#include "im-handler.h"

#include <app/CommandHandler.h>
#include <app/CommandSender.h>
#include <app/InteractionModelEngine.h>

#include <support/ReturnMacros.h>

namespace chip {
namespace app {
namespace cluster {

{{#chip_server_clusters}}

namespace {{asCamelCased name false}} {

void InitCluster(chip::app::InteractionModelEngine * ime)
{
    VerifyOrReturn(ime != nullptr);
{{#chip_server_cluster_commands}}
    ime->RegisterClusterCommandHandler(
        {{asCamelCased clusterName false}}::kClusterId,
        {{asCamelCased clusterName false}}::k{{asCamelCased name false}}CommandId,
        Command::CommandRoleId::kCommandHandlerId,
        Handle{{asType name}}CommandReceived
        );
{{/chip_server_cluster_commands}}
}

void ShutdownCluster(chip::app::InteractionModelEngine * ime)
{
    VerifyOrReturn(ime != nullptr);
{{#chip_server_cluster_commands}}
    ime->DeregisterClusterCommandHandler(
        {{asCamelCased clusterName false}}::kClusterId,
        {{asCamelCased clusterName false}}::k{{asCamelCased name false}}CommandId,
        Command::CommandRoleId::kCommandHandlerId
        );
{{/chip_server_cluster_commands}}
}

} // namespace {{asCamelCased name false}}

{{/chip_server_clusters}}

void InitClusters(chip::app::InteractionModelEngine * ime)
{
    VerifyOrReturn(ime != nullptr);
{{#chip_server_clusters}}
    {{asCamelCased name false}}::InitCluster(ime);
{{/chip_server_clusters}}
}

void ShutdownClusters(chip::app::InteractionModelEngine * ime)
{
    VerifyOrReturn(ime != nullptr);
{{#chip_server_clusters}}
    {{asCamelCased name false}}::ShutdownCluster(ime);
{{/chip_server_clusters}}
}

} // namespace cluster
} // namespace app
} // namespace chip
