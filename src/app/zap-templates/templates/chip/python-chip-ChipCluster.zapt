'''
{{> header}}
'''

import ctypes
from .ChipStack import *
from .ChipExceptions import *

'''
TODO(#4511): This file only sends cluster commands, should add more functions.
'''

__all__ = ["ChipCluster"]

class ChipCluster:
    def __init__(self, chipstack):
        self._ChipStack = chipstack

    def ListClusters(self):
        return {
{{#chip_server_clusters}}
            "{{asCamelCased name false}}": {
{{#chip_server_cluster_commands}}
                "{{asCamelCased name false}}": {
{{#chip_server_cluster_command_arguments}}
                    "{{asCamelCased label}}": "{{asPythonType chipType}}",
{{/chip_server_cluster_command_arguments}}
                },
{{/chip_server_cluster_commands}}
            },
{{/chip_server_clusters}}
        }

    def SendCommand(self, device: ctypes.c_void_p, cluster: str, command: str, endpoint: int, groupid: int, args):
        func = getattr(self, "Cluster{}_Command{}".format(cluster, command), None)
        if not func:
            raise UnknownCommand(cluster, command)
        func(device, endpoint, groupid, **args)

{{#chip_server_clusters}}
{{#chip_server_cluster_commands}}
    def Cluster{{asCamelCased clusterName false}}_Command{{asCamelCased name false}}(self, device: ctypes.c_void_p, ZCLendpoint: int, ZCLgroupid: int{{#chip_server_cluster_command_arguments}}, {{asCamelCased label}}: {{asPythonType chipType}}{{/chip_server_cluster_command_arguments}}):
{{#chip_server_cluster_command_arguments}}
{{#if (isByteString type)}}
{{else if (isString type)}}
        {{asCamelCased label}} = {{asCamelCased label}}.encode("utf-8") + b'\x00'
{{/if}}
{{/chip_server_cluster_command_arguments}}
        self._ChipStack.Call(
            lambda: self._chipLib.chip_ime_AppendCommand_{{asCamelCased clusterName false}}_{{asCamelCased name false}}(
                device, ZCLendpoint, ZCLgroupid{{#chip_server_cluster_command_arguments}}, {{asCamelCased label}}{{#if (isByteString type)}}, len({{asCamelCased label}}){{/if}}{{/chip_server_cluster_command_arguments}}
            )
        )

{{/chip_server_cluster_commands}}
{{/chip_server_clusters}}
    def InitLib(self, chipLib):
        self._chipLib = chipLib
{{#chip_server_clusters}}
        # Cluster {{asCamelCased name false}}
{{#chip_server_cluster_commands}}
        # Cluster {{asCamelCased clusterName false}} Command {{asCamelCased name false}}
        self._chipLib.chip_ime_AppendCommand_{{asCamelCased clusterName false}}_{{asCamelCased name false}}.argtypes = [ctypes.c_void_p, ctypes.c_uint8, ctypes.c_uint16{{#chip_server_cluster_command_arguments}}{{#if (isByteString type)}}, ctypes.c_char_p, ctypes.c_uint32{{else}}, ctypes.{{asPythonCType chipType}}{{/if}}{{/chip_server_cluster_command_arguments}}]
        self._chipLib.chip_ime_AppendCommand_{{asCamelCased clusterName false}}_{{asCamelCased name false}}.restype = ctypes.c_uint32
{{/chip_server_cluster_commands}}
{{/chip_server_clusters}}
