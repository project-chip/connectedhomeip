{{> header}}

#include <core/CHIPCore.h>

#include <app/CommandSender.h>
#include <app/InteractionModelEngine.h>
#include <lib/support/Span.h>

#include <controller/CHIPClusters.h>
#include <controller/CHIPDevice.h>

using namespace chip;
using namespace chip::app;

extern "C" {

{{#chip_server_clusters}}
// Cluster {{asCamelCased name false}}

{{#chip_server_cluster_commands}}
CHIP_ERROR chip_ime_AppendCommand_{{asCamelCased clusterName false}}_{{asCamelCased name false}}(chip::Controller::Device * device, chip::EndpointId ZCLendpointId, chip::GroupId ZCLgroupId{{#chip_server_cluster_command_arguments}}, {{#if (isString type)}}const uint8_t * {{asCamelCased label}}, uint32_t {{asCamelCased label}}_Len{{else}}{{chipType}} {{asCamelCased label}}{{/if}}{{/chip_server_cluster_command_arguments}})
{
    VerifyOrReturnError(device != nullptr, CHIP_ERROR_INVALID_ARGUMENT);
    chip::Controller::{{asCamelCased clusterName false}}Cluster cluster;
    (void) ZCLgroupId;
    cluster.Associate(device, ZCLendpointId);
    return cluster.{{asCamelCased name false}}(nullptr, nullptr{{#chip_server_cluster_command_arguments}}, {{#if (isString type)}}chip::ByteSpan({{asCamelCased label}}, {{asCamelCased label}}_Len){{else}}{{asCamelCased label}}{{/if}}
    {{/chip_server_cluster_command_arguments}});
}
{{/chip_server_cluster_commands}}

{{#chip_server_cluster_attributes}}
CHIP_ERROR chip_ime_ReadAttribute_{{asCamelCased parent.name false}}_{{asCamelCased name false}}(chip::Controller::Device * device, chip::EndpointId ZCLendpointId, chip::GroupId ZCLgroupId)
{
    VerifyOrReturnError(device != nullptr, CHIP_ERROR_INVALID_ARGUMENT);
    chip::Controller::{{asCamelCased parent.name false}}Cluster cluster;
    (void) ZCLgroupId;
    cluster.Associate(device, ZCLendpointId);
    return cluster.ReadAttribute{{asCamelCased name false}}(nullptr, nullptr);
}
{{/chip_server_cluster_attributes}}

// End of Cluster {{asCamelCased name false}}
{{/chip_server_clusters}}

}
