{{> header}}


#include <cstdint>
#include <cinttypes>

#include <gen/af-structs.h>
#include <gen/call-command-handler.h>
#include <gen/callback.h>
#include <gen/cluster-id.h>
#include <gen/command-id.h>
#include <util.h>

#include <app/InteractionModelEngine.h>
#include <gen/IMClusterCommandHandler.h>

#include "ember-compatibility-functions.h"

namespace chip {
namespace app {

// Cluster specific command parsing
// TODO: Take care of internal status of ember library.

namespace clusters {

{{#all_user_clusters}}
{{#if (user_cluster_has_enabled_command name side)}}
namespace {{asCamelCased name false}} {
{{#all_user_cluster_commands}}
{{#unless mfgCode}}
{{#if (isStrEqual clusterName parent.name)}}
{{#if (isCommandAvailable parent.side incoming outgoing commandSource name)}}
#if IM_HAVE_{{as_delimited_macro parent.name}}_CLUSTER_{{as_delimited_macro name}}_COMMAND
void On{{asCamelCased name false}}CommandCallback(app::Command* command, EndpointId ZCLEndpointId{{#zcl_command_arguments}}, {{#if (isString type)}}const uint8_t * {{asSymbol label}}{{else}}{{asUnderlyingZclType type}} {{asSymbol label}}{{/if}}{{/zcl_command_arguments}})
{
    emberAf{{asCamelCased parent.name false}}Cluster{{asCamelCased name false}}Callback({{#zcl_command_arguments}}{{asSymbol label}}{{#unless (isLastElement index count)}}, {{/unless}}{{/zcl_command_arguments}});
}
#endif

{{/if}}
{{/if}}
{{/unless}}
{{/all_user_cluster_commands}}
} // namespace {{asCamelCased name false}}
{{/if}}
{{/all_user_clusters}}

} // namespace clusters
} // namespace app
} // namespace chip
