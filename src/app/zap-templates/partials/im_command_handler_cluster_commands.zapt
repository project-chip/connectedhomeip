{{#if (zcl_command_arguments_count this.id)}}
expectArgumentCount = {{ zcl_command_arguments_count this.id }};
{{#zcl_command_arguments}}
{{#if (isCharString type)}}
const uint8_t * {{asSymbol label}};
{{else}}
{{asUnderlyingZclType type}} {{asSymbol label}};
{{/if}}
{{/zcl_command_arguments}}
bool argExists[{{zcl_command_arguments_count this.id}}];

memset(argExists, 0, sizeof argExists);

while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
{
  // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
  // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
  if (!TLV::IsContextTag(aDataTlv.GetTag()))
  {
    continue;
  }
  currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
  if (currentDecodeTagId < {{zcl_command_arguments_count this.id}})
  {
    if (argExists[currentDecodeTagId])
    {
      ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
      TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
      break;
    }
    else
    {
      argExists[currentDecodeTagId] = true;
      validArgumentCount++;
    }
  }
  switch (currentDecodeTagId)
  {
{{#zcl_command_arguments}}
    case {{index}}:
{{#if (isOctetString type)}}
    {
        const uint8_t * data = nullptr;
        TLVUnpackError = aDataTlv.GetDataPtr(data);
        {{asSymbol label}} = {{asUnderlyingZclType type}}(data, aDataTlv.GetLength());
    }
{{else if (isString type)}}
      // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
      TLVUnpackError = aDataTlv.GetDataPtr({{asSymbol label}});
{{else if isArray}}
      // Just for compatibility, we will add array type support in IM later.
      TLVUnpackError = aDataTlv.GetDataPtr(const_cast<const uint8_t *&>({{asSymbol label}}));
{{else}}
      TLVUnpackError = aDataTlv.Get({{asSymbol label}});
{{/if}}
      break;
{{/zcl_command_arguments}}
    default:
      // Unsupported tag, ignore it.
      ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
      break;
  }
  if (CHIP_NO_ERROR != TLVUnpackError)
  {
    break;
  }
}

if (CHIP_END_OF_TLV == TLVError)
{
  // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
  TLVError = CHIP_NO_ERROR;
}
{{/if}}

{{#if (zcl_command_arguments_count this.id)}}
if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && {{zcl_command_arguments_count this.id}} == validArgumentCount)
{
{{/if}}
// TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
wasHandled = emberAf{{asCamelCased parent.name false}}Cluster{{asCamelCased name false}}Callback(apCommandObj{{#zcl_command_arguments}}, {{#if (isCharString type)}}const_cast<uint8_t*>({{asSymbol label}}){{else}}{{asSymbol label}}{{/if}}{{/zcl_command_arguments}});
{{#if (zcl_command_arguments_count this.id)}}
}
{{/if}}
