{{#if (zcl_command_arguments_count this.id)}}
// We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
// When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
// Any error value TLVUnpackError means we have received an illegal value.
CHIP_ERROR TLVError = CHIP_NO_ERROR;
CHIP_ERROR TLVUnpackError = CHIP_NO_ERROR;
{{#zcl_command_arguments}}
{{#if (isOctetString type)}}
chip::ByteSpan {{asSymbol label}};
{{else if (isString type)}}
const uint8_t * {{asSymbol label}};
{{else}}
{{asUnderlyingZclType type}} {{asSymbol label}};
{{/if}}
bool {{asSymbol label}}Exists = false;
{{/zcl_command_arguments}}
uint32_t validArgumentCount = 0;

while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
{
  switch (TLV::TagNumFromTag(aDataTlv.GetTag()))
  {
{{#zcl_command_arguments}}
    case {{index}}:
      if ({{asSymbol label}}Exists)
      {
            ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
            TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
            break;
      }
{{#if (isOctetString type)}}
    {
        const uint8_t * data = nullptr;
        TLVUnpackError = aDataTlv.GetDataPtr(data);
        {{asSymbol label}} = chip::ByteSpan(data, aDataTlv.GetLength());
    }
{{else if (isString type)}}
      // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
      TLVUnpackError = aDataTlv.GetDataPtr({{asSymbol label}});
{{else if isArray}}
      // Just for compatibility, we will add array type support in IM later.
      TLVUnpackError = aDataTlv.GetDataPtr(const_cast<const uint8_t *&>({{asSymbol label}}));
{{else}}
      TLVUnpackError = aDataTlv.Get({{asSymbol label}});
{{/if}}
      if (CHIP_NO_ERROR == TLVUnpackError)
      {
            {{asSymbol label}}Exists = true;
            validArgumentCount++;
      }
      break;
{{/zcl_command_arguments}}
    default:
      // Unsupported tag, ignore it.
      ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
      break;
  }
  if (TLVUnpackError != CHIP_NO_ERROR)
  {
    ChipLogProgress(Zcl, "Failed to decode TLV data with tag %" PRIx32 ": %" PRId32, TLV::TagNumFromTag(aDataTlv.GetTag()), TLVUnpackError);
    break;
  }
}

if (CHIP_END_OF_TLV == TLVError)
{
      // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
      TLVError = CHIP_NO_ERROR;
}
else
{
      ChipLogProgress(Zcl, "Failed to decode TLV data: %" PRId32, TLVError);
}
{{/if}}

{{#if (zcl_command_arguments_count this.id)}}
// TODO(#5590) We should encode a response of status code for invalid TLV.
if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && {{zcl_command_arguments_count this.id}} == validArgumentCount)
{
{{/if}}
// TODO(#5098) We should pass the Command Object and EndpointId to the cluster callbacks.
emberAf{{asCamelCased parent.name false}}Cluster{{asCamelCased name false}}Callback(apCommandObj{{#zcl_command_arguments}}, {{#if (isCharString type)}}const_cast<uint8_t*>({{asSymbol label}}){{else}}{{asSymbol label}}{{/if}}{{/zcl_command_arguments}});
{{#if (zcl_command_arguments_count this.id)}}
}
else
{
      apCommandObj->AddStatusCode(nullptr, Protocols::SecureChannel::GeneralStatusCode::kBadRequest, Protocols::SecureChannel::Id,
                      Protocols::SecureChannel::kProtocolCodeGeneralFailure);
      ChipLogProgress(Zcl, "Failed to dispatch command, %d/%" PRIu32 " arguments parsed, TLVError=%" PRIu32 ", UnpackError=%" PRIu32, {{zcl_command_arguments_count this.id}}, validArgumentCount, TLVError, TLVUnpackError);
}
{{/if}}
