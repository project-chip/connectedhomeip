{{#if header}}
namespace {{asUpperCamelCase name}} {
    enum class Fields {
    {{#zcl_struct_items}}
    k{{asUpperCamelCase label}} = {{fieldIdentifier}},
    {{/zcl_struct_items}}
    };

    struct Type {
    public:
        {{#zcl_struct_items}}
        {{zapTypeToEncodableClusterObjectType type}} {{asLowerCamelCase label}}{{> cluster_objects_field_init}};
        {{/zcl_struct_items}}

        CHIP_ERROR Encode(TLV::TLVWriter &writer, TLV::Tag tag) const;
        {{#unless struct_contains_array}}
        {{#if struct_is_fabric_scoped}}
        CHIP_ERROR Decode(TLV::TLVReader &reader, const chip::Optional<FabricIndex> & overwriteFabricIndex);
        {{else}}
        CHIP_ERROR Decode(TLV::TLVReader &reader);
        {{/if}}
        {{/unless}}
        {{#if struct_is_fabric_scoped}}
        bool MatchesFabricIndex(FabricIndex fabricIndex_) const {
            return {{ asLowerCamelCase struct_fabric_idx_field }} == fabricIndex_;
        }
        {{/if}}
    };

    {{#if struct_contains_array}}
    struct DecodableType {
    public:
        {{#zcl_struct_items}}
        {{zapTypeToDecodableClusterObjectType type}} {{asLowerCamelCase label}}{{> cluster_objects_field_init}};
        {{/zcl_struct_items}}

        {{#if struct_is_fabric_scoped}}
        bool MatchesFabricIndex(FabricIndex fabricIndex_) const {
            return {{ asLowerCamelCase struct_fabric_idx_field }} == fabricIndex_;
        }

        CHIP_ERROR Decode(TLV::TLVReader &reader, const chip::Optional<FabricIndex> & overwriteFabricIndex);
        {{else}}
        CHIP_ERROR Decode(TLV::TLVReader &reader);
        {{/if}}
    };
    {{else}}
    using DecodableType = Type;
    {{/if}}

} // namespace {{asUpperCamelCase name}}
{{else}}
namespace {{asUpperCamelCase name}} {
CHIP_ERROR Type::Encode(TLV::TLVWriter &writer, TLV::Tag tag) const{
    TLV::TLVType outer;
    ReturnErrorOnFailure(writer.StartContainer(tag, TLV::kTLVType_Structure, outer));
    {{#zcl_struct_items}}
    ReturnErrorOnFailure(DataModel::Encode(writer, TLV::ContextTag(to_underlying(Fields::k{{asUpperCamelCase label}})), {{asLowerCamelCase label}}));
    {{/zcl_struct_items}}
    ReturnErrorOnFailure(writer.EndContainer(outer));
    return CHIP_NO_ERROR;
}

{{#if struct_is_fabric_scoped}}
CHIP_ERROR DecodableType::Decode(TLV::TLVReader &reader, const Optional<FabricIndex> & overwriteFabricIndex) {
{{else}}
CHIP_ERROR DecodableType::Decode(TLV::TLVReader &reader) {
{{/if}}
    CHIP_ERROR err = CHIP_NO_ERROR;
    TLV::TLVType outer;
    VerifyOrReturnError(TLV::kTLVType_Structure == reader.GetType(), CHIP_ERROR_WRONG_TLV_TYPE);
    err = reader.EnterContainer(outer);
    ReturnErrorOnFailure(err);
    while ((err = reader.Next()) == CHIP_NO_ERROR) {
        VerifyOrReturnError(TLV::IsContextTag(reader.GetTag()), CHIP_ERROR_INVALID_TLV_TAG);
        switch (TLV::TagNumFromTag(reader.GetTag()))
        {
            {{#zcl_struct_items}}
            case to_underlying(Fields::k{{asUpperCamelCase label}}):
                ReturnErrorOnFailure(DataModel::Decode(reader, {{asLowerCamelCase label}}));
                break;
            {{/zcl_struct_items}}
            default:
                break;
        }
    }

    VerifyOrReturnError(err == CHIP_END_OF_TLV, err);
    ReturnErrorOnFailure(reader.ExitContainer(outer));

{{#if struct_is_fabric_scoped}}
    if (overwriteFabricIndex.HasValue()) {
        {{ asLowerCamelCase struct_fabric_idx_field }} = overwriteFabricIndex.Value();
    }
{{/if}}

    return CHIP_NO_ERROR;
}

} // namespace {{asUpperCamelCase name}}
{{/if}}
