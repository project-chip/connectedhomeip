/**
 *
 *    Copyright (c) 2020 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *    @file
 *      This file provides message processing definitions that are normally generated by the
 *      ZCL Advanced Platform (ZAP) generator for use in the CHIP ZCL
 *      Application Layer. These declarations are provided here for the
 *      purposes of unit testing the CHIP ZCL Application Layer
 *
 */

// Enclosing macro to prevent multiple inclusion
#ifndef CHIP_ZCL_COMMAND_PARSE_HEADER
#define CHIP_ZCL_COMMAND_PARSE_HEADER

#include "gen-types.h"

#define ZCL_DIRECTION_CLIENT_TO_SERVER 0
#define ZCL_DIRECTION_SERVER_TO_CLIENT 1

// On-Off Cluster Id
#define ZCL_ON_OFF_CLUSTER_ID 0x0006

// Command types for cluster: On/off
// Cluster specification level: zcl-7.0-07-5123-07

// Client to server
#define ZCL_OFF_COMMAND_ID 0x00                         // Ver.: always
#define ZCL_ON_COMMAND_ID 0x01                          // Ver.: always
#define ZCL_TOGGLE_COMMAND_ID 0x02                      // Ver.: always
#define ZCL_OFF_WITH_EFFECT_COMMAND_ID 0x40             // Ver.: since zll-1.0-11-0037-10
#define ZCL_ON_WITH_RECALL_GLOBAL_SCENE_COMMAND_ID 0x41 // Ver.: since zll-1.0-11-0037-10
#define ZCL_ON_WITH_TIMED_OFF_COMMAND_ID 0x42           // Ver.: since zll-1.0-11-0037-10

// This is a set of generated prototype for functions that parse the
// the incomming message, and call appropriate command handler.
ChipZclStatus_t chipZclClusterSpecificCommandParse(ChipZclCommandContext_t * context);

// Cluster: On/off, server
ChipZclStatus_t chipZclOnOffClusterServerCommandParse(ChipZclCommandContext_t * context);

void chipZclClusterOnOffServerCommandOffRequestHandler(const ChipZclCommandContext_t * context,
                                                       const ChipZclClusterOnOffServerCommandOffRequest_t * request);
void chipZclClusterOnOffServerCommandOnRequestHandler(const ChipZclCommandContext_t * context,
                                                      const ChipZclClusterOnOffServerCommandOnRequest_t * request);
void chipZclClusterOnOffServerCommandToggleRequestHandler(const ChipZclCommandContext_t * context,
                                                          const ChipZclClusterOnOffServerCommandToggleRequest_t * request);

#endif // CHIP_ZCL_COMMAND_PARSE_HEADER
