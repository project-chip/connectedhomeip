/**
 *
 *    Copyright (c) 2020 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *    @file
 *      This file provides types that are normally generated by the
 *      ZCL Advanced Platform (ZAP) generator for use in the CHIP ZCL
 *      Application Layer. These declarations are provided here for the
 *      purposes of unit testing the CHIP ZCL Application Layer
 *
 */

// Enclosing macro to prevent multiple inclusion
#ifndef CHIP_ZCL_GEN_TYPES_HEADER
#define CHIP_ZCL_GEN_TYPES_HEADER

// General Command structs
#define CHIP_ZCL_ATTRIBUTE_REQUEST_MAX 0xff
typedef struct
{
    uint16_t count;
    ChipZclAttributeId_t * attributes;
} ChipZclGeneralCommandReadAttributesRequest_t;

// Basic cluster server (0x0000) - ResetToFactoryDefaults (0x00) command.
typedef struct
{
    bool dummy;
} ChipZclClusterBasicServerCommandResetToFactoryDefaultsRequest_t;
typedef struct
{
    enum8_t status;
} ChipZclClusterBasicServerCommandResetToFactoryDefaultsResponse_t;

ChipZclStatus_t chipZclSendClusterBasicServerCommandResetToFactoryDefaultsResponse(
    const ChipZclCommandContext_t * context, const ChipZclClusterBasicServerCommandResetToFactoryDefaultsResponse_t * response);

// -----------------------------------------------------------------------------
// On/off cluster (0x0006).

// On/off cluster client (0x0006).
extern const ChipZclClusterSpec_t chipZclClusterOnOffClientSpec;

// On/off cluster client (0x0006) - attribute ids.
enum
{
    CHIP_ZCL_CLUSTER_ON_OFF_CLIENT_ATTRIBUTE_ON_OFF_CLUSTER_CLUSTER_REVISION_CLIENT = 0xFFFD,
    CHIP_ZCL_CLUSTER_ON_OFF_CLIENT_ATTRIBUTE_ON_OFF_CLUSTER_REPORTING_STATUS_CLIENT = 0xFFFE,
};

// On/off cluster server (0x0006).
extern const ChipZclClusterSpec_t chipZclClusterOnOffServerSpec;

// On/off cluster server (0x0006) - attribute ids.
enum
{
    CHIP_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_ON_OFF                                 = 0x0000,
    CHIP_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_GLOBAL_SCENE_CONTROL                   = 0x4000,
    CHIP_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_ON_TIME                                = 0x4001,
    CHIP_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_OFF_WAIT_TIME                          = 0x4002,
    CHIP_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_START_UP_ON_OFF                        = 0x4003,
    CHIP_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_ON_OFF_CLUSTER_CLUSTER_REVISION_SERVER = 0xFFFD,
    CHIP_ZCL_CLUSTER_ON_OFF_SERVER_ATTRIBUTE_ON_OFF_CLUSTER_REPORTING_STATUS_SERVER = 0xFFFE,
};

// On/off cluster server (0x0006) - command ids.
enum
{
    CHIP_ZCL_CLUSTER_ON_OFF_SERVER_COMMAND_OFF                         = 0x00,
    CHIP_ZCL_CLUSTER_ON_OFF_SERVER_COMMAND_ON                          = 0x01,
    CHIP_ZCL_CLUSTER_ON_OFF_SERVER_COMMAND_TOGGLE                      = 0x02,
    CHIP_ZCL_CLUSTER_ON_OFF_SERVER_COMMAND_OFF_WITH_EFFECT             = 0x40,
    CHIP_ZCL_CLUSTER_ON_OFF_SERVER_COMMAND_ON_WITH_RECALL_GLOBAL_SCENE = 0x41,
    CHIP_ZCL_CLUSTER_ON_OFF_SERVER_COMMAND_ON_WITH_TIMED_OFF           = 0x42,
};

// On/off cluster server (0x0006) - Off (0x00) command.
typedef struct
{
    bool dummy;
} ChipZclClusterOnOffServerCommandOffRequest_t;
typedef struct
{
    enum8_t status;
} ChipZclClusterOnOffServerCommandOffResponse_t;
ChipZclStatus_t chipZclSendClusterOnOffServerCommandOffResponse(const ChipZclCommandContext_t * context,
                                                                const ChipZclClusterOnOffServerCommandOffResponse_t * response);

// On/off cluster server (0x0006) - On (0x01) command.
typedef struct
{
    bool dummy;
} ChipZclClusterOnOffServerCommandOnRequest_t;
typedef struct
{
    enum8_t status;
} ChipZclClusterOnOffServerCommandOnResponse_t;
ChipZclStatus_t chipZclSendClusterOnOffServerCommandOnResponse(const ChipZclCommandContext_t * context,
                                                               const ChipZclClusterOnOffServerCommandOnResponse_t * response);

// On/off cluster server (0x0006) - Toggle (0x02) command.
typedef struct
{
    bool dummy;
} ChipZclClusterOnOffServerCommandToggleRequest_t;
typedef struct
{
    enum8_t status;
} ChipZclClusterOnOffServerCommandToggleResponse_t;
ChipZclStatus_t
chipZclSendClusterOnOffServerCommandToggleResponse(const ChipZclCommandContext_t * context,
                                                   const ChipZclClusterOnOffServerCommandToggleResponse_t * response);

// -----------------------------------------------------------------------------
// Level Control cluster (0x0008).

// Level Control cluster client (0x0008).
extern const ChipZclClusterSpec_t chipZclClusterLevelControlClientSpec;

// Level Control cluster client (0x0008) - attribute ids.
enum
{
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_CLIENT_ATTRIBUTE_LEVEL_CONTROL_CLUSTER_CLUSTER_REVISION_CLIENT = 0xFFFD,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_CLIENT_ATTRIBUTE_LEVEL_CONTROL_CLUSTER_REPORTING_STATUS_CLIENT = 0xFFFE,
};

// Level Control cluster server (0x0008).
extern const ChipZclClusterSpec_t chipZclClusterLevelControlServerSpec;

// Level Control cluster server (0x0008) - attribute ids.
enum
{
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_CURRENT_LEVEL                                 = 0x0000,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_LEVEL_CONTROL_REMAINING_TIME                  = 0x0001,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_OPTIONS                                       = 0x000F,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_ON_OFF_TRANSITION_TIME                        = 0x0010,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_ON_LEVEL                                      = 0x0011,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_ON_TRANSITION_TIME                            = 0x0012,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_OFF_TRANSITION_TIME                           = 0x0013,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_DEFAULT_MOVE_RATE                             = 0x0014,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_START_UP_CURRENT_LEVEL                        = 0x4000,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_LEVEL_CONTROL_CLUSTER_CLUSTER_REVISION_SERVER = 0xFFFD,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_ATTRIBUTE_LEVEL_CONTROL_CLUSTER_REPORTING_STATUS_SERVER = 0xFFFE,
};

// Level Control cluster server (0x0008) - command ids.
enum
{
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COMMAND_MOVE_TO_LEVEL             = 0x00,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COMMAND_MOVE                      = 0x01,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COMMAND_STEP                      = 0x02,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COMMAND_STOP                      = 0x03,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COMMAND_MOVE_TO_LEVEL_WITH_ON_OFF = 0x04,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COMMAND_MOVE_WITH_ON_OFF          = 0x05,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COMMAND_STEP_WITH_ON_OFF          = 0x06,
    CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COMMAND_STOP_WITH_ON_OFF          = 0x07,
};

// Level Control cluster server (0x0008) - MoveToLevel (0x00) command.
typedef struct
{
    uint8_t level;
    uint16_t transitionTime;
} ChipZclClusterLevelControlServerCommandMoveToLevelRequest_t;
typedef struct
{
    enum8_t status;
} ChipZclClusterLevelControlServerCommandMoveToLevelResponse_t;
ChipZclStatus_t chipZclSendClusterLevelControlServerCommandMoveToLevelResponse(
    const ChipZclCommandContext_t * context, const ChipZclClusterLevelControlServerCommandMoveToLevelResponse_t * response);

// Level Control cluster server (0x0008) - Move (0x01) command.
typedef struct
{
    uint8_t moveMode;
    uint8_t rate;
} ChipZclClusterLevelControlServerCommandMoveRequest_t;
typedef struct
{
    enum8_t status;
} ChipZclClusterLevelControlServerCommandMoveResponse_t;
ChipZclStatus_t
chipZclSendClusterLevelControlServerCommandMoveResponse(const ChipZclCommandContext_t * context,
                                                        const ChipZclClusterLevelControlServerCommandMoveResponse_t * response);

// Level Control cluster server (0x0008) - Step (0x02) command.
typedef struct
{
    uint8_t stepMode;
    uint8_t stepSize;
    uint16_t transitionTime;
} ChipZclClusterLevelControlServerCommandStepRequest_t;
typedef struct
{
    enum8_t status;
} ChipZclClusterLevelControlServerCommandStepResponse_t;
ChipZclStatus_t
zapSendClusterLevelControlServerCommandStepResponse(const ChipZclCommandContext_t * context,
                                                    const ChipZclClusterLevelControlServerCommandStepResponse_t * response);

// Level Control cluster server (0x0008) - Stop (0x03) command.
typedef struct
{
    bool dummy;
} ChipZclClusterLevelControlServerCommandStopRequest_t;
typedef struct
{
    enum8_t status;
} ChipZclClusterLevelControlServerCommandStopResponse_t;
ChipZclStatus_t
chipZclSendClusterLevelControlServerCommandStopResponse(const ChipZclCommandContext_t * context,
                                                        const ChipZclClusterLevelControlServerCommandStopResponse_t * response);

// Level Control cluster server (0x0008) - MoveToLevelWithOnOff (0x04) command.
typedef struct
{
    uint8_t level;
    uint16_t transitionTime;
} ChipZclClusterLevelControlServerCommandMoveToLevelWithOnOffRequest_t;
typedef struct
{
    enum8_t status;
} ChipZclClusterLevelControlServerCommandMoveToLevelWithOnOffResponse_t;
ChipZclStatus_t chipZclSendClusterLevelControlServerCommandMoveToLevelWithOnOffResponse(
    const ChipZclCommandContext_t * context,
    const ChipZclClusterLevelControlServerCommandMoveToLevelWithOnOffResponse_t * response);

// Level Control cluster server (0x0008) - MoveWithOnOff (0x05) command.
typedef struct
{
    uint8_t moveMode;
    uint8_t rate;
} ChipZclClusterLevelControlServerCommandMoveWithOnOffRequest_t;
typedef struct
{
    enum8_t status;
} ChipZclClusterLevelControlServerCommandMoveWithOnOffResponse_t;
ChipZclStatus_t chipZclSendClusterLevelControlServerCommandMoveWithOnOffResponse(
    const ChipZclCommandContext_t * context, const ChipZclClusterLevelControlServerCommandMoveWithOnOffResponse_t * response);

// Level Control cluster server (0x0008) - StepWithOnOff (0x06) command.
typedef struct
{
    uint8_t stepMode;
    uint8_t stepSize;
    uint16_t transitionTime;
} ChipZclClusterLevelControlServerCommandStepWithOnOffRequest_t;
typedef struct
{
    enum8_t status;
} ChipZclClusterLevelControlServerCommandStepWithOnOffResponse_t;
ChipZclStatus_t chipZclSendClusterLevelControlServerCommandStepWithOnOffResponse(
    const ChipZclCommandContext_t * context, const ChipZclClusterLevelControlServerCommandStepWithOnOffResponse_t * response);

// Level Control cluster server (0x0008) - StopWithOnOff (0x07) command.
typedef struct
{
    bool dummy;
} ChipZclClusterLevelControlServerCommandStopWithOnOffRequest_t;
typedef struct
{
    enum8_t status;
} ChipZclClusterLevelControlServerCommandStopWithOnOffResponse_t;
ChipZclStatus_t chipZclSendClusterLevelControlServerCommandStopWithOnOffResponse(
    const ChipZclCommandContext_t * context, const ChipZclClusterLevelControlServerCommandStopWithOnOffResponse_t * response);

// -----------------------------------------------------------------------------
// Identify cluster (0x0003).

// Identify cluster client (0x0003).
extern const ChipZclClusterSpec_t chipZclClusterIdentifyClientSpec;

// Identify cluster client (0x0003) - attribute ids.
enum
{
    CHIP_ZCL_CLUSTER_IDENTIFY_CLIENT_ATTRIBUTE_IDENTIFY_CLUSTER_CLUSTER_REVISION_CLIENT = 0xFFFD,
    CHIP_ZCL_CLUSTER_IDENTIFY_CLIENT_ATTRIBUTE_IDENTIFY_CLUSTER_REPORTING_STATUS_CLIENT = 0xFFFE,
};

// Identify cluster server (0x0003).
extern const ChipZclClusterSpec_t chipZclClusterIdentifyServerSpec;

// Identify cluster server (0x0003) - attribute ids.
enum
{
    CHIP_ZCL_CLUSTER_IDENTIFY_SERVER_ATTRIBUTE_IDENTIFY_TIME                            = 0x0000,
    CHIP_ZCL_CLUSTER_IDENTIFY_SERVER_ATTRIBUTE_COMMISSION_STATE                         = 0x0001,
    CHIP_ZCL_CLUSTER_IDENTIFY_SERVER_ATTRIBUTE_IDENTIFY_CLUSTER_CLUSTER_REVISION_SERVER = 0xFFFD,
    CHIP_ZCL_CLUSTER_IDENTIFY_SERVER_ATTRIBUTE_IDENTIFY_CLUSTER_REPORTING_STATUS_SERVER = 0xFFFE,
};

// Identify cluster server (0x0003) - command ids.
enum
{
    CHIP_ZCL_CLUSTER_IDENTIFY_SERVER_COMMAND_IDENTIFY                = 0x00,
    CHIP_ZCL_CLUSTER_IDENTIFY_SERVER_COMMAND_IDENTIFY_QUERY          = 0x01,
    CHIP_ZCL_CLUSTER_IDENTIFY_SERVER_COMMAND_E_Z_MODE_INVOKE         = 0x02,
    CHIP_ZCL_CLUSTER_IDENTIFY_SERVER_COMMAND_UPDATE_COMMISSION_STATE = 0x03,
    CHIP_ZCL_CLUSTER_IDENTIFY_SERVER_COMMAND_TRIGGER_EFFECT          = 0x40,
};

// Identify cluster server (0x0003) - Identify (0x00) command.
typedef struct
{
    uint16_t identifyTime;
} ChipZclClusterIdentifyServerCommandIdentifyRequest_t;
typedef struct
{
    enum8_t status;
} ChipZclClusterIdentifyServerCommandIdentifyResponse_t;
ChipZclStatus_t
chipZclSendClusterIdentifyServerCommandIdentifyResponse(const ChipZclCommandContext_t * context,
                                                        const ChipZclClusterIdentifyServerCommandIdentifyResponse_t * response);

// Identify cluster server (0x0003) - IdentifyQuery (0x01) command.
typedef struct
{
    bool dummy;
} ChipZclClusterIdentifyServerCommandIdentifyQueryRequest_t;
typedef struct
{
    uint16_t timeout;
} ChipZclClusterIdentifyServerCommandIdentifyQueryResponse_t;
ChipZclStatus_t chipZclSendClusterIdentifyServerCommandIdentifyQueryResponse(
    const ChipZclCommandContext_t * context, const ChipZclClusterIdentifyServerCommandIdentifyQueryResponse_t * response);

// Identify cluster server (0x0003) - EZModeInvoke (0x02) command.
typedef struct
{
    uint8_t action;
} ChipZclClusterIdentifyServerCommandEZModeInvokeRequest_t;
typedef struct
{
    enum8_t status;
} ChipZclClusterIdentifyServerCommandEZModeInvokeResponse_t;
ChipZclStatus_t chipZclSendClusterIdentifyServerCommandEZModeInvokeResponse(
    const ChipZclCommandContext_t * context, const ChipZclClusterIdentifyServerCommandEZModeInvokeResponse_t * response);

// Identify cluster server (0x0003) - UpdateCommissionState (0x03) command.
typedef struct
{
    uint8_t action;
    uint8_t commissionStateMask;
} ChipZclClusterIdentifyServerCommandUpdateCommissionStateRequest_t;
typedef struct
{
    enum8_t status;
} ChipZclClusterIdentifyServerCommandUpdateCommissionStateResponse_t;
ChipZclStatus_t chipZclSendClusterIdentifyServerCommandUpdateCommissionStateResponse(
    const ChipZclCommandContext_t * context, const ChipZclClusterIdentifyServerCommandUpdateCommissionStateResponse_t * response);

// Identify cluster server (0x0003) - TriggerEffect (0x40) command.
typedef struct
{
    uint8_t effectId;
    uint8_t effectVariant;
} ChipZclClusterIdentifyServerCommandTriggerEffectRequest_t;
typedef struct
{
    enum8_t status;
} ChipZclClusterIdentifyServerCommandTriggerEffectResponse_t;
ChipZclStatus_t chipZclSendClusterIdentifyServerCommandTriggerEffectResponse(
    const ChipZclCommandContext_t * context, const ChipZclClusterIdentifyServerCommandTriggerEffectResponse_t * response);

// -----------------------------------------------------------------------------
// Endpoints.

#define CHIP_ZCL_CLUSTER_BASIC_SERVER_COUNT 1
#define CHIP_ZCL_CLUSTER_IDENTIFY_SERVER_COUNT 1
#define CHIP_ZCL_CLUSTER_GROUPS_SERVER_COUNT 1
#define CHIP_ZCL_CLUSTER_SCENES_SERVER_COUNT 1
#define CHIP_ZCL_CLUSTER_ON_OFF_SERVER_COUNT 1
#define CHIP_ZCL_CLUSTER_LEVEL_CONTROL_SERVER_COUNT 1
#define CHIP_ZCL_CLUSTER_OTA_BOOTLOAD_CLIENT_COUNT 1

#endif // CHIP_ZCL_GEN_TYPES_HEADER