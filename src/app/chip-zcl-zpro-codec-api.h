/**
 *
 *    Copyright (c) 2020 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
// This file is generated by ZAP.  Please do not edit manually.
//
//

#ifndef CHIP_ZCL_ZPRO_CODEC_API_H
#define CHIP_ZCL_ZPRO_CODEC_API_H

#include <app/util/basic-types.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/*----------------------------------------------------------------------------*\
| Cluster Name                                                        |   ID   |
|---------------------------------------------------------------------+--------|
| BarrierControl                                                      | 0x0103 |
| Basic                                                               | 0x0000 |
| ColorControl                                                        | 0x0300 |
| DoorLock                                                            | 0x0101 |
| Groups                                                              | 0x0004 |
| IASZone                                                             | 0x0500 |
| Identify                                                            | 0x0003 |
| Level                                                               | 0x0008 |
| OnOff                                                               | 0x0006 |
| Scenes                                                              | 0x0005 |
| TemperatureMeasurement                                              | 0x0402 |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster BarrierControl                                              | 0x0103 |
|------------------------------------------------------------------------------|
| Responses:                                                          |        |
|                                                                     |        |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * GoToPercent                                                       |   0x00 |
| * Stop                                                              |   0x01 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * MovingState                                                       | 0x0001 |
| * SafetyStatus                                                      | 0x0002 |
| * Capabilities                                                      | 0x0003 |
| * BarrierPosition                                                   | 0x000A |
\*----------------------------------------------------------------------------*/

/**
 * @brief
 *    Encode an go-to-percent command for BarrierControl server into buffer including the APS frame
 */
uint16_t encodeBarrierControlClusterGoToPercentCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                       uint8_t percentOpen);

/**
 * @brief
 *    Encode an stop command for BarrierControl server into buffer including the APS frame
 */
uint16_t encodeBarrierControlClusterStopCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a discover command for  server into buffer including the APS frame
 */
uint16_t encodeBarrierControlClusterDiscoverAttributes(uint8_t * buffer, uint16_t buf_length,
                                                       chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the moving-state attribute for  server into buffer including the APS frame
 */
uint16_t encodeBarrierControlClusterReadMovingStateAttribute(uint8_t * buffer, uint16_t buf_length,
                                                             chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a report command for the moving-state attribute for  server into buffer including the APS frame
 */
uint16_t encodeBarrierControlClusterReportMovingStateAttribute(uint8_t * buffer, uint16_t buf_length,
                                                               chip::EndpointId destination_endpoint, uint16_t min_interval,
                                                               uint16_t max_interval);

/**
 * @brief
 *    Encode a read command for the safety-status attribute for  server into buffer including the APS frame
 */
uint16_t encodeBarrierControlClusterReadSafetyStatusAttribute(uint8_t * buffer, uint16_t buf_length,
                                                              chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a report command for the safety-status attribute for  server into buffer including the APS frame
 */
uint16_t encodeBarrierControlClusterReportSafetyStatusAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                chip::EndpointId destination_endpoint, uint16_t min_interval,
                                                                uint16_t max_interval);

/**
 * @brief
 *    Encode a read command for the capabilities attribute for  server into buffer including the APS frame
 */
uint16_t encodeBarrierControlClusterReadCapabilitiesAttribute(uint8_t * buffer, uint16_t buf_length,
                                                              chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the barrier-position attribute for  server into buffer including the APS frame
 */
uint16_t encodeBarrierControlClusterReadBarrierPositionAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                 chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a report command for the barrier-position attribute for  server into buffer including the APS frame
 */
uint16_t encodeBarrierControlClusterReportBarrierPositionAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                   chip::EndpointId destination_endpoint, uint16_t min_interval,
                                                                   uint16_t max_interval, uint8_t change);

/*----------------------------------------------------------------------------*\
| Cluster Basic                                                       | 0x0000 |
|------------------------------------------------------------------------------|
| Responses:                                                          |        |
|                                                                     |        |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * ResetToFactoryDefaults                                            |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * ZCLVersion                                                        | 0x0000 |
| * PowerSource                                                       | 0x0007 |
\*----------------------------------------------------------------------------*/

/**
 * @brief
 *    Encode an reset-to-factory-defaults command for Basic server into buffer including the APS frame
 */
uint16_t encodeBasicClusterResetToFactoryDefaultsCommand(uint8_t * buffer, uint16_t buf_length,
                                                         chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a discover command for  server into buffer including the APS frame
 */
uint16_t encodeBasicClusterDiscoverAttributes(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the zclversion attribute for  server into buffer including the APS frame
 */
uint16_t encodeBasicClusterReadZCLVersionAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the power-source attribute for  server into buffer including the APS frame
 */
uint16_t encodeBasicClusterReadPowerSourceAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/*----------------------------------------------------------------------------*\
| Cluster ColorControl                                                | 0x0300 |
|------------------------------------------------------------------------------|
| Responses:                                                          |        |
|                                                                     |        |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * MoveColor                                                         |   0x08 |
| * MoveColorTemperature                                              |   0x4B |
| * MoveHue                                                           |   0x01 |
| * MoveSaturation                                                    |   0x04 |
| * MoveToColor                                                       |   0x07 |
| * MoveToColorTemperature                                            |   0x0A |
| * MoveToHue                                                         |   0x00 |
| * MoveToHueAndSaturation                                            |   0x06 |
| * MoveToSaturation                                                  |   0x03 |
| * StepColor                                                         |   0x09 |
| * StepColorTemperature                                              |   0x4C |
| * StepHue                                                           |   0x02 |
| * StepSaturation                                                    |   0x05 |
| * StopMoveStep                                                      |   0x47 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * CurrentHue                                                        | 0x0000 |
| * CurrentSaturation                                                 | 0x0001 |
| * RemainingTime                                                     | 0x0002 |
| * CurrentX                                                          | 0x0003 |
| * CurrentY                                                          | 0x0004 |
| * ColorTemperatureMireds                                            | 0x0007 |
| * ColorMode                                                         | 0x0008 |
| * Options                                                           | 0x000F |
| * NumberOfPrimaries                                                 | 0x0010 |
| * Primary1X                                                         | 0x0011 |
| * Primary1Y                                                         | 0x0012 |
| * Primary1Intensity                                                 | 0x0013 |
| * Primary2X                                                         | 0x0015 |
| * Primary2Y                                                         | 0x0016 |
| * Primary2Intensity                                                 | 0x0017 |
| * Primary3X                                                         | 0x0019 |
| * Primary3Y                                                         | 0x001A |
| * Primary3Intensity                                                 | 0x001B |
| * Primary4X                                                         | 0x0020 |
| * Primary4Y                                                         | 0x0021 |
| * Primary4Intensity                                                 | 0x0022 |
| * Primary5X                                                         | 0x0024 |
| * Primary5Y                                                         | 0x0025 |
| * Primary5Intensity                                                 | 0x0026 |
| * Primary6X                                                         | 0x0028 |
| * Primary6Y                                                         | 0x0029 |
| * Primary6Intensity                                                 | 0x002A |
| * EnhancedCurrentHue                                                | 0x4000 |
| * EnhancedColorMode                                                 | 0x4001 |
| * ColorLoopActive                                                   | 0x4002 |
| * ColorLoopDirection                                                | 0x4003 |
| * ColorLoopTime                                                     | 0x4004 |
| * ColorLoopStartEnhancedHue                                         | 0x4005 |
| * ColorLoopStoredEnhancedHue                                        | 0x4006 |
| * ColorCapabilities                                                 | 0x400A |
| * ColorTempPhysicalMinMireds                                        | 0x400B |
| * ColorTempPhysicalMaxMireds                                        | 0x400C |
| * CoupleColorTempToLevelMinMireds                                   | 0x400D |
| * StartUpColorTemperatureMireds                                     | 0x4010 |
\*----------------------------------------------------------------------------*/

/**
 * @brief
 *    Encode an move-color command for ColorControl server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterMoveColorCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                   int16_t rateX, int16_t rateY, uint8_t optionsMask, uint8_t optionsOverride);

/**
 * @brief
 *    Encode an move-color-temperature command for ColorControl server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterMoveColorTemperatureCommand(uint8_t * buffer, uint16_t buf_length,
                                                              chip::EndpointId destination_endpoint, uint8_t moveMode,
                                                              uint16_t rate, uint16_t colorTemperatureMinimumMireds,
                                                              uint16_t colorTemperatureMaximumMireds, uint8_t optionsMask,
                                                              uint8_t optionsOverride);

/**
 * @brief
 *    Encode an move-hue command for ColorControl server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterMoveHueCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                 uint8_t moveMode, uint8_t rate, uint8_t optionsMask, uint8_t optionsOverride);

/**
 * @brief
 *    Encode an move-saturation command for ColorControl server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterMoveSaturationCommand(uint8_t * buffer, uint16_t buf_length,
                                                        chip::EndpointId destination_endpoint, uint8_t moveMode, uint8_t rate,
                                                        uint8_t optionsMask, uint8_t optionsOverride);

/**
 * @brief
 *    Encode an move-to-color command for ColorControl server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterMoveToColorCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                     uint16_t colorX, uint16_t colorY, uint16_t transitionTime, uint8_t optionsMask,
                                                     uint8_t optionsOverride);

/**
 * @brief
 *    Encode an move-to-color-temperature command for ColorControl server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterMoveToColorTemperatureCommand(uint8_t * buffer, uint16_t buf_length,
                                                                chip::EndpointId destination_endpoint,
                                                                uint16_t colorTemperatureMireds, uint16_t transitionTime,
                                                                uint8_t optionsMask, uint8_t optionsOverride);

/**
 * @brief
 *    Encode an move-to-hue command for ColorControl server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterMoveToHueCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                   uint8_t hue, uint8_t direction, uint16_t transitionTime, uint8_t optionsMask,
                                                   uint8_t optionsOverride);

/**
 * @brief
 *    Encode an move-to-hue-and-saturation command for ColorControl server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterMoveToHueAndSaturationCommand(uint8_t * buffer, uint16_t buf_length,
                                                                chip::EndpointId destination_endpoint, uint8_t hue,
                                                                uint8_t saturation, uint16_t transitionTime, uint8_t optionsMask,
                                                                uint8_t optionsOverride);

/**
 * @brief
 *    Encode an move-to-saturation command for ColorControl server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterMoveToSaturationCommand(uint8_t * buffer, uint16_t buf_length,
                                                          chip::EndpointId destination_endpoint, uint8_t saturation,
                                                          uint16_t transitionTime, uint8_t optionsMask, uint8_t optionsOverride);

/**
 * @brief
 *    Encode an step-color command for ColorControl server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterStepColorCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                   int16_t stepX, int16_t stepY, uint16_t transitionTime, uint8_t optionsMask,
                                                   uint8_t optionsOverride);

/**
 * @brief
 *    Encode an step-color-temperature command for ColorControl server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterStepColorTemperatureCommand(uint8_t * buffer, uint16_t buf_length,
                                                              chip::EndpointId destination_endpoint, uint8_t stepMode,
                                                              uint16_t stepSize, uint16_t transitionTime,
                                                              uint16_t colorTemperatureMinimumMireds,
                                                              uint16_t colorTemperatureMaximumMireds, uint8_t optionsMask,
                                                              uint8_t optionsOverride);

/**
 * @brief
 *    Encode an step-hue command for ColorControl server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterStepHueCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                 uint8_t stepMode, uint8_t stepSize, uint8_t transitionTime, uint8_t optionsMask,
                                                 uint8_t optionsOverride);

/**
 * @brief
 *    Encode an step-saturation command for ColorControl server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterStepSaturationCommand(uint8_t * buffer, uint16_t buf_length,
                                                        chip::EndpointId destination_endpoint, uint8_t stepMode, uint8_t stepSize,
                                                        uint8_t transitionTime, uint8_t optionsMask, uint8_t optionsOverride);

/**
 * @brief
 *    Encode an stop-move-step command for ColorControl server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterStopMoveStepCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                      uint8_t optionsMask, uint8_t optionsOverride);

/**
 * @brief
 *    Encode a discover command for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterDiscoverAttributes(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the current-hue attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadCurrentHueAttribute(uint8_t * buffer, uint16_t buf_length,
                                                          chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a report command for the current-hue attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReportCurrentHueAttribute(uint8_t * buffer, uint16_t buf_length,
                                                            chip::EndpointId destination_endpoint, uint16_t min_interval,
                                                            uint16_t max_interval, uint8_t change);

/**
 * @brief
 *    Encode a read command for the current-saturation attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadCurrentSaturationAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                 chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a report command for the current-saturation attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReportCurrentSaturationAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                   chip::EndpointId destination_endpoint, uint16_t min_interval,
                                                                   uint16_t max_interval, uint8_t change);

/**
 * @brief
 *    Encode a read command for the remaining-time attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadRemainingTimeAttribute(uint8_t * buffer, uint16_t buf_length,
                                                             chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the current-x attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadCurrentXAttribute(uint8_t * buffer, uint16_t buf_length,
                                                        chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a report command for the current-x attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReportCurrentXAttribute(uint8_t * buffer, uint16_t buf_length,
                                                          chip::EndpointId destination_endpoint, uint16_t min_interval,
                                                          uint16_t max_interval, uint16_t change);

/**
 * @brief
 *    Encode a read command for the current-y attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadCurrentYAttribute(uint8_t * buffer, uint16_t buf_length,
                                                        chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a report command for the current-y attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReportCurrentYAttribute(uint8_t * buffer, uint16_t buf_length,
                                                          chip::EndpointId destination_endpoint, uint16_t min_interval,
                                                          uint16_t max_interval, uint16_t change);

/**
 * @brief
 *    Encode a read command for the color-temperature-mireds attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadColorTemperatureMiredsAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                      chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a report command for the color-temperature-mireds attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReportColorTemperatureMiredsAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                        chip::EndpointId destination_endpoint,
                                                                        uint16_t min_interval, uint16_t max_interval,
                                                                        uint16_t change);

/**
 * @brief
 *    Encode a read command for the color-mode attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadColorModeAttribute(uint8_t * buffer, uint16_t buf_length,
                                                         chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the options attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadOptionsAttribute(uint8_t * buffer, uint16_t buf_length,
                                                       chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a write command for the options attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterWriteOptionsAttribute(uint8_t * buffer, uint16_t buf_length,
                                                        chip::EndpointId destination_endpoint, uint8_t options);

/**
 * @brief
 *    Encode a read command for the number-of-primaries attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadNumberOfPrimariesAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                 chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary1-x attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary1XAttribute(uint8_t * buffer, uint16_t buf_length,
                                                         chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary1-y attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary1YAttribute(uint8_t * buffer, uint16_t buf_length,
                                                         chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary1-intensity attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary1IntensityAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                 chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary2-x attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary2XAttribute(uint8_t * buffer, uint16_t buf_length,
                                                         chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary2-y attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary2YAttribute(uint8_t * buffer, uint16_t buf_length,
                                                         chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary2-intensity attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary2IntensityAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                 chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary3-x attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary3XAttribute(uint8_t * buffer, uint16_t buf_length,
                                                         chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary3-y attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary3YAttribute(uint8_t * buffer, uint16_t buf_length,
                                                         chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary3-intensity attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary3IntensityAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                 chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary4-x attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary4XAttribute(uint8_t * buffer, uint16_t buf_length,
                                                         chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary4-y attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary4YAttribute(uint8_t * buffer, uint16_t buf_length,
                                                         chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary4-intensity attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary4IntensityAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                 chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary5-x attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary5XAttribute(uint8_t * buffer, uint16_t buf_length,
                                                         chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary5-y attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary5YAttribute(uint8_t * buffer, uint16_t buf_length,
                                                         chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary5-intensity attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary5IntensityAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                 chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary6-x attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary6XAttribute(uint8_t * buffer, uint16_t buf_length,
                                                         chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary6-y attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary6YAttribute(uint8_t * buffer, uint16_t buf_length,
                                                         chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the primary6-intensity attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadPrimary6IntensityAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                 chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the enhanced-current-hue attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadEnhancedCurrentHueAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                  chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the enhanced-color-mode attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadEnhancedColorModeAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                 chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the color-loop-active attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadColorLoopActiveAttribute(uint8_t * buffer, uint16_t buf_length,
                                                               chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the color-loop-direction attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadColorLoopDirectionAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                  chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the color-loop-time attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadColorLoopTimeAttribute(uint8_t * buffer, uint16_t buf_length,
                                                             chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the color-loop-start-enhanced-hue attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadColorLoopStartEnhancedHueAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                         chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the color-loop-stored-enhanced-hue attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadColorLoopStoredEnhancedHueAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                          chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the color-capabilities attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadColorCapabilitiesAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                 chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the color-temp-physical-min-mireds attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadColorTempPhysicalMinMiredsAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                          chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the color-temp-physical-max-mireds attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadColorTempPhysicalMaxMiredsAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                          chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the couple-color-temp-to-level-min-mireds attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadCoupleColorTempToLevelMinMiredsAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                               chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the start-up-color-temperature-mireds attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterReadStartUpColorTemperatureMiredsAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                             chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a write command for the start-up-color-temperature-mireds attribute for  server into buffer including the APS frame
 */
uint16_t encodeColorControlClusterWriteStartUpColorTemperatureMiredsAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                              chip::EndpointId destination_endpoint,
                                                                              uint16_t startUpColorTemperatureMireds);

/*----------------------------------------------------------------------------*\
| Cluster DoorLock                                                    | 0x0101 |
|------------------------------------------------------------------------------|
| Responses:                                                          |        |
| * ClearAllPINCodesResponse                                          |   0x08 |
| * ClearAllRFIDCodesResponse                                         |   0x19 |
| * ClearHolidayScheduleResponse                                      |   0x13 |
| * ClearPINCodeResponse                                              |   0x07 |
| * ClearRFIDCodeResponse                                             |   0x18 |
| * ClearWeekdayScheduleResponse                                      |   0x0D |
| * ClearYearDayScheduleResponse                                      |   0x10 |
| * GetHolidayScheduleResponse                                        |   0x12 |
| * GetPINCodeResponse                                                |   0x06 |
| * GetRFIDCodeResponse                                               |   0x17 |
| * GetUserTypeResponse                                               |   0x15 |
| * GetWeekdayScheduleResponse                                        |   0x0C |
| * GetYearDayScheduleResponse                                        |   0x0F |
| * LockDoorResponse                                                  |   0x00 |
| * SetHolidayScheduleResponse                                        |   0x11 |
| * SetPINCodeResponse                                                |   0x05 |
| * SetRFIDCodeResponse                                               |   0x16 |
| * SetUserTypeResponse                                               |   0x14 |
| * SetWeekdayScheduleResponse                                        |   0x0B |
| * SetYearDayScheduleResponse                                        |   0x0E |
| * UnlockDoorResponse                                                |   0x01 |
| * UnlockWithTimeoutResponse                                         |   0x03 |
|                                                                     |        |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * ClearAllPINCodes                                                  |   0x08 |
| * ClearAllRFIDCodes                                                 |   0x19 |
| * ClearHolidaySchedule                                              |   0x13 |
| * ClearPINCode                                                      |   0x07 |
| * ClearRFIDCode                                                     |   0x18 |
| * ClearWeekdaySchedule                                              |   0x0D |
| * ClearYearDaySchedule                                              |   0x10 |
| * GetHolidaySchedule                                                |   0x12 |
| * GetPINCode                                                        |   0x06 |
| * GetRFIDCode                                                       |   0x17 |
| * GetUserType                                                       |   0x15 |
| * GetWeekdaySchedule                                                |   0x0C |
| * GetYearDaySchedule                                                |   0x0F |
| * LockDoor                                                          |   0x00 |
| * SetHolidaySchedule                                                |   0x11 |
| * SetPINCode                                                        |   0x05 |
| * SetRFIDCode                                                       |   0x16 |
| * SetUserType                                                       |   0x14 |
| * SetWeekdaySchedule                                                |   0x0B |
| * SetYearDaySchedule                                                |   0x0E |
| * UnlockDoor                                                        |   0x01 |
| * UnlockWithTimeout                                                 |   0x03 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * LockState                                                         | 0x0000 |
| * LockType                                                          | 0x0001 |
| * ActuatorEnabled                                                   | 0x0002 |
\*----------------------------------------------------------------------------*/

/**
 * @brief
 *    Encode an clear-all-pincodes command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterClearAllPINCodesCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode an clear-all-rfidcodes command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterClearAllRFIDCodesCommand(uint8_t * buffer, uint16_t buf_length,
                                                       chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode an clear-holiday-schedule command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterClearHolidayScheduleCommand(uint8_t * buffer, uint16_t buf_length,
                                                          chip::EndpointId destination_endpoint, uint8_t holidayScheduleID);

/**
 * @brief
 *    Encode an clear-pincode command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterClearPINCodeCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                  uint16_t userID);

/**
 * @brief
 *    Encode an clear-rfidcode command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterClearRFIDCodeCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                   uint16_t userID);

/**
 * @brief
 *    Encode an clear-weekday-schedule command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterClearWeekdayScheduleCommand(uint8_t * buffer, uint16_t buf_length,
                                                          chip::EndpointId destination_endpoint, uint8_t scheduleID,
                                                          uint16_t userID);

/**
 * @brief
 *    Encode an clear-year-day-schedule command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterClearYearDayScheduleCommand(uint8_t * buffer, uint16_t buf_length,
                                                          chip::EndpointId destination_endpoint, uint8_t scheduleID,
                                                          uint16_t userID);

/**
 * @brief
 *    Encode an get-holiday-schedule command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterGetHolidayScheduleCommand(uint8_t * buffer, uint16_t buf_length,
                                                        chip::EndpointId destination_endpoint, uint8_t holidayScheduleID);

/**
 * @brief
 *    Encode an get-pincode command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterGetPINCodeCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                uint16_t userID);

/**
 * @brief
 *    Encode an get-rfidcode command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterGetRFIDCodeCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                 uint16_t userID);

/**
 * @brief
 *    Encode an get-user-type command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterGetUserTypeCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                 uint16_t userID);

/**
 * @brief
 *    Encode an get-weekday-schedule command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterGetWeekdayScheduleCommand(uint8_t * buffer, uint16_t buf_length,
                                                        chip::EndpointId destination_endpoint, uint8_t scheduleID, uint16_t userID);

/**
 * @brief
 *    Encode an get-year-day-schedule command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterGetYearDayScheduleCommand(uint8_t * buffer, uint16_t buf_length,
                                                        chip::EndpointId destination_endpoint, uint8_t scheduleID, uint16_t userID);

/**
 * @brief
 *    Encode an lock-door command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterLockDoorCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                              char * pINOrRFIDCode);

/**
 * @brief
 *    Encode an set-holiday-schedule command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterSetHolidayScheduleCommand(uint8_t * buffer, uint16_t buf_length,
                                                        chip::EndpointId destination_endpoint, uint8_t holidayScheduleID,
                                                        uint32_t localStartTime, uint32_t localEndTime,
                                                        uint8_t operatingModeDuringHoliday);

/**
 * @brief
 *    Encode an set-pincode command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterSetPINCodeCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                uint16_t userID, uint8_t userStatus, uint8_t userType, char * pIN);

/**
 * @brief
 *    Encode an set-rfidcode command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterSetRFIDCodeCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                 uint16_t userID, uint8_t userStatus, uint8_t userType, char * rFIDCode);

/**
 * @brief
 *    Encode an set-user-type command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterSetUserTypeCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                 uint16_t userID, uint8_t userType);

/**
 * @brief
 *    Encode an set-weekday-schedule command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterSetWeekdayScheduleCommand(uint8_t * buffer, uint16_t buf_length,
                                                        chip::EndpointId destination_endpoint, uint8_t scheduleID, uint16_t userID,
                                                        uint8_t daysMask, uint8_t startHour, uint8_t startMinute, uint8_t endHour,
                                                        uint8_t endMinute);

/**
 * @brief
 *    Encode an set-year-day-schedule command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterSetYearDayScheduleCommand(uint8_t * buffer, uint16_t buf_length,
                                                        chip::EndpointId destination_endpoint, uint8_t scheduleID, uint16_t userID,
                                                        uint32_t localStartTime, uint32_t localEndTime);

/**
 * @brief
 *    Encode an unlock-door command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterUnlockDoorCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                char * pINOrRFIDCode);

/**
 * @brief
 *    Encode an unlock-with-timeout command for DoorLock server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterUnlockWithTimeoutCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                       uint16_t timeoutInSeconds, char * pINOrRFIDCode);

/**
 * @brief
 *    Encode a discover command for  server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterDiscoverAttributes(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the lock-state attribute for  server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterReadLockStateAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a report command for the lock-state attribute for  server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterReportLockStateAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                       uint16_t min_interval, uint16_t max_interval);

/**
 * @brief
 *    Encode a read command for the lock-type attribute for  server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterReadLockTypeAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the actuator-enabled attribute for  server into buffer including the APS frame
 */
uint16_t encodeDoorLockClusterReadActuatorEnabledAttribute(uint8_t * buffer, uint16_t buf_length,
                                                           chip::EndpointId destination_endpoint);

/*----------------------------------------------------------------------------*\
| Cluster Groups                                                      | 0x0004 |
|------------------------------------------------------------------------------|
| Responses:                                                          |        |
| * AddGroupResponse                                                  |   0x00 |
| * GetGroupMembershipResponse                                        |   0x02 |
| * RemoveGroupResponse                                               |   0x03 |
| * ViewGroupResponse                                                 |   0x01 |
|                                                                     |        |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * AddGroup                                                          |   0x00 |
| * AddGroupIfIdentifying                                             |   0x05 |
| * GetGroupMembership                                                |   0x02 |
| * RemoveAllGroups                                                   |   0x04 |
| * RemoveGroup                                                       |   0x03 |
| * ViewGroup                                                         |   0x01 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * NameSupport                                                       | 0x0000 |
\*----------------------------------------------------------------------------*/

/**
 * @brief
 *    Encode an add-group command for Groups server into buffer including the APS frame
 */
uint16_t encodeGroupsClusterAddGroupCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                            chip::GroupId groupId, char * groupName);

/**
 * @brief
 *    Encode an add-group-if-identifying command for Groups server into buffer including the APS frame
 */
uint16_t encodeGroupsClusterAddGroupIfIdentifyingCommand(uint8_t * buffer, uint16_t buf_length,
                                                         chip::EndpointId destination_endpoint, chip::GroupId groupId,
                                                         char * groupName);

/**
 * @brief
 *    Encode an get-group-membership command for Groups server into buffer including the APS frame
 */
uint16_t encodeGroupsClusterGetGroupMembershipCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                      uint8_t groupCount, uint16_t groupList);

/**
 * @brief
 *    Encode an remove-all-groups command for Groups server into buffer including the APS frame
 */
uint16_t encodeGroupsClusterRemoveAllGroupsCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode an remove-group command for Groups server into buffer including the APS frame
 */
uint16_t encodeGroupsClusterRemoveGroupCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                               chip::GroupId groupId);

/**
 * @brief
 *    Encode an view-group command for Groups server into buffer including the APS frame
 */
uint16_t encodeGroupsClusterViewGroupCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                             chip::GroupId groupId);

/**
 * @brief
 *    Encode a discover command for  server into buffer including the APS frame
 */
uint16_t encodeGroupsClusterDiscoverAttributes(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the name-support attribute for  server into buffer including the APS frame
 */
uint16_t encodeGroupsClusterReadNameSupportAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/*----------------------------------------------------------------------------*\
| Cluster IASZone                                                     | 0x0500 |
|------------------------------------------------------------------------------|
| Responses:                                                          |        |
|                                                                     |        |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * ZoneState                                                         | 0x0000 |
| * ZoneType                                                          | 0x0001 |
| * ZoneStatus                                                        | 0x0002 |
| * IASCIEAddress                                                     | 0x0010 |
| * ZoneID                                                            | 0x0011 |
\*----------------------------------------------------------------------------*/

/**
 * @brief
 *    Encode an zone-enroll-response command for IASZone server into buffer including the APS frame
 */
uint16_t encodeIASZoneClusterZoneEnrollResponseCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                       uint8_t enrollResponseCode, uint8_t zoneID);

/**
 * @brief
 *    Encode a discover command for  server into buffer including the APS frame
 */
uint16_t encodeIASZoneClusterDiscoverAttributes(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the zone-state attribute for  server into buffer including the APS frame
 */
uint16_t encodeIASZoneClusterReadZoneStateAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the zone-type attribute for  server into buffer including the APS frame
 */
uint16_t encodeIASZoneClusterReadZoneTypeAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the zone-status attribute for  server into buffer including the APS frame
 */
uint16_t encodeIASZoneClusterReadZoneStatusAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the iascieaddress attribute for  server into buffer including the APS frame
 */
uint16_t encodeIASZoneClusterReadIASCIEAddressAttribute(uint8_t * buffer, uint16_t buf_length,
                                                        chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a write command for the iascieaddress attribute for  server into buffer including the APS frame
 */
uint16_t encodeIASZoneClusterWriteIASCIEAddressAttribute(uint8_t * buffer, uint16_t buf_length,
                                                         chip::EndpointId destination_endpoint, uint64_t iASCIEAddress);

/**
 * @brief
 *    Encode a read command for the zone-id attribute for  server into buffer including the APS frame
 */
uint16_t encodeIASZoneClusterReadZoneIDAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/*----------------------------------------------------------------------------*\
| Cluster Identify                                                    | 0x0003 |
|------------------------------------------------------------------------------|
| Responses:                                                          |        |
| * IdentifyQueryResponse                                             |   0x00 |
|                                                                     |        |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * Identify                                                          |   0x00 |
| * IdentifyQuery                                                     |   0x01 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * IdentifyTime                                                      | 0x0000 |
\*----------------------------------------------------------------------------*/

/**
 * @brief
 *    Encode an identify command for Identify server into buffer including the APS frame
 */
uint16_t encodeIdentifyClusterIdentifyCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                              uint16_t identifyTime);

/**
 * @brief
 *    Encode an identify-query command for Identify server into buffer including the APS frame
 */
uint16_t encodeIdentifyClusterIdentifyQueryCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a discover command for  server into buffer including the APS frame
 */
uint16_t encodeIdentifyClusterDiscoverAttributes(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the identify-time attribute for  server into buffer including the APS frame
 */
uint16_t encodeIdentifyClusterReadIdentifyTimeAttribute(uint8_t * buffer, uint16_t buf_length,
                                                        chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a write command for the identify-time attribute for  server into buffer including the APS frame
 */
uint16_t encodeIdentifyClusterWriteIdentifyTimeAttribute(uint8_t * buffer, uint16_t buf_length,
                                                         chip::EndpointId destination_endpoint, uint16_t identifyTime);

/*----------------------------------------------------------------------------*\
| Cluster Level                                                       | 0x0008 |
|------------------------------------------------------------------------------|
| Responses:                                                          |        |
|                                                                     |        |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * Move                                                              |   0x01 |
| * MoveToLevel                                                       |   0x00 |
| * MoveToLevelWithOnOff                                              |   0x04 |
| * MoveWithOnOff                                                     |   0x05 |
| * Step                                                              |   0x02 |
| * StepWithOnOff                                                     |   0x06 |
| * Stop                                                              |   0x03 |
| * StopWithOnOff                                                     |   0x07 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * CurrentLevel                                                      | 0x0000 |
\*----------------------------------------------------------------------------*/

/**
 * @brief
 *    Encode an move command for Level server into buffer including the APS frame
 */
uint16_t encodeLevelClusterMoveCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                       uint8_t moveMode, uint8_t rate, uint8_t optionsMask, uint8_t optionsOverride);

/**
 * @brief
 *    Encode an move-to-level command for Level server into buffer including the APS frame
 */
uint16_t encodeLevelClusterMoveToLevelCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                              uint8_t level, uint16_t transitionTime, uint8_t optionsMask, uint8_t optionsOverride);

/**
 * @brief
 *    Encode an move-to-level-with-on-off command for Level server into buffer including the APS frame
 */
uint16_t encodeLevelClusterMoveToLevelWithOnOffCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                       uint8_t level, uint16_t transitionTime, uint8_t optionsMask,
                                                       uint8_t optionsOverride);

/**
 * @brief
 *    Encode an move-with-on-off command for Level server into buffer including the APS frame
 */
uint16_t encodeLevelClusterMoveWithOnOffCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                uint8_t moveMode, uint8_t rate, uint8_t optionsMask, uint8_t optionsOverride);

/**
 * @brief
 *    Encode an step command for Level server into buffer including the APS frame
 */
uint16_t encodeLevelClusterStepCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                       uint8_t stepMode, uint8_t stepSize, uint16_t transitionTime, uint8_t optionsMask,
                                       uint8_t optionsOverride);

/**
 * @brief
 *    Encode an step-with-on-off command for Level server into buffer including the APS frame
 */
uint16_t encodeLevelClusterStepWithOnOffCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                uint8_t stepMode, uint8_t stepSize, uint16_t transitionTime, uint8_t optionsMask,
                                                uint8_t optionsOverride);

/**
 * @brief
 *    Encode an stop command for Level server into buffer including the APS frame
 */
uint16_t encodeLevelClusterStopCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                       uint8_t optionsMask, uint8_t optionsOverride);

/**
 * @brief
 *    Encode an stop-with-on-off command for Level server into buffer including the APS frame
 */
uint16_t encodeLevelClusterStopWithOnOffCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                uint8_t optionsMask, uint8_t optionsOverride);

/**
 * @brief
 *    Encode a discover command for  server into buffer including the APS frame
 */
uint16_t encodeLevelClusterDiscoverAttributes(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the current-level attribute for  server into buffer including the APS frame
 */
uint16_t encodeLevelClusterReadCurrentLevelAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a report command for the current-level attribute for  server into buffer including the APS frame
 */
uint16_t encodeLevelClusterReportCurrentLevelAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                       uint16_t min_interval, uint16_t max_interval, uint8_t change);

/*----------------------------------------------------------------------------*\
| Cluster OnOff                                                       | 0x0006 |
|------------------------------------------------------------------------------|
| Responses:                                                          |        |
|                                                                     |        |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * Off                                                               |   0x00 |
| * On                                                                |   0x01 |
| * Toggle                                                            |   0x02 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * OnOff                                                             | 0x0000 |
\*----------------------------------------------------------------------------*/

/**
 * @brief
 *    Encode an off command for OnOff server into buffer including the APS frame
 */
uint16_t encodeOnOffClusterOffCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode an on command for OnOff server into buffer including the APS frame
 */
uint16_t encodeOnOffClusterOnCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode an toggle command for OnOff server into buffer including the APS frame
 */
uint16_t encodeOnOffClusterToggleCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a discover command for  server into buffer including the APS frame
 */
uint16_t encodeOnOffClusterDiscoverAttributes(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the on-off attribute for  server into buffer including the APS frame
 */
uint16_t encodeOnOffClusterReadOnOffAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a report command for the on-off attribute for  server into buffer including the APS frame
 */
uint16_t encodeOnOffClusterReportOnOffAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                uint16_t min_interval, uint16_t max_interval);

/*----------------------------------------------------------------------------*\
| Cluster Scenes                                                      | 0x0005 |
|------------------------------------------------------------------------------|
| Responses:                                                          |        |
| * AddSceneResponse                                                  |   0x00 |
| * GetSceneMembershipResponse                                        |   0x06 |
| * RemoveAllScenesResponse                                           |   0x03 |
| * RemoveSceneResponse                                               |   0x02 |
| * StoreSceneResponse                                                |   0x04 |
| * ViewSceneResponse                                                 |   0x01 |
|                                                                     |        |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * AddScene                                                          |   0x00 |
| * GetSceneMembership                                                |   0x06 |
| * RecallScene                                                       |   0x05 |
| * RemoveAllScenes                                                   |   0x03 |
| * RemoveScene                                                       |   0x02 |
| * StoreScene                                                        |   0x04 |
| * ViewScene                                                         |   0x01 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * SceneCount                                                        | 0x0000 |
| * CurrentScene                                                      | 0x0001 |
| * CurrentGroup                                                      | 0x0002 |
| * SceneValid                                                        | 0x0003 |
| * NameSupport                                                       | 0x0004 |
\*----------------------------------------------------------------------------*/

/**
 * @brief
 *    Encode an add-scene command for Scenes server into buffer including the APS frame
 */
uint16_t encodeScenesClusterAddSceneCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                            chip::GroupId groupID, uint8_t sceneID, uint16_t transitionTime, char * sceneName,
                                            chip::ClusterId clusterId, char * extensionFieldSet);

/**
 * @brief
 *    Encode an get-scene-membership command for Scenes server into buffer including the APS frame
 */
uint16_t encodeScenesClusterGetSceneMembershipCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                      chip::GroupId groupID);

/**
 * @brief
 *    Encode an recall-scene command for Scenes server into buffer including the APS frame
 */
uint16_t encodeScenesClusterRecallSceneCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                               chip::GroupId groupID, uint8_t sceneID, uint16_t transitionTime);

/**
 * @brief
 *    Encode an remove-all-scenes command for Scenes server into buffer including the APS frame
 */
uint16_t encodeScenesClusterRemoveAllScenesCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                                   chip::GroupId groupID);

/**
 * @brief
 *    Encode an remove-scene command for Scenes server into buffer including the APS frame
 */
uint16_t encodeScenesClusterRemoveSceneCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                               chip::GroupId groupID, uint8_t sceneID);

/**
 * @brief
 *    Encode an store-scene command for Scenes server into buffer including the APS frame
 */
uint16_t encodeScenesClusterStoreSceneCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                              chip::GroupId groupID, uint8_t sceneID);

/**
 * @brief
 *    Encode an view-scene command for Scenes server into buffer including the APS frame
 */
uint16_t encodeScenesClusterViewSceneCommand(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint,
                                             chip::GroupId groupID, uint8_t sceneID);

/**
 * @brief
 *    Encode a discover command for  server into buffer including the APS frame
 */
uint16_t encodeScenesClusterDiscoverAttributes(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the scene-count attribute for  server into buffer including the APS frame
 */
uint16_t encodeScenesClusterReadSceneCountAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the current-scene attribute for  server into buffer including the APS frame
 */
uint16_t encodeScenesClusterReadCurrentSceneAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the current-group attribute for  server into buffer including the APS frame
 */
uint16_t encodeScenesClusterReadCurrentGroupAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the scene-valid attribute for  server into buffer including the APS frame
 */
uint16_t encodeScenesClusterReadSceneValidAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the name-support attribute for  server into buffer including the APS frame
 */
uint16_t encodeScenesClusterReadNameSupportAttribute(uint8_t * buffer, uint16_t buf_length, chip::EndpointId destination_endpoint);

/*----------------------------------------------------------------------------*\
| Cluster TemperatureMeasurement                                      | 0x0402 |
|------------------------------------------------------------------------------|
| Responses:                                                          |        |
|                                                                     |        |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * MeasuredValue                                                     | 0x0000 |
| * MinMeasuredValue                                                  | 0x0001 |
| * MaxMeasuredValue                                                  | 0x0002 |
\*----------------------------------------------------------------------------*/

/**
 * @brief
 *    Encode a discover command for  server into buffer including the APS frame
 */
uint16_t encodeTemperatureMeasurementClusterDiscoverAttributes(uint8_t * buffer, uint16_t buf_length,
                                                               chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the measured-value attribute for  server into buffer including the APS frame
 */
uint16_t encodeTemperatureMeasurementClusterReadMeasuredValueAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                       chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a report command for the measured-value attribute for  server into buffer including the APS frame
 */
uint16_t encodeTemperatureMeasurementClusterReportMeasuredValueAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                         chip::EndpointId destination_endpoint,
                                                                         uint16_t min_interval, uint16_t max_interval,
                                                                         int16_t change);

/**
 * @brief
 *    Encode a read command for the min-measured-value attribute for  server into buffer including the APS frame
 */
uint16_t encodeTemperatureMeasurementClusterReadMinMeasuredValueAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                          chip::EndpointId destination_endpoint);

/**
 * @brief
 *    Encode a read command for the max-measured-value attribute for  server into buffer including the APS frame
 */
uint16_t encodeTemperatureMeasurementClusterReadMaxMeasuredValueAttribute(uint8_t * buffer, uint16_t buf_length,
                                                                          chip::EndpointId destination_endpoint);

#ifdef __cplusplus
} // extern "C"
#endif

#endif // CHIP_ZCL_ZPRO_CODEC_API_H
