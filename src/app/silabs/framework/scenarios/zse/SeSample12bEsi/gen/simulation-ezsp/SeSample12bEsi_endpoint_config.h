/**
 *
 *    Copyright (c) 2020 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *
 *    Copyright (c) 2020 Silicon Labs
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef SILABS_AF_ENDPOINT_CONFIG
#define SILABS_AF_ENDPOINT_CONFIG

// Fixed number of defined endpoints
#define FIXED_ENDPOINT_COUNT (1)

// Generated defaults
#if BIGENDIAN_CPU
#define GENERATED_DEFAULTS                                                                                                         \
    {                                                                                                                              \
        6, 'T', 'i', 'e', 'r', ' ', '1', 0, 0, 0, 0, 0, 0 /* 0,Default value: Price,tier 1 price label */, 6, 'T', 'i', 'e', 'r',  \
            ' ', '2', 0, 0, 0, 0, 0, 0 /* 13,Default value: Price,tier 2 price label */, 0x10, 0x00, 0x00,                         \
            0x00 /* 26,Default value: Price,conversion factor */, 0x02, 0x62, 0x5A,                                                \
            0x00 /* 30,Default value: Price,calorific value */, 1, '0', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   \
            0, 0, 0, 0 /* 34,Default value: Price,tariff label */, 0x00, 0x00, 0x00, 0xB9 /* 59,Default value: Price,CO2 */, 1,    \
            '0', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,                                                 \
            0 /* 63,Default value: Price,rx tariff label */,                                                                       \
    }
#else // ! BIGENDIAN_CPU
#define GENERATED_DEFAULTS                                                                                                         \
    {                                                                                                                              \
        6, 'T', 'i', 'e', 'r', ' ', '1', 0, 0, 0, 0, 0, 0 /* 0,Default value: Price,tier 1 price label */, 6, 'T', 'i', 'e', 'r',  \
            ' ', '2', 0, 0, 0, 0, 0, 0 /* 13,Default value: Price,tier 2 price label */, 0x00, 0x00, 0x00,                         \
            0x10 /* 26,Default value: Price,conversion factor */, 0x00, 0x5A, 0x62,                                                \
            0x02 /* 30,Default value: Price,calorific value */, 1, '0', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   \
            0, 0, 0, 0 /* 34,Default value: Price,tariff label */, 0xB9, 0x00, 0x00, 0x00 /* 59,Default value: Price,CO2 */, 1,    \
            '0', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,                                                 \
            0 /* 63,Default value: Price,rx tariff label */,                                                                       \
    }
#endif // BIGENDIAN_CPU

// Generated attributes
#define GENERATED_ATTRIBUTES                                                                                                       \
    {                                                                                                                              \
        { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x03 } }, /* 0 / Basic / ZCL version*/    \
            {                                                                                                                      \
                0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                              \
            }, /* 1 / Basic / power source*/                                                                                       \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }                           \
            }, /* 2 / Basic / cluster revision*/                                                                                   \
            {                                                                                                                      \
                0x0000, ZCL_UTC_TIME_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_SINGLETON), { NULL }             \
            }, /* 3 / Time / time*/                                                                                                \
            {                                                                                                                      \
                0x0001, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }  \
            }, /* 4 / Time / time status*/                                                                                         \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }                           \
            }, /* 5 / Time / cluster revision*/                                                                                    \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 6 / Over the Air Bootloading / cluster revision*/                                                                \
            {                                                                                                                      \
                0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x01 }                              \
            }, /* 7 / Keep-Alive / Keep-Alive Base*/                                                                               \
            {                                                                                                                      \
                0x0001, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0014 }                           \
            }, /* 8 / Keep-Alive / Keep-Alive Jitter*/                                                                             \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }                           \
            }, /* 9 / Keep-Alive / cluster revision*/                                                                              \
            {                                                                                                                      \
                0x0000, ZCL_OCTET_STRING_ATTRIBUTE_TYPE, 13, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) &(generatedDefaults[0]) }    \
            }, /* 10 / Price / tier 1 price label*/                                                                                \
            {                                                                                                                      \
                0x0001, ZCL_OCTET_STRING_ATTRIBUTE_TYPE, 13, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) &(generatedDefaults[13]) }   \
            },                                                            /* 11 / Price / tier 2 price label*/                     \
            { 0x0200, ZCL_UTC_TIME_ATTRIBUTE_TYPE, 4, (0x00), { NULL } }, /* 12 / Price / start of block period*/                  \
            { 0x0201, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (0x00), { NULL } },   /* 13 / Price / block period duration (minutes)*/        \
            { 0x0202, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (0x00), { NULL } },   /* 14 / Price / threshold multiplier*/                   \
            { 0x0203, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (0x00), { NULL } },   /* 15 / Price / threshold divisor*/                      \
            { 0x0204, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } }, /* 16 / Price / block period duration type*/  \
            { 0x0300, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },   /* 17 / Price / commodity type*/              \
            { 0x0301, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (0x00), { NULL } },              /* 18 / Price / standing charge*/             \
            {                                                                                                                      \
                0x0302, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (0x00), { (uint8_t *) &(generatedDefaults[26]) }                             \
            }, /* 19 / Price / conversion factor*/                                                                                 \
            {                                                                                                                      \
                0x0303, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x70 }                                                \
            }, /* 20 / Price / conversion factor trailing digit*/                                                                  \
            {                                                                                                                      \
                0x0304, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (0x00), { (uint8_t *) &(generatedDefaults[30]) }                             \
            },                                                                     /* 21 / Price / calorific value*/               \
            { 0x0305, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x01 } }, /* 22 / Price / calorific value unit*/          \
            {                                                                                                                      \
                0x0306, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x60 }                                                \
            }, /* 23 / Price / calorific value trailing digit*/                                                                    \
            {                                                                                                                      \
                0x0610, ZCL_OCTET_STRING_ATTRIBUTE_TYPE, 25, (0x00), { (uint8_t *) &(generatedDefaults[34]) }                      \
            },                                                                     /* 24 / Price / tariff label*/                  \
            { 0x0611, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } }, /* 25 / Price / number of price tiers in use*/  \
            {                                                                                                                      \
                0x0612, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                  \
            }, /* 26 / Price / number of block thresholds in use*/                                                                 \
            { 0x0613, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0xFF } },      /* 27 / Price / tier block mode*/          \
            { 0x0615, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },      /* 28 / Price / unit of measure*/          \
            { 0x0616, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000UL } }, /* 29 / Price / currency*/                 \
            { 0x0617, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 30 / Price / price trailing digit*/     \
            { 0x0619, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0 } },         /* 31 / Price / tariff resolution period*/ \
            { 0x0620, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (0x00), { (uint8_t *) &(generatedDefaults[59]) } }, /* 32 / Price / CO2*/      \
            { 0x0621, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x01 } },                      /* 33 / Price / CO2 unit*/ \
            { 0x0622, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } }, /* 34 / Price / CO2 trailing digit*/          \
            { 0x8202, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (0x00), { NULL } },              /* 35 / Price / rx threshold multiplier*/     \
            { 0x8203, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (0x00), { NULL } },              /* 36 / Price / rx threshold divisor*/        \
            {                                                                                                                      \
                0x8610, ZCL_OCTET_STRING_ATTRIBUTE_TYPE, 25, (0x00), { (uint8_t *) &(generatedDefaults[63]) }                      \
            }, /* 37 / Price / rx tariff label*/                                                                                   \
            {                                                                                                                      \
                0x8611, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                  \
            }, /* 38 / Price / rx number of price tiers in use*/                                                                   \
            {                                                                                                                      \
                0x8612, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                  \
            }, /* 39 / Price / rx number of block thresholds in use*/                                                              \
            { 0x8613, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0xFF } },    /* 40 / Price / rx tier block mode*/         \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 41 / Price / cluster revision*/           \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 42 / Demand Response and Load Control / cluster revision*/                                                       \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 43 / Messaging / cluster revision*/       \
            {                                                                                                                      \
                0x0000, ZCL_ENUM16_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT | ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0000 }   \
            }, /* 44 / Key Establishment / key establishment suite (client)*/                                                      \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT | ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }   \
            }, /* 45 / Key Establishment / cluster revision*/                                                                      \
            {                                                                                                                      \
                0x0000, ZCL_ENUM16_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0000 }                           \
            }, /* 46 / Key Establishment / key establishment suite (server)*/                                                      \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }                           \
            }, /* 47 / Key Establishment / cluster revision*/                                                                      \
    }

// Cluster function static arrays
#define GENERATED_FUNCTION_ARRAYS                                                                                                  \
    const EmberAfGenericClusterFunction emberAfFuncArrayTimeClusterServer[]                      = { (                             \
        EmberAfGenericClusterFunction) emberAfTimeClusterServerInitCallback };                                \
    const EmberAfGenericClusterFunction emberAfFuncArrayOtaBootloadClusterServer[]               = { (                             \
        EmberAfGenericClusterFunction) emberAfOtaBootloadClusterServerInitCallback };                                \
    const EmberAfGenericClusterFunction emberAfFuncArrayPriceClusterServer[]                     = { (                             \
        EmberAfGenericClusterFunction) emberAfPriceClusterServerInitCallback };                                \
    const EmberAfGenericClusterFunction emberAfFuncArrayDemandResponseLoadControlClusterServer[] = { (                             \
        EmberAfGenericClusterFunction) emberAfDemandResponseLoadControlClusterServerInitCallback };                                \
    const EmberAfGenericClusterFunction emberAfFuncArrayMessagingClusterServer[]                 = { (                             \
        EmberAfGenericClusterFunction) emberAfMessagingClusterServerInitCallback };                                \
    const EmberAfGenericClusterFunction emberAfFuncArrayKeyEstablishmentClusterClient[]          = {                               \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterClientAttributeChangedCallback,                     \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterClientDefaultResponseCallback,                      \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterClientMessageSentCallback,                          \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterClientPreAttributeChangedCallback                   \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayKeyEstablishmentClusterServer[] = {                                        \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterServerInitCallback,                                          \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterServerAttributeChangedCallback,                              \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterServerDefaultResponseCallback,                               \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterServerMessageSentCallback,                                   \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterServerPreAttributeChangedCallback                            \
    };

// Clusters definitions
#define GENERATED_CLUSTERS                                                                                                         \
    {                                                                                                                              \
        {                                                                                                                          \
            0x0000, (EmberAfAttributeMetadata *) &(generatedAttributes[0]), 3, 0, (CLUSTER_MASK_SERVER), NULL,                     \
        },                                                                                                                         \
            {                                                                                                                      \
                0x000A, (EmberAfAttributeMetadata *) &(generatedAttributes[3]), 3,                                                 \
                0,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),     emberAfFuncArrayTimeClusterServer,                 \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0019, (EmberAfAttributeMetadata *) &(generatedAttributes[6]), 1,                                                 \
                2,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),     emberAfFuncArrayOtaBootloadClusterServer,          \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0025, (EmberAfAttributeMetadata *) &(generatedAttributes[7]), 3, 0, (CLUSTER_MASK_SERVER), NULL,                 \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0700, (EmberAfAttributeMetadata *) &(generatedAttributes[10]), 32,                                               \
                131,    (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayPriceClusterServer,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0701,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[42]),                                                           \
                1,                                                                                                                 \
                2,                                                                                                                 \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),                                                                \
                emberAfFuncArrayDemandResponseLoadControlClusterServer,                                                            \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0703, (EmberAfAttributeMetadata *) &(generatedAttributes[43]), 1,                                                \
                2,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayMessagingClusterServer,           \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0800,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[44]),                                                           \
                2,                                                                                                                 \
                0,                                                                                                                 \
                (CLUSTER_MASK_CLIENT | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION | CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION |          \
                 CLUSTER_MASK_MESSAGE_SENT_FUNCTION | CLUSTER_MASK_PRE_ATTRIBUTE_CHANGED_FUNCTION),                                \
                emberAfFuncArrayKeyEstablishmentClusterClient,                                                                     \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0800,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[46]),                                                           \
                2,                                                                                                                 \
                0,                                                                                                                 \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION |                      \
                 CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION | CLUSTER_MASK_MESSAGE_SENT_FUNCTION |                                     \
                 CLUSTER_MASK_PRE_ATTRIBUTE_CHANGED_FUNCTION),                                                                     \
                emberAfFuncArrayKeyEstablishmentClusterServer,                                                                     \
            },                                                                                                                     \
    }

// Endpoint types
#define GENERATED_ENDPOINT_TYPES                                                                                                   \
    {                                                                                                                              \
        { (EmberAfCluster *) &(generatedClusters[0]), 9, 137 },                                                                    \
    }

// Cluster manufacturer codes
#define GENERATED_CLUSTER_MANUFACTURER_CODES                                                                                       \
    {                                                                                                                              \
        {                                                                                                                          \
            0x00, 0x00                                                                                                             \
        }                                                                                                                          \
    }
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT (0)

// Attribute manufacturer codes
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES                                                                                     \
    {                                                                                                                              \
        {                                                                                                                          \
            0x00, 0x00                                                                                                             \
        }                                                                                                                          \
    }
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT (0)

// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (25)
// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (24)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE 137

// Array of endpoints that are supported
#define FIXED_ENDPOINT_ARRAY                                                                                                       \
    {                                                                                                                              \
        1                                                                                                                          \
    }

// Array of profile ids
#define FIXED_PROFILE_IDS                                                                                                          \
    {                                                                                                                              \
        265                                                                                                                        \
    }

// Array of device ids
#define FIXED_DEVICE_IDS                                                                                                           \
    {                                                                                                                              \
        1280                                                                                                                       \
    }

// Array of device versions
#define FIXED_DEVICE_VERSIONS                                                                                                      \
    {                                                                                                                              \
        1                                                                                                                          \
    }

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES                                                                                                       \
    {                                                                                                                              \
        0                                                                                                                          \
    }

// Array of networks supported on each endpoint
#define FIXED_NETWORKS                                                                                                             \
    {                                                                                                                              \
        0                                                                                                                          \
    }

#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS                                                                       \
    void emberAfPluginNetworkFindInitCallback(void);                                                                               \
    void emberAfPluginFragmentationInitCallback(void);                                                                             \
    void emberAfPluginSimpleClockInitCallback(void);                                                                               \
    void emberAfPluginTrustCenterNwkKeyUpdatePeriodicInitCallback(void);

#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS                                                                              \
    emberAfPluginNetworkFindInitCallback();                                                                                        \
    emberAfPluginFragmentationInitCallback();                                                                                      \
    emberAfPluginSimpleClockInitCallback();                                                                                        \
    emberAfPluginTrustCenterNwkKeyUpdatePeriodicInitCallback();

#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS                                                                   \
    void emberAfPluginFragmentationNcpInitCallback(bool memoryAllocation);                                                         \
    void emberAfPluginNcpConfigurationNcpInitCallback(bool memoryAllocation);                                                      \
    void emberAfPluginAddressTableNcpInitCallback(bool memoryAllocation);

#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS                                                                          \
    emberAfPluginFragmentationNcpInitCallback(memoryAllocation);                                                                   \
    emberAfPluginNcpConfigurationNcpInitCallback(memoryAllocation);                                                                \
    emberAfPluginAddressTableNcpInitCallback(memoryAllocation);

#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS                                                               \
    void emberAfPluginNetworkFindStackStatusCallback(EmberStatus status);                                                          \
    void emberAfPluginConcentratorStackStatusCallback(EmberStatus status);

#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS                                                                      \
    emberAfPluginNetworkFindStackStatusCallback(status);                                                                           \
    emberAfPluginConcentratorStackStatusCallback(status);

#define EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_DECLARATIONS                                                               \
    void emberAfPluginConcentratorMessageSentCallback(EmberOutgoingMessageType type, uint16_t indexOrDestination,                  \
                                                      EmberApsFrame * apsFrame, EmberStatus status, uint16_t messageLength,        \
                                                      uint8_t * messageContents);

#define EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_CALLS                                                                      \
    emberAfPluginConcentratorMessageSentCallback(type, indexOrDestination, apsFrame, status, messageLength, messageContents);

// Generated data for the command discovery
#define GENERATED_COMMANDS                                                                                                         \
    {                                                                                                                              \
        { 0x0019, 0x00, COMMAND_MASK_OUTGOING_SERVER },     /* Over the Air Bootloading / ImageNotify */                           \
            { 0x0019, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Over the Air Bootloading / QueryNextImageResponse */                \
            { 0x0019, 0x05, COMMAND_MASK_OUTGOING_SERVER }, /* Over the Air Bootloading / ImageBlockResponse */                    \
            { 0x0019, 0x07, COMMAND_MASK_OUTGOING_SERVER }, /* Over the Air Bootloading / UpgradeEndResponse */                    \
            { 0x0700, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Price / PublishPrice */                                             \
            { 0x0700, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Price / GetCurrentPrice */                                          \
            { 0x0700, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Price / GetScheduledPrices */                                       \
            { 0x0700, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Price / PriceAcknowledgement */                                     \
            { 0x0700, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Price / GetBlockPeriods */                                          \
            { 0x0700, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Price / GetConversionFactor */                                      \
            { 0x0700, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Price / GetCalorificValue */                                        \
            { 0x0700, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* Price / GetTariffInformation */                                     \
            { 0x0700, 0x07, COMMAND_MASK_INCOMING_SERVER }, /* Price / GetPriceMatrix */                                           \
            { 0x0700, 0x08, COMMAND_MASK_INCOMING_SERVER }, /* Price / GetBlockThresholds */                                       \
            { 0x0700, 0x09, COMMAND_MASK_INCOMING_SERVER }, /* Price / GetCO2Value */                                              \
            { 0x0700, 0x0A, COMMAND_MASK_INCOMING_SERVER }, /* Price / GetTierLabels */                                            \
            { 0x0700, 0x0B, COMMAND_MASK_INCOMING_SERVER }, /* Price / GetBillingPeriod */                                         \
            { 0x0700, 0x0C, COMMAND_MASK_INCOMING_SERVER }, /* Price / GetConsolidatedBill */                                      \
            { 0x0700, 0x0D, COMMAND_MASK_INCOMING_SERVER }, /* Price / CppEventResponse */                                         \
            { 0x0700, 0x0E, COMMAND_MASK_INCOMING_SERVER }, /* Price / GetCreditPayment */                                         \
            { 0x0700, 0x0F, COMMAND_MASK_INCOMING_SERVER }, /* Price / GetCurrencyConversionCommand */                             \
            { 0x0700, 0x10, COMMAND_MASK_INCOMING_SERVER }, /* Price / GetTariffCancellation */                                    \
            { 0x0701, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Demand Response and Load Control / LoadControlEvent */              \
            { 0x0701, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Demand Response and Load Control / ReportEventStatus */             \
            { 0x0701, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Demand Response and Load Control / CancelLoadControlEvent */        \
            { 0x0701, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Demand Response and Load Control / GetScheduledEvents */            \
            { 0x0701, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Demand Response and Load Control / CancelAllLoadControlEvents */    \
            { 0x0703, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Messaging / DisplayMessage */                                       \
            { 0x0703, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Messaging / GetLastMessage */                                       \
            { 0x0703, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Messaging / CancelMessage */                                        \
            { 0x0703, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Messaging / MessageConfirmation */                                  \
            {                                                                                                                      \
                0x0800, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER                                          \
            }, /* Key Establishment / InitiateKeyEstablishmentRequest */                                                           \
            {                                                                                                                      \
                0x0800, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT                                          \
            }, /* Key Establishment / InitiateKeyEstablishmentResponse */                                                          \
            { 0x0800, 0x01,                                                                                                        \
              COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Key Establishment / EphemeralDataRequest */        \
            { 0x0800, 0x01,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Key Establishment / EphemeralDataResponse */       \
            { 0x0800, 0x02,                                                                                                        \
              COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Key Establishment / ConfirmKeyDataRequest */       \
            { 0x0800, 0x02,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Key Establishment / ConfirmKeyDataResponse */      \
            { 0x0800, 0x03,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Key Establishment / TerminateKeyEstablishment */   \
    }
#define EMBER_AF_GENERATED_COMMAND_COUNT (38)

// Command manufacturer codes
#define GENERATED_COMMAND_MANUFACTURER_CODES                                                                                       \
    {                                                                                                                              \
        {                                                                                                                          \
            0x00, 0x00                                                                                                             \
        }                                                                                                                          \
    }
#define GENERATED_COMMAND_MANUFACTURER_CODE_COUNT (0)

// Generated reporting configuration defaults
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS                                                                               \
    {                                                                                                                              \
    }
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS_TABLE_SIZE (0)
#endif // SILABS_AF_ENDPOINT_CONFIG
