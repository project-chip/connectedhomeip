/**
 *
 *    Copyright (c) 2020 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *
 *    Copyright (c) 2020 Silicon Labs
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef SILABS_AF_ENDPOINT_CONFIG
#define SILABS_AF_ENDPOINT_CONFIG

// Fixed number of defined endpoints
#define FIXED_ENDPOINT_COUNT (1)

// Generated defaults
#if BIGENDIAN_CPU
#define GENERATED_DEFAULTS                                                                                                         \
    {                                                                                                                              \
        11, 'S', 'i', 'l', 'i', 'c', 'o', 'n', 'L', 'a', 'b', 's', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     \
            0 /* 0,Default value: Basic,manufacturer name */, 19, 'Z', '3', 'C', 'o', 'l', 'o', 'r', 'C', 'o', 'n', 't', 'r', 'o', \
            'l', 'L', 'i', 'g', 'h', 't', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 /* 33,Default value: Basic,model identifier */,    \
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 66,Default value: Over the Air Bootloading,OTA Upgrade Server ID */, \
            0xFF, 0xFF, 0xFF, 0xFF /* 74,Default value: Over the Air Bootloading,Offset (address) into the file */, 0x00, 0x00,    \
            0x00, 0x30 /* 78,Default value: Over the Air Bootloading,OTA Current File Version */, 0xFF, 0xFF, 0xFF,                \
            0xFF /* 82,Default value: Over the Air Bootloading,OTA Downloaded File Version */,                                     \
    }
#else // ! BIGENDIAN_CPU
#define GENERATED_DEFAULTS                                                                                                         \
    {                                                                                                                              \
        11, 'S', 'i', 'l', 'i', 'c', 'o', 'n', 'L', 'a', 'b', 's', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     \
            0 /* 0,Default value: Basic,manufacturer name */, 19, 'Z', '3', 'C', 'o', 'l', 'o', 'r', 'C', 'o', 'n', 't', 'r', 'o', \
            'l', 'L', 'i', 'g', 'h', 't', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 /* 33,Default value: Basic,model identifier */,    \
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 66,Default value: Over the Air Bootloading,OTA Upgrade Server ID */, \
            0xFF, 0xFF, 0xFF, 0xFF /* 74,Default value: Over the Air Bootloading,Offset (address) into the file */, 0x30, 0x00,    \
            0x00, 0x00 /* 78,Default value: Over the Air Bootloading,OTA Current File Version */, 0xFF, 0xFF, 0xFF,                \
            0xFF /* 82,Default value: Over the Air Bootloading,OTA Downloaded File Version */,                                     \
    }
#endif // BIGENDIAN_CPU

// Generated attributes
#define GENERATED_ATTRIBUTES                                                                                                       \
    {                                                                                                                              \
        { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x03 } }, /* 0 / Basic / ZCL version*/    \
            {                                                                                                                      \
                0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                              \
            }, /* 1 / Basic / application version*/                                                                                \
            {                                                                                                                      \
                0x0002, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                              \
            }, /* 2 / Basic / stack version*/                                                                                      \
            {                                                                                                                      \
                0x0003, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                              \
            }, /* 3 / Basic / hardware version*/                                                                                   \
            {                                                                                                                      \
                0x0004, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) &(generatedDefaults[0]) }    \
            }, /* 4 / Basic / manufacturer name*/                                                                                  \
            {                                                                                                                      \
                0x0005, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) &(generatedDefaults[33]) }   \
            }, /* 5 / Basic / model identifier*/                                                                                   \
            {                                                                                                                      \
                0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                              \
            }, /* 6 / Basic / power source*/                                                                                       \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }                           \
            }, /* 7 / Basic / cluster revision*/                                                                                   \
            {                                                                                                                      \
                0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0000 }                            \
            },                                                                        /* 8 / Identify / identify time*/            \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 9 / Identify / cluster revision*/         \
            { 0x0000, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },  /* 10 / Groups / name support*/              \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 11 / Groups / cluster revision*/          \
            { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 12 / Scenes / scene count*/               \
            { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 13 / Scenes / current scene*/             \
            { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 } }, /* 14 / Scenes / current group*/             \
            { 0x0003, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },  /* 15 / Scenes / scene valid*/               \
            { 0x0004, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },  /* 16 / Scenes / name support*/              \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 17 / Scenes / cluster revision*/          \
            { 0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 0x01 } }, /* 18 / On/off / on/off*/  \
            {                                                                                                                      \
                0x4003, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 0xFF }     \
            },                                                                        /* 19 / On/off / start up on off*/           \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 20 / On/off / cluster revision*/          \
            {                                                                                                                      \
                0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 0xFE }                               \
            }, /* 21 / Level Control / current level*/                                                                             \
            {                                                                                                                      \
                0x000F, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 0x00 }   \
            }, /* 22 / Level Control / options*/                                                                                   \
            {                                                                                                                      \
                0x0011, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 0xFF }     \
            }, /* 23 / Level Control / on level*/                                                                                  \
            {                                                                                                                      \
                0x4000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 0xFF }     \
            }, /* 24 / Level Control / start up current level*/                                                                    \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 25 / Level Control / cluster revision*/   \
            {                                                                                                                      \
                0x0000, ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE, 8, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) &(generatedDefaults[66]) }      \
            }, /* 26 / Over the Air Bootloading / OTA Upgrade Server ID*/                                                          \
            {                                                                                                                      \
                0x0001, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) &(generatedDefaults[74]) }            \
            }, /* 27 / Over the Air Bootloading / Offset (address) into the file*/                                                 \
            {                                                                                                                      \
                0x0002, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) &(generatedDefaults[78]) }            \
            }, /* 28 / Over the Air Bootloading / OTA Current File Version*/                                                       \
            {                                                                                                                      \
                0x0004, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) &(generatedDefaults[82]) }            \
            }, /* 29 / Over the Air Bootloading / OTA Downloaded File Version*/                                                    \
            {                                                                                                                      \
                0x0006, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                                 \
            }, /* 30 / Over the Air Bootloading / OTA Upgrade Status*/                                                             \
            {                                                                                                                      \
                0x0007, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x1002 }                              \
            }, /* 31 / Over the Air Bootloading / Manufacturer ID*/                                                                \
            {                                                                                                                      \
                0x0008, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0xA002 }                              \
            }, /* 32 / Over the Air Bootloading / Image Type ID*/                                                                  \
            {                                                                                                                      \
                0x0009, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0000UL }                            \
            }, /* 33 / Over the Air Bootloading / Minimum Block Request Period*/                                                   \
            {                                                                                                                      \
                0x000A, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { NULL }                                            \
            }, /* 34 / Over the Air Bootloading / Image Stamp*/                                                                    \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 35 / Over the Air Bootloading / cluster revision*/                                                               \
            {                                                                                                                      \
                0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 0x00 }                               \
            }, /* 36 / Color Control / current hue*/                                                                               \
            {                                                                                                                      \
                0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 254 }                                \
            },                                                                        /* 37 / Color Control / current saturation*/ \
            { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 } }, /* 38 / Color Control / remaining time*/     \
            {                                                                                                                      \
                0x0003, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 0x616B }                            \
            }, /* 39 / Color Control / current x*/                                                                                 \
            {                                                                                                                      \
                0x0004, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 0x607D }                            \
            }, /* 40 / Color Control / current y*/                                                                                 \
            {                                                                                                                      \
                0x0007, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 278 }                               \
            }, /* 41 / Color Control / color temperature*/                                                                         \
            {                                                                                                                      \
                0x0008, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 0x01 }                               \
            }, /* 42 / Color Control / color mode*/                                                                                \
            {                                                                                                                      \
                0x000F, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x00 }                             \
            },                                                                     /* 43 / Color Control / color control options*/ \
            { 0x0010, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0 } },    /* 44 / Color Control / number of primaries*/   \
            { 0x4001, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x01 } }, /* 45 / Color Control / enhanced color mode*/   \
            {                                                                                                                      \
                0x400A, ZCL_BITMAP16_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0019 }                                             \
            }, /* 46 / Color Control / color capabilities*/                                                                        \
            {                                                                                                                      \
                0x400B, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 200 }                                                  \
            }, /* 47 / Color Control / color temp physical min*/                                                                   \
            {                                                                                                                      \
                0x400C, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 454 }                                                  \
            }, /* 48 / Color Control / color temp physical max*/                                                                   \
            {                                                                                                                      \
                0x400D, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 200 }                                                  \
            }, /* 49 / Color Control / couple color temp to level min-mireds*/                                                     \
            {                                                                                                                      \
                0x4010, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 0xFFFF }  \
            }, /* 50 / Color Control / start up color temperature mireds*/                                                         \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 51 / Color Control / cluster revision*/   \
            {                                                                                                                      \
                0x011B, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 }                                               \
            }, /* 52 / Diagnostics / average mac retry per aps message sent*/                                                      \
            { 0x011C, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 53 / Diagnostics / last message lqi*/     \
            { 0x011D, ZCL_INT8S_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 54 / Diagnostics / last message rssi*/    \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 55 / Diagnostics / cluster revision*/     \
            {                                                                                                                      \
                0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                \
            }, /* 56 / Configuration Cluster / Prevents OTA writing of tokens.*/                                                   \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 57 / Configuration Cluster / cluster revision*/                                                                  \
            {                                                                                                                      \
                0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 }                                               \
            }, /* 58 / MFGLIB Cluster / Number of packets received while in MFGLIB mode.*/                                         \
            {                                                                                                                      \
                0x0001, ZCL_INT8S_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                  \
            }, /* 59 / MFGLIB Cluster / RSSI of the first received packet.*/                                                       \
            {                                                                                                                      \
                0x0002, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                  \
            }, /* 60 / MFGLIB Cluster / LQI of the first received packet.*/                                                        \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 61 / MFGLIB Cluster / cluster revision*/  \
    }

// Cluster function static arrays
#define GENERATED_FUNCTION_ARRAYS                                                                                                  \
    const EmberAfGenericClusterFunction emberAfFuncArrayIdentifyClusterServer[] = {                                                \
        (EmberAfGenericClusterFunction) emberAfIdentifyClusterServerInitCallback,                                                  \
        (EmberAfGenericClusterFunction) emberAfIdentifyClusterServerAttributeChangedCallback                                       \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayGroupsClusterServer[] = { (                                                \
        EmberAfGenericClusterFunction) emberAfGroupsClusterServerInitCallback };                                                   \
    const EmberAfGenericClusterFunction emberAfFuncArrayScenesClusterServer[] = { (                                                \
        EmberAfGenericClusterFunction) emberAfScenesClusterServerInitCallback };                                                   \
    const EmberAfGenericClusterFunction emberAfFuncArrayOnOffClusterServer[]  = {                                                  \
        (EmberAfGenericClusterFunction) emberAfOnOffClusterServerInitCallback,                                                    \
        (EmberAfGenericClusterFunction) emberAfOnOffClusterServerAttributeChangedCallback                                         \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayLevelControlClusterServer[] = {                                            \
        (EmberAfGenericClusterFunction) emberAfLevelControlClusterServerInitCallback,                                              \
        (EmberAfGenericClusterFunction) emberAfLevelControlClusterServerAttributeChangedCallback                                   \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayOtaBootloadClusterClient[] = {                                             \
        (EmberAfGenericClusterFunction) emberAfOtaBootloadClusterClientInitCallback,                                               \
        (EmberAfGenericClusterFunction) emberAfOtaBootloadClusterClientDefaultResponseCallback                                     \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayColorControlClusterServer[] = {                                            \
        (EmberAfGenericClusterFunction) emberAfColorControlClusterServerInitCallback,                                              \
        (EmberAfGenericClusterFunction) emberAfColorControlClusterServerAttributeChangedCallback                                   \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayOtaConfigurationClusterServer[] = { (                                      \
        EmberAfGenericClusterFunction) emberAfOtaConfigurationClusterServerInitCallback };

// Clusters definitions
#define GENERATED_CLUSTERS                                                                                                         \
    {                                                                                                                              \
        {                                                                                                                          \
            0x0000, (EmberAfAttributeMetadata *) &(generatedAttributes[0]), 8, 0, (CLUSTER_MASK_SERVER), NULL,                     \
        },                                                                                                                         \
            {                                                                                                                      \
                0x0003,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[8]),                                                            \
                2,                                                                                                                 \
                4,                                                                                                                 \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION),                      \
                emberAfFuncArrayIdentifyClusterServer,                                                                             \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0004, (EmberAfAttributeMetadata *) &(generatedAttributes[10]), 2,                                                \
                3,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayGroupsClusterServer,              \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0005, (EmberAfAttributeMetadata *) &(generatedAttributes[12]), 6,                                                \
                8,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayScenesClusterServer,              \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0006,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[18]),                                                           \
                3,                                                                                                                 \
                4,                                                                                                                 \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION),                      \
                emberAfFuncArrayOnOffClusterServer,                                                                                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0008,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[21]),                                                           \
                5,                                                                                                                 \
                6,                                                                                                                 \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION),                      \
                emberAfFuncArrayLevelControlClusterServer,                                                                         \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0019,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[26]),                                                           \
                10,                                                                                                                \
                33,                                                                                                                \
                (CLUSTER_MASK_CLIENT | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION),                       \
                emberAfFuncArrayOtaBootloadClusterClient,                                                                          \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0300,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[36]),                                                           \
                16,                                                                                                                \
                26,                                                                                                                \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION),                      \
                emberAfFuncArrayColorControlClusterServer,                                                                         \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0B05, (EmberAfAttributeMetadata *) &(generatedAttributes[52]), 4, 6, (CLUSTER_MASK_SERVER), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0xFC01, (EmberAfAttributeMetadata *) &(generatedAttributes[56]), 2,                                                \
                3,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayOtaConfigurationClusterServer,    \
            },                                                                                                                     \
            {                                                                                                                      \
                0xFC02, (EmberAfAttributeMetadata *) &(generatedAttributes[58]), 4, 6, (CLUSTER_MASK_SERVER), NULL,                \
            },                                                                                                                     \
    }

// Endpoint types
#define GENERATED_ENDPOINT_TYPES                                                                                                   \
    {                                                                                                                              \
        { (EmberAfCluster *) &(generatedClusters[0]), 11, 99 },                                                                    \
    }

// Cluster manufacturer codes
#define GENERATED_CLUSTER_MANUFACTURER_CODES                                                                                       \
    {                                                                                                                              \
        { 0x0009, 0x1002 }, { 0x000A, 0x1002 },                                                                                    \
    }
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT (2)

// Attribute manufacturer codes
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES                                                                                     \
    {                                                                                                                              \
        { 0x0038, 0x1002 }, { 0x003A, 0x1002 }, { 0x003B, 0x1002 }, { 0x003C, 0x1002 },                                            \
    }
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT (4)

// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (33)
// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (73)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE 99

// Array of endpoints that are supported
#define FIXED_ENDPOINT_ARRAY                                                                                                       \
    {                                                                                                                              \
        1                                                                                                                          \
    }

// Array of profile ids
#define FIXED_PROFILE_IDS                                                                                                          \
    {                                                                                                                              \
        260                                                                                                                        \
    }

// Array of device ids
#define FIXED_DEVICE_IDS                                                                                                           \
    {                                                                                                                              \
        258                                                                                                                        \
    }

// Array of device versions
#define FIXED_DEVICE_VERSIONS                                                                                                      \
    {                                                                                                                              \
        1                                                                                                                          \
    }

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES                                                                                                       \
    {                                                                                                                              \
        0                                                                                                                          \
    }

// Array of networks supported on each endpoint
#define FIXED_NETWORKS                                                                                                             \
    {                                                                                                                              \
        0                                                                                                                          \
    }

#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS                                                                       \
    void emberAfPluginEepromInitCallback(void);                                                                                    \
    void emberAfPluginBulbUiInitCallback(void);                                                                                    \
    void emberAfPluginLedRgbPwmInitCallback(void);                                                                                 \
    void emberAfPluginReportingInitCallback(void);                                                                                 \
    void emberAfPluginInstallCodeReadInitCallback(void);                                                                           \
    void emberAfPluginBulbPwmDriverInitCallback(void);

#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS                                                                              \
    emberAfPluginEepromInitCallback();                                                                                             \
    emberAfPluginBulbUiInitCallback();                                                                                             \
    emberAfPluginLedRgbPwmInitCallback();                                                                                          \
    emberAfPluginReportingInitCallback();                                                                                          \
    emberAfPluginInstallCodeReadInitCallback();                                                                                    \
    emberAfPluginBulbPwmDriverInitCallback();

#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS                                                                   \
    void emberAfPluginAddressTableNcpInitCallback(bool memoryAllocation);

#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS emberAfPluginAddressTableNcpInitCallback(memoryAllocation);

#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS                                                               \
    void emberAfPluginBulbUiStackStatusCallback(EmberStatus status);                                                               \
    void emberAfPluginEndDeviceSupportStackStatusCallback(EmberStatus status);                                                     \
    void emberAfPluginManufacturingLibraryOtaStackStatusCallback(EmberStatus status);                                              \
    void emberAfPluginReportingStackStatusCallback(EmberStatus status);                                                            \
    void emberAfPluginOtaClientStackStatusCallback(EmberStatus status);                                                            \
    void emberAfPluginNetworkSteeringStackStatusCallback(EmberStatus status);

#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS                                                                      \
    emberAfPluginBulbUiStackStatusCallback(status);                                                                                \
    emberAfPluginEndDeviceSupportStackStatusCallback(status);                                                                      \
    emberAfPluginManufacturingLibraryOtaStackStatusCallback(status);                                                               \
    emberAfPluginReportingStackStatusCallback(status);                                                                             \
    emberAfPluginOtaClientStackStatusCallback(status);                                                                             \
    emberAfPluginNetworkSteeringStackStatusCallback(status);

// Generated data for the command discovery
#define GENERATED_COMMANDS                                                                                                         \
    {                                                                                                                              \
        { 0x0000, 0x00, COMMAND_MASK_INCOMING_SERVER },     /* Basic / ResetToFactoryDefaults */                                   \
            { 0x0003, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Identify / IdentifyQueryResponse */                                 \
            { 0x0003, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Identify / Identify */                                              \
            { 0x0003, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Identify / IdentifyQuery */                                         \
            { 0x0004, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / AddGroupResponse */                                        \
            { 0x0004, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroup */                                                \
            { 0x0004, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / ViewGroupResponse */                                       \
            { 0x0004, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Groups / ViewGroup */                                               \
            { 0x0004, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / GetGroupMembershipResponse */                              \
            { 0x0004, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Groups / GetGroupMembership */                                      \
            { 0x0004, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / RemoveGroupResponse */                                     \
            { 0x0004, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveGroup */                                             \
            { 0x0004, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveAllGroups */                                         \
            { 0x0004, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroupIfIdentifying */                                   \
            { 0x0005, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / AddSceneResponse */                                        \
            { 0x0005, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / AddScene */                                                \
            { 0x0005, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / ViewSceneResponse */                                       \
            { 0x0005, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / ViewScene */                                               \
            { 0x0005, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveSceneResponse */                                     \
            { 0x0005, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveScene */                                             \
            { 0x0005, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveAllScenesResponse */                                 \
            { 0x0005, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveAllScenes */                                         \
            { 0x0005, 0x04, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / StoreSceneResponse */                                      \
            { 0x0005, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / StoreScene */                                              \
            { 0x0005, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RecallScene */                                             \
            { 0x0005, 0x06, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / GetSceneMembershipResponse */                              \
            { 0x0005, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / GetSceneMembership */                                      \
            { 0x0006, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* On/off / Off */                                                     \
            { 0x0006, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* On/off / On */                                                      \
            { 0x0006, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* On/off / Toggle */                                                  \
            { 0x0008, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveToLevel */                                      \
            { 0x0008, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Move */                                             \
            { 0x0008, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Step */                                             \
            { 0x0008, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Stop */                                             \
            { 0x0008, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveToLevelWithOnOff */                             \
            { 0x0008, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveWithOnOff */                                    \
            { 0x0008, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / StepWithOnOff */                                    \
            { 0x0008, 0x07, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / StopWithOnOff */                                    \
            { 0x0019, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / QueryNextImageRequest */                 \
            { 0x0019, 0x03, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / ImageBlockRequest */                     \
            { 0x0019, 0x06, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / UpgradeEndRequest */                     \
            { 0x0300, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / MoveToHue */                                        \
            { 0x0300, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / MoveHue */                                          \
            { 0x0300, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / StepHue */                                          \
            { 0x0300, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / MoveToSaturation */                                 \
            { 0x0300, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / MoveSaturation */                                   \
            { 0x0300, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / StepSaturation */                                   \
            { 0x0300, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / MoveToHueAndSaturation */                           \
            { 0x0300, 0x07, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / MoveToColor */                                      \
            { 0x0300, 0x08, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / MoveColor */                                        \
            { 0x0300, 0x09, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / StepColor */                                        \
            { 0x0300, 0x0A, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / MoveToColorTemperature */                           \
            { 0x0300, 0x47, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / StopMoveStep */                                     \
            { 0x0300, 0x4B, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / MoveColorTemperature */                             \
            { 0x0300, 0x4C, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / StepColorTemperature */                             \
            { 0xFC01, 0x00,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Configuration Cluster / ReturnToken */       \
            { 0xFC01, 0x00,                                                                                                        \
              COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Configuration Cluster / SetToken */          \
            { 0xFC01, 0x01,                                                                                                        \
              COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Configuration Cluster / LockTokens */        \
            { 0xFC01, 0x02,                                                                                                        \
              COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Configuration Cluster / ReadTokens */        \
            { 0xFC01, 0x03,                                                                                                        \
              COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Configuration Cluster / UnlockTokens */      \
            { 0xFC02, 0x00, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* MFGLIB Cluster / stream */     \
            { 0xFC02, 0x01, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* MFGLIB Cluster / tone */       \
            { 0xFC02, 0x02, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* MFGLIB Cluster / rxMode */     \
    }
#define EMBER_AF_GENERATED_COMMAND_COUNT (63)

// Command manufacturer codes
#define GENERATED_COMMAND_MANUFACTURER_CODES                                                                                       \
    {                                                                                                                              \
        { 0x0037, 0x1002 }, { 0x0038, 0x1002 }, { 0x0039, 0x1002 }, { 0x003A, 0x1002 }, { 0x003B, 0x1002 }, { 0x003C, 0x1002 },    \
            { 0x003D, 0x1002 }, { 0x003E, 0x1002 },                                                                                \
    }
#define GENERATED_COMMAND_MANUFACTURER_CODE_COUNT (8)

// Generated reporting configuration defaults
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS                                                                               \
    {                                                                                                                              \
        { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0006, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },                   \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0008, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0300, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0300, 0x0001, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0300, 0x0003, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0300, 0x0004, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0300, 0x0007, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
    }
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS_TABLE_SIZE (7)
#endif // SILABS_AF_ENDPOINT_CONFIG
