/**
 *
 *    Copyright (c) 2020 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *
 *    Copyright (c) 2020 Silicon Labs
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef SILABS_AF_ENDPOINT_CONFIG
#define SILABS_AF_ENDPOINT_CONFIG

// Fixed number of defined endpoints
#define FIXED_ENDPOINT_COUNT (1)

// Generated defaults
#if BIGENDIAN_CPU
#define GENERATED_DEFAULTS                                                                                                         \
    {                                                                                                                              \
        11, 'S', 'i', 'l', 'i', 'c', 'o', 'n', 'L', 'a', 'b', 's', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     \
            0 /* 0,Default value: Basic,manufacturer name */, 16, 'Z', '3', 'C', 'a', 'p', 'S', 'e', 'n', 's', 'e', 'S', 'w', 'i', \
            't', 'c', 'h', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 /* 33,Default value: Basic,model identifier */, 0xFF,    \
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 66,Default value: Over the Air Bootloading,OTA Upgrade Server ID */, 0xFF, \
            0xFF, 0xFF, 0xFF /* 74,Default value: Over the Air Bootloading,Offset (address) into the file */, 0x00, 0x00, 0x00,    \
            0x30 /* 78,Default value: Over the Air Bootloading,OTA Current File Version */, 0xFF, 0xFF, 0xFF,                      \
            0xFF /* 82,Default value: Over the Air Bootloading,OTA Downloaded File Version */, 0x00, 0x00, 0x19,                   \
            0x50 /* 86,Default value: Poll Control,check-in interval */, 0x00, 0x00, 0x02,                                         \
            0x58 /* 90,Default value: Poll Control,long poll interval */, 0x00, 0x00, 0x09,                                        \
            0x60 /* 94,Default value: Poll Control,check in interval min */,                                                       \
    }
#else // ! BIGENDIAN_CPU
#define GENERATED_DEFAULTS                                                                                                         \
    {                                                                                                                              \
        11, 'S', 'i', 'l', 'i', 'c', 'o', 'n', 'L', 'a', 'b', 's', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     \
            0 /* 0,Default value: Basic,manufacturer name */, 16, 'Z', '3', 'C', 'a', 'p', 'S', 'e', 'n', 's', 'e', 'S', 'w', 'i', \
            't', 'c', 'h', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 /* 33,Default value: Basic,model identifier */, 0xFF,    \
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 66,Default value: Over the Air Bootloading,OTA Upgrade Server ID */, 0xFF, \
            0xFF, 0xFF, 0xFF /* 74,Default value: Over the Air Bootloading,Offset (address) into the file */, 0x30, 0x00, 0x00,    \
            0x00 /* 78,Default value: Over the Air Bootloading,OTA Current File Version */, 0xFF, 0xFF, 0xFF,                      \
            0xFF /* 82,Default value: Over the Air Bootloading,OTA Downloaded File Version */, 0x50, 0x19, 0x00,                   \
            0x00 /* 86,Default value: Poll Control,check-in interval */, 0x58, 0x02, 0x00,                                         \
            0x00 /* 90,Default value: Poll Control,long poll interval */, 0x60, 0x09, 0x00,                                        \
            0x00 /* 94,Default value: Poll Control,check in interval min */,                                                       \
    }
#endif // BIGENDIAN_CPU

// Generated attributes
#define GENERATED_ATTRIBUTES                                                                                                       \
    {                                                                                                                              \
        { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x03 } }, /* 0 / Basic / ZCL version*/    \
            {                                                                                                                      \
                0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                              \
            }, /* 1 / Basic / application version*/                                                                                \
            {                                                                                                                      \
                0x0002, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                              \
            }, /* 2 / Basic / stack version*/                                                                                      \
            {                                                                                                                      \
                0x0003, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                              \
            }, /* 3 / Basic / hardware version*/                                                                                   \
            {                                                                                                                      \
                0x0004, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) &(generatedDefaults[0]) }    \
            }, /* 4 / Basic / manufacturer name*/                                                                                  \
            {                                                                                                                      \
                0x0005, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) &(generatedDefaults[33]) }   \
            }, /* 5 / Basic / model identifier*/                                                                                   \
            {                                                                                                                      \
                0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                              \
            }, /* 6 / Basic / power source*/                                                                                       \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }                           \
            }, /* 7 / Basic / cluster revision*/                                                                                   \
            {                                                                                                                      \
                0x0020, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00UL }                            \
            }, /* 8 / Power Configuration / battery voltage*/                                                                      \
            {                                                                                                                      \
                0x0031, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0xFF }    \
            }, /* 9 / Power Configuration / battery size*/                                                                         \
            {                                                                                                                      \
                0x0033, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00UL }  \
            }, /* 10 / Power Configuration / battery quantity*/                                                                    \
            {                                                                                                                      \
                0x0036, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }    \
            }, /* 11 / Power Configuration / battery voltage min threshold*/                                                       \
            {                                                                                                                      \
                0x0037, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }    \
            }, /* 12 / Power Configuration / battery voltage threshold 1*/                                                         \
            {                                                                                                                      \
                0x0038, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }    \
            }, /* 13 / Power Configuration / battery voltage threshold 2*/                                                         \
            {                                                                                                                      \
                0x0039, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }    \
            }, /* 14 / Power Configuration / battery voltage threshold 3*/                                                         \
            {                                                                                                                      \
                0x003E, ZCL_BITMAP32_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_SINGLETON), { NULL }                                       \
            }, /* 15 / Power Configuration / battery alarm state*/                                                                 \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }                           \
            }, /* 16 / Power Configuration / cluster revision*/                                                                    \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 17 / Identify / cluster revision*/                                                                               \
            {                                                                                                                      \
                0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0000 }                            \
            },                                                                        /* 18 / Identify / identify time*/           \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 19 / Identify / cluster revision*/        \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 20 / On/off / cluster revision*/                                                                                 \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 21 / Level Control / cluster revision*/                                                                          \
            {                                                                                                                      \
                0x0000, ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE, 8, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) &(generatedDefaults[66]) }      \
            }, /* 22 / Over the Air Bootloading / OTA Upgrade Server ID*/                                                          \
            {                                                                                                                      \
                0x0001, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) &(generatedDefaults[74]) }            \
            }, /* 23 / Over the Air Bootloading / Offset (address) into the file*/                                                 \
            {                                                                                                                      \
                0x0002, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) &(generatedDefaults[78]) }            \
            }, /* 24 / Over the Air Bootloading / OTA Current File Version*/                                                       \
            {                                                                                                                      \
                0x0004, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) &(generatedDefaults[82]) }            \
            }, /* 25 / Over the Air Bootloading / OTA Downloaded File Version*/                                                    \
            {                                                                                                                      \
                0x0006, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                                 \
            }, /* 26 / Over the Air Bootloading / OTA Upgrade Status*/                                                             \
            {                                                                                                                      \
                0x0007, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x1002 }                              \
            }, /* 27 / Over the Air Bootloading / Manufacturer ID*/                                                                \
            {                                                                                                                      \
                0x0008, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0xA005 }                              \
            }, /* 28 / Over the Air Bootloading / Image Type ID*/                                                                  \
            {                                                                                                                      \
                0x0009, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0000UL }                            \
            }, /* 29 / Over the Air Bootloading / Minimum Block Request Period*/                                                   \
            {                                                                                                                      \
                0x000A, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { NULL }                                            \
            }, /* 30 / Over the Air Bootloading / Image Stamp*/                                                                    \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 31 / Over the Air Bootloading / cluster revision*/                                                               \
            {                                                                                                                      \
                0x0000, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) &(generatedDefaults[86]) }          \
            }, /* 32 / Poll Control / check-in interval*/                                                                          \
            {                                                                                                                      \
                0x0001, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (0x00), { (uint8_t *) &(generatedDefaults[90]) }                             \
            },                                                                        /* 33 / Poll Control / long poll interval*/  \
            { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0004 } }, /* 34 / Poll Control / short poll interval*/ \
            {                                                                                                                      \
                0x0003, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x00F0 }                            \
            }, /* 35 / Poll Control / fast poll timeout*/                                                                          \
            {                                                                                                                      \
                0x0004, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (0x00), { (uint8_t *) &(generatedDefaults[94]) }                             \
            }, /* 36 / Poll Control / check in interval min*/                                                                      \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 37 / Poll Control / cluster revision*/    \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            },                                                                        /* 38 / Color Control / cluster revision*/   \
            { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 } }, /* 39 / Diagnostics / number of resets*/     \
            {                                                                                                                      \
                0x011B, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 }                                               \
            }, /* 40 / Diagnostics / average mac retry per aps message sent*/                                                      \
            { 0x011C, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 41 / Diagnostics / last message lqi*/     \
            { 0x011D, ZCL_INT8S_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 42 / Diagnostics / last message rssi*/    \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 43 / Diagnostics / cluster revision*/     \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 44 / Sample Mfg Specific Cluster / cluster revision*/                                                            \
            {                                                                                                                      \
                0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                \
            }, /* 45 / Configuration Cluster / Prevents OTA writing of tokens.*/                                                   \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 46 / Configuration Cluster / cluster revision*/                                                                  \
    }

// Cluster function static arrays
#define GENERATED_FUNCTION_ARRAYS                                                                                                  \
    const EmberAfGenericClusterFunction emberAfFuncArrayIdentifyClusterServer[] = {                                                \
        (EmberAfGenericClusterFunction) emberAfIdentifyClusterServerInitCallback,                                                  \
        (EmberAfGenericClusterFunction) emberAfIdentifyClusterServerAttributeChangedCallback                                       \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayOtaBootloadClusterClient[] = {                                             \
        (EmberAfGenericClusterFunction) emberAfOtaBootloadClusterClientInitCallback,                                               \
        (EmberAfGenericClusterFunction) emberAfOtaBootloadClusterClientDefaultResponseCallback                                     \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayPollControlClusterServer[] = {                                             \
        (EmberAfGenericClusterFunction) emberAfPollControlClusterServerInitCallback,                                               \
        (EmberAfGenericClusterFunction) emberAfPollControlClusterServerAttributeChangedCallback,                                   \
        (EmberAfGenericClusterFunction) emberAfPollControlClusterServerPreAttributeChangedCallback                                 \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayOtaConfigurationClusterServer[] = { (                                      \
        EmberAfGenericClusterFunction) emberAfOtaConfigurationClusterServerInitCallback };

// Clusters definitions
#define GENERATED_CLUSTERS                                                                                                         \
    {                                                                                                                              \
        {                                                                                                                          \
            0x0000, (EmberAfAttributeMetadata *) &(generatedAttributes[0]), 8, 0, (CLUSTER_MASK_SERVER), NULL,                     \
        },                                                                                                                         \
            {                                                                                                                      \
                0x0001, (EmberAfAttributeMetadata *) &(generatedAttributes[8]), 9, 0, (CLUSTER_MASK_SERVER), NULL,                 \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0003, (EmberAfAttributeMetadata *) &(generatedAttributes[17]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0003,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[18]),                                                           \
                2,                                                                                                                 \
                4,                                                                                                                 \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION),                      \
                emberAfFuncArrayIdentifyClusterServer,                                                                             \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0006, (EmberAfAttributeMetadata *) &(generatedAttributes[20]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0008, (EmberAfAttributeMetadata *) &(generatedAttributes[21]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0019,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[22]),                                                           \
                10,                                                                                                                \
                33,                                                                                                                \
                (CLUSTER_MASK_CLIENT | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION),                       \
                emberAfFuncArrayOtaBootloadClusterClient,                                                                          \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0020,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[32]),                                                           \
                6,                                                                                                                 \
                18,                                                                                                                \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION |                      \
                 CLUSTER_MASK_PRE_ATTRIBUTE_CHANGED_FUNCTION),                                                                     \
                emberAfFuncArrayPollControlClusterServer,                                                                          \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0300, (EmberAfAttributeMetadata *) &(generatedAttributes[38]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0B05, (EmberAfAttributeMetadata *) &(generatedAttributes[39]), 5, 8, (CLUSTER_MASK_SERVER), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0xFC00, (EmberAfAttributeMetadata *) &(generatedAttributes[44]), 1, 2, (CLUSTER_MASK_SERVER), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0xFC01, (EmberAfAttributeMetadata *) &(generatedAttributes[45]), 2,                                                \
                3,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayOtaConfigurationClusterServer,    \
            },                                                                                                                     \
    }

// Endpoint types
#define GENERATED_ENDPOINT_TYPES                                                                                                   \
    {                                                                                                                              \
        { (EmberAfCluster *) &(generatedClusters[0]), 12, 76 },                                                                    \
    }

// Cluster manufacturer codes
#define GENERATED_CLUSTER_MANUFACTURER_CODES                                                                                       \
    {                                                                                                                              \
        { 0x000A, 0x1002 }, { 0x000B, 0x1002 },                                                                                    \
    }
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT (2)

// Attribute manufacturer codes
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES                                                                                     \
    {                                                                                                                              \
        { 0x002D, 0x1002 },                                                                                                        \
    }
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT (1)

// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (33)
// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (86)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE 76

// Array of endpoints that are supported
#define FIXED_ENDPOINT_ARRAY                                                                                                       \
    {                                                                                                                              \
        1                                                                                                                          \
    }

// Array of profile ids
#define FIXED_PROFILE_IDS                                                                                                          \
    {                                                                                                                              \
        260                                                                                                                        \
    }

// Array of device ids
#define FIXED_DEVICE_IDS                                                                                                           \
    {                                                                                                                              \
        261                                                                                                                        \
    }

// Array of device versions
#define FIXED_DEVICE_VERSIONS                                                                                                      \
    {                                                                                                                              \
        1                                                                                                                          \
    }

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES                                                                                                       \
    {                                                                                                                              \
        0                                                                                                                          \
    }

// Array of networks supported on each endpoint
#define FIXED_NETWORKS                                                                                                             \
    {                                                                                                                              \
        0                                                                                                                          \
    }

#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS                                                                       \
    void emberAfPluginEepromInitCallback(void);                                                                                    \
    void emberAfPluginSilabsDeviceUiInitCallback(void);                                                                            \
    void emberAfPluginSb1GestureSensorInitCallback(void);                                                                          \
    void emberAfPluginInstallCodeReadInitCallback(void);                                                                           \
    void emberAfPluginIdleSleepInitCallback(void);                                                                                 \
    void emberAfPluginConnectionManagerInitCallback(void);                                                                         \
    void emberAfPluginBatteryMonitorInitCallback(void);                                                                            \
    void emberAfPluginI2cDriverInitCallback(void);

#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS                                                                              \
    emberAfPluginEepromInitCallback();                                                                                             \
    emberAfPluginSilabsDeviceUiInitCallback();                                                                                     \
    emberAfPluginSb1GestureSensorInitCallback();                                                                                   \
    emberAfPluginInstallCodeReadInitCallback();                                                                                    \
    emberAfPluginIdleSleepInitCallback();                                                                                          \
    emberAfPluginConnectionManagerInitCallback();                                                                                  \
    emberAfPluginBatteryMonitorInitCallback();                                                                                     \
    emberAfPluginI2cDriverInitCallback();

#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS                                                                   \
    void emberAfPluginAddressTableNcpInitCallback(bool memoryAllocation);

#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS emberAfPluginAddressTableNcpInitCallback(memoryAllocation);

#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS                                                               \
    void emberAfPluginEndDeviceSupportStackStatusCallback(EmberStatus status);                                                     \
    void emberAfPluginPollControlServerStackStatusCallback(EmberStatus status);                                                    \
    void emberAfPluginManufacturingLibraryOtaStackStatusCallback(EmberStatus status);                                              \
    void emberAfPluginOtaClientStackStatusCallback(EmberStatus status);                                                            \
    void emberAfPluginNetworkSteeringStackStatusCallback(EmberStatus status);                                                      \
    void emberAfPluginConnectionManagerStackStatusCallback(EmberStatus status);

#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS                                                                      \
    emberAfPluginEndDeviceSupportStackStatusCallback(status);                                                                      \
    emberAfPluginPollControlServerStackStatusCallback(status);                                                                     \
    emberAfPluginManufacturingLibraryOtaStackStatusCallback(status);                                                               \
    emberAfPluginOtaClientStackStatusCallback(status);                                                                             \
    emberAfPluginNetworkSteeringStackStatusCallback(status);                                                                       \
    emberAfPluginConnectionManagerStackStatusCallback(status);

// Generated reporting configuration defaults
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS                                                                               \
    {                                                                                                                              \
    }
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS_TABLE_SIZE (0)
#endif // SILABS_AF_ENDPOINT_CONFIG
