/**
 *
 *    Copyright (c) 2020 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *
 *    Copyright (c) 2020 Silicon Labs
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef SILABS_AF_ENDPOINT_CONFIG
#define SILABS_AF_ENDPOINT_CONFIG

// Fixed number of defined endpoints
#define FIXED_ENDPOINT_COUNT (1)

// Generated defaults
#if BIGENDIAN_CPU
#define GENERATED_DEFAULTS                                                                                                         \
    {                                                                                                                              \
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 0,Default value: Over the Air Bootloading,OTA Upgrade Server ID */,      \
            0xFF, 0xFF, 0xFF, 0xFF /* 8,Default value: Over the Air Bootloading,Offset (address) into the file */, 0x00, 0x00,     \
            0x38, 0x40 /* 12,Default value: Poll Control,check-in interval */, 0x00, 0x6E, 0x00,                                   \
            0x00 /* 16,Maximum value: Poll Control,check-in interval */, 0x00, 0x00, 0x00,                                         \
            0x14 /* 20,Default value: Poll Control,long poll interval */, 0x00, 0x00, 0x00,                                        \
            0x04 /* 24,Minimum value: Poll Control,long poll interval */, 0x00, 0x6E, 0x00,                                        \
            0x00 /* 28,Maximum value: Poll Control,long poll interval */, 4, '0', 'x', '0',                                        \
            '0' /* 32,Default value: Door Lock,language */, 0xFF, 0xFF, 0xFF,                                                      \
            0xFF /* 35,Maximum value: Electrical Measurement,measurement type */,                                                  \
    }
#else // ! BIGENDIAN_CPU
#define GENERATED_DEFAULTS                                                                                                         \
    {                                                                                                                              \
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 0,Default value: Over the Air Bootloading,OTA Upgrade Server ID */,      \
            0xFF, 0xFF, 0xFF, 0xFF /* 8,Default value: Over the Air Bootloading,Offset (address) into the file */, 0x40, 0x38,     \
            0x00, 0x00 /* 12,Default value: Poll Control,check-in interval */, 0x00, 0x00, 0x6E,                                   \
            0x00 /* 16,Maximum value: Poll Control,check-in interval */, 0x14, 0x00, 0x00,                                         \
            0x00 /* 20,Default value: Poll Control,long poll interval */, 0x04, 0x00, 0x00,                                        \
            0x00 /* 24,Minimum value: Poll Control,long poll interval */, 0x00, 0x00, 0x6E,                                        \
            0x00 /* 28,Maximum value: Poll Control,long poll interval */, 4, '0', 'x', '0',                                        \
            '0' /* 32,Default value: Door Lock,language */, 0xFF, 0xFF, 0xFF,                                                      \
            0xFF /* 35,Maximum value: Electrical Measurement,measurement type */,                                                  \
    }
#endif // BIGENDIAN_CPU

// MinMax defaults
#define GENERATED_MIN_MAX_DEFAULTS                                                                                                 \
    {                                                                                                                              \
        { (uint8_t *) 0x03, (uint8_t *) 0x00, (uint8_t *) 0xFF }, { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0xFF },        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0x80 }, { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0xFF },    \
            { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0xFF },                                                              \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFF7 },                                                        \
            { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0x01 }, { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0x80 },    \
            {                                                                                                                      \
                (uint8_t *) &(generatedDefaults[12]),                                                                              \
                NULL,                                                                                                              \
                (uint8_t *) &(generatedDefaults[16]),                                                                              \
            },                                                                                                                     \
            {                                                                                                                      \
                (uint8_t *) &(generatedDefaults[20]),                                                                              \
                (uint8_t *) &(generatedDefaults[24]),                                                                              \
                (uint8_t *) &(generatedDefaults[28]),                                                                              \
            },                                                                                                                     \
            { (uint8_t *) 0x0002, (uint8_t *) 0x0001, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x0028, (uint8_t *) 0x0001, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0x02 }, { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0x02 },    \
            { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0x01 }, { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0x01 },    \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            {                                                                                                                      \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
                (uint8_t *) &(generatedDefaults[35]),                                                                              \
            },                                                                                                                     \
            { (uint8_t *) 0x8000, (uint8_t *) -32768, (uint8_t *) 32767 },                                                         \
            { (uint8_t *) 0x8000, (uint8_t *) -32768, (uint8_t *) 32767 },                                                         \
            { (uint8_t *) 0x8000, (uint8_t *) -32768, (uint8_t *) 32767 },                                                         \
            { (uint8_t *) 0x8000, (uint8_t *) -32768, (uint8_t *) 32767 },                                                         \
            { (uint8_t *) 0x8000, (uint8_t *) -32768, (uint8_t *) 32767 },                                                         \
            { (uint8_t *) 0x8000, (uint8_t *) -32768, (uint8_t *) 32767 },                                                         \
            { (uint8_t *) 0x8000, (uint8_t *) -32768, (uint8_t *) 32767 },                                                         \
            {                                                                                                                      \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
            },                                                                                                                     \
            {                                                                                                                      \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
            },                                                                                                                     \
            {                                                                                                                      \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
            },                                                                                                                     \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
    }

// Generated attributes
#define GENERATED_ATTRIBUTES                                                                                                       \
    {                                                                                                                              \
        { 0x0000,                                                                                                                  \
          ZCL_INT8U_ATTRIBUTE_TYPE,                                                                                                \
          1,                                                                                                                       \
          (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_SINGLETON),                                                                     \
          { (uint8_t *) &(minMaxDefaults[0]) } }, /* 0 / Basic / ZCL version*/                                                     \
            { 0x0007,                                                                                                              \
              ZCL_ENUM8_ATTRIBUTE_TYPE,                                                                                            \
              1,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_SINGLETON),                                                                 \
              { (uint8_t *) &(minMaxDefaults[1]) } }, /* 1 / Basic / power source*/                                                \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }                           \
            }, /* 2 / Basic / cluster revision*/                                                                                   \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }                           \
            }, /* 3 / Power Configuration / cluster revision*/                                                                     \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 4 / Identify / cluster revision*/                                                                                \
            { 0x0000,                                                                                                              \
              ZCL_INT16U_ATTRIBUTE_TYPE,                                                                                           \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_MIN_MAX),                                                                  \
              { (uint8_t *) &(minMaxDefaults[2]) } },                                 /* 5 / Identify / identify time*/            \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 6 / Identify / cluster revision*/         \
            {                                                                                                                      \
                0x0000, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[3]) }              \
            },                                                                        /* 7 / Groups / name support*/               \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 8 / Groups / cluster revision*/           \
            {                                                                                                                      \
                0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[4]) }                \
            }, /* 9 / Scenes / scene count*/                                                                                       \
            {                                                                                                                      \
                0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[5]) }                \
            }, /* 10 / Scenes / current scene*/                                                                                    \
            {                                                                                                                      \
                0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[6]) }               \
            }, /* 11 / Scenes / current group*/                                                                                    \
            {                                                                                                                      \
                0x0003, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[7]) }              \
            }, /* 12 / Scenes / scene valid*/                                                                                      \
            {                                                                                                                      \
                0x0004, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[8]) }              \
            },                                                                        /* 13 / Scenes / name support*/              \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 14 / Scenes / cluster revision*/          \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 15 / Alarms / cluster revision*/          \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT | ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }   \
            }, /* 16 / Time / cluster revision*/                                                                                   \
            {                                                                                                                      \
                0x0000, ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE, 8, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) &(generatedDefaults[0]) }       \
            }, /* 17 / Over the Air Bootloading / OTA Upgrade Server ID*/                                                          \
            {                                                                                                                      \
                0x0001, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) &(generatedDefaults[8]) }             \
            }, /* 18 / Over the Air Bootloading / Offset (address) into the file*/                                                 \
            {                                                                                                                      \
                0x0006, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                                 \
            }, /* 19 / Over the Air Bootloading / OTA Upgrade Status*/                                                             \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 20 / Over the Air Bootloading / cluster revision*/                                                               \
            { 0x0000,                                                                                                              \
              ZCL_INT32U_ATTRIBUTE_TYPE,                                                                                           \
              4,                                                                                                                   \
              (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_MIN_MAX),                                                                  \
              { (uint8_t *) &(minMaxDefaults[9]) } }, /* 21 / Poll Control / check-in interval*/                                   \
            {                                                                                                                      \
                0x0001, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[10]) }              \
            }, /* 22 / Poll Control / long poll interval*/                                                                         \
            {                                                                                                                      \
                0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[11]) }              \
            }, /* 23 / Poll Control / short poll interval*/                                                                        \
            { 0x0003,                                                                                                              \
              ZCL_INT16U_ATTRIBUTE_TYPE,                                                                                           \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_MIN_MAX),                                                                  \
              { (uint8_t *) &(minMaxDefaults[12]) } },                  /* 24 / Poll Control / fast poll timeout*/                 \
            { 0x0004, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (0x00), { NULL } }, /* 25 / Poll Control / check in interval min*/             \
            { 0x0005, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (0x00), { NULL } }, /* 26 / Poll Control / long poll interval min*/            \
            {                                                                                                                      \
                0x0006, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 }                                               \
            }, /* 27 / Poll Control / fast poll timeout max*/                                                                      \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 28 / Poll Control / cluster revision*/    \
            { 0x0000, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 29 / Door Lock / lock state*/             \
            { 0x0001, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 30 / Door Lock / lock type*/              \
            { 0x0002, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },  /* 31 / Door Lock / actuator enabled*/       \
            { 0x0003, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 32 / Door Lock / door state*/             \
            { 0x0004, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_WRITABLE), { NULL } }, /* 33 / Door Lock / door open events*/  \
            {                                                                                                                      \
                0x0005, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_WRITABLE), { NULL }                                          \
            }, /* 34 / Door Lock / door closed events*/                                                                            \
            {                                                                                                                      \
                0x0006, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0000UL }                          \
            }, /* 35 / Door Lock / open period*/                                                                                   \
            {                                                                                                                      \
                0x0010, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 }                                               \
            }, /* 36 / Door Lock / num lock records supported*/                                                                    \
            {                                                                                                                      \
                0x0011, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 }                                               \
            }, /* 37 / Door Lock / num total users supported*/                                                                     \
            {                                                                                                                      \
                0x0012, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 }                                               \
            }, /* 38 / Door Lock / num PIN users supported*/                                                                       \
            {                                                                                                                      \
                0x0013, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 }                                               \
            }, /* 39 / Door Lock / num RFID users supported*/                                                                      \
            {                                                                                                                      \
                0x0014, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                  \
            }, /* 40 / Door Lock / num weekday schedules supported per user*/                                                      \
            {                                                                                                                      \
                0x0015, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                  \
            }, /* 41 / Door Lock / num yearday schedules supported per user*/                                                      \
            {                                                                                                                      \
                0x0016, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                  \
            }, /* 42 / Door Lock / num holiday schedules supported per user*/                                                      \
            { 0x0017, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x08 } }, /* 43 / Door Lock / max pin length*/            \
            { 0x0018, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x04 } }, /* 44 / Door Lock / min pin length*/            \
            { 0x0019, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x14 } }, /* 45 / Door Lock / max rfid code length*/      \
            { 0x001A, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x08 } }, /* 46 / Door Lock / min rfid code length*/      \
            {                                                                                                                      \
                0x0020, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x01 }                             \
            }, /* 47 / Door Lock / enable logging*/                                                                                \
            {                                                                                                                      \
                0x0021, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) &(generatedDefaults[32]) }     \
            }, /* 48 / Door Lock / language*/                                                                                      \
            { 0x0022,                                                                                                              \
              ZCL_INT8U_ATTRIBUTE_TYPE,                                                                                            \
              1,                                                                                                                   \
              (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_MIN_MAX),                                                                  \
              { (uint8_t *) &(minMaxDefaults[13]) } },                                     /* 49 / Door Lock / led settings*/      \
            { 0x0023, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_WRITABLE), { NULL } }, /* 50 / Door Lock / auto relock time*/  \
            { 0x0024,                                                                                                              \
              ZCL_INT8U_ATTRIBUTE_TYPE,                                                                                            \
              1,                                                                                                                   \
              (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_MIN_MAX),                                                                  \
              { (uint8_t *) &(minMaxDefaults[14]) } }, /* 51 / Door Lock / sound volume*/                                          \
            {                                                                                                                      \
                0x0025, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x00 }                               \
            }, /* 52 / Door Lock / operating mode*/                                                                                \
            {                                                                                                                      \
                0x0026, ZCL_BITMAP16_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                             \
            }, /* 53 / Door Lock / supported operating modes*/                                                                     \
            {                                                                                                                      \
                0x0027, ZCL_BITMAP16_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 }                                             \
            }, /* 54 / Door Lock / default configuration register*/                                                                \
            {                                                                                                                      \
                0x0028, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x01 }                             \
            }, /* 55 / Door Lock / enable local programming*/                                                                      \
            {                                                                                                                      \
                0x0029, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x00 }                             \
            }, /* 56 / Door Lock / enable one touch locking*/                                                                      \
            {                                                                                                                      \
                0x002A, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x00 }                             \
            }, /* 57 / Door Lock / enable inside status led*/                                                                      \
            {                                                                                                                      \
                0x002B, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x00 }                             \
            }, /* 58 / Door Lock / enable privacy mode button*/                                                                    \
            {                                                                                                                      \
                0x0030, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x00 }                               \
            }, /* 59 / Door Lock / wrong code entry limit*/                                                                        \
            {                                                                                                                      \
                0x0031, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x00 }                               \
            }, /* 60 / Door Lock / user code temporary disable time*/                                                              \
            { 0x0032,                                                                                                              \
              ZCL_BOOLEAN_ATTRIBUTE_TYPE,                                                                                          \
              1,                                                                                                                   \
              (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_MIN_MAX),                                                                  \
              { (uint8_t *) &(minMaxDefaults[15]) } }, /* 61 / Door Lock / send pin over the air*/                                 \
            { 0x0033,                                                                                                              \
              ZCL_BOOLEAN_ATTRIBUTE_TYPE,                                                                                          \
              1,                                                                                                                   \
              (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_MIN_MAX),                                                                  \
              { (uint8_t *) &(minMaxDefaults[16]) } }, /* 62 / Door Lock / require pin for rf operation*/                          \
            { 0x0034, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } }, /* 63 / Door Lock / zigbee security level*/     \
            {                                                                                                                      \
                0x0040, ZCL_BITMAP16_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0000 }                          \
            }, /* 64 / Door Lock / alarm mask*/                                                                                    \
            { 0x0041,                                                                                                              \
              ZCL_BITMAP16_ATTRIBUTE_TYPE,                                                                                         \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_MIN_MAX),                                                                  \
              { (uint8_t *) &(minMaxDefaults[17]) } }, /* 65 / Door Lock / keypad operation event mask*/                           \
            { 0x0042,                                                                                                              \
              ZCL_BITMAP16_ATTRIBUTE_TYPE,                                                                                         \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_MIN_MAX),                                                                  \
              { (uint8_t *) &(minMaxDefaults[18]) } }, /* 66 / Door Lock / RF operation event mask*/                               \
            { 0x0043,                                                                                                              \
              ZCL_BITMAP16_ATTRIBUTE_TYPE,                                                                                         \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_MIN_MAX),                                                                  \
              { (uint8_t *) &(minMaxDefaults[19]) } }, /* 67 / Door Lock / manual operation event mask*/                           \
            {                                                                                                                      \
                0x0044, ZCL_BITMAP16_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0000 }                          \
            }, /* 68 / Door Lock / rfid operation event mask*/                                                                     \
            { 0x0045,                                                                                                              \
              ZCL_BITMAP16_ATTRIBUTE_TYPE,                                                                                         \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_MIN_MAX),                                                                  \
              { (uint8_t *) &(minMaxDefaults[20]) } }, /* 69 / Door Lock / keypad programming event mask*/                         \
            { 0x0046,                                                                                                              \
              ZCL_BITMAP16_ATTRIBUTE_TYPE,                                                                                         \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_MIN_MAX),                                                                  \
              { (uint8_t *) &(minMaxDefaults[21]) } }, /* 70 / Door Lock / rf programming event mask*/                             \
            {                                                                                                                      \
                0x0047, ZCL_BITMAP16_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0000 }                          \
            }, /* 71 / Door Lock / rfid programming event mask*/                                                                   \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 72 / Door Lock / cluster revision*/       \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 73 / Electrical Measurement / cluster revision*/                                                                 \
            {                                                                                                                      \
                0x0000, ZCL_BITMAP32_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[22]) }            \
            }, /* 74 / Electrical Measurement / measurement type*/                                                                 \
            {                                                                                                                      \
                0x0100, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[23]) }              \
            }, /* 75 / Electrical Measurement / dc voltage*/                                                                       \
            {                                                                                                                      \
                0x0101, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[24]) }              \
            }, /* 76 / Electrical Measurement / dc voltage min*/                                                                   \
            {                                                                                                                      \
                0x0102, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[25]) }              \
            }, /* 77 / Electrical Measurement / dc voltage max*/                                                                   \
            {                                                                                                                      \
                0x0103, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[26]) }              \
            }, /* 78 / Electrical Measurement / dc current*/                                                                       \
            {                                                                                                                      \
                0x0104, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[27]) }              \
            }, /* 79 / Electrical Measurement / dc current min*/                                                                   \
            {                                                                                                                      \
                0x0105, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[28]) }              \
            }, /* 80 / Electrical Measurement / dc current max*/                                                                   \
            {                                                                                                                      \
                0x0106, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[29]) }              \
            }, /* 81 / Electrical Measurement / dc power*/                                                                         \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 82 / Electrical Measurement / cluster revision*/                                                                 \
            { 0x0101,                                                                                                              \
              ZCL_INT32U_ATTRIBUTE_TYPE,                                                                                           \
              4,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_EXTERNAL_STORAGE),                                                          \
              { (uint8_t *) &(minMaxDefaults[30]) } }, /* 83 / Diagnostics / mac tx broadcast*/                                    \
            { 0x0102,                                                                                                              \
              ZCL_INT32U_ATTRIBUTE_TYPE,                                                                                           \
              4,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_EXTERNAL_STORAGE),                                                          \
              { (uint8_t *) &(minMaxDefaults[31]) } }, /* 84 / Diagnostics / mac rx unicast*/                                      \
            { 0x0103,                                                                                                              \
              ZCL_INT32U_ATTRIBUTE_TYPE,                                                                                           \
              4,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_EXTERNAL_STORAGE),                                                          \
              { (uint8_t *) &(minMaxDefaults[32]) } }, /* 85 / Diagnostics / mac tx unicast*/                                      \
            { 0x0104,                                                                                                              \
              ZCL_INT16U_ATTRIBUTE_TYPE,                                                                                           \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_EXTERNAL_STORAGE),                                                          \
              { (uint8_t *) &(minMaxDefaults[33]) } }, /* 86 / Diagnostics / mac tx unicast retry*/                                \
            { 0x0105,                                                                                                              \
              ZCL_INT16U_ATTRIBUTE_TYPE,                                                                                           \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_EXTERNAL_STORAGE),                                                          \
              { (uint8_t *) &(minMaxDefaults[34]) } }, /* 87 / Diagnostics / mac tx unicast fail*/                                 \
            { 0x0106,                                                                                                              \
              ZCL_INT16U_ATTRIBUTE_TYPE,                                                                                           \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_EXTERNAL_STORAGE),                                                          \
              { (uint8_t *) &(minMaxDefaults[35]) } }, /* 88 / Diagnostics / aps rx broadcast*/                                    \
            { 0x0107,                                                                                                              \
              ZCL_INT16U_ATTRIBUTE_TYPE,                                                                                           \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_EXTERNAL_STORAGE),                                                          \
              { (uint8_t *) &(minMaxDefaults[36]) } }, /* 89 / Diagnostics / aps tx broadcast*/                                    \
            { 0x0108,                                                                                                              \
              ZCL_INT16U_ATTRIBUTE_TYPE,                                                                                           \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_EXTERNAL_STORAGE),                                                          \
              { (uint8_t *) &(minMaxDefaults[37]) } }, /* 90 / Diagnostics / aps rx unicast*/                                      \
            { 0x0109,                                                                                                              \
              ZCL_INT16U_ATTRIBUTE_TYPE,                                                                                           \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_EXTERNAL_STORAGE),                                                          \
              { (uint8_t *) &(minMaxDefaults[38]) } }, /* 91 / Diagnostics / aps unicast success*/                                 \
            { 0x010A,                                                                                                              \
              ZCL_INT16U_ATTRIBUTE_TYPE,                                                                                           \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_EXTERNAL_STORAGE),                                                          \
              { (uint8_t *) &(minMaxDefaults[39]) } }, /* 92 / Diagnostics / aps tx unicast retries*/                              \
            { 0x010B,                                                                                                              \
              ZCL_INT16U_ATTRIBUTE_TYPE,                                                                                           \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_EXTERNAL_STORAGE),                                                          \
              { (uint8_t *) &(minMaxDefaults[40]) } }, /* 93 / Diagnostics / aps tx unicast failures*/                             \
            { 0x010C,                                                                                                              \
              ZCL_INT16U_ATTRIBUTE_TYPE,                                                                                           \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_EXTERNAL_STORAGE),                                                          \
              { (uint8_t *) &(minMaxDefaults[41]) } }, /* 94 / Diagnostics / route discovery initiated*/                           \
            { 0x010D,                                                                                                              \
              ZCL_INT16U_ATTRIBUTE_TYPE,                                                                                           \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_EXTERNAL_STORAGE),                                                          \
              { (uint8_t *) &(minMaxDefaults[42]) } }, /* 95 / Diagnostics / neighbor added*/                                      \
            { 0x010E,                                                                                                              \
              ZCL_INT16U_ATTRIBUTE_TYPE,                                                                                           \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_EXTERNAL_STORAGE),                                                          \
              { (uint8_t *) &(minMaxDefaults[43]) } },                                /* 96 / Diagnostics / neighbor moved*/       \
            { 0x011C, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 97 / Diagnostics / last message lqi*/     \
            { 0x011D, ZCL_INT8S_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 98 / Diagnostics / last message rssi*/    \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 99 / Diagnostics / cluster revision*/     \
            {                                                                                                                      \
                0x0002, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                            \
            }, /* 100 / SL Works With All Hubs / disable ota downgrades*/                                                          \
            {                                                                                                                      \
                0x0003, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x01 }                            \
            }, /* 101 / SL Works With All Hubs / mgmt leave without rejoin enabled*/                                               \
            {                                                                                                                      \
                0x0004, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0xFF }                              \
            }, /* 102 / SL Works With All Hubs / network retry count*/                                                             \
            {                                                                                                                      \
                0x0005, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0xFF }                              \
            }, /* 103 / SL Works With All Hubs / mac retry count*/                                                                 \
            {                                                                                                                      \
                0x0006, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                            \
            }, /* 104 / SL Works With All Hubs / router checkin enabled*/                                                          \
            {                                                                                                                      \
                0x0007, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                            \
            }, /* 105 / SL Works With All Hubs / touchlink interpan enabled*/                                                      \
            {                                                                                                                      \
                0x0008, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                            \
            }, /* 106 / SL Works With All Hubs / wwah parent classification enabled*/                                              \
            {                                                                                                                      \
                0x0009, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x01 }                            \
            }, /* 107 / SL Works With All Hubs / wwah app event retry enabled*/                                                    \
            {                                                                                                                      \
                0x000A, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0A }                              \
            }, /* 108 / SL Works With All Hubs / wwah app event retry queue size*/                                                 \
            {                                                                                                                      \
                0x000B, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                            \
            }, /* 109 / SL Works With All Hubs / wwah rejoin enabled*/                                                             \
            {                                                                                                                      \
                0x000C, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x03 }                              \
            }, /* 110 / SL Works With All Hubs / mac poll failure wait time*/                                                      \
            {                                                                                                                      \
                0x000D, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x01 }                            \
            }, /* 111 / SL Works With All Hubs / configuration mode enabled*/                                                      \
            {                                                                                                                      \
                0x000E, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                              \
            }, /* 112 / SL Works With All Hubs / current debug report id*/                                                         \
            {                                                                                                                      \
                0x000F, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                            \
            }, /* 113 / SL Works With All Hubs / tc security on ntwk key rotation enabled*/                                        \
            {                                                                                                                      \
                0x0010, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                            \
            }, /* 114 / SL Works With All Hubs / wwah bad parent recovery enabled*/                                                \
            {                                                                                                                      \
                0x0011, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0xFF }                              \
            }, /* 115 / SL Works With All Hubs / pending network update channel*/                                                  \
            {                                                                                                                      \
                0x0012, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0xFFFF }                           \
            }, /* 116 / SL Works With All Hubs / pending network update pan id*/                                                   \
            {                                                                                                                      \
                0x0013, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0000 }                           \
            }, /* 117 / SL Works With All Hubs / ota max offline duration*/                                                        \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }                           \
            }, /* 118 / SL Works With All Hubs / cluster revision*/                                                                \
    }

// Cluster function static arrays
#define GENERATED_FUNCTION_ARRAYS                                                                                                  \
    const EmberAfGenericClusterFunction emberAfFuncArrayIdentifyClusterServer[] = {                                                \
        (EmberAfGenericClusterFunction) emberAfIdentifyClusterServerInitCallback,                                                  \
        (EmberAfGenericClusterFunction) emberAfIdentifyClusterServerAttributeChangedCallback                                       \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayGroupsClusterServer[]      = { (                                           \
        EmberAfGenericClusterFunction) emberAfGroupsClusterServerInitCallback };                                              \
    const EmberAfGenericClusterFunction emberAfFuncArrayScenesClusterServer[]      = { (                                           \
        EmberAfGenericClusterFunction) emberAfScenesClusterServerInitCallback };                                              \
    const EmberAfGenericClusterFunction emberAfFuncArrayOtaBootloadClusterClient[] = {                                             \
        (EmberAfGenericClusterFunction) emberAfOtaBootloadClusterClientInitCallback,                                               \
        (EmberAfGenericClusterFunction) emberAfOtaBootloadClusterClientDefaultResponseCallback                                     \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayPollControlClusterServer[] = {                                             \
        (EmberAfGenericClusterFunction) emberAfPollControlClusterServerInitCallback,                                               \
        (EmberAfGenericClusterFunction) emberAfPollControlClusterServerAttributeChangedCallback,                                   \
        (EmberAfGenericClusterFunction) emberAfPollControlClusterServerPreAttributeChangedCallback                                 \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayDoorLockClusterServer[] = { (                                              \
        EmberAfGenericClusterFunction) emberAfDoorLockClusterServerAttributeChangedCallback };                                     \
    const EmberAfGenericClusterFunction emberAfFuncArraySlWwahClusterServer[]   = {                                                \
        (EmberAfGenericClusterFunction) emberAfSlWwahClusterServerInitCallback,                                                  \
        (EmberAfGenericClusterFunction) emberAfSlWwahClusterServerDefaultResponseCallback,                                       \
        (EmberAfGenericClusterFunction) emberAfSlWwahClusterServerManufacturerSpecificAttributeChangedCallback                   \
    };

// Clusters definitions
#define GENERATED_CLUSTERS                                                                                                         \
    {                                                                                                                              \
        {                                                                                                                          \
            0x0000, (EmberAfAttributeMetadata *) &(generatedAttributes[0]), 3, 0, (CLUSTER_MASK_SERVER), NULL,                     \
        },                                                                                                                         \
            {                                                                                                                      \
                0x0001, (EmberAfAttributeMetadata *) &(generatedAttributes[3]), 1, 0, (CLUSTER_MASK_SERVER), NULL,                 \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0003, (EmberAfAttributeMetadata *) &(generatedAttributes[4]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                 \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0003,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[5]),                                                            \
                2,                                                                                                                 \
                4,                                                                                                                 \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION),                      \
                emberAfFuncArrayIdentifyClusterServer,                                                                             \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0004, (EmberAfAttributeMetadata *) &(generatedAttributes[7]), 2,                                                 \
                3,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),     emberAfFuncArrayGroupsClusterServer,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0005, (EmberAfAttributeMetadata *) &(generatedAttributes[9]), 6,                                                 \
                8,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),     emberAfFuncArrayScenesClusterServer,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0009, (EmberAfAttributeMetadata *) &(generatedAttributes[15]), 1, 2, (CLUSTER_MASK_SERVER), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x000A, (EmberAfAttributeMetadata *) &(generatedAttributes[16]), 1, 0, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0019,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[17]),                                                           \
                4,                                                                                                                 \
                15,                                                                                                                \
                (CLUSTER_MASK_CLIENT | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION),                       \
                emberAfFuncArrayOtaBootloadClusterClient,                                                                          \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0020,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[21]),                                                           \
                8,                                                                                                                 \
                24,                                                                                                                \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION |                      \
                 CLUSTER_MASK_PRE_ATTRIBUTE_CHANGED_FUNCTION),                                                                     \
                emberAfFuncArrayPollControlClusterServer,                                                                          \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0101, (EmberAfAttributeMetadata *) &(generatedAttributes[29]),         44,                                       \
                71,     (CLUSTER_MASK_SERVER | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayDoorLockClusterServer,    \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0B04, (EmberAfAttributeMetadata *) &(generatedAttributes[73]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0B04, (EmberAfAttributeMetadata *) &(generatedAttributes[74]), 9, 20, (CLUSTER_MASK_SERVER), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0B05, (EmberAfAttributeMetadata *) &(generatedAttributes[83]), 17, 4, (CLUSTER_MASK_SERVER), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0xFC57,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[100]),                                                          \
                19,                                                                                                                \
                0,                                                                                                                 \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION |                       \
                 CLUSTER_MASK_MANUFACTURER_SPECIFIC_ATTRIBUTE_CHANGED_FUNCTION),                                                   \
                emberAfFuncArraySlWwahClusterServer,                                                                               \
            },                                                                                                                     \
    }

// Endpoint types
#define GENERATED_ENDPOINT_TYPES                                                                                                   \
    {                                                                                                                              \
        { (EmberAfCluster *) &(generatedClusters[0]), 15, 155 },                                                                   \
    }

// Cluster manufacturer codes
#define GENERATED_CLUSTER_MANUFACTURER_CODES                                                                                       \
    {                                                                                                                              \
        { 0x000E, 0x1217 },                                                                                                        \
    }
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT (1)

// Attribute manufacturer codes
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES                                                                                     \
    {                                                                                                                              \
        { 0x0064, 0x1217 }, { 0x0065, 0x1217 }, { 0x0066, 0x1217 }, { 0x0067, 0x1217 }, { 0x0068, 0x1217 }, { 0x0069, 0x1217 },    \
            { 0x006A, 0x1217 }, { 0x006B, 0x1217 }, { 0x006C, 0x1217 }, { 0x006D, 0x1217 }, { 0x006E, 0x1217 },                    \
            { 0x006F, 0x1217 }, { 0x0070, 0x1217 }, { 0x0071, 0x1217 }, { 0x0072, 0x1217 }, { 0x0073, 0x1217 },                    \
            { 0x0074, 0x1217 }, { 0x0075, 0x1217 },                                                                                \
    }
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT (18)

// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (8)
// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (30)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE 155

// Array of endpoints that are supported
#define FIXED_ENDPOINT_ARRAY                                                                                                       \
    {                                                                                                                              \
        1                                                                                                                          \
    }

// Array of profile ids
#define FIXED_PROFILE_IDS                                                                                                          \
    {                                                                                                                              \
        260                                                                                                                        \
    }

// Array of device ids
#define FIXED_DEVICE_IDS                                                                                                           \
    {                                                                                                                              \
        10                                                                                                                         \
    }

// Array of device versions
#define FIXED_DEVICE_VERSIONS                                                                                                      \
    {                                                                                                                              \
        1                                                                                                                          \
    }

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES                                                                                                       \
    {                                                                                                                              \
        0                                                                                                                          \
    }

// Array of networks supported on each endpoint
#define FIXED_NETWORKS                                                                                                             \
    {                                                                                                                              \
        0                                                                                                                          \
    }

#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS                                                                       \
    void emberAfPluginEepromInitCallback(void);                                                                                    \
    void emberAfPluginFragmentationInitCallback(void);                                                                             \
    void emberAfPluginSimpleClockInitCallback(void);                                                                               \
    void emberAfPluginZigbeeEventLoggerInitCallback(void);                                                                         \
    void emberAfPluginDoorLockServerInitCallback(void);                                                                            \
    void emberAfPluginCountersInitCallback(void);

#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS                                                                              \
    emberAfPluginEepromInitCallback();                                                                                             \
    emberAfPluginFragmentationInitCallback();                                                                                      \
    emberAfPluginSimpleClockInitCallback();                                                                                        \
    emberAfPluginZigbeeEventLoggerInitCallback();                                                                                  \
    emberAfPluginDoorLockServerInitCallback();                                                                                     \
    emberAfPluginCountersInitCallback();

#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS                                                                   \
    void emberAfPluginFragmentationNcpInitCallback(bool memoryAllocation);                                                         \
    void emberAfPluginAddressTableNcpInitCallback(bool memoryAllocation);                                                          \
    void emberAfPluginNcpConfigurationNcpInitCallback(bool memoryAllocation);

#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS                                                                          \
    emberAfPluginFragmentationNcpInitCallback(memoryAllocation);                                                                   \
    emberAfPluginAddressTableNcpInitCallback(memoryAllocation);                                                                    \
    emberAfPluginNcpConfigurationNcpInitCallback(memoryAllocation);

#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS                                                               \
    void emberAfPluginEndDeviceSupportStackStatusCallback(EmberStatus status);                                                     \
    void emberAfPluginPollControlServerStackStatusCallback(EmberStatus status);                                                    \
    void emberAfPluginZigbeeEventLoggerStackStatusCallback(EmberStatus status);                                                    \
    void emberAfPluginWwahServerSilabsStackStatusCallback(EmberStatus status);                                                     \
    void emberAfPluginOtaClientStackStatusCallback(EmberStatus status);                                                            \
    void emberAfPluginWwahConnectivityManagerStackStatusCallback(EmberStatus status);                                              \
    void emberAfPluginNetworkSteeringStackStatusCallback(EmberStatus status);                                                      \
    void emberAfPluginWwahEndDeviceExtensionStackStatusCallback(EmberStatus status);

#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS                                                                      \
    emberAfPluginEndDeviceSupportStackStatusCallback(status);                                                                      \
    emberAfPluginPollControlServerStackStatusCallback(status);                                                                     \
    emberAfPluginZigbeeEventLoggerStackStatusCallback(status);                                                                     \
    emberAfPluginWwahServerSilabsStackStatusCallback(status);                                                                      \
    emberAfPluginOtaClientStackStatusCallback(status);                                                                             \
    emberAfPluginWwahConnectivityManagerStackStatusCallback(status);                                                               \
    emberAfPluginNetworkSteeringStackStatusCallback(status);                                                                       \
    emberAfPluginWwahEndDeviceExtensionStackStatusCallback(status);

// Generated data for the command discovery
#define GENERATED_COMMANDS                                                                                                         \
    {                                                                                                                              \
        { 0x0000, 0x00, COMMAND_MASK_INCOMING_SERVER },                                    /* Basic / ResetToFactoryDefaults */    \
            { 0x0003, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / Identify */               \
            { 0x0003, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Identify / IdentifyQueryResponse */  \
            { 0x0003, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / IdentifyQuery */          \
            { 0x0004, 0x00, COMMAND_MASK_OUTGOING_SERVER },                                /* Groups / AddGroupResponse */         \
            { 0x0004, 0x00, COMMAND_MASK_INCOMING_SERVER },                                /* Groups / AddGroup */                 \
            { 0x0004, 0x01, COMMAND_MASK_OUTGOING_SERVER },                                /* Groups / ViewGroupResponse */        \
            { 0x0004, 0x01, COMMAND_MASK_INCOMING_SERVER },                                /* Groups / ViewGroup */                \
            { 0x0004, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / GetGroupMembershipResponse */                              \
            { 0x0004, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Groups / GetGroupMembership */                                      \
            { 0x0004, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / RemoveGroupResponse */                                     \
            { 0x0004, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveGroup */                                             \
            { 0x0004, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveAllGroups */                                         \
            { 0x0004, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroupIfIdentifying */                                   \
            { 0x0005, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / AddSceneResponse */                                        \
            { 0x0005, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / AddScene */                                                \
            { 0x0005, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / ViewSceneResponse */                                       \
            { 0x0005, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / ViewScene */                                               \
            { 0x0005, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveSceneResponse */                                     \
            { 0x0005, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveScene */                                             \
            { 0x0005, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveAllScenesResponse */                                 \
            { 0x0005, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveAllScenes */                                         \
            { 0x0005, 0x04, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / StoreSceneResponse */                                      \
            { 0x0005, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / StoreScene */                                              \
            { 0x0005, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RecallScene */                                             \
            { 0x0005, 0x06, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / GetSceneMembershipResponse */                              \
            { 0x0005, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / GetSceneMembership */                                      \
            { 0x0009, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Alarms / Alarm */                                                   \
            { 0x0019, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / QueryNextImageRequest */                 \
            { 0x0019, 0x03, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / ImageBlockRequest */                     \
            { 0x0019, 0x06, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / UpgradeEndRequest */                     \
            { 0x0020, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Poll Control / CheckIn */                                           \
            { 0x0020, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Poll Control / CheckInResponse */                                   \
            { 0x0020, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Poll Control / FastPollStop */                                      \
            { 0x0020, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Poll Control / SetLongPollInterval */                               \
            { 0x0020, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Poll Control / SetShortPollInterval */                              \
            { 0x0101, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Door Lock / LockDoorResponse */                                     \
            { 0x0101, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / LockDoor */                                             \
            { 0x0101, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Door Lock / UnlockDoorResponse */                                   \
            { 0x0101, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / UnlockDoor */                                           \
            { 0x0101, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / UnlockWithTimeout */                                    \
            { 0x0101, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / GetLogRecord */                                         \
            { 0x0101, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / SetPin */                                               \
            { 0x0101, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / GetPin */                                               \
            { 0x0101, 0x07, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / ClearPin */                                             \
            { 0x0101, 0x08, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / ClearAllPins */                                         \
            { 0x0101, 0x0B, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / SetWeekdaySchedule */                                   \
            { 0x0101, 0x0C, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / GetWeekdaySchedule */                                   \
            { 0x0101, 0x0D, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / ClearWeekdaySchedule */                                 \
            { 0x0101, 0x0E, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / SetYeardaySchedule */                                   \
            { 0x0101, 0x0F, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / GetYeardaySchedule */                                   \
            { 0x0101, 0x10, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / ClearYeardaySchedule */                                 \
            { 0x0101, 0x11, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / SetHolidaySchedule */                                   \
            { 0x0101, 0x12, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / GetHolidaySchedule */                                   \
            { 0x0101, 0x13, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / ClearHolidaySchedule */                                 \
            { 0x0101, 0x14, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / SetUserType */                                          \
            { 0x0101, 0x15, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / GetUserType */                                          \
            { 0x0101, 0x16, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / SetRfid */                                              \
            { 0x0101, 0x17, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / GetRfid */                                              \
            { 0x0101, 0x18, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / ClearRfid */                                            \
            { 0x0101, 0x19, COMMAND_MASK_INCOMING_SERVER }, /* Door Lock / ClearAllRfids */                                        \
            {                                                                                                                      \
                0xFC57, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / ApsLinkKeyAuthorizationQueryResponse */                                                 \
            {                                                                                                                      \
                0xFC57, 0x00, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / EnableApsLinkKeyAuthorization */                                                        \
            {                                                                                                                      \
                0xFC57, 0x01, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / PoweringOffNotification */                                                              \
            {                                                                                                                      \
                0xFC57, 0x01, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / DisableApsLinkKeyAuthorization */                                                       \
            {                                                                                                                      \
                0xFC57, 0x02, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / PoweringOnNotification */                                                               \
            {                                                                                                                      \
                0xFC57, 0x02, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / ApsLinkKeyAuthorizationQuery */                                                         \
            {                                                                                                                      \
                0xFC57, 0x03, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / ShortAddressChange */                                                                   \
            {                                                                                                                      \
                0xFC57, 0x03, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / RequestNewApsLinkKey */                                                                 \
            {                                                                                                                      \
                0xFC57, 0x04, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / ApsAckEnablementQueryResponse */                                                        \
            {                                                                                                                      \
                0xFC57, 0x04, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / EnableWwahAppEventRetryAlgorithm */                                                     \
            {                                                                                                                      \
                0xFC57, 0x05, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / PowerDescriptorChange */                                                                \
            {                                                                                                                      \
                0xFC57, 0x05, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / DisableWwahAppEventRetryAlgorithm */                                                    \
            {                                                                                                                      \
                0xFC57, 0x06, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / NewDebugReportNotification */                                                           \
            { 0xFC57, 0x06,                                                                                                        \
              COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* SL Works With All Hubs / RequestTime */      \
            {                                                                                                                      \
                0xFC57, 0x07, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / DebugReportQueryResponse */                                                             \
            {                                                                                                                      \
                0xFC57, 0x07, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / EnableWwahRejoinAlgorithm */                                                            \
            {                                                                                                                      \
                0xFC57, 0x08, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / TrustCenterForClusterServerQueryResponse */                                             \
            {                                                                                                                      \
                0xFC57, 0x08, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / DisableWwahRejoinAlgorithm */                                                           \
            {                                                                                                                      \
                0xFC57, 0x09, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / SurveyBeaconsResponse */                                                                \
            {                                                                                                                      \
                0xFC57, 0x09, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / SetIasZoneEnrollmentMethod */                                                           \
            {                                                                                                                      \
                0xFC57, 0x0A, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / ClearBindingTable */                                                                    \
            {                                                                                                                      \
                0xFC57, 0x0B, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / EnablePeriodicRouterCheckIns */                                                         \
            {                                                                                                                      \
                0xFC57, 0x0C, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / DisablePeriodicRouterCheckIns */                                                        \
            {                                                                                                                      \
                0xFC57, 0x0D, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / SetMacPollFailureWaitTime */                                                            \
            {                                                                                                                      \
                0xFC57, 0x0E, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / SetPendingNetworkUpdate */                                                              \
            {                                                                                                                      \
                0xFC57, 0x0F, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / RequireApsAcksOnUnicasts */                                                             \
            {                                                                                                                      \
                0xFC57, 0x10, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / RemoveApsAcksOnUnicastsRequirement */                                                   \
            {                                                                                                                      \
                0xFC57, 0x11, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / ApsAckRequirementQuery */                                                               \
            { 0xFC57, 0x12,                                                                                                        \
              COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* SL Works With All Hubs / DebugReportQuery */ \
            { 0xFC57, 0x13,                                                                                                        \
              COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* SL Works With All Hubs / SurveyBeacons */    \
            {                                                                                                                      \
                0xFC57, 0x14, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / DisableOtaDowngrades */                                                                 \
            {                                                                                                                      \
                0xFC57, 0x15, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / DisableMgmtLeaveWithoutRejoin */                                                        \
            {                                                                                                                      \
                0xFC57, 0x16, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / DisableTouchlinkInterpanMessageSupport */                                               \
            {                                                                                                                      \
                0xFC57, 0x17, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / EnableWwahParentClassification */                                                       \
            {                                                                                                                      \
                0xFC57, 0x18, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / DisableWwahParentClassification */                                                      \
            {                                                                                                                      \
                0xFC57, 0x19, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / EnableTcSecurityOnNtwkKeyRotation */                                                    \
            {                                                                                                                      \
                0xFC57, 0x1A, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / EnableWwahBadParentRecovery */                                                          \
            {                                                                                                                      \
                0xFC57, 0x1B, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / DisableWwahBadParentRecovery */                                                         \
            {                                                                                                                      \
                0xFC57, 0x1C, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / EnableConfigurationMode */                                                              \
            {                                                                                                                      \
                0xFC57, 0x1D, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / DisableConfigurationMode */                                                             \
            {                                                                                                                      \
                0xFC57, 0x1E, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / UseTrustCenterForClusterServer */                                                       \
            {                                                                                                                      \
                0xFC57, 0x1F, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / TrustCenterForClusterServerQuery */                                                     \
            {                                                                                                                      \
                0xFC57, 0x9E, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC                                    \
            }, /* SL Works With All Hubs / UseTrustCenterForClusterServerResponse */                                               \
    }
#define EMBER_AF_GENERATED_COMMAND_COUNT (104)

// Command manufacturer codes
#define GENERATED_COMMAND_MANUFACTURER_CODES                                                                                       \
    {                                                                                                                              \
        { 0x0040, 0x1217 }, { 0x0041, 0x1217 }, { 0x0042, 0x1217 }, { 0x0043, 0x1217 }, { 0x0044, 0x1217 }, { 0x0045, 0x1217 },    \
            { 0x0046, 0x1217 }, { 0x0047, 0x1217 }, { 0x0048, 0x1217 }, { 0x0049, 0x1217 }, { 0x004A, 0x1217 },                    \
            { 0x004B, 0x1217 }, { 0x004C, 0x1217 }, { 0x004D, 0x1217 }, { 0x004E, 0x1217 }, { 0x004F, 0x1217 },                    \
            { 0x0050, 0x1217 }, { 0x0051, 0x1217 }, { 0x0052, 0x1217 }, { 0x0053, 0x1217 }, { 0x0054, 0x1217 },                    \
            { 0x0055, 0x1217 }, { 0x0056, 0x1217 }, { 0x0057, 0x1217 }, { 0x0058, 0x1217 }, { 0x0059, 0x1217 },                    \
            { 0x005A, 0x1217 }, { 0x005B, 0x1217 }, { 0x005C, 0x1217 }, { 0x005D, 0x1217 }, { 0x005E, 0x1217 },                    \
            { 0x005F, 0x1217 }, { 0x0060, 0x1217 }, { 0x0061, 0x1217 }, { 0x0062, 0x1217 }, { 0x0063, 0x1217 },                    \
            { 0x0064, 0x1217 }, { 0x0065, 0x1217 }, { 0x0066, 0x1217 }, { 0x0067, 0x1217 }, { 0x003D, 0x1217 },                    \
            { 0x003E, 0x1217 }, { 0x003F, 0x1217 },                                                                                \
    }
#define GENERATED_COMMAND_MANUFACTURER_CODE_COUNT (43)

// Generated reporting configuration defaults
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS                                                                               \
    {                                                                                                                              \
        { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0004, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },                   \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0004, 0xFFFD, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0003, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0020, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0021, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0022, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0023, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0024, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0025, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0027, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0028, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0029, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x002A, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x002B, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0030, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0031, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0032, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0033, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0034, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0040, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0041, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0042, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0043, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0044, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0045, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0046, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0047, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
    }
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS_TABLE_SIZE (28)
#endif // SILABS_AF_ENDPOINT_CONFIG
