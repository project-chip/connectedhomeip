/**
 *
 *    Copyright (c) 2020 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *
 *    Copyright (c) 2020 Silicon Labs
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef SILABS_AF_ENDPOINT_CONFIG
#define SILABS_AF_ENDPOINT_CONFIG

// Fixed number of defined endpoints
#define FIXED_ENDPOINT_COUNT (2)

// Generated defaults
#if BIGENDIAN_CPU
#define GENERATED_DEFAULTS                                                                                                         \
    {                                                                                                                              \
        11, 'S', 'i', 'l', 'i', 'c', 'o', 'n', 'L', 'a', 'b', 's', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     \
            0 /* 0,Default value: Basic,manufacturer name */, 11, 'S', 'm', 'a', 'r', 't', 'O', 'u', 't', 'l', 'e', 't', 0, 0, 0,  \
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 /* 33,Default value: Basic,model identifier */, 0xFF, 0xFF, 0xFF, \
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 66,Default value: Over the Air Bootloading,OTA Upgrade Server ID */, 0xFF, 0xFF, 0xFF, \
            0xFF /* 74,Default value: Over the Air Bootloading,Offset (address) into the file */, 0x00, 0x00, 0x00,                \
            0x30 /* 78,Default value: Over the Air Bootloading,OTA Current File Version */, 0x09, 0xAC,                            \
            0x2F /* 82,Default value: Green Power,gpp functionality */, 0xFF, 0xFF,                                                \
            0xFF /* 85,Default value: Green Power,gpp active functionality */, 0x5A, 0x69, 0x67, 0x42, 0x65, 0x65, 0x41, 0x6C,     \
            0x6C, 0x69, 0x61, 0x6E, 0x63, 0x65, 0x30, 0x39 /* 88,Default value: Green Power,gp link key */,                        \
    }
#else // ! BIGENDIAN_CPU
#define GENERATED_DEFAULTS                                                                                                         \
    {                                                                                                                              \
        11, 'S', 'i', 'l', 'i', 'c', 'o', 'n', 'L', 'a', 'b', 's', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     \
            0 /* 0,Default value: Basic,manufacturer name */, 11, 'S', 'm', 'a', 'r', 't', 'O', 'u', 't', 'l', 'e', 't', 0, 0, 0,  \
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 /* 33,Default value: Basic,model identifier */, 0xFF, 0xFF, 0xFF, \
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 66,Default value: Over the Air Bootloading,OTA Upgrade Server ID */, 0xFF, 0xFF, 0xFF, \
            0xFF /* 74,Default value: Over the Air Bootloading,Offset (address) into the file */, 0x30, 0x00, 0x00,                \
            0x00 /* 78,Default value: Over the Air Bootloading,OTA Current File Version */, 0x2F, 0xAC,                            \
            0x09 /* 82,Default value: Green Power,gpp functionality */, 0xFF, 0xFF,                                                \
            0xFF /* 85,Default value: Green Power,gpp active functionality */, 0x5A, 0x69, 0x67, 0x42, 0x65, 0x65, 0x41, 0x6C,     \
            0x6C, 0x69, 0x61, 0x6E, 0x63, 0x65, 0x30, 0x39 /* 88,Default value: Green Power,gp link key */,                        \
    }
#endif // BIGENDIAN_CPU

// Generated attributes
#define GENERATED_ATTRIBUTES                                                                                                       \
    {                                                                                                                              \
        { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x03 } }, /* 0 / Basic / ZCL version*/    \
            {                                                                                                                      \
                0x0003, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                              \
            }, /* 1 / Basic / hardware version*/                                                                                   \
            {                                                                                                                      \
                0x0004, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) &(generatedDefaults[0]) }    \
            }, /* 2 / Basic / manufacturer name*/                                                                                  \
            {                                                                                                                      \
                0x0005, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) &(generatedDefaults[33]) }   \
            }, /* 3 / Basic / model identifier*/                                                                                   \
            {                                                                                                                      \
                0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                              \
            }, /* 4 / Basic / power source*/                                                                                       \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }                           \
            }, /* 5 / Basic / cluster revision*/                                                                                   \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 6 / Identify / cluster revision*/                                                                                \
            {                                                                                                                      \
                0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0000 }                            \
            },                                                                        /* 7 / Identify / identify time*/            \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 8 / Identify / cluster revision*/         \
            { 0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 0x00 } }, /* 9 / On/off / on/off*/   \
            {                                                                                                                      \
                0x4003, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 0xFF }     \
            },                                                                        /* 10 / On/off / start up on off*/           \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 11 / On/off / cluster revision*/          \
            {                                                                                                                      \
                0x0000, ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE, 8, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) &(generatedDefaults[66]) }      \
            }, /* 12 / Over the Air Bootloading / OTA Upgrade Server ID*/                                                          \
            {                                                                                                                      \
                0x0001, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) &(generatedDefaults[74]) }            \
            }, /* 13 / Over the Air Bootloading / Offset (address) into the file*/                                                 \
            {                                                                                                                      \
                0x0002, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) &(generatedDefaults[78]) }            \
            }, /* 14 / Over the Air Bootloading / OTA Current File Version*/                                                       \
            {                                                                                                                      \
                0x0006, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                                 \
            }, /* 15 / Over the Air Bootloading / OTA Upgrade Status*/                                                             \
            {                                                                                                                      \
                0x0007, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x1002 }                              \
            }, /* 16 / Over the Air Bootloading / Manufacturer ID*/                                                                \
            {                                                                                                                      \
                0x0008, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0xA006 }                              \
            }, /* 17 / Over the Air Bootloading / Image Type ID*/                                                                  \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 18 / Over the Air Bootloading / cluster revision*/                                                               \
            {                                                                                                                      \
                0x0010, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x14 }                                 \
            }, /* 19 / Green Power / gpp max proxy table entries*/                                                                 \
            {                                                                                                                      \
                0x0011, ZCL_LONG_OCTET_STRING_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0000 }                   \
            }, /* 20 / Green Power / proxy table*/                                                                                 \
            {                                                                                                                      \
                0x0016, ZCL_BITMAP24_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) &(generatedDefaults[82]) }          \
            }, /* 21 / Green Power / gpp functionality*/                                                                           \
            {                                                                                                                      \
                0x0017, ZCL_BITMAP24_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) &(generatedDefaults[85]) }          \
            }, /* 22 / Green Power / gpp active functionality*/                                                                    \
            { 0x0022,                                                                                                              \
              ZCL_SECURITY_KEY_ATTRIBUTE_TYPE,                                                                                     \
              16,                                                                                                                  \
              (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_CLIENT),                                                                   \
              { (uint8_t *) &(generatedDefaults[88]) } }, /* 23 / Green Power / gp link key*/                                      \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 24 / Green Power / cluster revision*/                                                                            \
            {                                                                                                                      \
                0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 }                                               \
            }, /* 25 / Illuminance Measurement / measured value*/                                                                  \
            {                                                                                                                      \
                0x0001, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000UL }                                             \
            }, /* 26 / Illuminance Measurement / min measured value*/                                                              \
            {                                                                                                                      \
                0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000UL }                                             \
            }, /* 27 / Illuminance Measurement / max measured value*/                                                              \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 28 / Illuminance Measurement / cluster revision*/                                                                \
            {                                                                                                                      \
                0x0000, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 }                                               \
            }, /* 29 / Temperature Measurement / measured value*/                                                                  \
            {                                                                                                                      \
                0x0001, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000L }                                              \
            }, /* 30 / Temperature Measurement / min measured value*/                                                              \
            {                                                                                                                      \
                0x0002, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000L }                                              \
            }, /* 31 / Temperature Measurement / max measured value*/                                                              \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 32 / Temperature Measurement / cluster revision*/                                                                \
            {                                                                                                                      \
                0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000UL }                                             \
            }, /* 33 / Relative Humidity Measurement / measured value*/                                                            \
            {                                                                                                                      \
                0x0001, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000UL }                                             \
            }, /* 34 / Relative Humidity Measurement / min measured value*/                                                        \
            {                                                                                                                      \
                0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000UL }                                             \
            }, /* 35 / Relative Humidity Measurement / max measured value*/                                                        \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            },                                                          /* 36 / Relative Humidity Measurement / cluster revision*/ \
            { 0x0000, ZCL_INT48U_ATTRIBUTE_TYPE, 6, (0x00), { NULL } }, /* 37 / Simple Metering / current summation delivered*/    \
            { 0x0006, ZCL_INT8S_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },   /* 38 / Simple Metering / power factor*/      \
            { 0x0200, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } }, /* 39 / Simple Metering / status*/            \
            { 0x0202, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (0x00), { NULL } },            /* 40 / Simple Metering / hours in operation*/  \
            { 0x0300, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } }, /* 41 / Simple Metering / unit of measure*/     \
            { 0x0301, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (0x00), { NULL } },            /* 42 / Simple Metering / multiplier*/          \
            { 0x0302, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (0x00), { NULL } },            /* 43 / Simple Metering / divisor*/             \
            {                                                                                                                      \
                0x0303, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                \
            }, /* 44 / Simple Metering / summation formatting*/                                                                    \
            {                                                                                                                      \
                0x0306, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                \
            }, /* 45 / Simple Metering / metering device type*/                                                                    \
            {                                                                                                                      \
                0x0405, ZCL_UTC_TIME_ATTRIBUTE_TYPE, 4, (0x00), { NULL }                                                           \
            }, /* 46 / Simple Metering / current partial profile interval start time delivered*/                                   \
            {                                                                                                                      \
                0x0407, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (0x00), { NULL }                                                             \
            }, /* 47 / Simple Metering / current partial profile interval value delivered*/                                        \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 48 / Simple Metering / cluster revision*/ \
            { 0x0000, ZCL_BITMAP32_ATTRIBUTE_TYPE, 4, (0x00), { NULL } }, /* 49 / Electrical Measurement / measurement type*/      \
            {                                                                                                                      \
                0x0505, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0xFFFF }                                               \
            }, /* 50 / Electrical Measurement / rms voltage*/                                                                      \
            {                                                                                                                      \
                0x0508, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0xFFFF }                                               \
            }, /* 51 / Electrical Measurement / rms current*/                                                                      \
            {                                                                                                                      \
                0x050B, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0xFFFF }                                               \
            }, /* 52 / Electrical Measurement / active power*/                                                                     \
            {                                                                                                                      \
                0x0600, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 53 / Electrical Measurement / ac voltage multiplier*/                                                            \
            {                                                                                                                      \
                0x0601, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 54 / Electrical Measurement / ac voltage divisor*/                                                               \
            {                                                                                                                      \
                0x0602, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 55 / Electrical Measurement / ac current multiplier*/                                                            \
            {                                                                                                                      \
                0x0603, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 56 / Electrical Measurement / ac current divisor*/                                                               \
            {                                                                                                                      \
                0x0604, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 57 / Electrical Measurement / ac power multiplier*/                                                              \
            {                                                                                                                      \
                0x0605, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 58 / Electrical Measurement / ac power divisor*/                                                                 \
            {                                                                                                                      \
                0x0800, ZCL_BITMAP16_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0000 }                          \
            }, /* 59 / Electrical Measurement / ac overload alarms mask*/                                                          \
            {                                                                                                                      \
                0x0801, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0xFFFF }                                               \
            }, /* 60 / Electrical Measurement / ac voltage overload*/                                                              \
            {                                                                                                                      \
                0x0802, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0xFFFF }                                               \
            }, /* 61 / Electrical Measurement / ac current overload*/                                                              \
            {                                                                                                                      \
                0x0803, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0xFFFF }                                               \
            }, /* 62 / Electrical Measurement / ac active power overload*/                                                         \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 63 / Electrical Measurement / cluster revision*/                                                                 \
            {                                                                                                                      \
                0x011B, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 }                                               \
            }, /* 64 / Diagnostics / average mac retry per aps message sent*/                                                      \
            { 0x011C, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 65 / Diagnostics / last message lqi*/     \
            { 0x011D, ZCL_INT8S_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 66 / Diagnostics / last message rssi*/    \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 67 / Diagnostics / cluster revision*/     \
            {                                                                                                                      \
                0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                \
            }, /* 68 / Configuration Cluster / Prevents OTA writing of tokens.*/                                                   \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 69 / Configuration Cluster / cluster revision*/                                                                  \
            {                                                                                                                      \
                0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 }                                               \
            }, /* 70 / MFGLIB Cluster / Number of packets received while in MFGLIB mode.*/                                         \
            {                                                                                                                      \
                0x0001, ZCL_INT8S_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                  \
            }, /* 71 / MFGLIB Cluster / RSSI of the first received packet.*/                                                       \
            {                                                                                                                      \
                0x0002, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                  \
            }, /* 72 / MFGLIB Cluster / LQI of the first received packet.*/                                                        \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 73 / MFGLIB Cluster / cluster revision*/  \
    }

// Cluster function static arrays
#define GENERATED_FUNCTION_ARRAYS                                                                                                  \
    const EmberAfGenericClusterFunction emberAfFuncArrayIdentifyClusterServer[] = {                                                \
        (EmberAfGenericClusterFunction) emberAfIdentifyClusterServerInitCallback,                                                  \
        (EmberAfGenericClusterFunction) emberAfIdentifyClusterServerAttributeChangedCallback                                       \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayOnOffClusterServer[] = {                                                   \
        (EmberAfGenericClusterFunction) emberAfOnOffClusterServerInitCallback,                                                     \
        (EmberAfGenericClusterFunction) emberAfOnOffClusterServerAttributeChangedCallback                                          \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayOtaBootloadClusterClient[] = {                                             \
        (EmberAfGenericClusterFunction) emberAfOtaBootloadClusterClientInitCallback,                                               \
        (EmberAfGenericClusterFunction) emberAfOtaBootloadClusterClientDefaultResponseCallback                                     \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArraySimpleMeteringClusterServer[] = {                                          \
        (EmberAfGenericClusterFunction) emberAfSimpleMeteringClusterServerInitCallback,                                            \
        (EmberAfGenericClusterFunction) emberAfSimpleMeteringClusterServerDefaultResponseCallback                                  \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayOtaConfigurationClusterServer[] = { (                                      \
        EmberAfGenericClusterFunction) emberAfOtaConfigurationClusterServerInitCallback };

// Clusters definitions
#define GENERATED_CLUSTERS                                                                                                         \
    {                                                                                                                              \
        {                                                                                                                          \
            0x0000, (EmberAfAttributeMetadata *) &(generatedAttributes[0]), 6, 0, (CLUSTER_MASK_SERVER), NULL,                     \
        },                                                                                                                         \
            {                                                                                                                      \
                0x0003, (EmberAfAttributeMetadata *) &(generatedAttributes[6]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                 \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0003,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[7]),                                                            \
                2,                                                                                                                 \
                4,                                                                                                                 \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION),                      \
                emberAfFuncArrayIdentifyClusterServer,                                                                             \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0006,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[9]),                                                            \
                3,                                                                                                                 \
                4,                                                                                                                 \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION),                      \
                emberAfFuncArrayOnOffClusterServer,                                                                                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0019,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[12]),                                                           \
                7,                                                                                                                 \
                23,                                                                                                                \
                (CLUSTER_MASK_CLIENT | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION),                       \
                emberAfFuncArrayOtaBootloadClusterClient,                                                                          \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0400, (EmberAfAttributeMetadata *) &(generatedAttributes[25]), 4, 8, (CLUSTER_MASK_SERVER), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0402, (EmberAfAttributeMetadata *) &(generatedAttributes[29]), 4, 8, (CLUSTER_MASK_SERVER), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0405, (EmberAfAttributeMetadata *) &(generatedAttributes[33]), 4, 8, (CLUSTER_MASK_SERVER), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0702,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[37]),                                                           \
                12,                                                                                                                \
                29,                                                                                                                \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION),                       \
                emberAfFuncArraySimpleMeteringClusterServer,                                                                       \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0B04, (EmberAfAttributeMetadata *) &(generatedAttributes[49]), 15, 32, (CLUSTER_MASK_SERVER), NULL,              \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0B05, (EmberAfAttributeMetadata *) &(generatedAttributes[64]), 4, 6, (CLUSTER_MASK_SERVER), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0xFC01, (EmberAfAttributeMetadata *) &(generatedAttributes[68]), 2,                                                \
                3,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayOtaConfigurationClusterServer,    \
            },                                                                                                                     \
            {                                                                                                                      \
                0xFC02, (EmberAfAttributeMetadata *) &(generatedAttributes[70]), 4, 6, (CLUSTER_MASK_SERVER), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0021, (EmberAfAttributeMetadata *) &(generatedAttributes[19]), 6, 27, (CLUSTER_MASK_CLIENT), NULL,               \
            },                                                                                                                     \
    }

// Endpoint types
#define GENERATED_ENDPOINT_TYPES                                                                                                   \
    {                                                                                                                              \
        { (EmberAfCluster *) &(generatedClusters[0]), 13, 133 }, { (EmberAfCluster *) &(generatedClusters[13]), 1, 27 },           \
    }

// Cluster manufacturer codes
#define GENERATED_CLUSTER_MANUFACTURER_CODES                                                                                       \
    {                                                                                                                              \
        { 0x000B, 0x1002 }, { 0x000C, 0x1002 },                                                                                    \
    }
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT (2)

// Attribute manufacturer codes
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES                                                                                     \
    {                                                                                                                              \
        { 0x0044, 0x1002 }, { 0x0046, 0x1002 }, { 0x0047, 0x1002 }, { 0x0048, 0x1002 },                                            \
    }
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT (4)

// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (33)
// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (71)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE 160

// Array of endpoints that are supported
#define FIXED_ENDPOINT_ARRAY                                                                                                       \
    {                                                                                                                              \
        1, 242                                                                                                                     \
    }

// Array of profile ids
#define FIXED_PROFILE_IDS                                                                                                          \
    {                                                                                                                              \
        260, 41440                                                                                                                 \
    }

// Array of device ids
#define FIXED_DEVICE_IDS                                                                                                           \
    {                                                                                                                              \
        81, 97                                                                                                                     \
    }

// Array of device versions
#define FIXED_DEVICE_VERSIONS                                                                                                      \
    {                                                                                                                              \
        1, 1                                                                                                                       \
    }

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES                                                                                                       \
    {                                                                                                                              \
        0, 1                                                                                                                       \
    }

// Array of networks supported on each endpoint
#define FIXED_NETWORKS                                                                                                             \
    {                                                                                                                              \
        0, 0                                                                                                                       \
    }

#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS                                                                       \
    void emberAfPluginEepromInitCallback(void);                                                                                    \
    void emberAfPluginPowerMeterCs5463InitCallback(void);                                                                          \
    void emberAfPluginGreenPowerClientInitCallback(void);                                                                          \
    void emberAfPluginReportingInitCallback(void);                                                                                 \
    void emberAfPluginHumiditySi7021InitCallback(void);                                                                            \
    void emberAfPluginRelativeHumidityMeasurementServerInitCallback(void);                                                         \
    void emberAfPluginTemperatureMeasurementServerInitCallback(void);                                                              \
    void emberAfPluginIlluminanceMeasurementServerInitCallback(void);                                                              \
    void emberAfPluginIlluminanceSi1141InitCallback(void);                                                                         \
    void emberAfPluginInstallCodeReadInitCallback(void);                                                                           \
    void emberAfPluginTemperatureSi7021InitCallback(void);                                                                         \
    void emberAfPluginConnectionManagerInitCallback(void);                                                                         \
    void emberAfPluginCountersInitCallback(void);                                                                                  \
    void emberAfPluginElectricalMeasurementServerInitCallback(void);                                                               \
    void emberAfPluginI2cDriverInitCallback(void);

#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS                                                                              \
    emberAfPluginEepromInitCallback();                                                                                             \
    emberAfPluginPowerMeterCs5463InitCallback();                                                                                   \
    emberAfPluginGreenPowerClientInitCallback();                                                                                   \
    emberAfPluginReportingInitCallback();                                                                                          \
    emberAfPluginHumiditySi7021InitCallback();                                                                                     \
    emberAfPluginRelativeHumidityMeasurementServerInitCallback();                                                                  \
    emberAfPluginTemperatureMeasurementServerInitCallback();                                                                       \
    emberAfPluginIlluminanceMeasurementServerInitCallback();                                                                       \
    emberAfPluginIlluminanceSi1141InitCallback();                                                                                  \
    emberAfPluginInstallCodeReadInitCallback();                                                                                    \
    emberAfPluginTemperatureSi7021InitCallback();                                                                                  \
    emberAfPluginConnectionManagerInitCallback();                                                                                  \
    emberAfPluginCountersInitCallback();                                                                                           \
    emberAfPluginElectricalMeasurementServerInitCallback();                                                                        \
    emberAfPluginI2cDriverInitCallback();

#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS                                                                   \
    void emberAfPluginAddressTableNcpInitCallback(bool memoryAllocation);

#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS emberAfPluginAddressTableNcpInitCallback(memoryAllocation);

#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS                                                               \
    void emberAfPluginManufacturingLibraryOtaStackStatusCallback(EmberStatus status);                                              \
    void emberAfPluginGreenPowerClientStackStatusCallback(EmberStatus status);                                                     \
    void emberAfPluginReportingStackStatusCallback(EmberStatus status);                                                            \
    void emberAfPluginOtaClientStackStatusCallback(EmberStatus status);                                                            \
    void emberAfPluginRelativeHumidityMeasurementServerStackStatusCallback(EmberStatus status);                                    \
    void emberAfPluginTemperatureMeasurementServerStackStatusCallback(EmberStatus status);                                         \
    void emberAfPluginMeteringServerStackStatusCallback(EmberStatus status);                                                       \
    void emberAfPluginIlluminanceMeasurementServerStackStatusCallback(EmberStatus status);                                         \
    void emberAfPluginNetworkSteeringStackStatusCallback(EmberStatus status);                                                      \
    void emberAfPluginConnectionManagerStackStatusCallback(EmberStatus status);                                                    \
    void emberAfPluginElectricalMeasurementServerStackStatusCallback(EmberStatus status);

#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS                                                                      \
    emberAfPluginManufacturingLibraryOtaStackStatusCallback(status);                                                               \
    emberAfPluginGreenPowerClientStackStatusCallback(status);                                                                      \
    emberAfPluginReportingStackStatusCallback(status);                                                                             \
    emberAfPluginOtaClientStackStatusCallback(status);                                                                             \
    emberAfPluginRelativeHumidityMeasurementServerStackStatusCallback(status);                                                     \
    emberAfPluginTemperatureMeasurementServerStackStatusCallback(status);                                                          \
    emberAfPluginMeteringServerStackStatusCallback(status);                                                                        \
    emberAfPluginIlluminanceMeasurementServerStackStatusCallback(status);                                                          \
    emberAfPluginNetworkSteeringStackStatusCallback(status);                                                                       \
    emberAfPluginConnectionManagerStackStatusCallback(status);                                                                     \
    emberAfPluginElectricalMeasurementServerStackStatusCallback(status);

// Generated data for the command discovery
#define GENERATED_COMMANDS                                                                                                         \
    {                                                                                                                              \
        { 0x0000, 0x00, COMMAND_MASK_INCOMING_SERVER },                                    /* Basic / ResetToFactoryDefaults */    \
            { 0x0003, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / Identify */               \
            { 0x0003, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Identify / IdentifyQueryResponse */  \
            { 0x0003, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / IdentifyQuery */          \
            { 0x0006, 0x00, COMMAND_MASK_INCOMING_SERVER },                                /* On/off / Off */                      \
            { 0x0006, 0x01, COMMAND_MASK_INCOMING_SERVER },                                /* On/off / On */                       \
            { 0x0006, 0x02, COMMAND_MASK_INCOMING_SERVER },                                /* On/off / Toggle */                   \
            { 0x0019, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / QueryNextImageRequest */                 \
            { 0x0019, 0x03, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / ImageBlockRequest */                     \
            { 0x0019, 0x06, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / UpgradeEndRequest */                     \
            { 0x0021, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* Green Power / GpNotificationResponse */                             \
            { 0x0021, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* Green Power / GpPairing */                                          \
            { 0x0021, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* Green Power / GpProxyCommissioningMode */                           \
            { 0x0021, 0x06, COMMAND_MASK_INCOMING_CLIENT }, /* Green Power / GpResponse */                                         \
            { 0x0021, 0x0A, COMMAND_MASK_INCOMING_CLIENT }, /* Green Power / GpSinkTableResponse */                                \
            { 0x0021, 0x0B, COMMAND_MASK_INCOMING_CLIENT }, /* Green Power / GpProxyTableRequest */                                \
            { 0x0702, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / GetProfile */                                     \
            { 0x0702, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / RequestFastPollMode */                            \
            { 0x0702, 0x07, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / StartSampling */                                  \
            { 0x0702, 0x08, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / GetSampledData */                                 \
            { 0x0702, 0x09, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / MirrorReportAttributeResponse */                  \
            { 0x0702, 0x0A, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / ResetLoadLimitCounter */                          \
            { 0x0702, 0x0B, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / ChangeSupply */                                   \
            { 0x0702, 0x0C, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / LocalChangeSupply */                              \
            { 0x0702, 0x0D, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / SetSupplyStatus */                                \
            { 0x0702, 0x0E, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / SetUncontrolledFlowThreshold */                   \
            { 0xFC01, 0x00,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Configuration Cluster / ReturnToken */       \
            { 0xFC01, 0x00,                                                                                                        \
              COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Configuration Cluster / SetToken */          \
            { 0xFC01, 0x01,                                                                                                        \
              COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Configuration Cluster / LockTokens */        \
            { 0xFC01, 0x02,                                                                                                        \
              COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Configuration Cluster / ReadTokens */        \
            { 0xFC01, 0x03,                                                                                                        \
              COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Configuration Cluster / UnlockTokens */      \
            { 0xFC02, 0x00, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* MFGLIB Cluster / stream */     \
            { 0xFC02, 0x01, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* MFGLIB Cluster / tone */       \
            { 0xFC02, 0x02, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* MFGLIB Cluster / rxMode */     \
    }
#define EMBER_AF_GENERATED_COMMAND_COUNT (34)

// Command manufacturer codes
#define GENERATED_COMMAND_MANUFACTURER_CODES                                                                                       \
    {                                                                                                                              \
        { 0x0020, 0x1002 }, { 0x0021, 0x1002 }, { 0x001A, 0x1002 }, { 0x001B, 0x1002 }, { 0x001C, 0x1002 }, { 0x001D, 0x1002 },    \
            { 0x001E, 0x1002 }, { 0x001F, 0x1002 },                                                                                \
    }
#define GENERATED_COMMAND_MANUFACTURER_CODE_COUNT (8)

// Generated reporting configuration defaults
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS                                                                               \
    {                                                                                                                              \
        { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0006, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },                   \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0400, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0402, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0405, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
    }
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS_TABLE_SIZE (4)
#endif // SILABS_AF_ENDPOINT_CONFIG
