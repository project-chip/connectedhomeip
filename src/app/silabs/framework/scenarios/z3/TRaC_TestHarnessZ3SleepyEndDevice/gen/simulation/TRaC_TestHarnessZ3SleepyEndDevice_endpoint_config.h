/**
 *
 *    Copyright (c) 2020 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *
 *    Copyright (c) 2020 Silicon Labs
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef SILABS_AF_ENDPOINT_CONFIG
#define SILABS_AF_ENDPOINT_CONFIG

// Fixed number of defined endpoints
#define FIXED_ENDPOINT_COUNT (2)

// Generated defaults
#if BIGENDIAN_CPU
#define GENERATED_DEFAULTS                                                                                                         \
    {                                                                                                                              \
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 0,Default value: Commissioning,extended pan id */, 0x07, 0xFF, 0xF8,     \
            0x00 /* 8,Default value: Commissioning,channel mask */, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,                      \
            0xFF /* 12,Default value: Over the Air Bootloading,OTA Upgrade Server ID */, 0xFF, 0xFF, 0xFF,                         \
            0xFF /* 20,Default value: Over the Air Bootloading,Offset (address) into the file */, 0x00, 0x00, 0x38,                \
            0x40 /* 24,Default value: Poll Control,check-in interval */, 0x00, 0x00, 0x00,                                         \
            0x14 /* 28,Default value: Poll Control,long poll interval */,                                                          \
    }
#else // ! BIGENDIAN_CPU
#define GENERATED_DEFAULTS                                                                                                         \
    {                                                                                                                              \
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 0,Default value: Commissioning,extended pan id */, 0x00, 0xF8, 0xFF,     \
            0x07 /* 8,Default value: Commissioning,channel mask */, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,                      \
            0xFF /* 12,Default value: Over the Air Bootloading,OTA Upgrade Server ID */, 0xFF, 0xFF, 0xFF,                         \
            0xFF /* 20,Default value: Over the Air Bootloading,Offset (address) into the file */, 0x40, 0x38, 0x00,                \
            0x00 /* 24,Default value: Poll Control,check-in interval */, 0x14, 0x00, 0x00,                                         \
            0x00 /* 28,Default value: Poll Control,long poll interval */,                                                          \
    }
#endif // BIGENDIAN_CPU

// Generated attributes
#define GENERATED_ATTRIBUTES                                                                                                       \
    {                                                                                                                              \
        {                                                                                                                          \
            0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT | ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }       \
        }, /* 0 / Basic / cluster revision*/                                                                                       \
            {                                                                                                                      \
                0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x03 }                              \
            }, /* 1 / Basic / ZCL version*/                                                                                        \
            {                                                                                                                      \
                0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x01 }                              \
            }, /* 2 / Basic / application version*/                                                                                \
            {                                                                                                                      \
                0x0002, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                              \
            }, /* 3 / Basic / stack version*/                                                                                      \
            {                                                                                                                      \
                0x0003, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                              \
            }, /* 4 / Basic / hardware version*/                                                                                   \
            {                                                                                                                      \
                0x0004, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_SINGLETON), { NULL }                                   \
            }, /* 5 / Basic / manufacturer name*/                                                                                  \
            {                                                                                                                      \
                0x0005, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_SINGLETON), { NULL }                                   \
            }, /* 6 / Basic / model identifier*/                                                                                   \
            { 0x0006, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 17, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 7 / Basic / date code*/       \
            {                                                                                                                      \
                0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                              \
            }, /* 8 / Basic / power source*/                                                                                       \
            {                                                                                                                      \
                0x0008, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0xFF }                              \
            }, /* 9 / Basic / generic device class*/                                                                               \
            {                                                                                                                      \
                0x0009, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0xFF }                              \
            }, /* 10 / Basic / generic device type*/                                                                               \
            { 0x000A, ZCL_OCTET_STRING_ATTRIBUTE_TYPE, 17, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 11 / Basic / product code*/  \
            { 0x000B, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 65, (ATTRIBUTE_MASK_SINGLETON), { NULL } },  /* 12 / Basic / product url*/   \
            { 0x4000, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 17, (ATTRIBUTE_MASK_SINGLETON), { NULL } },  /* 13 / Basic / sw build id*/   \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }                           \
            }, /* 14 / Basic / cluster revision*/                                                                                  \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 15 / Device Temperature Configuration / cluster revision*/                                                       \
            {                                                                                                                      \
                0x0000, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000L }                                              \
            }, /* 16 / Device Temperature Configuration / current temperature*/                                                    \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 17 / Device Temperature Configuration / cluster revision*/                                                       \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 18 / Identify / cluster revision*/                                                                               \
            {                                                                                                                      \
                0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0000 }                            \
            },                                                                        /* 19 / Identify / identify time*/           \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 20 / Identify / cluster revision*/        \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            },                                                                        /* 21 / Groups / cluster revision*/          \
            { 0x0000, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },  /* 22 / Groups / name support*/              \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 23 / Groups / cluster revision*/          \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            },                                                                        /* 24 / Scenes / cluster revision*/          \
            { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 25 / Scenes / scene count*/               \
            { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 26 / Scenes / current scene*/             \
            { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 } }, /* 27 / Scenes / current group*/             \
            { 0x0003, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },  /* 28 / Scenes / scene valid*/               \
            { 0x0004, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },  /* 29 / Scenes / name support*/              \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 30 / Scenes / cluster revision*/          \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 31 / On/off / cluster revision*/                                                                                 \
            { 0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 0x00 } }, /* 32 / On/off / on/off*/  \
            { 0x4000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x01 } }, /* 33 / On/off / global scene control*/       \
            {                                                                                                                      \
                0x4001, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0000 }                            \
            }, /* 34 / On/off / on time*/                                                                                          \
            {                                                                                                                      \
                0x4002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0000 }                            \
            }, /* 35 / On/off / off wait time*/                                                                                    \
            {                                                                                                                      \
                0x4003, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 0xFF }     \
            },                                                                        /* 36 / On/off / start up on off*/           \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 37 / On/off / cluster revision*/          \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 38 / Level Control / cluster revision*/                                                                          \
            {                                                                                                                      \
                0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 0x00 }                               \
            },                                                                        /* 39 / Level Control / current level*/      \
            { 0x0001, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 } }, /* 40 / Level Control / remaining time*/     \
            {                                                                                                                      \
                0x000F, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x00 }                             \
            }, /* 41 / Level Control / options*/                                                                                   \
            {                                                                                                                      \
                0x4000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_TOKENIZE), { (uint8_t *) 0xFF }     \
            }, /* 42 / Level Control / start up current level*/                                                                    \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 43 / Level Control / cluster revision*/   \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            },                                                                        /* 44 / Alarms / cluster revision*/          \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 45 / Alarms / cluster revision*/          \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT | ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }   \
            }, /* 46 / Time / cluster revision*/                                                                                   \
            {                                                                                                                      \
                0x0000, ZCL_UTC_TIME_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_SINGLETON), { NULL }             \
            }, /* 47 / Time / time*/                                                                                               \
            {                                                                                                                      \
                0x0001, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }  \
            }, /* 48 / Time / time status*/                                                                                        \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }                           \
            }, /* 49 / Time / cluster revision*/                                                                                   \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 50 / Commissioning / cluster revision*/                                                                          \
            {                                                                                                                      \
                0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0xFFFF }                            \
            }, /* 51 / Commissioning / short address*/                                                                             \
            {                                                                                                                      \
                0x0001, ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE, 8, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) &(generatedDefaults[0]) }     \
            }, /* 52 / Commissioning / extended pan id*/                                                                           \
            {                                                                                                                      \
                0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0xFFFF }                            \
            }, /* 53 / Commissioning / pan id*/                                                                                    \
            {                                                                                                                      \
                0x0003, ZCL_BITMAP32_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) &(generatedDefaults[8]) }         \
            }, /* 54 / Commissioning / channel mask*/                                                                              \
            {                                                                                                                      \
                0x0004, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x02 }                               \
            }, /* 55 / Commissioning / protocol version*/                                                                          \
            {                                                                                                                      \
                0x0005, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x02 }                               \
            }, /* 56 / Commissioning / stack profile*/                                                                             \
            {                                                                                                                      \
                0x0006, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x03 }                               \
            }, /* 57 / Commissioning / startup control*/                                                                           \
            {                                                                                                                      \
                0x0010, ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE, 8, (ATTRIBUTE_MASK_WRITABLE), { NULL }                                    \
            }, /* 58 / Commissioning / trust center address*/                                                                      \
            {                                                                                                                      \
                0x0012, ZCL_SECURITY_KEY_ATTRIBUTE_TYPE, 16, (ATTRIBUTE_MASK_WRITABLE), { NULL }                                   \
            }, /* 59 / Commissioning / network key*/                                                                               \
            {                                                                                                                      \
                0x0013, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x01 }                             \
            }, /* 60 / Commissioning / use insecure join*/                                                                         \
            {                                                                                                                      \
                0x0014, ZCL_SECURITY_KEY_ATTRIBUTE_TYPE, 16, (ATTRIBUTE_MASK_WRITABLE), { NULL }                                   \
            }, /* 61 / Commissioning / preconfigured link key*/                                                                    \
            {                                                                                                                      \
                0x0015, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x00 }                               \
            }, /* 62 / Commissioning / network key sequence number*/                                                               \
            {                                                                                                                      \
                0x0016, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x05 }                               \
            }, /* 63 / Commissioning / network key type*/                                                                          \
            {                                                                                                                      \
                0x0017, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0000 }                            \
            }, /* 64 / Commissioning / network manager address*/                                                                   \
            {                                                                                                                      \
                0x0020, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x05 }                               \
            }, /* 65 / Commissioning / scan attempts*/                                                                             \
            {                                                                                                                      \
                0x0021, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0064 }                            \
            }, /* 66 / Commissioning / time between scans*/                                                                        \
            {                                                                                                                      \
                0x0022, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x003C }                            \
            }, /* 67 / Commissioning / rejoin interval*/                                                                           \
            {                                                                                                                      \
                0x0023, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0E10 }                            \
            }, /* 68 / Commissioning / max rejoin interval*/                                                                       \
            {                                                                                                                      \
                0x0030, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0000UL }                          \
            }, /* 69 / Commissioning / indirect poll rate*/                                                                        \
            {                                                                                                                      \
                0x0031, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x00UL }                             \
            }, /* 70 / Commissioning / parent retry threshold*/                                                                    \
            {                                                                                                                      \
                0x0040, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x00 }                             \
            }, /* 71 / Commissioning / concentrator flag*/                                                                         \
            {                                                                                                                      \
                0x0041, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0F }                               \
            }, /* 72 / Commissioning / concentrator radius*/                                                                       \
            {                                                                                                                      \
                0x0042, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x00 }                               \
            }, /* 73 / Commissioning / concentrator discovery time*/                                                               \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 74 / Commissioning / cluster revision*/   \
            {                                                                                                                      \
                0x0000, ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE, 8, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) &(generatedDefaults[12]) }      \
            }, /* 75 / Over the Air Bootloading / OTA Upgrade Server ID*/                                                          \
            {                                                                                                                      \
                0x0001, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) &(generatedDefaults[20]) }            \
            }, /* 76 / Over the Air Bootloading / Offset (address) into the file*/                                                 \
            {                                                                                                                      \
                0x0006, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                                 \
            }, /* 77 / Over the Air Bootloading / OTA Upgrade Status*/                                                             \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 78 / Over the Air Bootloading / cluster revision*/                                                               \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 79 / Over the Air Bootloading / cluster revision*/                                                               \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 80 / Poll Control / cluster revision*/                                                                           \
            {                                                                                                                      \
                0x0000, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) &(generatedDefaults[24]) }          \
            }, /* 81 / Poll Control / check-in interval*/                                                                          \
            {                                                                                                                      \
                0x0001, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (0x00), { (uint8_t *) &(generatedDefaults[28]) }                             \
            },                                                                        /* 82 / Poll Control / long poll interval*/  \
            { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0002 } }, /* 83 / Poll Control / short poll interval*/ \
            {                                                                                                                      \
                0x0003, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0028 }                            \
            },                                                                        /* 84 / Poll Control / fast poll timeout*/   \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 85 / Poll Control / cluster revision*/    \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            },                                                                        /* 86 / Door Lock / cluster revision*/       \
            { 0x0000, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 87 / Door Lock / lock state*/             \
            { 0x0001, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },    /* 88 / Door Lock / lock type*/              \
            { 0x0002, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },  /* 89 / Door Lock / actuator enabled*/       \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 90 / Door Lock / cluster revision*/       \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 91 / Window Covering / cluster revision*/                                                                        \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            },                                                                         /* 92 / Thermostat / cluster revision*/     \
            { 0x0000, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000L } }, /* 93 / Thermostat / local temperature*/    \
            {                                                                                                                      \
                0x0011, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0A28 }                            \
            }, /* 94 / Thermostat / occupied cooling setpoint*/                                                                    \
            {                                                                                                                      \
                0x0012, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x07D0 }                            \
            }, /* 95 / Thermostat / occupied heating setpoint*/                                                                    \
            {                                                                                                                      \
                0x001B, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x04 }                               \
            }, /* 96 / Thermostat / control sequence of operation*/                                                                \
            {                                                                                                                      \
                0x001C, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x01 }                               \
            },                                                                        /* 97 / Thermostat / system mode*/           \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 98 / Thermostat / cluster revision*/      \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 99 / Fan Control / cluster revision*/                                                                            \
            {                                                                                                                      \
                0x0000, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x05 }                               \
            }, /* 100 / Fan Control / fan mode*/                                                                                   \
            {                                                                                                                      \
                0x0001, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x02 }                               \
            },                                                                        /* 101 / Fan Control / fan mode sequence*/   \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 102 / Fan Control / cluster revision*/    \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 103 / Thermostat User Interface Configuration / cluster revision*/                                               \
            {                                                                                                                      \
                0x0000, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x00 }                               \
            }, /* 104 / Thermostat User Interface Configuration / temperature display mode*/                                       \
            {                                                                                                                      \
                0x0001, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x00 }                               \
            }, /* 105 / Thermostat User Interface Configuration / keypad lockout*/                                                 \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 106 / Thermostat User Interface Configuration / cluster revision*/                                               \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 107 / Color Control / cluster revision*/                                                                         \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 108 / Ballast Configuration / cluster revision*/                                                                 \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 109 / Illuminance Measurement / cluster revision*/                                                               \
            {                                                                                                                      \
                0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 }                                               \
            }, /* 110 / Illuminance Measurement / measured value*/                                                                 \
            {                                                                                                                      \
                0x0001, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000UL }                                             \
            }, /* 111 / Illuminance Measurement / min measured value*/                                                             \
            {                                                                                                                      \
                0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000UL }                                             \
            }, /* 112 / Illuminance Measurement / max measured value*/                                                             \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 113 / Illuminance Measurement / cluster revision*/                                                               \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 114 / Illuminance Level Sensing / cluster revision*/                                                             \
            {                                                                                                                      \
                0x0000, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                  \
            }, /* 115 / Illuminance Level Sensing / level status*/                                                                 \
            {                                                                                                                      \
                0x0010, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 0x0000UL }                          \
            }, /* 116 / Illuminance Level Sensing / illuminance level target*/                                                     \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 117 / Illuminance Level Sensing / cluster revision*/                                                             \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 118 / Temperature Measurement / cluster revision*/                                                               \
            {                                                                                                                      \
                0x0000, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 }                                               \
            }, /* 119 / Temperature Measurement / measured value*/                                                                 \
            {                                                                                                                      \
                0x0001, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000L }                                              \
            }, /* 120 / Temperature Measurement / min measured value*/                                                             \
            {                                                                                                                      \
                0x0002, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000L }                                              \
            }, /* 121 / Temperature Measurement / max measured value*/                                                             \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 122 / Temperature Measurement / cluster revision*/                                                               \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 123 / Occupancy Sensing / cluster revision*/                                                                     \
            { 0x0000, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } }, /* 124 / Occupancy Sensing / occupancy*/      \
            {                                                                                                                      \
                0x0001, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                  \
            }, /* 125 / Occupancy Sensing / occupancy sensor type*/                                                                \
            {                                                                                                                      \
                0x0002, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 }                                                \
            }, /* 126 / Occupancy Sensing / occupancy sensor type bitmap*/                                                         \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 127 / Occupancy Sensing / cluster revision*/                                                                     \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 128 / Carbon Monoxide Concentration Measurement / cluster revision*/                                             \
            {                                                                                                                      \
                0x0000, ZCL_FLOAT_SINGLE_ATTRIBUTE_TYPE, 4, (0x00), { NULL }                                                       \
            }, /* 129 / Carbon Monoxide Concentration Measurement / measured value*/                                               \
            {                                                                                                                      \
                0x0001, ZCL_FLOAT_SINGLE_ATTRIBUTE_TYPE, 4, (0x00), { NULL }                                                       \
            }, /* 130 / Carbon Monoxide Concentration Measurement / min measured value*/                                           \
            {                                                                                                                      \
                0x0002, ZCL_FLOAT_SINGLE_ATTRIBUTE_TYPE, 4, (0x00), { NULL }                                                       \
            }, /* 131 / Carbon Monoxide Concentration Measurement / max measured value*/                                           \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 132 / Carbon Monoxide Concentration Measurement / cluster revision*/                                             \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            },                                                                          /* 133 / IAS Zone / cluster revision*/     \
            { 0x0000, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0x00 } },      /* 134 / IAS Zone / zone state*/           \
            { 0x0001, ZCL_ENUM16_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 } },   /* 135 / IAS Zone / zone type*/            \
            { 0x0002, ZCL_BITMAP16_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0000 } }, /* 136 / IAS Zone / zone status*/          \
            {                                                                                                                      \
                0x0010, ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE, 8, (ATTRIBUTE_MASK_WRITABLE), { NULL }                                    \
            },                                                                        /* 137 / IAS Zone / IAS CIE address*/        \
            { 0x0011, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t *) 0xFF } },    /* 138 / IAS Zone / Zone ID*/                \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 139 / IAS Zone / cluster revision*/       \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            },                                                                        /* 140 / IAS ACE / cluster revision*/        \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 141 / IAS ACE / cluster revision*/        \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 142 / IAS WD / cluster revision*/                                                                                \
            {                                                                                                                      \
                0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t *) 240 }                               \
            },                                                                        /* 143 / IAS WD / max duration*/             \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 144 / IAS WD / cluster revision*/         \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 145 / ZLL Commissioning / cluster revision*/                                                                     \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 }                                               \
            }, /* 146 / ZLL Commissioning / cluster revision*/                                                                     \
    }

// Cluster function static arrays
#define GENERATED_FUNCTION_ARRAYS                                                                                                  \
    const EmberAfGenericClusterFunction emberAfFuncArrayIdentifyClusterServer[] = {                                                \
        (EmberAfGenericClusterFunction) emberAfIdentifyClusterServerInitCallback,                                                  \
        (EmberAfGenericClusterFunction) emberAfIdentifyClusterServerAttributeChangedCallback                                       \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayGroupsClusterServer[]       = { (                                          \
        EmberAfGenericClusterFunction) emberAfGroupsClusterServerInitCallback };                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayScenesClusterServer[]       = { (                                          \
        EmberAfGenericClusterFunction) emberAfScenesClusterServerInitCallback };                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayOnOffClusterServer[]        = { (                                          \
        EmberAfGenericClusterFunction) emberAfOnOffClusterServerInitCallback };                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayLevelControlClusterServer[] = { (                                          \
        EmberAfGenericClusterFunction) emberAfLevelControlClusterServerInitCallback };                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayTimeClusterServer[]         = { (                                          \
        EmberAfGenericClusterFunction) emberAfTimeClusterServerInitCallback };                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayOtaBootloadClusterServer[]  = { (                                          \
        EmberAfGenericClusterFunction) emberAfOtaBootloadClusterServerInitCallback };                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayPollControlClusterServer[]  = {                                            \
        (EmberAfGenericClusterFunction) emberAfPollControlClusterServerInitCallback,                                              \
        (EmberAfGenericClusterFunction) emberAfPollControlClusterServerAttributeChangedCallback,                                  \
        (EmberAfGenericClusterFunction) emberAfPollControlClusterServerPreAttributeChangedCallback                                \
    };

// Clusters definitions
#define GENERATED_CLUSTERS                                                                                                         \
    {                                                                                                                              \
        {                                                                                                                          \
            0x0000, (EmberAfAttributeMetadata *) &(generatedAttributes[0]), 1, 0, (CLUSTER_MASK_CLIENT), NULL,                     \
        },                                                                                                                         \
            {                                                                                                                      \
                0x0000, (EmberAfAttributeMetadata *) &(generatedAttributes[1]), 14, 0, (CLUSTER_MASK_SERVER), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0002, (EmberAfAttributeMetadata *) &(generatedAttributes[15]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0002, (EmberAfAttributeMetadata *) &(generatedAttributes[16]), 2, 4, (CLUSTER_MASK_SERVER), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0003, (EmberAfAttributeMetadata *) &(generatedAttributes[18]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0003,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[19]),                                                           \
                2,                                                                                                                 \
                4,                                                                                                                 \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION),                      \
                emberAfFuncArrayIdentifyClusterServer,                                                                             \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0004, (EmberAfAttributeMetadata *) &(generatedAttributes[21]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0004, (EmberAfAttributeMetadata *) &(generatedAttributes[22]), 2,                                                \
                3,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayGroupsClusterServer,              \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0005, (EmberAfAttributeMetadata *) &(generatedAttributes[24]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0005, (EmberAfAttributeMetadata *) &(generatedAttributes[25]), 6,                                                \
                8,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayScenesClusterServer,              \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0006, (EmberAfAttributeMetadata *) &(generatedAttributes[31]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0006, (EmberAfAttributeMetadata *) &(generatedAttributes[32]), 6,                                                \
                9,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayOnOffClusterServer,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0008, (EmberAfAttributeMetadata *) &(generatedAttributes[38]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0008, (EmberAfAttributeMetadata *) &(generatedAttributes[39]), 5,                                                \
                7,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayLevelControlClusterServer,        \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0009, (EmberAfAttributeMetadata *) &(generatedAttributes[44]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0009, (EmberAfAttributeMetadata *) &(generatedAttributes[45]), 1, 2, (CLUSTER_MASK_SERVER), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x000A, (EmberAfAttributeMetadata *) &(generatedAttributes[46]), 1, 0, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x000A, (EmberAfAttributeMetadata *) &(generatedAttributes[47]), 3,                                                \
                0,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayTimeClusterServer,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0015, (EmberAfAttributeMetadata *) &(generatedAttributes[50]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0015, (EmberAfAttributeMetadata *) &(generatedAttributes[51]), 24, 79, (CLUSTER_MASK_SERVER), NULL,              \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0019, (EmberAfAttributeMetadata *) &(generatedAttributes[75]), 4, 15, (CLUSTER_MASK_CLIENT), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0019, (EmberAfAttributeMetadata *) &(generatedAttributes[79]), 1,                                                \
                2,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayOtaBootloadClusterServer,         \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0020, (EmberAfAttributeMetadata *) &(generatedAttributes[80]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0020,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[81]),                                                           \
                5,                                                                                                                 \
                14,                                                                                                                \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION |                      \
                 CLUSTER_MASK_PRE_ATTRIBUTE_CHANGED_FUNCTION),                                                                     \
                emberAfFuncArrayPollControlClusterServer,                                                                          \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0101, (EmberAfAttributeMetadata *) &(generatedAttributes[86]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0101, (EmberAfAttributeMetadata *) &(generatedAttributes[87]), 4, 5, (CLUSTER_MASK_SERVER), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0102, (EmberAfAttributeMetadata *) &(generatedAttributes[91]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0201, (EmberAfAttributeMetadata *) &(generatedAttributes[92]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0201, (EmberAfAttributeMetadata *) &(generatedAttributes[93]), 6, 10, (CLUSTER_MASK_SERVER), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0202, (EmberAfAttributeMetadata *) &(generatedAttributes[99]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0202, (EmberAfAttributeMetadata *) &(generatedAttributes[100]), 3, 4, (CLUSTER_MASK_SERVER), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0204, (EmberAfAttributeMetadata *) &(generatedAttributes[103]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0204, (EmberAfAttributeMetadata *) &(generatedAttributes[104]), 3, 4, (CLUSTER_MASK_SERVER), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0300, (EmberAfAttributeMetadata *) &(generatedAttributes[107]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0301, (EmberAfAttributeMetadata *) &(generatedAttributes[108]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0400, (EmberAfAttributeMetadata *) &(generatedAttributes[109]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0400, (EmberAfAttributeMetadata *) &(generatedAttributes[110]), 4, 8, (CLUSTER_MASK_SERVER), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0401, (EmberAfAttributeMetadata *) &(generatedAttributes[114]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0401, (EmberAfAttributeMetadata *) &(generatedAttributes[115]), 3, 5, (CLUSTER_MASK_SERVER), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0402, (EmberAfAttributeMetadata *) &(generatedAttributes[118]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0402, (EmberAfAttributeMetadata *) &(generatedAttributes[119]), 4, 8, (CLUSTER_MASK_SERVER), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0406, (EmberAfAttributeMetadata *) &(generatedAttributes[123]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0406, (EmberAfAttributeMetadata *) &(generatedAttributes[124]), 4, 5, (CLUSTER_MASK_SERVER), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x040C, (EmberAfAttributeMetadata *) &(generatedAttributes[128]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x040C, (EmberAfAttributeMetadata *) &(generatedAttributes[129]), 4, 14, (CLUSTER_MASK_SERVER), NULL,              \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0500, (EmberAfAttributeMetadata *) &(generatedAttributes[133]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0500, (EmberAfAttributeMetadata *) &(generatedAttributes[134]), 6, 16, (CLUSTER_MASK_SERVER), NULL,              \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0501, (EmberAfAttributeMetadata *) &(generatedAttributes[140]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0501, (EmberAfAttributeMetadata *) &(generatedAttributes[141]), 1, 2, (CLUSTER_MASK_SERVER), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0502, (EmberAfAttributeMetadata *) &(generatedAttributes[142]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0502, (EmberAfAttributeMetadata *) &(generatedAttributes[143]), 2, 4, (CLUSTER_MASK_SERVER), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x1000, (EmberAfAttributeMetadata *) &(generatedAttributes[145]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x1000, (EmberAfAttributeMetadata *) &(generatedAttributes[146]), 1, 2, (CLUSTER_MASK_SERVER), NULL,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0000, (EmberAfAttributeMetadata *) &(generatedAttributes[1]), 14, 0, (CLUSTER_MASK_SERVER), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0003,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[19]),                                                           \
                2,                                                                                                                 \
                4,                                                                                                                 \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION),                      \
                emberAfFuncArrayIdentifyClusterServer,                                                                             \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0004, (EmberAfAttributeMetadata *) &(generatedAttributes[22]), 2,                                                \
                3,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayGroupsClusterServer,              \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0005, (EmberAfAttributeMetadata *) &(generatedAttributes[25]), 6,                                                \
                8,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayScenesClusterServer,              \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0006, (EmberAfAttributeMetadata *) &(generatedAttributes[32]), 6,                                                \
                9,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayOnOffClusterServer,               \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0008, (EmberAfAttributeMetadata *) &(generatedAttributes[39]), 5,                                                \
                7,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayLevelControlClusterServer,        \
            },                                                                                                                     \
    }

// Endpoint types
#define GENERATED_ENDPOINT_TYPES                                                                                                   \
    {                                                                                                                              \
        { (EmberAfCluster *) &(generatedClusters[0]), 53, 284 }, { (EmberAfCluster *) &(generatedClusters[53]), 6, 31 },           \
    }

// Cluster manufacturer codes
#define GENERATED_CLUSTER_MANUFACTURER_CODES                                                                                       \
    {                                                                                                                              \
        {                                                                                                                          \
            0x00, 0x00                                                                                                             \
        }                                                                                                                          \
    }
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT (0)

// Attribute manufacturer codes
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES                                                                                     \
    {                                                                                                                              \
        {                                                                                                                          \
            0x00, 0x00                                                                                                             \
        }                                                                                                                          \
    }
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT (0)

// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (65)
// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (202)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE 315

// Array of endpoints that are supported
#define FIXED_ENDPOINT_ARRAY                                                                                                       \
    {                                                                                                                              \
        1, 2                                                                                                                       \
    }

// Array of profile ids
#define FIXED_PROFILE_IDS                                                                                                          \
    {                                                                                                                              \
        260, 260                                                                                                                   \
    }

// Array of device ids
#define FIXED_DEVICE_IDS                                                                                                           \
    {                                                                                                                              \
        256, 257                                                                                                                   \
    }

// Array of device versions
#define FIXED_DEVICE_VERSIONS                                                                                                      \
    {                                                                                                                              \
        1, 1                                                                                                                       \
    }

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES                                                                                                       \
    {                                                                                                                              \
        0, 1                                                                                                                       \
    }

// Array of networks supported on each endpoint
#define FIXED_NETWORKS                                                                                                             \
    {                                                                                                                              \
        0, 0                                                                                                                       \
    }

#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS                                                                       \
    void emberAfPluginZllCommissioningCommonInitCallback(void);                                                                    \
    void emberAfPluginSimpleClockInitCallback(void);                                                                               \
    void emberAfPluginInterpanInitCallback(void);                                                                                  \
    void emberAfPluginIdleSleepInitCallback(void);                                                                                 \
    void emberAfPluginCountersInitCallback(void);

#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS                                                                              \
    emberAfPluginZllCommissioningCommonInitCallback();                                                                             \
    emberAfPluginSimpleClockInitCallback();                                                                                        \
    emberAfPluginInterpanInitCallback();                                                                                           \
    emberAfPluginIdleSleepInitCallback();                                                                                          \
    emberAfPluginCountersInitCallback();

#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS                                                                   \
    void emberAfPluginZllCommissioningCommonNcpInitCallback(bool memoryAllocation);                                                \
    void emberAfPluginInterpanNcpInitCallback(bool memoryAllocation);                                                              \
    void emberAfPluginAddressTableNcpInitCallback(bool memoryAllocation);

#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS                                                                          \
    emberAfPluginZllCommissioningCommonNcpInitCallback(memoryAllocation);                                                          \
    emberAfPluginInterpanNcpInitCallback(memoryAllocation);                                                                        \
    emberAfPluginAddressTableNcpInitCallback(memoryAllocation);

#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS                                                               \
    void emberAfPluginEndDeviceSupportStackStatusCallback(EmberStatus status);                                                     \
    void emberAfPluginZllCommissioningCommonStackStatusCallback(EmberStatus status);                                               \
    void emberAfPluginPollControlServerStackStatusCallback(EmberStatus status);                                                    \
    void emberAfPluginTestHarnessZ3StackStatusCallback(EmberStatus status);                                                        \
    void emberAfPluginNetworkSteeringStackStatusCallback(EmberStatus status);                                                      \
    void emberAfPluginZllCommissioningNetworkStackStatusCallback(EmberStatus status);

#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS                                                                      \
    emberAfPluginEndDeviceSupportStackStatusCallback(status);                                                                      \
    emberAfPluginZllCommissioningCommonStackStatusCallback(status);                                                                \
    emberAfPluginPollControlServerStackStatusCallback(status);                                                                     \
    emberAfPluginTestHarnessZ3StackStatusCallback(status);                                                                         \
    emberAfPluginNetworkSteeringStackStatusCallback(status);                                                                       \
    emberAfPluginZllCommissioningNetworkStackStatusCallback(status);

// Generated data for the command discovery
#define GENERATED_COMMANDS                                                                                                         \
    {                                                                                                                              \
        { 0x0003, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER },     /* Identify / Identify */               \
            { 0x0003, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Identify / IdentifyQueryResponse */  \
            { 0x0003, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / IdentifyQuery */          \
            { 0x0003, 0x40, COMMAND_MASK_INCOMING_SERVER },                                /* Identify / TriggerEffect */          \
            { 0x0004, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroup */                 \
            { 0x0004, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Groups / AddGroupResponse */         \
            { 0x0004, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Groups / ViewGroup */                \
            { 0x0004, 0x01, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Groups / ViewGroupResponse */        \
            { 0x0004, 0x02, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Groups / GetGroupMembership */       \
            { 0x0004, 0x02,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Groups / GetGroupMembershipResponse */             \
            { 0x0004, 0x03, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveGroup */              \
            { 0x0004, 0x03, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Groups / RemoveGroupResponse */      \
            { 0x0004, 0x04, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveAllGroups */          \
            { 0x0004, 0x05, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroupIfIdentifying */    \
            { 0x0005, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Scenes / AddScene */                 \
            { 0x0005, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Scenes / AddSceneResponse */         \
            { 0x0005, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Scenes / ViewScene */                \
            { 0x0005, 0x01, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Scenes / ViewSceneResponse */        \
            { 0x0005, 0x02, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveScene */              \
            { 0x0005, 0x02, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Scenes / RemoveSceneResponse */      \
            { 0x0005, 0x03, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveAllScenes */          \
            { 0x0005, 0x03, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Scenes / RemoveAllScenesResponse */  \
            { 0x0005, 0x04, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Scenes / StoreScene */               \
            { 0x0005, 0x04, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Scenes / StoreSceneResponse */       \
            { 0x0005, 0x05, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RecallScene */              \
            { 0x0005, 0x06, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Scenes / GetSceneMembership */       \
            { 0x0005, 0x06,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Scenes / GetSceneMembershipResponse */             \
            { 0x0005, 0x40, COMMAND_MASK_INCOMING_SERVER },                  /* Scenes / EnhancedAddScene */                       \
            { 0x0005, 0x41, COMMAND_MASK_INCOMING_SERVER },                  /* Scenes / EnhancedViewScene */                      \
            { 0x0005, 0x42, COMMAND_MASK_INCOMING_SERVER },                  /* Scenes / CopyScene */                              \
            { 0x0006, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / Off */                      \
            { 0x0006, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / On */                       \
            { 0x0006, 0x02, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / Toggle */                   \
            { 0x0006, 0x40, COMMAND_MASK_INCOMING_SERVER },                                /* On/off / OffWithEffect */            \
            { 0x0006, 0x41, COMMAND_MASK_INCOMING_SERVER },                                /* On/off / OnWithRecallGlobalScene */  \
            { 0x0006, 0x42, COMMAND_MASK_INCOMING_SERVER },                                /* On/off / OnWithTimedOff */           \
            { 0x0008, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveToLevel */       \
            { 0x0008, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Move */              \
            { 0x0008, 0x02, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Step */              \
            { 0x0008, 0x03, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Stop */              \
            { 0x0008, 0x04,                                                                                                        \
              COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveToLevelWithOnOff */            \
            { 0x0008, 0x05, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveWithOnOff */     \
            { 0x0008, 0x06, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / StepWithOnOff */     \
            { 0x0008, 0x07, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / StopWithOnOff */     \
            { 0x0009, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Alarms / ResetAlarm */               \
            { 0x0009, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Alarms / Alarm */                    \
            { 0x0009, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Alarms / ResetAllAlarms */           \
            { 0x0015, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Commissioning / RestartDevice */     \
            { 0x0015, 0x00,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Commissioning / RestartDeviceResponse */           \
            { 0x0015, 0x01,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Commissioning / SaveStartupParametersResponse */   \
            {                                                                                                                      \
                0x0015, 0x02, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT                                          \
            }, /* Commissioning / RestoreStartupParametersResponse */                                                              \
            { 0x0015, 0x03,                                                                                                        \
              COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Commissioning / ResetStartupParameters */          \
            { 0x0015, 0x03,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Commissioning / ResetStartupParametersResponse */  \
            { 0x0019, 0x00, COMMAND_MASK_OUTGOING_SERVER },                  /* Over the Air Bootloading / ImageNotify */          \
            { 0x0019, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / QueryNextImageRequest */                 \
            { 0x0019, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Over the Air Bootloading / QueryNextImageResponse */                \
            { 0x0019, 0x03, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / ImageBlockRequest */                     \
            { 0x0019, 0x05, COMMAND_MASK_OUTGOING_SERVER }, /* Over the Air Bootloading / ImageBlockResponse */                    \
            { 0x0019, 0x06, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / UpgradeEndRequest */                     \
            { 0x0019, 0x07, COMMAND_MASK_OUTGOING_SERVER }, /* Over the Air Bootloading / UpgradeEndResponse */                    \
            { 0x0020, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Poll Control / CheckIn */            \
            { 0x0020, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Poll Control / CheckInResponse */    \
            { 0x0020, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Poll Control / FastPollStop */       \
            { 0x0020, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Poll Control / SetLongPollInterval */                               \
            { 0x0020, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Poll Control / SetShortPollInterval */                              \
            { 0x0101, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* Door Lock / LockDoor */                                             \
            { 0x0101, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Door Lock / LockDoorResponse */                                     \
            { 0x0101, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* Door Lock / UnlockDoor */                                           \
            { 0x0101, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Door Lock / UnlockDoorResponse */                                   \
            { 0x0102, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* Window Covering / WindowCoveringUpOpen */                           \
            { 0x0102, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* Window Covering / WindowCoveringDownClose */                        \
            { 0x0102, 0x02, COMMAND_MASK_OUTGOING_CLIENT }, /* Window Covering / WindowCoveringStop */                             \
            { 0x0201, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Thermostat / SetpointRaiseLower */   \
            { 0x0201, 0x00,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Thermostat / CurrentWeeklySchedule */              \
            { 0x0201, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Thermostat / SetWeeklySchedule */    \
            { 0x0201, 0x01, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Thermostat / RelayStatusLog */       \
            { 0x0201, 0x02, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Thermostat / GetWeeklySchedule */    \
            { 0x0201, 0x03, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Thermostat / ClearWeeklySchedule */  \
            { 0x0201, 0x04, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Thermostat / GetRelayStatusLog */    \
            { 0x0300, 0x07, COMMAND_MASK_OUTGOING_CLIENT },                                /* Color Control / MoveToColor */       \
            { 0x0300, 0x08, COMMAND_MASK_OUTGOING_CLIENT },                                /* Color Control / MoveColor */         \
            { 0x0300, 0x09, COMMAND_MASK_OUTGOING_CLIENT },                                /* Color Control / StepColor */         \
            { 0x0500, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* IAS Zone / ZoneEnrollResponse */     \
            { 0x0500, 0x00,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* IAS Zone / ZoneStatusChangeNotification */         \
            { 0x0500, 0x01, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* IAS Zone / ZoneEnrollRequest */      \
            { 0x0501, 0x00, COMMAND_MASK_OUTGOING_CLIENT },                                /* IAS ACE / Arm */                     \
            { 0x0501, 0x00, COMMAND_MASK_OUTGOING_SERVER },                                /* IAS ACE / ArmResponse */             \
            { 0x0501, 0x01, COMMAND_MASK_OUTGOING_CLIENT },                                /* IAS ACE / Bypass */                  \
            { 0x0501, 0x01, COMMAND_MASK_OUTGOING_SERVER },                                /* IAS ACE / GetZoneIdMapResponse */    \
            { 0x0501, 0x02, COMMAND_MASK_OUTGOING_CLIENT },                                /* IAS ACE / Emergency */               \
            { 0x0501, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* IAS ACE / GetZoneInformationResponse */                             \
            { 0x0501, 0x03, COMMAND_MASK_OUTGOING_CLIENT }, /* IAS ACE / Fire */                                                   \
            { 0x0501, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* IAS ACE / ZoneStatusChanged */                                      \
            { 0x0501, 0x04, COMMAND_MASK_OUTGOING_CLIENT }, /* IAS ACE / Panic */                                                  \
            { 0x0501, 0x04, COMMAND_MASK_OUTGOING_SERVER }, /* IAS ACE / PanelStatusChanged */                                     \
            { 0x0501, 0x05, COMMAND_MASK_OUTGOING_CLIENT }, /* IAS ACE / GetZoneIdMap */                                           \
            { 0x0501, 0x05, COMMAND_MASK_OUTGOING_SERVER }, /* IAS ACE / GetPanelStatusResponse */                                 \
            { 0x0501, 0x06, COMMAND_MASK_OUTGOING_CLIENT }, /* IAS ACE / GetZoneInformation */                                     \
            { 0x0501, 0x06, COMMAND_MASK_OUTGOING_SERVER }, /* IAS ACE / SetBypassedZoneList */                                    \
            { 0x0501, 0x07, COMMAND_MASK_OUTGOING_CLIENT }, /* IAS ACE / GetPanelStatus */                                         \
            { 0x0501, 0x07, COMMAND_MASK_OUTGOING_SERVER }, /* IAS ACE / BypassResponse */                                         \
            { 0x0501, 0x08, COMMAND_MASK_OUTGOING_CLIENT }, /* IAS ACE / GetBypassedZoneList */                                    \
            { 0x0501, 0x08, COMMAND_MASK_OUTGOING_SERVER }, /* IAS ACE / GetZoneStatusResponse */                                  \
            { 0x0501, 0x09, COMMAND_MASK_OUTGOING_CLIENT }, /* IAS ACE / GetZoneStatus */                                          \
            { 0x0502, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* IAS WD / StartWarning */                                            \
            { 0x0502, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* IAS WD / Squawk */                                                  \
            { 0x1000, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* ZLL Commissioning / ScanRequest */                                  \
            { 0x1000, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* ZLL Commissioning / ScanResponse */                                 \
            { 0x1000, 0x02, COMMAND_MASK_OUTGOING_CLIENT }, /* ZLL Commissioning / DeviceInformationRequest */                     \
            { 0x1000, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* ZLL Commissioning / DeviceInformationResponse */                    \
            { 0x1000, 0x06, COMMAND_MASK_OUTGOING_CLIENT }, /* ZLL Commissioning / IdentifyRequest */                              \
            { 0x1000, 0x07, COMMAND_MASK_OUTGOING_CLIENT }, /* ZLL Commissioning / ResetToFactoryNewRequest */                     \
            { 0x1000, 0x10, COMMAND_MASK_OUTGOING_CLIENT }, /* ZLL Commissioning / NetworkStartRequest */                          \
            { 0x1000, 0x11, COMMAND_MASK_OUTGOING_SERVER }, /* ZLL Commissioning / NetworkStartResponse */                         \
            { 0x1000, 0x12, COMMAND_MASK_OUTGOING_CLIENT }, /* ZLL Commissioning / NetworkJoinRouterRequest */                     \
            { 0x1000, 0x13, COMMAND_MASK_OUTGOING_SERVER }, /* ZLL Commissioning / NetworkJoinRouterResponse */                    \
            { 0x1000, 0x14, COMMAND_MASK_OUTGOING_CLIENT }, /* ZLL Commissioning / NetworkJoinEndDeviceRequest */                  \
            { 0x1000, 0x15, COMMAND_MASK_OUTGOING_SERVER }, /* ZLL Commissioning / NetworkJoinEndDeviceResponse */                 \
            { 0x1000, 0x16, COMMAND_MASK_OUTGOING_CLIENT }, /* ZLL Commissioning / NetworkUpdateRequest */                         \
            { 0x1000, 0x40,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* ZLL Commissioning / EndpointInformation */         \
            { 0x1000, 0x41, COMMAND_MASK_OUTGOING_CLIENT },                  /* ZLL Commissioning / GetGroupIdentifiersRequest */  \
            { 0x1000, 0x41,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* ZLL Commissioning / GetGroupIdentifiersResponse */ \
            { 0x1000, 0x42, COMMAND_MASK_OUTGOING_CLIENT },                  /* ZLL Commissioning / GetEndpointListRequest */      \
            { 0x1000, 0x42,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* ZLL Commissioning / GetEndpointListResponse */     \
    }
#define EMBER_AF_GENERATED_COMMAND_COUNT (124)

// Command manufacturer codes
#define GENERATED_COMMAND_MANUFACTURER_CODES                                                                                       \
    {                                                                                                                              \
        {                                                                                                                          \
            0x00, 0x00                                                                                                             \
        }                                                                                                                          \
    }
#define GENERATED_COMMAND_MANUFACTURER_CODE_COUNT (0)

// Generated reporting configuration defaults
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS                                                                               \
    {                                                                                                                              \
        { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0006, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },                   \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0008, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0101, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0201, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0400, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0401, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0402, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x0406, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 1, 0x040C, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 2, 0x0006, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
            { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 2, 0x0008, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 },               \
    }
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS_TABLE_SIZE (11)
#endif // SILABS_AF_ENDPOINT_CONFIG
