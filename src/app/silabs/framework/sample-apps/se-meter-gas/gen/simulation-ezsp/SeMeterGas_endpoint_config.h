/**
 *
 *    Copyright (c) 2020 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *
 *    Copyright (c) 2020 Silicon Labs
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef SILABS_AF_ENDPOINT_CONFIG
#define SILABS_AF_ENDPOINT_CONFIG

// Fixed number of defined endpoints
#define FIXED_ENDPOINT_COUNT (1)

// Generated defaults
#if BIGENDIAN_CPU
#define GENERATED_DEFAULTS                                                                                                         \
    {                                                                                                                              \
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 0,Maximum value: Simple Metering,current summation delivered */, 0xFF, 0xFF, 0xFF,   \
            0xFF, 0xFF, 0xFF /* 6,Maximum value: Simple Metering,current summation received */, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,      \
            0xFF /* 12,Maximum value: Simple Metering,current max demand delivered */, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,               \
            0xFF /* 18,Maximum value: Simple Metering,current max demand received */, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,                \
            0xFF /* 24,Maximum value: Simple Metering,dft summation */, 0xFF, 0xFF,                                                \
            0xFF /* 30,Maximum value: Simple Metering,multiplier */, 0xFF, 0xFF,                                                   \
            0xFF /* 33,Maximum value: Simple Metering,divisor */, 0x80, 0x00,                                                      \
            0x01 /* 36,Minimum value: Simple Metering,instantaneous demand */, 0x7F, 0xFF,                                         \
            0xFF /* 39,Maximum value: Simple Metering,instantaneous demand */, 0xFF, 0xFF,                                         \
            0xFF /* 42,Maximum value: Simple Metering,current day consumption delivered */, 0xFF, 0xFF,                            \
            0xFF /* 45,Maximum value: Simple Metering,current day consumption received */, 0xFF, 0xFF,                             \
            0xFF /* 48,Maximum value: Simple Metering,previous day consumption delivered */, 0xFF, 0xFF,                           \
            0xFF /* 51,Maximum value: Simple Metering,previous day consumption received */, 0xFF, 0xFF,                            \
            0xFF /* 54,Maximum value: Simple Metering,current partial profile interval value delivered */, 0xFF, 0xFF,             \
            0xFF /* 57,Maximum value: Simple Metering,current partial profile interval value received */,                          \
    }
#else // ! BIGENDIAN_CPU
#define GENERATED_DEFAULTS                                                                                                         \
    {                                                                                                                              \
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 0,Maximum value: Simple Metering,current summation delivered */, 0xFF, 0xFF, 0xFF,   \
            0xFF, 0xFF, 0xFF /* 6,Maximum value: Simple Metering,current summation received */, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,      \
            0xFF /* 12,Maximum value: Simple Metering,current max demand delivered */, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,               \
            0xFF /* 18,Maximum value: Simple Metering,current max demand received */, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,                \
            0xFF /* 24,Maximum value: Simple Metering,dft summation */, 0xFF, 0xFF,                                                \
            0xFF /* 30,Maximum value: Simple Metering,multiplier */, 0xFF, 0xFF,                                                   \
            0xFF /* 33,Maximum value: Simple Metering,divisor */, 0x01, 0x00,                                                      \
            0x80 /* 36,Minimum value: Simple Metering,instantaneous demand */, 0xFF, 0xFF,                                         \
            0x7F /* 39,Maximum value: Simple Metering,instantaneous demand */, 0xFF, 0xFF,                                         \
            0xFF /* 42,Maximum value: Simple Metering,current day consumption delivered */, 0xFF, 0xFF,                            \
            0xFF /* 45,Maximum value: Simple Metering,current day consumption received */, 0xFF, 0xFF,                             \
            0xFF /* 48,Maximum value: Simple Metering,previous day consumption delivered */, 0xFF, 0xFF,                           \
            0xFF /* 51,Maximum value: Simple Metering,previous day consumption received */, 0xFF, 0xFF,                            \
            0xFF /* 54,Maximum value: Simple Metering,current partial profile interval value delivered */, 0xFF, 0xFF,             \
            0xFF /* 57,Maximum value: Simple Metering,current partial profile interval value received */,                          \
    }
#endif // BIGENDIAN_CPU

// MinMax defaults
#define GENERATED_MIN_MAX_DEFAULTS                                                                                                 \
    {                                                                                                                              \
        { (uint8_t *) 0x03, (uint8_t *) 0x00, (uint8_t *) 0xFF }, { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0xFF },        \
            {                                                                                                                      \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
                (uint8_t *) &(generatedDefaults[0]),                                                                               \
            },                                                                                                                     \
            {                                                                                                                      \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
                (uint8_t *) &(generatedDefaults[6]),                                                                               \
            },                                                                                                                     \
            {                                                                                                                      \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
                (uint8_t *) &(generatedDefaults[12]),                                                                              \
            },                                                                                                                     \
            {                                                                                                                      \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
                (uint8_t *) &(generatedDefaults[18]),                                                                              \
            },                                                                                                                     \
            {                                                                                                                      \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
                (uint8_t *) &(generatedDefaults[24]),                                                                              \
            },                                                                                                                     \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0x173B },                                                        \
            { (uint8_t *) 0x00, (uint8_t *) -100, (uint8_t *) 100 }, { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0xFF },     \
            { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0xFF },                                                              \
            {                                                                                                                      \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
                (uint8_t *) &(generatedDefaults[30]),                                                                              \
            },                                                                                                                     \
            {                                                                                                                      \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
                (uint8_t *) &(generatedDefaults[33]),                                                                              \
            },                                                                                                                     \
            { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0xFF }, { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0xFF },    \
            { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0xFF }, { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0xFF },    \
            {                                                                                                                      \
                NULL,                                                                                                              \
                (uint8_t *) &(generatedDefaults[36]),                                                                              \
                (uint8_t *) &(generatedDefaults[39]),                                                                              \
            },                                                                                                                     \
            {                                                                                                                      \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
                (uint8_t *) &(generatedDefaults[42]),                                                                              \
            },                                                                                                                     \
            {                                                                                                                      \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
                (uint8_t *) &(generatedDefaults[45]),                                                                              \
            },                                                                                                                     \
            {                                                                                                                      \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
                (uint8_t *) &(generatedDefaults[48]),                                                                              \
            },                                                                                                                     \
            {                                                                                                                      \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
                (uint8_t *) &(generatedDefaults[51]),                                                                              \
            },                                                                                                                     \
            {                                                                                                                      \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
                (uint8_t *) &(generatedDefaults[54]),                                                                              \
            },                                                                                                                     \
            {                                                                                                                      \
                NULL,                                                                                                              \
                NULL,                                                                                                              \
                (uint8_t *) &(generatedDefaults[57]),                                                                              \
            },                                                                                                                     \
            { (uint8_t *) 0x18, (uint8_t *) 0x00, (uint8_t *) 0xFF },                                                              \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
    }

// Generated attributes
#define GENERATED_ATTRIBUTES                                                                                                       \
    {                                                                                                                              \
        { 0x0000,                                                                                                                  \
          ZCL_INT8U_ATTRIBUTE_TYPE,                                                                                                \
          1,                                                                                                                       \
          (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_SINGLETON),                                                                     \
          { (uint8_t *) &(minMaxDefaults[0]) } }, /* 0 / Basic / ZCL version*/                                                     \
            { 0x0007,                                                                                                              \
              ZCL_ENUM8_ATTRIBUTE_TYPE,                                                                                            \
              1,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_SINGLETON),                                                                 \
              { (uint8_t *) &(minMaxDefaults[1]) } }, /* 1 / Basic / power source*/                                                \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }                           \
            }, /* 2 / Basic / cluster revision*/                                                                                   \
            {                                                                                                                      \
                0x0000, ZCL_INT48U_ATTRIBUTE_TYPE, 6, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[2]) }               \
            }, /* 3 / Simple Metering / current summation delivered*/                                                              \
            {                                                                                                                      \
                0x0001, ZCL_INT48U_ATTRIBUTE_TYPE, 6, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[3]) }               \
            }, /* 4 / Simple Metering / current summation received*/                                                               \
            {                                                                                                                      \
                0x0002, ZCL_INT48U_ATTRIBUTE_TYPE, 6, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[4]) }               \
            }, /* 5 / Simple Metering / current max demand delivered*/                                                             \
            {                                                                                                                      \
                0x0003, ZCL_INT48U_ATTRIBUTE_TYPE, 6, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[5]) }               \
            }, /* 6 / Simple Metering / current max demand received*/                                                              \
            {                                                                                                                      \
                0x0004, ZCL_INT48U_ATTRIBUTE_TYPE, 6, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[6]) }               \
            }, /* 7 / Simple Metering / dft summation*/                                                                            \
            {                                                                                                                      \
                0x0005, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[7]) }               \
            }, /* 8 / Simple Metering / daily freeze time*/                                                                        \
            {                                                                                                                      \
                0x0006, ZCL_INT8S_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[8]) }                \
            },                                                            /* 9 / Simple Metering / power factor*/                  \
            { 0x0007, ZCL_UTC_TIME_ATTRIBUTE_TYPE, 4, (0x00), { NULL } }, /* 10 / Simple Metering / reading snapshot time*/        \
            {                                                                                                                      \
                0x0008, ZCL_UTC_TIME_ATTRIBUTE_TYPE, 4, (0x00), { NULL }                                                           \
            }, /* 11 / Simple Metering / current max demand delivered time*/                                                       \
            {                                                                                                                      \
                0x0009, ZCL_UTC_TIME_ATTRIBUTE_TYPE, 4, (0x00), { NULL }                                                           \
            }, /* 12 / Simple Metering / current max demand received time*/                                                        \
            {                                                                                                                      \
                0x0200, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[9]) }              \
            }, /* 13 / Simple Metering / status*/                                                                                  \
            {                                                                                                                      \
                0x0300, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[10]) }               \
            }, /* 14 / Simple Metering / unit of measure*/                                                                         \
            {                                                                                                                      \
                0x0301, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[11]) }              \
            }, /* 15 / Simple Metering / multiplier*/                                                                              \
            {                                                                                                                      \
                0x0302, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[12]) }              \
            }, /* 16 / Simple Metering / divisor*/                                                                                 \
            {                                                                                                                      \
                0x0303, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[13]) }             \
            }, /* 17 / Simple Metering / summation formatting*/                                                                    \
            {                                                                                                                      \
                0x0304, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[14]) }             \
            }, /* 18 / Simple Metering / demand formatting*/                                                                       \
            {                                                                                                                      \
                0x0305, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[15]) }             \
            }, /* 19 / Simple Metering / historical consumption formatting*/                                                       \
            {                                                                                                                      \
                0x0306, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[16]) }             \
            }, /* 20 / Simple Metering / metering device type*/                                                                    \
            {                                                                                                                      \
                0x0400, ZCL_INT24S_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[17]) }              \
            }, /* 21 / Simple Metering / instantaneous demand*/                                                                    \
            {                                                                                                                      \
                0x0401, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[18]) }              \
            }, /* 22 / Simple Metering / current day consumption delivered*/                                                       \
            {                                                                                                                      \
                0x0402, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[19]) }              \
            }, /* 23 / Simple Metering / current day consumption received*/                                                        \
            {                                                                                                                      \
                0x0403, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[20]) }              \
            }, /* 24 / Simple Metering / previous day consumption delivered*/                                                      \
            {                                                                                                                      \
                0x0404, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[21]) }              \
            }, /* 25 / Simple Metering / previous day consumption received*/                                                       \
            {                                                                                                                      \
                0x0405, ZCL_UTC_TIME_ATTRIBUTE_TYPE, 4, (0x00), { NULL }                                                           \
            }, /* 26 / Simple Metering / current partial profile interval start time delivered*/                                   \
            {                                                                                                                      \
                0x0406, ZCL_UTC_TIME_ATTRIBUTE_TYPE, 4, (0x00), { NULL }                                                           \
            }, /* 27 / Simple Metering / current partial profile interval start time received*/                                    \
            {                                                                                                                      \
                0x0407, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[22]) }              \
            }, /* 28 / Simple Metering / current partial profile interval value delivered*/                                        \
            {                                                                                                                      \
                0x0408, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[23]) }              \
            }, /* 29 / Simple Metering / current partial profile interval value received*/                                         \
            {                                                                                                                      \
                0x0500, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t *) &(minMaxDefaults[24]) }               \
            }, /* 30 / Simple Metering / max number of periods delivered*/                                                         \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 31 / Simple Metering / cluster revision*/ \
            { 0x0000,                                                                                                              \
              ZCL_ENUM16_ATTRIBUTE_TYPE,                                                                                           \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_CLIENT | ATTRIBUTE_MASK_SINGLETON),                                         \
              { (uint8_t *) &(minMaxDefaults[25]) } }, /* 32 / Key Establishment / key establishment suite (client)*/              \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT | ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }   \
            }, /* 33 / Key Establishment / cluster revision*/                                                                      \
            { 0x0000,                                                                                                              \
              ZCL_ENUM16_ATTRIBUTE_TYPE,                                                                                           \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_SINGLETON),                                                                 \
              { (uint8_t *) &(minMaxDefaults[26]) } }, /* 34 / Key Establishment / key establishment suite (server)*/              \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }                           \
            }, /* 35 / Key Establishment / cluster revision*/                                                                      \
    }

// Cluster function static arrays
#define GENERATED_FUNCTION_ARRAYS                                                                                                  \
    const EmberAfGenericClusterFunction emberAfFuncArraySimpleMeteringClusterServer[] = {                                          \
        (EmberAfGenericClusterFunction) emberAfSimpleMeteringClusterServerInitCallback,                                            \
        (EmberAfGenericClusterFunction) emberAfSimpleMeteringClusterServerDefaultResponseCallback                                  \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayKeyEstablishmentClusterClient[] = {                                        \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterClientAttributeChangedCallback,                              \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterClientDefaultResponseCallback,                               \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterClientMessageSentCallback,                                   \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterClientPreAttributeChangedCallback                            \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayKeyEstablishmentClusterServer[] = {                                        \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterServerInitCallback,                                          \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterServerAttributeChangedCallback,                              \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterServerDefaultResponseCallback,                               \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterServerMessageSentCallback,                                   \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterServerPreAttributeChangedCallback                            \
    };

// Clusters definitions
#define GENERATED_CLUSTERS                                                                                                         \
    {                                                                                                                              \
        {                                                                                                                          \
            0x0000, (EmberAfAttributeMetadata *) &(generatedAttributes[0]), 3, 0, (CLUSTER_MASK_SERVER), NULL,                     \
        },                                                                                                                         \
            {                                                                                                                      \
                0x0702,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[3]),                                                            \
                29,                                                                                                                \
                89,                                                                                                                \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION),                       \
                emberAfFuncArraySimpleMeteringClusterServer,                                                                       \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0800,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[32]),                                                           \
                2,                                                                                                                 \
                0,                                                                                                                 \
                (CLUSTER_MASK_CLIENT | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION | CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION |          \
                 CLUSTER_MASK_MESSAGE_SENT_FUNCTION | CLUSTER_MASK_PRE_ATTRIBUTE_CHANGED_FUNCTION),                                \
                emberAfFuncArrayKeyEstablishmentClusterClient,                                                                     \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0800,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[34]),                                                           \
                2,                                                                                                                 \
                0,                                                                                                                 \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION |                      \
                 CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION | CLUSTER_MASK_MESSAGE_SENT_FUNCTION |                                     \
                 CLUSTER_MASK_PRE_ATTRIBUTE_CHANGED_FUNCTION),                                                                     \
                emberAfFuncArrayKeyEstablishmentClusterServer,                                                                     \
            },                                                                                                                     \
    }

// Endpoint types
#define GENERATED_ENDPOINT_TYPES                                                                                                   \
    {                                                                                                                              \
        { (EmberAfCluster *) &(generatedClusters[0]), 4, 89 },                                                                     \
    }

// Cluster manufacturer codes
#define GENERATED_CLUSTER_MANUFACTURER_CODES                                                                                       \
    {                                                                                                                              \
        {                                                                                                                          \
            0x00, 0x00                                                                                                             \
        }                                                                                                                          \
    }
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT (0)

// Attribute manufacturer codes
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES                                                                                     \
    {                                                                                                                              \
        {                                                                                                                          \
            0x00, 0x00                                                                                                             \
        }                                                                                                                          \
    }
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT (0)

// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (6)
// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (12)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE 89

// Array of endpoints that are supported
#define FIXED_ENDPOINT_ARRAY                                                                                                       \
    {                                                                                                                              \
        1                                                                                                                          \
    }

// Array of profile ids
#define FIXED_PROFILE_IDS                                                                                                          \
    {                                                                                                                              \
        265                                                                                                                        \
    }

// Array of device ids
#define FIXED_DEVICE_IDS                                                                                                           \
    {                                                                                                                              \
        1281                                                                                                                       \
    }

// Array of device versions
#define FIXED_DEVICE_VERSIONS                                                                                                      \
    {                                                                                                                              \
        0                                                                                                                          \
    }

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES                                                                                                       \
    {                                                                                                                              \
        0                                                                                                                          \
    }

// Array of networks supported on each endpoint
#define FIXED_NETWORKS                                                                                                             \
    {                                                                                                                              \
        0                                                                                                                          \
    }

#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS                                                                       \
    void emberAfPluginNetworkFindInitCallback(void);                                                                               \
    void emberAfPluginFragmentationInitCallback(void);

#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS                                                                              \
    emberAfPluginNetworkFindInitCallback();                                                                                        \
    emberAfPluginFragmentationInitCallback();

#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS                                                                   \
    void emberAfPluginFragmentationNcpInitCallback(bool memoryAllocation);                                                         \
    void emberAfPluginAddressTableNcpInitCallback(bool memoryAllocation);                                                          \
    void emberAfPluginNcpConfigurationNcpInitCallback(bool memoryAllocation);

#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS                                                                          \
    emberAfPluginFragmentationNcpInitCallback(memoryAllocation);                                                                   \
    emberAfPluginAddressTableNcpInitCallback(memoryAllocation);                                                                    \
    emberAfPluginNcpConfigurationNcpInitCallback(memoryAllocation);

#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS                                                               \
    void emberAfPluginNetworkFindStackStatusCallback(EmberStatus status);                                                          \
    void emberAfPluginConcentratorStackStatusCallback(EmberStatus status);

#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS                                                                      \
    emberAfPluginNetworkFindStackStatusCallback(status);                                                                           \
    emberAfPluginConcentratorStackStatusCallback(status);

#define EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_DECLARATIONS                                                               \
    void emberAfPluginConcentratorMessageSentCallback(EmberOutgoingMessageType type, uint16_t indexOrDestination,                  \
                                                      EmberApsFrame * apsFrame, EmberStatus status, uint16_t messageLength,        \
                                                      uint8_t * messageContents);

#define EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_CALLS                                                                      \
    emberAfPluginConcentratorMessageSentCallback(type, indexOrDestination, apsFrame, status, messageLength, messageContents);

// Generated data for the command discovery
#define GENERATED_COMMANDS                                                                                                         \
    {                                                                                                                              \
        { 0x0702, 0x00, COMMAND_MASK_INCOMING_SERVER },     /* Simple Metering / GetProfile */                                     \
            { 0x0702, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / RequestMirrorResponse */                          \
            { 0x0702, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / MirrorRemoved */                                  \
            { 0x0702, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / RequestFastPollMode */                            \
            { 0x0702, 0x07, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / StartSampling */                                  \
            { 0x0702, 0x08, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / GetSampledData */                                 \
            { 0x0702, 0x09, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / MirrorReportAttributeResponse */                  \
            { 0x0702, 0x0A, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / ResetLoadLimitCounter */                          \
            { 0x0702, 0x0B, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / ChangeSupply */                                   \
            { 0x0702, 0x0C, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / LocalChangeSupply */                              \
            { 0x0702, 0x0D, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / SetSupplyStatus */                                \
            { 0x0702, 0x0E, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / SetUncontrolledFlowThreshold */                   \
            {                                                                                                                      \
                0x0800, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER                                          \
            }, /* Key Establishment / InitiateKeyEstablishmentRequest */                                                           \
            {                                                                                                                      \
                0x0800, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT                                          \
            }, /* Key Establishment / InitiateKeyEstablishmentResponse */                                                          \
            { 0x0800, 0x01,                                                                                                        \
              COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Key Establishment / EphemeralDataRequest */        \
            { 0x0800, 0x01,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Key Establishment / EphemeralDataResponse */       \
            { 0x0800, 0x02,                                                                                                        \
              COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Key Establishment / ConfirmKeyDataRequest */       \
            { 0x0800, 0x02,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Key Establishment / ConfirmKeyDataResponse */      \
            { 0x0800, 0x03,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Key Establishment / TerminateKeyEstablishment */   \
    }
#define EMBER_AF_GENERATED_COMMAND_COUNT (19)

// Command manufacturer codes
#define GENERATED_COMMAND_MANUFACTURER_CODES                                                                                       \
    {                                                                                                                              \
        {                                                                                                                          \
            0x00, 0x00                                                                                                             \
        }                                                                                                                          \
    }
#define GENERATED_COMMAND_MANUFACTURER_CODE_COUNT (0)

// Generated reporting configuration defaults
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS                                                                               \
    {                                                                                                                              \
    }
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS_TABLE_SIZE (0)
#endif // SILABS_AF_ENDPOINT_CONFIG
