/**
 *
 *    Copyright (c) 2020 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *
 *    Copyright (c) 2020 Silicon Labs
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef SILABS_AF_ENDPOINT_CONFIG
#define SILABS_AF_ENDPOINT_CONFIG

// Fixed number of defined endpoints
#define FIXED_ENDPOINT_COUNT (1)

// MinMax defaults
#define GENERATED_MIN_MAX_DEFAULTS                                                                                                 \
    {                                                                                                                              \
        { (uint8_t *) 0x03, (uint8_t *) 0x00, (uint8_t *) 0xFF }, { (uint8_t *) 0x00, (uint8_t *) 0x00, (uint8_t *) 0xFF },        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
            { (uint8_t *) 0x0000, (uint8_t *) 0x0000, (uint8_t *) 0xFFFF },                                                        \
    }

// Generated attributes
#define GENERATED_ATTRIBUTES                                                                                                       \
    {                                                                                                                              \
        { 0x0000,                                                                                                                  \
          ZCL_INT8U_ATTRIBUTE_TYPE,                                                                                                \
          1,                                                                                                                       \
          (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_SINGLETON),                                                                     \
          { (uint8_t *) &(minMaxDefaults[0]) } }, /* 0 / Basic / ZCL version*/                                                     \
            {                                                                                                                      \
                0x0003, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x00 }                              \
            }, /* 1 / Basic / hardware version*/                                                                                   \
            {                                                                                                                      \
                0x0004, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_SINGLETON), { NULL }                                   \
            }, /* 2 / Basic / manufacturer name*/                                                                                  \
            {                                                                                                                      \
                0x0005, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_SINGLETON), { NULL }                                   \
            }, /* 3 / Basic / model identifier*/                                                                                   \
            { 0x0007,                                                                                                              \
              ZCL_ENUM8_ATTRIBUTE_TYPE,                                                                                            \
              1,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_SINGLETON),                                                                 \
              { (uint8_t *) &(minMaxDefaults[1]) } }, /* 4 / Basic / power source*/                                                \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }                           \
            }, /* 5 / Basic / cluster revision*/                                                                                   \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT | ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }   \
            }, /* 6 / Time / cluster revision*/                                                                                    \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 7 / Price / cluster revision*/                                                                                   \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 8 / Messaging / cluster revision*/                                                                               \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 9 / Tunneling / cluster revision*/                                                                               \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 10 / Calendar / cluster revision*/                                                                               \
            {                                                                                                                      \
                0x0000, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { NULL }                                            \
            }, /* 11 / Device Management / provider id (client)*/                                                                  \
            {                                                                                                                      \
                0x0010, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { NULL }                                            \
            }, /* 12 / Device Management / received provider id (client)*/                                                         \
            {                                                                                                                      \
                0x0100, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 13 / Device Management / tou tariff activation*/                                                                 \
            {                                                                                                                      \
                0x0101, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 14 / Device Management / block tariff activated*/                                                                \
            {                                                                                                                      \
                0x0102, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 15 / Device Management / block tou tariff activated*/                                                            \
            {                                                                                                                      \
                0x0103, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 16 / Device Management / single tariff rate activated*/                                                          \
            {                                                                                                                      \
                0x0104, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 17 / Device Management / asynchronous billing occurred*/                                                         \
            {                                                                                                                      \
                0x0105, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 18 / Device Management / synchronous billing occurred*/                                                          \
            {                                                                                                                      \
                0x0106, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 19 / Device Management / tariff not supported*/                                                                  \
            {                                                                                                                      \
                0x0107, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 20 / Device Management / price cluster not found*/                                                               \
            {                                                                                                                      \
                0x0200, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 21 / Device Management / check meter*/                                                                           \
            {                                                                                                                      \
                0x0201, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 22 / Device Management / low battery*/                                                                           \
            {                                                                                                                      \
                0x0202, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 23 / Device Management / tamper detect*/                                                                         \
            {                                                                                                                      \
                0x0203, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 24 / Device Management / supply status*/                                                                         \
            {                                                                                                                      \
                0x0204, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 25 / Device Management / supply quality*/                                                                        \
            {                                                                                                                      \
                0x0205, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 26 / Device Management / leak detect*/                                                                           \
            {                                                                                                                      \
                0x0206, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 27 / Device Management / service disconnect*/                                                                    \
            {                                                                                                                      \
                0x0207, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 28 / Device Management / reverse flow general*/                                                                  \
            {                                                                                                                      \
                0x0208, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 29 / Device Management / meter cover removed*/                                                                   \
            {                                                                                                                      \
                0x0300, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 30 / Device Management / message confirmation sent*/                                                             \
            {                                                                                                                      \
                0x03C0, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 31 / Device Management / display message received*/                                                              \
            {                                                                                                                      \
                0x03C1, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 32 / Device Management / display message actioned*/                                                              \
            {                                                                                                                      \
                0x03C2, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 33 / Device Management / display message cancelled*/                                                             \
            {                                                                                                                      \
                0x03C3, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 34 / Device Management / display message rejected*/                                                              \
            {                                                                                                                      \
                0x03C4, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 35 / Device Management / cancel message received*/                                                               \
            {                                                                                                                      \
                0x03C5, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 36 / Device Management / cancel message actioned*/                                                               \
            {                                                                                                                      \
                0x03C6, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 37 / Device Management / cancel message cancelled*/                                                              \
            {                                                                                                                      \
                0x03C7, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 38 / Device Management / cancel message rejected*/                                                               \
            {                                                                                                                      \
                0x0400, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 39 / Device Management / low credit*/                                                                            \
            {                                                                                                                      \
                0x0401, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 40 / Device Management / no credit*/                                                                             \
            {                                                                                                                      \
                0x0402, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 41 / Device Management / credit exhausted*/                                                                      \
            {                                                                                                                      \
                0x0403, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 42 / Device Management / emergency credit enabled*/                                                              \
            {                                                                                                                      \
                0x0404, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 43 / Device Management / emergency credit exhausted*/                                                            \
            {                                                                                                                      \
                0x0405, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 44 / Device Management / IHD low credit warning*/                                                                \
            {                                                                                                                      \
                0x0420, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 45 / Device Management / physical attack on the prepay meter*/                                                   \
            {                                                                                                                      \
                0x0421, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 46 / Device Management / electronic attack on the prepay meter*/                                                 \
            {                                                                                                                      \
                0x0422, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 47 / Device Management / discount applied*/                                                                      \
            {                                                                                                                      \
                0x0423, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 48 / Device Management / credit adjustment*/                                                                     \
            {                                                                                                                      \
                0x0424, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 49 / Device Management / credit adjust fail*/                                                                    \
            {                                                                                                                      \
                0x0500, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 50 / Device Management / calendar cluster not found*/                                                            \
            {                                                                                                                      \
                0x0501, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 51 / Device Management / calendar change passive activated*/                                                     \
            {                                                                                                                      \
                0x0502, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 52 / Device Management / calendar change passive updated*/                                                       \
            {                                                                                                                      \
                0x05C0, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 53 / Device Management / publish calendar received*/                                                             \
            {                                                                                                                      \
                0x05C1, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 54 / Device Management / publish calendar actioned*/                                                             \
            {                                                                                                                      \
                0x05C2, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 55 / Device Management / publish calendar cancelled*/                                                            \
            {                                                                                                                      \
                0x05C3, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 56 / Device Management / publish calendar rejected*/                                                             \
            {                                                                                                                      \
                0x05C4, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 57 / Device Management / publish day profile received*/                                                          \
            {                                                                                                                      \
                0x05C5, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 58 / Device Management / publish day profile actioned*/                                                          \
            {                                                                                                                      \
                0x0600, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 59 / Device Management / password 1 change*/                                                                     \
            {                                                                                                                      \
                0x0601, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 60 / Device Management / password 2 change*/                                                                     \
            {                                                                                                                      \
                0x0602, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 61 / Device Management / password 3 change*/                                                                     \
            {                                                                                                                      \
                0x0603, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 62 / Device Management / password 4 change*/                                                                     \
            {                                                                                                                      \
                0x0604, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 63 / Device Management / event log cleared*/                                                                     \
            {                                                                                                                      \
                0x0610, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 64 / Device Management / zigbee aps timeout*/                                                                    \
            {                                                                                                                      \
                0x0611, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 65 / Device Management / zigbee ieee transmission failure over threshold*/                                       \
            {                                                                                                                      \
                0x0612, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 66 / Device Management / zigbee ieee frame check sequence threshold*/                                            \
            {                                                                                                                      \
                0x0613, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 67 / Device Management / error certificate*/                                                                     \
            {                                                                                                                      \
                0x0614, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 68 / Device Management / error signature*/                                                                       \
            {                                                                                                                      \
                0x0700, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 69 / Device Management / tunneling cluster not found*/                                                           \
            {                                                                                                                      \
                0x0701, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 70 / Device Management / unsupported protocol*/                                                                  \
            {                                                                                                                      \
                0x0702, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 71 / Device Management / unsupported protocol*/                                                                  \
            {                                                                                                                      \
                0x07C0, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 72 / Device Management / request tunnel command received*/                                                       \
            {                                                                                                                      \
                0x07C1, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 73 / Device Management / request tunnel command rejected*/                                                       \
            {                                                                                                                      \
                0x07C2, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 74 / Device Management / request tunnel command generated*/                                                      \
            {                                                                                                                      \
                0x07C3, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 75 / Device Management / close tunnel command received*/                                                         \
            {                                                                                                                      \
                0x07C4, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 76 / Device Management / close tunnel command rejected*/                                                         \
            {                                                                                                                      \
                0x07C5, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 77 / Device Management / close tunnel command generated*/                                                        \
            {                                                                                                                      \
                0x0800, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 78 / Device Management / firmware ready for activation*/                                                         \
            {                                                                                                                      \
                0x0801, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 79 / Device Management / firmware activated*/                                                                    \
            {                                                                                                                      \
                0x0802, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 80 / Device Management / firmware activation failure*/                                                           \
            {                                                                                                                      \
                0x0803, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 81 / Device Management / patch ready for activation*/                                                            \
            {                                                                                                                      \
                0x0804, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 82 / Device Management / patch activated*/                                                                       \
            {                                                                                                                      \
                0x0805, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 83 / Device Management / patch failure*/                                                                         \
            {                                                                                                                      \
                0x08C0, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 84 / Device Management / image notify command received*/                                                         \
            {                                                                                                                      \
                0x08C1, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 85 / Device Management / image notify command rejected*/                                                         \
            {                                                                                                                      \
                0x08C2, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x00 }                               \
            }, /* 86 / Device Management / query next image request generated*/                                                    \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t *) 0x0001 }                              \
            }, /* 87 / Device Management / cluster revision*/                                                                      \
            { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t *) 0x0001 } }, /* 88 / Events / cluster revision*/          \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT | ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }   \
            }, /* 89 / Sub-GHz / cluster revision*/                                                                                \
            { 0x0000,                                                                                                              \
              ZCL_ENUM16_ATTRIBUTE_TYPE,                                                                                           \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_CLIENT | ATTRIBUTE_MASK_SINGLETON),                                         \
              { (uint8_t *) &(minMaxDefaults[2]) } }, /* 90 / Key Establishment / key establishment suite (client)*/               \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT | ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }   \
            }, /* 91 / Key Establishment / cluster revision*/                                                                      \
            { 0x0000,                                                                                                              \
              ZCL_ENUM16_ATTRIBUTE_TYPE,                                                                                           \
              2,                                                                                                                   \
              (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_SINGLETON),                                                                 \
              { (uint8_t *) &(minMaxDefaults[3]) } }, /* 92 / Key Establishment / key establishment suite (server)*/               \
            {                                                                                                                      \
                0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t *) 0x0001 }                           \
            }, /* 93 / Key Establishment / cluster revision*/                                                                      \
    }

// Cluster function static arrays
#define GENERATED_FUNCTION_ARRAYS                                                                                                  \
    const EmberAfGenericClusterFunction emberAfFuncArrayPriceClusterClient[]            = { (                                      \
        EmberAfGenericClusterFunction) emberAfPriceClusterClientInitCallback };                                         \
    const EmberAfGenericClusterFunction emberAfFuncArrayMessagingClusterClient[]        = { (                                      \
        EmberAfGenericClusterFunction) emberAfMessagingClusterClientInitCallback };                                         \
    const EmberAfGenericClusterFunction emberAfFuncArrayTunnelingClusterClient[]        = { (                                      \
        EmberAfGenericClusterFunction) emberAfTunnelingClusterClientInitCallback };                                         \
    const EmberAfGenericClusterFunction emberAfFuncArrayDeviceManagementClusterClient[] = { (                                      \
        EmberAfGenericClusterFunction) emberAfDeviceManagementClusterClientInitCallback };                                         \
    const EmberAfGenericClusterFunction emberAfFuncArrayEventsClusterServer[]           = { (                                      \
        EmberAfGenericClusterFunction) emberAfEventsClusterServerInitCallback };                                         \
    const EmberAfGenericClusterFunction emberAfFuncArrayKeyEstablishmentClusterClient[] = {                                        \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterClientAttributeChangedCallback,                              \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterClientDefaultResponseCallback,                               \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterClientMessageSentCallback,                                   \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterClientPreAttributeChangedCallback                            \
    };                                                                                                                             \
    const EmberAfGenericClusterFunction emberAfFuncArrayKeyEstablishmentClusterServer[] = {                                        \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterServerInitCallback,                                          \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterServerAttributeChangedCallback,                              \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterServerDefaultResponseCallback,                               \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterServerMessageSentCallback,                                   \
        (EmberAfGenericClusterFunction) emberAfKeyEstablishmentClusterServerPreAttributeChangedCallback                            \
    };

// Clusters definitions
#define GENERATED_CLUSTERS                                                                                                         \
    {                                                                                                                              \
        {                                                                                                                          \
            0x0000, (EmberAfAttributeMetadata *) &(generatedAttributes[0]), 6, 0, (CLUSTER_MASK_SERVER), NULL,                     \
        },                                                                                                                         \
            {                                                                                                                      \
                0x000A, (EmberAfAttributeMetadata *) &(generatedAttributes[6]), 1, 0, (CLUSTER_MASK_CLIENT), NULL,                 \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0700, (EmberAfAttributeMetadata *) &(generatedAttributes[7]), 1,                                                 \
                2,      (CLUSTER_MASK_CLIENT | CLUSTER_MASK_INIT_FUNCTION),     emberAfFuncArrayPriceClusterClient,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0703, (EmberAfAttributeMetadata *) &(generatedAttributes[8]), 1,                                                 \
                2,      (CLUSTER_MASK_CLIENT | CLUSTER_MASK_INIT_FUNCTION),     emberAfFuncArrayMessagingClusterClient,            \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0704, (EmberAfAttributeMetadata *) &(generatedAttributes[9]), 1,                                                 \
                2,      (CLUSTER_MASK_CLIENT | CLUSTER_MASK_INIT_FUNCTION),     emberAfFuncArrayTunnelingClusterClient,            \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0707, (EmberAfAttributeMetadata *) &(generatedAttributes[10]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0708, (EmberAfAttributeMetadata *) &(generatedAttributes[11]), 77,                                               \
                84,     (CLUSTER_MASK_CLIENT | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayDeviceManagementClusterClient,    \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0709, (EmberAfAttributeMetadata *) &(generatedAttributes[88]), 1,                                                \
                2,      (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION),      emberAfFuncArrayEventsClusterServer,              \
            },                                                                                                                     \
            {                                                                                                                      \
                0x070B, (EmberAfAttributeMetadata *) &(generatedAttributes[89]), 1, 0, (CLUSTER_MASK_CLIENT), NULL,                \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0800,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[90]),                                                           \
                2,                                                                                                                 \
                0,                                                                                                                 \
                (CLUSTER_MASK_CLIENT | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION | CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION |          \
                 CLUSTER_MASK_MESSAGE_SENT_FUNCTION | CLUSTER_MASK_PRE_ATTRIBUTE_CHANGED_FUNCTION),                                \
                emberAfFuncArrayKeyEstablishmentClusterClient,                                                                     \
            },                                                                                                                     \
            {                                                                                                                      \
                0x0800,                                                                                                            \
                (EmberAfAttributeMetadata *) &(generatedAttributes[92]),                                                           \
                2,                                                                                                                 \
                0,                                                                                                                 \
                (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION |                      \
                 CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION | CLUSTER_MASK_MESSAGE_SENT_FUNCTION |                                     \
                 CLUSTER_MASK_PRE_ATTRIBUTE_CHANGED_FUNCTION),                                                                     \
                emberAfFuncArrayKeyEstablishmentClusterServer,                                                                     \
            },                                                                                                                     \
    }

// Endpoint types
#define GENERATED_ENDPOINT_TYPES                                                                                                   \
    {                                                                                                                              \
        { (EmberAfCluster *) &(generatedClusters[0]), 11, 94 },                                                                    \
    }

// Cluster manufacturer codes
#define GENERATED_CLUSTER_MANUFACTURER_CODES                                                                                       \
    {                                                                                                                              \
        {                                                                                                                          \
            0x00, 0x00                                                                                                             \
        }                                                                                                                          \
    }
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT (0)

// Attribute manufacturer codes
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES                                                                                     \
    {                                                                                                                              \
        {                                                                                                                          \
            0x00, 0x00                                                                                                             \
        }                                                                                                                          \
    }
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT (0)

// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (33)
// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (83)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE 94

// Array of endpoints that are supported
#define FIXED_ENDPOINT_ARRAY                                                                                                       \
    {                                                                                                                              \
        1                                                                                                                          \
    }

// Array of profile ids
#define FIXED_PROFILE_IDS                                                                                                          \
    {                                                                                                                              \
        265                                                                                                                        \
    }

// Array of device ids
#define FIXED_DEVICE_IDS                                                                                                           \
    {                                                                                                                              \
        1282                                                                                                                       \
    }

// Array of device versions
#define FIXED_DEVICE_VERSIONS                                                                                                      \
    {                                                                                                                              \
        0                                                                                                                          \
    }

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES                                                                                                       \
    {                                                                                                                              \
        0                                                                                                                          \
    }

// Array of networks supported on each endpoint
#define FIXED_NETWORKS                                                                                                             \
    {                                                                                                                              \
        0                                                                                                                          \
    }

#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS                                                                       \
    void emberAfPluginNetworkFindInitCallback(void);                                                                               \
    void emberAfPluginFragmentationInitCallback(void);                                                                             \
    void emberAfPluginSimpleClockInitCallback(void);                                                                               \
    void emberAfPluginGbcsGasMeterInitCallback(void);                                                                              \
    void emberAfPluginCalendarCommonInitCallback(void);                                                                            \
    void emberAfPluginGbcsDeviceLogInitCallback(void);                                                                             \
    void emberAfPluginEsiManagementInitCallback(void);

#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS                                                                              \
    emberAfPluginNetworkFindInitCallback();                                                                                        \
    emberAfPluginFragmentationInitCallback();                                                                                      \
    emberAfPluginSimpleClockInitCallback();                                                                                        \
    emberAfPluginGbcsGasMeterInitCallback();                                                                                       \
    emberAfPluginCalendarCommonInitCallback();                                                                                     \
    emberAfPluginGbcsDeviceLogInitCallback();                                                                                      \
    emberAfPluginEsiManagementInitCallback();

#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS                                                                   \
    void emberAfPluginFragmentationNcpInitCallback(bool memoryAllocation);                                                         \
    void emberAfPluginAddressTableNcpInitCallback(bool memoryAllocation);                                                          \
    void emberAfPluginNcpConfigurationNcpInitCallback(bool memoryAllocation);

#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS                                                                          \
    emberAfPluginFragmentationNcpInitCallback(memoryAllocation);                                                                   \
    emberAfPluginAddressTableNcpInitCallback(memoryAllocation);                                                                    \
    emberAfPluginNcpConfigurationNcpInitCallback(memoryAllocation);

#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS                                                               \
    void emberAfPluginNetworkFindStackStatusCallback(EmberStatus status);                                                          \
    void emberAfPluginEndDeviceSupportStackStatusCallback(EmberStatus status);                                                     \
    void emberAfPluginTunnelingClientStackStatusCallback(EmberStatus status);

#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS                                                                      \
    emberAfPluginNetworkFindStackStatusCallback(status);                                                                           \
    emberAfPluginEndDeviceSupportStackStatusCallback(status);                                                                      \
    emberAfPluginTunnelingClientStackStatusCallback(status);

// Generated data for the command discovery
#define GENERATED_COMMANDS                                                                                                         \
    {                                                                                                                              \
        { 0x0700, 0x00, COMMAND_MASK_OUTGOING_CLIENT },     /* Price / GetCurrentPrice */                                          \
            { 0x0700, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishPrice */                                             \
            { 0x0700, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishBlockPeriod */                                       \
            { 0x0700, 0x02, COMMAND_MASK_OUTGOING_CLIENT }, /* Price / PriceAcknowledgement */                                     \
            { 0x0700, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishConversionFactor */                                  \
            { 0x0700, 0x03, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishCalorificValue */                                    \
            { 0x0700, 0x04, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishTariffInformation */                                 \
            { 0x0700, 0x06, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishBlockThresholds */                                   \
            { 0x0700, 0x07, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishCO2Value */                                          \
            { 0x0700, 0x08, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishTierLabels */                                        \
            { 0x0700, 0x09, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishBillingPeriod */                                     \
            { 0x0700, 0x0A, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishConsolidatedBill */                                  \
            { 0x0700, 0x0B, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishCppEvent */                                          \
            { 0x0700, 0x0C, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishCreditPayment */                                     \
            { 0x0700, 0x0D, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishCurrencyConversion */                                \
            { 0x0700, 0x0E, COMMAND_MASK_INCOMING_CLIENT }, /* Price / CancelTariff */                                             \
            { 0x0702, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / RequestMirrorResponse */                          \
            { 0x0702, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / MirrorRemoved */                                  \
            { 0x0703, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* Messaging / GetLastMessage */                                       \
            { 0x0703, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* Messaging / DisplayMessage */                                       \
            { 0x0703, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* Messaging / MessageConfirmation */                                  \
            { 0x0703, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* Messaging / CancelMessage */                                        \
            { 0x0704, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* Tunneling / RequestTunnel */                                        \
            { 0x0704, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* Tunneling / RequestTunnelResponse */                                \
            { 0x0704, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* Tunneling / CloseTunnel */                                          \
            { 0x0704, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* Tunneling / TransferDataServerToClient */                           \
            { 0x0704, 0x02, COMMAND_MASK_OUTGOING_CLIENT }, /* Tunneling / TransferDataClientToServer */                           \
            { 0x0704, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* Tunneling / TransferDataErrorServerToClient */                      \
            { 0x0704, 0x03, COMMAND_MASK_OUTGOING_CLIENT }, /* Tunneling / TransferDataErrorClientToServer */                      \
            { 0x0704, 0x06, COMMAND_MASK_INCOMING_CLIENT }, /* Tunneling / TunnelClosureNotification */                            \
            { 0x0707, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* Calendar / PublishCalendar */                                       \
            { 0x0707, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* Calendar / PublishDayProfile */                                     \
            { 0x0707, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* Calendar / PublishWeekProfile */                                    \
            { 0x0707, 0x03, COMMAND_MASK_INCOMING_CLIENT }, /* Calendar / PublishSeasons */                                        \
            { 0x0707, 0x04, COMMAND_MASK_OUTGOING_CLIENT }, /* Calendar / GetSpecialDays */                                        \
            { 0x0707, 0x04, COMMAND_MASK_INCOMING_CLIENT }, /* Calendar / PublishSpecialDays */                                    \
            { 0x0707, 0x05, COMMAND_MASK_OUTGOING_CLIENT }, /* Calendar / GetCalendarCancellation */                               \
            { 0x0707, 0x05, COMMAND_MASK_INCOMING_CLIENT }, /* Calendar / CancelCalendar */                                        \
            { 0x0708, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* Device Management / PublishChangeOfTenancy */                       \
            { 0x0708, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* Device Management / PublishChangeOfSupplier */                      \
            { 0x0708, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* Device Management / RequestNewPasswordResponse */                   \
            { 0x0708, 0x03, COMMAND_MASK_INCOMING_CLIENT }, /* Device Management / UpdateSiteId */                                 \
            { 0x0708, 0x04, COMMAND_MASK_INCOMING_CLIENT }, /* Device Management / SetEventConfiguration */                        \
            { 0x0708, 0x05, COMMAND_MASK_INCOMING_CLIENT }, /* Device Management / GetEventConfiguration */                        \
            { 0x0708, 0x06, COMMAND_MASK_INCOMING_CLIENT }, /* Device Management / UpdateCIN */                                    \
            { 0x0709, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Events / GetEventLog */                                             \
            { 0x0709, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Events / ClearEventLogRequest */                                    \
            { 0x070B, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* Sub-GHz / GetSuspendZclMessagesStatus */                            \
            { 0x070B, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* Sub-GHz / SuspendZclMessages */                                     \
            {                                                                                                                      \
                0x0800, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER                                          \
            }, /* Key Establishment / InitiateKeyEstablishmentRequest */                                                           \
            {                                                                                                                      \
                0x0800, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT                                          \
            }, /* Key Establishment / InitiateKeyEstablishmentResponse */                                                          \
            { 0x0800, 0x01,                                                                                                        \
              COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Key Establishment / EphemeralDataRequest */        \
            { 0x0800, 0x01,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Key Establishment / EphemeralDataResponse */       \
            { 0x0800, 0x02,                                                                                                        \
              COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Key Establishment / ConfirmKeyDataRequest */       \
            { 0x0800, 0x02,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Key Establishment / ConfirmKeyDataResponse */      \
            { 0x0800, 0x03,                                                                                                        \
              COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Key Establishment / TerminateKeyEstablishment */   \
    }
#define EMBER_AF_GENERATED_COMMAND_COUNT (56)

// Command manufacturer codes
#define GENERATED_COMMAND_MANUFACTURER_CODES                                                                                       \
    {                                                                                                                              \
        {                                                                                                                          \
            0x00, 0x00                                                                                                             \
        }                                                                                                                          \
    }
#define GENERATED_COMMAND_MANUFACTURER_CODE_COUNT (0)

// Generated reporting configuration defaults
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS                                                                               \
    {                                                                                                                              \
    }
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS_TABLE_SIZE (0)
#endif // SILABS_AF_ENDPOINT_CONFIG
