/**
 *
 *    Copyright (c) 2020 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *
 *    Copyright (c) 2020 Silicon Labs
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// This file contains the tokens for attributes stored in flash

// Identifier tags for tokens
// Creator for attribute: ZCL version, endpoint: 1
#define CREATOR_VERSION_1 0xB000
// Creator for attribute: application version, endpoint: 1
#define CREATOR_APPLICATION_VERSION_1 0xB001
// Creator for attribute: stack version, endpoint: 1
#define CREATOR_STACK_VERSION_1 0xB002
// Creator for attribute: hardware version, singleton.
#define CREATOR_HW_VERSION_SINGLETON 0xB003
// Creator for attribute: manufacturer name, singleton.
#define CREATOR_MANUFACTURER_NAME_SINGLETON 0xB004
// Creator for attribute: model identifier, singleton.
#define CREATOR_MODEL_IDENTIFIER_SINGLETON 0xB005
// Creator for attribute: date code, singleton.
#define CREATOR_DATE_CODE_SINGLETON 0xB006
// Creator for attribute: ZCL version, endpoint: 2
#define CREATOR_VERSION_2 0xB007
// Creator for attribute: application version, endpoint: 2
#define CREATOR_APPLICATION_VERSION_2 0xB008
// Creator for attribute: stack version, endpoint: 2
#define CREATOR_STACK_VERSION_2 0xB009
// Creator for attribute: ZCL version, endpoint: 3
#define CREATOR_VERSION_3 0xB00A
// Creator for attribute: application version, endpoint: 3
#define CREATOR_APPLICATION_VERSION_3 0xB00B
// Creator for attribute: stack version, endpoint: 3
#define CREATOR_STACK_VERSION_3 0xB00C

// Types for the tokens
#ifdef DEFINETYPES
typedef uint8_t tokType_version;
typedef uint8_t tokType_application_version;
typedef uint8_t tokType_stack_version;
typedef uint8_t tokType_hw_version;
typedef uint8_t tokType_manufacturer_name[33];
typedef uint8_t tokType_model_identifier[33];
typedef uint8_t tokType_date_code[17];
#endif // DEFINETYPES

// Actual token definitions
#ifdef DEFINETOKENS
DEFINE_BASIC_TOKEN(VERSION_1, tokType_version, 0x02)
DEFINE_BASIC_TOKEN(APPLICATION_VERSION_1, tokType_application_version, 0x00)
DEFINE_BASIC_TOKEN(STACK_VERSION_1, tokType_stack_version, 0x00)
DEFINE_BASIC_TOKEN(HW_VERSION_SINGLETON, tokType_hw_version, 0x00)
DEFINE_BASIC_TOKEN(MANUFACTURER_NAME_SINGLETON, tokType_manufacturer_name,
                   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 })
DEFINE_BASIC_TOKEN(MODEL_IDENTIFIER_SINGLETON, tokType_model_identifier,
                   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 })
DEFINE_BASIC_TOKEN(DATE_CODE_SINGLETON, tokType_date_code,
                   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 })
DEFINE_BASIC_TOKEN(VERSION_2, tokType_version, 0x02)
DEFINE_BASIC_TOKEN(APPLICATION_VERSION_2, tokType_application_version, 0x00)
DEFINE_BASIC_TOKEN(STACK_VERSION_2, tokType_stack_version, 0x00)
DEFINE_BASIC_TOKEN(VERSION_3, tokType_version, 0x02)
DEFINE_BASIC_TOKEN(APPLICATION_VERSION_3, tokType_application_version, 0x00)
DEFINE_BASIC_TOKEN(STACK_VERSION_3, tokType_stack_version, 0x00)
#endif // DEFINETOKENS

// Macro snippet that loads all the attributes from tokens
#define GENERATED_TOKEN_LOADER(endpoint)                                                                                           \
    do                                                                                                                             \
    {                                                                                                                              \
        uint8_t ptr[33];                                                                                                           \
        uint8_t curNetwork = emberGetCurrentNetwork();                                                                             \
        uint8_t epNetwork;                                                                                                         \
        halCommonGetToken((tokType_hw_version *) ptr, TOKEN_HW_VERSION_SINGLETON);                                                 \
        emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_HW_VERSION_ATTRIBUTE_ID, (uint8_t *) ptr,                         \
                                    ZCL_INT8U_ATTRIBUTE_TYPE);                                                                     \
        halCommonGetToken((tokType_manufacturer_name *) ptr, TOKEN_MANUFACTURER_NAME_SINGLETON);                                   \
        emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_MANUFACTURER_NAME_ATTRIBUTE_ID, (uint8_t *) ptr,                  \
                                    ZCL_CHAR_STRING_ATTRIBUTE_TYPE);                                                               \
        halCommonGetToken((tokType_model_identifier *) ptr, TOKEN_MODEL_IDENTIFIER_SINGLETON);                                     \
        emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_MODEL_IDENTIFIER_ATTRIBUTE_ID, (uint8_t *) ptr,                   \
                                    ZCL_CHAR_STRING_ATTRIBUTE_TYPE);                                                               \
        halCommonGetToken((tokType_date_code *) ptr, TOKEN_DATE_CODE_SINGLETON);                                                   \
        emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_DATE_CODE_ATTRIBUTE_ID, (uint8_t *) ptr,                          \
                                    ZCL_CHAR_STRING_ATTRIBUTE_TYPE);                                                               \
        epNetwork = emberAfNetworkIndexFromEndpoint(1);                                                                            \
        if ((endpoint) == 1 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork))                                \
        {                                                                                                                          \
            halCommonGetToken((tokType_version *) ptr, TOKEN_VERSION_1);                                                           \
            emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_VERSION_ATTRIBUTE_ID, (uint8_t *) ptr,                        \
                                        ZCL_INT8U_ATTRIBUTE_TYPE);                                                                 \
            halCommonGetToken((tokType_application_version *) ptr, TOKEN_APPLICATION_VERSION_1);                                   \
            emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_APPLICATION_VERSION_ATTRIBUTE_ID, (uint8_t *) ptr,            \
                                        ZCL_INT8U_ATTRIBUTE_TYPE);                                                                 \
            halCommonGetToken((tokType_stack_version *) ptr, TOKEN_STACK_VERSION_1);                                               \
            emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_STACK_VERSION_ATTRIBUTE_ID, (uint8_t *) ptr,                  \
                                        ZCL_INT8U_ATTRIBUTE_TYPE);                                                                 \
        }                                                                                                                          \
        epNetwork = emberAfNetworkIndexFromEndpoint(2);                                                                            \
        if ((endpoint) == 2 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork))                                \
        {                                                                                                                          \
            halCommonGetToken((tokType_version *) ptr, TOKEN_VERSION_2);                                                           \
            emberAfWriteServerAttribute(2, ZCL_BASIC_CLUSTER_ID, ZCL_VERSION_ATTRIBUTE_ID, (uint8_t *) ptr,                        \
                                        ZCL_INT8U_ATTRIBUTE_TYPE);                                                                 \
            halCommonGetToken((tokType_application_version *) ptr, TOKEN_APPLICATION_VERSION_2);                                   \
            emberAfWriteServerAttribute(2, ZCL_BASIC_CLUSTER_ID, ZCL_APPLICATION_VERSION_ATTRIBUTE_ID, (uint8_t *) ptr,            \
                                        ZCL_INT8U_ATTRIBUTE_TYPE);                                                                 \
            halCommonGetToken((tokType_stack_version *) ptr, TOKEN_STACK_VERSION_2);                                               \
            emberAfWriteServerAttribute(2, ZCL_BASIC_CLUSTER_ID, ZCL_STACK_VERSION_ATTRIBUTE_ID, (uint8_t *) ptr,                  \
                                        ZCL_INT8U_ATTRIBUTE_TYPE);                                                                 \
        }                                                                                                                          \
        epNetwork = emberAfNetworkIndexFromEndpoint(3);                                                                            \
        if ((endpoint) == 3 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork))                                \
        {                                                                                                                          \
            halCommonGetToken((tokType_version *) ptr, TOKEN_VERSION_3);                                                           \
            emberAfWriteServerAttribute(3, ZCL_BASIC_CLUSTER_ID, ZCL_VERSION_ATTRIBUTE_ID, (uint8_t *) ptr,                        \
                                        ZCL_INT8U_ATTRIBUTE_TYPE);                                                                 \
            halCommonGetToken((tokType_application_version *) ptr, TOKEN_APPLICATION_VERSION_3);                                   \
            emberAfWriteServerAttribute(3, ZCL_BASIC_CLUSTER_ID, ZCL_APPLICATION_VERSION_ATTRIBUTE_ID, (uint8_t *) ptr,            \
                                        ZCL_INT8U_ATTRIBUTE_TYPE);                                                                 \
            halCommonGetToken((tokType_stack_version *) ptr, TOKEN_STACK_VERSION_3);                                               \
            emberAfWriteServerAttribute(3, ZCL_BASIC_CLUSTER_ID, ZCL_STACK_VERSION_ATTRIBUTE_ID, (uint8_t *) ptr,                  \
                                        ZCL_INT8U_ATTRIBUTE_TYPE);                                                                 \
        }                                                                                                                          \
    } while (false)

// Macro snippet that saves the attribute to token
#define GENERATED_TOKEN_SAVER                                                                                                      \
    do                                                                                                                             \
    {                                                                                                                              \
        uint8_t allZeroData[33];                                                                                                   \
        MEMSET(allZeroData, 0, 33);                                                                                                \
        if (data == NULL)                                                                                                          \
        {                                                                                                                          \
            data = allZeroData;                                                                                                    \
        }                                                                                                                          \
        if (clusterId == 0x00)                                                                                                     \
        {                                                                                                                          \
            if (metadata->attributeId == 0x0003 && !emberAfAttributeIsClient(metadata))                                            \
            {                                                                                                                      \
                halCommonSetToken(TOKEN_HW_VERSION_SINGLETON, data);                                                               \
            }                                                                                                                      \
            if (metadata->attributeId == 0x0004 && !emberAfAttributeIsClient(metadata))                                            \
            {                                                                                                                      \
                halCommonSetToken(TOKEN_MANUFACTURER_NAME_SINGLETON, data);                                                        \
            }                                                                                                                      \
            if (metadata->attributeId == 0x0005 && !emberAfAttributeIsClient(metadata))                                            \
            {                                                                                                                      \
                halCommonSetToken(TOKEN_MODEL_IDENTIFIER_SINGLETON, data);                                                         \
            }                                                                                                                      \
            if (metadata->attributeId == 0x0006 && !emberAfAttributeIsClient(metadata))                                            \
            {                                                                                                                      \
                halCommonSetToken(TOKEN_DATE_CODE_SINGLETON, data);                                                                \
            }                                                                                                                      \
        }                                                                                                                          \
        if (endpoint == 1)                                                                                                         \
        {                                                                                                                          \
            if (clusterId == 0x00)                                                                                                 \
            {                                                                                                                      \
                if (metadata->attributeId == 0x0000 && !emberAfAttributeIsClient(metadata))                                        \
                {                                                                                                                  \
                    halCommonSetToken(TOKEN_VERSION_1, data);                                                                      \
                }                                                                                                                  \
                if (metadata->attributeId == 0x0001 && !emberAfAttributeIsClient(metadata))                                        \
                {                                                                                                                  \
                    halCommonSetToken(TOKEN_APPLICATION_VERSION_1, data);                                                          \
                }                                                                                                                  \
                if (metadata->attributeId == 0x0002 && !emberAfAttributeIsClient(metadata))                                        \
                {                                                                                                                  \
                    halCommonSetToken(TOKEN_STACK_VERSION_1, data);                                                                \
                }                                                                                                                  \
            }                                                                                                                      \
        }                                                                                                                          \
        else if (endpoint == 2)                                                                                                    \
        {                                                                                                                          \
            if (clusterId == 0x00)                                                                                                 \
            {                                                                                                                      \
                if (metadata->attributeId == 0x0000 && !emberAfAttributeIsClient(metadata))                                        \
                {                                                                                                                  \
                    halCommonSetToken(TOKEN_VERSION_2, data);                                                                      \
                }                                                                                                                  \
                if (metadata->attributeId == 0x0001 && !emberAfAttributeIsClient(metadata))                                        \
                {                                                                                                                  \
                    halCommonSetToken(TOKEN_APPLICATION_VERSION_2, data);                                                          \
                }                                                                                                                  \
                if (metadata->attributeId == 0x0002 && !emberAfAttributeIsClient(metadata))                                        \
                {                                                                                                                  \
                    halCommonSetToken(TOKEN_STACK_VERSION_2, data);                                                                \
                }                                                                                                                  \
            }                                                                                                                      \
        }                                                                                                                          \
        else if (endpoint == 3)                                                                                                    \
        {                                                                                                                          \
            if (clusterId == 0x00)                                                                                                 \
            {                                                                                                                      \
                if (metadata->attributeId == 0x0000 && !emberAfAttributeIsClient(metadata))                                        \
                {                                                                                                                  \
                    halCommonSetToken(TOKEN_VERSION_3, data);                                                                      \
                }                                                                                                                  \
                if (metadata->attributeId == 0x0001 && !emberAfAttributeIsClient(metadata))                                        \
                {                                                                                                                  \
                    halCommonSetToken(TOKEN_APPLICATION_VERSION_3, data);                                                          \
                }                                                                                                                  \
                if (metadata->attributeId == 0x0002 && !emberAfAttributeIsClient(metadata))                                        \
                {                                                                                                                  \
                    halCommonSetToken(TOKEN_STACK_VERSION_3, data);                                                                \
                }                                                                                                                  \
            }                                                                                                                      \
        }                                                                                                                          \
    } while (false)
