/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

/**
 *  @file
 *    This file contains declarations for accessors around clusters attributes.
 */

#pragma once

#include <app/util/af-types.h>
#include <lib/support/Span.h>

namespace chip {
namespace app {
namespace Clusters {

namespace PowerConfiguration {
namespace Attributes {
EmberAfStatus GetMainsVoltage(chip::EndpointId endpoint, uint16_t * mainsVoltage); // int16u
EmberAfStatus SetMainsVoltage(chip::EndpointId endpoint, uint16_t mainsVoltage);
EmberAfStatus GetMainsFrequency(chip::EndpointId endpoint, uint8_t * mainsFrequency); // int8u
EmberAfStatus SetMainsFrequency(chip::EndpointId endpoint, uint8_t mainsFrequency);
EmberAfStatus GetMainsAlarmMask(chip::EndpointId endpoint, uint8_t * mainsAlarmMask); // bitmap8
EmberAfStatus SetMainsAlarmMask(chip::EndpointId endpoint, uint8_t mainsAlarmMask);
EmberAfStatus GetMainsVoltageMinThreshold(chip::EndpointId endpoint, uint16_t * mainsVoltageMinThreshold); // int16u
EmberAfStatus SetMainsVoltageMinThreshold(chip::EndpointId endpoint, uint16_t mainsVoltageMinThreshold);
EmberAfStatus GetMainsVoltageMaxThreshold(chip::EndpointId endpoint, uint16_t * mainsVoltageMaxThreshold); // int16u
EmberAfStatus SetMainsVoltageMaxThreshold(chip::EndpointId endpoint, uint16_t mainsVoltageMaxThreshold);
EmberAfStatus GetMainsVoltageDwellTrip(chip::EndpointId endpoint, uint16_t * mainsVoltageDwellTrip); // int16u
EmberAfStatus SetMainsVoltageDwellTrip(chip::EndpointId endpoint, uint16_t mainsVoltageDwellTrip);
EmberAfStatus GetBatteryVoltage(chip::EndpointId endpoint, uint8_t * batteryVoltage); // int8u
EmberAfStatus SetBatteryVoltage(chip::EndpointId endpoint, uint8_t batteryVoltage);
EmberAfStatus GetBatteryPercentageRemaining(chip::EndpointId endpoint, uint8_t * batteryPercentageRemaining); // int8u
EmberAfStatus SetBatteryPercentageRemaining(chip::EndpointId endpoint, uint8_t batteryPercentageRemaining);
EmberAfStatus GetBatterySize(chip::EndpointId endpoint, uint8_t * batterySize); // enum8
EmberAfStatus SetBatterySize(chip::EndpointId endpoint, uint8_t batterySize);
EmberAfStatus GetBatteryAhrRating(chip::EndpointId endpoint, uint16_t * batteryAhrRating); // int16u
EmberAfStatus SetBatteryAhrRating(chip::EndpointId endpoint, uint16_t batteryAhrRating);
EmberAfStatus GetBatteryQuantity(chip::EndpointId endpoint, uint8_t * batteryQuantity); // int8u
EmberAfStatus SetBatteryQuantity(chip::EndpointId endpoint, uint8_t batteryQuantity);
EmberAfStatus GetBatteryRatedVoltage(chip::EndpointId endpoint, uint8_t * batteryRatedVoltage); // int8u
EmberAfStatus SetBatteryRatedVoltage(chip::EndpointId endpoint, uint8_t batteryRatedVoltage);
EmberAfStatus GetBatteryAlarmMask(chip::EndpointId endpoint, uint8_t * batteryAlarmMask); // bitmap8
EmberAfStatus SetBatteryAlarmMask(chip::EndpointId endpoint, uint8_t batteryAlarmMask);
EmberAfStatus GetBatteryVoltageMinThreshold(chip::EndpointId endpoint, uint8_t * batteryVoltageMinThreshold); // int8u
EmberAfStatus SetBatteryVoltageMinThreshold(chip::EndpointId endpoint, uint8_t batteryVoltageMinThreshold);
EmberAfStatus GetBatteryVoltageThreshold1(chip::EndpointId endpoint, uint8_t * batteryVoltageThreshold1); // int8u
EmberAfStatus SetBatteryVoltageThreshold1(chip::EndpointId endpoint, uint8_t batteryVoltageThreshold1);
EmberAfStatus GetBatteryVoltageThreshold2(chip::EndpointId endpoint, uint8_t * batteryVoltageThreshold2); // int8u
EmberAfStatus SetBatteryVoltageThreshold2(chip::EndpointId endpoint, uint8_t batteryVoltageThreshold2);
EmberAfStatus GetBatteryVoltageThreshold3(chip::EndpointId endpoint, uint8_t * batteryVoltageThreshold3); // int8u
EmberAfStatus SetBatteryVoltageThreshold3(chip::EndpointId endpoint, uint8_t batteryVoltageThreshold3);
EmberAfStatus GetBatteryPercentageMinThreshold(chip::EndpointId endpoint, uint8_t * batteryPercentageMinThreshold); // int8u
EmberAfStatus SetBatteryPercentageMinThreshold(chip::EndpointId endpoint, uint8_t batteryPercentageMinThreshold);
EmberAfStatus GetBatteryPercentageThreshold1(chip::EndpointId endpoint, uint8_t * batteryPercentageThreshold1); // int8u
EmberAfStatus SetBatteryPercentageThreshold1(chip::EndpointId endpoint, uint8_t batteryPercentageThreshold1);
EmberAfStatus GetBatteryPercentageThreshold2(chip::EndpointId endpoint, uint8_t * batteryPercentageThreshold2); // int8u
EmberAfStatus SetBatteryPercentageThreshold2(chip::EndpointId endpoint, uint8_t batteryPercentageThreshold2);
EmberAfStatus GetBatteryPercentageThreshold3(chip::EndpointId endpoint, uint8_t * batteryPercentageThreshold3); // int8u
EmberAfStatus SetBatteryPercentageThreshold3(chip::EndpointId endpoint, uint8_t batteryPercentageThreshold3);
EmberAfStatus GetBatteryAlarmState(chip::EndpointId endpoint, uint32_t * batteryAlarmState); // bitmap32
EmberAfStatus SetBatteryAlarmState(chip::EndpointId endpoint, uint32_t batteryAlarmState);
EmberAfStatus GetBattery2Voltage(chip::EndpointId endpoint, uint8_t * battery2Voltage); // int8u
EmberAfStatus SetBattery2Voltage(chip::EndpointId endpoint, uint8_t battery2Voltage);
EmberAfStatus GetBattery2PercentageRemaining(chip::EndpointId endpoint, uint8_t * battery2PercentageRemaining); // int8u
EmberAfStatus SetBattery2PercentageRemaining(chip::EndpointId endpoint, uint8_t battery2PercentageRemaining);
EmberAfStatus GetBattery2Size(chip::EndpointId endpoint, uint8_t * battery2Size); // enum8
EmberAfStatus SetBattery2Size(chip::EndpointId endpoint, uint8_t battery2Size);
EmberAfStatus GetBattery2AhrRating(chip::EndpointId endpoint, uint16_t * battery2AhrRating); // int16u
EmberAfStatus SetBattery2AhrRating(chip::EndpointId endpoint, uint16_t battery2AhrRating);
EmberAfStatus GetBattery2Quantity(chip::EndpointId endpoint, uint8_t * battery2Quantity); // int8u
EmberAfStatus SetBattery2Quantity(chip::EndpointId endpoint, uint8_t battery2Quantity);
EmberAfStatus GetBattery2RatedVoltage(chip::EndpointId endpoint, uint8_t * battery2RatedVoltage); // int8u
EmberAfStatus SetBattery2RatedVoltage(chip::EndpointId endpoint, uint8_t battery2RatedVoltage);
EmberAfStatus GetBattery2AlarmMask(chip::EndpointId endpoint, uint8_t * battery2AlarmMask); // bitmap8
EmberAfStatus SetBattery2AlarmMask(chip::EndpointId endpoint, uint8_t battery2AlarmMask);
EmberAfStatus GetBattery2VoltageMinThreshold(chip::EndpointId endpoint, uint8_t * battery2VoltageMinThreshold); // int8u
EmberAfStatus SetBattery2VoltageMinThreshold(chip::EndpointId endpoint, uint8_t battery2VoltageMinThreshold);
EmberAfStatus GetBattery2VoltageThreshold1(chip::EndpointId endpoint, uint8_t * battery2VoltageThreshold1); // int8u
EmberAfStatus SetBattery2VoltageThreshold1(chip::EndpointId endpoint, uint8_t battery2VoltageThreshold1);
EmberAfStatus GetBattery2VoltageThreshold2(chip::EndpointId endpoint, uint8_t * battery2VoltageThreshold2); // int8u
EmberAfStatus SetBattery2VoltageThreshold2(chip::EndpointId endpoint, uint8_t battery2VoltageThreshold2);
EmberAfStatus GetBattery2VoltageThreshold3(chip::EndpointId endpoint, uint8_t * battery2VoltageThreshold3); // int8u
EmberAfStatus SetBattery2VoltageThreshold3(chip::EndpointId endpoint, uint8_t battery2VoltageThreshold3);
EmberAfStatus GetBattery2PercentageMinThreshold(chip::EndpointId endpoint, uint8_t * battery2PercentageMinThreshold); // int8u
EmberAfStatus SetBattery2PercentageMinThreshold(chip::EndpointId endpoint, uint8_t battery2PercentageMinThreshold);
EmberAfStatus GetBattery2PercentageThreshold1(chip::EndpointId endpoint, uint8_t * battery2PercentageThreshold1); // int8u
EmberAfStatus SetBattery2PercentageThreshold1(chip::EndpointId endpoint, uint8_t battery2PercentageThreshold1);
EmberAfStatus GetBattery2PercentageThreshold2(chip::EndpointId endpoint, uint8_t * battery2PercentageThreshold2); // int8u
EmberAfStatus SetBattery2PercentageThreshold2(chip::EndpointId endpoint, uint8_t battery2PercentageThreshold2);
EmberAfStatus GetBattery2PercentageThreshold3(chip::EndpointId endpoint, uint8_t * battery2PercentageThreshold3); // int8u
EmberAfStatus SetBattery2PercentageThreshold3(chip::EndpointId endpoint, uint8_t battery2PercentageThreshold3);
EmberAfStatus GetBattery2AlarmState(chip::EndpointId endpoint, uint32_t * battery2AlarmState); // bitmap32
EmberAfStatus SetBattery2AlarmState(chip::EndpointId endpoint, uint32_t battery2AlarmState);
EmberAfStatus GetBattery3Voltage(chip::EndpointId endpoint, uint8_t * battery3Voltage); // int8u
EmberAfStatus SetBattery3Voltage(chip::EndpointId endpoint, uint8_t battery3Voltage);
EmberAfStatus GetBattery3PercentageRemaining(chip::EndpointId endpoint, uint8_t * battery3PercentageRemaining); // int8u
EmberAfStatus SetBattery3PercentageRemaining(chip::EndpointId endpoint, uint8_t battery3PercentageRemaining);
EmberAfStatus GetBattery3Size(chip::EndpointId endpoint, uint8_t * battery3Size); // enum8
EmberAfStatus SetBattery3Size(chip::EndpointId endpoint, uint8_t battery3Size);
EmberAfStatus GetBattery3AhrRating(chip::EndpointId endpoint, uint16_t * battery3AhrRating); // int16u
EmberAfStatus SetBattery3AhrRating(chip::EndpointId endpoint, uint16_t battery3AhrRating);
EmberAfStatus GetBattery3Quantity(chip::EndpointId endpoint, uint8_t * battery3Quantity); // int8u
EmberAfStatus SetBattery3Quantity(chip::EndpointId endpoint, uint8_t battery3Quantity);
EmberAfStatus GetBattery3RatedVoltage(chip::EndpointId endpoint, uint8_t * battery3RatedVoltage); // int8u
EmberAfStatus SetBattery3RatedVoltage(chip::EndpointId endpoint, uint8_t battery3RatedVoltage);
EmberAfStatus GetBattery3AlarmMask(chip::EndpointId endpoint, uint8_t * battery3AlarmMask); // bitmap8
EmberAfStatus SetBattery3AlarmMask(chip::EndpointId endpoint, uint8_t battery3AlarmMask);
EmberAfStatus GetBattery3VoltageMinThreshold(chip::EndpointId endpoint, uint8_t * battery3VoltageMinThreshold); // int8u
EmberAfStatus SetBattery3VoltageMinThreshold(chip::EndpointId endpoint, uint8_t battery3VoltageMinThreshold);
EmberAfStatus GetBattery3VoltageThreshold1(chip::EndpointId endpoint, uint8_t * battery3VoltageThreshold1); // int8u
EmberAfStatus SetBattery3VoltageThreshold1(chip::EndpointId endpoint, uint8_t battery3VoltageThreshold1);
EmberAfStatus GetBattery3VoltageThreshold2(chip::EndpointId endpoint, uint8_t * battery3VoltageThreshold2); // int8u
EmberAfStatus SetBattery3VoltageThreshold2(chip::EndpointId endpoint, uint8_t battery3VoltageThreshold2);
EmberAfStatus GetBattery3VoltageThreshold3(chip::EndpointId endpoint, uint8_t * battery3VoltageThreshold3); // int8u
EmberAfStatus SetBattery3VoltageThreshold3(chip::EndpointId endpoint, uint8_t battery3VoltageThreshold3);
EmberAfStatus GetBattery3PercentageMinThreshold(chip::EndpointId endpoint, uint8_t * battery3PercentageMinThreshold); // int8u
EmberAfStatus SetBattery3PercentageMinThreshold(chip::EndpointId endpoint, uint8_t battery3PercentageMinThreshold);
EmberAfStatus GetBattery3PercentageThreshold1(chip::EndpointId endpoint, uint8_t * battery3PercentageThreshold1); // int8u
EmberAfStatus SetBattery3PercentageThreshold1(chip::EndpointId endpoint, uint8_t battery3PercentageThreshold1);
EmberAfStatus GetBattery3PercentageThreshold2(chip::EndpointId endpoint, uint8_t * battery3PercentageThreshold2); // int8u
EmberAfStatus SetBattery3PercentageThreshold2(chip::EndpointId endpoint, uint8_t battery3PercentageThreshold2);
EmberAfStatus GetBattery3PercentageThreshold3(chip::EndpointId endpoint, uint8_t * battery3PercentageThreshold3); // int8u
EmberAfStatus SetBattery3PercentageThreshold3(chip::EndpointId endpoint, uint8_t battery3PercentageThreshold3);
EmberAfStatus GetBattery3AlarmState(chip::EndpointId endpoint, uint32_t * battery3AlarmState); // bitmap32
EmberAfStatus SetBattery3AlarmState(chip::EndpointId endpoint, uint32_t battery3AlarmState);
} // namespace Attributes
} // namespace PowerConfiguration

namespace DeviceTemperatureConfiguration {
namespace Attributes {
EmberAfStatus GetCurrentTemperature(chip::EndpointId endpoint, int16_t * currentTemperature); // int16s
EmberAfStatus SetCurrentTemperature(chip::EndpointId endpoint, int16_t currentTemperature);
EmberAfStatus GetMinTempExperienced(chip::EndpointId endpoint, int16_t * minTempExperienced); // int16s
EmberAfStatus SetMinTempExperienced(chip::EndpointId endpoint, int16_t minTempExperienced);
EmberAfStatus GetMaxTempExperienced(chip::EndpointId endpoint, int16_t * maxTempExperienced); // int16s
EmberAfStatus SetMaxTempExperienced(chip::EndpointId endpoint, int16_t maxTempExperienced);
EmberAfStatus GetOverTempTotalDwell(chip::EndpointId endpoint, uint16_t * overTempTotalDwell); // int16u
EmberAfStatus SetOverTempTotalDwell(chip::EndpointId endpoint, uint16_t overTempTotalDwell);
EmberAfStatus GetDeviceTempAlarmMask(chip::EndpointId endpoint, uint8_t * deviceTempAlarmMask); // bitmap8
EmberAfStatus SetDeviceTempAlarmMask(chip::EndpointId endpoint, uint8_t deviceTempAlarmMask);
EmberAfStatus GetLowTempThreshold(chip::EndpointId endpoint, int16_t * lowTempThreshold); // int16s
EmberAfStatus SetLowTempThreshold(chip::EndpointId endpoint, int16_t lowTempThreshold);
EmberAfStatus GetHighTempThreshold(chip::EndpointId endpoint, int16_t * highTempThreshold); // int16s
EmberAfStatus SetHighTempThreshold(chip::EndpointId endpoint, int16_t highTempThreshold);
} // namespace Attributes
} // namespace DeviceTemperatureConfiguration

namespace Identify {
namespace Attributes {
EmberAfStatus GetIdentifyTime(chip::EndpointId endpoint, uint16_t * identifyTime); // int16u
EmberAfStatus SetIdentifyTime(chip::EndpointId endpoint, uint16_t identifyTime);
EmberAfStatus GetCommissionState(chip::EndpointId endpoint, uint8_t * commissionState); // bitmap8
EmberAfStatus SetCommissionState(chip::EndpointId endpoint, uint8_t commissionState);
} // namespace Attributes
} // namespace Identify

namespace Groups {
namespace Attributes {
EmberAfStatus GetNameSupport(chip::EndpointId endpoint, uint8_t * nameSupport); // bitmap8
EmberAfStatus SetNameSupport(chip::EndpointId endpoint, uint8_t nameSupport);
} // namespace Attributes
} // namespace Groups

namespace Scenes {
namespace Attributes {
EmberAfStatus GetSceneCount(chip::EndpointId endpoint, uint8_t * sceneCount); // int8u
EmberAfStatus SetSceneCount(chip::EndpointId endpoint, uint8_t sceneCount);
EmberAfStatus GetCurrentScene(chip::EndpointId endpoint, uint8_t * currentScene); // int8u
EmberAfStatus SetCurrentScene(chip::EndpointId endpoint, uint8_t currentScene);
EmberAfStatus GetCurrentGroup(chip::EndpointId endpoint, uint16_t * currentGroup); // int16u
EmberAfStatus SetCurrentGroup(chip::EndpointId endpoint, uint16_t currentGroup);
EmberAfStatus GetSceneValid(chip::EndpointId endpoint, uint8_t * sceneValid); // boolean
EmberAfStatus SetSceneValid(chip::EndpointId endpoint, uint8_t sceneValid);
EmberAfStatus GetNameSupport(chip::EndpointId endpoint, uint8_t * nameSupport); // bitmap8
EmberAfStatus SetNameSupport(chip::EndpointId endpoint, uint8_t nameSupport);
EmberAfStatus GetLastConfiguredBy(chip::EndpointId endpoint,
                                  /* TYPE WARNING: unknown defaults to */ uint8_t ** lastConfiguredBy); // eui64
EmberAfStatus SetLastConfiguredBy(chip::EndpointId endpoint, /* TYPE WARNING: unknown defaults to */ uint8_t * lastConfiguredBy);
} // namespace Attributes
} // namespace Scenes

namespace OnOff {
namespace Attributes {
EmberAfStatus GetOnOff(chip::EndpointId endpoint, uint8_t * onOff); // boolean
EmberAfStatus SetOnOff(chip::EndpointId endpoint, uint8_t onOff);
EmberAfStatus GetSampleMfgSpecificAttribute0x00000x1002(chip::EndpointId endpoint,
                                                        uint16_t * sampleMfgSpecificAttribute0x00000x1002); // int16u
EmberAfStatus SetSampleMfgSpecificAttribute0x00000x1002(chip::EndpointId endpoint, uint16_t sampleMfgSpecificAttribute0x00000x1002);
EmberAfStatus GetSampleMfgSpecificAttribute0x00000x1049(chip::EndpointId endpoint,
                                                        uint8_t * sampleMfgSpecificAttribute0x00000x1049); // int8u
EmberAfStatus SetSampleMfgSpecificAttribute0x00000x1049(chip::EndpointId endpoint, uint8_t sampleMfgSpecificAttribute0x00000x1049);
EmberAfStatus GetSampleMfgSpecificAttribute0x00010x1002(chip::EndpointId endpoint,
                                                        uint8_t * sampleMfgSpecificAttribute0x00010x1002); // int8u
EmberAfStatus SetSampleMfgSpecificAttribute0x00010x1002(chip::EndpointId endpoint, uint8_t sampleMfgSpecificAttribute0x00010x1002);
EmberAfStatus GetSampleMfgSpecificAttribute0x00010x1040(chip::EndpointId endpoint,
                                                        uint16_t * sampleMfgSpecificAttribute0x00010x1040); // int16u
EmberAfStatus SetSampleMfgSpecificAttribute0x00010x1040(chip::EndpointId endpoint, uint16_t sampleMfgSpecificAttribute0x00010x1040);
EmberAfStatus GetGlobalSceneControl(chip::EndpointId endpoint, uint8_t * globalSceneControl); // boolean
EmberAfStatus SetGlobalSceneControl(chip::EndpointId endpoint, uint8_t globalSceneControl);
EmberAfStatus GetOnTime(chip::EndpointId endpoint, uint16_t * onTime); // int16u
EmberAfStatus SetOnTime(chip::EndpointId endpoint, uint16_t onTime);
EmberAfStatus GetOffWaitTime(chip::EndpointId endpoint, uint16_t * offWaitTime); // int16u
EmberAfStatus SetOffWaitTime(chip::EndpointId endpoint, uint16_t offWaitTime);
EmberAfStatus GetStartUpOnOff(chip::EndpointId endpoint, uint8_t * startUpOnOff); // enum8
EmberAfStatus SetStartUpOnOff(chip::EndpointId endpoint, uint8_t startUpOnOff);
} // namespace Attributes
} // namespace OnOff

namespace OnOffSwitchConfiguration {
namespace Attributes {
EmberAfStatus GetSwitchType(chip::EndpointId endpoint, uint8_t * switchType); // enum8
EmberAfStatus SetSwitchType(chip::EndpointId endpoint, uint8_t switchType);
EmberAfStatus GetSwitchActions(chip::EndpointId endpoint, uint8_t * switchActions); // enum8
EmberAfStatus SetSwitchActions(chip::EndpointId endpoint, uint8_t switchActions);
} // namespace Attributes
} // namespace OnOffSwitchConfiguration

namespace LevelControl {
namespace Attributes {
EmberAfStatus GetCurrentLevel(chip::EndpointId endpoint, uint8_t * currentLevel); // int8u
EmberAfStatus SetCurrentLevel(chip::EndpointId endpoint, uint8_t currentLevel);
EmberAfStatus GetRemainingTime(chip::EndpointId endpoint, uint16_t * remainingTime); // int16u
EmberAfStatus SetRemainingTime(chip::EndpointId endpoint, uint16_t remainingTime);
EmberAfStatus GetOptions(chip::EndpointId endpoint, uint8_t * options); // bitmap8
EmberAfStatus SetOptions(chip::EndpointId endpoint, uint8_t options);
EmberAfStatus GetOnOffTransitionTime(chip::EndpointId endpoint, uint16_t * onOffTransitionTime); // int16u
EmberAfStatus SetOnOffTransitionTime(chip::EndpointId endpoint, uint16_t onOffTransitionTime);
EmberAfStatus GetOnLevel(chip::EndpointId endpoint, uint8_t * onLevel); // int8u
EmberAfStatus SetOnLevel(chip::EndpointId endpoint, uint8_t onLevel);
EmberAfStatus GetOnTransitionTime(chip::EndpointId endpoint, uint16_t * onTransitionTime); // int16u
EmberAfStatus SetOnTransitionTime(chip::EndpointId endpoint, uint16_t onTransitionTime);
EmberAfStatus GetOffTransitionTime(chip::EndpointId endpoint, uint16_t * offTransitionTime); // int16u
EmberAfStatus SetOffTransitionTime(chip::EndpointId endpoint, uint16_t offTransitionTime);
EmberAfStatus GetDefaultMoveRate(chip::EndpointId endpoint, uint8_t * defaultMoveRate); // int8u
EmberAfStatus SetDefaultMoveRate(chip::EndpointId endpoint, uint8_t defaultMoveRate);
EmberAfStatus GetStartUpCurrentLevel(chip::EndpointId endpoint, uint8_t * startUpCurrentLevel); // int8u
EmberAfStatus SetStartUpCurrentLevel(chip::EndpointId endpoint, uint8_t startUpCurrentLevel);
} // namespace Attributes
} // namespace LevelControl

namespace Alarms {
namespace Attributes {
EmberAfStatus GetAlarmCount(chip::EndpointId endpoint, uint16_t * alarmCount); // int16u
EmberAfStatus SetAlarmCount(chip::EndpointId endpoint, uint16_t alarmCount);
} // namespace Attributes
} // namespace Alarms

namespace Time {
namespace Attributes {
EmberAfStatus GetTime(chip::EndpointId endpoint, /* TYPE WARNING: utc defaults to */ uint8_t ** time); // utc
EmberAfStatus SetTime(chip::EndpointId endpoint, /* TYPE WARNING: utc defaults to */ uint8_t * time);
EmberAfStatus GetTimeStatus(chip::EndpointId endpoint, uint8_t * timeStatus); // bitmap8
EmberAfStatus SetTimeStatus(chip::EndpointId endpoint, uint8_t timeStatus);
EmberAfStatus GetTimeZone(chip::EndpointId endpoint, int32_t * timeZone); // int32s
EmberAfStatus SetTimeZone(chip::EndpointId endpoint, int32_t timeZone);
EmberAfStatus GetDstStart(chip::EndpointId endpoint, uint32_t * dstStart); // int32u
EmberAfStatus SetDstStart(chip::EndpointId endpoint, uint32_t dstStart);
EmberAfStatus GetDstEnd(chip::EndpointId endpoint, uint32_t * dstEnd); // int32u
EmberAfStatus SetDstEnd(chip::EndpointId endpoint, uint32_t dstEnd);
EmberAfStatus GetDstShift(chip::EndpointId endpoint, int32_t * dstShift); // int32s
EmberAfStatus SetDstShift(chip::EndpointId endpoint, int32_t dstShift);
EmberAfStatus GetStandardTime(chip::EndpointId endpoint, uint32_t * standardTime); // int32u
EmberAfStatus SetStandardTime(chip::EndpointId endpoint, uint32_t standardTime);
EmberAfStatus GetLocalTime(chip::EndpointId endpoint, uint32_t * localTime); // int32u
EmberAfStatus SetLocalTime(chip::EndpointId endpoint, uint32_t localTime);
EmberAfStatus GetLastSetTime(chip::EndpointId endpoint, /* TYPE WARNING: utc defaults to */ uint8_t ** lastSetTime); // utc
EmberAfStatus SetLastSetTime(chip::EndpointId endpoint, /* TYPE WARNING: utc defaults to */ uint8_t * lastSetTime);
EmberAfStatus GetValidUntilTime(chip::EndpointId endpoint, /* TYPE WARNING: utc defaults to */ uint8_t ** validUntilTime); // utc
EmberAfStatus SetValidUntilTime(chip::EndpointId endpoint, /* TYPE WARNING: utc defaults to */ uint8_t * validUntilTime);
} // namespace Attributes
} // namespace Time

namespace BinaryInputBasic {
namespace Attributes {
EmberAfStatus GetOutOfService(chip::EndpointId endpoint, uint8_t * outOfService); // boolean
EmberAfStatus SetOutOfService(chip::EndpointId endpoint, uint8_t outOfService);
EmberAfStatus GetPolarity(chip::EndpointId endpoint, uint8_t * polarity); // enum8
EmberAfStatus SetPolarity(chip::EndpointId endpoint, uint8_t polarity);
EmberAfStatus GetPresentValue(chip::EndpointId endpoint, uint8_t * presentValue); // boolean
EmberAfStatus SetPresentValue(chip::EndpointId endpoint, uint8_t presentValue);
EmberAfStatus GetReliability(chip::EndpointId endpoint, uint8_t * reliability); // enum8
EmberAfStatus SetReliability(chip::EndpointId endpoint, uint8_t reliability);
EmberAfStatus GetStatusFlags(chip::EndpointId endpoint, uint8_t * statusFlags); // bitmap8
EmberAfStatus SetStatusFlags(chip::EndpointId endpoint, uint8_t statusFlags);
EmberAfStatus GetApplicationType(chip::EndpointId endpoint, uint32_t * applicationType); // int32u
EmberAfStatus SetApplicationType(chip::EndpointId endpoint, uint32_t applicationType);
} // namespace Attributes
} // namespace BinaryInputBasic

namespace PowerProfile {
namespace Attributes {
EmberAfStatus GetTotalProfileNum(chip::EndpointId endpoint, uint8_t * totalProfileNum); // int8u
EmberAfStatus SetTotalProfileNum(chip::EndpointId endpoint, uint8_t totalProfileNum);
EmberAfStatus GetMultipleScheduling(chip::EndpointId endpoint, uint8_t * multipleScheduling); // boolean
EmberAfStatus SetMultipleScheduling(chip::EndpointId endpoint, uint8_t multipleScheduling);
EmberAfStatus GetEnergyFormatting(chip::EndpointId endpoint, uint8_t * energyFormatting); // bitmap8
EmberAfStatus SetEnergyFormatting(chip::EndpointId endpoint, uint8_t energyFormatting);
EmberAfStatus GetEnergyRemote(chip::EndpointId endpoint, uint8_t * energyRemote); // boolean
EmberAfStatus SetEnergyRemote(chip::EndpointId endpoint, uint8_t energyRemote);
EmberAfStatus GetScheduleMode(chip::EndpointId endpoint, uint8_t * scheduleMode); // bitmap8
EmberAfStatus SetScheduleMode(chip::EndpointId endpoint, uint8_t scheduleMode);
} // namespace Attributes
} // namespace PowerProfile

namespace ApplianceControl {
namespace Attributes {
EmberAfStatus GetStartTime(chip::EndpointId endpoint, uint16_t * startTime); // int16u
EmberAfStatus SetStartTime(chip::EndpointId endpoint, uint16_t startTime);
EmberAfStatus GetFinishTime(chip::EndpointId endpoint, uint16_t * finishTime); // int16u
EmberAfStatus SetFinishTime(chip::EndpointId endpoint, uint16_t finishTime);
EmberAfStatus GetRemainingTime(chip::EndpointId endpoint, uint16_t * remainingTime); // int16u
EmberAfStatus SetRemainingTime(chip::EndpointId endpoint, uint16_t remainingTime);
} // namespace Attributes
} // namespace ApplianceControl

namespace Descriptor {
namespace Attributes {
} // namespace Attributes
} // namespace Descriptor

namespace PollControl {
namespace Attributes {
EmberAfStatus GetCheckInInterval(chip::EndpointId endpoint, uint32_t * checkInInterval); // int32u
EmberAfStatus SetCheckInInterval(chip::EndpointId endpoint, uint32_t checkInInterval);
EmberAfStatus GetLongPollInterval(chip::EndpointId endpoint, uint32_t * longPollInterval); // int32u
EmberAfStatus SetLongPollInterval(chip::EndpointId endpoint, uint32_t longPollInterval);
EmberAfStatus GetShortPollInterval(chip::EndpointId endpoint, uint16_t * shortPollInterval); // int16u
EmberAfStatus SetShortPollInterval(chip::EndpointId endpoint, uint16_t shortPollInterval);
EmberAfStatus GetFastPollTimeout(chip::EndpointId endpoint, uint16_t * fastPollTimeout); // int16u
EmberAfStatus SetFastPollTimeout(chip::EndpointId endpoint, uint16_t fastPollTimeout);
EmberAfStatus GetCheckInIntervalMin(chip::EndpointId endpoint, uint32_t * checkInIntervalMin); // int32u
EmberAfStatus SetCheckInIntervalMin(chip::EndpointId endpoint, uint32_t checkInIntervalMin);
EmberAfStatus GetLongPollIntervalMin(chip::EndpointId endpoint, uint32_t * longPollIntervalMin); // int32u
EmberAfStatus SetLongPollIntervalMin(chip::EndpointId endpoint, uint32_t longPollIntervalMin);
EmberAfStatus GetFastPollTimeoutMax(chip::EndpointId endpoint, uint16_t * fastPollTimeoutMax); // int16u
EmberAfStatus SetFastPollTimeoutMax(chip::EndpointId endpoint, uint16_t fastPollTimeoutMax);
} // namespace Attributes
} // namespace PollControl

namespace Basic {
namespace Attributes {
EmberAfStatus GetInteractionModelVersion(chip::EndpointId endpoint, uint16_t * interactionModelVersion); // int16u
EmberAfStatus SetInteractionModelVersion(chip::EndpointId endpoint, uint16_t interactionModelVersion);
EmberAfStatus GetVendorID(chip::EndpointId endpoint, uint16_t * vendorID); // int16u
EmberAfStatus SetVendorID(chip::EndpointId endpoint, uint16_t vendorID);
EmberAfStatus GetProductID(chip::EndpointId endpoint, uint16_t * productID); // int16u
EmberAfStatus SetProductID(chip::EndpointId endpoint, uint16_t productID);
EmberAfStatus GetHardwareVersion(chip::EndpointId endpoint, uint16_t * hardwareVersion); // int16u
EmberAfStatus SetHardwareVersion(chip::EndpointId endpoint, uint16_t hardwareVersion);
EmberAfStatus GetSoftwareVersion(chip::EndpointId endpoint, uint32_t * softwareVersion); // int32u
EmberAfStatus SetSoftwareVersion(chip::EndpointId endpoint, uint32_t softwareVersion);
EmberAfStatus GetLocalConfigDisabled(chip::EndpointId endpoint, uint8_t * localConfigDisabled); // boolean
EmberAfStatus SetLocalConfigDisabled(chip::EndpointId endpoint, uint8_t localConfigDisabled);
EmberAfStatus GetReachable(chip::EndpointId endpoint, uint8_t * reachable); // boolean
EmberAfStatus SetReachable(chip::EndpointId endpoint, uint8_t reachable);
} // namespace Attributes
} // namespace Basic

namespace GeneralCommissioning {
namespace Attributes {
EmberAfStatus GetBreadcrumb(chip::EndpointId endpoint, uint64_t * breadcrumb); // int64u
EmberAfStatus SetBreadcrumb(chip::EndpointId endpoint, uint64_t breadcrumb);
} // namespace Attributes
} // namespace GeneralCommissioning

namespace GeneralDiagnostics {
namespace Attributes {
EmberAfStatus GetRebootCount(chip::EndpointId endpoint, uint16_t * rebootCount); // int16u
EmberAfStatus SetRebootCount(chip::EndpointId endpoint, uint16_t rebootCount);
EmberAfStatus GetUpTime(chip::EndpointId endpoint, uint64_t * upTime); // int64u
EmberAfStatus SetUpTime(chip::EndpointId endpoint, uint64_t upTime);
EmberAfStatus GetTotalOperationalHours(chip::EndpointId endpoint, uint32_t * totalOperationalHours); // int32u
EmberAfStatus SetTotalOperationalHours(chip::EndpointId endpoint, uint32_t totalOperationalHours);
EmberAfStatus GetBootReasons(chip::EndpointId endpoint, uint8_t * bootReasons); // enum8
EmberAfStatus SetBootReasons(chip::EndpointId endpoint, uint8_t bootReasons);
} // namespace Attributes
} // namespace GeneralDiagnostics

namespace SoftwareDiagnostics {
namespace Attributes {
EmberAfStatus GetCurrentHeapFree(chip::EndpointId endpoint, uint64_t * currentHeapFree); // int64u
EmberAfStatus SetCurrentHeapFree(chip::EndpointId endpoint, uint64_t currentHeapFree);
EmberAfStatus GetCurrentHeapUsed(chip::EndpointId endpoint, uint64_t * currentHeapUsed); // int64u
EmberAfStatus SetCurrentHeapUsed(chip::EndpointId endpoint, uint64_t currentHeapUsed);
EmberAfStatus GetCurrentHeapHighWatermark(chip::EndpointId endpoint, uint64_t * currentHeapHighWatermark); // int64u
EmberAfStatus SetCurrentHeapHighWatermark(chip::EndpointId endpoint, uint64_t currentHeapHighWatermark);
} // namespace Attributes
} // namespace SoftwareDiagnostics

namespace ThreadNetworkDiagnostics {
namespace Attributes {
EmberAfStatus GetChannel(chip::EndpointId endpoint, uint8_t * channel); // int8u
EmberAfStatus SetChannel(chip::EndpointId endpoint, uint8_t channel);
EmberAfStatus GetRoutingRole(chip::EndpointId endpoint, uint8_t * routingRole); // enum8
EmberAfStatus SetRoutingRole(chip::EndpointId endpoint, uint8_t routingRole);
EmberAfStatus GetPanId(chip::EndpointId endpoint, uint16_t * panId); // int16u
EmberAfStatus SetPanId(chip::EndpointId endpoint, uint16_t panId);
EmberAfStatus GetExtendedPanId(chip::EndpointId endpoint, uint64_t * extendedPanId); // int64u
EmberAfStatus SetExtendedPanId(chip::EndpointId endpoint, uint64_t extendedPanId);
EmberAfStatus GetOverrunCount(chip::EndpointId endpoint, uint64_t * overrunCount); // int64u
EmberAfStatus SetOverrunCount(chip::EndpointId endpoint, uint64_t overrunCount);
EmberAfStatus GetPartitionId(chip::EndpointId endpoint, uint32_t * partitionId); // int32u
EmberAfStatus SetPartitionId(chip::EndpointId endpoint, uint32_t partitionId);
EmberAfStatus GetWeighting(chip::EndpointId endpoint, uint8_t * weighting); // int8u
EmberAfStatus SetWeighting(chip::EndpointId endpoint, uint8_t weighting);
EmberAfStatus GetDataVersion(chip::EndpointId endpoint, uint8_t * dataVersion); // int8u
EmberAfStatus SetDataVersion(chip::EndpointId endpoint, uint8_t dataVersion);
EmberAfStatus GetStableDataVersion(chip::EndpointId endpoint, uint8_t * stableDataVersion); // int8u
EmberAfStatus SetStableDataVersion(chip::EndpointId endpoint, uint8_t stableDataVersion);
EmberAfStatus GetLeaderRouterId(chip::EndpointId endpoint, uint8_t * leaderRouterId); // int8u
EmberAfStatus SetLeaderRouterId(chip::EndpointId endpoint, uint8_t leaderRouterId);
EmberAfStatus GetDetachedRoleCount(chip::EndpointId endpoint, uint16_t * detachedRoleCount); // int16u
EmberAfStatus SetDetachedRoleCount(chip::EndpointId endpoint, uint16_t detachedRoleCount);
EmberAfStatus GetChildRoleCount(chip::EndpointId endpoint, uint16_t * childRoleCount); // int16u
EmberAfStatus SetChildRoleCount(chip::EndpointId endpoint, uint16_t childRoleCount);
EmberAfStatus GetRouterRoleCount(chip::EndpointId endpoint, uint16_t * routerRoleCount); // int16u
EmberAfStatus SetRouterRoleCount(chip::EndpointId endpoint, uint16_t routerRoleCount);
EmberAfStatus GetLeaderRoleCount(chip::EndpointId endpoint, uint16_t * leaderRoleCount); // int16u
EmberAfStatus SetLeaderRoleCount(chip::EndpointId endpoint, uint16_t leaderRoleCount);
EmberAfStatus GetAttachAttemptCount(chip::EndpointId endpoint, uint16_t * attachAttemptCount); // int16u
EmberAfStatus SetAttachAttemptCount(chip::EndpointId endpoint, uint16_t attachAttemptCount);
EmberAfStatus GetPartitionIdChangeCount(chip::EndpointId endpoint, uint16_t * partitionIdChangeCount); // int16u
EmberAfStatus SetPartitionIdChangeCount(chip::EndpointId endpoint, uint16_t partitionIdChangeCount);
EmberAfStatus GetBetterPartitionAttachAttemptCount(chip::EndpointId endpoint,
                                                   uint16_t * betterPartitionAttachAttemptCount); // int16u
EmberAfStatus SetBetterPartitionAttachAttemptCount(chip::EndpointId endpoint, uint16_t betterPartitionAttachAttemptCount);
EmberAfStatus GetParentChangeCount(chip::EndpointId endpoint, uint16_t * parentChangeCount); // int16u
EmberAfStatus SetParentChangeCount(chip::EndpointId endpoint, uint16_t parentChangeCount);
EmberAfStatus GetTxTotalCount(chip::EndpointId endpoint, uint32_t * txTotalCount); // int32u
EmberAfStatus SetTxTotalCount(chip::EndpointId endpoint, uint32_t txTotalCount);
EmberAfStatus GetTxUnicastCount(chip::EndpointId endpoint, uint32_t * txUnicastCount); // int32u
EmberAfStatus SetTxUnicastCount(chip::EndpointId endpoint, uint32_t txUnicastCount);
EmberAfStatus GetTxBroadcastCount(chip::EndpointId endpoint, uint32_t * txBroadcastCount); // int32u
EmberAfStatus SetTxBroadcastCount(chip::EndpointId endpoint, uint32_t txBroadcastCount);
EmberAfStatus GetTxAckRequestedCount(chip::EndpointId endpoint, uint32_t * txAckRequestedCount); // int32u
EmberAfStatus SetTxAckRequestedCount(chip::EndpointId endpoint, uint32_t txAckRequestedCount);
EmberAfStatus GetTxAckedCount(chip::EndpointId endpoint, uint32_t * txAckedCount); // int32u
EmberAfStatus SetTxAckedCount(chip::EndpointId endpoint, uint32_t txAckedCount);
EmberAfStatus GetTxNoAckRequestedCount(chip::EndpointId endpoint, uint32_t * txNoAckRequestedCount); // int32u
EmberAfStatus SetTxNoAckRequestedCount(chip::EndpointId endpoint, uint32_t txNoAckRequestedCount);
EmberAfStatus GetTxDataCount(chip::EndpointId endpoint, uint32_t * txDataCount); // int32u
EmberAfStatus SetTxDataCount(chip::EndpointId endpoint, uint32_t txDataCount);
EmberAfStatus GetTxDataPollCount(chip::EndpointId endpoint, uint32_t * txDataPollCount); // int32u
EmberAfStatus SetTxDataPollCount(chip::EndpointId endpoint, uint32_t txDataPollCount);
EmberAfStatus GetTxBeaconCount(chip::EndpointId endpoint, uint32_t * txBeaconCount); // int32u
EmberAfStatus SetTxBeaconCount(chip::EndpointId endpoint, uint32_t txBeaconCount);
EmberAfStatus GetTxBeaconRequestCount(chip::EndpointId endpoint, uint32_t * txBeaconRequestCount); // int32u
EmberAfStatus SetTxBeaconRequestCount(chip::EndpointId endpoint, uint32_t txBeaconRequestCount);
EmberAfStatus GetTxOtherCount(chip::EndpointId endpoint, uint32_t * txOtherCount); // int32u
EmberAfStatus SetTxOtherCount(chip::EndpointId endpoint, uint32_t txOtherCount);
EmberAfStatus GetTxRetryCount(chip::EndpointId endpoint, uint32_t * txRetryCount); // int32u
EmberAfStatus SetTxRetryCount(chip::EndpointId endpoint, uint32_t txRetryCount);
EmberAfStatus GetTxDirectMaxRetryExpiryCount(chip::EndpointId endpoint, uint32_t * txDirectMaxRetryExpiryCount); // int32u
EmberAfStatus SetTxDirectMaxRetryExpiryCount(chip::EndpointId endpoint, uint32_t txDirectMaxRetryExpiryCount);
EmberAfStatus GetTxIndirectMaxRetryExpiryCount(chip::EndpointId endpoint, uint32_t * txIndirectMaxRetryExpiryCount); // int32u
EmberAfStatus SetTxIndirectMaxRetryExpiryCount(chip::EndpointId endpoint, uint32_t txIndirectMaxRetryExpiryCount);
EmberAfStatus GetTxErrCcaCount(chip::EndpointId endpoint, uint32_t * txErrCcaCount); // int32u
EmberAfStatus SetTxErrCcaCount(chip::EndpointId endpoint, uint32_t txErrCcaCount);
EmberAfStatus GetTxErrAbortCount(chip::EndpointId endpoint, uint32_t * txErrAbortCount); // int32u
EmberAfStatus SetTxErrAbortCount(chip::EndpointId endpoint, uint32_t txErrAbortCount);
EmberAfStatus GetTxErrBusyChannelCount(chip::EndpointId endpoint, uint32_t * txErrBusyChannelCount); // int32u
EmberAfStatus SetTxErrBusyChannelCount(chip::EndpointId endpoint, uint32_t txErrBusyChannelCount);
EmberAfStatus GetRxTotalCount(chip::EndpointId endpoint, uint32_t * rxTotalCount); // int32u
EmberAfStatus SetRxTotalCount(chip::EndpointId endpoint, uint32_t rxTotalCount);
EmberAfStatus GetRxUnicastCount(chip::EndpointId endpoint, uint32_t * rxUnicastCount); // int32u
EmberAfStatus SetRxUnicastCount(chip::EndpointId endpoint, uint32_t rxUnicastCount);
EmberAfStatus GetRxBroadcastCount(chip::EndpointId endpoint, uint32_t * rxBroadcastCount); // int32u
EmberAfStatus SetRxBroadcastCount(chip::EndpointId endpoint, uint32_t rxBroadcastCount);
EmberAfStatus GetRxDataCount(chip::EndpointId endpoint, uint32_t * rxDataCount); // int32u
EmberAfStatus SetRxDataCount(chip::EndpointId endpoint, uint32_t rxDataCount);
EmberAfStatus GetRxDataPollCount(chip::EndpointId endpoint, uint32_t * rxDataPollCount); // int32u
EmberAfStatus SetRxDataPollCount(chip::EndpointId endpoint, uint32_t rxDataPollCount);
EmberAfStatus GetRxBeaconCount(chip::EndpointId endpoint, uint32_t * rxBeaconCount); // int32u
EmberAfStatus SetRxBeaconCount(chip::EndpointId endpoint, uint32_t rxBeaconCount);
EmberAfStatus GetRxBeaconRequestCount(chip::EndpointId endpoint, uint32_t * rxBeaconRequestCount); // int32u
EmberAfStatus SetRxBeaconRequestCount(chip::EndpointId endpoint, uint32_t rxBeaconRequestCount);
EmberAfStatus GetRxOtherCount(chip::EndpointId endpoint, uint32_t * rxOtherCount); // int32u
EmberAfStatus SetRxOtherCount(chip::EndpointId endpoint, uint32_t rxOtherCount);
EmberAfStatus GetRxAddressFilteredCount(chip::EndpointId endpoint, uint32_t * rxAddressFilteredCount); // int32u
EmberAfStatus SetRxAddressFilteredCount(chip::EndpointId endpoint, uint32_t rxAddressFilteredCount);
EmberAfStatus GetRxDestAddrFilteredCount(chip::EndpointId endpoint, uint32_t * rxDestAddrFilteredCount); // int32u
EmberAfStatus SetRxDestAddrFilteredCount(chip::EndpointId endpoint, uint32_t rxDestAddrFilteredCount);
EmberAfStatus GetRxDuplicatedCount(chip::EndpointId endpoint, uint32_t * rxDuplicatedCount); // int32u
EmberAfStatus SetRxDuplicatedCount(chip::EndpointId endpoint, uint32_t rxDuplicatedCount);
EmberAfStatus GetRxErrNoFrameCount(chip::EndpointId endpoint, uint32_t * rxErrNoFrameCount); // int32u
EmberAfStatus SetRxErrNoFrameCount(chip::EndpointId endpoint, uint32_t rxErrNoFrameCount);
EmberAfStatus GetRxErrUnknownNeighborCount(chip::EndpointId endpoint, uint32_t * rxErrUnknownNeighborCount); // int32u
EmberAfStatus SetRxErrUnknownNeighborCount(chip::EndpointId endpoint, uint32_t rxErrUnknownNeighborCount);
EmberAfStatus GetRxErrInvalidSrcAddrCount(chip::EndpointId endpoint, uint32_t * rxErrInvalidSrcAddrCount); // int32u
EmberAfStatus SetRxErrInvalidSrcAddrCount(chip::EndpointId endpoint, uint32_t rxErrInvalidSrcAddrCount);
EmberAfStatus GetRxErrSecCount(chip::EndpointId endpoint, uint32_t * rxErrSecCount); // int32u
EmberAfStatus SetRxErrSecCount(chip::EndpointId endpoint, uint32_t rxErrSecCount);
EmberAfStatus GetRxErrFcsCount(chip::EndpointId endpoint, uint32_t * rxErrFcsCount); // int32u
EmberAfStatus SetRxErrFcsCount(chip::EndpointId endpoint, uint32_t rxErrFcsCount);
EmberAfStatus GetRxErrOtherCount(chip::EndpointId endpoint, uint32_t * rxErrOtherCount); // int32u
EmberAfStatus SetRxErrOtherCount(chip::EndpointId endpoint, uint32_t rxErrOtherCount);
EmberAfStatus GetActiveTimestamp(chip::EndpointId endpoint, uint64_t * activeTimestamp); // int64u
EmberAfStatus SetActiveTimestamp(chip::EndpointId endpoint, uint64_t activeTimestamp);
EmberAfStatus GetPendingTimestamp(chip::EndpointId endpoint, uint64_t * pendingTimestamp); // int64u
EmberAfStatus SetPendingTimestamp(chip::EndpointId endpoint, uint64_t pendingTimestamp);
EmberAfStatus GetDelay(chip::EndpointId endpoint, uint32_t * delay); // int32u
EmberAfStatus SetDelay(chip::EndpointId endpoint, uint32_t delay);
EmberAfStatus GetChannelMask(chip::EndpointId endpoint, uint8_t * channelMask); // int8u
EmberAfStatus SetChannelMask(chip::EndpointId endpoint, uint8_t channelMask);
} // namespace Attributes
} // namespace ThreadNetworkDiagnostics

namespace WiFiNetworkDiagnostics {
namespace Attributes {
EmberAfStatus GetSecurityType(chip::EndpointId endpoint, uint8_t * securityType); // enum8
EmberAfStatus SetSecurityType(chip::EndpointId endpoint, uint8_t securityType);
EmberAfStatus GetWiFiVersion(chip::EndpointId endpoint, uint8_t * wiFiVersion); // enum8
EmberAfStatus SetWiFiVersion(chip::EndpointId endpoint, uint8_t wiFiVersion);
EmberAfStatus GetChannelNumber(chip::EndpointId endpoint, uint16_t * channelNumber); // int16u
EmberAfStatus SetChannelNumber(chip::EndpointId endpoint, uint16_t channelNumber);
EmberAfStatus GetRssi(chip::EndpointId endpoint, int8_t * rssi); // int8s
EmberAfStatus SetRssi(chip::EndpointId endpoint, int8_t rssi);
EmberAfStatus GetBeaconLostCount(chip::EndpointId endpoint, uint32_t * beaconLostCount); // int32u
EmberAfStatus SetBeaconLostCount(chip::EndpointId endpoint, uint32_t beaconLostCount);
EmberAfStatus GetBeaconRxCount(chip::EndpointId endpoint, uint32_t * beaconRxCount); // int32u
EmberAfStatus SetBeaconRxCount(chip::EndpointId endpoint, uint32_t beaconRxCount);
EmberAfStatus GetPacketMulticastRxCount(chip::EndpointId endpoint, uint32_t * packetMulticastRxCount); // int32u
EmberAfStatus SetPacketMulticastRxCount(chip::EndpointId endpoint, uint32_t packetMulticastRxCount);
EmberAfStatus GetPacketMulticastTxCount(chip::EndpointId endpoint, uint32_t * packetMulticastTxCount); // int32u
EmberAfStatus SetPacketMulticastTxCount(chip::EndpointId endpoint, uint32_t packetMulticastTxCount);
EmberAfStatus GetPacketUnicastRxCount(chip::EndpointId endpoint, uint32_t * packetUnicastRxCount); // int32u
EmberAfStatus SetPacketUnicastRxCount(chip::EndpointId endpoint, uint32_t packetUnicastRxCount);
EmberAfStatus GetPacketUnicastTxCount(chip::EndpointId endpoint, uint32_t * packetUnicastTxCount); // int32u
EmberAfStatus SetPacketUnicastTxCount(chip::EndpointId endpoint, uint32_t packetUnicastTxCount);
EmberAfStatus GetCurrentMaxRate(chip::EndpointId endpoint, uint64_t * currentMaxRate); // int64u
EmberAfStatus SetCurrentMaxRate(chip::EndpointId endpoint, uint64_t currentMaxRate);
EmberAfStatus GetOverrunCount(chip::EndpointId endpoint, uint64_t * overrunCount); // int64u
EmberAfStatus SetOverrunCount(chip::EndpointId endpoint, uint64_t overrunCount);
} // namespace Attributes
} // namespace WiFiNetworkDiagnostics

namespace EthernetNetworkDiagnostics {
namespace Attributes {
EmberAfStatus GetPHYRate(chip::EndpointId endpoint, uint8_t * pHYRate); // enum8
EmberAfStatus SetPHYRate(chip::EndpointId endpoint, uint8_t pHYRate);
EmberAfStatus GetFullDuplex(chip::EndpointId endpoint, uint8_t * fullDuplex); // boolean
EmberAfStatus SetFullDuplex(chip::EndpointId endpoint, uint8_t fullDuplex);
EmberAfStatus GetPacketRxCount(chip::EndpointId endpoint, uint64_t * packetRxCount); // int64u
EmberAfStatus SetPacketRxCount(chip::EndpointId endpoint, uint64_t packetRxCount);
EmberAfStatus GetPacketTxCount(chip::EndpointId endpoint, uint64_t * packetTxCount); // int64u
EmberAfStatus SetPacketTxCount(chip::EndpointId endpoint, uint64_t packetTxCount);
EmberAfStatus GetTxErrCount(chip::EndpointId endpoint, uint64_t * txErrCount); // int64u
EmberAfStatus SetTxErrCount(chip::EndpointId endpoint, uint64_t txErrCount);
EmberAfStatus GetCollisionCount(chip::EndpointId endpoint, uint64_t * collisionCount); // int64u
EmberAfStatus SetCollisionCount(chip::EndpointId endpoint, uint64_t collisionCount);
EmberAfStatus GetOverrunCount(chip::EndpointId endpoint, uint64_t * overrunCount); // int64u
EmberAfStatus SetOverrunCount(chip::EndpointId endpoint, uint64_t overrunCount);
EmberAfStatus GetCarrierDetect(chip::EndpointId endpoint, uint8_t * carrierDetect); // boolean
EmberAfStatus SetCarrierDetect(chip::EndpointId endpoint, uint8_t carrierDetect);
EmberAfStatus GetTimeSinceReset(chip::EndpointId endpoint, uint64_t * timeSinceReset); // int64u
EmberAfStatus SetTimeSinceReset(chip::EndpointId endpoint, uint64_t timeSinceReset);
} // namespace Attributes
} // namespace EthernetNetworkDiagnostics

namespace BridgedDeviceBasic {
namespace Attributes {
EmberAfStatus GetVendorID(chip::EndpointId endpoint, uint16_t * vendorID); // int16u
EmberAfStatus SetVendorID(chip::EndpointId endpoint, uint16_t vendorID);
EmberAfStatus GetHardwareVersion(chip::EndpointId endpoint, uint16_t * hardwareVersion); // int16u
EmberAfStatus SetHardwareVersion(chip::EndpointId endpoint, uint16_t hardwareVersion);
EmberAfStatus GetSoftwareVersion(chip::EndpointId endpoint, uint32_t * softwareVersion); // int32u
EmberAfStatus SetSoftwareVersion(chip::EndpointId endpoint, uint32_t softwareVersion);
EmberAfStatus GetReachable(chip::EndpointId endpoint, uint8_t * reachable); // boolean
EmberAfStatus SetReachable(chip::EndpointId endpoint, uint8_t reachable);
} // namespace Attributes
} // namespace BridgedDeviceBasic

namespace Switch {
namespace Attributes {
EmberAfStatus GetNumberOfPositions(chip::EndpointId endpoint, uint8_t * numberOfPositions); // int8u
EmberAfStatus SetNumberOfPositions(chip::EndpointId endpoint, uint8_t numberOfPositions);
EmberAfStatus GetCurrentPosition(chip::EndpointId endpoint, uint8_t * currentPosition); // int8u
EmberAfStatus SetCurrentPosition(chip::EndpointId endpoint, uint8_t currentPosition);
EmberAfStatus GetMultiPressMax(chip::EndpointId endpoint, uint8_t * multiPressMax); // int8u
EmberAfStatus SetMultiPressMax(chip::EndpointId endpoint, uint8_t multiPressMax);
} // namespace Attributes
} // namespace Switch

namespace OperationalCredentials {
namespace Attributes {
} // namespace Attributes
} // namespace OperationalCredentials

namespace FixedLabel {
namespace Attributes {
} // namespace Attributes
} // namespace FixedLabel

namespace ShadeConfiguration {
namespace Attributes {
EmberAfStatus GetPhysicalClosedLimit(chip::EndpointId endpoint, uint16_t * physicalClosedLimit); // int16u
EmberAfStatus SetPhysicalClosedLimit(chip::EndpointId endpoint, uint16_t physicalClosedLimit);
EmberAfStatus GetMotorStepSize(chip::EndpointId endpoint, uint8_t * motorStepSize); // int8u
EmberAfStatus SetMotorStepSize(chip::EndpointId endpoint, uint8_t motorStepSize);
EmberAfStatus GetStatus(chip::EndpointId endpoint, uint8_t * status); // bitmap8
EmberAfStatus SetStatus(chip::EndpointId endpoint, uint8_t status);
EmberAfStatus GetClosedLimit(chip::EndpointId endpoint, uint16_t * closedLimit); // int16u
EmberAfStatus SetClosedLimit(chip::EndpointId endpoint, uint16_t closedLimit);
EmberAfStatus GetMode(chip::EndpointId endpoint, uint8_t * mode); // enum8
EmberAfStatus SetMode(chip::EndpointId endpoint, uint8_t mode);
} // namespace Attributes
} // namespace ShadeConfiguration

namespace DoorLock {
namespace Attributes {
EmberAfStatus GetLockState(chip::EndpointId endpoint, uint8_t * lockState); // enum8
EmberAfStatus SetLockState(chip::EndpointId endpoint, uint8_t lockState);
EmberAfStatus GetLockType(chip::EndpointId endpoint, uint8_t * lockType); // enum8
EmberAfStatus SetLockType(chip::EndpointId endpoint, uint8_t lockType);
EmberAfStatus GetActuatorEnabled(chip::EndpointId endpoint, uint8_t * actuatorEnabled); // boolean
EmberAfStatus SetActuatorEnabled(chip::EndpointId endpoint, uint8_t actuatorEnabled);
EmberAfStatus GetDoorState(chip::EndpointId endpoint, uint8_t * doorState); // enum8
EmberAfStatus SetDoorState(chip::EndpointId endpoint, uint8_t doorState);
EmberAfStatus GetDoorOpenEvents(chip::EndpointId endpoint, uint32_t * doorOpenEvents); // int32u
EmberAfStatus SetDoorOpenEvents(chip::EndpointId endpoint, uint32_t doorOpenEvents);
EmberAfStatus GetDoorClosedEvents(chip::EndpointId endpoint, uint32_t * doorClosedEvents); // int32u
EmberAfStatus SetDoorClosedEvents(chip::EndpointId endpoint, uint32_t doorClosedEvents);
EmberAfStatus GetOpenPeriod(chip::EndpointId endpoint, uint16_t * openPeriod); // int16u
EmberAfStatus SetOpenPeriod(chip::EndpointId endpoint, uint16_t openPeriod);
EmberAfStatus GetNumLockRecordsSupported(chip::EndpointId endpoint, uint16_t * numLockRecordsSupported); // int16u
EmberAfStatus SetNumLockRecordsSupported(chip::EndpointId endpoint, uint16_t numLockRecordsSupported);
EmberAfStatus GetNumTotalUsersSupported(chip::EndpointId endpoint, uint16_t * numTotalUsersSupported); // int16u
EmberAfStatus SetNumTotalUsersSupported(chip::EndpointId endpoint, uint16_t numTotalUsersSupported);
EmberAfStatus GetNumPinUsersSupported(chip::EndpointId endpoint, uint16_t * numPinUsersSupported); // int16u
EmberAfStatus SetNumPinUsersSupported(chip::EndpointId endpoint, uint16_t numPinUsersSupported);
EmberAfStatus GetNumRfidUsersSupported(chip::EndpointId endpoint, uint16_t * numRfidUsersSupported); // int16u
EmberAfStatus SetNumRfidUsersSupported(chip::EndpointId endpoint, uint16_t numRfidUsersSupported);
EmberAfStatus GetNumWeekdaySchedulesSupportedPerUser(chip::EndpointId endpoint,
                                                     uint8_t * numWeekdaySchedulesSupportedPerUser); // int8u
EmberAfStatus SetNumWeekdaySchedulesSupportedPerUser(chip::EndpointId endpoint, uint8_t numWeekdaySchedulesSupportedPerUser);
EmberAfStatus GetNumYeardaySchedulesSupportedPerUser(chip::EndpointId endpoint,
                                                     uint8_t * numYeardaySchedulesSupportedPerUser); // int8u
EmberAfStatus SetNumYeardaySchedulesSupportedPerUser(chip::EndpointId endpoint, uint8_t numYeardaySchedulesSupportedPerUser);
EmberAfStatus GetNumHolidaySchedulesSupportedPerUser(chip::EndpointId endpoint,
                                                     uint8_t * numHolidaySchedulesSupportedPerUser); // int8u
EmberAfStatus SetNumHolidaySchedulesSupportedPerUser(chip::EndpointId endpoint, uint8_t numHolidaySchedulesSupportedPerUser);
EmberAfStatus GetMaxPinLength(chip::EndpointId endpoint, uint8_t * maxPinLength); // int8u
EmberAfStatus SetMaxPinLength(chip::EndpointId endpoint, uint8_t maxPinLength);
EmberAfStatus GetMinPinLength(chip::EndpointId endpoint, uint8_t * minPinLength); // int8u
EmberAfStatus SetMinPinLength(chip::EndpointId endpoint, uint8_t minPinLength);
EmberAfStatus GetMaxRfidCodeLength(chip::EndpointId endpoint, uint8_t * maxRfidCodeLength); // int8u
EmberAfStatus SetMaxRfidCodeLength(chip::EndpointId endpoint, uint8_t maxRfidCodeLength);
EmberAfStatus GetMinRfidCodeLength(chip::EndpointId endpoint, uint8_t * minRfidCodeLength); // int8u
EmberAfStatus SetMinRfidCodeLength(chip::EndpointId endpoint, uint8_t minRfidCodeLength);
EmberAfStatus GetEnableLogging(chip::EndpointId endpoint, uint8_t * enableLogging); // boolean
EmberAfStatus SetEnableLogging(chip::EndpointId endpoint, uint8_t enableLogging);
EmberAfStatus GetLedSettings(chip::EndpointId endpoint, uint8_t * ledSettings); // int8u
EmberAfStatus SetLedSettings(chip::EndpointId endpoint, uint8_t ledSettings);
EmberAfStatus GetAutoRelockTime(chip::EndpointId endpoint, uint32_t * autoRelockTime); // int32u
EmberAfStatus SetAutoRelockTime(chip::EndpointId endpoint, uint32_t autoRelockTime);
EmberAfStatus GetSoundVolume(chip::EndpointId endpoint, uint8_t * soundVolume); // int8u
EmberAfStatus SetSoundVolume(chip::EndpointId endpoint, uint8_t soundVolume);
EmberAfStatus GetOperatingMode(chip::EndpointId endpoint, uint8_t * operatingMode); // enum8
EmberAfStatus SetOperatingMode(chip::EndpointId endpoint, uint8_t operatingMode);
EmberAfStatus GetSupportedOperatingModes(chip::EndpointId endpoint, uint16_t * supportedOperatingModes); // bitmap16
EmberAfStatus SetSupportedOperatingModes(chip::EndpointId endpoint, uint16_t supportedOperatingModes);
EmberAfStatus GetDefaultConfigurationRegister(chip::EndpointId endpoint, uint16_t * defaultConfigurationRegister); // bitmap16
EmberAfStatus SetDefaultConfigurationRegister(chip::EndpointId endpoint, uint16_t defaultConfigurationRegister);
EmberAfStatus GetEnableLocalProgramming(chip::EndpointId endpoint, uint8_t * enableLocalProgramming); // boolean
EmberAfStatus SetEnableLocalProgramming(chip::EndpointId endpoint, uint8_t enableLocalProgramming);
EmberAfStatus GetEnableOneTouchLocking(chip::EndpointId endpoint, uint8_t * enableOneTouchLocking); // boolean
EmberAfStatus SetEnableOneTouchLocking(chip::EndpointId endpoint, uint8_t enableOneTouchLocking);
EmberAfStatus GetEnableInsideStatusLed(chip::EndpointId endpoint, uint8_t * enableInsideStatusLed); // boolean
EmberAfStatus SetEnableInsideStatusLed(chip::EndpointId endpoint, uint8_t enableInsideStatusLed);
EmberAfStatus GetEnablePrivacyModeButton(chip::EndpointId endpoint, uint8_t * enablePrivacyModeButton); // boolean
EmberAfStatus SetEnablePrivacyModeButton(chip::EndpointId endpoint, uint8_t enablePrivacyModeButton);
EmberAfStatus GetWrongCodeEntryLimit(chip::EndpointId endpoint, uint8_t * wrongCodeEntryLimit); // int8u
EmberAfStatus SetWrongCodeEntryLimit(chip::EndpointId endpoint, uint8_t wrongCodeEntryLimit);
EmberAfStatus GetUserCodeTemporaryDisableTime(chip::EndpointId endpoint, uint8_t * userCodeTemporaryDisableTime); // int8u
EmberAfStatus SetUserCodeTemporaryDisableTime(chip::EndpointId endpoint, uint8_t userCodeTemporaryDisableTime);
EmberAfStatus GetSendPinOverTheAir(chip::EndpointId endpoint, uint8_t * sendPinOverTheAir); // boolean
EmberAfStatus SetSendPinOverTheAir(chip::EndpointId endpoint, uint8_t sendPinOverTheAir);
EmberAfStatus GetRequirePinForRfOperation(chip::EndpointId endpoint, uint8_t * requirePinForRfOperation); // boolean
EmberAfStatus SetRequirePinForRfOperation(chip::EndpointId endpoint, uint8_t requirePinForRfOperation);
EmberAfStatus GetZigbeeSecurityLevel(chip::EndpointId endpoint, uint8_t * zigbeeSecurityLevel); // enum8
EmberAfStatus SetZigbeeSecurityLevel(chip::EndpointId endpoint, uint8_t zigbeeSecurityLevel);
EmberAfStatus GetAlarmMask(chip::EndpointId endpoint, uint16_t * alarmMask); // bitmap16
EmberAfStatus SetAlarmMask(chip::EndpointId endpoint, uint16_t alarmMask);
EmberAfStatus GetKeypadOperationEventMask(chip::EndpointId endpoint, uint16_t * keypadOperationEventMask); // bitmap16
EmberAfStatus SetKeypadOperationEventMask(chip::EndpointId endpoint, uint16_t keypadOperationEventMask);
EmberAfStatus GetRfOperationEventMask(chip::EndpointId endpoint, uint16_t * rfOperationEventMask); // bitmap16
EmberAfStatus SetRfOperationEventMask(chip::EndpointId endpoint, uint16_t rfOperationEventMask);
EmberAfStatus GetManualOperationEventMask(chip::EndpointId endpoint, uint16_t * manualOperationEventMask); // bitmap16
EmberAfStatus SetManualOperationEventMask(chip::EndpointId endpoint, uint16_t manualOperationEventMask);
EmberAfStatus GetRfidOperationEventMask(chip::EndpointId endpoint, uint16_t * rfidOperationEventMask); // bitmap16
EmberAfStatus SetRfidOperationEventMask(chip::EndpointId endpoint, uint16_t rfidOperationEventMask);
EmberAfStatus GetKeypadProgrammingEventMask(chip::EndpointId endpoint, uint16_t * keypadProgrammingEventMask); // bitmap16
EmberAfStatus SetKeypadProgrammingEventMask(chip::EndpointId endpoint, uint16_t keypadProgrammingEventMask);
EmberAfStatus GetRfProgrammingEventMask(chip::EndpointId endpoint, uint16_t * rfProgrammingEventMask); // bitmap16
EmberAfStatus SetRfProgrammingEventMask(chip::EndpointId endpoint, uint16_t rfProgrammingEventMask);
EmberAfStatus GetRfidProgrammingEventMask(chip::EndpointId endpoint, uint16_t * rfidProgrammingEventMask); // bitmap16
EmberAfStatus SetRfidProgrammingEventMask(chip::EndpointId endpoint, uint16_t rfidProgrammingEventMask);
} // namespace Attributes
} // namespace DoorLock

namespace WindowCovering {
namespace Attributes {
EmberAfStatus GetType(chip::EndpointId endpoint, uint8_t * type); // enum8
EmberAfStatus SetType(chip::EndpointId endpoint, uint8_t type);
EmberAfStatus GetPhysicalClosedLimitLift(chip::EndpointId endpoint, uint16_t * physicalClosedLimitLift); // int16u
EmberAfStatus SetPhysicalClosedLimitLift(chip::EndpointId endpoint, uint16_t physicalClosedLimitLift);
EmberAfStatus GetPhysicalClosedLimitTilt(chip::EndpointId endpoint, uint16_t * physicalClosedLimitTilt); // int16u
EmberAfStatus SetPhysicalClosedLimitTilt(chip::EndpointId endpoint, uint16_t physicalClosedLimitTilt);
EmberAfStatus GetCurrentPositionLift(chip::EndpointId endpoint, uint16_t * currentPositionLift); // int16u
EmberAfStatus SetCurrentPositionLift(chip::EndpointId endpoint, uint16_t currentPositionLift);
EmberAfStatus GetCurrentPositionTilt(chip::EndpointId endpoint, uint16_t * currentPositionTilt); // int16u
EmberAfStatus SetCurrentPositionTilt(chip::EndpointId endpoint, uint16_t currentPositionTilt);
EmberAfStatus GetNumberOfActuationsLift(chip::EndpointId endpoint, uint16_t * numberOfActuationsLift); // int16u
EmberAfStatus SetNumberOfActuationsLift(chip::EndpointId endpoint, uint16_t numberOfActuationsLift);
EmberAfStatus GetNumberOfActuationsTilt(chip::EndpointId endpoint, uint16_t * numberOfActuationsTilt); // int16u
EmberAfStatus SetNumberOfActuationsTilt(chip::EndpointId endpoint, uint16_t numberOfActuationsTilt);
EmberAfStatus GetConfigStatus(chip::EndpointId endpoint, uint8_t * configStatus); // bitmap8
EmberAfStatus SetConfigStatus(chip::EndpointId endpoint, uint8_t configStatus);
EmberAfStatus GetCurrentPositionLiftPercentage(chip::EndpointId endpoint, uint8_t * currentPositionLiftPercentage); // int8u
EmberAfStatus SetCurrentPositionLiftPercentage(chip::EndpointId endpoint, uint8_t currentPositionLiftPercentage);
EmberAfStatus GetCurrentPositionTiltPercentage(chip::EndpointId endpoint, uint8_t * currentPositionTiltPercentage); // int8u
EmberAfStatus SetCurrentPositionTiltPercentage(chip::EndpointId endpoint, uint8_t currentPositionTiltPercentage);
EmberAfStatus GetOperationalStatus(chip::EndpointId endpoint, uint8_t * operationalStatus); // bitmap8
EmberAfStatus SetOperationalStatus(chip::EndpointId endpoint, uint8_t operationalStatus);
EmberAfStatus GetTargetPositionLiftPercent100ths(chip::EndpointId endpoint, uint16_t * targetPositionLiftPercent100ths); // int16u
EmberAfStatus SetTargetPositionLiftPercent100ths(chip::EndpointId endpoint, uint16_t targetPositionLiftPercent100ths);
EmberAfStatus GetTargetPositionTiltPercent100ths(chip::EndpointId endpoint, uint16_t * targetPositionTiltPercent100ths); // int16u
EmberAfStatus SetTargetPositionTiltPercent100ths(chip::EndpointId endpoint, uint16_t targetPositionTiltPercent100ths);
EmberAfStatus GetEndProductType(chip::EndpointId endpoint, uint8_t * endProductType); // enum8
EmberAfStatus SetEndProductType(chip::EndpointId endpoint, uint8_t endProductType);
EmberAfStatus GetCurrentPositionLiftPercent100ths(chip::EndpointId endpoint, uint16_t * currentPositionLiftPercent100ths); // int16u
EmberAfStatus SetCurrentPositionLiftPercent100ths(chip::EndpointId endpoint, uint16_t currentPositionLiftPercent100ths);
EmberAfStatus GetCurrentPositionTiltPercent100ths(chip::EndpointId endpoint, uint16_t * currentPositionTiltPercent100ths); // int16u
EmberAfStatus SetCurrentPositionTiltPercent100ths(chip::EndpointId endpoint, uint16_t currentPositionTiltPercent100ths);
EmberAfStatus GetInstalledOpenLimitLift(chip::EndpointId endpoint, uint16_t * installedOpenLimitLift); // int16u
EmberAfStatus SetInstalledOpenLimitLift(chip::EndpointId endpoint, uint16_t installedOpenLimitLift);
EmberAfStatus GetInstalledClosedLimitLift(chip::EndpointId endpoint, uint16_t * installedClosedLimitLift); // int16u
EmberAfStatus SetInstalledClosedLimitLift(chip::EndpointId endpoint, uint16_t installedClosedLimitLift);
EmberAfStatus GetInstalledOpenLimitTilt(chip::EndpointId endpoint, uint16_t * installedOpenLimitTilt); // int16u
EmberAfStatus SetInstalledOpenLimitTilt(chip::EndpointId endpoint, uint16_t installedOpenLimitTilt);
EmberAfStatus GetInstalledClosedLimitTilt(chip::EndpointId endpoint, uint16_t * installedClosedLimitTilt); // int16u
EmberAfStatus SetInstalledClosedLimitTilt(chip::EndpointId endpoint, uint16_t installedClosedLimitTilt);
EmberAfStatus GetVelocityLift(chip::EndpointId endpoint, uint16_t * velocityLift); // int16u
EmberAfStatus SetVelocityLift(chip::EndpointId endpoint, uint16_t velocityLift);
EmberAfStatus GetAccelerationTimeLift(chip::EndpointId endpoint, uint16_t * accelerationTimeLift); // int16u
EmberAfStatus SetAccelerationTimeLift(chip::EndpointId endpoint, uint16_t accelerationTimeLift);
EmberAfStatus GetDecelerationTimeLift(chip::EndpointId endpoint, uint16_t * decelerationTimeLift); // int16u
EmberAfStatus SetDecelerationTimeLift(chip::EndpointId endpoint, uint16_t decelerationTimeLift);
EmberAfStatus GetMode(chip::EndpointId endpoint, uint8_t * mode); // bitmap8
EmberAfStatus SetMode(chip::EndpointId endpoint, uint8_t mode);
EmberAfStatus GetSafetyStatus(chip::EndpointId endpoint, uint16_t * safetyStatus); // bitmap16
EmberAfStatus SetSafetyStatus(chip::EndpointId endpoint, uint16_t safetyStatus);
} // namespace Attributes
} // namespace WindowCovering

namespace BarrierControl {
namespace Attributes {
EmberAfStatus GetBarrierMovingState(chip::EndpointId endpoint, uint8_t * barrierMovingState); // enum8
EmberAfStatus SetBarrierMovingState(chip::EndpointId endpoint, uint8_t barrierMovingState);
EmberAfStatus GetBarrierSafetyStatus(chip::EndpointId endpoint, uint16_t * barrierSafetyStatus); // bitmap16
EmberAfStatus SetBarrierSafetyStatus(chip::EndpointId endpoint, uint16_t barrierSafetyStatus);
EmberAfStatus GetBarrierCapabilities(chip::EndpointId endpoint, uint8_t * barrierCapabilities); // bitmap8
EmberAfStatus SetBarrierCapabilities(chip::EndpointId endpoint, uint8_t barrierCapabilities);
EmberAfStatus GetBarrierOpenEvents(chip::EndpointId endpoint, uint16_t * barrierOpenEvents); // int16u
EmberAfStatus SetBarrierOpenEvents(chip::EndpointId endpoint, uint16_t barrierOpenEvents);
EmberAfStatus GetBarrierCloseEvents(chip::EndpointId endpoint, uint16_t * barrierCloseEvents); // int16u
EmberAfStatus SetBarrierCloseEvents(chip::EndpointId endpoint, uint16_t barrierCloseEvents);
EmberAfStatus GetBarrierCommandOpenEvents(chip::EndpointId endpoint, uint16_t * barrierCommandOpenEvents); // int16u
EmberAfStatus SetBarrierCommandOpenEvents(chip::EndpointId endpoint, uint16_t barrierCommandOpenEvents);
EmberAfStatus GetBarrierCommandCloseEvents(chip::EndpointId endpoint, uint16_t * barrierCommandCloseEvents); // int16u
EmberAfStatus SetBarrierCommandCloseEvents(chip::EndpointId endpoint, uint16_t barrierCommandCloseEvents);
EmberAfStatus GetBarrierOpenPeriod(chip::EndpointId endpoint, uint16_t * barrierOpenPeriod); // int16u
EmberAfStatus SetBarrierOpenPeriod(chip::EndpointId endpoint, uint16_t barrierOpenPeriod);
EmberAfStatus GetBarrierClosePeriod(chip::EndpointId endpoint, uint16_t * barrierClosePeriod); // int16u
EmberAfStatus SetBarrierClosePeriod(chip::EndpointId endpoint, uint16_t barrierClosePeriod);
EmberAfStatus GetBarrierPosition(chip::EndpointId endpoint, uint8_t * barrierPosition); // int8u
EmberAfStatus SetBarrierPosition(chip::EndpointId endpoint, uint8_t barrierPosition);
} // namespace Attributes
} // namespace BarrierControl

namespace PumpConfigurationAndControl {
namespace Attributes {
EmberAfStatus GetMaxPressure(chip::EndpointId endpoint, int16_t * maxPressure); // int16s
EmberAfStatus SetMaxPressure(chip::EndpointId endpoint, int16_t maxPressure);
EmberAfStatus GetMaxSpeed(chip::EndpointId endpoint, uint16_t * maxSpeed); // int16u
EmberAfStatus SetMaxSpeed(chip::EndpointId endpoint, uint16_t maxSpeed);
EmberAfStatus GetMaxFlow(chip::EndpointId endpoint, uint16_t * maxFlow); // int16u
EmberAfStatus SetMaxFlow(chip::EndpointId endpoint, uint16_t maxFlow);
EmberAfStatus GetMinConstPressure(chip::EndpointId endpoint, int16_t * minConstPressure); // int16s
EmberAfStatus SetMinConstPressure(chip::EndpointId endpoint, int16_t minConstPressure);
EmberAfStatus GetMaxConstPressure(chip::EndpointId endpoint, int16_t * maxConstPressure); // int16s
EmberAfStatus SetMaxConstPressure(chip::EndpointId endpoint, int16_t maxConstPressure);
EmberAfStatus GetMinCompPressure(chip::EndpointId endpoint, int16_t * minCompPressure); // int16s
EmberAfStatus SetMinCompPressure(chip::EndpointId endpoint, int16_t minCompPressure);
EmberAfStatus GetMaxCompPressure(chip::EndpointId endpoint, int16_t * maxCompPressure); // int16s
EmberAfStatus SetMaxCompPressure(chip::EndpointId endpoint, int16_t maxCompPressure);
EmberAfStatus GetMinConstSpeed(chip::EndpointId endpoint, uint16_t * minConstSpeed); // int16u
EmberAfStatus SetMinConstSpeed(chip::EndpointId endpoint, uint16_t minConstSpeed);
EmberAfStatus GetMaxConstSpeed(chip::EndpointId endpoint, uint16_t * maxConstSpeed); // int16u
EmberAfStatus SetMaxConstSpeed(chip::EndpointId endpoint, uint16_t maxConstSpeed);
EmberAfStatus GetMinConstFlow(chip::EndpointId endpoint, uint16_t * minConstFlow); // int16u
EmberAfStatus SetMinConstFlow(chip::EndpointId endpoint, uint16_t minConstFlow);
EmberAfStatus GetMaxConstFlow(chip::EndpointId endpoint, uint16_t * maxConstFlow); // int16u
EmberAfStatus SetMaxConstFlow(chip::EndpointId endpoint, uint16_t maxConstFlow);
EmberAfStatus GetMinConstTemp(chip::EndpointId endpoint, int16_t * minConstTemp); // int16s
EmberAfStatus SetMinConstTemp(chip::EndpointId endpoint, int16_t minConstTemp);
EmberAfStatus GetMaxConstTemp(chip::EndpointId endpoint, int16_t * maxConstTemp); // int16s
EmberAfStatus SetMaxConstTemp(chip::EndpointId endpoint, int16_t maxConstTemp);
EmberAfStatus GetPumpStatus(chip::EndpointId endpoint, uint16_t * pumpStatus); // bitmap16
EmberAfStatus SetPumpStatus(chip::EndpointId endpoint, uint16_t pumpStatus);
EmberAfStatus GetEffectiveOperationMode(chip::EndpointId endpoint, uint8_t * effectiveOperationMode); // enum8
EmberAfStatus SetEffectiveOperationMode(chip::EndpointId endpoint, uint8_t effectiveOperationMode);
EmberAfStatus GetEffectiveControlMode(chip::EndpointId endpoint, uint8_t * effectiveControlMode); // enum8
EmberAfStatus SetEffectiveControlMode(chip::EndpointId endpoint, uint8_t effectiveControlMode);
EmberAfStatus GetCapacity(chip::EndpointId endpoint, int16_t * capacity); // int16s
EmberAfStatus SetCapacity(chip::EndpointId endpoint, int16_t capacity);
EmberAfStatus GetSpeed(chip::EndpointId endpoint, uint16_t * speed); // int16u
EmberAfStatus SetSpeed(chip::EndpointId endpoint, uint16_t speed);
EmberAfStatus GetLifetimeEnergyConsumed(chip::EndpointId endpoint, uint32_t * lifetimeEnergyConsumed); // int32u
EmberAfStatus SetLifetimeEnergyConsumed(chip::EndpointId endpoint, uint32_t lifetimeEnergyConsumed);
EmberAfStatus GetOperationMode(chip::EndpointId endpoint, uint8_t * operationMode); // enum8
EmberAfStatus SetOperationMode(chip::EndpointId endpoint, uint8_t operationMode);
EmberAfStatus GetControlMode(chip::EndpointId endpoint, uint8_t * controlMode); // enum8
EmberAfStatus SetControlMode(chip::EndpointId endpoint, uint8_t controlMode);
EmberAfStatus GetAlarmMask(chip::EndpointId endpoint, uint16_t * alarmMask); // bitmap16
EmberAfStatus SetAlarmMask(chip::EndpointId endpoint, uint16_t alarmMask);
} // namespace Attributes
} // namespace PumpConfigurationAndControl

namespace Thermostat {
namespace Attributes {
EmberAfStatus GetLocalTemperature(chip::EndpointId endpoint, int16_t * localTemperature); // int16s
EmberAfStatus SetLocalTemperature(chip::EndpointId endpoint, int16_t localTemperature);
EmberAfStatus GetOutdoorTemperature(chip::EndpointId endpoint, int16_t * outdoorTemperature); // int16s
EmberAfStatus SetOutdoorTemperature(chip::EndpointId endpoint, int16_t outdoorTemperature);
EmberAfStatus GetOccupancy(chip::EndpointId endpoint, uint8_t * occupancy); // bitmap8
EmberAfStatus SetOccupancy(chip::EndpointId endpoint, uint8_t occupancy);
EmberAfStatus GetAbsMinHeatSetpointLimit(chip::EndpointId endpoint, int16_t * absMinHeatSetpointLimit); // int16s
EmberAfStatus SetAbsMinHeatSetpointLimit(chip::EndpointId endpoint, int16_t absMinHeatSetpointLimit);
EmberAfStatus GetAbsMaxHeatSetpointLimit(chip::EndpointId endpoint, int16_t * absMaxHeatSetpointLimit); // int16s
EmberAfStatus SetAbsMaxHeatSetpointLimit(chip::EndpointId endpoint, int16_t absMaxHeatSetpointLimit);
EmberAfStatus GetAbsMinCoolSetpointLimit(chip::EndpointId endpoint, int16_t * absMinCoolSetpointLimit); // int16s
EmberAfStatus SetAbsMinCoolSetpointLimit(chip::EndpointId endpoint, int16_t absMinCoolSetpointLimit);
EmberAfStatus GetAbsMaxCoolSetpointLimit(chip::EndpointId endpoint, int16_t * absMaxCoolSetpointLimit); // int16s
EmberAfStatus SetAbsMaxCoolSetpointLimit(chip::EndpointId endpoint, int16_t absMaxCoolSetpointLimit);
EmberAfStatus GetPiCoolingDemand(chip::EndpointId endpoint, uint8_t * piCoolingDemand); // int8u
EmberAfStatus SetPiCoolingDemand(chip::EndpointId endpoint, uint8_t piCoolingDemand);
EmberAfStatus GetPiHeatingDemand(chip::EndpointId endpoint, uint8_t * piHeatingDemand); // int8u
EmberAfStatus SetPiHeatingDemand(chip::EndpointId endpoint, uint8_t piHeatingDemand);
EmberAfStatus GetHvacSystemTypeConfiguration(chip::EndpointId endpoint, uint8_t * hvacSystemTypeConfiguration); // bitmap8
EmberAfStatus SetHvacSystemTypeConfiguration(chip::EndpointId endpoint, uint8_t hvacSystemTypeConfiguration);
EmberAfStatus GetLocalTemperatureCalibration(chip::EndpointId endpoint, int8_t * localTemperatureCalibration); // int8s
EmberAfStatus SetLocalTemperatureCalibration(chip::EndpointId endpoint, int8_t localTemperatureCalibration);
EmberAfStatus GetOccupiedCoolingSetpoint(chip::EndpointId endpoint, int16_t * occupiedCoolingSetpoint); // int16s
EmberAfStatus SetOccupiedCoolingSetpoint(chip::EndpointId endpoint, int16_t occupiedCoolingSetpoint);
EmberAfStatus GetOccupiedHeatingSetpoint(chip::EndpointId endpoint, int16_t * occupiedHeatingSetpoint); // int16s
EmberAfStatus SetOccupiedHeatingSetpoint(chip::EndpointId endpoint, int16_t occupiedHeatingSetpoint);
EmberAfStatus GetUnoccupiedCoolingSetpoint(chip::EndpointId endpoint, int16_t * unoccupiedCoolingSetpoint); // int16s
EmberAfStatus SetUnoccupiedCoolingSetpoint(chip::EndpointId endpoint, int16_t unoccupiedCoolingSetpoint);
EmberAfStatus GetUnoccupiedHeatingSetpoint(chip::EndpointId endpoint, int16_t * unoccupiedHeatingSetpoint); // int16s
EmberAfStatus SetUnoccupiedHeatingSetpoint(chip::EndpointId endpoint, int16_t unoccupiedHeatingSetpoint);
EmberAfStatus GetMinHeatSetpointLimit(chip::EndpointId endpoint, int16_t * minHeatSetpointLimit); // int16s
EmberAfStatus SetMinHeatSetpointLimit(chip::EndpointId endpoint, int16_t minHeatSetpointLimit);
EmberAfStatus GetMaxHeatSetpointLimit(chip::EndpointId endpoint, int16_t * maxHeatSetpointLimit); // int16s
EmberAfStatus SetMaxHeatSetpointLimit(chip::EndpointId endpoint, int16_t maxHeatSetpointLimit);
EmberAfStatus GetMinCoolSetpointLimit(chip::EndpointId endpoint, int16_t * minCoolSetpointLimit); // int16s
EmberAfStatus SetMinCoolSetpointLimit(chip::EndpointId endpoint, int16_t minCoolSetpointLimit);
EmberAfStatus GetMaxCoolSetpointLimit(chip::EndpointId endpoint, int16_t * maxCoolSetpointLimit); // int16s
EmberAfStatus SetMaxCoolSetpointLimit(chip::EndpointId endpoint, int16_t maxCoolSetpointLimit);
EmberAfStatus GetMinSetpointDeadBand(chip::EndpointId endpoint, int8_t * minSetpointDeadBand); // int8s
EmberAfStatus SetMinSetpointDeadBand(chip::EndpointId endpoint, int8_t minSetpointDeadBand);
EmberAfStatus GetRemoteSensing(chip::EndpointId endpoint, uint8_t * remoteSensing); // bitmap8
EmberAfStatus SetRemoteSensing(chip::EndpointId endpoint, uint8_t remoteSensing);
EmberAfStatus GetControlSequenceOfOperation(chip::EndpointId endpoint, uint8_t * controlSequenceOfOperation); // enum8
EmberAfStatus SetControlSequenceOfOperation(chip::EndpointId endpoint, uint8_t controlSequenceOfOperation);
EmberAfStatus GetSystemMode(chip::EndpointId endpoint, uint8_t * systemMode); // enum8
EmberAfStatus SetSystemMode(chip::EndpointId endpoint, uint8_t systemMode);
EmberAfStatus GetAlarmMask(chip::EndpointId endpoint, uint8_t * alarmMask); // bitmap8
EmberAfStatus SetAlarmMask(chip::EndpointId endpoint, uint8_t alarmMask);
EmberAfStatus GetThermostatRunningMode(chip::EndpointId endpoint, uint8_t * thermostatRunningMode); // enum8
EmberAfStatus SetThermostatRunningMode(chip::EndpointId endpoint, uint8_t thermostatRunningMode);
EmberAfStatus GetStartOfWeek(chip::EndpointId endpoint, uint8_t * startOfWeek); // enum8
EmberAfStatus SetStartOfWeek(chip::EndpointId endpoint, uint8_t startOfWeek);
EmberAfStatus GetNumberOfWeeklyTransitions(chip::EndpointId endpoint, uint8_t * numberOfWeeklyTransitions); // int8u
EmberAfStatus SetNumberOfWeeklyTransitions(chip::EndpointId endpoint, uint8_t numberOfWeeklyTransitions);
EmberAfStatus GetNumberOfDailyTransitions(chip::EndpointId endpoint, uint8_t * numberOfDailyTransitions); // int8u
EmberAfStatus SetNumberOfDailyTransitions(chip::EndpointId endpoint, uint8_t numberOfDailyTransitions);
EmberAfStatus GetTemperatureSetpointHold(chip::EndpointId endpoint, uint8_t * temperatureSetpointHold); // enum8
EmberAfStatus SetTemperatureSetpointHold(chip::EndpointId endpoint, uint8_t temperatureSetpointHold);
EmberAfStatus GetTemperatureSetpointHoldDuration(chip::EndpointId endpoint, uint16_t * temperatureSetpointHoldDuration); // int16u
EmberAfStatus SetTemperatureSetpointHoldDuration(chip::EndpointId endpoint, uint16_t temperatureSetpointHoldDuration);
EmberAfStatus GetThermostatProgrammingOperationMode(chip::EndpointId endpoint,
                                                    uint8_t * thermostatProgrammingOperationMode); // bitmap8
EmberAfStatus SetThermostatProgrammingOperationMode(chip::EndpointId endpoint, uint8_t thermostatProgrammingOperationMode);
EmberAfStatus GetHvacRelayState(chip::EndpointId endpoint, uint16_t * hvacRelayState); // bitmap16
EmberAfStatus SetHvacRelayState(chip::EndpointId endpoint, uint16_t hvacRelayState);
EmberAfStatus GetSetpointChangeSource(chip::EndpointId endpoint, uint8_t * setpointChangeSource); // enum8
EmberAfStatus SetSetpointChangeSource(chip::EndpointId endpoint, uint8_t setpointChangeSource);
EmberAfStatus GetSetpointChangeAmount(chip::EndpointId endpoint, int16_t * setpointChangeAmount); // int16s
EmberAfStatus SetSetpointChangeAmount(chip::EndpointId endpoint, int16_t setpointChangeAmount);
EmberAfStatus GetSetpointChangeSourceTimestamp(chip::EndpointId endpoint,
                                               /* TYPE WARNING: utc defaults to */ uint8_t ** setpointChangeSourceTimestamp); // utc
EmberAfStatus SetSetpointChangeSourceTimestamp(chip::EndpointId endpoint,
                                               /* TYPE WARNING: utc defaults to */ uint8_t * setpointChangeSourceTimestamp);
EmberAfStatus GetAcType(chip::EndpointId endpoint, uint8_t * acType); // enum8
EmberAfStatus SetAcType(chip::EndpointId endpoint, uint8_t acType);
EmberAfStatus GetAcCapacity(chip::EndpointId endpoint, uint16_t * acCapacity); // int16u
EmberAfStatus SetAcCapacity(chip::EndpointId endpoint, uint16_t acCapacity);
EmberAfStatus GetAcRefrigerantType(chip::EndpointId endpoint, uint8_t * acRefrigerantType); // enum8
EmberAfStatus SetAcRefrigerantType(chip::EndpointId endpoint, uint8_t acRefrigerantType);
EmberAfStatus GetAcCompressor(chip::EndpointId endpoint, uint8_t * acCompressor); // enum8
EmberAfStatus SetAcCompressor(chip::EndpointId endpoint, uint8_t acCompressor);
EmberAfStatus GetAcErrorCode(chip::EndpointId endpoint, uint32_t * acErrorCode); // bitmap32
EmberAfStatus SetAcErrorCode(chip::EndpointId endpoint, uint32_t acErrorCode);
EmberAfStatus GetAcLouverPosition(chip::EndpointId endpoint, uint8_t * acLouverPosition); // enum8
EmberAfStatus SetAcLouverPosition(chip::EndpointId endpoint, uint8_t acLouverPosition);
EmberAfStatus GetAcCoilTemperature(chip::EndpointId endpoint, int16_t * acCoilTemperature); // int16s
EmberAfStatus SetAcCoilTemperature(chip::EndpointId endpoint, int16_t acCoilTemperature);
EmberAfStatus GetAcCapacityFormat(chip::EndpointId endpoint, uint8_t * acCapacityFormat); // enum8
EmberAfStatus SetAcCapacityFormat(chip::EndpointId endpoint, uint8_t acCapacityFormat);
} // namespace Attributes
} // namespace Thermostat

namespace FanControl {
namespace Attributes {
EmberAfStatus GetFanMode(chip::EndpointId endpoint, uint8_t * fanMode); // enum8
EmberAfStatus SetFanMode(chip::EndpointId endpoint, uint8_t fanMode);
EmberAfStatus GetFanModeSequence(chip::EndpointId endpoint, uint8_t * fanModeSequence); // enum8
EmberAfStatus SetFanModeSequence(chip::EndpointId endpoint, uint8_t fanModeSequence);
} // namespace Attributes
} // namespace FanControl

namespace DehumidificationControl {
namespace Attributes {
EmberAfStatus GetRelativeHumidity(chip::EndpointId endpoint, uint8_t * relativeHumidity); // int8u
EmberAfStatus SetRelativeHumidity(chip::EndpointId endpoint, uint8_t relativeHumidity);
EmberAfStatus GetDehumidificationCooling(chip::EndpointId endpoint, uint8_t * dehumidificationCooling); // int8u
EmberAfStatus SetDehumidificationCooling(chip::EndpointId endpoint, uint8_t dehumidificationCooling);
EmberAfStatus GetRhDehumidificationSetpoint(chip::EndpointId endpoint, uint8_t * rhDehumidificationSetpoint); // int8u
EmberAfStatus SetRhDehumidificationSetpoint(chip::EndpointId endpoint, uint8_t rhDehumidificationSetpoint);
EmberAfStatus GetRelativeHumidityMode(chip::EndpointId endpoint, uint8_t * relativeHumidityMode); // enum8
EmberAfStatus SetRelativeHumidityMode(chip::EndpointId endpoint, uint8_t relativeHumidityMode);
EmberAfStatus GetDehumidificationLockout(chip::EndpointId endpoint, uint8_t * dehumidificationLockout); // enum8
EmberAfStatus SetDehumidificationLockout(chip::EndpointId endpoint, uint8_t dehumidificationLockout);
EmberAfStatus GetDehumidificationHysteresis(chip::EndpointId endpoint, uint8_t * dehumidificationHysteresis); // int8u
EmberAfStatus SetDehumidificationHysteresis(chip::EndpointId endpoint, uint8_t dehumidificationHysteresis);
EmberAfStatus GetDehumidificationMaxCool(chip::EndpointId endpoint, uint8_t * dehumidificationMaxCool); // int8u
EmberAfStatus SetDehumidificationMaxCool(chip::EndpointId endpoint, uint8_t dehumidificationMaxCool);
EmberAfStatus GetRelativeHumidityDisplay(chip::EndpointId endpoint, uint8_t * relativeHumidityDisplay); // enum8
EmberAfStatus SetRelativeHumidityDisplay(chip::EndpointId endpoint, uint8_t relativeHumidityDisplay);
} // namespace Attributes
} // namespace DehumidificationControl

namespace ThermostatUserInterfaceConfiguration {
namespace Attributes {
EmberAfStatus GetTemperatureDisplayMode(chip::EndpointId endpoint, uint8_t * temperatureDisplayMode); // enum8
EmberAfStatus SetTemperatureDisplayMode(chip::EndpointId endpoint, uint8_t temperatureDisplayMode);
EmberAfStatus GetKeypadLockout(chip::EndpointId endpoint, uint8_t * keypadLockout); // enum8
EmberAfStatus SetKeypadLockout(chip::EndpointId endpoint, uint8_t keypadLockout);
EmberAfStatus GetScheduleProgrammingVisibility(chip::EndpointId endpoint, uint8_t * scheduleProgrammingVisibility); // enum8
EmberAfStatus SetScheduleProgrammingVisibility(chip::EndpointId endpoint, uint8_t scheduleProgrammingVisibility);
} // namespace Attributes
} // namespace ThermostatUserInterfaceConfiguration

namespace ColorControl {
namespace Attributes {
EmberAfStatus GetCurrentHue(chip::EndpointId endpoint, uint8_t * currentHue); // int8u
EmberAfStatus SetCurrentHue(chip::EndpointId endpoint, uint8_t currentHue);
EmberAfStatus GetCurrentSaturation(chip::EndpointId endpoint, uint8_t * currentSaturation); // int8u
EmberAfStatus SetCurrentSaturation(chip::EndpointId endpoint, uint8_t currentSaturation);
EmberAfStatus GetRemainingTime(chip::EndpointId endpoint, uint16_t * remainingTime); // int16u
EmberAfStatus SetRemainingTime(chip::EndpointId endpoint, uint16_t remainingTime);
EmberAfStatus GetCurrentX(chip::EndpointId endpoint, uint16_t * currentX); // int16u
EmberAfStatus SetCurrentX(chip::EndpointId endpoint, uint16_t currentX);
EmberAfStatus GetCurrentY(chip::EndpointId endpoint, uint16_t * currentY); // int16u
EmberAfStatus SetCurrentY(chip::EndpointId endpoint, uint16_t currentY);
EmberAfStatus GetDriftCompensation(chip::EndpointId endpoint, uint8_t * driftCompensation); // enum8
EmberAfStatus SetDriftCompensation(chip::EndpointId endpoint, uint8_t driftCompensation);
EmberAfStatus GetColorTemperature(chip::EndpointId endpoint, uint16_t * colorTemperature); // int16u
EmberAfStatus SetColorTemperature(chip::EndpointId endpoint, uint16_t colorTemperature);
EmberAfStatus GetColorMode(chip::EndpointId endpoint, uint8_t * colorMode); // enum8
EmberAfStatus SetColorMode(chip::EndpointId endpoint, uint8_t colorMode);
EmberAfStatus GetColorControlOptions(chip::EndpointId endpoint, uint8_t * colorControlOptions); // bitmap8
EmberAfStatus SetColorControlOptions(chip::EndpointId endpoint, uint8_t colorControlOptions);
EmberAfStatus GetNumberOfPrimaries(chip::EndpointId endpoint, uint8_t * numberOfPrimaries); // int8u
EmberAfStatus SetNumberOfPrimaries(chip::EndpointId endpoint, uint8_t numberOfPrimaries);
EmberAfStatus GetPrimary1X(chip::EndpointId endpoint, uint16_t * primary1X); // int16u
EmberAfStatus SetPrimary1X(chip::EndpointId endpoint, uint16_t primary1X);
EmberAfStatus GetPrimary1Y(chip::EndpointId endpoint, uint16_t * primary1Y); // int16u
EmberAfStatus SetPrimary1Y(chip::EndpointId endpoint, uint16_t primary1Y);
EmberAfStatus GetPrimary1Intensity(chip::EndpointId endpoint, uint8_t * primary1Intensity); // int8u
EmberAfStatus SetPrimary1Intensity(chip::EndpointId endpoint, uint8_t primary1Intensity);
EmberAfStatus GetPrimary2X(chip::EndpointId endpoint, uint16_t * primary2X); // int16u
EmberAfStatus SetPrimary2X(chip::EndpointId endpoint, uint16_t primary2X);
EmberAfStatus GetPrimary2Y(chip::EndpointId endpoint, uint16_t * primary2Y); // int16u
EmberAfStatus SetPrimary2Y(chip::EndpointId endpoint, uint16_t primary2Y);
EmberAfStatus GetPrimary2Intensity(chip::EndpointId endpoint, uint8_t * primary2Intensity); // int8u
EmberAfStatus SetPrimary2Intensity(chip::EndpointId endpoint, uint8_t primary2Intensity);
EmberAfStatus GetPrimary3X(chip::EndpointId endpoint, uint16_t * primary3X); // int16u
EmberAfStatus SetPrimary3X(chip::EndpointId endpoint, uint16_t primary3X);
EmberAfStatus GetPrimary3Y(chip::EndpointId endpoint, uint16_t * primary3Y); // int16u
EmberAfStatus SetPrimary3Y(chip::EndpointId endpoint, uint16_t primary3Y);
EmberAfStatus GetPrimary3Intensity(chip::EndpointId endpoint, uint8_t * primary3Intensity); // int8u
EmberAfStatus SetPrimary3Intensity(chip::EndpointId endpoint, uint8_t primary3Intensity);
EmberAfStatus GetPrimary4X(chip::EndpointId endpoint, uint16_t * primary4X); // int16u
EmberAfStatus SetPrimary4X(chip::EndpointId endpoint, uint16_t primary4X);
EmberAfStatus GetPrimary4Y(chip::EndpointId endpoint, uint16_t * primary4Y); // int16u
EmberAfStatus SetPrimary4Y(chip::EndpointId endpoint, uint16_t primary4Y);
EmberAfStatus GetPrimary4Intensity(chip::EndpointId endpoint, uint8_t * primary4Intensity); // int8u
EmberAfStatus SetPrimary4Intensity(chip::EndpointId endpoint, uint8_t primary4Intensity);
EmberAfStatus GetPrimary5X(chip::EndpointId endpoint, uint16_t * primary5X); // int16u
EmberAfStatus SetPrimary5X(chip::EndpointId endpoint, uint16_t primary5X);
EmberAfStatus GetPrimary5Y(chip::EndpointId endpoint, uint16_t * primary5Y); // int16u
EmberAfStatus SetPrimary5Y(chip::EndpointId endpoint, uint16_t primary5Y);
EmberAfStatus GetPrimary5Intensity(chip::EndpointId endpoint, uint8_t * primary5Intensity); // int8u
EmberAfStatus SetPrimary5Intensity(chip::EndpointId endpoint, uint8_t primary5Intensity);
EmberAfStatus GetPrimary6X(chip::EndpointId endpoint, uint16_t * primary6X); // int16u
EmberAfStatus SetPrimary6X(chip::EndpointId endpoint, uint16_t primary6X);
EmberAfStatus GetPrimary6Y(chip::EndpointId endpoint, uint16_t * primary6Y); // int16u
EmberAfStatus SetPrimary6Y(chip::EndpointId endpoint, uint16_t primary6Y);
EmberAfStatus GetPrimary6Intensity(chip::EndpointId endpoint, uint8_t * primary6Intensity); // int8u
EmberAfStatus SetPrimary6Intensity(chip::EndpointId endpoint, uint8_t primary6Intensity);
EmberAfStatus GetWhitePointX(chip::EndpointId endpoint, uint16_t * whitePointX); // int16u
EmberAfStatus SetWhitePointX(chip::EndpointId endpoint, uint16_t whitePointX);
EmberAfStatus GetWhitePointY(chip::EndpointId endpoint, uint16_t * whitePointY); // int16u
EmberAfStatus SetWhitePointY(chip::EndpointId endpoint, uint16_t whitePointY);
EmberAfStatus GetColorPointRX(chip::EndpointId endpoint, uint16_t * colorPointRX); // int16u
EmberAfStatus SetColorPointRX(chip::EndpointId endpoint, uint16_t colorPointRX);
EmberAfStatus GetColorPointRY(chip::EndpointId endpoint, uint16_t * colorPointRY); // int16u
EmberAfStatus SetColorPointRY(chip::EndpointId endpoint, uint16_t colorPointRY);
EmberAfStatus GetColorPointRIntensity(chip::EndpointId endpoint, uint8_t * colorPointRIntensity); // int8u
EmberAfStatus SetColorPointRIntensity(chip::EndpointId endpoint, uint8_t colorPointRIntensity);
EmberAfStatus GetColorPointGX(chip::EndpointId endpoint, uint16_t * colorPointGX); // int16u
EmberAfStatus SetColorPointGX(chip::EndpointId endpoint, uint16_t colorPointGX);
EmberAfStatus GetColorPointGY(chip::EndpointId endpoint, uint16_t * colorPointGY); // int16u
EmberAfStatus SetColorPointGY(chip::EndpointId endpoint, uint16_t colorPointGY);
EmberAfStatus GetColorPointGIntensity(chip::EndpointId endpoint, uint8_t * colorPointGIntensity); // int8u
EmberAfStatus SetColorPointGIntensity(chip::EndpointId endpoint, uint8_t colorPointGIntensity);
EmberAfStatus GetColorPointBX(chip::EndpointId endpoint, uint16_t * colorPointBX); // int16u
EmberAfStatus SetColorPointBX(chip::EndpointId endpoint, uint16_t colorPointBX);
EmberAfStatus GetColorPointBY(chip::EndpointId endpoint, uint16_t * colorPointBY); // int16u
EmberAfStatus SetColorPointBY(chip::EndpointId endpoint, uint16_t colorPointBY);
EmberAfStatus GetColorPointBIntensity(chip::EndpointId endpoint, uint8_t * colorPointBIntensity); // int8u
EmberAfStatus SetColorPointBIntensity(chip::EndpointId endpoint, uint8_t colorPointBIntensity);
EmberAfStatus GetEnhancedCurrentHue(chip::EndpointId endpoint, uint16_t * enhancedCurrentHue); // int16u
EmberAfStatus SetEnhancedCurrentHue(chip::EndpointId endpoint, uint16_t enhancedCurrentHue);
EmberAfStatus GetEnhancedColorMode(chip::EndpointId endpoint, uint8_t * enhancedColorMode); // enum8
EmberAfStatus SetEnhancedColorMode(chip::EndpointId endpoint, uint8_t enhancedColorMode);
EmberAfStatus GetColorLoopActive(chip::EndpointId endpoint, uint8_t * colorLoopActive); // int8u
EmberAfStatus SetColorLoopActive(chip::EndpointId endpoint, uint8_t colorLoopActive);
EmberAfStatus GetColorLoopDirection(chip::EndpointId endpoint, uint8_t * colorLoopDirection); // int8u
EmberAfStatus SetColorLoopDirection(chip::EndpointId endpoint, uint8_t colorLoopDirection);
EmberAfStatus GetColorLoopTime(chip::EndpointId endpoint, uint16_t * colorLoopTime); // int16u
EmberAfStatus SetColorLoopTime(chip::EndpointId endpoint, uint16_t colorLoopTime);
EmberAfStatus GetColorLoopStartEnhancedHue(chip::EndpointId endpoint, uint16_t * colorLoopStartEnhancedHue); // int16u
EmberAfStatus SetColorLoopStartEnhancedHue(chip::EndpointId endpoint, uint16_t colorLoopStartEnhancedHue);
EmberAfStatus GetColorLoopStoredEnhancedHue(chip::EndpointId endpoint, uint16_t * colorLoopStoredEnhancedHue); // int16u
EmberAfStatus SetColorLoopStoredEnhancedHue(chip::EndpointId endpoint, uint16_t colorLoopStoredEnhancedHue);
EmberAfStatus GetColorCapabilities(chip::EndpointId endpoint, uint16_t * colorCapabilities); // bitmap16
EmberAfStatus SetColorCapabilities(chip::EndpointId endpoint, uint16_t colorCapabilities);
EmberAfStatus GetColorTempPhysicalMin(chip::EndpointId endpoint, uint16_t * colorTempPhysicalMin); // int16u
EmberAfStatus SetColorTempPhysicalMin(chip::EndpointId endpoint, uint16_t colorTempPhysicalMin);
EmberAfStatus GetColorTempPhysicalMax(chip::EndpointId endpoint, uint16_t * colorTempPhysicalMax); // int16u
EmberAfStatus SetColorTempPhysicalMax(chip::EndpointId endpoint, uint16_t colorTempPhysicalMax);
EmberAfStatus GetCoupleColorTempToLevelMinMireds(chip::EndpointId endpoint, uint16_t * coupleColorTempToLevelMinMireds); // int16u
EmberAfStatus SetCoupleColorTempToLevelMinMireds(chip::EndpointId endpoint, uint16_t coupleColorTempToLevelMinMireds);
EmberAfStatus GetStartUpColorTemperatureMireds(chip::EndpointId endpoint, uint16_t * startUpColorTemperatureMireds); // int16u
EmberAfStatus SetStartUpColorTemperatureMireds(chip::EndpointId endpoint, uint16_t startUpColorTemperatureMireds);
} // namespace Attributes
} // namespace ColorControl

namespace BallastConfiguration {
namespace Attributes {
EmberAfStatus GetPhysicalMinLevel(chip::EndpointId endpoint, uint8_t * physicalMinLevel); // int8u
EmberAfStatus SetPhysicalMinLevel(chip::EndpointId endpoint, uint8_t physicalMinLevel);
EmberAfStatus GetPhysicalMaxLevel(chip::EndpointId endpoint, uint8_t * physicalMaxLevel); // int8u
EmberAfStatus SetPhysicalMaxLevel(chip::EndpointId endpoint, uint8_t physicalMaxLevel);
EmberAfStatus GetBallastStatus(chip::EndpointId endpoint, uint8_t * ballastStatus); // bitmap8
EmberAfStatus SetBallastStatus(chip::EndpointId endpoint, uint8_t ballastStatus);
EmberAfStatus GetMinLevel(chip::EndpointId endpoint, uint8_t * minLevel); // int8u
EmberAfStatus SetMinLevel(chip::EndpointId endpoint, uint8_t minLevel);
EmberAfStatus GetMaxLevel(chip::EndpointId endpoint, uint8_t * maxLevel); // int8u
EmberAfStatus SetMaxLevel(chip::EndpointId endpoint, uint8_t maxLevel);
EmberAfStatus GetPowerOnLevel(chip::EndpointId endpoint, uint8_t * powerOnLevel); // int8u
EmberAfStatus SetPowerOnLevel(chip::EndpointId endpoint, uint8_t powerOnLevel);
EmberAfStatus GetPowerOnFadeTime(chip::EndpointId endpoint, uint16_t * powerOnFadeTime); // int16u
EmberAfStatus SetPowerOnFadeTime(chip::EndpointId endpoint, uint16_t powerOnFadeTime);
EmberAfStatus GetIntrinsicBallastFactor(chip::EndpointId endpoint, uint8_t * intrinsicBallastFactor); // int8u
EmberAfStatus SetIntrinsicBallastFactor(chip::EndpointId endpoint, uint8_t intrinsicBallastFactor);
EmberAfStatus GetBallastFactorAdjustment(chip::EndpointId endpoint, uint8_t * ballastFactorAdjustment); // int8u
EmberAfStatus SetBallastFactorAdjustment(chip::EndpointId endpoint, uint8_t ballastFactorAdjustment);
EmberAfStatus GetLampQuality(chip::EndpointId endpoint, uint8_t * lampQuality); // int8u
EmberAfStatus SetLampQuality(chip::EndpointId endpoint, uint8_t lampQuality);
EmberAfStatus GetLampAlarmMode(chip::EndpointId endpoint, uint8_t * lampAlarmMode); // bitmap8
EmberAfStatus SetLampAlarmMode(chip::EndpointId endpoint, uint8_t lampAlarmMode);
} // namespace Attributes
} // namespace BallastConfiguration

namespace IlluminanceMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint, uint16_t * measuredValue); // int16u
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, uint16_t measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint, uint16_t * minMeasuredValue); // int16u
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, uint16_t minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint, uint16_t * maxMeasuredValue); // int16u
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, uint16_t maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, uint16_t * tolerance); // int16u
EmberAfStatus SetTolerance(chip::EndpointId endpoint, uint16_t tolerance);
EmberAfStatus GetLightSensorType(chip::EndpointId endpoint, uint8_t * lightSensorType); // enum8
EmberAfStatus SetLightSensorType(chip::EndpointId endpoint, uint8_t lightSensorType);
} // namespace Attributes
} // namespace IlluminanceMeasurement

namespace IlluminanceLevelSensing {
namespace Attributes {
EmberAfStatus GetLevelStatus(chip::EndpointId endpoint, uint8_t * levelStatus); // enum8
EmberAfStatus SetLevelStatus(chip::EndpointId endpoint, uint8_t levelStatus);
EmberAfStatus GetLightSensorType(chip::EndpointId endpoint, uint8_t * lightSensorType); // enum8
EmberAfStatus SetLightSensorType(chip::EndpointId endpoint, uint8_t lightSensorType);
EmberAfStatus GetIlluminanceLevelTarget(chip::EndpointId endpoint, uint16_t * illuminanceLevelTarget); // int16u
EmberAfStatus SetIlluminanceLevelTarget(chip::EndpointId endpoint, uint16_t illuminanceLevelTarget);
} // namespace Attributes
} // namespace IlluminanceLevelSensing

namespace TemperatureMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint, int16_t * measuredValue); // int16s
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, int16_t measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint, int16_t * minMeasuredValue); // int16s
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, int16_t minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint, int16_t * maxMeasuredValue); // int16s
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, int16_t maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, uint16_t * tolerance); // int16u
EmberAfStatus SetTolerance(chip::EndpointId endpoint, uint16_t tolerance);
} // namespace Attributes
} // namespace TemperatureMeasurement

namespace PressureMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint, int16_t * measuredValue); // int16s
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, int16_t measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint, int16_t * minMeasuredValue); // int16s
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, int16_t minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint, int16_t * maxMeasuredValue); // int16s
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, int16_t maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, uint16_t * tolerance); // int16u
EmberAfStatus SetTolerance(chip::EndpointId endpoint, uint16_t tolerance);
EmberAfStatus GetScaledValue(chip::EndpointId endpoint, int16_t * scaledValue); // int16s
EmberAfStatus SetScaledValue(chip::EndpointId endpoint, int16_t scaledValue);
EmberAfStatus GetMinScaledValue(chip::EndpointId endpoint, int16_t * minScaledValue); // int16s
EmberAfStatus SetMinScaledValue(chip::EndpointId endpoint, int16_t minScaledValue);
EmberAfStatus GetMaxScaledValue(chip::EndpointId endpoint, int16_t * maxScaledValue); // int16s
EmberAfStatus SetMaxScaledValue(chip::EndpointId endpoint, int16_t maxScaledValue);
EmberAfStatus GetScaledTolerance(chip::EndpointId endpoint, uint16_t * scaledTolerance); // int16u
EmberAfStatus SetScaledTolerance(chip::EndpointId endpoint, uint16_t scaledTolerance);
EmberAfStatus GetScale(chip::EndpointId endpoint, int8_t * scale); // int8s
EmberAfStatus SetScale(chip::EndpointId endpoint, int8_t scale);
} // namespace Attributes
} // namespace PressureMeasurement

namespace FlowMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint, int16_t * measuredValue); // int16s
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, int16_t measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint, int16_t * minMeasuredValue); // int16s
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, int16_t minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint, int16_t * maxMeasuredValue); // int16s
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, int16_t maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, uint16_t * tolerance); // int16u
EmberAfStatus SetTolerance(chip::EndpointId endpoint, uint16_t tolerance);
} // namespace Attributes
} // namespace FlowMeasurement

namespace RelativeHumidityMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint, uint16_t * measuredValue); // int16u
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, uint16_t measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint, uint16_t * minMeasuredValue); // int16u
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, uint16_t minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint, uint16_t * maxMeasuredValue); // int16u
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, uint16_t maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, uint16_t * tolerance); // int16u
EmberAfStatus SetTolerance(chip::EndpointId endpoint, uint16_t tolerance);
} // namespace Attributes
} // namespace RelativeHumidityMeasurement

namespace OccupancySensing {
namespace Attributes {
EmberAfStatus GetOccupancy(chip::EndpointId endpoint, uint8_t * occupancy); // bitmap8
EmberAfStatus SetOccupancy(chip::EndpointId endpoint, uint8_t occupancy);
EmberAfStatus GetOccupancySensorType(chip::EndpointId endpoint, uint8_t * occupancySensorType); // enum8
EmberAfStatus SetOccupancySensorType(chip::EndpointId endpoint, uint8_t occupancySensorType);
EmberAfStatus GetOccupancySensorTypeBitmap(chip::EndpointId endpoint, uint8_t * occupancySensorTypeBitmap); // bitmap8
EmberAfStatus SetOccupancySensorTypeBitmap(chip::EndpointId endpoint, uint8_t occupancySensorTypeBitmap);
EmberAfStatus GetPirOccupiedToUnoccupiedDelay(chip::EndpointId endpoint, uint16_t * pirOccupiedToUnoccupiedDelay); // int16u
EmberAfStatus SetPirOccupiedToUnoccupiedDelay(chip::EndpointId endpoint, uint16_t pirOccupiedToUnoccupiedDelay);
EmberAfStatus GetPirUnoccupiedToOccupiedDelay(chip::EndpointId endpoint, uint16_t * pirUnoccupiedToOccupiedDelay); // int16u
EmberAfStatus SetPirUnoccupiedToOccupiedDelay(chip::EndpointId endpoint, uint16_t pirUnoccupiedToOccupiedDelay);
EmberAfStatus GetPirUnoccupiedToOccupiedThreshold(chip::EndpointId endpoint, uint8_t * pirUnoccupiedToOccupiedThreshold); // int8u
EmberAfStatus SetPirUnoccupiedToOccupiedThreshold(chip::EndpointId endpoint, uint8_t pirUnoccupiedToOccupiedThreshold);
EmberAfStatus GetUltrasonicOccupiedToUnoccupiedDelay(chip::EndpointId endpoint,
                                                     uint16_t * ultrasonicOccupiedToUnoccupiedDelay); // int16u
EmberAfStatus SetUltrasonicOccupiedToUnoccupiedDelay(chip::EndpointId endpoint, uint16_t ultrasonicOccupiedToUnoccupiedDelay);
EmberAfStatus GetUltrasonicUnoccupiedToOccupiedDelay(chip::EndpointId endpoint,
                                                     uint16_t * ultrasonicUnoccupiedToOccupiedDelay); // int16u
EmberAfStatus SetUltrasonicUnoccupiedToOccupiedDelay(chip::EndpointId endpoint, uint16_t ultrasonicUnoccupiedToOccupiedDelay);
EmberAfStatus GetUltrasonicUnoccupiedToOccupiedThreshold(chip::EndpointId endpoint,
                                                         uint8_t * ultrasonicUnoccupiedToOccupiedThreshold); // int8u
EmberAfStatus SetUltrasonicUnoccupiedToOccupiedThreshold(chip::EndpointId endpoint,
                                                         uint8_t ultrasonicUnoccupiedToOccupiedThreshold);
EmberAfStatus GetPhysicalContactOccupiedToUnoccupiedDelay(chip::EndpointId endpoint,
                                                          uint16_t * physicalContactOccupiedToUnoccupiedDelay); // int16u
EmberAfStatus SetPhysicalContactOccupiedToUnoccupiedDelay(chip::EndpointId endpoint,
                                                          uint16_t physicalContactOccupiedToUnoccupiedDelay);
EmberAfStatus GetPhysicalContactUnoccupiedToOccupiedDelay(chip::EndpointId endpoint,
                                                          uint16_t * physicalContactUnoccupiedToOccupiedDelay); // int16u
EmberAfStatus SetPhysicalContactUnoccupiedToOccupiedDelay(chip::EndpointId endpoint,
                                                          uint16_t physicalContactUnoccupiedToOccupiedDelay);
EmberAfStatus GetPhysicalContactUnoccupiedToOccupiedThreshold(chip::EndpointId endpoint,
                                                              uint8_t * physicalContactUnoccupiedToOccupiedThreshold); // int8u
EmberAfStatus SetPhysicalContactUnoccupiedToOccupiedThreshold(chip::EndpointId endpoint,
                                                              uint8_t physicalContactUnoccupiedToOccupiedThreshold);
} // namespace Attributes
} // namespace OccupancySensing

namespace CarbonMonoxideConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace CarbonMonoxideConcentrationMeasurement

namespace CarbonDioxideConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace CarbonDioxideConcentrationMeasurement

namespace EthyleneConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace EthyleneConcentrationMeasurement

namespace EthyleneOxideConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace EthyleneOxideConcentrationMeasurement

namespace HydrogenConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace HydrogenConcentrationMeasurement

namespace HydrogenSulphideConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace HydrogenSulphideConcentrationMeasurement

namespace NitricOxideConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace NitricOxideConcentrationMeasurement

namespace NitrogenDioxideConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace NitrogenDioxideConcentrationMeasurement

namespace OxygenConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace OxygenConcentrationMeasurement

namespace OzoneConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace OzoneConcentrationMeasurement

namespace SulfurDioxideConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace SulfurDioxideConcentrationMeasurement

namespace DissolvedOxygenConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace DissolvedOxygenConcentrationMeasurement

namespace BromateConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace BromateConcentrationMeasurement

namespace ChloraminesConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace ChloraminesConcentrationMeasurement

namespace ChlorineConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace ChlorineConcentrationMeasurement

namespace FecalColiformAndEColiConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace FecalColiformAndEColiConcentrationMeasurement

namespace FluorideConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace FluorideConcentrationMeasurement

namespace HaloaceticAcidsConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace HaloaceticAcidsConcentrationMeasurement

namespace TotalTrihalomethanesConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace TotalTrihalomethanesConcentrationMeasurement

namespace TotalColiformBacteriaConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace TotalColiformBacteriaConcentrationMeasurement

namespace TurbidityConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace TurbidityConcentrationMeasurement

namespace CopperConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace CopperConcentrationMeasurement

namespace LeadConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace LeadConcentrationMeasurement

namespace ManganeseConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace ManganeseConcentrationMeasurement

namespace SulfateConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace SulfateConcentrationMeasurement

namespace BromodichloromethaneConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace BromodichloromethaneConcentrationMeasurement

namespace BromoformConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace BromoformConcentrationMeasurement

namespace ChlorodibromomethaneConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace ChlorodibromomethaneConcentrationMeasurement

namespace ChloroformConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace ChloroformConcentrationMeasurement

namespace SodiumConcentrationMeasurement {
namespace Attributes {
EmberAfStatus GetMeasuredValue(chip::EndpointId endpoint,
                               /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue); // single
EmberAfStatus SetMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue);
EmberAfStatus GetMinMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue); // single
EmberAfStatus SetMinMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue);
EmberAfStatus GetMaxMeasuredValue(chip::EndpointId endpoint,
                                  /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue); // single
EmberAfStatus SetMaxMeasuredValue(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue);
EmberAfStatus GetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance); // single
EmberAfStatus SetTolerance(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance);
} // namespace Attributes
} // namespace SodiumConcentrationMeasurement

namespace IasZone {
namespace Attributes {
EmberAfStatus GetZoneState(chip::EndpointId endpoint, uint8_t * zoneState); // enum8
EmberAfStatus SetZoneState(chip::EndpointId endpoint, uint8_t zoneState);
EmberAfStatus GetZoneType(chip::EndpointId endpoint, uint16_t * zoneType); // enum16
EmberAfStatus SetZoneType(chip::EndpointId endpoint, uint16_t zoneType);
EmberAfStatus GetZoneStatus(chip::EndpointId endpoint, uint16_t * zoneStatus); // bitmap16
EmberAfStatus SetZoneStatus(chip::EndpointId endpoint, uint16_t zoneStatus);
EmberAfStatus GetIasCieAddress(chip::EndpointId endpoint, chip::NodeId * iasCieAddress); // node_id
EmberAfStatus SetIasCieAddress(chip::EndpointId endpoint, chip::NodeId iasCieAddress);
EmberAfStatus GetZoneId(chip::EndpointId endpoint, uint8_t * zoneId); // int8u
EmberAfStatus SetZoneId(chip::EndpointId endpoint, uint8_t zoneId);
EmberAfStatus GetNumberOfZoneSensitivityLevelsSupported(chip::EndpointId endpoint,
                                                        uint8_t * numberOfZoneSensitivityLevelsSupported); // int8u
EmberAfStatus SetNumberOfZoneSensitivityLevelsSupported(chip::EndpointId endpoint, uint8_t numberOfZoneSensitivityLevelsSupported);
EmberAfStatus GetCurrentZoneSensitivityLevel(chip::EndpointId endpoint, uint8_t * currentZoneSensitivityLevel); // int8u
EmberAfStatus SetCurrentZoneSensitivityLevel(chip::EndpointId endpoint, uint8_t currentZoneSensitivityLevel);
} // namespace Attributes
} // namespace IasZone

namespace IasWd {
namespace Attributes {
EmberAfStatus GetMaxDuration(chip::EndpointId endpoint, uint16_t * maxDuration); // int16u
EmberAfStatus SetMaxDuration(chip::EndpointId endpoint, uint16_t maxDuration);
} // namespace Attributes
} // namespace IasWd

namespace WakeOnLan {
namespace Attributes {
} // namespace Attributes
} // namespace WakeOnLan

namespace TvChannel {
namespace Attributes {
} // namespace Attributes
} // namespace TvChannel

namespace TargetNavigator {
namespace Attributes {
EmberAfStatus GetCurrentNavigatorTarget(chip::EndpointId endpoint, uint8_t * currentNavigatorTarget); // int8u
EmberAfStatus SetCurrentNavigatorTarget(chip::EndpointId endpoint, uint8_t currentNavigatorTarget);
} // namespace Attributes
} // namespace TargetNavigator

namespace MediaPlayback {
namespace Attributes {
EmberAfStatus GetPlaybackState(chip::EndpointId endpoint, uint8_t * playbackState); // enum8
EmberAfStatus SetPlaybackState(chip::EndpointId endpoint, uint8_t playbackState);
EmberAfStatus GetStartTime(chip::EndpointId endpoint, uint64_t * startTime); // int64u
EmberAfStatus SetStartTime(chip::EndpointId endpoint, uint64_t startTime);
EmberAfStatus GetDuration(chip::EndpointId endpoint, uint64_t * duration); // int64u
EmberAfStatus SetDuration(chip::EndpointId endpoint, uint64_t duration);
EmberAfStatus GetUpdatedAt(chip::EndpointId endpoint, uint64_t * updatedAt); // int64u
EmberAfStatus SetUpdatedAt(chip::EndpointId endpoint, uint64_t updatedAt);
EmberAfStatus GetPosistion(chip::EndpointId endpoint, uint64_t * posistion); // int64u
EmberAfStatus SetPosistion(chip::EndpointId endpoint, uint64_t posistion);
EmberAfStatus GetPlaybackSpeed(chip::EndpointId endpoint, uint64_t * playbackSpeed); // int64u
EmberAfStatus SetPlaybackSpeed(chip::EndpointId endpoint, uint64_t playbackSpeed);
EmberAfStatus GetSeekRangeEnd(chip::EndpointId endpoint, uint64_t * seekRangeEnd); // int64u
EmberAfStatus SetSeekRangeEnd(chip::EndpointId endpoint, uint64_t seekRangeEnd);
EmberAfStatus GetSeekRangeStart(chip::EndpointId endpoint, uint64_t * seekRangeStart); // int64u
EmberAfStatus SetSeekRangeStart(chip::EndpointId endpoint, uint64_t seekRangeStart);
} // namespace Attributes
} // namespace MediaPlayback

namespace MediaInput {
namespace Attributes {
EmberAfStatus GetCurrentMediaInput(chip::EndpointId endpoint, uint8_t * currentMediaInput); // int8u
EmberAfStatus SetCurrentMediaInput(chip::EndpointId endpoint, uint8_t currentMediaInput);
} // namespace Attributes
} // namespace MediaInput

namespace ContentLauncher {
namespace Attributes {
} // namespace Attributes
} // namespace ContentLauncher

namespace AudioOutput {
namespace Attributes {
EmberAfStatus GetCurrentAudioOutput(chip::EndpointId endpoint, uint8_t * currentAudioOutput); // int8u
EmberAfStatus SetCurrentAudioOutput(chip::EndpointId endpoint, uint8_t currentAudioOutput);
} // namespace Attributes
} // namespace AudioOutput

namespace ApplicationLauncher {
namespace Attributes {
EmberAfStatus GetCatalogVendorId(chip::EndpointId endpoint, uint8_t * catalogVendorId); // int8u
EmberAfStatus SetCatalogVendorId(chip::EndpointId endpoint, uint8_t catalogVendorId);
EmberAfStatus GetApplicationId(chip::EndpointId endpoint, uint8_t * applicationId); // int8u
EmberAfStatus SetApplicationId(chip::EndpointId endpoint, uint8_t applicationId);
} // namespace Attributes
} // namespace ApplicationLauncher

namespace ApplicationBasic {
namespace Attributes {
EmberAfStatus GetVendorId(chip::EndpointId endpoint, uint16_t * vendorId); // int16u
EmberAfStatus SetVendorId(chip::EndpointId endpoint, uint16_t vendorId);
EmberAfStatus GetProductId(chip::EndpointId endpoint, uint16_t * productId); // int16u
EmberAfStatus SetProductId(chip::EndpointId endpoint, uint16_t productId);
EmberAfStatus GetCatalogVendorId(chip::EndpointId endpoint, uint16_t * catalogVendorId); // int16u
EmberAfStatus SetCatalogVendorId(chip::EndpointId endpoint, uint16_t catalogVendorId);
EmberAfStatus GetApplicationStatus(chip::EndpointId endpoint, uint8_t * applicationStatus); // enum8
EmberAfStatus SetApplicationStatus(chip::EndpointId endpoint, uint8_t applicationStatus);
} // namespace Attributes
} // namespace ApplicationBasic

namespace TestCluster {
namespace Attributes {
EmberAfStatus GetBoolean(chip::EndpointId endpoint, uint8_t * boolean); // boolean
EmberAfStatus SetBoolean(chip::EndpointId endpoint, uint8_t boolean);
EmberAfStatus GetBitmap8(chip::EndpointId endpoint, uint8_t * bitmap8); // bitmap8
EmberAfStatus SetBitmap8(chip::EndpointId endpoint, uint8_t bitmap8);
EmberAfStatus GetBitmap16(chip::EndpointId endpoint, uint16_t * bitmap16); // bitmap16
EmberAfStatus SetBitmap16(chip::EndpointId endpoint, uint16_t bitmap16);
EmberAfStatus GetBitmap32(chip::EndpointId endpoint, uint32_t * bitmap32); // bitmap32
EmberAfStatus SetBitmap32(chip::EndpointId endpoint, uint32_t bitmap32);
EmberAfStatus GetBitmap64(chip::EndpointId endpoint, uint64_t * bitmap64); // bitmap64
EmberAfStatus SetBitmap64(chip::EndpointId endpoint, uint64_t bitmap64);
EmberAfStatus GetInt8u(chip::EndpointId endpoint, uint8_t * int8u); // int8u
EmberAfStatus SetInt8u(chip::EndpointId endpoint, uint8_t int8u);
EmberAfStatus GetInt16u(chip::EndpointId endpoint, uint16_t * int16u); // int16u
EmberAfStatus SetInt16u(chip::EndpointId endpoint, uint16_t int16u);
EmberAfStatus GetInt32u(chip::EndpointId endpoint, uint32_t * int32u); // int32u
EmberAfStatus SetInt32u(chip::EndpointId endpoint, uint32_t int32u);
EmberAfStatus GetInt64u(chip::EndpointId endpoint, uint64_t * int64u); // int64u
EmberAfStatus SetInt64u(chip::EndpointId endpoint, uint64_t int64u);
EmberAfStatus GetInt8s(chip::EndpointId endpoint, int8_t * int8s); // int8s
EmberAfStatus SetInt8s(chip::EndpointId endpoint, int8_t int8s);
EmberAfStatus GetInt16s(chip::EndpointId endpoint, int16_t * int16s); // int16s
EmberAfStatus SetInt16s(chip::EndpointId endpoint, int16_t int16s);
EmberAfStatus GetInt32s(chip::EndpointId endpoint, int32_t * int32s); // int32s
EmberAfStatus SetInt32s(chip::EndpointId endpoint, int32_t int32s);
EmberAfStatus GetInt64s(chip::EndpointId endpoint, int64_t * int64s); // int64s
EmberAfStatus SetInt64s(chip::EndpointId endpoint, int64_t int64s);
EmberAfStatus GetEnum8(chip::EndpointId endpoint, uint8_t * enum8); // enum8
EmberAfStatus SetEnum8(chip::EndpointId endpoint, uint8_t enum8);
EmberAfStatus GetEnum16(chip::EndpointId endpoint, uint16_t * enum16); // enum16
EmberAfStatus SetEnum16(chip::EndpointId endpoint, uint16_t enum16);
EmberAfStatus GetUnsupported(chip::EndpointId endpoint, uint8_t * unsupported); // boolean
EmberAfStatus SetUnsupported(chip::EndpointId endpoint, uint8_t unsupported);
} // namespace Attributes
} // namespace TestCluster

namespace ApplianceIdentification {
namespace Attributes {
EmberAfStatus GetCompanyId(chip::EndpointId endpoint, uint16_t * companyId); // int16u
EmberAfStatus SetCompanyId(chip::EndpointId endpoint, uint16_t companyId);
EmberAfStatus GetBrandId(chip::EndpointId endpoint, uint16_t * brandId); // int16u
EmberAfStatus SetBrandId(chip::EndpointId endpoint, uint16_t brandId);
EmberAfStatus GetProductTypeId(chip::EndpointId endpoint, uint16_t * productTypeId); // int16u
EmberAfStatus SetProductTypeId(chip::EndpointId endpoint, uint16_t productTypeId);
EmberAfStatus GetCecedSpecificationVersion(chip::EndpointId endpoint, uint8_t * cecedSpecificationVersion); // int8u
EmberAfStatus SetCecedSpecificationVersion(chip::EndpointId endpoint, uint8_t cecedSpecificationVersion);
} // namespace Attributes
} // namespace ApplianceIdentification

namespace MeterIdentification {
namespace Attributes {
EmberAfStatus GetMeterTypeId(chip::EndpointId endpoint, uint16_t * meterTypeId); // int16u
EmberAfStatus SetMeterTypeId(chip::EndpointId endpoint, uint16_t meterTypeId);
EmberAfStatus GetDataQualityId(chip::EndpointId endpoint, uint16_t * dataQualityId); // int16u
EmberAfStatus SetDataQualityId(chip::EndpointId endpoint, uint16_t dataQualityId);
} // namespace Attributes
} // namespace MeterIdentification

namespace ApplianceStatistics {
namespace Attributes {
EmberAfStatus GetLogMaxSize(chip::EndpointId endpoint, uint32_t * logMaxSize); // int32u
EmberAfStatus SetLogMaxSize(chip::EndpointId endpoint, uint32_t logMaxSize);
EmberAfStatus GetLogQueueMaxSize(chip::EndpointId endpoint, uint8_t * logQueueMaxSize); // int8u
EmberAfStatus SetLogQueueMaxSize(chip::EndpointId endpoint, uint8_t logQueueMaxSize);
} // namespace Attributes
} // namespace ApplianceStatistics

namespace ElectricalMeasurement {
namespace Attributes {
EmberAfStatus GetMeasurementType(chip::EndpointId endpoint, uint32_t * measurementType); // bitmap32
EmberAfStatus SetMeasurementType(chip::EndpointId endpoint, uint32_t measurementType);
EmberAfStatus GetDcVoltage(chip::EndpointId endpoint, int16_t * dcVoltage); // int16s
EmberAfStatus SetDcVoltage(chip::EndpointId endpoint, int16_t dcVoltage);
EmberAfStatus GetDcVoltageMin(chip::EndpointId endpoint, int16_t * dcVoltageMin); // int16s
EmberAfStatus SetDcVoltageMin(chip::EndpointId endpoint, int16_t dcVoltageMin);
EmberAfStatus GetDcVoltageMax(chip::EndpointId endpoint, int16_t * dcVoltageMax); // int16s
EmberAfStatus SetDcVoltageMax(chip::EndpointId endpoint, int16_t dcVoltageMax);
EmberAfStatus GetDcCurrent(chip::EndpointId endpoint, int16_t * dcCurrent); // int16s
EmberAfStatus SetDcCurrent(chip::EndpointId endpoint, int16_t dcCurrent);
EmberAfStatus GetDcCurrentMin(chip::EndpointId endpoint, int16_t * dcCurrentMin); // int16s
EmberAfStatus SetDcCurrentMin(chip::EndpointId endpoint, int16_t dcCurrentMin);
EmberAfStatus GetDcCurrentMax(chip::EndpointId endpoint, int16_t * dcCurrentMax); // int16s
EmberAfStatus SetDcCurrentMax(chip::EndpointId endpoint, int16_t dcCurrentMax);
EmberAfStatus GetDcPower(chip::EndpointId endpoint, int16_t * dcPower); // int16s
EmberAfStatus SetDcPower(chip::EndpointId endpoint, int16_t dcPower);
EmberAfStatus GetDcPowerMin(chip::EndpointId endpoint, int16_t * dcPowerMin); // int16s
EmberAfStatus SetDcPowerMin(chip::EndpointId endpoint, int16_t dcPowerMin);
EmberAfStatus GetDcPowerMax(chip::EndpointId endpoint, int16_t * dcPowerMax); // int16s
EmberAfStatus SetDcPowerMax(chip::EndpointId endpoint, int16_t dcPowerMax);
EmberAfStatus GetDcVoltageMultiplier(chip::EndpointId endpoint, uint16_t * dcVoltageMultiplier); // int16u
EmberAfStatus SetDcVoltageMultiplier(chip::EndpointId endpoint, uint16_t dcVoltageMultiplier);
EmberAfStatus GetDcVoltageDivisor(chip::EndpointId endpoint, uint16_t * dcVoltageDivisor); // int16u
EmberAfStatus SetDcVoltageDivisor(chip::EndpointId endpoint, uint16_t dcVoltageDivisor);
EmberAfStatus GetDcCurrentMultiplier(chip::EndpointId endpoint, uint16_t * dcCurrentMultiplier); // int16u
EmberAfStatus SetDcCurrentMultiplier(chip::EndpointId endpoint, uint16_t dcCurrentMultiplier);
EmberAfStatus GetDcCurrentDivisor(chip::EndpointId endpoint, uint16_t * dcCurrentDivisor); // int16u
EmberAfStatus SetDcCurrentDivisor(chip::EndpointId endpoint, uint16_t dcCurrentDivisor);
EmberAfStatus GetDcPowerMultiplier(chip::EndpointId endpoint, uint16_t * dcPowerMultiplier); // int16u
EmberAfStatus SetDcPowerMultiplier(chip::EndpointId endpoint, uint16_t dcPowerMultiplier);
EmberAfStatus GetDcPowerDivisor(chip::EndpointId endpoint, uint16_t * dcPowerDivisor); // int16u
EmberAfStatus SetDcPowerDivisor(chip::EndpointId endpoint, uint16_t dcPowerDivisor);
EmberAfStatus GetAcFrequency(chip::EndpointId endpoint, uint16_t * acFrequency); // int16u
EmberAfStatus SetAcFrequency(chip::EndpointId endpoint, uint16_t acFrequency);
EmberAfStatus GetAcFrequencyMin(chip::EndpointId endpoint, uint16_t * acFrequencyMin); // int16u
EmberAfStatus SetAcFrequencyMin(chip::EndpointId endpoint, uint16_t acFrequencyMin);
EmberAfStatus GetAcFrequencyMax(chip::EndpointId endpoint, uint16_t * acFrequencyMax); // int16u
EmberAfStatus SetAcFrequencyMax(chip::EndpointId endpoint, uint16_t acFrequencyMax);
EmberAfStatus GetNeutralCurrent(chip::EndpointId endpoint, uint16_t * neutralCurrent); // int16u
EmberAfStatus SetNeutralCurrent(chip::EndpointId endpoint, uint16_t neutralCurrent);
EmberAfStatus GetTotalActivePower(chip::EndpointId endpoint, int32_t * totalActivePower); // int32s
EmberAfStatus SetTotalActivePower(chip::EndpointId endpoint, int32_t totalActivePower);
EmberAfStatus GetTotalReactivePower(chip::EndpointId endpoint, int32_t * totalReactivePower); // int32s
EmberAfStatus SetTotalReactivePower(chip::EndpointId endpoint, int32_t totalReactivePower);
EmberAfStatus GetTotalApparentPower(chip::EndpointId endpoint, uint32_t * totalApparentPower); // int32u
EmberAfStatus SetTotalApparentPower(chip::EndpointId endpoint, uint32_t totalApparentPower);
EmberAfStatus GetMeasured1stHarmonicCurrent(chip::EndpointId endpoint, int16_t * measured1stHarmonicCurrent); // int16s
EmberAfStatus SetMeasured1stHarmonicCurrent(chip::EndpointId endpoint, int16_t measured1stHarmonicCurrent);
EmberAfStatus GetMeasured3rdHarmonicCurrent(chip::EndpointId endpoint, int16_t * measured3rdHarmonicCurrent); // int16s
EmberAfStatus SetMeasured3rdHarmonicCurrent(chip::EndpointId endpoint, int16_t measured3rdHarmonicCurrent);
EmberAfStatus GetMeasured5thHarmonicCurrent(chip::EndpointId endpoint, int16_t * measured5thHarmonicCurrent); // int16s
EmberAfStatus SetMeasured5thHarmonicCurrent(chip::EndpointId endpoint, int16_t measured5thHarmonicCurrent);
EmberAfStatus GetMeasured7thHarmonicCurrent(chip::EndpointId endpoint, int16_t * measured7thHarmonicCurrent); // int16s
EmberAfStatus SetMeasured7thHarmonicCurrent(chip::EndpointId endpoint, int16_t measured7thHarmonicCurrent);
EmberAfStatus GetMeasured9thHarmonicCurrent(chip::EndpointId endpoint, int16_t * measured9thHarmonicCurrent); // int16s
EmberAfStatus SetMeasured9thHarmonicCurrent(chip::EndpointId endpoint, int16_t measured9thHarmonicCurrent);
EmberAfStatus GetMeasured11thHarmonicCurrent(chip::EndpointId endpoint, int16_t * measured11thHarmonicCurrent); // int16s
EmberAfStatus SetMeasured11thHarmonicCurrent(chip::EndpointId endpoint, int16_t measured11thHarmonicCurrent);
EmberAfStatus GetMeasuredPhase1stHarmonicCurrent(chip::EndpointId endpoint, int16_t * measuredPhase1stHarmonicCurrent); // int16s
EmberAfStatus SetMeasuredPhase1stHarmonicCurrent(chip::EndpointId endpoint, int16_t measuredPhase1stHarmonicCurrent);
EmberAfStatus GetMeasuredPhase3rdHarmonicCurrent(chip::EndpointId endpoint, int16_t * measuredPhase3rdHarmonicCurrent); // int16s
EmberAfStatus SetMeasuredPhase3rdHarmonicCurrent(chip::EndpointId endpoint, int16_t measuredPhase3rdHarmonicCurrent);
EmberAfStatus GetMeasuredPhase5thHarmonicCurrent(chip::EndpointId endpoint, int16_t * measuredPhase5thHarmonicCurrent); // int16s
EmberAfStatus SetMeasuredPhase5thHarmonicCurrent(chip::EndpointId endpoint, int16_t measuredPhase5thHarmonicCurrent);
EmberAfStatus GetMeasuredPhase7thHarmonicCurrent(chip::EndpointId endpoint, int16_t * measuredPhase7thHarmonicCurrent); // int16s
EmberAfStatus SetMeasuredPhase7thHarmonicCurrent(chip::EndpointId endpoint, int16_t measuredPhase7thHarmonicCurrent);
EmberAfStatus GetMeasuredPhase9thHarmonicCurrent(chip::EndpointId endpoint, int16_t * measuredPhase9thHarmonicCurrent); // int16s
EmberAfStatus SetMeasuredPhase9thHarmonicCurrent(chip::EndpointId endpoint, int16_t measuredPhase9thHarmonicCurrent);
EmberAfStatus GetMeasuredPhase11thHarmonicCurrent(chip::EndpointId endpoint, int16_t * measuredPhase11thHarmonicCurrent); // int16s
EmberAfStatus SetMeasuredPhase11thHarmonicCurrent(chip::EndpointId endpoint, int16_t measuredPhase11thHarmonicCurrent);
EmberAfStatus GetAcFrequencyMultiplier(chip::EndpointId endpoint, uint16_t * acFrequencyMultiplier); // int16u
EmberAfStatus SetAcFrequencyMultiplier(chip::EndpointId endpoint, uint16_t acFrequencyMultiplier);
EmberAfStatus GetAcFrequencyDivisor(chip::EndpointId endpoint, uint16_t * acFrequencyDivisor); // int16u
EmberAfStatus SetAcFrequencyDivisor(chip::EndpointId endpoint, uint16_t acFrequencyDivisor);
EmberAfStatus GetPowerMultiplier(chip::EndpointId endpoint, uint32_t * powerMultiplier); // int32u
EmberAfStatus SetPowerMultiplier(chip::EndpointId endpoint, uint32_t powerMultiplier);
EmberAfStatus GetPowerDivisor(chip::EndpointId endpoint, uint32_t * powerDivisor); // int32u
EmberAfStatus SetPowerDivisor(chip::EndpointId endpoint, uint32_t powerDivisor);
EmberAfStatus GetHarmonicCurrentMultiplier(chip::EndpointId endpoint, int8_t * harmonicCurrentMultiplier); // int8s
EmberAfStatus SetHarmonicCurrentMultiplier(chip::EndpointId endpoint, int8_t harmonicCurrentMultiplier);
EmberAfStatus GetPhaseHarmonicCurrentMultiplier(chip::EndpointId endpoint, int8_t * phaseHarmonicCurrentMultiplier); // int8s
EmberAfStatus SetPhaseHarmonicCurrentMultiplier(chip::EndpointId endpoint, int8_t phaseHarmonicCurrentMultiplier);
EmberAfStatus GetInstantaneousVoltage(chip::EndpointId endpoint, int16_t * instantaneousVoltage); // int16s
EmberAfStatus SetInstantaneousVoltage(chip::EndpointId endpoint, int16_t instantaneousVoltage);
EmberAfStatus GetInstantaneousLineCurrent(chip::EndpointId endpoint, uint16_t * instantaneousLineCurrent); // int16u
EmberAfStatus SetInstantaneousLineCurrent(chip::EndpointId endpoint, uint16_t instantaneousLineCurrent);
EmberAfStatus GetInstantaneousActiveCurrent(chip::EndpointId endpoint, int16_t * instantaneousActiveCurrent); // int16s
EmberAfStatus SetInstantaneousActiveCurrent(chip::EndpointId endpoint, int16_t instantaneousActiveCurrent);
EmberAfStatus GetInstantaneousReactiveCurrent(chip::EndpointId endpoint, int16_t * instantaneousReactiveCurrent); // int16s
EmberAfStatus SetInstantaneousReactiveCurrent(chip::EndpointId endpoint, int16_t instantaneousReactiveCurrent);
EmberAfStatus GetInstantaneousPower(chip::EndpointId endpoint, int16_t * instantaneousPower); // int16s
EmberAfStatus SetInstantaneousPower(chip::EndpointId endpoint, int16_t instantaneousPower);
EmberAfStatus GetRmsVoltage(chip::EndpointId endpoint, uint16_t * rmsVoltage); // int16u
EmberAfStatus SetRmsVoltage(chip::EndpointId endpoint, uint16_t rmsVoltage);
EmberAfStatus GetRmsVoltageMin(chip::EndpointId endpoint, uint16_t * rmsVoltageMin); // int16u
EmberAfStatus SetRmsVoltageMin(chip::EndpointId endpoint, uint16_t rmsVoltageMin);
EmberAfStatus GetRmsVoltageMax(chip::EndpointId endpoint, uint16_t * rmsVoltageMax); // int16u
EmberAfStatus SetRmsVoltageMax(chip::EndpointId endpoint, uint16_t rmsVoltageMax);
EmberAfStatus GetRmsCurrent(chip::EndpointId endpoint, uint16_t * rmsCurrent); // int16u
EmberAfStatus SetRmsCurrent(chip::EndpointId endpoint, uint16_t rmsCurrent);
EmberAfStatus GetRmsCurrentMin(chip::EndpointId endpoint, uint16_t * rmsCurrentMin); // int16u
EmberAfStatus SetRmsCurrentMin(chip::EndpointId endpoint, uint16_t rmsCurrentMin);
EmberAfStatus GetRmsCurrentMax(chip::EndpointId endpoint, uint16_t * rmsCurrentMax); // int16u
EmberAfStatus SetRmsCurrentMax(chip::EndpointId endpoint, uint16_t rmsCurrentMax);
EmberAfStatus GetActivePower(chip::EndpointId endpoint, int16_t * activePower); // int16s
EmberAfStatus SetActivePower(chip::EndpointId endpoint, int16_t activePower);
EmberAfStatus GetActivePowerMin(chip::EndpointId endpoint, int16_t * activePowerMin); // int16s
EmberAfStatus SetActivePowerMin(chip::EndpointId endpoint, int16_t activePowerMin);
EmberAfStatus GetActivePowerMax(chip::EndpointId endpoint, int16_t * activePowerMax); // int16s
EmberAfStatus SetActivePowerMax(chip::EndpointId endpoint, int16_t activePowerMax);
EmberAfStatus GetReactivePower(chip::EndpointId endpoint, int16_t * reactivePower); // int16s
EmberAfStatus SetReactivePower(chip::EndpointId endpoint, int16_t reactivePower);
EmberAfStatus GetApparentPower(chip::EndpointId endpoint, uint16_t * apparentPower); // int16u
EmberAfStatus SetApparentPower(chip::EndpointId endpoint, uint16_t apparentPower);
EmberAfStatus GetPowerFactor(chip::EndpointId endpoint, int8_t * powerFactor); // int8s
EmberAfStatus SetPowerFactor(chip::EndpointId endpoint, int8_t powerFactor);
EmberAfStatus GetAverageRmsVoltageMeasurementPeriod(chip::EndpointId endpoint,
                                                    uint16_t * averageRmsVoltageMeasurementPeriod); // int16u
EmberAfStatus SetAverageRmsVoltageMeasurementPeriod(chip::EndpointId endpoint, uint16_t averageRmsVoltageMeasurementPeriod);
EmberAfStatus GetAverageRmsUnderVoltageCounter(chip::EndpointId endpoint, uint16_t * averageRmsUnderVoltageCounter); // int16u
EmberAfStatus SetAverageRmsUnderVoltageCounter(chip::EndpointId endpoint, uint16_t averageRmsUnderVoltageCounter);
EmberAfStatus GetRmsExtremeOverVoltagePeriod(chip::EndpointId endpoint, uint16_t * rmsExtremeOverVoltagePeriod); // int16u
EmberAfStatus SetRmsExtremeOverVoltagePeriod(chip::EndpointId endpoint, uint16_t rmsExtremeOverVoltagePeriod);
EmberAfStatus GetRmsExtremeUnderVoltagePeriod(chip::EndpointId endpoint, uint16_t * rmsExtremeUnderVoltagePeriod); // int16u
EmberAfStatus SetRmsExtremeUnderVoltagePeriod(chip::EndpointId endpoint, uint16_t rmsExtremeUnderVoltagePeriod);
EmberAfStatus GetRmsVoltageSagPeriod(chip::EndpointId endpoint, uint16_t * rmsVoltageSagPeriod); // int16u
EmberAfStatus SetRmsVoltageSagPeriod(chip::EndpointId endpoint, uint16_t rmsVoltageSagPeriod);
EmberAfStatus GetRmsVoltageSwellPeriod(chip::EndpointId endpoint, uint16_t * rmsVoltageSwellPeriod); // int16u
EmberAfStatus SetRmsVoltageSwellPeriod(chip::EndpointId endpoint, uint16_t rmsVoltageSwellPeriod);
EmberAfStatus GetAcVoltageMultiplier(chip::EndpointId endpoint, uint16_t * acVoltageMultiplier); // int16u
EmberAfStatus SetAcVoltageMultiplier(chip::EndpointId endpoint, uint16_t acVoltageMultiplier);
EmberAfStatus GetAcVoltageDivisor(chip::EndpointId endpoint, uint16_t * acVoltageDivisor); // int16u
EmberAfStatus SetAcVoltageDivisor(chip::EndpointId endpoint, uint16_t acVoltageDivisor);
EmberAfStatus GetAcCurrentMultiplier(chip::EndpointId endpoint, uint16_t * acCurrentMultiplier); // int16u
EmberAfStatus SetAcCurrentMultiplier(chip::EndpointId endpoint, uint16_t acCurrentMultiplier);
EmberAfStatus GetAcCurrentDivisor(chip::EndpointId endpoint, uint16_t * acCurrentDivisor); // int16u
EmberAfStatus SetAcCurrentDivisor(chip::EndpointId endpoint, uint16_t acCurrentDivisor);
EmberAfStatus GetAcPowerMultiplier(chip::EndpointId endpoint, uint16_t * acPowerMultiplier); // int16u
EmberAfStatus SetAcPowerMultiplier(chip::EndpointId endpoint, uint16_t acPowerMultiplier);
EmberAfStatus GetAcPowerDivisor(chip::EndpointId endpoint, uint16_t * acPowerDivisor); // int16u
EmberAfStatus SetAcPowerDivisor(chip::EndpointId endpoint, uint16_t acPowerDivisor);
EmberAfStatus GetOverloadAlarmsMask(chip::EndpointId endpoint, uint8_t * overloadAlarmsMask); // bitmap8
EmberAfStatus SetOverloadAlarmsMask(chip::EndpointId endpoint, uint8_t overloadAlarmsMask);
EmberAfStatus GetVoltageOverload(chip::EndpointId endpoint, int16_t * voltageOverload); // int16s
EmberAfStatus SetVoltageOverload(chip::EndpointId endpoint, int16_t voltageOverload);
EmberAfStatus GetCurrentOverload(chip::EndpointId endpoint, int16_t * currentOverload); // int16s
EmberAfStatus SetCurrentOverload(chip::EndpointId endpoint, int16_t currentOverload);
EmberAfStatus GetAcOverloadAlarmsMask(chip::EndpointId endpoint, uint16_t * acOverloadAlarmsMask); // bitmap16
EmberAfStatus SetAcOverloadAlarmsMask(chip::EndpointId endpoint, uint16_t acOverloadAlarmsMask);
EmberAfStatus GetAcVoltageOverload(chip::EndpointId endpoint, int16_t * acVoltageOverload); // int16s
EmberAfStatus SetAcVoltageOverload(chip::EndpointId endpoint, int16_t acVoltageOverload);
EmberAfStatus GetAcCurrentOverload(chip::EndpointId endpoint, int16_t * acCurrentOverload); // int16s
EmberAfStatus SetAcCurrentOverload(chip::EndpointId endpoint, int16_t acCurrentOverload);
EmberAfStatus GetAcActivePowerOverload(chip::EndpointId endpoint, int16_t * acActivePowerOverload); // int16s
EmberAfStatus SetAcActivePowerOverload(chip::EndpointId endpoint, int16_t acActivePowerOverload);
EmberAfStatus GetAcReactivePowerOverload(chip::EndpointId endpoint, int16_t * acReactivePowerOverload); // int16s
EmberAfStatus SetAcReactivePowerOverload(chip::EndpointId endpoint, int16_t acReactivePowerOverload);
EmberAfStatus GetAverageRmsOverVoltage(chip::EndpointId endpoint, int16_t * averageRmsOverVoltage); // int16s
EmberAfStatus SetAverageRmsOverVoltage(chip::EndpointId endpoint, int16_t averageRmsOverVoltage);
EmberAfStatus GetAverageRmsUnderVoltage(chip::EndpointId endpoint, int16_t * averageRmsUnderVoltage); // int16s
EmberAfStatus SetAverageRmsUnderVoltage(chip::EndpointId endpoint, int16_t averageRmsUnderVoltage);
EmberAfStatus GetRmsExtremeOverVoltage(chip::EndpointId endpoint, int16_t * rmsExtremeOverVoltage); // int16s
EmberAfStatus SetRmsExtremeOverVoltage(chip::EndpointId endpoint, int16_t rmsExtremeOverVoltage);
EmberAfStatus GetRmsExtremeUnderVoltage(chip::EndpointId endpoint, int16_t * rmsExtremeUnderVoltage); // int16s
EmberAfStatus SetRmsExtremeUnderVoltage(chip::EndpointId endpoint, int16_t rmsExtremeUnderVoltage);
EmberAfStatus GetRmsVoltageSag(chip::EndpointId endpoint, int16_t * rmsVoltageSag); // int16s
EmberAfStatus SetRmsVoltageSag(chip::EndpointId endpoint, int16_t rmsVoltageSag);
EmberAfStatus GetRmsVoltageSwell(chip::EndpointId endpoint, int16_t * rmsVoltageSwell); // int16s
EmberAfStatus SetRmsVoltageSwell(chip::EndpointId endpoint, int16_t rmsVoltageSwell);
EmberAfStatus GetLineCurrentPhaseB(chip::EndpointId endpoint, uint16_t * lineCurrentPhaseB); // int16u
EmberAfStatus SetLineCurrentPhaseB(chip::EndpointId endpoint, uint16_t lineCurrentPhaseB);
EmberAfStatus GetActiveCurrentPhaseB(chip::EndpointId endpoint, int16_t * activeCurrentPhaseB); // int16s
EmberAfStatus SetActiveCurrentPhaseB(chip::EndpointId endpoint, int16_t activeCurrentPhaseB);
EmberAfStatus GetReactiveCurrentPhaseB(chip::EndpointId endpoint, int16_t * reactiveCurrentPhaseB); // int16s
EmberAfStatus SetReactiveCurrentPhaseB(chip::EndpointId endpoint, int16_t reactiveCurrentPhaseB);
EmberAfStatus GetRmsVoltagePhaseB(chip::EndpointId endpoint, uint16_t * rmsVoltagePhaseB); // int16u
EmberAfStatus SetRmsVoltagePhaseB(chip::EndpointId endpoint, uint16_t rmsVoltagePhaseB);
EmberAfStatus GetRmsVoltageMinPhaseB(chip::EndpointId endpoint, uint16_t * rmsVoltageMinPhaseB); // int16u
EmberAfStatus SetRmsVoltageMinPhaseB(chip::EndpointId endpoint, uint16_t rmsVoltageMinPhaseB);
EmberAfStatus GetRmsVoltageMaxPhaseB(chip::EndpointId endpoint, uint16_t * rmsVoltageMaxPhaseB); // int16u
EmberAfStatus SetRmsVoltageMaxPhaseB(chip::EndpointId endpoint, uint16_t rmsVoltageMaxPhaseB);
EmberAfStatus GetRmsCurrentPhaseB(chip::EndpointId endpoint, uint16_t * rmsCurrentPhaseB); // int16u
EmberAfStatus SetRmsCurrentPhaseB(chip::EndpointId endpoint, uint16_t rmsCurrentPhaseB);
EmberAfStatus GetRmsCurrentMinPhaseB(chip::EndpointId endpoint, uint16_t * rmsCurrentMinPhaseB); // int16u
EmberAfStatus SetRmsCurrentMinPhaseB(chip::EndpointId endpoint, uint16_t rmsCurrentMinPhaseB);
EmberAfStatus GetRmsCurrentMaxPhaseB(chip::EndpointId endpoint, uint16_t * rmsCurrentMaxPhaseB); // int16u
EmberAfStatus SetRmsCurrentMaxPhaseB(chip::EndpointId endpoint, uint16_t rmsCurrentMaxPhaseB);
EmberAfStatus GetActivePowerPhaseB(chip::EndpointId endpoint, int16_t * activePowerPhaseB); // int16s
EmberAfStatus SetActivePowerPhaseB(chip::EndpointId endpoint, int16_t activePowerPhaseB);
EmberAfStatus GetActivePowerMinPhaseB(chip::EndpointId endpoint, int16_t * activePowerMinPhaseB); // int16s
EmberAfStatus SetActivePowerMinPhaseB(chip::EndpointId endpoint, int16_t activePowerMinPhaseB);
EmberAfStatus GetActivePowerMaxPhaseB(chip::EndpointId endpoint, int16_t * activePowerMaxPhaseB); // int16s
EmberAfStatus SetActivePowerMaxPhaseB(chip::EndpointId endpoint, int16_t activePowerMaxPhaseB);
EmberAfStatus GetReactivePowerPhaseB(chip::EndpointId endpoint, int16_t * reactivePowerPhaseB); // int16s
EmberAfStatus SetReactivePowerPhaseB(chip::EndpointId endpoint, int16_t reactivePowerPhaseB);
EmberAfStatus GetApparentPowerPhaseB(chip::EndpointId endpoint, uint16_t * apparentPowerPhaseB); // int16u
EmberAfStatus SetApparentPowerPhaseB(chip::EndpointId endpoint, uint16_t apparentPowerPhaseB);
EmberAfStatus GetPowerFactorPhaseB(chip::EndpointId endpoint, int8_t * powerFactorPhaseB); // int8s
EmberAfStatus SetPowerFactorPhaseB(chip::EndpointId endpoint, int8_t powerFactorPhaseB);
EmberAfStatus GetAverageRmsVoltageMeasurementPeriodPhaseB(chip::EndpointId endpoint,
                                                          uint16_t * averageRmsVoltageMeasurementPeriodPhaseB); // int16u
EmberAfStatus SetAverageRmsVoltageMeasurementPeriodPhaseB(chip::EndpointId endpoint,
                                                          uint16_t averageRmsVoltageMeasurementPeriodPhaseB);
EmberAfStatus GetAverageRmsOverVoltageCounterPhaseB(chip::EndpointId endpoint,
                                                    uint16_t * averageRmsOverVoltageCounterPhaseB); // int16u
EmberAfStatus SetAverageRmsOverVoltageCounterPhaseB(chip::EndpointId endpoint, uint16_t averageRmsOverVoltageCounterPhaseB);
EmberAfStatus GetAverageRmsUnderVoltageCounterPhaseB(chip::EndpointId endpoint,
                                                     uint16_t * averageRmsUnderVoltageCounterPhaseB); // int16u
EmberAfStatus SetAverageRmsUnderVoltageCounterPhaseB(chip::EndpointId endpoint, uint16_t averageRmsUnderVoltageCounterPhaseB);
EmberAfStatus GetRmsExtremeOverVoltagePeriodPhaseB(chip::EndpointId endpoint,
                                                   uint16_t * rmsExtremeOverVoltagePeriodPhaseB); // int16u
EmberAfStatus SetRmsExtremeOverVoltagePeriodPhaseB(chip::EndpointId endpoint, uint16_t rmsExtremeOverVoltagePeriodPhaseB);
EmberAfStatus GetRmsExtremeUnderVoltagePeriodPhaseB(chip::EndpointId endpoint,
                                                    uint16_t * rmsExtremeUnderVoltagePeriodPhaseB); // int16u
EmberAfStatus SetRmsExtremeUnderVoltagePeriodPhaseB(chip::EndpointId endpoint, uint16_t rmsExtremeUnderVoltagePeriodPhaseB);
EmberAfStatus GetRmsVoltageSagPeriodPhaseB(chip::EndpointId endpoint, uint16_t * rmsVoltageSagPeriodPhaseB); // int16u
EmberAfStatus SetRmsVoltageSagPeriodPhaseB(chip::EndpointId endpoint, uint16_t rmsVoltageSagPeriodPhaseB);
EmberAfStatus GetRmsVoltageSwellPeriodPhaseB(chip::EndpointId endpoint, uint16_t * rmsVoltageSwellPeriodPhaseB); // int16u
EmberAfStatus SetRmsVoltageSwellPeriodPhaseB(chip::EndpointId endpoint, uint16_t rmsVoltageSwellPeriodPhaseB);
EmberAfStatus GetLineCurrentPhaseC(chip::EndpointId endpoint, uint16_t * lineCurrentPhaseC); // int16u
EmberAfStatus SetLineCurrentPhaseC(chip::EndpointId endpoint, uint16_t lineCurrentPhaseC);
EmberAfStatus GetActiveCurrentPhaseC(chip::EndpointId endpoint, int16_t * activeCurrentPhaseC); // int16s
EmberAfStatus SetActiveCurrentPhaseC(chip::EndpointId endpoint, int16_t activeCurrentPhaseC);
EmberAfStatus GetReactiveCurrentPhaseC(chip::EndpointId endpoint, int16_t * reactiveCurrentPhaseC); // int16s
EmberAfStatus SetReactiveCurrentPhaseC(chip::EndpointId endpoint, int16_t reactiveCurrentPhaseC);
EmberAfStatus GetRmsVoltagePhaseC(chip::EndpointId endpoint, uint16_t * rmsVoltagePhaseC); // int16u
EmberAfStatus SetRmsVoltagePhaseC(chip::EndpointId endpoint, uint16_t rmsVoltagePhaseC);
EmberAfStatus GetRmsVoltageMinPhaseC(chip::EndpointId endpoint, uint16_t * rmsVoltageMinPhaseC); // int16u
EmberAfStatus SetRmsVoltageMinPhaseC(chip::EndpointId endpoint, uint16_t rmsVoltageMinPhaseC);
EmberAfStatus GetRmsVoltageMaxPhaseC(chip::EndpointId endpoint, uint16_t * rmsVoltageMaxPhaseC); // int16u
EmberAfStatus SetRmsVoltageMaxPhaseC(chip::EndpointId endpoint, uint16_t rmsVoltageMaxPhaseC);
EmberAfStatus GetRmsCurrentPhaseC(chip::EndpointId endpoint, uint16_t * rmsCurrentPhaseC); // int16u
EmberAfStatus SetRmsCurrentPhaseC(chip::EndpointId endpoint, uint16_t rmsCurrentPhaseC);
EmberAfStatus GetRmsCurrentMinPhaseC(chip::EndpointId endpoint, uint16_t * rmsCurrentMinPhaseC); // int16u
EmberAfStatus SetRmsCurrentMinPhaseC(chip::EndpointId endpoint, uint16_t rmsCurrentMinPhaseC);
EmberAfStatus GetRmsCurrentMaxPhaseC(chip::EndpointId endpoint, uint16_t * rmsCurrentMaxPhaseC); // int16u
EmberAfStatus SetRmsCurrentMaxPhaseC(chip::EndpointId endpoint, uint16_t rmsCurrentMaxPhaseC);
EmberAfStatus GetActivePowerPhaseC(chip::EndpointId endpoint, int16_t * activePowerPhaseC); // int16s
EmberAfStatus SetActivePowerPhaseC(chip::EndpointId endpoint, int16_t activePowerPhaseC);
EmberAfStatus GetActivePowerMinPhaseC(chip::EndpointId endpoint, int16_t * activePowerMinPhaseC); // int16s
EmberAfStatus SetActivePowerMinPhaseC(chip::EndpointId endpoint, int16_t activePowerMinPhaseC);
EmberAfStatus GetActivePowerMaxPhaseC(chip::EndpointId endpoint, int16_t * activePowerMaxPhaseC); // int16s
EmberAfStatus SetActivePowerMaxPhaseC(chip::EndpointId endpoint, int16_t activePowerMaxPhaseC);
EmberAfStatus GetReactivePowerPhaseC(chip::EndpointId endpoint, int16_t * reactivePowerPhaseC); // int16s
EmberAfStatus SetReactivePowerPhaseC(chip::EndpointId endpoint, int16_t reactivePowerPhaseC);
EmberAfStatus GetApparentPowerPhaseC(chip::EndpointId endpoint, uint16_t * apparentPowerPhaseC); // int16u
EmberAfStatus SetApparentPowerPhaseC(chip::EndpointId endpoint, uint16_t apparentPowerPhaseC);
EmberAfStatus GetPowerFactorPhaseC(chip::EndpointId endpoint, int8_t * powerFactorPhaseC); // int8s
EmberAfStatus SetPowerFactorPhaseC(chip::EndpointId endpoint, int8_t powerFactorPhaseC);
EmberAfStatus GetAverageRmsVoltageMeasurementPeriodPhaseC(chip::EndpointId endpoint,
                                                          uint16_t * averageRmsVoltageMeasurementPeriodPhaseC); // int16u
EmberAfStatus SetAverageRmsVoltageMeasurementPeriodPhaseC(chip::EndpointId endpoint,
                                                          uint16_t averageRmsVoltageMeasurementPeriodPhaseC);
EmberAfStatus GetAverageRmsOverVoltageCounterPhaseC(chip::EndpointId endpoint,
                                                    uint16_t * averageRmsOverVoltageCounterPhaseC); // int16u
EmberAfStatus SetAverageRmsOverVoltageCounterPhaseC(chip::EndpointId endpoint, uint16_t averageRmsOverVoltageCounterPhaseC);
EmberAfStatus GetAverageRmsUnderVoltageCounterPhaseC(chip::EndpointId endpoint,
                                                     uint16_t * averageRmsUnderVoltageCounterPhaseC); // int16u
EmberAfStatus SetAverageRmsUnderVoltageCounterPhaseC(chip::EndpointId endpoint, uint16_t averageRmsUnderVoltageCounterPhaseC);
EmberAfStatus GetRmsExtremeOverVoltagePeriodPhaseC(chip::EndpointId endpoint,
                                                   uint16_t * rmsExtremeOverVoltagePeriodPhaseC); // int16u
EmberAfStatus SetRmsExtremeOverVoltagePeriodPhaseC(chip::EndpointId endpoint, uint16_t rmsExtremeOverVoltagePeriodPhaseC);
EmberAfStatus GetRmsExtremeUnderVoltagePeriodPhaseC(chip::EndpointId endpoint,
                                                    uint16_t * rmsExtremeUnderVoltagePeriodPhaseC); // int16u
EmberAfStatus SetRmsExtremeUnderVoltagePeriodPhaseC(chip::EndpointId endpoint, uint16_t rmsExtremeUnderVoltagePeriodPhaseC);
EmberAfStatus GetRmsVoltageSagPeriodPhaseC(chip::EndpointId endpoint, uint16_t * rmsVoltageSagPeriodPhaseC); // int16u
EmberAfStatus SetRmsVoltageSagPeriodPhaseC(chip::EndpointId endpoint, uint16_t rmsVoltageSagPeriodPhaseC);
EmberAfStatus GetRmsVoltageSwellPeriodPhaseC(chip::EndpointId endpoint, uint16_t * rmsVoltageSwellPeriodPhaseC); // int16u
EmberAfStatus SetRmsVoltageSwellPeriodPhaseC(chip::EndpointId endpoint, uint16_t rmsVoltageSwellPeriodPhaseC);
} // namespace Attributes
} // namespace ElectricalMeasurement

namespace GroupKeyManagement {
namespace Attributes {
} // namespace Attributes
} // namespace GroupKeyManagement

namespace SampleMfgSpecificCluster {
namespace Attributes {
EmberAfStatus GetEmberSampleAttribute(chip::EndpointId endpoint, uint8_t * emberSampleAttribute); // int8u
EmberAfStatus SetEmberSampleAttribute(chip::EndpointId endpoint, uint8_t emberSampleAttribute);
EmberAfStatus GetEmberSampleAttribute2(chip::EndpointId endpoint, uint8_t * emberSampleAttribute2); // int8u
EmberAfStatus SetEmberSampleAttribute2(chip::EndpointId endpoint, uint8_t emberSampleAttribute2);
} // namespace Attributes
} // namespace SampleMfgSpecificCluster

namespace SampleMfgSpecificCluster2 {
namespace Attributes {
EmberAfStatus GetEmberSampleAttribute3(chip::EndpointId endpoint, uint16_t * emberSampleAttribute3); // int16u
EmberAfStatus SetEmberSampleAttribute3(chip::EndpointId endpoint, uint16_t emberSampleAttribute3);
EmberAfStatus GetEmberSampleAttribute4(chip::EndpointId endpoint, uint16_t * emberSampleAttribute4); // int16u
EmberAfStatus SetEmberSampleAttribute4(chip::EndpointId endpoint, uint16_t emberSampleAttribute4);
} // namespace Attributes
} // namespace SampleMfgSpecificCluster2

} // namespace Clusters
} // namespace app
} // namespace chip
