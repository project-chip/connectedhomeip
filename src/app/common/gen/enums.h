/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

// Prevent multiple inclusion
#pragma once

#include <stdint.h>

// ZCL enums

// Enum for AlertCountType
enum EmberAfAlertCountType : uint8_t
{
    EMBER_ZCL_ALERT_COUNT_TYPE_UNSTRUCTURED = 0,
};

// Enum for AlertStructureCategory
enum EmberAfAlertStructureCategory : uint16_t
{
    EMBER_ZCL_ALERT_STRUCTURE_CATEGORY_WARNING = 256,
    EMBER_ZCL_ALERT_STRUCTURE_CATEGORY_DANGER  = 512,
    EMBER_ZCL_ALERT_STRUCTURE_CATEGORY_FAILURE = 768,
};

// Enum for AlertStructurePresenceRecovery
enum EmberAfAlertStructurePresenceRecovery : uint16_t
{
    EMBER_ZCL_ALERT_STRUCTURE_PRESENCE_RECOVERY_RECOVERY = 0,
    EMBER_ZCL_ALERT_STRUCTURE_PRESENCE_RECOVERY_PRESENCE = 4096,
};

// Enum for AmiRegistrationState
enum EmberAfAmiRegistrationState : uint8_t
{
    EMBER_ZCL_AMI_REGISTRATION_STATE_UNREGISTERED                   = 0,
    EMBER_ZCL_AMI_REGISTRATION_STATE_JOINING_NETWORK                = 1,
    EMBER_ZCL_AMI_REGISTRATION_STATE_JOINED_NETWORK                 = 2,
    EMBER_ZCL_AMI_REGISTRATION_STATE_SUBMITTED_REGISTRATION_REQUEST = 3,
    EMBER_ZCL_AMI_REGISTRATION_STATE_REGISTRATION_REJECTED          = 4,
    EMBER_ZCL_AMI_REGISTRATION_STATE_REGISTERED                     = 5,
    EMBER_ZCL_AMI_REGISTRATION_STATE_REGISTERATION_NOT_POSSIBLE     = 6,
};

// Enum for AnonymousDataState
enum EmberAfAnonymousDataState : uint8_t
{
    EMBER_ZCL_ANONYMOUS_DATA_STATE_NO_SOURCE_FOUND = 0,
    EMBER_ZCL_ANONYMOUS_DATA_STATE_SOURCE_FOUND    = 1,
};

// Enum for ApplianceStatus
enum EmberAfApplianceStatus : uint8_t
{
    EMBER_ZCL_APPLIANCE_STATUS_OFF                         = 1,
    EMBER_ZCL_APPLIANCE_STATUS_STAND_BY                    = 2,
    EMBER_ZCL_APPLIANCE_STATUS_PROGRAMMED                  = 3,
    EMBER_ZCL_APPLIANCE_STATUS_PROGRAMMED_WAITING_TO_START = 4,
    EMBER_ZCL_APPLIANCE_STATUS_RUNNING                     = 5,
    EMBER_ZCL_APPLIANCE_STATUS_PAUSE                       = 6,
    EMBER_ZCL_APPLIANCE_STATUS_END_PROGRAMMED              = 7,
    EMBER_ZCL_APPLIANCE_STATUS_FAILURE                     = 8,
    EMBER_ZCL_APPLIANCE_STATUS_PROGRAMME_INTERRUPTED       = 9,
    EMBER_ZCL_APPLIANCE_STATUS_IDLE                        = 10,
    EMBER_ZCL_APPLIANCE_STATUS_RINSE_HOLD                  = 11,
    EMBER_ZCL_APPLIANCE_STATUS_SERVICE                     = 12,
    EMBER_ZCL_APPLIANCE_STATUS_SUPERFREEZING               = 13,
    EMBER_ZCL_APPLIANCE_STATUS_SUPERCOOLING                = 14,
    EMBER_ZCL_APPLIANCE_STATUS_SUPERHEATING                = 15,
};

// Enum for ApplicationBasicStatus
enum EmberAfApplicationBasicStatus : uint8_t
{
    EMBER_ZCL_APPLICATION_BASIC_STATUS_STOPPED                  = 0,
    EMBER_ZCL_APPLICATION_BASIC_STATUS_ACTIVE_VISIBLE_FOCUS     = 1,
    EMBER_ZCL_APPLICATION_BASIC_STATUS_ACTIVE_HIDDEN            = 2,
    EMBER_ZCL_APPLICATION_BASIC_STATUS_ACTIVE_VISIBLE_NOT_FOCUS = 3,
};

// Enum for ApplicationLauncherStatus
enum EmberAfApplicationLauncherStatus : uint8_t
{
    EMBER_ZCL_APPLICATION_LAUNCHER_STATUS_SUCCESS           = 0,
    EMBER_ZCL_APPLICATION_LAUNCHER_STATUS_APP_NOT_AVAILABLE = 1,
    EMBER_ZCL_APPLICATION_LAUNCHER_STATUS_SYSTEM_BUSY       = 2,
};

// Enum for AttributeWritePermission
enum EmberAfAttributeWritePermission : uint8_t
{
    EMBER_ZCL_ATTRIBUTE_WRITE_PERMISSION_DENY_WRITE               = 0,
    EMBER_ZCL_ATTRIBUTE_WRITE_PERMISSION_ALLOW_WRITE_NORMAL       = 1,
    EMBER_ZCL_ATTRIBUTE_WRITE_PERMISSION_ALLOW_WRITE_OF_READ_ONLY = 2,
    EMBER_ZCL_ATTRIBUTE_WRITE_PERMISSION_UNSUPPORTED_ATTRIBUTE    = 134,
    EMBER_ZCL_ATTRIBUTE_WRITE_PERMISSION_INVALID_VALUE            = 135,
    EMBER_ZCL_ATTRIBUTE_WRITE_PERMISSION_READ_ONLY                = 136,
    EMBER_ZCL_ATTRIBUTE_WRITE_PERMISSION_INVALID_DATA_TYPE        = 141,
};

// Enum for AudioOutputType
enum EmberAfAudioOutputType : uint8_t
{
    EMBER_ZCL_AUDIO_OUTPUT_TYPE_HDMI      = 0,
    EMBER_ZCL_AUDIO_OUTPUT_TYPE_BT        = 1,
    EMBER_ZCL_AUDIO_OUTPUT_TYPE_OPTICAL   = 2,
    EMBER_ZCL_AUDIO_OUTPUT_TYPE_HEADPHONE = 3,
    EMBER_ZCL_AUDIO_OUTPUT_TYPE_INTERNAL  = 4,
    EMBER_ZCL_AUDIO_OUTPUT_TYPE_OTHER     = 5,
};

// Enum for BarrierControlBarrierPosition
enum EmberAfBarrierControlBarrierPosition : uint8_t
{
    EMBER_ZCL_BARRIER_CONTROL_BARRIER_POSITION_CLOSED  = 0,
    EMBER_ZCL_BARRIER_CONTROL_BARRIER_POSITION_OPEN    = 100,
    EMBER_ZCL_BARRIER_CONTROL_BARRIER_POSITION_UNKNOWN = 255,
};

// Enum for BarrierControlMovingState
enum EmberAfBarrierControlMovingState : uint8_t
{
    EMBER_ZCL_BARRIER_CONTROL_MOVING_STATE_STOPPED = 0,
    EMBER_ZCL_BARRIER_CONTROL_MOVING_STATE_CLOSING = 1,
    EMBER_ZCL_BARRIER_CONTROL_MOVING_STATE_OPENING = 2,
};

// Enum for BatterySize
enum EmberAfBatterySize : uint8_t
{
    EMBER_ZCL_BATTERY_SIZE_NO_BATTERY = 0,
    EMBER_ZCL_BATTERY_SIZE_BUILT_IN   = 1,
    EMBER_ZCL_BATTERY_SIZE_OTHER      = 2,
    EMBER_ZCL_BATTERY_SIZE_AA         = 3,
    EMBER_ZCL_BATTERY_SIZE_AAA        = 4,
    EMBER_ZCL_BATTERY_SIZE_C          = 5,
    EMBER_ZCL_BATTERY_SIZE_D          = 6,
    EMBER_ZCL_BATTERY_SIZE_UNKNOWN    = 255,
};

// Enum for BootReasonType
enum EmberAfBootReasonType : uint8_t
{
    EMBER_ZCL_BOOT_REASON_TYPE_UNSPECIFIED               = 0,
    EMBER_ZCL_BOOT_REASON_TYPE_POWER_ON_REBOOT           = 1,
    EMBER_ZCL_BOOT_REASON_TYPE_BROWN_OUT_RESET           = 2,
    EMBER_ZCL_BOOT_REASON_TYPE_SOFTWARE_WATCHDOG_RESET   = 3,
    EMBER_ZCL_BOOT_REASON_TYPE_HARDWARE_WATCHDOG_RESET   = 4,
    EMBER_ZCL_BOOT_REASON_TYPE_SOFTWARE_UPDATE_COMPLETED = 5,
    EMBER_ZCL_BOOT_REASON_TYPE_SOFTWARE_RESET            = 6,
};

// Enum for CecedSpecificationVersion
enum EmberAfCecedSpecificationVersion : uint8_t
{
    EMBER_ZCL_CECED_SPECIFICATION_VERSION_COMPLIANT_WITH_V10_NOT_CERTIFIED = 16,
    EMBER_ZCL_CECED_SPECIFICATION_VERSION_COMPLIANT_WITH_V10_CERTIFIED     = 26,
};

// Enum for ColorControlOptions
enum EmberAfColorControlOptions : uint8_t
{
    EMBER_ZCL_COLOR_CONTROL_OPTIONS_EXECUTE_IF_OFF = 1,
};

// Enum for ColorLoopAction
enum EmberAfColorLoopAction : uint8_t
{
    EMBER_ZCL_COLOR_LOOP_ACTION_DEACTIVATE                                  = 0,
    EMBER_ZCL_COLOR_LOOP_ACTION_ACTIVATE_FROM_COLOR_LOOP_START_ENHANCED_HUE = 1,
    EMBER_ZCL_COLOR_LOOP_ACTION_ACTIVATE_FROM_ENHANCED_CURRENT_HUE          = 2,
};

// Enum for ColorLoopDirection
enum EmberAfColorLoopDirection : uint8_t
{
    EMBER_ZCL_COLOR_LOOP_DIRECTION_DECREMENT_HUE = 0,
    EMBER_ZCL_COLOR_LOOP_DIRECTION_INCREMENT_HUE = 1,
};

// Enum for ColorMode
enum EmberAfColorMode : uint8_t
{
    EMBER_ZCL_COLOR_MODE_CURRENT_HUE_AND_CURRENT_SATURATION = 0,
    EMBER_ZCL_COLOR_MODE_CURRENT_X_AND_CURRENT_Y            = 1,
    EMBER_ZCL_COLOR_MODE_COLOR_TEMPERATURE                  = 2,
};

// Enum for CommandIdentification
enum EmberAfCommandIdentification : uint8_t
{
    EMBER_ZCL_COMMAND_IDENTIFICATION_START                  = 1,
    EMBER_ZCL_COMMAND_IDENTIFICATION_STOP                   = 2,
    EMBER_ZCL_COMMAND_IDENTIFICATION_PAUSE                  = 3,
    EMBER_ZCL_COMMAND_IDENTIFICATION_START_SUPERFREEZING    = 4,
    EMBER_ZCL_COMMAND_IDENTIFICATION_STOP_SUPERFREEZING     = 5,
    EMBER_ZCL_COMMAND_IDENTIFICATION_START_SUPERCOOLING     = 6,
    EMBER_ZCL_COMMAND_IDENTIFICATION_STOP_SUPERCOOLING      = 7,
    EMBER_ZCL_COMMAND_IDENTIFICATION_DISABLE_GAS            = 8,
    EMBER_ZCL_COMMAND_IDENTIFICATION_ENABLE_GAS             = 9,
    EMBER_ZCL_COMMAND_IDENTIFICATION_ENABLE_ENERGY_CONTROL  = 10,
    EMBER_ZCL_COMMAND_IDENTIFICATION_DISABLE_ENERGY_CONTROL = 11,
};

// Enum for ContentLaunchMetricType
enum EmberAfContentLaunchMetricType : uint8_t
{
    EMBER_ZCL_CONTENT_LAUNCH_METRIC_TYPE_PIXELS     = 0,
    EMBER_ZCL_CONTENT_LAUNCH_METRIC_TYPE_PERCENTAGE = 1,
};

// Enum for ContentLaunchParameterEnum
enum EmberAfContentLaunchParameterEnum : uint8_t
{
    EMBER_ZCL_CONTENT_LAUNCH_PARAMETER_ENUM_ACTOR       = 0,
    EMBER_ZCL_CONTENT_LAUNCH_PARAMETER_ENUM_CHANNEL     = 1,
    EMBER_ZCL_CONTENT_LAUNCH_PARAMETER_ENUM_CHARACTER   = 2,
    EMBER_ZCL_CONTENT_LAUNCH_PARAMETER_ENUM_EVENT       = 3,
    EMBER_ZCL_CONTENT_LAUNCH_PARAMETER_ENUM_FRANCHISE   = 4,
    EMBER_ZCL_CONTENT_LAUNCH_PARAMETER_ENUM_GENRE       = 5,
    EMBER_ZCL_CONTENT_LAUNCH_PARAMETER_ENUM_LEAGUE      = 6,
    EMBER_ZCL_CONTENT_LAUNCH_PARAMETER_ENUM_POPULARITY  = 7,
    EMBER_ZCL_CONTENT_LAUNCH_PARAMETER_ENUM_SPORT       = 8,
    EMBER_ZCL_CONTENT_LAUNCH_PARAMETER_ENUM_SPORTS_TEAM = 9,
    EMBER_ZCL_CONTENT_LAUNCH_PARAMETER_ENUM_VIDEO       = 10,
};

// Enum for ContentLaunchStatus
enum EmberAfContentLaunchStatus : uint8_t
{
    EMBER_ZCL_CONTENT_LAUNCH_STATUS_SUCCESS           = 0,
    EMBER_ZCL_CONTENT_LAUNCH_STATUS_URL_NOT_AVAILABLE = 1,
    EMBER_ZCL_CONTENT_LAUNCH_STATUS_AUTH_FAILED       = 2,
};

// Enum for ContentLaunchStreamingType
enum EmberAfContentLaunchStreamingType : uint8_t
{
    EMBER_ZCL_CONTENT_LAUNCH_STREAMING_TYPE_DASH = 0,
    EMBER_ZCL_CONTENT_LAUNCH_STREAMING_TYPE_HLS  = 1,
};

// Enum for DataQualityId
enum EmberAfDataQualityId : uint16_t
{
    EMBER_ZCL_DATA_QUALITY_ID_ALL_DATA_CERTIFIED                       = 0,
    EMBER_ZCL_DATA_QUALITY_ID_ONLY_INSTANTANEOUS_POWER_NOT_CERTIFIED   = 1,
    EMBER_ZCL_DATA_QUALITY_ID_ONLY_CUMULATED_CONSUMPTION_NOT_CERTIFIED = 2,
    EMBER_ZCL_DATA_QUALITY_ID_NOT_CERTIFIED_DATA                       = 3,
};

// Enum for DehumidifcationLockout
enum EmberAfDehumidifcationLockout : uint8_t
{
    EMBER_ZCL_DEHUMIDIFCATION_LOCKOUT_NOT_ALLOWED = 0,
    EMBER_ZCL_DEHUMIDIFCATION_LOCKOUT_ALLOWED     = 1,
};

// Enum for DeviceStatus2Structure
enum EmberAfDeviceStatus2Structure : uint8_t
{
    EMBER_ZCL_DEVICE_STATUS2_STRUCTURE_IRIS_SYMPTOM_CODE = 32,
};

// Enum for DoorLockEventSource
enum EmberAfDoorLockEventSource : uint8_t
{
    EMBER_ZCL_DOOR_LOCK_EVENT_SOURCE_KEYPAD        = 0,
    EMBER_ZCL_DOOR_LOCK_EVENT_SOURCE_RF            = 1,
    EMBER_ZCL_DOOR_LOCK_EVENT_SOURCE_MANUAL        = 2,
    EMBER_ZCL_DOOR_LOCK_EVENT_SOURCE_RFID          = 3,
    EMBER_ZCL_DOOR_LOCK_EVENT_SOURCE_INDETERMINATE = 255,
};

// Enum for DoorLockEventType
enum EmberAfDoorLockEventType : uint8_t
{
    EMBER_ZCL_DOOR_LOCK_EVENT_TYPE_OPERATION   = 0,
    EMBER_ZCL_DOOR_LOCK_EVENT_TYPE_PROGRAMMING = 1,
    EMBER_ZCL_DOOR_LOCK_EVENT_TYPE_ALARM       = 2,
};

// Enum for DoorLockOperatingMode
enum EmberAfDoorLockOperatingMode : uint8_t
{
    EMBER_ZCL_DOOR_LOCK_OPERATING_MODE_NORMAL_MODE            = 0,
    EMBER_ZCL_DOOR_LOCK_OPERATING_MODE_VACATION_MODE          = 1,
    EMBER_ZCL_DOOR_LOCK_OPERATING_MODE_PRIVACY_MODE           = 2,
    EMBER_ZCL_DOOR_LOCK_OPERATING_MODE_NO_RF_LOCK_OR_UNLOCK   = 3,
    EMBER_ZCL_DOOR_LOCK_OPERATING_MODE_LOCAL_PROGRAMMING_MODE = 4,
    EMBER_ZCL_DOOR_LOCK_OPERATING_MODE_PASSAGE_MODE           = 5,
};

// Enum for DoorLockOperationEventCode
enum EmberAfDoorLockOperationEventCode : uint8_t
{
    EMBER_ZCL_DOOR_LOCK_OPERATION_EVENT_CODE_UNKNOWN_OR_MFG_SPECIFIC  = 0,
    EMBER_ZCL_DOOR_LOCK_OPERATION_EVENT_CODE_LOCK                     = 1,
    EMBER_ZCL_DOOR_LOCK_OPERATION_EVENT_CODE_UNLOCK                   = 2,
    EMBER_ZCL_DOOR_LOCK_OPERATION_EVENT_CODE_LOCK_INVALID_PIN_OR_ID   = 3,
    EMBER_ZCL_DOOR_LOCK_OPERATION_EVENT_CODE_LOCK_INVALID_SCHEDULE    = 4,
    EMBER_ZCL_DOOR_LOCK_OPERATION_EVENT_CODE_UNLOCK_INVALID_PIN_OR_ID = 5,
    EMBER_ZCL_DOOR_LOCK_OPERATION_EVENT_CODE_UNLOCK_INVALID_SCHEDULE  = 6,
    EMBER_ZCL_DOOR_LOCK_OPERATION_EVENT_CODE_ONE_TOUCH_LOCK           = 7,
    EMBER_ZCL_DOOR_LOCK_OPERATION_EVENT_CODE_KEY_LOCK                 = 8,
    EMBER_ZCL_DOOR_LOCK_OPERATION_EVENT_CODE_KEY_UNLOCK               = 9,
    EMBER_ZCL_DOOR_LOCK_OPERATION_EVENT_CODE_AUTO_LOCK                = 10,
    EMBER_ZCL_DOOR_LOCK_OPERATION_EVENT_CODE_SCHEDULE_LOCK            = 11,
    EMBER_ZCL_DOOR_LOCK_OPERATION_EVENT_CODE_SCHEDULE_UNLOCK          = 12,
    EMBER_ZCL_DOOR_LOCK_OPERATION_EVENT_CODE_MANUAL_LOCK              = 13,
    EMBER_ZCL_DOOR_LOCK_OPERATION_EVENT_CODE_MANUAL_UNLOCK            = 14,
};

// Enum for DoorLockProgrammingEventCode
enum EmberAfDoorLockProgrammingEventCode : uint8_t
{
    EMBER_ZCL_DOOR_LOCK_PROGRAMMING_EVENT_CODE_UNKNOWN_OR_MFG_SPECIFIC = 0,
    EMBER_ZCL_DOOR_LOCK_PROGRAMMING_EVENT_CODE_MASTER_CODE_CHANGED     = 1,
    EMBER_ZCL_DOOR_LOCK_PROGRAMMING_EVENT_CODE_PIN_ADDED               = 2,
    EMBER_ZCL_DOOR_LOCK_PROGRAMMING_EVENT_CODE_PIN_DELETED             = 3,
    EMBER_ZCL_DOOR_LOCK_PROGRAMMING_EVENT_CODE_PIN_CHANGED             = 4,
    EMBER_ZCL_DOOR_LOCK_PROGRAMMING_EVENT_CODE_ID_ADDED                = 5,
    EMBER_ZCL_DOOR_LOCK_PROGRAMMING_EVENT_CODE_ID_DELETED              = 6,
};

// Enum for DoorLockSecurityLevel
enum EmberAfDoorLockSecurityLevel : uint8_t
{
    EMBER_ZCL_DOOR_LOCK_SECURITY_LEVEL_NETWORK_SECURITY = 0,
    EMBER_ZCL_DOOR_LOCK_SECURITY_LEVEL_APS_SECURITY     = 1,
};

// Enum for DoorLockSetPinOrIdStatus
enum EmberAfDoorLockSetPinOrIdStatus : uint8_t
{
    EMBER_ZCL_DOOR_LOCK_SET_PIN_OR_ID_STATUS_SUCCESS              = 0,
    EMBER_ZCL_DOOR_LOCK_SET_PIN_OR_ID_STATUS_GENERAL_FAILURE      = 1,
    EMBER_ZCL_DOOR_LOCK_SET_PIN_OR_ID_STATUS_MEMORY_FULL          = 2,
    EMBER_ZCL_DOOR_LOCK_SET_PIN_OR_ID_STATUS_DUPLICATE_CODE_ERROR = 3,
};

// Enum for DoorLockSoundVolume
enum EmberAfDoorLockSoundVolume : uint8_t
{
    EMBER_ZCL_DOOR_LOCK_SOUND_VOLUME_SILENT = 0,
    EMBER_ZCL_DOOR_LOCK_SOUND_VOLUME_LOW    = 1,
    EMBER_ZCL_DOOR_LOCK_SOUND_VOLUME_HIGH   = 2,
};

// Enum for DoorLockState
enum EmberAfDoorLockState : uint8_t
{
    EMBER_ZCL_DOOR_LOCK_STATE_NOT_FULLY_LOCKED = 0,
    EMBER_ZCL_DOOR_LOCK_STATE_LOCKED           = 1,
    EMBER_ZCL_DOOR_LOCK_STATE_UNLOCKED         = 2,
};

// Enum for DoorLockType
enum EmberAfDoorLockType : uint8_t
{
    EMBER_ZCL_DOOR_LOCK_TYPE_DEAD_BOLT      = 0,
    EMBER_ZCL_DOOR_LOCK_TYPE_MAGNETIC       = 1,
    EMBER_ZCL_DOOR_LOCK_TYPE_MORTISE        = 2,
    EMBER_ZCL_DOOR_LOCK_TYPE_RIM            = 3,
    EMBER_ZCL_DOOR_LOCK_TYPE_LATCH_BOLT     = 4,
    EMBER_ZCL_DOOR_LOCK_TYPE_CYLINDRICAL    = 5,
    EMBER_ZCL_DOOR_LOCK_TYPE_TUBULAR        = 6,
    EMBER_ZCL_DOOR_LOCK_TYPE_INTERCONNECTED = 7,
    EMBER_ZCL_DOOR_LOCK_TYPE_DEAD_LATCH     = 8,
    EMBER_ZCL_DOOR_LOCK_TYPE_OTHER          = 9,
};

// Enum for DoorLockUserStatus
enum EmberAfDoorLockUserStatus : uint8_t
{
    EMBER_ZCL_DOOR_LOCK_USER_STATUS_AVAILABLE         = 0,
    EMBER_ZCL_DOOR_LOCK_USER_STATUS_OCCUPIED_ENABLED  = 1,
    EMBER_ZCL_DOOR_LOCK_USER_STATUS_OCCUPIED_DISABLED = 3,
    EMBER_ZCL_DOOR_LOCK_USER_STATUS_NOT_SUPPORTED     = 255,
};

// Enum for DoorLockUserType
enum EmberAfDoorLockUserType : uint8_t
{
    EMBER_ZCL_DOOR_LOCK_USER_TYPE_UNRESTRICTED           = 0,
    EMBER_ZCL_DOOR_LOCK_USER_TYPE_YEAR_DAY_SCHEDULE_USER = 1,
    EMBER_ZCL_DOOR_LOCK_USER_TYPE_WEEK_DAY_SCHEDULE_USER = 2,
    EMBER_ZCL_DOOR_LOCK_USER_TYPE_MASTER_USER            = 3,
    EMBER_ZCL_DOOR_LOCK_USER_TYPE_NON_ACCESS_USER        = 4,
    EMBER_ZCL_DOOR_LOCK_USER_TYPE_NOT_SUPPORTED          = 255,
};

// Enum for DoorState
enum EmberAfDoorState : uint8_t
{
    EMBER_ZCL_DOOR_STATE_OPEN              = 0,
    EMBER_ZCL_DOOR_STATE_CLOSED            = 1,
    EMBER_ZCL_DOOR_STATE_ERROR_JAMMED      = 2,
    EMBER_ZCL_DOOR_STATE_ERROR_FORCED_OPEN = 3,
    EMBER_ZCL_DOOR_STATE_ERROR_UNSPECIFIED = 4,
};

// Enum for EnhancedColorMode
enum EmberAfEnhancedColorMode : uint8_t
{
    EMBER_ZCL_ENHANCED_COLOR_MODE_CURRENT_HUE_AND_CURRENT_SATURATION          = 0,
    EMBER_ZCL_ENHANCED_COLOR_MODE_CURRENT_X_AND_CURRENT_Y                     = 1,
    EMBER_ZCL_ENHANCED_COLOR_MODE_COLOR_TEMPERATURE                           = 2,
    EMBER_ZCL_ENHANCED_COLOR_MODE_ENHANCED_CURRENT_HUE_AND_CURRENT_SATURATION = 3,
};

// Enum for EventId
enum EmberAfEventId : uint8_t
{
    EMBER_ZCL_EVENT_ID_METER_COVER_REMOVED                   = 0,
    EMBER_ZCL_EVENT_ID_METER_COVER_CLOSED                    = 1,
    EMBER_ZCL_EVENT_ID_STRONG_MAGNETIC_FIELD                 = 2,
    EMBER_ZCL_EVENT_ID_NO_STRONG_MAGNETIC_FIELD              = 3,
    EMBER_ZCL_EVENT_ID_BATTERY_FAILURE                       = 4,
    EMBER_ZCL_EVENT_ID_LOW_BATTERY                           = 5,
    EMBER_ZCL_EVENT_ID_PROGRAM_MEMORY_ERROR                  = 6,
    EMBER_ZCL_EVENT_ID_RAM_ERROR                             = 7,
    EMBER_ZCL_EVENT_ID_NV_MEMORY_ERROR                       = 8,
    EMBER_ZCL_EVENT_ID_MEASUREMENT_SYSTEM_ERROR              = 9,
    EMBER_ZCL_EVENT_ID_WATCHDOG_ERROR                        = 10,
    EMBER_ZCL_EVENT_ID_SUPPLY_DISCONNECT_FAILURE             = 11,
    EMBER_ZCL_EVENT_ID_SUPPLY_CONNECT_FAILURE                = 12,
    EMBER_ZCL_EVENT_ID_MEASURMENT_SOFTWARE_CHANGED           = 13,
    EMBER_ZCL_EVENT_ID_DST_ENABLED                           = 14,
    EMBER_ZCL_EVENT_ID_DST_DISABLED                          = 15,
    EMBER_ZCL_EVENT_ID_CLOCK_ADJ_BACKWARD                    = 16,
    EMBER_ZCL_EVENT_ID_CLOCK_ADJ_FORWARD                     = 17,
    EMBER_ZCL_EVENT_ID_CLOCK_INVALID                         = 18,
    EMBER_ZCL_EVENT_ID_COMMS_ERROR_HAN                       = 19,
    EMBER_ZCL_EVENT_ID_COMMS_OK_HAN                          = 20,
    EMBER_ZCL_EVENT_ID_FRAUD_ATTEMPT                         = 21,
    EMBER_ZCL_EVENT_ID_POWER_LOSS                            = 22,
    EMBER_ZCL_EVENT_ID_INCORRECT_PROTOCOL                    = 23,
    EMBER_ZCL_EVENT_ID_UNUSUAL_HAN_TRAFFIC                   = 24,
    EMBER_ZCL_EVENT_ID_UNEXPECTED_CLOCK_CHANGE               = 25,
    EMBER_ZCL_EVENT_ID_COMMS_USING_UNAUTHENTICATED_COMPONENT = 26,
    EMBER_ZCL_EVENT_ID_ERROR_REG_CLEAR                       = 27,
    EMBER_ZCL_EVENT_ID_ALARM_REG_CLEAR                       = 28,
    EMBER_ZCL_EVENT_ID_UNEXPECTED_HW_RESET                   = 29,
    EMBER_ZCL_EVENT_ID_UNEXPECTED_PROGRAM_EXECUTION          = 30,
    EMBER_ZCL_EVENT_ID_EVENT_LOG_CLEARED                     = 31,
    EMBER_ZCL_EVENT_ID_MANUAL_DISCONNECT                     = 32,
    EMBER_ZCL_EVENT_ID_MANUAL_CONNECT                        = 33,
    EMBER_ZCL_EVENT_ID_REMOTE_DISCONNECTION                  = 34,
    EMBER_ZCL_EVENT_ID_LOCAL_DISCONNECTION                   = 35,
    EMBER_ZCL_EVENT_ID_LIMIT_THRESHOLD_EXCEEDED              = 36,
    EMBER_ZCL_EVENT_ID_LIMIT_THRESHOLD_OK                    = 37,
    EMBER_ZCL_EVENT_ID_LIMIT_THRESHOLD_CHANGED               = 38,
    EMBER_ZCL_EVENT_ID_MAXIMUM_DEMAND_EXCEEDED               = 39,
    EMBER_ZCL_EVENT_ID_PROFILE_CLEARED                       = 40,
    EMBER_ZCL_EVENT_ID_FIRMWARE_READY_FOR_ACTIVATION         = 41,
    EMBER_ZCL_EVENT_ID_FIRMWARE_ACTIVATED                    = 42,
    EMBER_ZCL_EVENT_ID_PATCH_FAILURE                         = 43,
    EMBER_ZCL_EVENT_ID_TOU_TARIFF_ACTIVATION                 = 44,
    EMBER_ZCL_EVENT_ID_8X8_TARIFFACTIVATED                   = 45,
    EMBER_ZCL_EVENT_ID_SINGLE_TARIFF_RATE_ACTIVATED          = 46,
    EMBER_ZCL_EVENT_ID_ASYNCHRONOUS_BILLING_OCCURRED         = 47,
    EMBER_ZCL_EVENT_ID_SYNCHRONOUS_BILLING_OCCURRED          = 48,
    EMBER_ZCL_EVENT_ID_INCORRECT_POLARITY                    = 128,
    EMBER_ZCL_EVENT_ID_CURRENT_NO_VOLTAGE                    = 129,
    EMBER_ZCL_EVENT_ID_UNDER_VOLTAGE                         = 130,
    EMBER_ZCL_EVENT_ID_OVER_VOLTAGE                          = 131,
    EMBER_ZCL_EVENT_ID_NORMAL_VOLTAGE                        = 132,
    EMBER_ZCL_EVENT_ID_PF_BELOW_THRESHOLD                    = 133,
    EMBER_ZCL_EVENT_ID_PF_ABOVE_THRESHOLD                    = 134,
    EMBER_ZCL_EVENT_ID_TERMINAL_COVER_REMOVED                = 135,
    EMBER_ZCL_EVENT_ID_TERMINAL_COVER_CLOSED                 = 136,
    EMBER_ZCL_EVENT_ID_REVERSE_FLOW                          = 160,
    EMBER_ZCL_EVENT_ID_TILT_TAMPER                           = 161,
    EMBER_ZCL_EVENT_ID_BATTERY_COVER_REMOVED                 = 162,
    EMBER_ZCL_EVENT_ID_BATTERY_COVER_CLOSED                  = 163,
    EMBER_ZCL_EVENT_ID_EXCESS_FLOW                           = 164,
    EMBER_ZCL_EVENT_ID_CREDIT_OK                             = 192,
    EMBER_ZCL_EVENT_ID_LOW_CREDIT                            = 193,
    EMBER_ZCL_EVENT_ID_EMERGENCY_CREDIT_IN_USE               = 192,
    EMBER_ZCL_EVENT_ID_EMERGENCY_CREDIT_EXHAUSTED            = 193,
    EMBER_ZCL_EVENT_ID_ZERO_CREDIT_EC_NOT_SELECTED           = 194,
    EMBER_ZCL_EVENT_ID_SUPPLY_ON                             = 195,
    EMBER_ZCL_EVENT_ID_SUPPLY_OFF_AARMED                     = 196,
    EMBER_ZCL_EVENT_ID_SUPPLY_OFF                            = 197,
    EMBER_ZCL_EVENT_ID_DISCOUNT_APPLIED                      = 198,
    EMBER_ZCL_EVENT_ID_MANUFACTURER_SPECIFIC_A               = 224,
    EMBER_ZCL_EVENT_ID_MANUFACTURER_SPECIFIC_B               = 225,
    EMBER_ZCL_EVENT_ID_MANUFACTURER_SPECIFIC_C               = 226,
    EMBER_ZCL_EVENT_ID_MANUFACTURER_SPECIFIC_D               = 227,
    EMBER_ZCL_EVENT_ID_MANUFACTURER_SPECIFIC_E               = 228,
    EMBER_ZCL_EVENT_ID_MANUFACTURER_SPECIFIC_F               = 229,
    EMBER_ZCL_EVENT_ID_MANUFACTURER_SPECIFIC_G               = 230,
    EMBER_ZCL_EVENT_ID_MANUFACTURER_SPECIFIC_H               = 231,
    EMBER_ZCL_EVENT_ID_MANUFACTURER_SPECIFIC_I               = 232,
};

// Enum for EventIdentification
enum EmberAfEventIdentification : uint8_t
{
    EMBER_ZCL_EVENT_IDENTIFICATION_END_OF_CYCLE        = 1,
    EMBER_ZCL_EVENT_IDENTIFICATION_TEMPERATURE_REACHED = 4,
    EMBER_ZCL_EVENT_IDENTIFICATION_END_OF_COOKING      = 5,
    EMBER_ZCL_EVENT_IDENTIFICATION_SWITCHING_OFF       = 6,
    EMBER_ZCL_EVENT_IDENTIFICATION_WRONG_DATA          = 7,
};

// Enum for FanMode
enum EmberAfFanMode : uint8_t
{
    EMBER_ZCL_FAN_MODE_OFF    = 0,
    EMBER_ZCL_FAN_MODE_LOW    = 1,
    EMBER_ZCL_FAN_MODE_MEDIUM = 2,
    EMBER_ZCL_FAN_MODE_HIGH   = 3,
    EMBER_ZCL_FAN_MODE_ON     = 4,
    EMBER_ZCL_FAN_MODE_AUTO   = 5,
    EMBER_ZCL_FAN_MODE_SMART  = 6,
};

// Enum for FanModeSequence
enum EmberAfFanModeSequence : uint8_t
{
    EMBER_ZCL_FAN_MODE_SEQUENCE_LOW_MED_HIGH      = 0,
    EMBER_ZCL_FAN_MODE_SEQUENCE_LOW_HIGH          = 1,
    EMBER_ZCL_FAN_MODE_SEQUENCE_LOW_MED_HIGH_AUTO = 2,
    EMBER_ZCL_FAN_MODE_SEQUENCE_LOW_HIGH_AUTO     = 3,
    EMBER_ZCL_FAN_MODE_SEQUENCE_ON_AUTO           = 4,
};

// Enum for GeneralCommissioningError
enum EmberAfGeneralCommissioningError : uint8_t
{
    EMBER_ZCL_GENERAL_COMMISSIONING_ERROR_OK                     = 0,
    EMBER_ZCL_GENERAL_COMMISSIONING_ERROR_VALUE_OUTSIDE_RANGE    = 1,
    EMBER_ZCL_GENERAL_COMMISSIONING_ERROR_INVALID_AUTHENTICATION = 2,
};

// Enum for GenericDeviceClass
enum EmberAfGenericDeviceClass : uint8_t
{
    EMBER_ZCL_GENERIC_DEVICE_CLASS_LIGHTING = 0,
};

// Enum for GenericDeviceType
enum EmberAfGenericDeviceType : uint8_t
{
    EMBER_ZCL_GENERIC_DEVICE_TYPE_INCANDESCENT               = 0,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_SPOTLIGHT_HALOGEN          = 1,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_HALOGEN_BULB               = 2,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_CFL                        = 3,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_LINEAR_FLOURESCENT         = 4,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_LED_BULB                   = 5,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_SPOTLIGHT_LED              = 6,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_LED_STRIP                  = 7,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_LED_TUBE                   = 8,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_GENERIC_INDOOR_FIXTURE     = 9,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_GENERIC_OUTDOOR_FIXTURE    = 10,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_PENDANT_FIXTURE            = 11,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_FLOOR_STANDING_FIXTURE     = 12,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_GENERIC_CONTROLLER         = 224,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_WALL_SWITCH                = 225,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_PORTABLE_REMOTE_CONTROLLER = 226,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_MOTION_OR_LIGHT_SENSOR     = 227,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_GENERIC_ACTUATOR           = 240,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_PLUGIN_UNIT                = 241,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_RETROFIT_ACTUATOR          = 242,
    EMBER_ZCL_GENERIC_DEVICE_TYPE_UNSPECIFIED                = 255,
};

// Enum for GroupKeySecurityPolicy
enum EmberAfGroupKeySecurityPolicy : uint8_t
{
    EMBER_ZCL_GROUP_KEY_SECURITY_POLICY_STANDARD    = 0,
    EMBER_ZCL_GROUP_KEY_SECURITY_POLICY_LOW_LATENCY = 1,
};

// Enum for HardwareFaultType
enum EmberAfHardwareFaultType : uint8_t
{
    EMBER_ZCL_HARDWARE_FAULT_TYPE_UNSPECIFIED               = 0,
    EMBER_ZCL_HARDWARE_FAULT_TYPE_RADIO                     = 1,
    EMBER_ZCL_HARDWARE_FAULT_TYPE_SENSOR                    = 2,
    EMBER_ZCL_HARDWARE_FAULT_TYPE_RESETTABLE_OVER_TEMP      = 3,
    EMBER_ZCL_HARDWARE_FAULT_TYPE_NON_RESETTABLE_OVER_TEMP  = 4,
    EMBER_ZCL_HARDWARE_FAULT_TYPE_POWER_SOURCE              = 5,
    EMBER_ZCL_HARDWARE_FAULT_TYPE_VISUAL_DISPLAY_FAULT      = 6,
    EMBER_ZCL_HARDWARE_FAULT_TYPE_AUDIO_OUTPUT_FAULT        = 7,
    EMBER_ZCL_HARDWARE_FAULT_TYPE_USER_INTERFACE_FAULT      = 8,
    EMBER_ZCL_HARDWARE_FAULT_TYPE_NON_VOLATILE_MEMORY_ERROR = 9,
    EMBER_ZCL_HARDWARE_FAULT_TYPE_TAMPER_DETECTED           = 10,
};

// Enum for HueDirection
enum EmberAfHueDirection : uint8_t
{
    EMBER_ZCL_HUE_DIRECTION_SHORTEST_DISTANCE = 0,
    EMBER_ZCL_HUE_DIRECTION_LONGEST_DISTANCE  = 1,
    EMBER_ZCL_HUE_DIRECTION_UP                = 2,
    EMBER_ZCL_HUE_DIRECTION_DOWN              = 3,
};

// Enum for HueMoveMode
enum EmberAfHueMoveMode : uint8_t
{
    EMBER_ZCL_HUE_MOVE_MODE_STOP = 0,
    EMBER_ZCL_HUE_MOVE_MODE_UP   = 1,
    EMBER_ZCL_HUE_MOVE_MODE_DOWN = 3,
};

// Enum for HueStepMode
enum EmberAfHueStepMode : uint8_t
{
    EMBER_ZCL_HUE_STEP_MODE_UP   = 1,
    EMBER_ZCL_HUE_STEP_MODE_DOWN = 3,
};

// Enum for IasAceAlarmStatus
enum EmberAfIasAceAlarmStatus : uint8_t
{
    EMBER_ZCL_IAS_ACE_ALARM_STATUS_NO_ALARM        = 0,
    EMBER_ZCL_IAS_ACE_ALARM_STATUS_BURGLAR         = 1,
    EMBER_ZCL_IAS_ACE_ALARM_STATUS_FIRE            = 2,
    EMBER_ZCL_IAS_ACE_ALARM_STATUS_EMERGENCY       = 3,
    EMBER_ZCL_IAS_ACE_ALARM_STATUS_POLICE_PANIC    = 4,
    EMBER_ZCL_IAS_ACE_ALARM_STATUS_FIRE_PANIC      = 5,
    EMBER_ZCL_IAS_ACE_ALARM_STATUS_EMERGENCY_PANIC = 6,
};

// Enum for IasAceArmMode
enum EmberAfIasAceArmMode : uint8_t
{
    EMBER_ZCL_IAS_ACE_ARM_MODE_DISARM                     = 0,
    EMBER_ZCL_IAS_ACE_ARM_MODE_ARM_DAY_HOME_ZONES_ONLY    = 1,
    EMBER_ZCL_IAS_ACE_ARM_MODE_ARM_NIGHT_SLEEP_ZONES_ONLY = 2,
    EMBER_ZCL_IAS_ACE_ARM_MODE_ARM_ALL_ZONES              = 3,
};

// Enum for IasAceArmNotification
enum EmberAfIasAceArmNotification : uint8_t
{
    EMBER_ZCL_IAS_ACE_ARM_NOTIFICATION_ALL_ZONES_DISARMED           = 0,
    EMBER_ZCL_IAS_ACE_ARM_NOTIFICATION_ONLY_DAY_HOME_ZONES_ARMED    = 1,
    EMBER_ZCL_IAS_ACE_ARM_NOTIFICATION_ONLY_NIGHT_SLEEP_ZONES_ARMED = 2,
    EMBER_ZCL_IAS_ACE_ARM_NOTIFICATION_ALL_ZONES_ARMED              = 3,
    EMBER_ZCL_IAS_ACE_ARM_NOTIFICATION_INVALID_ARM_DISARM_CODE      = 4,
    EMBER_ZCL_IAS_ACE_ARM_NOTIFICATION_NOT_READY_TO_ARM             = 5,
    EMBER_ZCL_IAS_ACE_ARM_NOTIFICATION_ALREADY_DISARMED             = 6,
};

// Enum for IasAceAudibleNotification
enum EmberAfIasAceAudibleNotification : uint8_t
{
    EMBER_ZCL_IAS_ACE_AUDIBLE_NOTIFICATION_MUTE          = 0,
    EMBER_ZCL_IAS_ACE_AUDIBLE_NOTIFICATION_DEFAULT_SOUND = 1,
};

// Enum for IasAceBypassResult
enum EmberAfIasAceBypassResult : uint8_t
{
    EMBER_ZCL_IAS_ACE_BYPASS_RESULT_ZONE_BYPASSED           = 0,
    EMBER_ZCL_IAS_ACE_BYPASS_RESULT_ZONE_NOT_BYPASSED       = 1,
    EMBER_ZCL_IAS_ACE_BYPASS_RESULT_NOT_ALLOWED             = 2,
    EMBER_ZCL_IAS_ACE_BYPASS_RESULT_INVALID_ZONE_ID         = 3,
    EMBER_ZCL_IAS_ACE_BYPASS_RESULT_UNKNOWN_ZONE_ID         = 4,
    EMBER_ZCL_IAS_ACE_BYPASS_RESULT_INVALID_ARM_DISARM_CODE = 5,
};

// Enum for IasAcePanelStatus
enum EmberAfIasAcePanelStatus : uint8_t
{
    EMBER_ZCL_IAS_ACE_PANEL_STATUS_PANEL_DISARMED   = 0,
    EMBER_ZCL_IAS_ACE_PANEL_STATUS_ARMED_STAY       = 1,
    EMBER_ZCL_IAS_ACE_PANEL_STATUS_ARMED_NIGHT      = 2,
    EMBER_ZCL_IAS_ACE_PANEL_STATUS_ARMED_AWAY       = 3,
    EMBER_ZCL_IAS_ACE_PANEL_STATUS_EXIT_DELAY       = 4,
    EMBER_ZCL_IAS_ACE_PANEL_STATUS_ENTRY_DELAY      = 5,
    EMBER_ZCL_IAS_ACE_PANEL_STATUS_NOT_READY_TO_ARM = 6,
    EMBER_ZCL_IAS_ACE_PANEL_STATUS_IN_ALARM         = 7,
    EMBER_ZCL_IAS_ACE_PANEL_STATUS_ARMING_STAY      = 8,
    EMBER_ZCL_IAS_ACE_PANEL_STATUS_ARMING_NIGHT     = 9,
    EMBER_ZCL_IAS_ACE_PANEL_STATUS_ARMING_AWAY      = 10,
};

// Enum for IasEnrollResponseCode
enum EmberAfIasEnrollResponseCode : uint8_t
{
    EMBER_ZCL_IAS_ENROLL_RESPONSE_CODE_SUCCESS          = 0,
    EMBER_ZCL_IAS_ENROLL_RESPONSE_CODE_NOT_SUPPORTED    = 1,
    EMBER_ZCL_IAS_ENROLL_RESPONSE_CODE_NO_ENROLL_PERMIT = 2,
    EMBER_ZCL_IAS_ENROLL_RESPONSE_CODE_TOO_MANY_ZONES   = 3,
};

// Enum for IasZoneState
enum EmberAfIasZoneState : uint8_t
{
    EMBER_ZCL_IAS_ZONE_STATE_NOT_ENROLLED = 0,
    EMBER_ZCL_IAS_ZONE_STATE_ENROLLED     = 1,
};

// Enum for IasZoneType
enum EmberAfIasZoneType : uint16_t
{
    EMBER_ZCL_IAS_ZONE_TYPE_STANDARD_CIE              = 0,
    EMBER_ZCL_IAS_ZONE_TYPE_MOTION_SENSOR             = 13,
    EMBER_ZCL_IAS_ZONE_TYPE_CONTACT_SWITCH            = 21,
    EMBER_ZCL_IAS_ZONE_TYPE_FIRE_SENSOR               = 40,
    EMBER_ZCL_IAS_ZONE_TYPE_WATER_SENSOR              = 42,
    EMBER_ZCL_IAS_ZONE_TYPE_GAS_SENSOR                = 43,
    EMBER_ZCL_IAS_ZONE_TYPE_PERSONAL_EMERGENCY_DEVICE = 44,
    EMBER_ZCL_IAS_ZONE_TYPE_VIBRATION_MOVEMENT_SENSOR = 45,
    EMBER_ZCL_IAS_ZONE_TYPE_REMOTE_CONTROL            = 271,
    EMBER_ZCL_IAS_ZONE_TYPE_KEY_FOB                   = 277,
    EMBER_ZCL_IAS_ZONE_TYPE_KEYPAD                    = 541,
    EMBER_ZCL_IAS_ZONE_TYPE_STANDARD_WARNING_DEVICE   = 549,
    EMBER_ZCL_IAS_ZONE_TYPE_GLASS_BREAK_SENSOR        = 550,
    EMBER_ZCL_IAS_ZONE_TYPE_CARBON_MONOXIDE_SENSOR    = 551,
    EMBER_ZCL_IAS_ZONE_TYPE_SECURITY_REPEATER         = 553,
    EMBER_ZCL_IAS_ZONE_TYPE_INVALID_ZONE_TYPE         = 65535,
};

// Enum for IdentifyEffectIdentifier
enum EmberAfIdentifyEffectIdentifier : uint8_t
{
    EMBER_ZCL_IDENTIFY_EFFECT_IDENTIFIER_BLINK          = 0,
    EMBER_ZCL_IDENTIFY_EFFECT_IDENTIFIER_BREATHE        = 1,
    EMBER_ZCL_IDENTIFY_EFFECT_IDENTIFIER_OKAY           = 2,
    EMBER_ZCL_IDENTIFY_EFFECT_IDENTIFIER_CHANNEL_CHANGE = 11,
    EMBER_ZCL_IDENTIFY_EFFECT_IDENTIFIER_FINISH_EFFECT  = 254,
    EMBER_ZCL_IDENTIFY_EFFECT_IDENTIFIER_STOP_EFFECT    = 255,
};

// Enum for IdentifyEffectVariant
enum EmberAfIdentifyEffectVariant : uint8_t
{
    EMBER_ZCL_IDENTIFY_EFFECT_VARIANT_DEFAULT = 0,
};

// Enum for InterfaceType
enum EmberAfInterfaceType : uint8_t
{
    EMBER_ZCL_INTERFACE_TYPE_UNSPECIFIED = 0,
    EMBER_ZCL_INTERFACE_TYPE_WI_FI       = 1,
    EMBER_ZCL_INTERFACE_TYPE_ETHERNET    = 2,
    EMBER_ZCL_INTERFACE_TYPE_CELLULAR    = 3,
    EMBER_ZCL_INTERFACE_TYPE_THREAD      = 4,
};

// Enum for KeypadInputCecKeyCode
enum EmberAfKeypadInputCecKeyCode : uint8_t
{
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_SELECT                       = 0,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_UP                           = 1,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_DOWN                         = 2,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_LEFT                         = 3,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_RIGHT                        = 4,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_RIGHT_UP                     = 5,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_RIGHT_DOWN                   = 6,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_LEFT_UP                      = 7,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_LEFT_DOWN                    = 8,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_ROOT_MENU                    = 9,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_SETUP_MENU                   = 10,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_CONTENTS_MENU                = 11,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_FAVORITE_MENU                = 12,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_EXIT                         = 13,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_MEDIA_TOP_MENU               = 16,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_MEDIA_CONTEXT_SENSITIVE_MENU = 17,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_NUMBER_ENTRY_MODE            = 29,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_NUMBER11                     = 30,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_NUMBER12                     = 31,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_NUMBER0_OR_NUMBER10          = 32,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_NUMBERS1                     = 33,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_NUMBERS2                     = 34,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_NUMBERS3                     = 35,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_NUMBERS4                     = 36,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_NUMBERS5                     = 37,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_NUMBERS6                     = 38,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_NUMBERS7                     = 39,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_NUMBERS8                     = 40,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_NUMBERS9                     = 41,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_DOT                          = 42,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_ENTER                        = 43,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_CLEAR                        = 44,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_NEXT_FAVORITE                = 47,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_CHANNEL_UP                   = 48,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_CHANNEL_DOWN                 = 49,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_PREVIOUS_CHANNEL             = 50,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_SOUND_SELECT                 = 51,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_INPUT_SELECT                 = 52,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_DISPLAY_INFORMATION          = 53,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_HELP                         = 54,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_PAGE_UP                      = 55,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_PAGE_DOWN                    = 56,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_POWER                        = 64,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_VOLUME_UP                    = 65,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_VOLUME_DOWN                  = 66,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_MUTE                         = 67,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_PLAY                         = 68,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_STOP                         = 69,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_PAUSE                        = 70,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_RECORD                       = 71,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_REWIND                       = 72,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_FAST_FORWARD                 = 73,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_EJECT                        = 74,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_FORWARD                      = 75,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_BACKWARD                     = 76,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_STOP_RECORD                  = 77,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_PAUSE_RECORD                 = 78,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_RESERVED                     = 79,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_ANGLE                        = 80,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_SUB_PICTURE                  = 81,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_VIDEO_ON_DEMAND              = 82,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_ELECTRONIC_PROGRAM_GUIDE     = 83,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_TIMER_PROGRAMMING            = 84,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_INITIAL_CONFIGURATION        = 85,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_SELECT_BROADCAST_TYPE        = 86,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_SELECT_SOUND_PRESENTATION    = 87,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_PLAY_FUNCTION                = 96,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_PAUSE_PLAY_FUNCTION          = 97,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_RECORD_FUNCTION              = 98,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_PAUSE_RECORD_FUNCTION        = 99,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_STOP_FUNCTION                = 100,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_MUTE_FUNCTION                = 101,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_RESTORE_VOLUME_FUNCTION      = 102,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_TUNE_FUNCTION                = 103,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_SELECT_MEDIA_FUNCTION        = 104,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_SELECT_AV_INPUT_FUNCTION     = 105,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_SELECT_AUDIO_INPUT_FUNCTION  = 106,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_POWER_TOGGLE_FUNCTION        = 107,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_POWER_OFF_FUNCTION           = 108,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_POWER_ON_FUNCTION            = 109,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_F1_BLUE                      = 113,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_F2_RED                       = 114,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_F3_GREEN                     = 115,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_F4_YELLOW                    = 116,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_F5                           = 117,
    EMBER_ZCL_KEYPAD_INPUT_CEC_KEY_CODE_DATA                         = 118,
};

// Enum for KeypadInputStatus
enum EmberAfKeypadInputStatus : uint8_t
{
    EMBER_ZCL_KEYPAD_INPUT_STATUS_SUCCESS                      = 0,
    EMBER_ZCL_KEYPAD_INPUT_STATUS_UNSUPPORTED_KEY              = 1,
    EMBER_ZCL_KEYPAD_INPUT_STATUS_INVALID_KEY_IN_CURRENT_STATE = 2,
};

// Enum for KeypadLockout
enum EmberAfKeypadLockout : uint8_t
{
    EMBER_ZCL_KEYPAD_LOCKOUT_NO_LOCKOUT          = 0,
    EMBER_ZCL_KEYPAD_LOCKOUT_LEVEL_ONE_LOCKOUT   = 1,
    EMBER_ZCL_KEYPAD_LOCKOUT_LEVEL_TWO_LOCKOUT   = 2,
    EMBER_ZCL_KEYPAD_LOCKOUT_LEVEL_THREE_LOCKOUT = 3,
    EMBER_ZCL_KEYPAD_LOCKOUT_LEVEL_FOUR_LOCKOUT  = 4,
    EMBER_ZCL_KEYPAD_LOCKOUT_LEVELFIVE_LOCKOUT   = 5,
};

// Enum for LevelControlOptions
enum EmberAfLevelControlOptions : uint8_t
{
    EMBER_ZCL_LEVEL_CONTROL_OPTIONS_EXECUTE_IF_OFF             = 1,
    EMBER_ZCL_LEVEL_CONTROL_OPTIONS_COUPLE_COLOR_TEMP_TO_LEVEL = 2,
};

// Enum for LevelStatus
enum EmberAfLevelStatus : uint8_t
{
    EMBER_ZCL_LEVEL_STATUS_ON_TARGET    = 0,
    EMBER_ZCL_LEVEL_STATUS_BELOW_TARGET = 1,
    EMBER_ZCL_LEVEL_STATUS_ABOVE_TARGET = 2,
};

// Enum for LogsIntent
enum EmberAfLogsIntent : uint8_t
{
    EMBER_ZCL_LOGS_INTENT_END_USER_SUPPORT = 0,
    EMBER_ZCL_LOGS_INTENT_NETWORK_DIAG     = 1,
    EMBER_ZCL_LOGS_INTENT_CRASH_LOGS       = 2,
};

// Enum for LogsStatus
enum EmberAfLogsStatus : uint8_t
{
    EMBER_ZCL_LOGS_STATUS_SUCCESS   = 0,
    EMBER_ZCL_LOGS_STATUS_EXHAUSTED = 1,
    EMBER_ZCL_LOGS_STATUS_NO_LOGS   = 2,
    EMBER_ZCL_LOGS_STATUS_BUSY      = 3,
    EMBER_ZCL_LOGS_STATUS_DENIED    = 4,
};

// Enum for LogsTransferProtocol
enum EmberAfLogsTransferProtocol : uint8_t
{
    EMBER_ZCL_LOGS_TRANSFER_PROTOCOL_RESPONSE_PAYLOAD = 0,
    EMBER_ZCL_LOGS_TRANSFER_PROTOCOL_BDX              = 1,
};

// Enum for MeasurementLightSensorType
enum EmberAfMeasurementLightSensorType : uint8_t
{
    EMBER_ZCL_MEASUREMENT_LIGHT_SENSOR_TYPE_PHOTODIODE = 0,
    EMBER_ZCL_MEASUREMENT_LIGHT_SENSOR_TYPE_CMOS       = 1,
};

// Enum for MediaInputType
enum EmberAfMediaInputType : uint8_t
{
    EMBER_ZCL_MEDIA_INPUT_TYPE_INTERNAL  = 0,
    EMBER_ZCL_MEDIA_INPUT_TYPE_AUX       = 1,
    EMBER_ZCL_MEDIA_INPUT_TYPE_COAX      = 2,
    EMBER_ZCL_MEDIA_INPUT_TYPE_COMPOSITE = 3,
    EMBER_ZCL_MEDIA_INPUT_TYPE_HDMI      = 4,
    EMBER_ZCL_MEDIA_INPUT_TYPE_INPUT     = 5,
    EMBER_ZCL_MEDIA_INPUT_TYPE_LINE      = 6,
    EMBER_ZCL_MEDIA_INPUT_TYPE_OPTICAL   = 7,
    EMBER_ZCL_MEDIA_INPUT_TYPE_VIDEO     = 8,
    EMBER_ZCL_MEDIA_INPUT_TYPE_SCART     = 9,
    EMBER_ZCL_MEDIA_INPUT_TYPE_USB       = 10,
    EMBER_ZCL_MEDIA_INPUT_TYPE_OTHER     = 11,
};

// Enum for MediaPlaybackState
enum EmberAfMediaPlaybackState : uint8_t
{
    EMBER_ZCL_MEDIA_PLAYBACK_STATE_PLAYING     = 0,
    EMBER_ZCL_MEDIA_PLAYBACK_STATE_PAUSED      = 1,
    EMBER_ZCL_MEDIA_PLAYBACK_STATE_NOT_PLAYING = 2,
    EMBER_ZCL_MEDIA_PLAYBACK_STATE_BUFFERING   = 3,
};

// Enum for MediaPlaybackStatus
enum EmberAfMediaPlaybackStatus : uint8_t
{
    EMBER_ZCL_MEDIA_PLAYBACK_STATUS_SUCCESS                   = 0,
    EMBER_ZCL_MEDIA_PLAYBACK_STATUS_INVALID_STATE_FOR_COMMAND = 1,
    EMBER_ZCL_MEDIA_PLAYBACK_STATUS_NOT_ALLOWED               = 2,
    EMBER_ZCL_MEDIA_PLAYBACK_STATUS_NOT_ACTIVE                = 3,
    EMBER_ZCL_MEDIA_PLAYBACK_STATUS_SPEED_OUT_OF_RANGE        = 4,
    EMBER_ZCL_MEDIA_PLAYBACK_STATUS_SEEK_OUT_OF_RANGE         = 5,
};

// Enum for MessagingControlConfirmation
enum EmberAfMessagingControlConfirmation : uint8_t
{
    EMBER_ZCL_MESSAGING_CONTROL_CONFIRMATION_NOT_REQUIRED = 0,
    EMBER_ZCL_MESSAGING_CONTROL_CONFIRMATION_REQUIRED     = 128,
};

// Enum for MessagingControlEnhancedConfirmation
enum EmberAfMessagingControlEnhancedConfirmation : uint8_t
{
    EMBER_ZCL_MESSAGING_CONTROL_ENHANCED_CONFIRMATION_NOT_REQUIRED = 0,
    EMBER_ZCL_MESSAGING_CONTROL_ENHANCED_CONFIRMATION_REQUIRED     = 32,
};

// Enum for MessagingControlImportance
enum EmberAfMessagingControlImportance : uint8_t
{
    EMBER_ZCL_MESSAGING_CONTROL_IMPORTANCE_LOW      = 0,
    EMBER_ZCL_MESSAGING_CONTROL_IMPORTANCE_MEDIUM   = 4,
    EMBER_ZCL_MESSAGING_CONTROL_IMPORTANCE_HIGH     = 8,
    EMBER_ZCL_MESSAGING_CONTROL_IMPORTANCE_CRITICAL = 12,
};

// Enum for MessagingControlTransmission
enum EmberAfMessagingControlTransmission : uint8_t
{
    EMBER_ZCL_MESSAGING_CONTROL_TRANSMISSION_NORMAL               = 0,
    EMBER_ZCL_MESSAGING_CONTROL_TRANSMISSION_NORMAL_AND_ANONYMOUS = 1,
    EMBER_ZCL_MESSAGING_CONTROL_TRANSMISSION_ANONYMOUS            = 2,
    EMBER_ZCL_MESSAGING_CONTROL_TRANSMISSION_RESERVED             = 3,
};

// Enum for MeterTypeId
enum EmberAfMeterTypeId : uint16_t
{
    EMBER_ZCL_METER_TYPE_ID_UTILITY_PRIMARY_METER    = 0,
    EMBER_ZCL_METER_TYPE_ID_UTILITY_PRODUCTION_METER = 1,
    EMBER_ZCL_METER_TYPE_ID_UTILITY_SECONDARY_METER  = 2,
    EMBER_ZCL_METER_TYPE_ID_PRIVATE_PRIMARY_METER    = 256,
    EMBER_ZCL_METER_TYPE_ID_PRIVATE_PRODUCTION_METER = 257,
    EMBER_ZCL_METER_TYPE_ID_PRIVATE_SECONDARY_METERS = 258,
    EMBER_ZCL_METER_TYPE_ID_GENERIC_METER            = 272,
};

// Enum for MoveMode
enum EmberAfMoveMode : uint8_t
{
    EMBER_ZCL_MOVE_MODE_UP   = 0,
    EMBER_ZCL_MOVE_MODE_DOWN = 1,
};

// Enum for NavigateTargetStatus
enum EmberAfNavigateTargetStatus : uint8_t
{
    EMBER_ZCL_NAVIGATE_TARGET_STATUS_SUCCESS           = 0,
    EMBER_ZCL_NAVIGATE_TARGET_STATUS_APP_NOT_AVAILABLE = 1,
    EMBER_ZCL_NAVIGATE_TARGET_STATUS_SYSTEM_BUSY       = 2,
};

// Enum for NetworkCommissioningError
enum EmberAfNetworkCommissioningError : uint8_t
{
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_SUCCESS                  = 0,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_OUT_OF_RANGE             = 1,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_BOUNDS_EXCEEDED          = 2,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_NETWORK_ID_NOT_FOUND     = 3,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_DUPLICATE_NETWORK_ID     = 4,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_NETWORK_NOT_FOUND        = 5,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_REGULATORY_ERROR         = 6,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_AUTH_FAILURE             = 7,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_UNSUPPORTED_SECURITY     = 8,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_OTHER_CONNECTION_FAILURE = 9,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_IPV6_FAILED              = 10,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_IP_BIND_FAILED           = 11,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_LABEL9                   = 12,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_LABEL10                  = 13,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_LABEL11                  = 14,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_LABEL12                  = 15,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_LABEL13                  = 16,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_LABEL14                  = 17,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_LABEL15                  = 18,
    EMBER_ZCL_NETWORK_COMMISSIONING_ERROR_UNKNOWN_ERROR            = 19,
};

// Enum for NetworkFault
enum EmberAfNetworkFault : uint8_t
{
    EMBER_ZCL_NETWORK_FAULT_UNSPECIFIED      = 0,
    EMBER_ZCL_NETWORK_FAULT_LINK_DOWN        = 1,
    EMBER_ZCL_NETWORK_FAULT_HARDWARE_FAILURE = 2,
    EMBER_ZCL_NETWORK_FAULT_NETWORK_JAMMED   = 3,
};

// Enum for NetworkFaultType
enum EmberAfNetworkFaultType : uint8_t
{
    EMBER_ZCL_NETWORK_FAULT_TYPE_UNSPECIFIED       = 0,
    EMBER_ZCL_NETWORK_FAULT_TYPE_HARDWARE_FAILURE  = 1,
    EMBER_ZCL_NETWORK_FAULT_TYPE_NETWORK_JAMMED    = 2,
    EMBER_ZCL_NETWORK_FAULT_TYPE_CONNECTION_FAILED = 3,
};

// Enum for OTAAnnouncementReason
enum EmberAfOTAAnnouncementReason : uint8_t
{
    EMBER_ZCL_OTA_ANNOUNCEMENT_REASON_SIMPLE_ANNOUNCEMENT       = 0,
    EMBER_ZCL_OTA_ANNOUNCEMENT_REASON_UPDATE_AVAILABLE          = 1,
    EMBER_ZCL_OTA_ANNOUNCEMENT_REASON_CRITICAL_UPDATE_AVAILABLE = 2,
};

// Enum for OTAApplyUpdateAction
enum EmberAfOTAApplyUpdateAction : uint8_t
{
    EMBER_ZCL_OTA_APPLY_UPDATE_ACTION_PROCEED           = 0,
    EMBER_ZCL_OTA_APPLY_UPDATE_ACTION_AWAIT_NEXT_ACTION = 1,
    EMBER_ZCL_OTA_APPLY_UPDATE_ACTION_DISCONTINUE       = 2,
};

// Enum for OTADownloadProtocol
enum EmberAfOTADownloadProtocol : uint8_t
{
    EMBER_ZCL_OTA_DOWNLOAD_PROTOCOL_BDX_SYNCHRONOUS  = 0,
    EMBER_ZCL_OTA_DOWNLOAD_PROTOCOL_BDX_ASYNCHRONOUS = 1,
    EMBER_ZCL_OTA_DOWNLOAD_PROTOCOL_HTTPS            = 2,
    EMBER_ZCL_OTA_DOWNLOAD_PROTOCOL_VENDOR_SPECIFIC  = 3,
};

// Enum for OTAQueryStatus
enum EmberAfOTAQueryStatus : uint8_t
{
    EMBER_ZCL_OTA_QUERY_STATUS_UPDATE_AVAILABLE = 0,
    EMBER_ZCL_OTA_QUERY_STATUS_BUSY             = 1,
    EMBER_ZCL_OTA_QUERY_STATUS_NOT_AVAILABLE    = 2,
};

// Enum for OccupancySensorType
enum EmberAfOccupancySensorType : uint8_t
{
    EMBER_ZCL_OCCUPANCY_SENSOR_TYPE_PIR                = 0,
    EMBER_ZCL_OCCUPANCY_SENSOR_TYPE_ULTRASONIC         = 1,
    EMBER_ZCL_OCCUPANCY_SENSOR_TYPE_PIR_AND_ULTRASONIC = 2,
    EMBER_ZCL_OCCUPANCY_SENSOR_TYPE_PHYSICAL_CONTACT   = 3,
};

// Enum for OnOffDelayedAllOffEffectVariant
enum EmberAfOnOffDelayedAllOffEffectVariant : uint8_t
{
    EMBER_ZCL_ON_OFF_DELAYED_ALL_OFF_EFFECT_VARIANT_FADE_TO_OFF_IN_0P8_SECONDS                                        = 0,
    EMBER_ZCL_ON_OFF_DELAYED_ALL_OFF_EFFECT_VARIANT_NO_FADE                                                           = 1,
    EMBER_ZCL_ON_OFF_DELAYED_ALL_OFF_EFFECT_VARIANT_50_PERCENT_DIM_DOWN_IN_0P8_SECONDS_THEN_FADE_TO_OFF_IN_12_SECONDS = 2,
};

// Enum for OnOffDyingLightEffectVariant
enum EmberAfOnOffDyingLightEffectVariant : uint8_t
{
    EMBER_ZCL_ON_OFF_DYING_LIGHT_EFFECT_VARIANT_20_PERCENTER_DIM_UP_IN_0P5_SECONDS_THEN_FADE_TO_OFF_IN_1_SECOND = 0,
};

// Enum for OnOffEffectIdentifier
enum EmberAfOnOffEffectIdentifier : uint8_t
{
    EMBER_ZCL_ON_OFF_EFFECT_IDENTIFIER_DELAYED_ALL_OFF = 0,
    EMBER_ZCL_ON_OFF_EFFECT_IDENTIFIER_DYING_LIGHT     = 1,
};

// Enum for OperatingMode
enum EmberAfOperatingMode : uint8_t
{
    EMBER_ZCL_OPERATING_MODE_NORMAL    = 0,
    EMBER_ZCL_OPERATING_MODE_CONFIGURE = 1,
};

// Enum for PHYRateType
enum EmberAfPHYRateType : uint8_t
{
    EMBER_ZCL_PHY_RATE_TYPE_10_M   = 0,
    EMBER_ZCL_PHY_RATE_TYPE_100_M  = 1,
    EMBER_ZCL_PHY_RATE_TYPE_1000_M = 2,
    EMBER_ZCL_PHY_RATE_TYPE_2__5_G = 3,
    EMBER_ZCL_PHY_RATE_TYPE_5_G    = 4,
    EMBER_ZCL_PHY_RATE_TYPE_10_G   = 5,
    EMBER_ZCL_PHY_RATE_TYPE_40_G   = 6,
    EMBER_ZCL_PHY_RATE_TYPE_100_G  = 7,
    EMBER_ZCL_PHY_RATE_TYPE_200_G  = 8,
    EMBER_ZCL_PHY_RATE_TYPE_400_G  = 9,
};

// Enum for PhysicalEnvironment
enum EmberAfPhysicalEnvironment : uint8_t
{
    EMBER_ZCL_PHYSICAL_ENVIRONMENT_UNSPECIFIED                   = 0,
    EMBER_ZCL_PHYSICAL_ENVIRONMENT_FIRST_PROFILE_SPECIFIED_VALUE = 1,
    EMBER_ZCL_PHYSICAL_ENVIRONMENT_LAST_PROFILE_SPECIFIED_VALUE  = 127,
    EMBER_ZCL_PHYSICAL_ENVIRONMENT_UNKNOWN                       = 255,
};

// Enum for PowerProfileState
enum EmberAfPowerProfileState : uint8_t
{
    EMBER_ZCL_POWER_PROFILE_STATE_POWER_PROFILE_WAITING_TO_START = 1,
    EMBER_ZCL_POWER_PROFILE_STATE_POWER_PROFILE_STARTED          = 2,
    EMBER_ZCL_POWER_PROFILE_STATE_ENERGY_PHASE_RUNNING           = 3,
    EMBER_ZCL_POWER_PROFILE_STATE_ENERGY_PHASE_ENDED             = 4,
    EMBER_ZCL_POWER_PROFILE_STATE_ENERGY_PHASE_WAITING_TO_START  = 5,
    EMBER_ZCL_POWER_PROFILE_STATE_ENERGY_PHASE_STARTED           = 6,
    EMBER_ZCL_POWER_PROFILE_STATE_POWER_PROFILE_ENDED            = 7,
    EMBER_ZCL_POWER_PROFILE_STATE_PROFILE_READY_FOR_SCHEDULING   = 8,
    EMBER_ZCL_POWER_PROFILE_STATE_POWER_PROFILE_SCHEDULED        = 9,
};

// Enum for PowerSource
enum EmberAfPowerSource : uint8_t
{
    EMBER_ZCL_POWER_SOURCE_UNKNOWN                         = 0,
    EMBER_ZCL_POWER_SOURCE_SINGLE_PHASE_MAINS              = 1,
    EMBER_ZCL_POWER_SOURCE_THREE_PHASE_MAINS               = 2,
    EMBER_ZCL_POWER_SOURCE_BATTERY                         = 3,
    EMBER_ZCL_POWER_SOURCE_DC_SOURCE                       = 4,
    EMBER_ZCL_POWER_SOURCE_EMERGENCY_MAINS_CONSTANT_POWER  = 5,
    EMBER_ZCL_POWER_SOURCE_EMERGENCY_MAINS_TRANSFER_SWITCH = 6,
    EMBER_ZCL_POWER_SOURCE_BATTERY_BACKUP                  = 128,
};

// Enum for ProductCode
enum EmberAfProductCode : uint8_t
{
    EMBER_ZCL_PRODUCT_CODE_MANUFACTURER_DEFINED        = 0,
    EMBER_ZCL_PRODUCT_CODE_ITERNATIONAL_ARTICLE_NUMBER = 1,
    EMBER_ZCL_PRODUCT_CODE_GLOBAL_TRADE_ITEM_NUMBER    = 2,
    EMBER_ZCL_PRODUCT_CODE_UNIVERSAL_PRODUCT_CODE      = 3,
    EMBER_ZCL_PRODUCT_CODE_STOCK_KEEPING_UNIT          = 4,
};

// Enum for ProductTypeId
enum EmberAfProductTypeId : uint16_t
{
    EMBER_ZCL_PRODUCT_TYPE_ID_WHITE_GOODS          = 0,
    EMBER_ZCL_PRODUCT_TYPE_ID_DISHWASHER           = 22017,
    EMBER_ZCL_PRODUCT_TYPE_ID_TUMBLE_DRYER         = 22018,
    EMBER_ZCL_PRODUCT_TYPE_ID_WASHER_DRYER         = 22019,
    EMBER_ZCL_PRODUCT_TYPE_ID_WASHING_MACHINE      = 22020,
    EMBER_ZCL_PRODUCT_TYPE_ID_HOBS                 = 24067,
    EMBER_ZCL_PRODUCT_TYPE_ID_INDUCTION_HOBS       = 24073,
    EMBER_ZCL_PRODUCT_TYPE_ID_OVEN                 = 24065,
    EMBER_ZCL_PRODUCT_TYPE_ID_ELECTRICAL_OVEN      = 24070,
    EMBER_ZCL_PRODUCT_TYPE_ID_REFRIGERATOR_FREEZER = 26113,
};

// Enum for PumpControlMode
enum EmberAfPumpControlMode : uint8_t
{
    EMBER_ZCL_PUMP_CONTROL_MODE_CONSTANT_SPEED        = 0,
    EMBER_ZCL_PUMP_CONTROL_MODE_CONSTANT_PRESSURE     = 1,
    EMBER_ZCL_PUMP_CONTROL_MODE_PROPORTIONAL_PRESSURE = 2,
    EMBER_ZCL_PUMP_CONTROL_MODE_CONSTANT_FLOW         = 3,
    EMBER_ZCL_PUMP_CONTROL_MODE_CONSTANT_TEMPERATURE  = 5,
    EMBER_ZCL_PUMP_CONTROL_MODE_AUTOMATIC             = 7,
};

// Enum for PumpOperationMode
enum EmberAfPumpOperationMode : uint8_t
{
    EMBER_ZCL_PUMP_OPERATION_MODE_NORMAL  = 0,
    EMBER_ZCL_PUMP_OPERATION_MODE_MINIMUM = 1,
    EMBER_ZCL_PUMP_OPERATION_MODE_MAXIMUM = 2,
    EMBER_ZCL_PUMP_OPERATION_MODE_LOCAL   = 3,
};

// Enum for RadioFaultType
enum EmberAfRadioFaultType : uint8_t
{
    EMBER_ZCL_RADIO_FAULT_TYPE_UNSPECIFIED    = 0,
    EMBER_ZCL_RADIO_FAULT_TYPE_WI_FI_FAULT    = 1,
    EMBER_ZCL_RADIO_FAULT_TYPE_CELLULAR_FAULT = 2,
    EMBER_ZCL_RADIO_FAULT_TYPE_THREAD_FAULT   = 3,
    EMBER_ZCL_RADIO_FAULT_TYPE_NFC_FAULT      = 4,
    EMBER_ZCL_RADIO_FAULT_TYPE_BLE_FAULT      = 5,
    EMBER_ZCL_RADIO_FAULT_TYPE_ETHERNET_FAULT = 6,
};

// Enum for RegulatoryLocationType
enum EmberAfRegulatoryLocationType : uint8_t
{
    EMBER_ZCL_REGULATORY_LOCATION_TYPE_INDOOR         = 0,
    EMBER_ZCL_REGULATORY_LOCATION_TYPE_OUTDOOR        = 1,
    EMBER_ZCL_REGULATORY_LOCATION_TYPE_INDOOR_OUTDOOR = 2,
};

// Enum for RelativeHumidityDisplay
enum EmberAfRelativeHumidityDisplay : uint8_t
{
    EMBER_ZCL_RELATIVE_HUMIDITY_DISPLAY_NOT_DISPLAYED = 0,
    EMBER_ZCL_RELATIVE_HUMIDITY_DISPLAY_DISPLAYED     = 1,
};

// Enum for RelativeHumidityMode
enum EmberAfRelativeHumidityMode : uint8_t
{
    EMBER_ZCL_RELATIVE_HUMIDITY_MODE_MEASURE_LOCALLY          = 0,
    EMBER_ZCL_RELATIVE_HUMIDITY_MODE_UPDATED_OVER_THE_NETWORK = 1,
};

// Enum for RemoteEnableFlags
enum EmberAfRemoteEnableFlags : uint8_t
{
    EMBER_ZCL_REMOTE_ENABLE_FLAGS_DISABLED                          = 0,
    EMBER_ZCL_REMOTE_ENABLE_FLAGS_TEMPORARILY_LOCKED_DISABLED       = 7,
    EMBER_ZCL_REMOTE_ENABLE_FLAGS_ENABLED_REMOTE_CONTROL            = 15,
    EMBER_ZCL_REMOTE_ENABLE_FLAGS_ENABLED_REMOTE_AND_ENERGY_CONTROL = 1,
};

// Enum for RoutingRole
enum EmberAfRoutingRole : uint8_t
{
    EMBER_ZCL_ROUTING_ROLE_UNSPECIFIED       = 0,
    EMBER_ZCL_ROUTING_ROLE_UNASSIGNED        = 1,
    EMBER_ZCL_ROUTING_ROLE_SLEEPY_END_DEVICE = 2,
    EMBER_ZCL_ROUTING_ROLE_END_DEVICE        = 3,
    EMBER_ZCL_ROUTING_ROLE_REED              = 4,
    EMBER_ZCL_ROUTING_ROLE_ROUTER            = 5,
    EMBER_ZCL_ROUTING_ROLE_LEADER            = 6,
};

// Enum for SaturationMoveMode
enum EmberAfSaturationMoveMode : uint8_t
{
    EMBER_ZCL_SATURATION_MOVE_MODE_STOP = 0,
    EMBER_ZCL_SATURATION_MOVE_MODE_UP   = 1,
    EMBER_ZCL_SATURATION_MOVE_MODE_DOWN = 3,
};

// Enum for SaturationStepMode
enum EmberAfSaturationStepMode : uint8_t
{
    EMBER_ZCL_SATURATION_STEP_MODE_UP   = 1,
    EMBER_ZCL_SATURATION_STEP_MODE_DOWN = 3,
};

// Enum for SecurityType
enum EmberAfSecurityType : uint8_t
{
    EMBER_ZCL_SECURITY_TYPE_UNSPECIFIED = 0,
    EMBER_ZCL_SECURITY_TYPE_NONE        = 1,
    EMBER_ZCL_SECURITY_TYPE_WEP         = 2,
    EMBER_ZCL_SECURITY_TYPE_WPA         = 3,
    EMBER_ZCL_SECURITY_TYPE_WPA2        = 4,
    EMBER_ZCL_SECURITY_TYPE_WPA3        = 5,
};

// Enum for SensingLightSensorType
enum EmberAfSensingLightSensorType : uint8_t
{
    EMBER_ZCL_SENSING_LIGHT_SENSOR_TYPE_PHOTODIODE = 0,
    EMBER_ZCL_SENSING_LIGHT_SENSOR_TYPE_CMOS       = 1,
};

// Enum for SetpointAdjustMode
enum EmberAfSetpointAdjustMode : uint8_t
{
    EMBER_ZCL_SETPOINT_ADJUST_MODE_HEAT_SETPOINT           = 0,
    EMBER_ZCL_SETPOINT_ADJUST_MODE_COOL_SETPOINT           = 1,
    EMBER_ZCL_SETPOINT_ADJUST_MODE_HEAT_AND_COOL_SETPOINTS = 2,
};

// Enum for SquawkLevel
enum EmberAfSquawkLevel : uint8_t
{
    EMBER_ZCL_SQUAWK_LEVEL_LOW_LEVEL       = 0,
    EMBER_ZCL_SQUAWK_LEVEL_MEDIUM_LEVEL    = 1,
    EMBER_ZCL_SQUAWK_LEVEL_HIGH_LEVEL      = 2,
    EMBER_ZCL_SQUAWK_LEVEL_VERY_HIGH_LEVEL = 2,
};

// Enum for SquawkMode
enum EmberAfSquawkMode : uint8_t
{
    EMBER_ZCL_SQUAWK_MODE_SYSTEM_IS_ARMED    = 0,
    EMBER_ZCL_SQUAWK_MODE_SYSTEM_IS_DISARMED = 1,
};

// Enum for SquawkStobe
enum EmberAfSquawkStobe : uint8_t
{
    EMBER_ZCL_SQUAWK_STOBE_NO_STROBE  = 0,
    EMBER_ZCL_SQUAWK_STOBE_USE_STROBE = 1,
};

// Enum for StartOfWeek
enum EmberAfStartOfWeek : uint8_t
{
    EMBER_ZCL_START_OF_WEEK_SUNDAY    = 0,
    EMBER_ZCL_START_OF_WEEK_MONDAY    = 1,
    EMBER_ZCL_START_OF_WEEK_TUESDAY   = 2,
    EMBER_ZCL_START_OF_WEEK_WEDNESDAY = 3,
    EMBER_ZCL_START_OF_WEEK_THURSDAY  = 4,
    EMBER_ZCL_START_OF_WEEK_FRIDAY    = 5,
    EMBER_ZCL_START_OF_WEEK_SATURDAY  = 6,
};

// Enum for StartUpOnOffValue
enum EmberAfStartUpOnOffValue : uint8_t
{
    EMBER_ZCL_START_UP_ON_OFF_VALUE_SET_TO_OFF      = 0,
    EMBER_ZCL_START_UP_ON_OFF_VALUE_SET_TO_ON       = 1,
    EMBER_ZCL_START_UP_ON_OFF_VALUE_SET_TO_TOGGLE   = 2,
    EMBER_ZCL_START_UP_ON_OFF_VALUE_SET_TO_PREVIOUS = 255,
};

// Enum for StepMode
enum EmberAfStepMode : uint8_t
{
    EMBER_ZCL_STEP_MODE_UP   = 0,
    EMBER_ZCL_STEP_MODE_DOWN = 1,
};

// Enum for SwitchActions
enum EmberAfSwitchActions : uint8_t
{
    EMBER_ZCL_SWITCH_ACTIONS_ON     = 0,
    EMBER_ZCL_SWITCH_ACTIONS_OFF    = 1,
    EMBER_ZCL_SWITCH_ACTIONS_TOGGLE = 2,
};

// Enum for SwitchType
enum EmberAfSwitchType : uint8_t
{
    EMBER_ZCL_SWITCH_TYPE_TOGGLE         = 0,
    EMBER_ZCL_SWITCH_TYPE_MOMENTARY      = 1,
    EMBER_ZCL_SWITCH_TYPE_MULTI_FUNCTION = 2,
};

// Enum for TemperatureDisplayMode
enum EmberAfTemperatureDisplayMode : uint8_t
{
    EMBER_ZCL_TEMPERATURE_DISPLAY_MODE_CELSIUS    = 0,
    EMBER_ZCL_TEMPERATURE_DISPLAY_MODE_FAHRENHEIT = 1,
};

// Enum for TemperatureSetpointHold
enum EmberAfTemperatureSetpointHold : uint8_t
{
    EMBER_ZCL_TEMPERATURE_SETPOINT_HOLD_SETPOINT_HOLD_OFF = 0,
    EMBER_ZCL_TEMPERATURE_SETPOINT_HOLD_SETPOINT_HOLD_ON  = 1,
};

// Enum for ThermostatControlSequence
enum EmberAfThermostatControlSequence : uint8_t
{
    EMBER_ZCL_THERMOSTAT_CONTROL_SEQUENCE_COOLING_ONLY                    = 0,
    EMBER_ZCL_THERMOSTAT_CONTROL_SEQUENCE_COOLING_WITH_REHEAT             = 1,
    EMBER_ZCL_THERMOSTAT_CONTROL_SEQUENCE_HEATING_ONLY                    = 2,
    EMBER_ZCL_THERMOSTAT_CONTROL_SEQUENCE_HEATING_WITH_REHEAT             = 3,
    EMBER_ZCL_THERMOSTAT_CONTROL_SEQUENCE_COOLING_AND_HEATING             = 4,
    EMBER_ZCL_THERMOSTAT_CONTROL_SEQUENCE_COOLING_AND_HEATING_WITH_REHEAT = 5,
};

// Enum for ThermostatRunningMode
enum EmberAfThermostatRunningMode : uint8_t
{
    EMBER_ZCL_THERMOSTAT_RUNNING_MODE_OFF  = 0,
    EMBER_ZCL_THERMOSTAT_RUNNING_MODE_COOL = 3,
    EMBER_ZCL_THERMOSTAT_RUNNING_MODE_HEAT = 4,
};

// Enum for ThermostatSystemMode
enum EmberAfThermostatSystemMode : uint8_t
{
    EMBER_ZCL_THERMOSTAT_SYSTEM_MODE_OFF               = 0,
    EMBER_ZCL_THERMOSTAT_SYSTEM_MODE_AUTO              = 1,
    EMBER_ZCL_THERMOSTAT_SYSTEM_MODE_COOL              = 3,
    EMBER_ZCL_THERMOSTAT_SYSTEM_MODE_HEAT              = 4,
    EMBER_ZCL_THERMOSTAT_SYSTEM_MODE_EMERGENCY_HEATING = 5,
    EMBER_ZCL_THERMOSTAT_SYSTEM_MODE_PRECOOLING        = 6,
    EMBER_ZCL_THERMOSTAT_SYSTEM_MODE_FAN_ONLY          = 7,
};

// Enum for TimeEncoding
enum EmberAfTimeEncoding : uint8_t
{
    EMBER_ZCL_TIME_ENCODING_RELATIVE = 0,
    EMBER_ZCL_TIME_ENCODING_ABSOLUTE = 64,
};

// Enum for TvChannelErrorType
enum EmberAfTvChannelErrorType : uint8_t
{
    EMBER_ZCL_TV_CHANNEL_ERROR_TYPE_MULTIPLE_MATCHES = 0,
    EMBER_ZCL_TV_CHANNEL_ERROR_TYPE_NO_MATCHES       = 1,
};

// Enum for TvChannelLineupInfoType
enum EmberAfTvChannelLineupInfoType : uint8_t
{
    EMBER_ZCL_TV_CHANNEL_LINEUP_INFO_TYPE_MSO = 0,
};

// Enum for WarningEvent
enum EmberAfWarningEvent : uint8_t
{
    EMBER_ZCL_WARNING_EVENT_WARNING1_OVERALL_POWER_ABOVE_AVAILABLE_POWER_LEVEL                                             = 0,
    EMBER_ZCL_WARNING_EVENT_WARNING2_OVERALL_POWER_ABOVE_POWER_THRESHOLD_LEVEL                                             = 1,
    EMBER_ZCL_WARNING_EVENT_WARNING3_OVERALL_POWER_BACK_BELOW_THE_AVAILABLE_POWER_LEVEL                                    = 2,
    EMBER_ZCL_WARNING_EVENT_WARNING4_OVERALL_POWER_BACK_BELOW_THE_POWER_THRESHOLD_LEVEL                                    = 3,
    EMBER_ZCL_WARNING_EVENT_WARNING5_OVERALL_POWER_WILL_BE_POTENTIALLY_ABOVE_AVAILABLE_POWER_LEVEL_IF_THE_APPLIANCE_STARTS = 4,
};

// Enum for WarningMode
enum EmberAfWarningMode : uint8_t
{
    EMBER_ZCL_WARNING_MODE_STOP            = 0,
    EMBER_ZCL_WARNING_MODE_BURGLAR         = 1,
    EMBER_ZCL_WARNING_MODE_FIRE            = 2,
    EMBER_ZCL_WARNING_MODE_EMERGENCY       = 3,
    EMBER_ZCL_WARNING_MODE_POLICE_PANIC    = 4,
    EMBER_ZCL_WARNING_MODE_FIRE_PANIC      = 5,
    EMBER_ZCL_WARNING_MODE_EMERGENCY_PANIC = 6,
};

// Enum for WarningStobe
enum EmberAfWarningStobe : uint8_t
{
    EMBER_ZCL_WARNING_STOBE_NO_STROBE  = 0,
    EMBER_ZCL_WARNING_STOBE_USE_STROBE = 1,
};

// Enum for WcEndProductType
enum EmberAfWcEndProductType : uint8_t
{
    EMBER_ZCL_WC_END_PRODUCT_TYPE_ROLLER_SHADE                 = 0,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_ROMAN_SHADE                  = 1,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_BALLOON_SHADE                = 2,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_WOVEN_WOOD                   = 3,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_PLEATED_SHADE                = 4,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_CELLULAR_SHADE               = 5,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_LAYERED_SHADE                = 6,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_LAYERED_SHADE2_D             = 7,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_SHEER_SHADE                  = 8,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_TILT_ONLY_INTERIOR_BLIND     = 9,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_INTERIOR_BLIND               = 10,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_VERTICAL_BLIND_STRIP_CURTAIN = 11,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_INTERIOR_VENETIAN_BLIND      = 12,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_EXTERIOR_VENETIAN_BLIND      = 13,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_LATERAL_LEFT_CURTAIN         = 14,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_LATERAL_RIGHT_CURTAIN        = 15,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_CENTRAL_CURTAIN              = 16,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_ROLLER_SHUTTER               = 17,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_EXTERIOR_VERTICAL_SCREEN     = 18,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_AWNING_TERRACE_PATIO         = 19,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_AWNING_VERTICAL_SCREEN       = 20,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_TILT_ONLY_PERGOLA            = 21,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_SWINGING_SHUTTER             = 22,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_SLIDING_SHUTTER              = 23,
    EMBER_ZCL_WC_END_PRODUCT_TYPE_UNKNOWN                      = 255,
};

// Enum for WcType
enum EmberAfWcType : uint8_t
{
    EMBER_ZCL_WC_TYPE_ROLLERSHADE                 = 0,
    EMBER_ZCL_WC_TYPE_ROLLERSHADE2_MOTOR          = 1,
    EMBER_ZCL_WC_TYPE_ROLLERSHADE_EXTERIOR        = 2,
    EMBER_ZCL_WC_TYPE_ROLLERSHADE_EXTERIOR2_MOTOR = 3,
    EMBER_ZCL_WC_TYPE_DRAPERY                     = 4,
    EMBER_ZCL_WC_TYPE_AWNING                      = 5,
    EMBER_ZCL_WC_TYPE_SHUTTER                     = 6,
    EMBER_ZCL_WC_TYPE_TILT_BLIND_TILT_ONLY        = 7,
    EMBER_ZCL_WC_TYPE_TILT_BLIND_LIFT_AND_TILT    = 8,
    EMBER_ZCL_WC_TYPE_PROJECTOR_SCREEN            = 9,
    EMBER_ZCL_WC_TYPE_UNKNOWN                     = 255,
};

// Enum for WiFiVersionType
enum EmberAfWiFiVersionType : uint8_t
{
    EMBER_ZCL_WI_FI_VERSION_TYPE_802__11A  = 0,
    EMBER_ZCL_WI_FI_VERSION_TYPE_802__11B  = 1,
    EMBER_ZCL_WI_FI_VERSION_TYPE_802__11G  = 2,
    EMBER_ZCL_WI_FI_VERSION_TYPE_802__11N  = 3,
    EMBER_ZCL_WI_FI_VERSION_TYPE_802__11AC = 4,
    EMBER_ZCL_WI_FI_VERSION_TYPE_802__11AX = 5,
};

#define EMBER_AF_ALARM_MASK_GENERAL_HW_FAULT (1)
#define EMBER_AF_ALARM_MASK_GENERAL_HW_FAULT_OFFSET (0)
#define EMBER_AF_ALARM_MASK_GENERAL_SW_FAULT (2)
#define EMBER_AF_ALARM_MASK_GENERAL_SW_FAULT_OFFSET (1)
#define EMBER_AF_ALERT_COUNT_NUMBER_OF_ALERTS (15)
#define EMBER_AF_ALERT_COUNT_NUMBER_OF_ALERTS_OFFSET (0)
#define EMBER_AF_ALERT_COUNT_TYPE_OF_ALERT (240)
#define EMBER_AF_ALERT_COUNT_TYPE_OF_ALERT_OFFSET (4)
#define EMBER_AF_ALERT_STRUCTURE_ALERT_ID (255)
#define EMBER_AF_ALERT_STRUCTURE_ALERT_ID_OFFSET (0)
#define EMBER_AF_ALERT_STRUCTURE_CATEGORY (3840)
#define EMBER_AF_ALERT_STRUCTURE_CATEGORY_OFFSET (8)
#define EMBER_AF_ALERT_STRUCTURE_PRESENCE_RECOVERY (12288)
#define EMBER_AF_ALERT_STRUCTURE_PRESENCE_RECOVERY_OFFSET (12)
#define EMBER_AF_BALLAST_STATUS_NON_OPERATIONAL (1)
#define EMBER_AF_BALLAST_STATUS_NON_OPERATIONAL_OFFSET (0)
#define EMBER_AF_BALLAST_STATUS_LAMP_NOT_IN_SOCKET (2)
#define EMBER_AF_BALLAST_STATUS_LAMP_NOT_IN_SOCKET_OFFSET (1)
#define EMBER_AF_BARRIER_CONTROL_CAPABILITIES_PARTIAL_BARRIER (1)
#define EMBER_AF_BARRIER_CONTROL_CAPABILITIES_PARTIAL_BARRIER_OFFSET (0)
#define EMBER_AF_BARRIER_CONTROL_SAFETY_STATUS_REMOTE_LOCKOUT (1)
#define EMBER_AF_BARRIER_CONTROL_SAFETY_STATUS_REMOTE_LOCKOUT_OFFSET (0)
#define EMBER_AF_BARRIER_CONTROL_SAFETY_STATUS_TEMPER_DETECTED (2)
#define EMBER_AF_BARRIER_CONTROL_SAFETY_STATUS_TEMPER_DETECTED_OFFSET (1)
#define EMBER_AF_BARRIER_CONTROL_SAFETY_STATUS_FAILED_COMMUNICATION (4)
#define EMBER_AF_BARRIER_CONTROL_SAFETY_STATUS_FAILED_COMMUNICATION_OFFSET (2)
#define EMBER_AF_BARRIER_CONTROL_SAFETY_STATUS_POSITION_FAILURE (8)
#define EMBER_AF_BARRIER_CONTROL_SAFETY_STATUS_POSITION_FAILURE_OFFSET (3)
#define EMBER_AF_BATTERY_ALARM_MASK_VOLTAGE_TOO_LOW (1)
#define EMBER_AF_BATTERY_ALARM_MASK_VOLTAGE_TOO_LOW_OFFSET (0)
#define EMBER_AF_COLOR_CAPABILITIES_HUE_SATURATION_SUPPORTED (1)
#define EMBER_AF_COLOR_CAPABILITIES_HUE_SATURATION_SUPPORTED_OFFSET (0)
#define EMBER_AF_COLOR_CAPABILITIES_ENHANCED_HUE_SUPPORTED (2)
#define EMBER_AF_COLOR_CAPABILITIES_ENHANCED_HUE_SUPPORTED_OFFSET (1)
#define EMBER_AF_COLOR_CAPABILITIES_COLOR_LOOP_SUPPORTED (4)
#define EMBER_AF_COLOR_CAPABILITIES_COLOR_LOOP_SUPPORTED_OFFSET (2)
#define EMBER_AF_COLOR_CAPABILITIES_XY_ATTRIBUTES_SUPPORTED (8)
#define EMBER_AF_COLOR_CAPABILITIES_XY_ATTRIBUTES_SUPPORTED_OFFSET (3)
#define EMBER_AF_COLOR_CAPABILITIES_COLOR_TEMPERATURE_SUPPORTED (16)
#define EMBER_AF_COLOR_CAPABILITIES_COLOR_TEMPERATURE_SUPPORTED_OFFSET (4)
#define EMBER_AF_COLOR_LOOP_UPDATE_FLAGS_UPDATE_ACTION (1)
#define EMBER_AF_COLOR_LOOP_UPDATE_FLAGS_UPDATE_ACTION_OFFSET (0)
#define EMBER_AF_COLOR_LOOP_UPDATE_FLAGS_UPDATE_DIRECTION (2)
#define EMBER_AF_COLOR_LOOP_UPDATE_FLAGS_UPDATE_DIRECTION_OFFSET (1)
#define EMBER_AF_COLOR_LOOP_UPDATE_FLAGS_UPDATE_TIME (4)
#define EMBER_AF_COLOR_LOOP_UPDATE_FLAGS_UPDATE_TIME_OFFSET (2)
#define EMBER_AF_COLOR_LOOP_UPDATE_FLAGS_UPDATE_START_HUE (8)
#define EMBER_AF_COLOR_LOOP_UPDATE_FLAGS_UPDATE_START_HUE_OFFSET (3)
#define EMBER_AF_DAY_OF_WEEK_SUNDAY (1)
#define EMBER_AF_DAY_OF_WEEK_SUNDAY_OFFSET (0)
#define EMBER_AF_DAY_OF_WEEK_MONDAY (2)
#define EMBER_AF_DAY_OF_WEEK_MONDAY_OFFSET (1)
#define EMBER_AF_DAY_OF_WEEK_TUESDAY (4)
#define EMBER_AF_DAY_OF_WEEK_TUESDAY_OFFSET (2)
#define EMBER_AF_DAY_OF_WEEK_WEDNESDAY (8)
#define EMBER_AF_DAY_OF_WEEK_WEDNESDAY_OFFSET (3)
#define EMBER_AF_DAY_OF_WEEK_THURSDAY (16)
#define EMBER_AF_DAY_OF_WEEK_THURSDAY_OFFSET (4)
#define EMBER_AF_DAY_OF_WEEK_FRIDAY (32)
#define EMBER_AF_DAY_OF_WEEK_FRIDAY_OFFSET (5)
#define EMBER_AF_DAY_OF_WEEK_SATURDAY (64)
#define EMBER_AF_DAY_OF_WEEK_SATURDAY_OFFSET (6)
#define EMBER_AF_DAY_OF_WEEK_AWAY_OR_VACATION (128)
#define EMBER_AF_DAY_OF_WEEK_AWAY_OR_VACATION_OFFSET (7)
#define EMBER_AF_DEVICE_TEMP_ALARM_MASK_TOO_LOW (1)
#define EMBER_AF_DEVICE_TEMP_ALARM_MASK_TOO_LOW_OFFSET (0)
#define EMBER_AF_DEVICE_TEMP_ALARM_MASK_TOO_HIGH (2)
#define EMBER_AF_DEVICE_TEMP_ALARM_MASK_TOO_HIGH_OFFSET (1)
#define EMBER_AF_DOOR_LOCK_DAY_OF_WEEK_SUNDAY (1)
#define EMBER_AF_DOOR_LOCK_DAY_OF_WEEK_SUNDAY_OFFSET (0)
#define EMBER_AF_DOOR_LOCK_DAY_OF_WEEK_MONDAY (2)
#define EMBER_AF_DOOR_LOCK_DAY_OF_WEEK_MONDAY_OFFSET (1)
#define EMBER_AF_DOOR_LOCK_DAY_OF_WEEK_TUESDAY (4)
#define EMBER_AF_DOOR_LOCK_DAY_OF_WEEK_TUESDAY_OFFSET (2)
#define EMBER_AF_DOOR_LOCK_DAY_OF_WEEK_WEDNESDAY (8)
#define EMBER_AF_DOOR_LOCK_DAY_OF_WEEK_WEDNESDAY_OFFSET (3)
#define EMBER_AF_DOOR_LOCK_DAY_OF_WEEK_THURSDAY (16)
#define EMBER_AF_DOOR_LOCK_DAY_OF_WEEK_THURSDAY_OFFSET (4)
#define EMBER_AF_DOOR_LOCK_DAY_OF_WEEK_FRIDAY (32)
#define EMBER_AF_DOOR_LOCK_DAY_OF_WEEK_FRIDAY_OFFSET (5)
#define EMBER_AF_DOOR_LOCK_DAY_OF_WEEK_SATURDAY (64)
#define EMBER_AF_DOOR_LOCK_DAY_OF_WEEK_SATURDAY_OFFSET (6)
#define EMBER_AF_ENERGY_FORMATTING_NUMBER_OF_DIGITS_TO_THE_RIGHT_OF_THE_DECIMAL_POINT (7)
#define EMBER_AF_ENERGY_FORMATTING_NUMBER_OF_DIGITS_TO_THE_RIGHT_OF_THE_DECIMAL_POINT_OFFSET (0)
#define EMBER_AF_ENERGY_FORMATTING_NUMBER_OF_DIGITS_TO_THE_LEFT_OF_THE_DECIMAL_POINT (120)
#define EMBER_AF_ENERGY_FORMATTING_NUMBER_OF_DIGITS_TO_THE_LEFT_OF_THE_DECIMAL_POINT_OFFSET (3)
#define EMBER_AF_ENERGY_FORMATTING_SUPPRESS_LEADING_ZEROS (128)
#define EMBER_AF_ENERGY_FORMATTING_SUPPRESS_LEADING_ZEROS_OFFSET (7)
#define EMBER_AF_IAS_ZONE_STATUS_ALARM1 (1)
#define EMBER_AF_IAS_ZONE_STATUS_ALARM1_OFFSET (0)
#define EMBER_AF_IAS_ZONE_STATUS_ALARM2 (2)
#define EMBER_AF_IAS_ZONE_STATUS_ALARM2_OFFSET (1)
#define EMBER_AF_IAS_ZONE_STATUS_TAMPER (4)
#define EMBER_AF_IAS_ZONE_STATUS_TAMPER_OFFSET (2)
#define EMBER_AF_IAS_ZONE_STATUS_BATTERY (8)
#define EMBER_AF_IAS_ZONE_STATUS_BATTERY_OFFSET (3)
#define EMBER_AF_IAS_ZONE_STATUS_SUPERVISION_REPORTS (16)
#define EMBER_AF_IAS_ZONE_STATUS_SUPERVISION_REPORTS_OFFSET (4)
#define EMBER_AF_IAS_ZONE_STATUS_RESTORE_REPORTS (32)
#define EMBER_AF_IAS_ZONE_STATUS_RESTORE_REPORTS_OFFSET (5)
#define EMBER_AF_IAS_ZONE_STATUS_TROUBLE (64)
#define EMBER_AF_IAS_ZONE_STATUS_TROUBLE_OFFSET (6)
#define EMBER_AF_IAS_ZONE_STATUS_AC (128)
#define EMBER_AF_IAS_ZONE_STATUS_AC_OFFSET (7)
#define EMBER_AF_IAS_ZONE_STATUS_TEST (256)
#define EMBER_AF_IAS_ZONE_STATUS_TEST_OFFSET (8)
#define EMBER_AF_IAS_ZONE_STATUS_BATTERY_DEFECT (512)
#define EMBER_AF_IAS_ZONE_STATUS_BATTERY_DEFECT_OFFSET (9)
#define EMBER_AF_LAMP_ALARM_MODE_LAMP_BURN_HOURS (1)
#define EMBER_AF_LAMP_ALARM_MODE_LAMP_BURN_HOURS_OFFSET (0)
#define EMBER_AF_MAINS_ALARM_MASK_VOLTAGE_TOO_LOW (1)
#define EMBER_AF_MAINS_ALARM_MASK_VOLTAGE_TOO_LOW_OFFSET (0)
#define EMBER_AF_MAINS_ALARM_MASK_VOLTAGE_TOO_HIGH (2)
#define EMBER_AF_MAINS_ALARM_MASK_VOLTAGE_TOO_HIGH_OFFSET (1)
#define EMBER_AF_MAINS_ALARM_MASK_MAINS_POWER_SUPPLY_LOST (4)
#define EMBER_AF_MAINS_ALARM_MASK_MAINS_POWER_SUPPLY_LOST_OFFSET (2)
#define EMBER_AF_MESSAGING_CONFIRMATION_CONTROL_NO_RETURNED (1)
#define EMBER_AF_MESSAGING_CONFIRMATION_CONTROL_NO_RETURNED_OFFSET (0)
#define EMBER_AF_MESSAGING_CONFIRMATION_CONTROL_YES_RETURNED (2)
#define EMBER_AF_MESSAGING_CONFIRMATION_CONTROL_YES_RETURNED_OFFSET (1)
#define EMBER_AF_MESSAGING_CONTROL_MASK_TRANS_MECHANISM (3)
#define EMBER_AF_MESSAGING_CONTROL_MASK_TRANS_MECHANISM_OFFSET (0)
#define EMBER_AF_MESSAGING_CONTROL_MASK_MESSAGE_URGENCY (12)
#define EMBER_AF_MESSAGING_CONTROL_MASK_MESSAGE_URGENCY_OFFSET (2)
#define EMBER_AF_MESSAGING_CONTROL_MASK_ENHANCED_CONFIRMATION_REQUEST (32)
#define EMBER_AF_MESSAGING_CONTROL_MASK_ENHANCED_CONFIRMATION_REQUEST_OFFSET (5)
#define EMBER_AF_MESSAGING_CONTROL_MASK_MESSAGE_CONFIRMATION (128)
#define EMBER_AF_MESSAGING_CONTROL_MASK_MESSAGE_CONFIRMATION_OFFSET (7)
#define EMBER_AF_MESSAGING_EXTENDED_CONTROL_MASK_MESSAGE_CONFIRMATION_STATUS (1)
#define EMBER_AF_MESSAGING_EXTENDED_CONTROL_MASK_MESSAGE_CONFIRMATION_STATUS_OFFSET (0)
#define EMBER_AF_MODE_FOR_SEQUENCE_HEAT_SETPOINT_FIELD_PRESENT (1)
#define EMBER_AF_MODE_FOR_SEQUENCE_HEAT_SETPOINT_FIELD_PRESENT_OFFSET (0)
#define EMBER_AF_MODE_FOR_SEQUENCE_COOL_SETPOINT_FIELD_PRESENT (2)
#define EMBER_AF_MODE_FOR_SEQUENCE_COOL_SETPOINT_FIELD_PRESENT_OFFSET (1)
#define EMBER_AF_OCCUPANCY_OCCUPIED (1)
#define EMBER_AF_OCCUPANCY_OCCUPIED_OFFSET (0)
#define EMBER_AF_OCCUPANCY_SENSOR_TYPE_BITMAP_PIR (1)
#define EMBER_AF_OCCUPANCY_SENSOR_TYPE_BITMAP_PIR_OFFSET (0)
#define EMBER_AF_OCCUPANCY_SENSOR_TYPE_BITMAP_ULTRASONIC (2)
#define EMBER_AF_OCCUPANCY_SENSOR_TYPE_BITMAP_ULTRASONIC_OFFSET (1)
#define EMBER_AF_OCCUPANCY_SENSOR_TYPE_BITMAP_PHYSICAL_CONTACT (4)
#define EMBER_AF_OCCUPANCY_SENSOR_TYPE_BITMAP_PHYSICAL_CONTACT_OFFSET (2)
#define EMBER_AF_ON_OFF_CONTROL_ACCEPT_ONLY_WHEN_ON (1)
#define EMBER_AF_ON_OFF_CONTROL_ACCEPT_ONLY_WHEN_ON_OFFSET (0)
#define EMBER_AF_PUMP_ALARM_MASK_SUPPLY_VOLTAGE_LOW (1)
#define EMBER_AF_PUMP_ALARM_MASK_SUPPLY_VOLTAGE_LOW_OFFSET (0)
#define EMBER_AF_PUMP_ALARM_MASK_SUPPLY_VOLTAGE_HIGH (2)
#define EMBER_AF_PUMP_ALARM_MASK_SUPPLY_VOLTAGE_HIGH_OFFSET (1)
#define EMBER_AF_PUMP_ALARM_MASK_POWER_MISSING_PHASE (4)
#define EMBER_AF_PUMP_ALARM_MASK_POWER_MISSING_PHASE_OFFSET (2)
#define EMBER_AF_PUMP_ALARM_MASK_SYSTEM_PRESSURE_LOW (8)
#define EMBER_AF_PUMP_ALARM_MASK_SYSTEM_PRESSURE_LOW_OFFSET (3)
#define EMBER_AF_PUMP_ALARM_MASK_SYSTEM_PRESSURE_HIGH (16)
#define EMBER_AF_PUMP_ALARM_MASK_SYSTEM_PRESSURE_HIGH_OFFSET (4)
#define EMBER_AF_PUMP_ALARM_MASK_DRY_RUNNING (32)
#define EMBER_AF_PUMP_ALARM_MASK_DRY_RUNNING_OFFSET (5)
#define EMBER_AF_PUMP_ALARM_MASK_MOTOR_TEMPERATURE_HIGH (64)
#define EMBER_AF_PUMP_ALARM_MASK_MOTOR_TEMPERATURE_HIGH_OFFSET (6)
#define EMBER_AF_PUMP_ALARM_MASK_PUMP_MOTOR_FATAL_FAILURE (128)
#define EMBER_AF_PUMP_ALARM_MASK_PUMP_MOTOR_FATAL_FAILURE_OFFSET (7)
#define EMBER_AF_PUMP_ALARM_MASK_ELECTRONIC_TEMPERATURE_HIGH (256)
#define EMBER_AF_PUMP_ALARM_MASK_ELECTRONIC_TEMPERATURE_HIGH_OFFSET (8)
#define EMBER_AF_PUMP_ALARM_MASK_PUMP_BLOCKED (512)
#define EMBER_AF_PUMP_ALARM_MASK_PUMP_BLOCKED_OFFSET (9)
#define EMBER_AF_PUMP_ALARM_MASK_SENSOR_FAILURE (1024)
#define EMBER_AF_PUMP_ALARM_MASK_SENSOR_FAILURE_OFFSET (10)
#define EMBER_AF_PUMP_ALARM_MASK_ELECTRONIC_NON_FATAL_FAILURE (2048)
#define EMBER_AF_PUMP_ALARM_MASK_ELECTRONIC_NON_FATAL_FAILURE_OFFSET (11)
#define EMBER_AF_PUMP_ALARM_MASK_ELECTRONIC_FATAL_FAILURE (4096)
#define EMBER_AF_PUMP_ALARM_MASK_ELECTRONIC_FATAL_FAILURE_OFFSET (12)
#define EMBER_AF_PUMP_ALARM_MASK_GENERAL_FAULT (8192)
#define EMBER_AF_PUMP_ALARM_MASK_GENERAL_FAULT_OFFSET (13)
#define EMBER_AF_PUMP_ALARM_MASK_LEAKAGE (16384)
#define EMBER_AF_PUMP_ALARM_MASK_LEAKAGE_OFFSET (14)
#define EMBER_AF_PUMP_ALARM_MASK_AIR_DETECTION (32768)
#define EMBER_AF_PUMP_ALARM_MASK_AIR_DETECTION_OFFSET (15)
#define EMBER_AF_PUMP_ALARM_MASK_TURBINE_OPERATION (65536)
#define EMBER_AF_PUMP_ALARM_MASK_TURBINE_OPERATION_OFFSET (16)
#define EMBER_AF_PUMP_STATUS_DEVICE_FAULT (1)
#define EMBER_AF_PUMP_STATUS_DEVICE_FAULT_OFFSET (0)
#define EMBER_AF_PUMP_STATUS_SUPPLYFAULT (2)
#define EMBER_AF_PUMP_STATUS_SUPPLYFAULT_OFFSET (1)
#define EMBER_AF_PUMP_STATUS_SPEED_LOW (4)
#define EMBER_AF_PUMP_STATUS_SPEED_LOW_OFFSET (2)
#define EMBER_AF_PUMP_STATUS_SPEED_HIGH (8)
#define EMBER_AF_PUMP_STATUS_SPEED_HIGH_OFFSET (3)
#define EMBER_AF_PUMP_STATUS_LOCAL_OVERRIDE (16)
#define EMBER_AF_PUMP_STATUS_LOCAL_OVERRIDE_OFFSET (4)
#define EMBER_AF_PUMP_STATUS_RUNNING (32)
#define EMBER_AF_PUMP_STATUS_RUNNING_OFFSET (5)
#define EMBER_AF_PUMP_STATUS_REMOTE_PRESSURE (64)
#define EMBER_AF_PUMP_STATUS_REMOTE_PRESSURE_OFFSET (6)
#define EMBER_AF_PUMP_STATUS_REMOTE_FLOW (128)
#define EMBER_AF_PUMP_STATUS_REMOTE_FLOW_OFFSET (7)
#define EMBER_AF_PUMP_STATUS_REMOTE_TEMPERATURE (256)
#define EMBER_AF_PUMP_STATUS_REMOTE_TEMPERATURE_OFFSET (8)
#define EMBER_AF_REMOTE_ENABLE_FLAGS_AND_DEVICE_STATUS2_REMOTE_ENABLE_FLAGS (15)
#define EMBER_AF_REMOTE_ENABLE_FLAGS_AND_DEVICE_STATUS2_REMOTE_ENABLE_FLAGS_OFFSET (0)
#define EMBER_AF_REMOTE_ENABLE_FLAGS_AND_DEVICE_STATUS2_DEVICE_STATUS2_STRUCTURE (240)
#define EMBER_AF_REMOTE_ENABLE_FLAGS_AND_DEVICE_STATUS2_DEVICE_STATUS2_STRUCTURE_OFFSET (4)
#define EMBER_AF_SCENES_COPY_MODE_COPY_ALL_SCENES (1)
#define EMBER_AF_SCENES_COPY_MODE_COPY_ALL_SCENES_OFFSET (0)
#define EMBER_AF_SECURITY_TYPE_UNENCRYPTED (1)
#define EMBER_AF_SECURITY_TYPE_UNENCRYPTED_OFFSET (0)
#define EMBER_AF_SECURITY_TYPE_WEP_PERSONAL (2)
#define EMBER_AF_SECURITY_TYPE_WEP_PERSONAL_OFFSET (1)
#define EMBER_AF_SECURITY_TYPE_WPA_PERSONAL (4)
#define EMBER_AF_SECURITY_TYPE_WPA_PERSONAL_OFFSET (2)
#define EMBER_AF_SECURITY_TYPE_WPA2_PERSONAL (8)
#define EMBER_AF_SECURITY_TYPE_WPA2_PERSONAL_OFFSET (3)
#define EMBER_AF_SECURITY_TYPE_WPA3_PERSONAL (16)
#define EMBER_AF_SECURITY_TYPE_WPA3_PERSONAL_OFFSET (4)
#define EMBER_AF_SHADE_CLOSURE_STATUS_OPERATIONAL (1)
#define EMBER_AF_SHADE_CLOSURE_STATUS_OPERATIONAL_OFFSET (0)
#define EMBER_AF_SHADE_CLOSURE_STATUS_ADJUSTING (2)
#define EMBER_AF_SHADE_CLOSURE_STATUS_ADJUSTING_OFFSET (1)
#define EMBER_AF_SHADE_CLOSURE_STATUS_OPENING (4)
#define EMBER_AF_SHADE_CLOSURE_STATUS_OPENING_OFFSET (2)
#define EMBER_AF_SHADE_CLOSURE_STATUS_MOTOR_OPENING (8)
#define EMBER_AF_SHADE_CLOSURE_STATUS_MOTOR_OPENING_OFFSET (3)
#define EMBER_AF_SQUAWK_INFO_MODE (240)
#define EMBER_AF_SQUAWK_INFO_MODE_OFFSET (4)
#define EMBER_AF_SQUAWK_INFO_STROBE (8)
#define EMBER_AF_SQUAWK_INFO_STROBE_OFFSET (3)
#define EMBER_AF_SQUAWK_INFO_LEVEL (3)
#define EMBER_AF_SQUAWK_INFO_LEVEL_OFFSET (0)
#define EMBER_AF_START_TIME_MINUTES (63)
#define EMBER_AF_START_TIME_MINUTES_OFFSET (0)
#define EMBER_AF_START_TIME_TIME_ENCODING (192)
#define EMBER_AF_START_TIME_TIME_ENCODING_OFFSET (6)
#define EMBER_AF_START_TIME_HOURS (65280)
#define EMBER_AF_START_TIME_HOURS_OFFSET (8)
#define EMBER_AF_THERMOSTAT_ALARM_MASK_INITIALIZATION_FAILURE (1)
#define EMBER_AF_THERMOSTAT_ALARM_MASK_INITIALIZATION_FAILURE_OFFSET (0)
#define EMBER_AF_THERMOSTAT_ALARM_MASK_HARDWARE_FAILURE (2)
#define EMBER_AF_THERMOSTAT_ALARM_MASK_HARDWARE_FAILURE_OFFSET (1)
#define EMBER_AF_THERMOSTAT_ALARM_MASK_SELFCALIBRATION_FAILURE (4)
#define EMBER_AF_THERMOSTAT_ALARM_MASK_SELFCALIBRATION_FAILURE_OFFSET (2)
#define EMBER_AF_THERMOSTAT_OCCUPANCY_OCCUPIED (1)
#define EMBER_AF_THERMOSTAT_OCCUPANCY_OCCUPIED_OFFSET (0)
#define EMBER_AF_THERMOSTAT_RUNNING_STATE_HEAT_STATE_ON (1)
#define EMBER_AF_THERMOSTAT_RUNNING_STATE_HEAT_STATE_ON_OFFSET (0)
#define EMBER_AF_THERMOSTAT_RUNNING_STATE_COOL_STATE_ON (2)
#define EMBER_AF_THERMOSTAT_RUNNING_STATE_COOL_STATE_ON_OFFSET (1)
#define EMBER_AF_THERMOSTAT_RUNNING_STATE_FAN_STATE_ON (4)
#define EMBER_AF_THERMOSTAT_RUNNING_STATE_FAN_STATE_ON_OFFSET (2)
#define EMBER_AF_THERMOSTAT_RUNNING_STATE_HEAT_SECOND_STAGE_STATE_ON (8)
#define EMBER_AF_THERMOSTAT_RUNNING_STATE_HEAT_SECOND_STAGE_STATE_ON_OFFSET (3)
#define EMBER_AF_THERMOSTAT_RUNNING_STATE_COOL_SECOND_STAGE_STATE_ON (16)
#define EMBER_AF_THERMOSTAT_RUNNING_STATE_COOL_SECOND_STAGE_STATE_ON_OFFSET (4)
#define EMBER_AF_THERMOSTAT_RUNNING_STATE_FAN_SECOND_STAGE_STATE_ON (32)
#define EMBER_AF_THERMOSTAT_RUNNING_STATE_FAN_SECOND_STAGE_STATE_ON_OFFSET (5)
#define EMBER_AF_THERMOSTAT_RUNNING_STATE_FAN_THIRD_STAGE_STATE_ON (64)
#define EMBER_AF_THERMOSTAT_RUNNING_STATE_FAN_THIRD_STAGE_STATE_ON_OFFSET (6)
#define EMBER_AF_THERMOSTAT_SENSING_LOCAL_TEMP_SENSED_REMOTELY (1)
#define EMBER_AF_THERMOSTAT_SENSING_LOCAL_TEMP_SENSED_REMOTELY_OFFSET (0)
#define EMBER_AF_THERMOSTAT_SENSING_OUTDOOR_TEMP_SENSED_REMOTELY (2)
#define EMBER_AF_THERMOSTAT_SENSING_OUTDOOR_TEMP_SENSED_REMOTELY_OFFSET (1)
#define EMBER_AF_THERMOSTAT_SENSING_OCCUPANCY_SENSED_REMOTELY (4)
#define EMBER_AF_THERMOSTAT_SENSING_OCCUPANCY_SENSED_REMOTELY_OFFSET (2)
#define EMBER_AF_TIME_STATUS_MASK_MASTER_CLOCK (1)
#define EMBER_AF_TIME_STATUS_MASK_MASTER_CLOCK_OFFSET (0)
#define EMBER_AF_TIME_STATUS_MASK_SYNCHRONIZED (2)
#define EMBER_AF_TIME_STATUS_MASK_SYNCHRONIZED_OFFSET (1)
#define EMBER_AF_TIME_STATUS_MASK_MASTER_ZONE_DST (4)
#define EMBER_AF_TIME_STATUS_MASK_MASTER_ZONE_DST_OFFSET (2)
#define EMBER_AF_TIME_STATUS_MASK_SUPERSEDING (8)
#define EMBER_AF_TIME_STATUS_MASK_SUPERSEDING_OFFSET (3)
#define EMBER_AF_WARNING_INFO_MODE (240)
#define EMBER_AF_WARNING_INFO_MODE_OFFSET (4)
#define EMBER_AF_WARNING_INFO_STROBE (12)
#define EMBER_AF_WARNING_INFO_STROBE_OFFSET (2)
#define EMBER_AF_WARNING_INFO_SIREN_LEVEL (3)
#define EMBER_AF_WARNING_INFO_SIREN_LEVEL_OFFSET (0)
#define EMBER_AF_WC_CONFIG_STATUS_OPERATIONAL (1)
#define EMBER_AF_WC_CONFIG_STATUS_OPERATIONAL_OFFSET (0)
#define EMBER_AF_WC_CONFIG_STATUS_ONLINE (2)
#define EMBER_AF_WC_CONFIG_STATUS_ONLINE_OFFSET (1)
#define EMBER_AF_WC_CONFIG_STATUS_OPEN_AND_UP_COMMANDS_REVERSED (4)
#define EMBER_AF_WC_CONFIG_STATUS_OPEN_AND_UP_COMMANDS_REVERSED_OFFSET (2)
#define EMBER_AF_WC_CONFIG_STATUS_LIFT_POSITION_AWARE (8)
#define EMBER_AF_WC_CONFIG_STATUS_LIFT_POSITION_AWARE_OFFSET (3)
#define EMBER_AF_WC_CONFIG_STATUS_TILT_POSITION_AWARE (16)
#define EMBER_AF_WC_CONFIG_STATUS_TILT_POSITION_AWARE_OFFSET (4)
#define EMBER_AF_WC_CONFIG_STATUS_LIFT_ENCODER_CONTROLLED (32)
#define EMBER_AF_WC_CONFIG_STATUS_LIFT_ENCODER_CONTROLLED_OFFSET (5)
#define EMBER_AF_WC_CONFIG_STATUS_TILT_ENCODER_CONTROLLED (64)
#define EMBER_AF_WC_CONFIG_STATUS_TILT_ENCODER_CONTROLLED_OFFSET (6)
#define EMBER_AF_WC_MODE_MOTOR_DIRECTION_REVERSED (1)
#define EMBER_AF_WC_MODE_MOTOR_DIRECTION_REVERSED_OFFSET (0)
#define EMBER_AF_WC_MODE_CALIBRATION_MODE (2)
#define EMBER_AF_WC_MODE_CALIBRATION_MODE_OFFSET (1)
#define EMBER_AF_WC_MODE_MAINTENANCE_MODE (4)
#define EMBER_AF_WC_MODE_MAINTENANCE_MODE_OFFSET (2)
#define EMBER_AF_WC_MODE_LED_FEEDBACK (8)
#define EMBER_AF_WC_MODE_LED_FEEDBACK_OFFSET (3)
#define EMBER_AF_WC_OPERATIONAL_STATUS_GLOBAL (3)
#define EMBER_AF_WC_OPERATIONAL_STATUS_GLOBAL_OFFSET (0)
#define EMBER_AF_WC_OPERATIONAL_STATUS_LIFT (12)
#define EMBER_AF_WC_OPERATIONAL_STATUS_LIFT_OFFSET (2)
#define EMBER_AF_WC_OPERATIONAL_STATUS_TILT (48)
#define EMBER_AF_WC_OPERATIONAL_STATUS_TILT_OFFSET (4)
#define EMBER_AF_WC_SAFETY_STATUS_REMOTE_LOCKOUT (1)
#define EMBER_AF_WC_SAFETY_STATUS_REMOTE_LOCKOUT_OFFSET (0)
#define EMBER_AF_WC_SAFETY_STATUS_TAMPER_DETECTION (2)
#define EMBER_AF_WC_SAFETY_STATUS_TAMPER_DETECTION_OFFSET (1)
#define EMBER_AF_WC_SAFETY_STATUS_FAILED_COMMUNICATION (4)
#define EMBER_AF_WC_SAFETY_STATUS_FAILED_COMMUNICATION_OFFSET (2)
#define EMBER_AF_WC_SAFETY_STATUS_POSITION_FAILURE (8)
#define EMBER_AF_WC_SAFETY_STATUS_POSITION_FAILURE_OFFSET (3)
#define EMBER_AF_WC_SAFETY_STATUS_THERMAL_PROTECTION (16)
#define EMBER_AF_WC_SAFETY_STATUS_THERMAL_PROTECTION_OFFSET (4)
#define EMBER_AF_WC_SAFETY_STATUS_OBSTACLE_DETECTED (32)
#define EMBER_AF_WC_SAFETY_STATUS_OBSTACLE_DETECTED_OFFSET (5)
#define EMBER_AF_WC_SAFETY_STATUS_POWER (64)
#define EMBER_AF_WC_SAFETY_STATUS_POWER_OFFSET (6)
#define EMBER_AF_WC_SAFETY_STATUS_STOP_INPUT (128)
#define EMBER_AF_WC_SAFETY_STATUS_STOP_INPUT_OFFSET (7)
#define EMBER_AF_WC_SAFETY_STATUS_MOTOR_JAMMED (256)
#define EMBER_AF_WC_SAFETY_STATUS_MOTOR_JAMMED_OFFSET (8)
#define EMBER_AF_WC_SAFETY_STATUS_HARDWARE_FAILURE (512)
#define EMBER_AF_WC_SAFETY_STATUS_HARDWARE_FAILURE_OFFSET (9)
#define EMBER_AF_WC_SAFETY_STATUS_MANUAL_OPERATION (1024)
#define EMBER_AF_WC_SAFETY_STATUS_MANUAL_OPERATION_OFFSET (10)
#define EMBER_AF_WC_SAFETY_STATUS_RAIN_PROTECTION (2048)
#define EMBER_AF_WC_SAFETY_STATUS_RAIN_PROTECTION_OFFSET (11)
#define EMBER_AF_WC_SAFETY_STATUS_WIND_PROTECTION (4096)
#define EMBER_AF_WC_SAFETY_STATUS_WIND_PROTECTION_OFFSET (12)
