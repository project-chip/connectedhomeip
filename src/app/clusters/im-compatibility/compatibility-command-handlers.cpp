/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include "IMClusterCommandHandler.h"

#include <stdint.h>

#include "af-structs.h"
#include "call-command-handler.h"
#include "callback.h"
#include "cluster-id.h"
#include "command-id.h"
#include "util.h"

#include <app/InteractionModelEngine.h>
#include <gen/callback.h>

namespace chip {
namespace app {

// Cluster specific command parsing
// TODO: Take care of internal status of ember library.

namespace clusters {

void BarrierControl::OnBarrierControlGoToPercentCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t percentOpen)
{
    emberAfBarrierControlClusterBarrierControlGoToPercentCallback(percentOpen);
}

void BarrierControl::OnBarrierControlStopCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfBarrierControlClusterBarrierControlStopCallback();
}

void Basic::OnResetToFactoryDefaultsCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfBasicClusterResetToFactoryDefaultsCallback();
}

void Binding::OnBindCommandCallback(app::Command *, EndpointId ZCLEndpointId, chip::NodeId nodeId, chip::GroupId groupId,
                                    chip::EndpointId endpointId, chip::ClusterId clusterId)
{
    emberAfBindingClusterBindCallback(nodeId, groupId, endpointId, clusterId);
}

void Binding::OnUnbindCommandCallback(app::Command *, EndpointId ZCLEndpointId, chip::NodeId nodeId, chip::GroupId groupId,
                                      chip::EndpointId endpointId, chip::ClusterId clusterId)
{
    emberAfBindingClusterUnbindCallback(nodeId, groupId, endpointId, clusterId);
}

void ColorControl::OnMoveColorCommandCallback(app::Command *, EndpointId ZCLEndpointId, int16_t rateX, int16_t rateY,
                                              uint8_t optionsMask, uint8_t optionsOverride)
{
    emberAfColorControlClusterMoveColorCallback(rateX, rateY, optionsMask, optionsOverride);
}

void ColorControl::OnMoveColorTemperatureCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t moveMode, uint16_t rate,
                                                         uint16_t colorTemperatureMinimum, uint16_t colorTemperatureMaximum,
                                                         uint8_t optionsMask, uint8_t optionsOverride)
{
    emberAfColorControlClusterMoveColorTemperatureCallback(moveMode, rate, colorTemperatureMinimum, colorTemperatureMaximum,
                                                           optionsMask, optionsOverride);
}

void ColorControl::OnMoveHueCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t moveMode, uint8_t rate,
                                            uint8_t optionsMask, uint8_t optionsOverride)
{
    emberAfColorControlClusterMoveHueCallback(moveMode, rate, optionsMask, optionsOverride);
}

void ColorControl::OnMoveSaturationCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t moveMode, uint8_t rate,
                                                   uint8_t optionsMask, uint8_t optionsOverride)
{
    emberAfColorControlClusterMoveSaturationCallback(moveMode, rate, optionsMask, optionsOverride);
}

void ColorControl::OnMoveToColorCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t colorX, uint16_t colorY,
                                                uint16_t transitionTime, uint8_t optionsMask, uint8_t optionsOverride)
{
    emberAfColorControlClusterMoveToColorCallback(colorX, colorY, transitionTime, optionsMask, optionsOverride);
}

void ColorControl::OnMoveToColorTemperatureCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t colorTemperature,
                                                           uint16_t transitionTime, uint8_t optionsMask, uint8_t optionsOverride)
{
    emberAfColorControlClusterMoveToColorTemperatureCallback(colorTemperature, transitionTime, optionsMask, optionsOverride);
}

void ColorControl::OnMoveToHueCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t hue, uint8_t direction,
                                              uint16_t transitionTime, uint8_t optionsMask, uint8_t optionsOverride)
{
    emberAfColorControlClusterMoveToHueCallback(hue, direction, transitionTime, optionsMask, optionsOverride);
}

void ColorControl::OnMoveToHueAndSaturationCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t hue,
                                                           uint8_t saturation, uint16_t transitionTime, uint8_t optionsMask,
                                                           uint8_t optionsOverride)
{
    emberAfColorControlClusterMoveToHueAndSaturationCallback(hue, saturation, transitionTime, optionsMask, optionsOverride);
}

void ColorControl::OnMoveToSaturationCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t saturation,
                                                     uint16_t transitionTime, uint8_t optionsMask, uint8_t optionsOverride)
{
    emberAfColorControlClusterMoveToSaturationCallback(saturation, transitionTime, optionsMask, optionsOverride);
}

void ColorControl::OnStepColorCommandCallback(app::Command *, EndpointId ZCLEndpointId, int16_t stepX, int16_t stepY,
                                              uint16_t transitionTime, uint8_t optionsMask, uint8_t optionsOverride)
{
    emberAfColorControlClusterStepColorCallback(stepX, stepY, transitionTime, optionsMask, optionsOverride);
}

void ColorControl::OnStepColorTemperatureCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t stepMode,
                                                         uint16_t stepSize, uint16_t transitionTime,
                                                         uint16_t colorTemperatureMinimum, uint16_t colorTemperatureMaximum,
                                                         uint8_t optionsMask, uint8_t optionsOverride)
{
    emberAfColorControlClusterStepColorTemperatureCallback(stepMode, stepSize, transitionTime, colorTemperatureMinimum,
                                                           colorTemperatureMaximum, optionsMask, optionsOverride);
}

void ColorControl::OnStepHueCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t stepMode, uint8_t stepSize,
                                            uint8_t transitionTime, uint8_t optionsMask, uint8_t optionsOverride)
{
    emberAfColorControlClusterStepHueCallback(stepMode, stepSize, transitionTime, optionsMask, optionsOverride);
}

void ColorControl::OnStepSaturationCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t stepMode, uint8_t stepSize,
                                                   uint8_t transitionTime, uint8_t optionsMask, uint8_t optionsOverride)
{
    emberAfColorControlClusterStepSaturationCallback(stepMode, stepSize, transitionTime, optionsMask, optionsOverride);
}

void ColorControl::OnStopMoveStepCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t optionsMask,
                                                 uint8_t optionsOverride)
{
    emberAfColorControlClusterStopMoveStepCallback(optionsMask, optionsOverride);
}

void ContentLaunch::OnLaunchContentCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfContentLaunchClusterLaunchContentCallback();
}

void ContentLaunch::OnLaunchURLCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfContentLaunchClusterLaunchURLCallback();
}

void DoorLock::OnClearAllPinsCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfDoorLockClusterClearAllPinsCallback();
}

void DoorLock::OnClearAllRfidsCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfDoorLockClusterClearAllRfidsCallback();
}

void DoorLock::OnClearHolidayScheduleCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t scheduleId)
{
    emberAfDoorLockClusterClearHolidayScheduleCallback(scheduleId);
}

void DoorLock::OnClearPinCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t userId)
{
    emberAfDoorLockClusterClearPinCallback(userId);
}

void DoorLock::OnClearRfidCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t userId)
{
    emberAfDoorLockClusterClearRfidCallback(userId);
}

void DoorLock::OnClearWeekdayScheduleCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t scheduleId, uint16_t userId)
{
    emberAfDoorLockClusterClearWeekdayScheduleCallback(scheduleId, userId);
}

void DoorLock::OnClearYeardayScheduleCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t scheduleId, uint16_t userId)
{
    emberAfDoorLockClusterClearYeardayScheduleCallback(scheduleId, userId);
}

void DoorLock::OnGetHolidayScheduleCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t scheduleId)
{
    emberAfDoorLockClusterGetHolidayScheduleCallback(scheduleId);
}

void DoorLock::OnGetLogRecordCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t logIndex)
{
    emberAfDoorLockClusterGetLogRecordCallback(logIndex);
}

void DoorLock::OnGetPinCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t userId)
{
    emberAfDoorLockClusterGetPinCallback(userId);
}

void DoorLock::OnGetRfidCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t userId)
{
    emberAfDoorLockClusterGetRfidCallback(userId);
}

void DoorLock::OnGetUserTypeCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t userId)
{
    emberAfDoorLockClusterGetUserTypeCallback(userId);
}

void DoorLock::OnGetWeekdayScheduleCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t scheduleId, uint16_t userId)
{
    emberAfDoorLockClusterGetWeekdayScheduleCallback(scheduleId, userId);
}

void DoorLock::OnGetYeardayScheduleCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t scheduleId, uint16_t userId)
{
    emberAfDoorLockClusterGetYeardayScheduleCallback(scheduleId, userId);
}

void DoorLock::OnLockDoorCommandCallback(app::Command *, EndpointId ZCLEndpointId, const uint8_t * PIN)
{
    emberAfDoorLockClusterLockDoorCallback(PIN);
}

void DoorLock::OnSetHolidayScheduleCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t scheduleId,
                                                   uint32_t localStartTime, uint32_t localEndTime,
                                                   uint8_t operatingModeDuringHoliday)
{
    emberAfDoorLockClusterSetHolidayScheduleCallback(scheduleId, localStartTime, localEndTime, operatingModeDuringHoliday);
}

void DoorLock::OnSetPinCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t userId, uint8_t userStatus,
                                       uint8_t userType, const uint8_t * pin)
{
    emberAfDoorLockClusterSetPinCallback(userId, userStatus, userType, pin);
}

void DoorLock::OnSetRfidCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t userId, uint8_t userStatus,
                                        uint8_t userType, const uint8_t * id)
{
    emberAfDoorLockClusterSetRfidCallback(userId, userStatus, userType, id);
}

void DoorLock::OnSetUserTypeCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t userId, uint8_t userType)
{
    emberAfDoorLockClusterSetUserTypeCallback(userId, userType);
}

void DoorLock::OnSetWeekdayScheduleCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t scheduleId, uint16_t userId,
                                                   uint8_t daysMask, uint8_t startHour, uint8_t startMinute, uint8_t endHour,
                                                   uint8_t endMinute)
{
    emberAfDoorLockClusterSetWeekdayScheduleCallback(scheduleId, userId, daysMask, startHour, startMinute, endHour, endMinute);
}

void DoorLock::OnSetYeardayScheduleCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t scheduleId, uint16_t userId,
                                                   uint32_t localStartTime, uint32_t localEndTime)
{
    emberAfDoorLockClusterSetYeardayScheduleCallback(scheduleId, userId, localStartTime, localEndTime);
}

void DoorLock::OnUnlockDoorCommandCallback(app::Command *, EndpointId ZCLEndpointId, const uint8_t * PIN)
{
    emberAfDoorLockClusterUnlockDoorCallback(PIN);
}

void DoorLock::OnUnlockWithTimeoutCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t timeoutInSeconds,
                                                  const uint8_t * pin)
{
    emberAfDoorLockClusterUnlockWithTimeoutCallback(timeoutInSeconds, pin);
}

void Groups::OnAddGroupCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t groupId, const uint8_t * groupName)
{
    emberAfGroupsClusterAddGroupCallback(groupId, groupName);
}

void Groups::OnAddGroupIfIdentifyingCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t groupId,
                                                    const uint8_t * groupName)
{
    emberAfGroupsClusterAddGroupIfIdentifyingCallback(groupId, groupName);
}

void Groups::OnGetGroupMembershipCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t groupCount,
                                                 /* TYPE WARNING: array array defaults to */ uint8_t * groupList)
{
    emberAfGroupsClusterGetGroupMembershipCallback(groupCount, groupList);
}

void Groups::OnRemoveAllGroupsCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfGroupsClusterRemoveAllGroupsCallback();
}

void Groups::OnRemoveGroupCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t groupId)
{
    emberAfGroupsClusterRemoveGroupCallback(groupId);
}

void Groups::OnViewGroupCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t groupId)
{
    emberAfGroupsClusterViewGroupCallback(groupId);
}

void IasZone::OnZoneEnrollResponseCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t enrollResponseCode,
                                                  uint8_t zoneId)
{
    emberAfIasZoneClusterZoneEnrollResponseCallback(enrollResponseCode, zoneId);
}

void Identify::OnIdentifyCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t identifyTime)
{
    emberAfIdentifyClusterIdentifyCallback(identifyTime);
}

void Identify::OnIdentifyQueryCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfIdentifyClusterIdentifyQueryCallback();
}

void LevelControl::OnMoveCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t moveMode, uint8_t rate,
                                         uint8_t optionMask, uint8_t optionOverride)
{
    emberAfLevelControlClusterMoveCallback(moveMode, rate, optionMask, optionOverride);
}

void LevelControl::OnMoveToLevelCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t level, uint16_t transitionTime,
                                                uint8_t optionMask, uint8_t optionOverride)
{
    emberAfLevelControlClusterMoveToLevelCallback(level, transitionTime, optionMask, optionOverride);
}

void LevelControl::OnMoveToLevelWithOnOffCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t level,
                                                         uint16_t transitionTime)
{
    emberAfLevelControlClusterMoveToLevelWithOnOffCallback(level, transitionTime);
}

void LevelControl::OnMoveWithOnOffCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t moveMode, uint8_t rate)
{
    emberAfLevelControlClusterMoveWithOnOffCallback(moveMode, rate);
}

void LevelControl::OnStepCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t stepMode, uint8_t stepSize,
                                         uint16_t transitionTime, uint8_t optionMask, uint8_t optionOverride)
{
    emberAfLevelControlClusterStepCallback(stepMode, stepSize, transitionTime, optionMask, optionOverride);
}

void LevelControl::OnStepWithOnOffCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t stepMode, uint8_t stepSize,
                                                  uint16_t transitionTime)
{
    emberAfLevelControlClusterStepWithOnOffCallback(stepMode, stepSize, transitionTime);
}

void LevelControl::OnStopCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint8_t optionMask, uint8_t optionOverride)
{
    emberAfLevelControlClusterStopCallback(optionMask, optionOverride);
}

void LevelControl::OnStopWithOnOffCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfLevelControlClusterStopWithOnOffCallback();
}

void MediaPlayback::OnFastForwardRequestCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfMediaPlaybackClusterFastForwardRequestCallback();
}

void MediaPlayback::OnNextRequestCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfMediaPlaybackClusterNextRequestCallback();
}

void MediaPlayback::OnPauseRequestCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfMediaPlaybackClusterPauseRequestCallback();
}

void MediaPlayback::OnPlayRequestCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfMediaPlaybackClusterPlayRequestCallback();
}

void MediaPlayback::OnPreviousRequestCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfMediaPlaybackClusterPreviousRequestCallback();
}

void MediaPlayback::OnRewindRequestCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfMediaPlaybackClusterRewindRequestCallback();
}

void MediaPlayback::OnSkipBackwardRequestCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfMediaPlaybackClusterSkipBackwardRequestCallback();
}

void MediaPlayback::OnSkipForwardRequestCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfMediaPlaybackClusterSkipForwardRequestCallback();
}

void MediaPlayback::OnStartOverRequestCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfMediaPlaybackClusterStartOverRequestCallback();
}

void MediaPlayback::OnStopRequestCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfMediaPlaybackClusterStopRequestCallback();
}

void OnOff::OnOffCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfOnOffClusterOffCallback();
}

void OnOff::OnOnCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfOnOffClusterOnCallback();
}

void OnOff::OnToggleCommandCallback(app::Command *, EndpointId ZCLEndpointId)
{
    emberAfOnOffClusterToggleCallback();
}

void Scenes::OnAddSceneCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t groupId, uint8_t sceneId,
                                       uint16_t transitionTime, const uint8_t * sceneName,
                                       /* TYPE WARNING: array array defaults to */ uint8_t * extensionFieldSets)
{
    emberAfScenesClusterAddSceneCallback(groupId, sceneId, transitionTime, sceneName, extensionFieldSets);
}

void Scenes::OnGetSceneMembershipCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t groupId)
{
    emberAfScenesClusterGetSceneMembershipCallback(groupId);
}

void Scenes::OnRecallSceneCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t groupId, uint8_t sceneId,
                                          uint16_t transitionTime)
{
    emberAfScenesClusterRecallSceneCallback(groupId, sceneId, transitionTime);
}

void Scenes::OnRemoveAllScenesCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t groupId)
{
    emberAfScenesClusterRemoveAllScenesCallback(groupId);
}

void Scenes::OnRemoveSceneCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t groupId, uint8_t sceneId)
{
    emberAfScenesClusterRemoveSceneCallback(groupId, sceneId);
}

void Scenes::OnStoreSceneCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t groupId, uint8_t sceneId)
{
    emberAfScenesClusterStoreSceneCallback(groupId, sceneId);
}

void Scenes::OnViewSceneCommandCallback(app::Command *, EndpointId ZCLEndpointId, uint16_t groupId, uint8_t sceneId)
{
    emberAfScenesClusterViewSceneCallback(groupId, sceneId);
}

} // namespace clusters
} // namespace app
} // namespace chip
