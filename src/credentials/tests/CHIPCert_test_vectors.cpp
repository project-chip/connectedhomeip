/*
 *
 *    Copyright (c) 2020-2021 Project CHIP Authors
 *    Copyright (c) 2019 Google LLC.
 *    Copyright (c) 2016-2017 Nest Labs, Inc.
 *    All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *    @file
 *      This file contains definitions of test certificates used by various unit tests.
 *
 */

#include <credentials/CHIPCert.h>

#include "CHIPCert_test_vectors.h"

namespace chip {
namespace TestCerts {

using namespace chip::Credentials;
using namespace chip::ASN1;

// clang-format off
extern const uint8_t gTestCerts[] = {
    TestCert::kRoot01,
    TestCert::kRoot02,
    TestCert::kICA01,
    TestCert::kICA02,
    TestCert::kICA01_1,
    TestCert::kFWSign01,
    TestCert::kNode01_01,
    TestCert::kNode01_02,
    TestCert::kNode02_01,
    TestCert::kNode02_02,
    TestCert::kNode02_03,
    TestCert::kNode02_04,
    TestCert::kNode02_05,
    TestCert::kNode02_06,
    TestCert::kNode02_07,
};
// clang-format on

extern const size_t gNumTestCerts = sizeof(gTestCerts) / sizeof(gTestCerts[0]);

CHIP_ERROR GetTestCert(uint8_t certType, BitFlags<TestCertLoadFlags> certLoadFlags, const uint8_t *& certData,
                       uint32_t & certDataLen)
{
    CHIP_ERROR err;
    bool derForm = certLoadFlags.Has(TestCertLoadFlags::kDERForm);

#define SELECT_CERT(NAME)                                                                                                          \
    do                                                                                                                             \
    {                                                                                                                              \
        if (certType == TestCert::k##NAME)                                                                                         \
        {                                                                                                                          \
            if (derForm)                                                                                                           \
            {                                                                                                                      \
                certData    = sTestCert_##NAME##_DER;                                                                              \
                certDataLen = sTestCert_##NAME##_DER_Len;                                                                          \
            }                                                                                                                      \
            else                                                                                                                   \
            {                                                                                                                      \
                certData    = sTestCert_##NAME##_Chip;                                                                             \
                certDataLen = sTestCert_##NAME##_Chip_Len;                                                                         \
            }                                                                                                                      \
            ExitNow(err = CHIP_NO_ERROR);                                                                                          \
        }                                                                                                                          \
    } while (0)

    SELECT_CERT(Root01);
    SELECT_CERT(Root02);
    SELECT_CERT(ICA01);
    SELECT_CERT(ICA02);
    SELECT_CERT(ICA01_1);
    SELECT_CERT(FWSign01);
    SELECT_CERT(Node01_01);
    SELECT_CERT(Node01_02);
    SELECT_CERT(Node02_01);
    SELECT_CERT(Node02_02);
    SELECT_CERT(Node02_03);
    SELECT_CERT(Node02_04);
    SELECT_CERT(Node02_05);
    SELECT_CERT(Node02_06);
    SELECT_CERT(Node02_07);
#undef SELECT_CERT

    err = CHIP_ERROR_CA_CERT_NOT_FOUND;

exit:
    return err;
}

const char * GetTestCertName(uint8_t certType)
{
#define NAME_CERT(NAME)                                                                                                            \
    do                                                                                                                             \
    {                                                                                                                              \
        if (certType == TestCert::k##NAME)                                                                                         \
        {                                                                                                                          \
            return #NAME;                                                                                                          \
        }                                                                                                                          \
    } while (0)

    NAME_CERT(Root01);
    NAME_CERT(Root02);
    NAME_CERT(ICA01);
    NAME_CERT(ICA02);
    NAME_CERT(ICA01_1);
    NAME_CERT(FWSign01);
    NAME_CERT(Node01_01);
    NAME_CERT(Node01_02);
    NAME_CERT(Node02_01);
    NAME_CERT(Node02_02);
    NAME_CERT(Node02_03);
    NAME_CERT(Node02_04);
    NAME_CERT(Node02_05);
    NAME_CERT(Node02_06);
    NAME_CERT(Node02_07);

    return nullptr;
}

CHIP_ERROR GetTestCertPubkey(uint8_t certType, const uint8_t *& certPubkey, uint32_t & certPubkeyLen)
{
    CHIP_ERROR err;

#define SELECT_CERT(NAME)                                                                                                          \
    do                                                                                                                             \
    {                                                                                                                              \
        if (certType == TestCert::k##NAME)                                                                                         \
        {                                                                                                                          \
            certPubkey    = sTestCert_##NAME##_PublicKey;                                                                          \
            certPubkeyLen = sTestCert_##NAME##_PublicKey_Len;                                                                      \
            ExitNow(err = CHIP_NO_ERROR);                                                                                          \
        }                                                                                                                          \
    } while (0)

    SELECT_CERT(Root01);
    SELECT_CERT(Root02);
    SELECT_CERT(ICA01);
    SELECT_CERT(ICA02);
    SELECT_CERT(ICA01_1);
    SELECT_CERT(FWSign01);
    SELECT_CERT(Node01_01);
    SELECT_CERT(Node01_02);
    SELECT_CERT(Node02_01);
    SELECT_CERT(Node02_02);
    SELECT_CERT(Node02_03);
    SELECT_CERT(Node02_04);
    SELECT_CERT(Node02_05);
    SELECT_CERT(Node02_06);
    SELECT_CERT(Node02_07);
#undef SELECT_CERT

    err = CHIP_ERROR_CA_CERT_NOT_FOUND;

exit:
    return err;
}

CHIP_ERROR LoadTestCert(ChipCertificateSet & certSet, uint8_t certType, BitFlags<TestCertLoadFlags> certLoadFlags,
                        BitFlags<CertDecodeFlags> decodeFlags)
{
    CHIP_ERROR err;
    ChipCertificateData * cert;
    const uint8_t * certData;
    uint32_t certDataLen;

    // Get the requested certificate data.
    err = GetTestCert(certType, certLoadFlags, certData, certDataLen);
    SuccessOrExit(err);

    // Load it into the certificate set.
    err = certSet.LoadCert(certData, certDataLen, decodeFlags);
    SuccessOrExit(err);

    // Get loaded certificate data.
    cert = const_cast<ChipCertificateData *>(certSet.GetLastCert());
    VerifyOrExit(cert != nullptr, err = CHIP_ERROR_INVALID_ARGUMENT);

    // Apply load flags.
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressIsCA))
    {
        cert->mCertFlags.Clear(CertFlags::kIsCA);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressKeyUsage))
    {
        cert->mCertFlags.Clear(CertFlags::kExtPresent_KeyUsage);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressKeyCertSign))
    {
        cert->mKeyUsageFlags.Clear(KeyUsageFlags::kKeyCertSign);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSetPathLenConstZero))
    {
        cert->mCertFlags.Set(CertFlags::kPathLenConstraintPresent);
        cert->mPathLenConstraint = 0;
    }

exit:
    return err;
}

// ------------------------------ TEST CERTIFICATES ----------------------------------------

/**************  Test Root01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 4168868299178151970 (0x39dacba167e69022)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:01:73:f5:5c:e5:ed:cf:63:29:61:90:4e:9e:2f:
                    07:79:be:e5:05:ee:7b:28:a9:db:80:19:7f:bf:b0:
                    76:79:96:b1:c2:87:13:aa:a7:0d:4e:f2:1c:99:61:
                    0f:ec:3a:3d:8f:62:4a:f3:8b:cd:ae:81:c9:e7:1b:
                    9c:f9:9b:58:88
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                84:9F:D2:4A:AF:59:09:40:73:E1:FA:C6:8E:AD:5F:52:0E:BE:9F:1D
            X509v3 Authority Key Identifier:
                keyid:84:9F:D2:4A:AF:59:09:40:73:E1:FA:C6:8E:AD:5F:52:0E:BE:9F:1D

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:00:f9:0e:24:7b:a8:c9:a7:64:3f:97:78:b4:4e:
         b3:94:f4:3c:4e:df:78:02:2a:5d:c4:09:b6:82:33:69:1f:57:
         02:20:1a:87:80:5a:54:43:ec:ec:ca:17:3a:6f:43:7e:08:93:
         3d:43:5f:52:06:63:7e:e0:32:a9:9a:0e:97:ff:92:9f

-----BEGIN CERTIFICATE-----
MIIBnDCCAUOgAwIBAgIIOdrLoWfmkCIwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBBAwQQ0FDQUNBQ0EwMDAwMDAwMTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABAFz9Vzl7c9jKWGQTp4vB3m+5QXueyip24AZ
f7+wdnmWscKHE6qnDU7yHJlhD+w6PY9iSvOLza6ByecbnPmbWIijYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBSEn9JKr1kJQHPh
+saOrV9SDr6fHTAfBgNVHSMEGDAWgBSEn9JKr1kJQHPh+saOrV9SDr6fHTAKBggq
hkjOPQQDAgNHADBEAiAA+Q4ke6jJp2Q/l3i0TrOU9DxO33gCKl3ECbaCM2kfVwIg
GoeAWlRD7OzKFzpvQ34Ikz1DX1IGY37gMqmaDpf/kp8=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIE4NlopaLJaRN15OuG8bE4QVP1Q/oL3+9QLy7joRfvSmoAoGCCqGSM49
AwEHoUQDQgAEAXP1XOXtz2MpYZBOni8Heb7lBe57KKnbgBl/v7B2eZaxwocTqqcN
TvIcmWEP7Do9j2JK84vNroHJ5xuc+ZtYiA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Root01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x39, 0xda, 0xcb, 0xa1, 0x67, 0xe6, 0x90, 0x22, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27,
    0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24,
    0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x01, 0x73, 0xf5, 0x5c, 0xe5, 0xed, 0xcf, 0x63, 0x29, 0x61, 0x90,
    0x4e, 0x9e, 0x2f, 0x07, 0x79, 0xbe, 0xe5, 0x05, 0xee, 0x7b, 0x28, 0xa9, 0xdb, 0x80, 0x19, 0x7f, 0xbf, 0xb0, 0x76, 0x79,
    0x96, 0xb1, 0xc2, 0x87, 0x13, 0xaa, 0xa7, 0x0d, 0x4e, 0xf2, 0x1c, 0x99, 0x61, 0x0f, 0xec, 0x3a, 0x3d, 0x8f, 0x62, 0x4a,
    0xf3, 0x8b, 0xcd, 0xae, 0x81, 0xc9, 0xe7, 0x1b, 0x9c, 0xf9, 0x9b, 0x58, 0x88, 0x37, 0x0a, 0x35, 0x01, 0x29, 0x01, 0x18,
    0x24, 0x02, 0x60, 0x30, 0x04, 0x14, 0x84, 0x9f, 0xd2, 0x4a, 0xaf, 0x59, 0x09, 0x40, 0x73, 0xe1, 0xfa, 0xc6, 0x8e, 0xad,
    0x5f, 0x52, 0x0e, 0xbe, 0x9f, 0x1d, 0x30, 0x05, 0x14, 0x84, 0x9f, 0xd2, 0x4a, 0xaf, 0x59, 0x09, 0x40, 0x73, 0xe1, 0xfa,
    0xc6, 0x8e, 0xad, 0x5f, 0x52, 0x0e, 0xbe, 0x9f, 0x1d, 0x18, 0x30, 0x0b, 0x40, 0x00, 0xf9, 0x0e, 0x24, 0x7b, 0xa8, 0xc9,
    0xa7, 0x64, 0x3f, 0x97, 0x78, 0xb4, 0x4e, 0xb3, 0x94, 0xf4, 0x3c, 0x4e, 0xdf, 0x78, 0x02, 0x2a, 0x5d, 0xc4, 0x09, 0xb6,
    0x82, 0x33, 0x69, 0x1f, 0x57, 0x1a, 0x87, 0x80, 0x5a, 0x54, 0x43, 0xec, 0xec, 0xca, 0x17, 0x3a, 0x6f, 0x43, 0x7e, 0x08,
    0x93, 0x3d, 0x43, 0x5f, 0x52, 0x06, 0x63, 0x7e, 0xe0, 0x32, 0xa9, 0x9a, 0x0e, 0x97, 0xff, 0x92, 0x9f, 0x18,
};

extern const uint32_t sTestCert_Root01_Chip_Len = sizeof(sTestCert_Root01_Chip);

extern const uint8_t sTestCert_Root01_DER[] = {
    0x30, 0x82, 0x01, 0x9c, 0x30, 0x82, 0x01, 0x43, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x39, 0xda, 0xcb, 0xa1, 0x67, 0xe6,
    0x90, 0x22, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x01, 0x73,
    0xf5, 0x5c, 0xe5, 0xed, 0xcf, 0x63, 0x29, 0x61, 0x90, 0x4e, 0x9e, 0x2f, 0x07, 0x79, 0xbe, 0xe5, 0x05, 0xee, 0x7b, 0x28, 0xa9,
    0xdb, 0x80, 0x19, 0x7f, 0xbf, 0xb0, 0x76, 0x79, 0x96, 0xb1, 0xc2, 0x87, 0x13, 0xaa, 0xa7, 0x0d, 0x4e, 0xf2, 0x1c, 0x99, 0x61,
    0x0f, 0xec, 0x3a, 0x3d, 0x8f, 0x62, 0x4a, 0xf3, 0x8b, 0xcd, 0xae, 0x81, 0xc9, 0xe7, 0x1b, 0x9c, 0xf9, 0x9b, 0x58, 0x88, 0xa3,
    0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x16, 0x04, 0x14, 0x84, 0x9f, 0xd2, 0x4a, 0xaf, 0x59, 0x09, 0x40, 0x73, 0xe1, 0xfa, 0xc6, 0x8e, 0xad, 0x5f, 0x52,
    0x0e, 0xbe, 0x9f, 0x1d, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x84, 0x9f, 0xd2, 0x4a,
    0xaf, 0x59, 0x09, 0x40, 0x73, 0xe1, 0xfa, 0xc6, 0x8e, 0xad, 0x5f, 0x52, 0x0e, 0xbe, 0x9f, 0x1d, 0x30, 0x0a, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x00, 0xf9, 0x0e, 0x24, 0x7b, 0xa8, 0xc9,
    0xa7, 0x64, 0x3f, 0x97, 0x78, 0xb4, 0x4e, 0xb3, 0x94, 0xf4, 0x3c, 0x4e, 0xdf, 0x78, 0x02, 0x2a, 0x5d, 0xc4, 0x09, 0xb6, 0x82,
    0x33, 0x69, 0x1f, 0x57, 0x02, 0x20, 0x1a, 0x87, 0x80, 0x5a, 0x54, 0x43, 0xec, 0xec, 0xca, 0x17, 0x3a, 0x6f, 0x43, 0x7e, 0x08,
    0x93, 0x3d, 0x43, 0x5f, 0x52, 0x06, 0x63, 0x7e, 0xe0, 0x32, 0xa9, 0x9a, 0x0e, 0x97, 0xff, 0x92, 0x9f,
};

extern const uint32_t sTestCert_Root01_DER_Len = sizeof(sTestCert_Root01_DER);

extern const uint8_t sTestCert_Root01_PublicKey[] = {
    0x04, 0x01, 0x73, 0xf5, 0x5c, 0xe5, 0xed, 0xcf, 0x63, 0x29, 0x61, 0x90, 0x4e, 0x9e, 0x2f, 0x07, 0x79,
    0xbe, 0xe5, 0x05, 0xee, 0x7b, 0x28, 0xa9, 0xdb, 0x80, 0x19, 0x7f, 0xbf, 0xb0, 0x76, 0x79, 0x96, 0xb1,
    0xc2, 0x87, 0x13, 0xaa, 0xa7, 0x0d, 0x4e, 0xf2, 0x1c, 0x99, 0x61, 0x0f, 0xec, 0x3a, 0x3d, 0x8f, 0x62,
    0x4a, 0xf3, 0x8b, 0xcd, 0xae, 0x81, 0xc9, 0xe7, 0x1b, 0x9c, 0xf9, 0x9b, 0x58, 0x88,
};

extern const uint8_t sTestCert_Root01_PublicKey_Len = sizeof(sTestCert_Root01_PublicKey);

extern const uint8_t sTestCert_Root01_PrivateKey[] = {
    0x4e, 0x0d, 0x96, 0x8a, 0x5a, 0x2c, 0x96, 0x91, 0x37, 0x5e, 0x4e, 0xb8, 0x6f, 0x1b, 0x13, 0x84,
    0x15, 0x3f, 0x54, 0x3f, 0xa0, 0xbd, 0xfe, 0xf5, 0x02, 0xf2, 0xee, 0x3a, 0x11, 0x7e, 0xf4, 0xa6,
};

extern const uint8_t sTestCert_Root01_PrivateKey_Len = sizeof(sTestCert_Root01_PrivateKey);

extern const uint8_t sTestCert_Root01_SubjectKeyId[] = {
    0x84, 0x9F, 0xD2, 0x4A, 0xAF, 0x59, 0x09, 0x40, 0x73, 0xE1, 0xFA, 0xC6, 0x8E, 0xAD, 0x5F, 0x52, 0x0E, 0xBE, 0x9F, 0x1D,
};

extern const uint8_t sTestCert_Root01_SubjectKeyId_Len = sizeof(sTestCert_Root01_SubjectKeyId);

/**************  Test Root02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 4632649778616195067 (0x404a7a6dc735d7fb)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.4 = CACACACA00000002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:1a:65:60:29:37:2d:dc:3f:fe:e8:f1:8b:a4:09:
                    27:f1:68:1a:e1:5b:1c:ce:ae:12:fe:39:d1:0e:a7:
                    db:b4:4e:5a:70:b6:01:16:7e:a9:04:74:48:7b:67:
                    bc:71:cd:cd:7f:4a:11:a3:99:cf:b6:58:63:bc:93:
                    35:45:34:6f:28
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                82:35:49:3B:68:2B:21:71:F5:BC:27:22:7A:6B:4D:0E:06:22:63:BF
            X509v3 Authority Key Identifier:
                keyid:82:35:49:3B:68:2B:21:71:F5:BC:27:22:7A:6B:4D:0E:06:22:63:BF

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:68:7a:25:39:50:82:d4:88:78:45:f2:b6:48:33:
         ef:51:21:67:d3:51:b7:d7:da:ba:21:46:c7:dc:47:1d:48:c9:
         02:21:00:e1:5a:4d:91:c9:98:53:6c:4b:84:98:34:b1:cb:75:
         6c:25:04:4c:ad:20:8e:6a:07:1b:f8:b3:b6:6d:62:9b:de

-----BEGIN CERTIFICATE-----
MIIB4TCCAYegAwIBAgIIQEp6bcc11/swCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDIxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDIxIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEGmVgKTct
3D/+6PGLpAkn8Wga4Vsczq4S/jnRDqfbtE5acLYBFn6pBHRIe2e8cc3Nf0oRo5nP
tlhjvJM1RTRvKKNjMGEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw
HQYDVR0OBBYEFII1STtoKyFx9bwnInprTQ4GImO/MB8GA1UdIwQYMBaAFII1STto
KyFx9bwnInprTQ4GImO/MAoGCCqGSM49BAMCA0gAMEUCIGh6JTlQgtSIeEXytkgz
71EhZ9NRt9fauiFGx9xHHUjJAiEA4VpNkcmYU2xLhJg0sct1bCUETK0gjmoHG/iz
tm1im94=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEILvOHlwH0ITgvV3DTubocYZaa0VYra/NPIua2j78GLxToAoGCCqGSM49
AwEHoUQDQgAEGmVgKTct3D/+6PGLpAkn8Wga4Vsczq4S/jnRDqfbtE5acLYBFn6p
BHRIe2e8cc3Nf0oRo5nPtlhjvJM1RTRvKA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Root02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x40, 0x4a, 0x7a, 0x6d, 0xc7, 0x35, 0xd7, 0xfb, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x14, 0x02, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xb0, 0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x14,
    0x02, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24,
    0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x1a, 0x65, 0x60, 0x29, 0x37, 0x2d, 0xdc, 0x3f, 0xfe, 0xe8, 0xf1,
    0x8b, 0xa4, 0x09, 0x27, 0xf1, 0x68, 0x1a, 0xe1, 0x5b, 0x1c, 0xce, 0xae, 0x12, 0xfe, 0x39, 0xd1, 0x0e, 0xa7, 0xdb, 0xb4,
    0x4e, 0x5a, 0x70, 0xb6, 0x01, 0x16, 0x7e, 0xa9, 0x04, 0x74, 0x48, 0x7b, 0x67, 0xbc, 0x71, 0xcd, 0xcd, 0x7f, 0x4a, 0x11,
    0xa3, 0x99, 0xcf, 0xb6, 0x58, 0x63, 0xbc, 0x93, 0x35, 0x45, 0x34, 0x6f, 0x28, 0x37, 0x0a, 0x35, 0x01, 0x29, 0x01, 0x18,
    0x24, 0x02, 0x60, 0x30, 0x04, 0x14, 0x82, 0x35, 0x49, 0x3b, 0x68, 0x2b, 0x21, 0x71, 0xf5, 0xbc, 0x27, 0x22, 0x7a, 0x6b,
    0x4d, 0x0e, 0x06, 0x22, 0x63, 0xbf, 0x30, 0x05, 0x14, 0x82, 0x35, 0x49, 0x3b, 0x68, 0x2b, 0x21, 0x71, 0xf5, 0xbc, 0x27,
    0x22, 0x7a, 0x6b, 0x4d, 0x0e, 0x06, 0x22, 0x63, 0xbf, 0x18, 0x30, 0x0b, 0x40, 0x68, 0x7a, 0x25, 0x39, 0x50, 0x82, 0xd4,
    0x88, 0x78, 0x45, 0xf2, 0xb6, 0x48, 0x33, 0xef, 0x51, 0x21, 0x67, 0xd3, 0x51, 0xb7, 0xd7, 0xda, 0xba, 0x21, 0x46, 0xc7,
    0xdc, 0x47, 0x1d, 0x48, 0xc9, 0xe1, 0x5a, 0x4d, 0x91, 0xc9, 0x98, 0x53, 0x6c, 0x4b, 0x84, 0x98, 0x34, 0xb1, 0xcb, 0x75,
    0x6c, 0x25, 0x04, 0x4c, 0xad, 0x20, 0x8e, 0x6a, 0x07, 0x1b, 0xf8, 0xb3, 0xb6, 0x6d, 0x62, 0x9b, 0xde, 0x18,
};

extern const uint32_t sTestCert_Root02_Chip_Len = sizeof(sTestCert_Root02_Chip);

extern const uint8_t sTestCert_Root02_DER[] = {
    0x30, 0x82, 0x01, 0xe1, 0x30, 0x82, 0x01, 0x87, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x40, 0x4a, 0x7a, 0x6d, 0xc7, 0x35,
    0xd7, 0xfb, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0x1a, 0x65, 0x60, 0x29, 0x37, 0x2d, 0xdc, 0x3f, 0xfe, 0xe8, 0xf1, 0x8b, 0xa4, 0x09, 0x27, 0xf1, 0x68, 0x1a,
    0xe1, 0x5b, 0x1c, 0xce, 0xae, 0x12, 0xfe, 0x39, 0xd1, 0x0e, 0xa7, 0xdb, 0xb4, 0x4e, 0x5a, 0x70, 0xb6, 0x01, 0x16, 0x7e, 0xa9,
    0x04, 0x74, 0x48, 0x7b, 0x67, 0xbc, 0x71, 0xcd, 0xcd, 0x7f, 0x4a, 0x11, 0xa3, 0x99, 0xcf, 0xb6, 0x58, 0x63, 0xbc, 0x93, 0x35,
    0x45, 0x34, 0x6f, 0x28, 0xa3, 0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30,
    0x03, 0x01, 0x01, 0xff, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x82, 0x35, 0x49, 0x3b, 0x68, 0x2b, 0x21, 0x71, 0xf5, 0xbc, 0x27,
    0x22, 0x7a, 0x6b, 0x4d, 0x0e, 0x06, 0x22, 0x63, 0xbf, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0x82, 0x35, 0x49, 0x3b, 0x68, 0x2b, 0x21, 0x71, 0xf5, 0xbc, 0x27, 0x22, 0x7a, 0x6b, 0x4d, 0x0e, 0x06, 0x22, 0x63, 0xbf,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x68, 0x7a,
    0x25, 0x39, 0x50, 0x82, 0xd4, 0x88, 0x78, 0x45, 0xf2, 0xb6, 0x48, 0x33, 0xef, 0x51, 0x21, 0x67, 0xd3, 0x51, 0xb7, 0xd7, 0xda,
    0xba, 0x21, 0x46, 0xc7, 0xdc, 0x47, 0x1d, 0x48, 0xc9, 0x02, 0x21, 0x00, 0xe1, 0x5a, 0x4d, 0x91, 0xc9, 0x98, 0x53, 0x6c, 0x4b,
    0x84, 0x98, 0x34, 0xb1, 0xcb, 0x75, 0x6c, 0x25, 0x04, 0x4c, 0xad, 0x20, 0x8e, 0x6a, 0x07, 0x1b, 0xf8, 0xb3, 0xb6, 0x6d, 0x62,
    0x9b, 0xde,
};

extern const uint32_t sTestCert_Root02_DER_Len = sizeof(sTestCert_Root02_DER);

extern const uint8_t sTestCert_Root02_PublicKey[] = {
    0x04, 0x1a, 0x65, 0x60, 0x29, 0x37, 0x2d, 0xdc, 0x3f, 0xfe, 0xe8, 0xf1, 0x8b, 0xa4, 0x09, 0x27, 0xf1,
    0x68, 0x1a, 0xe1, 0x5b, 0x1c, 0xce, 0xae, 0x12, 0xfe, 0x39, 0xd1, 0x0e, 0xa7, 0xdb, 0xb4, 0x4e, 0x5a,
    0x70, 0xb6, 0x01, 0x16, 0x7e, 0xa9, 0x04, 0x74, 0x48, 0x7b, 0x67, 0xbc, 0x71, 0xcd, 0xcd, 0x7f, 0x4a,
    0x11, 0xa3, 0x99, 0xcf, 0xb6, 0x58, 0x63, 0xbc, 0x93, 0x35, 0x45, 0x34, 0x6f, 0x28,
};

extern const uint8_t sTestCert_Root02_PublicKey_Len = sizeof(sTestCert_Root02_PublicKey);

extern const uint8_t sTestCert_Root02_PrivateKey[] = {
    0xbb, 0xce, 0x1e, 0x5c, 0x07, 0xd0, 0x84, 0xe0, 0xbd, 0x5d, 0xc3, 0x4e, 0xe6, 0xe8, 0x71, 0x86,
    0x5a, 0x6b, 0x45, 0x58, 0xad, 0xaf, 0xcd, 0x3c, 0x8b, 0x9a, 0xda, 0x3e, 0xfc, 0x18, 0xbc, 0x53,
};

extern const uint8_t sTestCert_Root02_PrivateKey_Len = sizeof(sTestCert_Root02_PrivateKey);

extern const uint8_t sTestCert_Root02_SubjectKeyId[] = {
    0x82, 0x35, 0x49, 0x3B, 0x68, 0x2B, 0x21, 0x71, 0xF5, 0xBC, 0x27, 0x22, 0x7A, 0x6B, 0x4D, 0x0E, 0x06, 0x22, 0x63, 0xBF,
};

extern const uint8_t sTestCert_Root02_SubjectKeyId_Len = sizeof(sTestCert_Root02_SubjectKeyId);

/**************  Test ICA01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 2201750971301712155 (0x1e8e30d7d04f511b)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.3 = CACACACA00000003
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:9c:88:0a:1c:79:7e:98:8b:49:c3:b9:2e:ee:80:
                    d5:dc:84:24:7c:9f:6b:4e:44:d0:e8:48:3f:7c:5f:
                    2c:31:03:2f:1f:a4:fe:62:60:a6:d1:9b:12:2d:fa:
                    44:0d:c9:b0:6c:3a:33:43:da:a3:f6:46:b0:cb:7a:
                    b6:7b:2e:89:c7
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                48:2B:C7:1F:EB:37:12:F6:FC:4D:F2:30:FB:AD:CB:C1:79:4E:3C:90
            X509v3 Authority Key Identifier:
                keyid:84:9F:D2:4A:AF:59:09:40:73:E1:FA:C6:8E:AD:5F:52:0E:BE:9F:1D

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:03:46:da:65:06:39:24:ad:87:92:0d:23:0f:8d:
         bb:81:55:4d:f2:a6:13:aa:40:1b:af:56:91:cf:a7:c5:23:4f:
         02:20:17:70:00:65:90:17:44:96:05:73:98:b7:b0:88:d7:ed:
         c5:2f:f2:6a:98:3c:8b:de:e9:6f:3d:fe:b6:e4:68:0b

-----BEGIN CERTIFICATE-----
MIIBnDCCAUOgAwIBAgIIHo4w19BPURswCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBAwwQQ0FDQUNBQ0EwMDAwMDAwMzBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABJyIChx5fpiLScO5Lu6A1dyEJHyfa05E0OhI
P3xfLDEDLx+k/mJgptGbEi36RA3JsGw6M0Pao/ZGsMt6tnsuicejYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBRIK8cf6zcS9vxN
8jD7rcvBeU48kDAfBgNVHSMEGDAWgBSEn9JKr1kJQHPh+saOrV9SDr6fHTAKBggq
hkjOPQQDAgNHADBEAiADRtplBjkkrYeSDSMPjbuBVU3yphOqQBuvVpHPp8UjTwIg
F3AAZZAXRJYFc5i3sIjX7cUv8mqYPIve6W89/rbkaAs=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIAwY6Su9oIyxeW1BBmi6Rm0uA9eVi56ZAprnXCPsyvppoAoGCCqGSM49
AwEHoUQDQgAEnIgKHHl+mItJw7ku7oDV3IQkfJ9rTkTQ6Eg/fF8sMQMvH6T+YmCm
0ZsSLfpEDcmwbDozQ9qj9kawy3q2ey6Jxw==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_ICA01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x1e, 0x8e, 0x30, 0xd7, 0xd0, 0x4f, 0x51, 0x1b, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27,
    0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x13, 0x03, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24,
    0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x9c, 0x88, 0x0a, 0x1c, 0x79, 0x7e, 0x98, 0x8b, 0x49, 0xc3, 0xb9,
    0x2e, 0xee, 0x80, 0xd5, 0xdc, 0x84, 0x24, 0x7c, 0x9f, 0x6b, 0x4e, 0x44, 0xd0, 0xe8, 0x48, 0x3f, 0x7c, 0x5f, 0x2c, 0x31,
    0x03, 0x2f, 0x1f, 0xa4, 0xfe, 0x62, 0x60, 0xa6, 0xd1, 0x9b, 0x12, 0x2d, 0xfa, 0x44, 0x0d, 0xc9, 0xb0, 0x6c, 0x3a, 0x33,
    0x43, 0xda, 0xa3, 0xf6, 0x46, 0xb0, 0xcb, 0x7a, 0xb6, 0x7b, 0x2e, 0x89, 0xc7, 0x37, 0x0a, 0x35, 0x01, 0x29, 0x01, 0x18,
    0x24, 0x02, 0x60, 0x30, 0x04, 0x14, 0x48, 0x2b, 0xc7, 0x1f, 0xeb, 0x37, 0x12, 0xf6, 0xfc, 0x4d, 0xf2, 0x30, 0xfb, 0xad,
    0xcb, 0xc1, 0x79, 0x4e, 0x3c, 0x90, 0x30, 0x05, 0x14, 0x84, 0x9f, 0xd2, 0x4a, 0xaf, 0x59, 0x09, 0x40, 0x73, 0xe1, 0xfa,
    0xc6, 0x8e, 0xad, 0x5f, 0x52, 0x0e, 0xbe, 0x9f, 0x1d, 0x18, 0x30, 0x0b, 0x40, 0x03, 0x46, 0xda, 0x65, 0x06, 0x39, 0x24,
    0xad, 0x87, 0x92, 0x0d, 0x23, 0x0f, 0x8d, 0xbb, 0x81, 0x55, 0x4d, 0xf2, 0xa6, 0x13, 0xaa, 0x40, 0x1b, 0xaf, 0x56, 0x91,
    0xcf, 0xa7, 0xc5, 0x23, 0x4f, 0x17, 0x70, 0x00, 0x65, 0x90, 0x17, 0x44, 0x96, 0x05, 0x73, 0x98, 0xb7, 0xb0, 0x88, 0xd7,
    0xed, 0xc5, 0x2f, 0xf2, 0x6a, 0x98, 0x3c, 0x8b, 0xde, 0xe9, 0x6f, 0x3d, 0xfe, 0xb6, 0xe4, 0x68, 0x0b, 0x18,
};

extern const uint32_t sTestCert_ICA01_Chip_Len = sizeof(sTestCert_ICA01_Chip);

extern const uint8_t sTestCert_ICA01_DER[] = {
    0x30, 0x82, 0x01, 0x9c, 0x30, 0x82, 0x01, 0x43, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x1e, 0x8e, 0x30, 0xd7, 0xd0, 0x4f,
    0x51, 0x1b, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x9c, 0x88,
    0x0a, 0x1c, 0x79, 0x7e, 0x98, 0x8b, 0x49, 0xc3, 0xb9, 0x2e, 0xee, 0x80, 0xd5, 0xdc, 0x84, 0x24, 0x7c, 0x9f, 0x6b, 0x4e, 0x44,
    0xd0, 0xe8, 0x48, 0x3f, 0x7c, 0x5f, 0x2c, 0x31, 0x03, 0x2f, 0x1f, 0xa4, 0xfe, 0x62, 0x60, 0xa6, 0xd1, 0x9b, 0x12, 0x2d, 0xfa,
    0x44, 0x0d, 0xc9, 0xb0, 0x6c, 0x3a, 0x33, 0x43, 0xda, 0xa3, 0xf6, 0x46, 0xb0, 0xcb, 0x7a, 0xb6, 0x7b, 0x2e, 0x89, 0xc7, 0xa3,
    0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x16, 0x04, 0x14, 0x48, 0x2b, 0xc7, 0x1f, 0xeb, 0x37, 0x12, 0xf6, 0xfc, 0x4d, 0xf2, 0x30, 0xfb, 0xad, 0xcb, 0xc1,
    0x79, 0x4e, 0x3c, 0x90, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x84, 0x9f, 0xd2, 0x4a,
    0xaf, 0x59, 0x09, 0x40, 0x73, 0xe1, 0xfa, 0xc6, 0x8e, 0xad, 0x5f, 0x52, 0x0e, 0xbe, 0x9f, 0x1d, 0x30, 0x0a, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x03, 0x46, 0xda, 0x65, 0x06, 0x39, 0x24,
    0xad, 0x87, 0x92, 0x0d, 0x23, 0x0f, 0x8d, 0xbb, 0x81, 0x55, 0x4d, 0xf2, 0xa6, 0x13, 0xaa, 0x40, 0x1b, 0xaf, 0x56, 0x91, 0xcf,
    0xa7, 0xc5, 0x23, 0x4f, 0x02, 0x20, 0x17, 0x70, 0x00, 0x65, 0x90, 0x17, 0x44, 0x96, 0x05, 0x73, 0x98, 0xb7, 0xb0, 0x88, 0xd7,
    0xed, 0xc5, 0x2f, 0xf2, 0x6a, 0x98, 0x3c, 0x8b, 0xde, 0xe9, 0x6f, 0x3d, 0xfe, 0xb6, 0xe4, 0x68, 0x0b,
};

extern const uint32_t sTestCert_ICA01_DER_Len = sizeof(sTestCert_ICA01_DER);

extern const uint8_t sTestCert_ICA01_PublicKey[] = {
    0x04, 0x9c, 0x88, 0x0a, 0x1c, 0x79, 0x7e, 0x98, 0x8b, 0x49, 0xc3, 0xb9, 0x2e, 0xee, 0x80, 0xd5, 0xdc,
    0x84, 0x24, 0x7c, 0x9f, 0x6b, 0x4e, 0x44, 0xd0, 0xe8, 0x48, 0x3f, 0x7c, 0x5f, 0x2c, 0x31, 0x03, 0x2f,
    0x1f, 0xa4, 0xfe, 0x62, 0x60, 0xa6, 0xd1, 0x9b, 0x12, 0x2d, 0xfa, 0x44, 0x0d, 0xc9, 0xb0, 0x6c, 0x3a,
    0x33, 0x43, 0xda, 0xa3, 0xf6, 0x46, 0xb0, 0xcb, 0x7a, 0xb6, 0x7b, 0x2e, 0x89, 0xc7,
};

extern const uint8_t sTestCert_ICA01_PublicKey_Len = sizeof(sTestCert_ICA01_PublicKey);

extern const uint8_t sTestCert_ICA01_PrivateKey[] = {
    0x0c, 0x18, 0xe9, 0x2b, 0xbd, 0xa0, 0x8c, 0xb1, 0x79, 0x6d, 0x41, 0x06, 0x68, 0xba, 0x46, 0x6d,
    0x2e, 0x03, 0xd7, 0x95, 0x8b, 0x9e, 0x99, 0x02, 0x9a, 0xe7, 0x5c, 0x23, 0xec, 0xca, 0xfa, 0x69,
};

extern const uint8_t sTestCert_ICA01_PrivateKey_Len = sizeof(sTestCert_ICA01_PrivateKey);

extern const uint8_t sTestCert_ICA01_SubjectKeyId[] = {
    0x48, 0x2B, 0xC7, 0x1F, 0xEB, 0x37, 0x12, 0xF6, 0xFC, 0x4D, 0xF2, 0x30, 0xFB, 0xAD, 0xCB, 0xC1, 0x79, 0x4E, 0x3C, 0x90,
};

extern const uint8_t sTestCert_ICA01_SubjectKeyId_Len = sizeof(sTestCert_ICA01_SubjectKeyId);

/**************  Test ICA02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 8616619467284667711 (0x779461c0b037dd3f)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:8f:0e:47:97:63:11:3b:a9:2d:7f:4c:e9:42:44:
                    e1:72:1b:49:57:19:2a:d5:d5:eb:9e:b5:be:f0:30:
                    cc:9c:0d:56:5b:bd:f1:c7:13:c6:41:6f:87:47:db:
                    17:dc:00:6e:e1:f1:dd:70:6e:00:53:dd:41:95:e8:
                    cf:06:07:85:51
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                AA:80:D4:9F:DC:0E:8C:7F:81:E2:FF:07:56:2E:B1:C3:AC:F8:6E:F9
            X509v3 Authority Key Identifier:
                keyid:82:35:49:3B:68:2B:21:71:F5:BC:27:22:7A:6B:4D:0E:06:22:63:BF

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:3e:fe:26:d0:0a:fc:b7:50:47:0b:db:a4:18:94:
         77:63:ad:b5:4d:58:ff:50:8b:29:0c:30:59:d6:d3:02:fb:4d:
         02:20:35:64:53:d0:64:9c:1e:28:7f:60:59:ba:8b:98:d3:5d:
         14:3d:08:5f:f6:94:a5:a5:8d:1e:52:61:5e:a6:de:ff

-----BEGIN CERTIFICATE-----
MIIB4DCCAYegAwIBAgIId5RhwLA33T8wCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDIxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEjw5Hl2MR
O6ktf0zpQkThchtJVxkq1dXrnrW+8DDMnA1WW73xxxPGQW+HR9sX3ABu4fHdcG4A
U91BlejPBgeFUaNjMGEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw
HQYDVR0OBBYEFKqA1J/cDox/geL/B1YuscOs+G75MB8GA1UdIwQYMBaAFII1STto
KyFx9bwnInprTQ4GImO/MAoGCCqGSM49BAMCA0cAMEQCID7+JtAK/LdQRwvbpBiU
d2OttU1Y/1CLKQwwWdbTAvtNAiA1ZFPQZJweKH9gWbqLmNNdFD0IX/aUpaWNHlJh
Xqbe/w==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIPjkwLPvmDitdol8sA2hhGysLqceFgMhno7qHJq5YSKkoAoGCCqGSM49
AwEHoUQDQgAEjw5Hl2MRO6ktf0zpQkThchtJVxkq1dXrnrW+8DDMnA1WW73xxxPG
QW+HR9sX3ABu4fHdcG4AU91BlejPBgeFUQ==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_ICA02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x77, 0x94, 0x61, 0xc0, 0xb0, 0x37, 0xdd, 0x3f, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x14, 0x02, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xb0, 0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x13,
    0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24,
    0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x8f, 0x0e, 0x47, 0x97, 0x63, 0x11, 0x3b, 0xa9, 0x2d, 0x7f, 0x4c,
    0xe9, 0x42, 0x44, 0xe1, 0x72, 0x1b, 0x49, 0x57, 0x19, 0x2a, 0xd5, 0xd5, 0xeb, 0x9e, 0xb5, 0xbe, 0xf0, 0x30, 0xcc, 0x9c,
    0x0d, 0x56, 0x5b, 0xbd, 0xf1, 0xc7, 0x13, 0xc6, 0x41, 0x6f, 0x87, 0x47, 0xdb, 0x17, 0xdc, 0x00, 0x6e, 0xe1, 0xf1, 0xdd,
    0x70, 0x6e, 0x00, 0x53, 0xdd, 0x41, 0x95, 0xe8, 0xcf, 0x06, 0x07, 0x85, 0x51, 0x37, 0x0a, 0x35, 0x01, 0x29, 0x01, 0x18,
    0x24, 0x02, 0x60, 0x30, 0x04, 0x14, 0xaa, 0x80, 0xd4, 0x9f, 0xdc, 0x0e, 0x8c, 0x7f, 0x81, 0xe2, 0xff, 0x07, 0x56, 0x2e,
    0xb1, 0xc3, 0xac, 0xf8, 0x6e, 0xf9, 0x30, 0x05, 0x14, 0x82, 0x35, 0x49, 0x3b, 0x68, 0x2b, 0x21, 0x71, 0xf5, 0xbc, 0x27,
    0x22, 0x7a, 0x6b, 0x4d, 0x0e, 0x06, 0x22, 0x63, 0xbf, 0x18, 0x30, 0x0b, 0x40, 0x3e, 0xfe, 0x26, 0xd0, 0x0a, 0xfc, 0xb7,
    0x50, 0x47, 0x0b, 0xdb, 0xa4, 0x18, 0x94, 0x77, 0x63, 0xad, 0xb5, 0x4d, 0x58, 0xff, 0x50, 0x8b, 0x29, 0x0c, 0x30, 0x59,
    0xd6, 0xd3, 0x02, 0xfb, 0x4d, 0x35, 0x64, 0x53, 0xd0, 0x64, 0x9c, 0x1e, 0x28, 0x7f, 0x60, 0x59, 0xba, 0x8b, 0x98, 0xd3,
    0x5d, 0x14, 0x3d, 0x08, 0x5f, 0xf6, 0x94, 0xa5, 0xa5, 0x8d, 0x1e, 0x52, 0x61, 0x5e, 0xa6, 0xde, 0xff, 0x18,
};

extern const uint32_t sTestCert_ICA02_Chip_Len = sizeof(sTestCert_ICA02_Chip);

extern const uint8_t sTestCert_ICA02_DER[] = {
    0x30, 0x82, 0x01, 0xe0, 0x30, 0x82, 0x01, 0x87, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x77, 0x94, 0x61, 0xc0, 0xb0, 0x37,
    0xdd, 0x3f, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0x8f, 0x0e, 0x47, 0x97, 0x63, 0x11, 0x3b, 0xa9, 0x2d, 0x7f, 0x4c, 0xe9, 0x42, 0x44, 0xe1, 0x72, 0x1b, 0x49,
    0x57, 0x19, 0x2a, 0xd5, 0xd5, 0xeb, 0x9e, 0xb5, 0xbe, 0xf0, 0x30, 0xcc, 0x9c, 0x0d, 0x56, 0x5b, 0xbd, 0xf1, 0xc7, 0x13, 0xc6,
    0x41, 0x6f, 0x87, 0x47, 0xdb, 0x17, 0xdc, 0x00, 0x6e, 0xe1, 0xf1, 0xdd, 0x70, 0x6e, 0x00, 0x53, 0xdd, 0x41, 0x95, 0xe8, 0xcf,
    0x06, 0x07, 0x85, 0x51, 0xa3, 0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30,
    0x03, 0x01, 0x01, 0xff, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xaa, 0x80, 0xd4, 0x9f, 0xdc, 0x0e, 0x8c, 0x7f, 0x81, 0xe2, 0xff,
    0x07, 0x56, 0x2e, 0xb1, 0xc3, 0xac, 0xf8, 0x6e, 0xf9, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0x82, 0x35, 0x49, 0x3b, 0x68, 0x2b, 0x21, 0x71, 0xf5, 0xbc, 0x27, 0x22, 0x7a, 0x6b, 0x4d, 0x0e, 0x06, 0x22, 0x63, 0xbf,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x3e, 0xfe,
    0x26, 0xd0, 0x0a, 0xfc, 0xb7, 0x50, 0x47, 0x0b, 0xdb, 0xa4, 0x18, 0x94, 0x77, 0x63, 0xad, 0xb5, 0x4d, 0x58, 0xff, 0x50, 0x8b,
    0x29, 0x0c, 0x30, 0x59, 0xd6, 0xd3, 0x02, 0xfb, 0x4d, 0x02, 0x20, 0x35, 0x64, 0x53, 0xd0, 0x64, 0x9c, 0x1e, 0x28, 0x7f, 0x60,
    0x59, 0xba, 0x8b, 0x98, 0xd3, 0x5d, 0x14, 0x3d, 0x08, 0x5f, 0xf6, 0x94, 0xa5, 0xa5, 0x8d, 0x1e, 0x52, 0x61, 0x5e, 0xa6, 0xde,
    0xff,
};

extern const uint32_t sTestCert_ICA02_DER_Len = sizeof(sTestCert_ICA02_DER);

extern const uint8_t sTestCert_ICA02_PublicKey[] = {
    0x04, 0x8f, 0x0e, 0x47, 0x97, 0x63, 0x11, 0x3b, 0xa9, 0x2d, 0x7f, 0x4c, 0xe9, 0x42, 0x44, 0xe1, 0x72,
    0x1b, 0x49, 0x57, 0x19, 0x2a, 0xd5, 0xd5, 0xeb, 0x9e, 0xb5, 0xbe, 0xf0, 0x30, 0xcc, 0x9c, 0x0d, 0x56,
    0x5b, 0xbd, 0xf1, 0xc7, 0x13, 0xc6, 0x41, 0x6f, 0x87, 0x47, 0xdb, 0x17, 0xdc, 0x00, 0x6e, 0xe1, 0xf1,
    0xdd, 0x70, 0x6e, 0x00, 0x53, 0xdd, 0x41, 0x95, 0xe8, 0xcf, 0x06, 0x07, 0x85, 0x51,
};

extern const uint8_t sTestCert_ICA02_PublicKey_Len = sizeof(sTestCert_ICA02_PublicKey);

extern const uint8_t sTestCert_ICA02_PrivateKey[] = {
    0xf8, 0xe4, 0xc0, 0xb3, 0xef, 0x98, 0x38, 0xad, 0x76, 0x89, 0x7c, 0xb0, 0x0d, 0xa1, 0x84, 0x6c,
    0xac, 0x2e, 0xa7, 0x1e, 0x16, 0x03, 0x21, 0x9e, 0x8e, 0xea, 0x1c, 0x9a, 0xb9, 0x61, 0x22, 0xa4,
};

extern const uint8_t sTestCert_ICA02_PrivateKey_Len = sizeof(sTestCert_ICA02_PrivateKey);

extern const uint8_t sTestCert_ICA02_SubjectKeyId[] = {
    0xAA, 0x80, 0xD4, 0x9F, 0xDC, 0x0E, 0x8C, 0x7F, 0x81, 0xE2, 0xFF, 0x07, 0x56, 0x2E, 0xB1, 0xC3, 0xAC, 0xF8, 0x6E, 0xF9,
};

extern const uint8_t sTestCert_ICA02_SubjectKeyId_Len = sizeof(sTestCert_ICA02_SubjectKeyId);

/**************  Test ICA01_1 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 2048111489768646525 (0x1c6c5a8c700e677d)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.3 = CACACACA00000005
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:fc:9f:8b:d5:ab:48:87:f0:53:da:58:0a:74:6f:
                    99:7d:aa:62:f8:07:3b:2e:1f:f8:b2:2f:da:23:a2:
                    f0:c7:f6:52:c9:63:2d:c4:2b:12:b4:9f:bd:c1:2c:
                    a8:fb:a2:64:8c:aa:76:0e:08:1a:a6:0b:97:d5:82:
                    ef:98:03:ce:b2
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                8E:DE:9D:60:DC:75:39:31:4A:20:AB:B2:09:8A:15:1F:A2:FA:9C:E8
            X509v3 Authority Key Identifier:
                keyid:84:9F:D2:4A:AF:59:09:40:73:E1:FA:C6:8E:AD:5F:52:0E:BE:9F:1D

    Signature Algorithm: ecdsa-with-SHA256
         30:46:02:21:00:82:8c:b2:f8:67:60:4b:c3:85:27:48:27:9b:
         4a:5f:7a:ca:2c:17:94:fd:e6:75:b1:cc:69:6c:bb:fb:79:79:
         e9:02:21:00:d6:54:e0:fa:12:89:58:c2:a9:0f:67:0a:db:77:
         74:e7:21:da:50:9f:a1:1e:c5:09:8b:23:db:37:8d:00:ea:1b

-----BEGIN CERTIFICATE-----
MIIBnjCCAUOgAwIBAgIIHGxajHAOZ30wCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBAwwQQ0FDQUNBQ0EwMDAwMDAwNTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABPyfi9WrSIfwU9pYCnRvmX2qYvgHOy4f+LIv
2iOi8Mf2UsljLcQrErSfvcEsqPuiZIyqdg4IGqYLl9WC75gDzrKjYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBSO3p1g3HU5MUog
q7IJihUfovqc6DAfBgNVHSMEGDAWgBSEn9JKr1kJQHPh+saOrV9SDr6fHTAKBggq
hkjOPQQDAgNJADBGAiEAgoyy+GdgS8OFJ0gnm0pfesosF5T95nWxzGlsu/t5eekC
IQDWVOD6EolYwqkPZwrbd3TnIdpQn6EexQmLI9s3jQDqGw==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIJq4oC9/kboxrlstReyIdDsuHgi8T+wQ00FCgKY+FDSZoAoGCCqGSM49
AwEHoUQDQgAE/J+L1atIh/BT2lgKdG+Zfapi+Ac7Lh/4si/aI6Lwx/ZSyWMtxCsS
tJ+9wSyo+6JkjKp2DggapguX1YLvmAPOsg==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_ICA01_1_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x1c, 0x6c, 0x5a, 0x8c, 0x70, 0x0e, 0x67, 0x7d, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27,
    0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x13, 0x05, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24,
    0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0xfc, 0x9f, 0x8b, 0xd5, 0xab, 0x48, 0x87, 0xf0, 0x53, 0xda, 0x58,
    0x0a, 0x74, 0x6f, 0x99, 0x7d, 0xaa, 0x62, 0xf8, 0x07, 0x3b, 0x2e, 0x1f, 0xf8, 0xb2, 0x2f, 0xda, 0x23, 0xa2, 0xf0, 0xc7,
    0xf6, 0x52, 0xc9, 0x63, 0x2d, 0xc4, 0x2b, 0x12, 0xb4, 0x9f, 0xbd, 0xc1, 0x2c, 0xa8, 0xfb, 0xa2, 0x64, 0x8c, 0xaa, 0x76,
    0x0e, 0x08, 0x1a, 0xa6, 0x0b, 0x97, 0xd5, 0x82, 0xef, 0x98, 0x03, 0xce, 0xb2, 0x37, 0x0a, 0x35, 0x01, 0x29, 0x01, 0x18,
    0x24, 0x02, 0x60, 0x30, 0x04, 0x14, 0x8e, 0xde, 0x9d, 0x60, 0xdc, 0x75, 0x39, 0x31, 0x4a, 0x20, 0xab, 0xb2, 0x09, 0x8a,
    0x15, 0x1f, 0xa2, 0xfa, 0x9c, 0xe8, 0x30, 0x05, 0x14, 0x84, 0x9f, 0xd2, 0x4a, 0xaf, 0x59, 0x09, 0x40, 0x73, 0xe1, 0xfa,
    0xc6, 0x8e, 0xad, 0x5f, 0x52, 0x0e, 0xbe, 0x9f, 0x1d, 0x18, 0x30, 0x0b, 0x40, 0x82, 0x8c, 0xb2, 0xf8, 0x67, 0x60, 0x4b,
    0xc3, 0x85, 0x27, 0x48, 0x27, 0x9b, 0x4a, 0x5f, 0x7a, 0xca, 0x2c, 0x17, 0x94, 0xfd, 0xe6, 0x75, 0xb1, 0xcc, 0x69, 0x6c,
    0xbb, 0xfb, 0x79, 0x79, 0xe9, 0xd6, 0x54, 0xe0, 0xfa, 0x12, 0x89, 0x58, 0xc2, 0xa9, 0x0f, 0x67, 0x0a, 0xdb, 0x77, 0x74,
    0xe7, 0x21, 0xda, 0x50, 0x9f, 0xa1, 0x1e, 0xc5, 0x09, 0x8b, 0x23, 0xdb, 0x37, 0x8d, 0x00, 0xea, 0x1b, 0x18,
};

extern const uint32_t sTestCert_ICA01_1_Chip_Len = sizeof(sTestCert_ICA01_1_Chip);

extern const uint8_t sTestCert_ICA01_1_DER[] = {
    0x30, 0x82, 0x01, 0x9e, 0x30, 0x82, 0x01, 0x43, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x1c, 0x6c, 0x5a, 0x8c, 0x70, 0x0e,
    0x67, 0x7d, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xfc, 0x9f,
    0x8b, 0xd5, 0xab, 0x48, 0x87, 0xf0, 0x53, 0xda, 0x58, 0x0a, 0x74, 0x6f, 0x99, 0x7d, 0xaa, 0x62, 0xf8, 0x07, 0x3b, 0x2e, 0x1f,
    0xf8, 0xb2, 0x2f, 0xda, 0x23, 0xa2, 0xf0, 0xc7, 0xf6, 0x52, 0xc9, 0x63, 0x2d, 0xc4, 0x2b, 0x12, 0xb4, 0x9f, 0xbd, 0xc1, 0x2c,
    0xa8, 0xfb, 0xa2, 0x64, 0x8c, 0xaa, 0x76, 0x0e, 0x08, 0x1a, 0xa6, 0x0b, 0x97, 0xd5, 0x82, 0xef, 0x98, 0x03, 0xce, 0xb2, 0xa3,
    0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x16, 0x04, 0x14, 0x8e, 0xde, 0x9d, 0x60, 0xdc, 0x75, 0x39, 0x31, 0x4a, 0x20, 0xab, 0xb2, 0x09, 0x8a, 0x15, 0x1f,
    0xa2, 0xfa, 0x9c, 0xe8, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x84, 0x9f, 0xd2, 0x4a,
    0xaf, 0x59, 0x09, 0x40, 0x73, 0xe1, 0xfa, 0xc6, 0x8e, 0xad, 0x5f, 0x52, 0x0e, 0xbe, 0x9f, 0x1d, 0x30, 0x0a, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0x82, 0x8c, 0xb2, 0xf8, 0x67, 0x60,
    0x4b, 0xc3, 0x85, 0x27, 0x48, 0x27, 0x9b, 0x4a, 0x5f, 0x7a, 0xca, 0x2c, 0x17, 0x94, 0xfd, 0xe6, 0x75, 0xb1, 0xcc, 0x69, 0x6c,
    0xbb, 0xfb, 0x79, 0x79, 0xe9, 0x02, 0x21, 0x00, 0xd6, 0x54, 0xe0, 0xfa, 0x12, 0x89, 0x58, 0xc2, 0xa9, 0x0f, 0x67, 0x0a, 0xdb,
    0x77, 0x74, 0xe7, 0x21, 0xda, 0x50, 0x9f, 0xa1, 0x1e, 0xc5, 0x09, 0x8b, 0x23, 0xdb, 0x37, 0x8d, 0x00, 0xea, 0x1b,
};

extern const uint32_t sTestCert_ICA01_1_DER_Len = sizeof(sTestCert_ICA01_1_DER);

extern const uint8_t sTestCert_ICA01_1_PublicKey[] = {
    0x04, 0xfc, 0x9f, 0x8b, 0xd5, 0xab, 0x48, 0x87, 0xf0, 0x53, 0xda, 0x58, 0x0a, 0x74, 0x6f, 0x99, 0x7d,
    0xaa, 0x62, 0xf8, 0x07, 0x3b, 0x2e, 0x1f, 0xf8, 0xb2, 0x2f, 0xda, 0x23, 0xa2, 0xf0, 0xc7, 0xf6, 0x52,
    0xc9, 0x63, 0x2d, 0xc4, 0x2b, 0x12, 0xb4, 0x9f, 0xbd, 0xc1, 0x2c, 0xa8, 0xfb, 0xa2, 0x64, 0x8c, 0xaa,
    0x76, 0x0e, 0x08, 0x1a, 0xa6, 0x0b, 0x97, 0xd5, 0x82, 0xef, 0x98, 0x03, 0xce, 0xb2,
};

extern const uint8_t sTestCert_ICA01_1_PublicKey_Len = sizeof(sTestCert_ICA01_1_PublicKey);

extern const uint8_t sTestCert_ICA01_1_PrivateKey[] = {
    0x9a, 0xb8, 0xa0, 0x2f, 0x7f, 0x91, 0xba, 0x31, 0xae, 0x5b, 0x2d, 0x45, 0xec, 0x88, 0x74, 0x3b,
    0x2e, 0x1e, 0x08, 0xbc, 0x4f, 0xec, 0x10, 0xd3, 0x41, 0x42, 0x80, 0xa6, 0x3e, 0x14, 0x34, 0x99,
};

extern const uint8_t sTestCert_ICA01_1_PrivateKey_Len = sizeof(sTestCert_ICA01_1_PrivateKey);

extern const uint8_t sTestCert_ICA01_1_SubjectKeyId[] = {
    0x8E, 0xDE, 0x9D, 0x60, 0xDC, 0x75, 0x39, 0x31, 0x4A, 0x20, 0xAB, 0xB2, 0x09, 0x8A, 0x15, 0x1F, 0xA2, 0xFA, 0x9C, 0xE8,
};

extern const uint8_t sTestCert_ICA01_1_SubjectKeyId_Len = sizeof(sTestCert_ICA01_1_SubjectKeyId);

/**************  Test FWSign01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 2914245623464852303 (0x28717af446dbfb4f)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000005
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.2 = FFFFFFFF00000001, CN = FW SIGN CERT 01
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:50:72:ae:89:60:cc:bb:a3:3c:5e:fc:07:ad:66:
                    fd:8f:b3:cc:00:39:63:ee:6e:10:16:90:66:57:d2:
                    11:ba:f2:b7:4a:78:09:0f:f6:94:5e:2f:a4:17:35:
                    6e:8d:86:70:12:ef:f2:68:10:87:3c:29:5f:8a:cf:
                    c6:f1:96:b5:9d
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature
            X509v3 Extended Key Usage: critical
                Code Signing
            X509v3 Subject Key Identifier:
                A0:93:C1:E3:B4:9C:26:91:F0:0B:EE:05:7C:A3:BA:6E:89:5B:5C:D1
            X509v3 Authority Key Identifier:
                keyid:8E:DE:9D:60:DC:75:39:31:4A:20:AB:B2:09:8A:15:1F:A2:FA:9C:E8

    Signature Algorithm: ecdsa-with-SHA256
         30:46:02:21:00:8e:8d:bd:04:70:bb:de:66:6c:aa:8f:df:8e:
         4f:43:93:01:88:ca:e8:8d:4c:75:76:a8:36:66:96:21:8e:a3:
         f0:02:21:00:dc:47:95:63:c2:06:2e:eb:14:24:ce:b6:a1:6c:
         d7:d4:6e:5f:a1:45:90:96:6f:47:81:20:d0:7a:69:94:10:00

-----BEGIN CERTIFICATE-----
MIIBzTCCAXKgAwIBAgIIKHF69Ebb+08wCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDUwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjA8MSAwHgYKKwYBBAGConwBAgwQRkZGRkZGRkYwMDAwMDAwMTEYMBYG
A1UEAwwPRlcgU0lHTiBDRVJUIDAxMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE
UHKuiWDMu6M8XvwHrWb9j7PMADlj7m4QFpBmV9IRuvK3SngJD/aUXi+kFzVujYZw
Eu/yaBCHPClfis/G8Za1naN4MHYwDAYDVR0TAQH/BAIwADAOBgNVHQ8BAf8EBAMC
B4AwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwMwHQYDVR0OBBYEFKCTweO0nCaR8Avu
BXyjum6JW1zRMB8GA1UdIwQYMBaAFI7enWDcdTkxSiCrsgmKFR+i+pzoMAoGCCqG
SM49BAMCA0kAMEYCIQCOjb0EcLveZmyqj9+OT0OTAYjK6I1MdXaoNmaWIY6j8AIh
ANxHlWPCBi7rFCTOtqFs19RuX6FFkJZvR4Eg0HpplBAA
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIB3CGEp7d9RgeVs94fTje173gHfIiycJN1M/WZpjTWgkoAoGCCqGSM49
AwEHoUQDQgAEUHKuiWDMu6M8XvwHrWb9j7PMADlj7m4QFpBmV9IRuvK3SngJD/aU
Xi+kFzVujYZwEu/yaBCHPClfis/G8Za1nQ==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_FWSign01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x28, 0x71, 0x7a, 0xf4, 0x46, 0xdb, 0xfb, 0x4f, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x05, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05,
    0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x12, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x2c, 0x01, 0x0f, 0x46, 0x57,
    0x20, 0x53, 0x49, 0x47, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x30, 0x31, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30,
    0x09, 0x41, 0x04, 0x50, 0x72, 0xae, 0x89, 0x60, 0xcc, 0xbb, 0xa3, 0x3c, 0x5e, 0xfc, 0x07, 0xad, 0x66, 0xfd, 0x8f, 0xb3, 0xcc,
    0x00, 0x39, 0x63, 0xee, 0x6e, 0x10, 0x16, 0x90, 0x66, 0x57, 0xd2, 0x11, 0xba, 0xf2, 0xb7, 0x4a, 0x78, 0x09, 0x0f, 0xf6, 0x94,
    0x5e, 0x2f, 0xa4, 0x17, 0x35, 0x6e, 0x8d, 0x86, 0x70, 0x12, 0xef, 0xf2, 0x68, 0x10, 0x87, 0x3c, 0x29, 0x5f, 0x8a, 0xcf, 0xc6,
    0xf1, 0x96, 0xb5, 0x9d, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x01, 0x36, 0x03, 0x04, 0x03, 0x18, 0x30, 0x04,
    0x14, 0xa0, 0x93, 0xc1, 0xe3, 0xb4, 0x9c, 0x26, 0x91, 0xf0, 0x0b, 0xee, 0x05, 0x7c, 0xa3, 0xba, 0x6e, 0x89, 0x5b, 0x5c, 0xd1,
    0x30, 0x05, 0x14, 0x8e, 0xde, 0x9d, 0x60, 0xdc, 0x75, 0x39, 0x31, 0x4a, 0x20, 0xab, 0xb2, 0x09, 0x8a, 0x15, 0x1f, 0xa2, 0xfa,
    0x9c, 0xe8, 0x18, 0x30, 0x0b, 0x40, 0x8e, 0x8d, 0xbd, 0x04, 0x70, 0xbb, 0xde, 0x66, 0x6c, 0xaa, 0x8f, 0xdf, 0x8e, 0x4f, 0x43,
    0x93, 0x01, 0x88, 0xca, 0xe8, 0x8d, 0x4c, 0x75, 0x76, 0xa8, 0x36, 0x66, 0x96, 0x21, 0x8e, 0xa3, 0xf0, 0xdc, 0x47, 0x95, 0x63,
    0xc2, 0x06, 0x2e, 0xeb, 0x14, 0x24, 0xce, 0xb6, 0xa1, 0x6c, 0xd7, 0xd4, 0x6e, 0x5f, 0xa1, 0x45, 0x90, 0x96, 0x6f, 0x47, 0x81,
    0x20, 0xd0, 0x7a, 0x69, 0x94, 0x10, 0x00, 0x18,
};

extern const uint32_t sTestCert_FWSign01_Chip_Len = sizeof(sTestCert_FWSign01_Chip);

extern const uint8_t sTestCert_FWSign01_DER[] = {
    0x30, 0x82, 0x01, 0xcd, 0x30, 0x82, 0x01, 0x72, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x28, 0x71, 0x7a, 0xf4, 0x46, 0xdb,
    0xfb, 0x4f, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x3c,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x46, 0x46, 0x46,
    0x46, 0x46, 0x46, 0x46, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04,
    0x03, 0x0c, 0x0f, 0x46, 0x57, 0x20, 0x53, 0x49, 0x47, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x30, 0x31, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0x50, 0x72, 0xae, 0x89, 0x60, 0xcc, 0xbb, 0xa3, 0x3c, 0x5e, 0xfc, 0x07, 0xad, 0x66, 0xfd, 0x8f, 0xb3, 0xcc,
    0x00, 0x39, 0x63, 0xee, 0x6e, 0x10, 0x16, 0x90, 0x66, 0x57, 0xd2, 0x11, 0xba, 0xf2, 0xb7, 0x4a, 0x78, 0x09, 0x0f, 0xf6, 0x94,
    0x5e, 0x2f, 0xa4, 0x17, 0x35, 0x6e, 0x8d, 0x86, 0x70, 0x12, 0xef, 0xf2, 0x68, 0x10, 0x87, 0x3c, 0x29, 0x5f, 0x8a, 0xcf, 0xc6,
    0xf1, 0x96, 0xb5, 0x9d, 0xa3, 0x78, 0x30, 0x76, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30,
    0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x16, 0x06, 0x03,
    0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x03, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xa0, 0x93, 0xc1, 0xe3, 0xb4, 0x9c, 0x26, 0x91, 0xf0, 0x0b, 0xee,
    0x05, 0x7c, 0xa3, 0xba, 0x6e, 0x89, 0x5b, 0x5c, 0xd1, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0x8e, 0xde, 0x9d, 0x60, 0xdc, 0x75, 0x39, 0x31, 0x4a, 0x20, 0xab, 0xb2, 0x09, 0x8a, 0x15, 0x1f, 0xa2, 0xfa, 0x9c, 0xe8,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0x8e,
    0x8d, 0xbd, 0x04, 0x70, 0xbb, 0xde, 0x66, 0x6c, 0xaa, 0x8f, 0xdf, 0x8e, 0x4f, 0x43, 0x93, 0x01, 0x88, 0xca, 0xe8, 0x8d, 0x4c,
    0x75, 0x76, 0xa8, 0x36, 0x66, 0x96, 0x21, 0x8e, 0xa3, 0xf0, 0x02, 0x21, 0x00, 0xdc, 0x47, 0x95, 0x63, 0xc2, 0x06, 0x2e, 0xeb,
    0x14, 0x24, 0xce, 0xb6, 0xa1, 0x6c, 0xd7, 0xd4, 0x6e, 0x5f, 0xa1, 0x45, 0x90, 0x96, 0x6f, 0x47, 0x81, 0x20, 0xd0, 0x7a, 0x69,
    0x94, 0x10, 0x00,
};

extern const uint32_t sTestCert_FWSign01_DER_Len = sizeof(sTestCert_FWSign01_DER);

extern const uint8_t sTestCert_FWSign01_PublicKey[] = {
    0x04, 0x50, 0x72, 0xae, 0x89, 0x60, 0xcc, 0xbb, 0xa3, 0x3c, 0x5e, 0xfc, 0x07, 0xad, 0x66, 0xfd, 0x8f,
    0xb3, 0xcc, 0x00, 0x39, 0x63, 0xee, 0x6e, 0x10, 0x16, 0x90, 0x66, 0x57, 0xd2, 0x11, 0xba, 0xf2, 0xb7,
    0x4a, 0x78, 0x09, 0x0f, 0xf6, 0x94, 0x5e, 0x2f, 0xa4, 0x17, 0x35, 0x6e, 0x8d, 0x86, 0x70, 0x12, 0xef,
    0xf2, 0x68, 0x10, 0x87, 0x3c, 0x29, 0x5f, 0x8a, 0xcf, 0xc6, 0xf1, 0x96, 0xb5, 0x9d,
};

extern const uint8_t sTestCert_FWSign01_PublicKey_Len = sizeof(sTestCert_FWSign01_PublicKey);

extern const uint8_t sTestCert_FWSign01_PrivateKey[] = {
    0x1d, 0xc2, 0x18, 0x4a, 0x7b, 0x77, 0xd4, 0x60, 0x79, 0x5b, 0x3d, 0xe1, 0xf4, 0xe3, 0x7b, 0x5e,
    0xf7, 0x80, 0x77, 0xc8, 0x8b, 0x27, 0x09, 0x37, 0x53, 0x3f, 0x59, 0x9a, 0x63, 0x4d, 0x68, 0x24,
};

extern const uint8_t sTestCert_FWSign01_PrivateKey_Len = sizeof(sTestCert_FWSign01_PrivateKey);

extern const uint8_t sTestCert_FWSign01_SubjectKeyId[] = {
    0xA0, 0x93, 0xC1, 0xE3, 0xB4, 0x9C, 0x26, 0x91, 0xF0, 0x0B, 0xEE, 0x05, 0x7C, 0xA3, 0xBA, 0x6E, 0x89, 0x5B, 0x5C, 0xD1,
};

extern const uint8_t sTestCert_FWSign01_SubjectKeyId_Len = sizeof(sTestCert_FWSign01_SubjectKeyId);

/**************  Test Node01_01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 28449039959926334 (0x6512404903263e)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000003
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00010001, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:02:97:eb:1a:86:80:df:1c:c3:6a:c3:55:a8:9e:
                    13:60:35:77:9a:fd:62:14:3a:b9:f1:09:e8:58:5d:
                    60:38:f8:e8:4f:90:00:e3:96:b0:c7:22:2d:8f:24:
                    46:59:bf:be:1b:57:96:53:12:48:11:6b:74:b2:d7:
                    a6:82:97:b9:58
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                F5:F8:95:AC:AE:EA:15:50:39:A7:48:55:0F:06:42:24:23:7B:75:04
            X509v3 Authority Key Identifier:
                keyid:48:2B:C7:1F:EB:37:12:F6:FC:4D:F2:30:FB:AD:CB:C1:79:4E:3C:90

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:4d:ba:29:f2:95:86:5e:fe:fb:c0:9f:a6:f9:dd:
         af:35:f4:aa:5a:57:c4:85:54:5c:ed:cd:1d:8a:74:7c:b8:f3:
         02:21:00:d9:c4:f3:d2:eb:19:d9:ca:31:83:55:eb:ec:88:ad:
         07:cc:b7:e3:83:92:4a:ec:f7:29:83:e2:9e:93:b5:eb:15

-----BEGIN CERTIFICATE-----
MIIB3zCCAYWgAwIBAgIHZRJASQMmPjAKBggqhkjOPQQDAjAiMSAwHgYKKwYBBAGC
onwBAwwQQ0FDQUNBQ0EwMDAwMDAwMzAeFw0yMDEwMTUxNDIzNDNaFw00MDEwMTUx
NDIzNDJaMEQxIDAeBgorBgEEAYKifAEBDBBERURFREVERTAwMDEwMDAxMSAwHgYK
KwYBBAGConwBBQwQRkFCMDAwMDAwMDAwMDAxRDBZMBMGByqGSM49AgEGCCqGSM49
AwEHA0IABAKX6xqGgN8cw2rDVaieE2A1d5r9YhQ6ufEJ6FhdYDj46E+QAOOWsMci
LY8kRlm/vhtXllMSSBFrdLLXpoKXuVijgYMwgYAwDAYDVR0TAQH/BAIwADAOBgNV
HQ8BAf8EBAMCBaAwIAYDVR0lAQH/BBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMB0G
A1UdDgQWBBT1+JWsruoVUDmnSFUPBkIkI3t1BDAfBgNVHSMEGDAWgBRIK8cf6zcS
9vxN8jD7rcvBeU48kDAKBggqhkjOPQQDAgNIADBFAiBNuinylYZe/vvAn6b53a81
9KpaV8SFVFztzR2KdHy48wIhANnE89LrGdnKMYNV6+yIrQfMt+ODkkrs9ymD4p6T
tesV
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIJi4m3v6DzngrRdT0kXcGnZxt+LGBPJKzXRkb1ScVdbQoAoGCCqGSM49
AwEHoUQDQgAEApfrGoaA3xzDasNVqJ4TYDV3mv1iFDq58QnoWF1gOPjoT5AA45aw
xyItjyRGWb++G1eWUxJIEWt0stemgpe5WA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node01_01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x07, 0x65, 0x12, 0x40, 0x49, 0x03, 0x26, 0x3e, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x03, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26,
    0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x11, 0x01, 0x00, 0x01, 0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x02, 0x97,
    0xeb, 0x1a, 0x86, 0x80, 0xdf, 0x1c, 0xc3, 0x6a, 0xc3, 0x55, 0xa8, 0x9e, 0x13, 0x60, 0x35, 0x77, 0x9a, 0xfd, 0x62, 0x14,
    0x3a, 0xb9, 0xf1, 0x09, 0xe8, 0x58, 0x5d, 0x60, 0x38, 0xf8, 0xe8, 0x4f, 0x90, 0x00, 0xe3, 0x96, 0xb0, 0xc7, 0x22, 0x2d,
    0x8f, 0x24, 0x46, 0x59, 0xbf, 0xbe, 0x1b, 0x57, 0x96, 0x53, 0x12, 0x48, 0x11, 0x6b, 0x74, 0xb2, 0xd7, 0xa6, 0x82, 0x97,
    0xb9, 0x58, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04, 0x01, 0x18, 0x30,
    0x04, 0x14, 0xf5, 0xf8, 0x95, 0xac, 0xae, 0xea, 0x15, 0x50, 0x39, 0xa7, 0x48, 0x55, 0x0f, 0x06, 0x42, 0x24, 0x23, 0x7b,
    0x75, 0x04, 0x30, 0x05, 0x14, 0x48, 0x2b, 0xc7, 0x1f, 0xeb, 0x37, 0x12, 0xf6, 0xfc, 0x4d, 0xf2, 0x30, 0xfb, 0xad, 0xcb,
    0xc1, 0x79, 0x4e, 0x3c, 0x90, 0x18, 0x30, 0x0b, 0x40, 0x4d, 0xba, 0x29, 0xf2, 0x95, 0x86, 0x5e, 0xfe, 0xfb, 0xc0, 0x9f,
    0xa6, 0xf9, 0xdd, 0xaf, 0x35, 0xf4, 0xaa, 0x5a, 0x57, 0xc4, 0x85, 0x54, 0x5c, 0xed, 0xcd, 0x1d, 0x8a, 0x74, 0x7c, 0xb8,
    0xf3, 0xd9, 0xc4, 0xf3, 0xd2, 0xeb, 0x19, 0xd9, 0xca, 0x31, 0x83, 0x55, 0xeb, 0xec, 0x88, 0xad, 0x07, 0xcc, 0xb7, 0xe3,
    0x83, 0x92, 0x4a, 0xec, 0xf7, 0x29, 0x83, 0xe2, 0x9e, 0x93, 0xb5, 0xeb, 0x15, 0x18,
};

extern const uint32_t sTestCert_Node01_01_Chip_Len = sizeof(sTestCert_Node01_01_Chip);

extern const uint8_t sTestCert_Node01_01_DER[] = {
    0x30, 0x82, 0x01, 0xdf, 0x30, 0x82, 0x01, 0x85, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x07, 0x65, 0x12, 0x40, 0x49, 0x03, 0x26,
    0x3e, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a,
    0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33,
    0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31,
    0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45,
    0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01,
    0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x02, 0x97, 0xeb, 0x1a, 0x86, 0x80, 0xdf, 0x1c, 0xc3, 0x6a, 0xc3,
    0x55, 0xa8, 0x9e, 0x13, 0x60, 0x35, 0x77, 0x9a, 0xfd, 0x62, 0x14, 0x3a, 0xb9, 0xf1, 0x09, 0xe8, 0x58, 0x5d, 0x60, 0x38, 0xf8,
    0xe8, 0x4f, 0x90, 0x00, 0xe3, 0x96, 0xb0, 0xc7, 0x22, 0x2d, 0x8f, 0x24, 0x46, 0x59, 0xbf, 0xbe, 0x1b, 0x57, 0x96, 0x53, 0x12,
    0x48, 0x11, 0x6b, 0x74, 0xb2, 0xd7, 0xa6, 0x82, 0x97, 0xb9, 0x58, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06, 0x03,
    0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04,
    0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08,
    0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06,
    0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xf5, 0xf8, 0x95, 0xac, 0xae, 0xea, 0x15, 0x50, 0x39, 0xa7, 0x48, 0x55, 0x0f,
    0x06, 0x42, 0x24, 0x23, 0x7b, 0x75, 0x04, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x48,
    0x2b, 0xc7, 0x1f, 0xeb, 0x37, 0x12, 0xf6, 0xfc, 0x4d, 0xf2, 0x30, 0xfb, 0xad, 0xcb, 0xc1, 0x79, 0x4e, 0x3c, 0x90, 0x30, 0x0a,
    0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x4d, 0xba, 0x29, 0xf2,
    0x95, 0x86, 0x5e, 0xfe, 0xfb, 0xc0, 0x9f, 0xa6, 0xf9, 0xdd, 0xaf, 0x35, 0xf4, 0xaa, 0x5a, 0x57, 0xc4, 0x85, 0x54, 0x5c, 0xed,
    0xcd, 0x1d, 0x8a, 0x74, 0x7c, 0xb8, 0xf3, 0x02, 0x21, 0x00, 0xd9, 0xc4, 0xf3, 0xd2, 0xeb, 0x19, 0xd9, 0xca, 0x31, 0x83, 0x55,
    0xeb, 0xec, 0x88, 0xad, 0x07, 0xcc, 0xb7, 0xe3, 0x83, 0x92, 0x4a, 0xec, 0xf7, 0x29, 0x83, 0xe2, 0x9e, 0x93, 0xb5, 0xeb, 0x15,
};

extern const uint32_t sTestCert_Node01_01_DER_Len = sizeof(sTestCert_Node01_01_DER);

extern const uint8_t sTestCert_Node01_01_PublicKey[] = {
    0x04, 0x02, 0x97, 0xeb, 0x1a, 0x86, 0x80, 0xdf, 0x1c, 0xc3, 0x6a, 0xc3, 0x55, 0xa8, 0x9e, 0x13, 0x60,
    0x35, 0x77, 0x9a, 0xfd, 0x62, 0x14, 0x3a, 0xb9, 0xf1, 0x09, 0xe8, 0x58, 0x5d, 0x60, 0x38, 0xf8, 0xe8,
    0x4f, 0x90, 0x00, 0xe3, 0x96, 0xb0, 0xc7, 0x22, 0x2d, 0x8f, 0x24, 0x46, 0x59, 0xbf, 0xbe, 0x1b, 0x57,
    0x96, 0x53, 0x12, 0x48, 0x11, 0x6b, 0x74, 0xb2, 0xd7, 0xa6, 0x82, 0x97, 0xb9, 0x58,
};

extern const uint8_t sTestCert_Node01_01_PublicKey_Len = sizeof(sTestCert_Node01_01_PublicKey);

extern const uint8_t sTestCert_Node01_01_PrivateKey[] = {
    0x98, 0xb8, 0x9b, 0x7b, 0xfa, 0x0f, 0x39, 0xe0, 0xad, 0x17, 0x53, 0xd2, 0x45, 0xdc, 0x1a, 0x76,
    0x71, 0xb7, 0xe2, 0xc6, 0x04, 0xf2, 0x4a, 0xcd, 0x74, 0x64, 0x6f, 0x54, 0x9c, 0x55, 0xd6, 0xd0,
};

extern const uint8_t sTestCert_Node01_01_PrivateKey_Len = sizeof(sTestCert_Node01_01_PrivateKey);

extern const uint8_t sTestCert_Node01_01_SubjectKeyId[] = {
    0xF5, 0xF8, 0x95, 0xAC, 0xAE, 0xEA, 0x15, 0x50, 0x39, 0xA7, 0x48, 0x55, 0x0F, 0x06, 0x42, 0x24, 0x23, 0x7B, 0x75, 0x04,
};

extern const uint8_t sTestCert_Node01_01_SubjectKeyId_Len = sizeof(sTestCert_Node01_01_SubjectKeyId);

/**************  Test Node01_02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 8735828664690014286 (0x793be5e2d985f84e)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00010002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:ec:01:28:b6:e9:e8:93:fc:29:e8:c1:71:39:80:
                    5a:5f:7c:43:36:18:6d:9d:5b:85:8b:c4:c4:1e:80:
                    49:95:03:42:6e:5d:66:ba:2a:74:b7:3f:e9:fb:61:
                    2b:a8:71:f9:a5:bc:10:42:0d:da:b4:28:bd:01:e0:
                    a2:d3:14:76:c4
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                AB:86:78:B5:3E:C4:ED:AA:CA:11:5E:7E:CD:93:95:2F:54:3C:23:4B
            X509v3 Authority Key Identifier:
                keyid:84:9F:D2:4A:AF:59:09:40:73:E1:FA:C6:8E:AD:5F:52:0E:BE:9F:1D

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:21:00:dc:69:2a:f6:30:e5:bb:ae:43:8b:1a:66:49:
         84:c7:7c:1c:94:40:e7:23:33:fb:37:b9:fb:d6:dc:6d:cb:a9:
         c0:02:20:09:80:29:f6:06:42:8e:7d:b6:42:9a:b6:7f:19:27:
         03:b7:94:e8:61:3b:2e:3c:25:d2:ba:df:fd:eb:9d:a8:9a

-----BEGIN CERTIFICATE-----
MIIB4DCCAYagAwIBAgIIeTvl4tmF+E4wCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjBEMSAwHgYKKwYBBAGConwBAQwQREVERURFREUwMDAxMDAwMjEgMB4G
CisGAQQBgqJ8AQUMEEZBQjAwMDAwMDAwMDAwMUQwWTATBgcqhkjOPQIBBggqhkjO
PQMBBwNCAATsASi26eiT/CnowXE5gFpffEM2GG2dW4WLxMQegEmVA0JuXWa6KnS3
P+n7YSuocfmlvBBCDdq0KL0B4KLTFHbEo4GDMIGAMAwGA1UdEwEB/wQCMAAwDgYD
VR0PAQH/BAQDAgWgMCAGA1UdJQEB/wQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAd
BgNVHQ4EFgQUq4Z4tT7E7arKEV5+zZOVL1Q8I0swHwYDVR0jBBgwFoAUhJ/SSq9Z
CUBz4frGjq1fUg6+nx0wCgYIKoZIzj0EAwIDSAAwRQIhANxpKvYw5buuQ4saZkmE
x3wclEDnIzP7N7n71txty6nAAiAJgCn2BkKOfbZCmrZ/GScDt5ToYTsuPCXSut/9
652omg==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIAtu1jvAat6QugHGmDx1yKQgjEtqx7Xg3+HFF9IDCqeEoAoGCCqGSM49
AwEHoUQDQgAE7AEotunok/wp6MFxOYBaX3xDNhhtnVuFi8TEHoBJlQNCbl1muip0
tz/p+2ErqHH5pbwQQg3atCi9AeCi0xR2xA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node01_02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x79, 0x3b, 0xe5, 0xe2, 0xd9, 0x85, 0xf8, 0x4e, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27,
    0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x11, 0x02, 0x00, 0x01, 0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15,
    0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0xec,
    0x01, 0x28, 0xb6, 0xe9, 0xe8, 0x93, 0xfc, 0x29, 0xe8, 0xc1, 0x71, 0x39, 0x80, 0x5a, 0x5f, 0x7c, 0x43, 0x36, 0x18, 0x6d,
    0x9d, 0x5b, 0x85, 0x8b, 0xc4, 0xc4, 0x1e, 0x80, 0x49, 0x95, 0x03, 0x42, 0x6e, 0x5d, 0x66, 0xba, 0x2a, 0x74, 0xb7, 0x3f,
    0xe9, 0xfb, 0x61, 0x2b, 0xa8, 0x71, 0xf9, 0xa5, 0xbc, 0x10, 0x42, 0x0d, 0xda, 0xb4, 0x28, 0xbd, 0x01, 0xe0, 0xa2, 0xd3,
    0x14, 0x76, 0xc4, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04, 0x01, 0x18,
    0x30, 0x04, 0x14, 0xab, 0x86, 0x78, 0xb5, 0x3e, 0xc4, 0xed, 0xaa, 0xca, 0x11, 0x5e, 0x7e, 0xcd, 0x93, 0x95, 0x2f, 0x54,
    0x3c, 0x23, 0x4b, 0x30, 0x05, 0x14, 0x84, 0x9f, 0xd2, 0x4a, 0xaf, 0x59, 0x09, 0x40, 0x73, 0xe1, 0xfa, 0xc6, 0x8e, 0xad,
    0x5f, 0x52, 0x0e, 0xbe, 0x9f, 0x1d, 0x18, 0x30, 0x0b, 0x40, 0xdc, 0x69, 0x2a, 0xf6, 0x30, 0xe5, 0xbb, 0xae, 0x43, 0x8b,
    0x1a, 0x66, 0x49, 0x84, 0xc7, 0x7c, 0x1c, 0x94, 0x40, 0xe7, 0x23, 0x33, 0xfb, 0x37, 0xb9, 0xfb, 0xd6, 0xdc, 0x6d, 0xcb,
    0xa9, 0xc0, 0x09, 0x80, 0x29, 0xf6, 0x06, 0x42, 0x8e, 0x7d, 0xb6, 0x42, 0x9a, 0xb6, 0x7f, 0x19, 0x27, 0x03, 0xb7, 0x94,
    0xe8, 0x61, 0x3b, 0x2e, 0x3c, 0x25, 0xd2, 0xba, 0xdf, 0xfd, 0xeb, 0x9d, 0xa8, 0x9a, 0x18,
};

extern const uint32_t sTestCert_Node01_02_Chip_Len = sizeof(sTestCert_Node01_02_Chip);

extern const uint8_t sTestCert_Node01_02_DER[] = {
    0x30, 0x82, 0x01, 0xe0, 0x30, 0x82, 0x01, 0x86, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x79, 0x3b, 0xe5, 0xe2, 0xd9, 0x85,
    0xf8, 0x4e, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44,
    0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xec, 0x01, 0x28, 0xb6, 0xe9, 0xe8, 0x93, 0xfc, 0x29, 0xe8,
    0xc1, 0x71, 0x39, 0x80, 0x5a, 0x5f, 0x7c, 0x43, 0x36, 0x18, 0x6d, 0x9d, 0x5b, 0x85, 0x8b, 0xc4, 0xc4, 0x1e, 0x80, 0x49, 0x95,
    0x03, 0x42, 0x6e, 0x5d, 0x66, 0xba, 0x2a, 0x74, 0xb7, 0x3f, 0xe9, 0xfb, 0x61, 0x2b, 0xa8, 0x71, 0xf9, 0xa5, 0xbc, 0x10, 0x42,
    0x0d, 0xda, 0xb4, 0x28, 0xbd, 0x01, 0xe0, 0xa2, 0xd3, 0x14, 0x76, 0xc4, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06,
    0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff,
    0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06,
    0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d,
    0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xab, 0x86, 0x78, 0xb5, 0x3e, 0xc4, 0xed, 0xaa, 0xca, 0x11, 0x5e, 0x7e,
    0xcd, 0x93, 0x95, 0x2f, 0x54, 0x3c, 0x23, 0x4b, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
    0x84, 0x9f, 0xd2, 0x4a, 0xaf, 0x59, 0x09, 0x40, 0x73, 0xe1, 0xfa, 0xc6, 0x8e, 0xad, 0x5f, 0x52, 0x0e, 0xbe, 0x9f, 0x1d, 0x30,
    0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xdc, 0x69,
    0x2a, 0xf6, 0x30, 0xe5, 0xbb, 0xae, 0x43, 0x8b, 0x1a, 0x66, 0x49, 0x84, 0xc7, 0x7c, 0x1c, 0x94, 0x40, 0xe7, 0x23, 0x33, 0xfb,
    0x37, 0xb9, 0xfb, 0xd6, 0xdc, 0x6d, 0xcb, 0xa9, 0xc0, 0x02, 0x20, 0x09, 0x80, 0x29, 0xf6, 0x06, 0x42, 0x8e, 0x7d, 0xb6, 0x42,
    0x9a, 0xb6, 0x7f, 0x19, 0x27, 0x03, 0xb7, 0x94, 0xe8, 0x61, 0x3b, 0x2e, 0x3c, 0x25, 0xd2, 0xba, 0xdf, 0xfd, 0xeb, 0x9d, 0xa8,
    0x9a,
};

extern const uint32_t sTestCert_Node01_02_DER_Len = sizeof(sTestCert_Node01_02_DER);

extern const uint8_t sTestCert_Node01_02_PublicKey[] = {
    0x04, 0xec, 0x01, 0x28, 0xb6, 0xe9, 0xe8, 0x93, 0xfc, 0x29, 0xe8, 0xc1, 0x71, 0x39, 0x80, 0x5a, 0x5f,
    0x7c, 0x43, 0x36, 0x18, 0x6d, 0x9d, 0x5b, 0x85, 0x8b, 0xc4, 0xc4, 0x1e, 0x80, 0x49, 0x95, 0x03, 0x42,
    0x6e, 0x5d, 0x66, 0xba, 0x2a, 0x74, 0xb7, 0x3f, 0xe9, 0xfb, 0x61, 0x2b, 0xa8, 0x71, 0xf9, 0xa5, 0xbc,
    0x10, 0x42, 0x0d, 0xda, 0xb4, 0x28, 0xbd, 0x01, 0xe0, 0xa2, 0xd3, 0x14, 0x76, 0xc4,
};

extern const uint8_t sTestCert_Node01_02_PublicKey_Len = sizeof(sTestCert_Node01_02_PublicKey);

extern const uint8_t sTestCert_Node01_02_PrivateKey[] = {
    0x0b, 0x6e, 0xd6, 0x3b, 0xc0, 0x6a, 0xde, 0x90, 0xba, 0x01, 0xc6, 0x98, 0x3c, 0x75, 0xc8, 0xa4,
    0x20, 0x8c, 0x4b, 0x6a, 0xc7, 0xb5, 0xe0, 0xdf, 0xe1, 0xc5, 0x17, 0xd2, 0x03, 0x0a, 0xa7, 0x84,
};

extern const uint8_t sTestCert_Node01_02_PrivateKey_Len = sizeof(sTestCert_Node01_02_PrivateKey);

extern const uint8_t sTestCert_Node01_02_SubjectKeyId[] = {
    0xAB, 0x86, 0x78, 0xB5, 0x3E, 0xC4, 0xED, 0xAA, 0xCA, 0x11, 0x5E, 0x7E, 0xCD, 0x93, 0x95, 0x2F, 0x54, 0x3C, 0x23, 0x4B,
};

extern const uint8_t sTestCert_Node01_02_SubjectKeyId_Len = sizeof(sTestCert_Node01_02_SubjectKeyId);

/**************  Test Node02_01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 5474881206837906503 (0x4bfaaf7351090c47)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020001, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:5a:31:9c:68:2b:02:81:70:e4:b3:79:04:9e:b7:
                    9e:c3:2c:48:1a:b0:a6:da:b7:b7:19:0a:c5:9d:a0:
                    f9:9c:f2:e0:48:a9:77:87:3a:38:1a:a4:4f:04:dc:
                    34:26:a6:5c:73:93:6e:82:73:2f:29:c3:24:fa:e4:
                    b6:8c:2f:de:ca
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                F7:75:43:89:07:A5:45:C1:78:9F:D7:DE:E5:29:BF:EA:1E:8E:40:5A
            X509v3 Authority Key Identifier:
                keyid:AA:80:D4:9F:DC:0E:8C:7F:81:E2:FF:07:56:2E:B1:C3:AC:F8:6E:F9

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:0c:d1:fe:79:b9:d3:30:59:aa:0b:3e:f6:3f:b3:
         d9:d7:63:b7:7e:25:00:7e:3e:30:2d:75:a3:46:56:5f:51:82:
         02:21:00:d4:1f:76:45:cd:e6:0f:3c:a7:29:31:b1:ab:95:7c:
         ae:56:59:ca:f6:06:41:11:62:a1:6f:99:01:23:13:f3:df

-----BEGIN CERTIFICATE-----
MIICAjCCAaigAwIBAgIIS/qvc1EJDEcwCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQEMEERFREVERURFMDAwMjAwMDExIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWjGcaCsC
gXDks3kEnreewyxIGrCm2re3GQrFnaD5nPLgSKl3hzo4GqRPBNw0JqZcc5NugnMv
KcMk+uS2jC/eyqOBgzCBgDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIFoDAg
BgNVHSUBAf8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFPd1Q4kH
pUXBeJ/X3uUpv+oejkBaMB8GA1UdIwQYMBaAFKqA1J/cDox/geL/B1YuscOs+G75
MAoGCCqGSM49BAMCA0gAMEUCIAzR/nm50zBZqgs+9j+z2ddjt34lAH4+MC11o0ZW
X1GCAiEA1B92Rc3mDzynKTGxq5V8rlZZyvYGQRFioW+ZASMT898=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIDY/9JyeBYd/gs6tKRY0kyxZvZfs6JmVDqYynT1pB6xZoAoGCCqGSM49
AwEHoUQDQgAEWjGcaCsCgXDks3kEnreewyxIGrCm2re3GQrFnaD5nPLgSKl3hzo4
GqRPBNw0JqZcc5NugnMvKcMk+uS2jC/eyg==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x4b, 0xfa, 0xaf, 0x73, 0x51, 0x09, 0x0c, 0x47, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x11, 0x01, 0x00, 0x02,
    0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08,
    0x01, 0x30, 0x09, 0x41, 0x04, 0x5a, 0x31, 0x9c, 0x68, 0x2b, 0x02, 0x81, 0x70, 0xe4, 0xb3, 0x79, 0x04, 0x9e, 0xb7, 0x9e, 0xc3,
    0x2c, 0x48, 0x1a, 0xb0, 0xa6, 0xda, 0xb7, 0xb7, 0x19, 0x0a, 0xc5, 0x9d, 0xa0, 0xf9, 0x9c, 0xf2, 0xe0, 0x48, 0xa9, 0x77, 0x87,
    0x3a, 0x38, 0x1a, 0xa4, 0x4f, 0x04, 0xdc, 0x34, 0x26, 0xa6, 0x5c, 0x73, 0x93, 0x6e, 0x82, 0x73, 0x2f, 0x29, 0xc3, 0x24, 0xfa,
    0xe4, 0xb6, 0x8c, 0x2f, 0xde, 0xca, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04,
    0x01, 0x18, 0x30, 0x04, 0x14, 0xf7, 0x75, 0x43, 0x89, 0x07, 0xa5, 0x45, 0xc1, 0x78, 0x9f, 0xd7, 0xde, 0xe5, 0x29, 0xbf, 0xea,
    0x1e, 0x8e, 0x40, 0x5a, 0x30, 0x05, 0x14, 0xaa, 0x80, 0xd4, 0x9f, 0xdc, 0x0e, 0x8c, 0x7f, 0x81, 0xe2, 0xff, 0x07, 0x56, 0x2e,
    0xb1, 0xc3, 0xac, 0xf8, 0x6e, 0xf9, 0x18, 0x30, 0x0b, 0x40, 0x0c, 0xd1, 0xfe, 0x79, 0xb9, 0xd3, 0x30, 0x59, 0xaa, 0x0b, 0x3e,
    0xf6, 0x3f, 0xb3, 0xd9, 0xd7, 0x63, 0xb7, 0x7e, 0x25, 0x00, 0x7e, 0x3e, 0x30, 0x2d, 0x75, 0xa3, 0x46, 0x56, 0x5f, 0x51, 0x82,
    0xd4, 0x1f, 0x76, 0x45, 0xcd, 0xe6, 0x0f, 0x3c, 0xa7, 0x29, 0x31, 0xb1, 0xab, 0x95, 0x7c, 0xae, 0x56, 0x59, 0xca, 0xf6, 0x06,
    0x41, 0x11, 0x62, 0xa1, 0x6f, 0x99, 0x01, 0x23, 0x13, 0xf3, 0xdf, 0x18,
};

extern const uint32_t sTestCert_Node02_01_Chip_Len = sizeof(sTestCert_Node02_01_Chip);

extern const uint8_t sTestCert_Node02_01_DER[] = {
    0x30, 0x82, 0x02, 0x02, 0x30, 0x82, 0x01, 0xa8, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x4b, 0xfa, 0xaf, 0x73, 0x51, 0x09,
    0x0c, 0x47, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30,
    0x32, 0x30, 0x30, 0x30, 0x31, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0x5a, 0x31, 0x9c, 0x68, 0x2b, 0x02, 0x81, 0x70, 0xe4, 0xb3, 0x79, 0x04, 0x9e, 0xb7, 0x9e, 0xc3, 0x2c, 0x48,
    0x1a, 0xb0, 0xa6, 0xda, 0xb7, 0xb7, 0x19, 0x0a, 0xc5, 0x9d, 0xa0, 0xf9, 0x9c, 0xf2, 0xe0, 0x48, 0xa9, 0x77, 0x87, 0x3a, 0x38,
    0x1a, 0xa4, 0x4f, 0x04, 0xdc, 0x34, 0x26, 0xa6, 0x5c, 0x73, 0x93, 0x6e, 0x82, 0x73, 0x2f, 0x29, 0xc3, 0x24, 0xfa, 0xe4, 0xb6,
    0x8c, 0x2f, 0xde, 0xca, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04,
    0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20,
    0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03,
    0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04,
    0x14, 0xf7, 0x75, 0x43, 0x89, 0x07, 0xa5, 0x45, 0xc1, 0x78, 0x9f, 0xd7, 0xde, 0xe5, 0x29, 0xbf, 0xea, 0x1e, 0x8e, 0x40, 0x5a,
    0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xaa, 0x80, 0xd4, 0x9f, 0xdc, 0x0e, 0x8c, 0x7f,
    0x81, 0xe2, 0xff, 0x07, 0x56, 0x2e, 0xb1, 0xc3, 0xac, 0xf8, 0x6e, 0xf9, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,
    0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x0c, 0xd1, 0xfe, 0x79, 0xb9, 0xd3, 0x30, 0x59, 0xaa, 0x0b, 0x3e,
    0xf6, 0x3f, 0xb3, 0xd9, 0xd7, 0x63, 0xb7, 0x7e, 0x25, 0x00, 0x7e, 0x3e, 0x30, 0x2d, 0x75, 0xa3, 0x46, 0x56, 0x5f, 0x51, 0x82,
    0x02, 0x21, 0x00, 0xd4, 0x1f, 0x76, 0x45, 0xcd, 0xe6, 0x0f, 0x3c, 0xa7, 0x29, 0x31, 0xb1, 0xab, 0x95, 0x7c, 0xae, 0x56, 0x59,
    0xca, 0xf6, 0x06, 0x41, 0x11, 0x62, 0xa1, 0x6f, 0x99, 0x01, 0x23, 0x13, 0xf3, 0xdf,
};

extern const uint32_t sTestCert_Node02_01_DER_Len = sizeof(sTestCert_Node02_01_DER);

extern const uint8_t sTestCert_Node02_01_PublicKey[] = {
    0x04, 0x5a, 0x31, 0x9c, 0x68, 0x2b, 0x02, 0x81, 0x70, 0xe4, 0xb3, 0x79, 0x04, 0x9e, 0xb7, 0x9e, 0xc3,
    0x2c, 0x48, 0x1a, 0xb0, 0xa6, 0xda, 0xb7, 0xb7, 0x19, 0x0a, 0xc5, 0x9d, 0xa0, 0xf9, 0x9c, 0xf2, 0xe0,
    0x48, 0xa9, 0x77, 0x87, 0x3a, 0x38, 0x1a, 0xa4, 0x4f, 0x04, 0xdc, 0x34, 0x26, 0xa6, 0x5c, 0x73, 0x93,
    0x6e, 0x82, 0x73, 0x2f, 0x29, 0xc3, 0x24, 0xfa, 0xe4, 0xb6, 0x8c, 0x2f, 0xde, 0xca,
};

extern const uint8_t sTestCert_Node02_01_PublicKey_Len = sizeof(sTestCert_Node02_01_PublicKey);

extern const uint8_t sTestCert_Node02_01_PrivateKey[] = {
    0x36, 0x3f, 0xf4, 0x9c, 0x9e, 0x05, 0x87, 0x7f, 0x82, 0xce, 0xad, 0x29, 0x16, 0x34, 0x93, 0x2c,
    0x59, 0xbd, 0x97, 0xec, 0xe8, 0x99, 0x95, 0x0e, 0xa6, 0x32, 0x9d, 0x3d, 0x69, 0x07, 0xac, 0x59,
};

extern const uint8_t sTestCert_Node02_01_PrivateKey_Len = sizeof(sTestCert_Node02_01_PrivateKey);

extern const uint8_t sTestCert_Node02_01_SubjectKeyId[] = {
    0xF7, 0x75, 0x43, 0x89, 0x07, 0xA5, 0x45, 0xC1, 0x78, 0x9F, 0xD7, 0xDE, 0xE5, 0x29, 0xBF, 0xEA, 0x1E, 0x8E, 0x40, 0x5A,
};

extern const uint8_t sTestCert_Node02_01_SubjectKeyId_Len = sizeof(sTestCert_Node02_01_SubjectKeyId);

/**************  Test Node02_02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 9159388943247294232 (0x7f1cafb721e53f18)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D, CN = TEST CERT COMMON NAME Attr
for Node02_02 Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub:
                    04:3b:48:d5:dd:1b:18:ee:97:ed:5e:47:a2:d3:c3:
                    ac:bc:0c:85:c2:d3:35:4f:bc:21:0d:17:3d:d6:00:
                    02:98:40:98:82:80:f5:88:07:a8:9e:4f:97:23:fb:
                    b2:41:ee:76:c6:d6:2c:2f:d5:b8:db:3d:f5:ee:b7:
                    82:df:68:18:dc
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                51:6D:22:C8:84:92:DD:46:72:D7:19:FD:2E:51:25:33:BA:9B:A0:67
            X509v3 Authority Key Identifier:
                keyid:AA:80:D4:9F:DC:0E:8C:7F:81:E2:FF:07:56:2E:B1:C3:AC:F8:6E:F9

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:2e:6d:b2:9a:d5:2a:21:c5:31:18:b3:27:fb:9f:
         76:a8:b5:05:db:93:d4:36:95:e2:28:76:43:0e:53:7a:53:be:
         02:21:00:93:07:ae:88:7d:c9:6a:60:33:62:0d:09:d6:23:35:
         74:f4:dd:72:e0:a1:9c:a7:98:93:58:50:e5:07:4d:6a:9b

-----BEGIN CERTIFICATE-----
MIICNTCCAdugAwIBAgIIfxyvtyHlPxgwCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowdzEgMB4G
CisGAQQBgqJ8AQEMEERFREVERURFMDAwMjAwMDIxIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMTEwLwYDVQQDDChURVNUIENFUlQgQ09NTU9OIE5BTUUg
QXR0ciBmb3IgTm9kZTAyXzAyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEO0jV
3RsY7pftXkei08OsvAyFwtM1T7whDRc91gACmECYgoD1iAeonk+XI/uyQe52xtYs
L9W42z317reC32gY3KOBgzCBgDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIF
oDAgBgNVHSUBAf8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFFFt
IsiEkt1GctcZ/S5RJTO6m6BnMB8GA1UdIwQYMBaAFKqA1J/cDox/geL/B1YuscOs
+G75MAoGCCqGSM49BAMCA0gAMEUCIC5tsprVKiHFMRizJ/ufdqi1BduT1DaV4ih2
Qw5TelO+AiEAkweuiH3JamAzYg0J1iM1dPTdcuChnKeYk1hQ5QdNaps=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIF0qbokzs4WM1I71qjNn0zW14WIWJCZAxE8zeaG4cTcqoAoGCCqGSM49
AwEHoUQDQgAEO0jV3RsY7pftXkei08OsvAyFwtM1T7whDRc91gACmECYgoD1iAeo
nk+XI/uyQe52xtYsL9W42z317reC32gY3A==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x7f, 0x1c, 0xaf, 0xb7, 0x21, 0xe5, 0x3f, 0x18, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x11, 0x02, 0x00, 0x02,
    0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x2c, 0x01, 0x28, 0x54, 0x45, 0x53,
    0x54, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x20, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x41, 0x74,
    0x74, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4e, 0x6f, 0x64, 0x65, 0x30, 0x32, 0x5f, 0x30, 0x32, 0x18, 0x24, 0x07, 0x01, 0x24,
    0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x3b, 0x48, 0xd5, 0xdd, 0x1b, 0x18, 0xee, 0x97, 0xed, 0x5e, 0x47, 0xa2, 0xd3, 0xc3, 0xac,
    0xbc, 0x0c, 0x85, 0xc2, 0xd3, 0x35, 0x4f, 0xbc, 0x21, 0x0d, 0x17, 0x3d, 0xd6, 0x00, 0x02, 0x98, 0x40, 0x98, 0x82, 0x80, 0xf5,
    0x88, 0x07, 0xa8, 0x9e, 0x4f, 0x97, 0x23, 0xfb, 0xb2, 0x41, 0xee, 0x76, 0xc6, 0xd6, 0x2c, 0x2f, 0xd5, 0xb8, 0xdb, 0x3d, 0xf5,
    0xee, 0xb7, 0x82, 0xdf, 0x68, 0x18, 0xdc, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02,
    0x04, 0x01, 0x18, 0x30, 0x04, 0x14, 0x51, 0x6d, 0x22, 0xc8, 0x84, 0x92, 0xdd, 0x46, 0x72, 0xd7, 0x19, 0xfd, 0x2e, 0x51, 0x25,
    0x33, 0xba, 0x9b, 0xa0, 0x67, 0x30, 0x05, 0x14, 0xaa, 0x80, 0xd4, 0x9f, 0xdc, 0x0e, 0x8c, 0x7f, 0x81, 0xe2, 0xff, 0x07, 0x56,
    0x2e, 0xb1, 0xc3, 0xac, 0xf8, 0x6e, 0xf9, 0x18, 0x30, 0x0b, 0x40, 0x2e, 0x6d, 0xb2, 0x9a, 0xd5, 0x2a, 0x21, 0xc5, 0x31, 0x18,
    0xb3, 0x27, 0xfb, 0x9f, 0x76, 0xa8, 0xb5, 0x05, 0xdb, 0x93, 0xd4, 0x36, 0x95, 0xe2, 0x28, 0x76, 0x43, 0x0e, 0x53, 0x7a, 0x53,
    0xbe, 0x93, 0x07, 0xae, 0x88, 0x7d, 0xc9, 0x6a, 0x60, 0x33, 0x62, 0x0d, 0x09, 0xd6, 0x23, 0x35, 0x74, 0xf4, 0xdd, 0x72, 0xe0,
    0xa1, 0x9c, 0xa7, 0x98, 0x93, 0x58, 0x50, 0xe5, 0x07, 0x4d, 0x6a, 0x9b, 0x18,
};

extern const uint32_t sTestCert_Node02_02_Chip_Len = sizeof(sTestCert_Node02_02_Chip);

extern const uint8_t sTestCert_Node02_02_DER[] = {
    0x30, 0x82, 0x02, 0x35, 0x30, 0x82, 0x01, 0xdb, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x7f, 0x1c, 0xaf, 0xb7, 0x21, 0xe5,
    0x3f, 0x18, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x77, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30,
    0x32, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x31, 0x31, 0x30,
    0x2f, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x28, 0x54, 0x45, 0x53, 0x54, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x43, 0x4f, 0x4d,
    0x4d, 0x4f, 0x4e, 0x20, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x41, 0x74, 0x74, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4e, 0x6f, 0x64,
    0x65, 0x30, 0x32, 0x5f, 0x30, 0x32, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08,
    0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x3b, 0x48, 0xd5, 0xdd, 0x1b, 0x18, 0xee, 0x97, 0xed,
    0x5e, 0x47, 0xa2, 0xd3, 0xc3, 0xac, 0xbc, 0x0c, 0x85, 0xc2, 0xd3, 0x35, 0x4f, 0xbc, 0x21, 0x0d, 0x17, 0x3d, 0xd6, 0x00, 0x02,
    0x98, 0x40, 0x98, 0x82, 0x80, 0xf5, 0x88, 0x07, 0xa8, 0x9e, 0x4f, 0x97, 0x23, 0xfb, 0xb2, 0x41, 0xee, 0x76, 0xc6, 0xd6, 0x2c,
    0x2f, 0xd5, 0xb8, 0xdb, 0x3d, 0xf5, 0xee, 0xb7, 0x82, 0xdf, 0x68, 0x18, 0xdc, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c,
    0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01,
    0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14,
    0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x51, 0x6d, 0x22, 0xc8, 0x84, 0x92, 0xdd, 0x46, 0x72, 0xd7, 0x19,
    0xfd, 0x2e, 0x51, 0x25, 0x33, 0xba, 0x9b, 0xa0, 0x67, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0xaa, 0x80, 0xd4, 0x9f, 0xdc, 0x0e, 0x8c, 0x7f, 0x81, 0xe2, 0xff, 0x07, 0x56, 0x2e, 0xb1, 0xc3, 0xac, 0xf8, 0x6e, 0xf9,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x2e, 0x6d,
    0xb2, 0x9a, 0xd5, 0x2a, 0x21, 0xc5, 0x31, 0x18, 0xb3, 0x27, 0xfb, 0x9f, 0x76, 0xa8, 0xb5, 0x05, 0xdb, 0x93, 0xd4, 0x36, 0x95,
    0xe2, 0x28, 0x76, 0x43, 0x0e, 0x53, 0x7a, 0x53, 0xbe, 0x02, 0x21, 0x00, 0x93, 0x07, 0xae, 0x88, 0x7d, 0xc9, 0x6a, 0x60, 0x33,
    0x62, 0x0d, 0x09, 0xd6, 0x23, 0x35, 0x74, 0xf4, 0xdd, 0x72, 0xe0, 0xa1, 0x9c, 0xa7, 0x98, 0x93, 0x58, 0x50, 0xe5, 0x07, 0x4d,
    0x6a, 0x9b,
};

extern const uint32_t sTestCert_Node02_02_DER_Len = sizeof(sTestCert_Node02_02_DER);

extern const uint8_t sTestCert_Node02_02_PublicKey[] = {
    0x04, 0x3b, 0x48, 0xd5, 0xdd, 0x1b, 0x18, 0xee, 0x97, 0xed, 0x5e, 0x47, 0xa2, 0xd3, 0xc3, 0xac, 0xbc,
    0x0c, 0x85, 0xc2, 0xd3, 0x35, 0x4f, 0xbc, 0x21, 0x0d, 0x17, 0x3d, 0xd6, 0x00, 0x02, 0x98, 0x40, 0x98,
    0x82, 0x80, 0xf5, 0x88, 0x07, 0xa8, 0x9e, 0x4f, 0x97, 0x23, 0xfb, 0xb2, 0x41, 0xee, 0x76, 0xc6, 0xd6,
    0x2c, 0x2f, 0xd5, 0xb8, 0xdb, 0x3d, 0xf5, 0xee, 0xb7, 0x82, 0xdf, 0x68, 0x18, 0xdc,
};

extern const uint8_t sTestCert_Node02_02_PublicKey_Len = sizeof(sTestCert_Node02_02_PublicKey);

extern const uint8_t sTestCert_Node02_02_PrivateKey[] = {
    0x5d, 0x2a, 0x6e, 0x89, 0x33, 0xb3, 0x85, 0x8c, 0xd4, 0x8e, 0xf5, 0xaa, 0x33, 0x67, 0xd3, 0x35,
    0xb5, 0xe1, 0x62, 0x16, 0x24, 0x26, 0x40, 0xc4, 0x4f, 0x33, 0x79, 0xa1, 0xb8, 0x71, 0x37, 0x2a,
};

extern const uint8_t sTestCert_Node02_02_PrivateKey_Len = sizeof(sTestCert_Node02_02_PrivateKey);

extern const uint8_t sTestCert_Node02_02_SubjectKeyId[] = {
    0x51, 0x6D, 0x22, 0xC8, 0x84, 0x92, 0xDD, 0x46, 0x72, 0xD7, 0x19, 0xFD, 0x2E, 0x51, 0x25, 0x33, 0xBA, 0x9B, 0xA0, 0x67,
};

extern const uint8_t sTestCert_Node02_02_SubjectKeyId_Len = sizeof(sTestCert_Node02_02_SubjectKeyId);

/**************  Test Node02_03 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 192179812141776280 (0x2aac2855bb63d98)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020003, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D, CN =
TestCert02_03, 1.3.6.1.4.1.37244.1.6 = A001B001, 1.3.6.1.4.1.37244.1.7 = A001B002 Subject Public Key Info: Public Key Algorithm:
id-ecPublicKey Public-Key: (256 bit) pub: 04:ed:fd:22:cb:83:86:4f:31:e7:50:7c:c1:47:94:
                    32:1a:40:51:70:7d:d0:d7:47:17:11:48:f6:5b:9b:
                    ea:04:a3:c7:41:0f:4b:0a:63:84:c6:d0:a5:7a:64:
                    89:89:fe:f6:40:fe:d8:fa:69:fd:df:53:63:92:a6:
                    83:d4:46:32:42
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                22:58:57:01:E8:51:0C:37:C1:AF:F5:3A:FA:8D:BB:59:93:1A:33:AB
            X509v3 Authority Key Identifier:
                keyid:AA:80:D4:9F:DC:0E:8C:7F:81:E2:FF:07:56:2E:B1:C3:AC:F8:6E:F9

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:79:6e:25:e3:9e:4e:58:53:d8:c8:4e:a1:0e:70:
         7e:58:fd:d0:ac:93:63:95:58:0c:97:dc:a3:47:2c:aa:35:60:
         02:21:00:ae:a3:6f:57:ed:0b:75:8c:48:77:25:ed:f0:96:d1:
         2b:7e:b1:d3:44:56:28:18:28:5c:f2:8f:04:27:08:e2:ab

-----BEGIN CERTIFICATE-----
MIICTzCCAfWgAwIBAgIIAqrChVu2PZgwCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowgZAxIDAe
BgorBgEEAYKifAEBDBBERURFREVERTAwMDIwMDAzMSAwHgYKKwYBBAGConwBBQwQ
RkFCMDAwMDAwMDAwMDAxRDEWMBQGA1UEAwwNVGVzdENlcnQwMl8wMzEYMBYGCisG
AQQBgqJ8AQYMCEEwMDFCMDAxMRgwFgYKKwYBBAGConwBBwwIQTAwMUIwMDIwWTAT
BgcqhkjOPQIBBggqhkjOPQMBBwNCAATt/SLLg4ZPMedQfMFHlDIaQFFwfdDXRxcR
SPZbm+oEo8dBD0sKY4TG0KV6ZImJ/vZA/tj6af3fU2OSpoPURjJCo4GDMIGAMAwG
A1UdEwEB/wQCMAAwDgYDVR0PAQH/BAQDAgWgMCAGA1UdJQEB/wQWMBQGCCsGAQUF
BwMCBggrBgEFBQcDATAdBgNVHQ4EFgQUIlhXAehRDDfBr/U6+o27WZMaM6swHwYD
VR0jBBgwFoAUqoDUn9wOjH+B4v8HVi6xw6z4bvkwCgYIKoZIzj0EAwIDSAAwRQIg
eW4l455OWFPYyE6hDnB+WP3QrJNjlVgMl9yjRyyqNWACIQCuo29X7Qt1jEh3Je3w
ltErfrHTRFYoGChc8o8EJwjiqw==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIAPD6JLmm2Qw/+R5bxMJXFHsKaDSdRmNd0KGdTWJ0JanoAoGCCqGSM49
AwEHoUQDQgAE7f0iy4OGTzHnUHzBR5QyGkBRcH3Q10cXEUj2W5vqBKPHQQ9LCmOE
xtClemSJif72QP7Y+mn931NjkqaD1EYyQg==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_03_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x02, 0xaa, 0xc2, 0x85, 0x5b, 0xb6, 0x3d, 0x98, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x11, 0x03, 0x00, 0x02,
    0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x2c, 0x01, 0x0d, 0x54, 0x65, 0x73,
    0x74, 0x43, 0x65, 0x72, 0x74, 0x30, 0x32, 0x5f, 0x30, 0x33, 0x26, 0x16, 0x01, 0xb0, 0x01, 0xa0, 0x26, 0x17, 0x02, 0xb0, 0x01,
    0xa0, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0xed, 0xfd, 0x22, 0xcb, 0x83, 0x86, 0x4f, 0x31, 0xe7,
    0x50, 0x7c, 0xc1, 0x47, 0x94, 0x32, 0x1a, 0x40, 0x51, 0x70, 0x7d, 0xd0, 0xd7, 0x47, 0x17, 0x11, 0x48, 0xf6, 0x5b, 0x9b, 0xea,
    0x04, 0xa3, 0xc7, 0x41, 0x0f, 0x4b, 0x0a, 0x63, 0x84, 0xc6, 0xd0, 0xa5, 0x7a, 0x64, 0x89, 0x89, 0xfe, 0xf6, 0x40, 0xfe, 0xd8,
    0xfa, 0x69, 0xfd, 0xdf, 0x53, 0x63, 0x92, 0xa6, 0x83, 0xd4, 0x46, 0x32, 0x42, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24,
    0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04, 0x01, 0x18, 0x30, 0x04, 0x14, 0x22, 0x58, 0x57, 0x01, 0xe8, 0x51, 0x0c, 0x37, 0xc1,
    0xaf, 0xf5, 0x3a, 0xfa, 0x8d, 0xbb, 0x59, 0x93, 0x1a, 0x33, 0xab, 0x30, 0x05, 0x14, 0xaa, 0x80, 0xd4, 0x9f, 0xdc, 0x0e, 0x8c,
    0x7f, 0x81, 0xe2, 0xff, 0x07, 0x56, 0x2e, 0xb1, 0xc3, 0xac, 0xf8, 0x6e, 0xf9, 0x18, 0x30, 0x0b, 0x40, 0x79, 0x6e, 0x25, 0xe3,
    0x9e, 0x4e, 0x58, 0x53, 0xd8, 0xc8, 0x4e, 0xa1, 0x0e, 0x70, 0x7e, 0x58, 0xfd, 0xd0, 0xac, 0x93, 0x63, 0x95, 0x58, 0x0c, 0x97,
    0xdc, 0xa3, 0x47, 0x2c, 0xaa, 0x35, 0x60, 0xae, 0xa3, 0x6f, 0x57, 0xed, 0x0b, 0x75, 0x8c, 0x48, 0x77, 0x25, 0xed, 0xf0, 0x96,
    0xd1, 0x2b, 0x7e, 0xb1, 0xd3, 0x44, 0x56, 0x28, 0x18, 0x28, 0x5c, 0xf2, 0x8f, 0x04, 0x27, 0x08, 0xe2, 0xab, 0x18,
};

extern const uint32_t sTestCert_Node02_03_Chip_Len = sizeof(sTestCert_Node02_03_Chip);

extern const uint8_t sTestCert_Node02_03_DER[] = {
    0x30, 0x82, 0x02, 0x4f, 0x30, 0x82, 0x01, 0xf5, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x02, 0xaa, 0xc2, 0x85, 0x5b, 0xb6,
    0x3d, 0x98, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x81, 0x90, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b,
    0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30,
    0x30, 0x32, 0x30, 0x30, 0x30, 0x33, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01,
    0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x31, 0x16,
    0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x30, 0x32, 0x5f, 0x30,
    0x33, 0x31, 0x18, 0x30, 0x16, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x06, 0x0c, 0x08, 0x41, 0x30,
    0x30, 0x31, 0x42, 0x30, 0x30, 0x31, 0x31, 0x18, 0x30, 0x16, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01,
    0x07, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42, 0x30, 0x30, 0x32, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,
    0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xed, 0xfd, 0x22, 0xcb,
    0x83, 0x86, 0x4f, 0x31, 0xe7, 0x50, 0x7c, 0xc1, 0x47, 0x94, 0x32, 0x1a, 0x40, 0x51, 0x70, 0x7d, 0xd0, 0xd7, 0x47, 0x17, 0x11,
    0x48, 0xf6, 0x5b, 0x9b, 0xea, 0x04, 0xa3, 0xc7, 0x41, 0x0f, 0x4b, 0x0a, 0x63, 0x84, 0xc6, 0xd0, 0xa5, 0x7a, 0x64, 0x89, 0x89,
    0xfe, 0xf6, 0x40, 0xfe, 0xd8, 0xfa, 0x69, 0xfd, 0xdf, 0x53, 0x63, 0x92, 0xa6, 0x83, 0xd4, 0x46, 0x32, 0x42, 0xa3, 0x81, 0x83,
    0x30, 0x81, 0x80, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03,
    0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01,
    0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05,
    0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x22, 0x58, 0x57, 0x01, 0xe8, 0x51,
    0x0c, 0x37, 0xc1, 0xaf, 0xf5, 0x3a, 0xfa, 0x8d, 0xbb, 0x59, 0x93, 0x1a, 0x33, 0xab, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23,
    0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xaa, 0x80, 0xd4, 0x9f, 0xdc, 0x0e, 0x8c, 0x7f, 0x81, 0xe2, 0xff, 0x07, 0x56, 0x2e, 0xb1,
    0xc3, 0xac, 0xf8, 0x6e, 0xf9, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30,
    0x45, 0x02, 0x20, 0x79, 0x6e, 0x25, 0xe3, 0x9e, 0x4e, 0x58, 0x53, 0xd8, 0xc8, 0x4e, 0xa1, 0x0e, 0x70, 0x7e, 0x58, 0xfd, 0xd0,
    0xac, 0x93, 0x63, 0x95, 0x58, 0x0c, 0x97, 0xdc, 0xa3, 0x47, 0x2c, 0xaa, 0x35, 0x60, 0x02, 0x21, 0x00, 0xae, 0xa3, 0x6f, 0x57,
    0xed, 0x0b, 0x75, 0x8c, 0x48, 0x77, 0x25, 0xed, 0xf0, 0x96, 0xd1, 0x2b, 0x7e, 0xb1, 0xd3, 0x44, 0x56, 0x28, 0x18, 0x28, 0x5c,
    0xf2, 0x8f, 0x04, 0x27, 0x08, 0xe2, 0xab,
};

extern const uint32_t sTestCert_Node02_03_DER_Len = sizeof(sTestCert_Node02_03_DER);

extern const uint8_t sTestCert_Node02_03_PublicKey[] = {
    0x04, 0xed, 0xfd, 0x22, 0xcb, 0x83, 0x86, 0x4f, 0x31, 0xe7, 0x50, 0x7c, 0xc1, 0x47, 0x94, 0x32, 0x1a,
    0x40, 0x51, 0x70, 0x7d, 0xd0, 0xd7, 0x47, 0x17, 0x11, 0x48, 0xf6, 0x5b, 0x9b, 0xea, 0x04, 0xa3, 0xc7,
    0x41, 0x0f, 0x4b, 0x0a, 0x63, 0x84, 0xc6, 0xd0, 0xa5, 0x7a, 0x64, 0x89, 0x89, 0xfe, 0xf6, 0x40, 0xfe,
    0xd8, 0xfa, 0x69, 0xfd, 0xdf, 0x53, 0x63, 0x92, 0xa6, 0x83, 0xd4, 0x46, 0x32, 0x42,
};

extern const uint8_t sTestCert_Node02_03_PublicKey_Len = sizeof(sTestCert_Node02_03_PublicKey);

extern const uint8_t sTestCert_Node02_03_PrivateKey[] = {
    0x03, 0xc3, 0xe8, 0x92, 0xe6, 0x9b, 0x64, 0x30, 0xff, 0xe4, 0x79, 0x6f, 0x13, 0x09, 0x5c, 0x51,
    0xec, 0x29, 0xa0, 0xd2, 0x75, 0x19, 0x8d, 0x77, 0x42, 0x86, 0x75, 0x35, 0x89, 0xd0, 0x96, 0xa7,
};

extern const uint8_t sTestCert_Node02_03_PrivateKey_Len = sizeof(sTestCert_Node02_03_PrivateKey);

extern const uint8_t sTestCert_Node02_03_SubjectKeyId[] = {
    0x22, 0x58, 0x57, 0x01, 0xE8, 0x51, 0x0C, 0x37, 0xC1, 0xAF, 0xF5, 0x3A, 0xFA, 0x8D, 0xBB, 0x59, 0x93, 0x1A, 0x33, 0xAB,
};

extern const uint8_t sTestCert_Node02_03_SubjectKeyId_Len = sizeof(sTestCert_Node02_03_SubjectKeyId);

/**************  Test Node02_04 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 2286049208745281821 (0x1fb9ada4b253491d)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.6 = A001B001, CN = TestCert02_04, 1.3.6.1.4.1.37244.1.5 =
FAB000000000001D, 1.3.6.1.4.1.37244.1.7 = A001B002, 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020004 Subject Public Key Info: Public Key
Algorithm: id-ecPublicKey Public-Key: (256 bit) pub: 04:21:4c:90:eb:d7:43:5a:e4:b6:ad:18:e8:b8:27:
                    1e:a9:a3:dc:f5:4c:e4:fe:ef:2e:a9:e2:a7:17:5f:
                    62:ce:63:42:a9:bd:ac:1e:69:9e:f9:a4:9a:98:e2:
                    e2:ce:83:40:9d:1f:55:f2:ea:35:28:0b:1f:a5:c6:
                    ef:8e:59:a5:52
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                64:0A:26:16:95:B3:94:8C:59:CE:2F:AE:14:EC:49:28:A9:2E:10:AE
            X509v3 Authority Key Identifier:
                keyid:AA:80:D4:9F:DC:0E:8C:7F:81:E2:FF:07:56:2E:B1:C3:AC:F8:6E:F9

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:10:9d:42:4e:e0:bb:19:c4:60:1f:9f:67:80:c1:
         91:46:fa:61:8b:0b:74:5c:4b:50:44:88:af:70:45:8f:06:4d:
         02:20:07:45:48:41:84:98:03:1c:be:b3:73:bf:eb:ea:2e:21:
         d3:db:1f:21:ab:0c:ea:6b:b5:13:c8:5e:19:d3:5e:33

-----BEGIN CERTIFICATE-----
MIICTjCCAfWgAwIBAgIIH7mtpLJTSR0wCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowgZAxGDAW
BgorBgEEAYKifAEGDAhBMDAxQjAwMTEWMBQGA1UEAwwNVGVzdENlcnQwMl8wNDEg
MB4GCisGAQQBgqJ8AQUMEEZBQjAwMDAwMDAwMDAwMUQxGDAWBgorBgEEAYKifAEH
DAhBMDAxQjAwMjEgMB4GCisGAQQBgqJ8AQEMEERFREVERURFMDAwMjAwMDQwWTAT
BgcqhkjOPQIBBggqhkjOPQMBBwNCAAQhTJDr10Na5LatGOi4Jx6po9z1TOT+7y6p
4qcXX2LOY0KpvaweaZ75pJqY4uLOg0CdH1Xy6jUoCx+lxu+OWaVSo4GDMIGAMAwG
A1UdEwEB/wQCMAAwDgYDVR0PAQH/BAQDAgWgMCAGA1UdJQEB/wQWMBQGCCsGAQUF
BwMCBggrBgEFBQcDATAdBgNVHQ4EFgQUZAomFpWzlIxZzi+uFOxJKKkuEK4wHwYD
VR0jBBgwFoAUqoDUn9wOjH+B4v8HVi6xw6z4bvkwCgYIKoZIzj0EAwIDRwAwRAIg
EJ1CTuC7GcRgH59ngMGRRvphiwt0XEtQRIivcEWPBk0CIAdFSEGEmAMcvrNzv+vq
LiHT2x8hqwzqa7UTyF4Z014z
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEINO6LMKsSsNj/+Fw69qhS5dWEWOUSBO0n/4E683UKmc7oAoGCCqGSM49
AwEHoUQDQgAEIUyQ69dDWuS2rRjouCceqaPc9Uzk/u8uqeKnF19izmNCqb2sHmme
+aSamOLizoNAnR9V8uo1KAsfpcbvjlmlUg==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_04_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x1f, 0xb9, 0xad, 0xa4, 0xb2, 0x53, 0x49, 0x1d, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x26, 0x16, 0x01, 0xb0, 0x01,
    0xa0, 0x2c, 0x01, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x30, 0x32, 0x5f, 0x30, 0x34, 0x27, 0x15, 0x1d, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x26, 0x17, 0x02, 0xb0, 0x01, 0xa0, 0x27, 0x11, 0x04, 0x00, 0x02, 0x00, 0xde, 0xde, 0xde,
    0xde, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x21, 0x4c, 0x90, 0xeb, 0xd7, 0x43, 0x5a, 0xe4, 0xb6,
    0xad, 0x18, 0xe8, 0xb8, 0x27, 0x1e, 0xa9, 0xa3, 0xdc, 0xf5, 0x4c, 0xe4, 0xfe, 0xef, 0x2e, 0xa9, 0xe2, 0xa7, 0x17, 0x5f, 0x62,
    0xce, 0x63, 0x42, 0xa9, 0xbd, 0xac, 0x1e, 0x69, 0x9e, 0xf9, 0xa4, 0x9a, 0x98, 0xe2, 0xe2, 0xce, 0x83, 0x40, 0x9d, 0x1f, 0x55,
    0xf2, 0xea, 0x35, 0x28, 0x0b, 0x1f, 0xa5, 0xc6, 0xef, 0x8e, 0x59, 0xa5, 0x52, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24,
    0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04, 0x01, 0x18, 0x30, 0x04, 0x14, 0x64, 0x0a, 0x26, 0x16, 0x95, 0xb3, 0x94, 0x8c, 0x59,
    0xce, 0x2f, 0xae, 0x14, 0xec, 0x49, 0x28, 0xa9, 0x2e, 0x10, 0xae, 0x30, 0x05, 0x14, 0xaa, 0x80, 0xd4, 0x9f, 0xdc, 0x0e, 0x8c,
    0x7f, 0x81, 0xe2, 0xff, 0x07, 0x56, 0x2e, 0xb1, 0xc3, 0xac, 0xf8, 0x6e, 0xf9, 0x18, 0x30, 0x0b, 0x40, 0x10, 0x9d, 0x42, 0x4e,
    0xe0, 0xbb, 0x19, 0xc4, 0x60, 0x1f, 0x9f, 0x67, 0x80, 0xc1, 0x91, 0x46, 0xfa, 0x61, 0x8b, 0x0b, 0x74, 0x5c, 0x4b, 0x50, 0x44,
    0x88, 0xaf, 0x70, 0x45, 0x8f, 0x06, 0x4d, 0x07, 0x45, 0x48, 0x41, 0x84, 0x98, 0x03, 0x1c, 0xbe, 0xb3, 0x73, 0xbf, 0xeb, 0xea,
    0x2e, 0x21, 0xd3, 0xdb, 0x1f, 0x21, 0xab, 0x0c, 0xea, 0x6b, 0xb5, 0x13, 0xc8, 0x5e, 0x19, 0xd3, 0x5e, 0x33, 0x18,
};

extern const uint32_t sTestCert_Node02_04_Chip_Len = sizeof(sTestCert_Node02_04_Chip);

extern const uint8_t sTestCert_Node02_04_DER[] = {
    0x30, 0x82, 0x02, 0x4e, 0x30, 0x82, 0x01, 0xf5, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x1f, 0xb9, 0xad, 0xa4, 0xb2, 0x53,
    0x49, 0x1d, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x81, 0x90, 0x31, 0x18, 0x30, 0x16, 0x06, 0x0a, 0x2b,
    0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x06, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42, 0x30, 0x30, 0x31, 0x31, 0x16,
    0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x30, 0x32, 0x5f, 0x30,
    0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41,
    0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x31, 0x18, 0x30, 0x16, 0x06, 0x0a, 0x2b,
    0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x07, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42, 0x30, 0x30, 0x32, 0x31, 0x20,
    0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44,
    0x45, 0x44, 0x45, 0x30, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x34, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,
    0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x21, 0x4c, 0x90, 0xeb,
    0xd7, 0x43, 0x5a, 0xe4, 0xb6, 0xad, 0x18, 0xe8, 0xb8, 0x27, 0x1e, 0xa9, 0xa3, 0xdc, 0xf5, 0x4c, 0xe4, 0xfe, 0xef, 0x2e, 0xa9,
    0xe2, 0xa7, 0x17, 0x5f, 0x62, 0xce, 0x63, 0x42, 0xa9, 0xbd, 0xac, 0x1e, 0x69, 0x9e, 0xf9, 0xa4, 0x9a, 0x98, 0xe2, 0xe2, 0xce,
    0x83, 0x40, 0x9d, 0x1f, 0x55, 0xf2, 0xea, 0x35, 0x28, 0x0b, 0x1f, 0xa5, 0xc6, 0xef, 0x8e, 0x59, 0xa5, 0x52, 0xa3, 0x81, 0x83,
    0x30, 0x81, 0x80, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03,
    0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01,
    0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05,
    0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x64, 0x0a, 0x26, 0x16, 0x95, 0xb3,
    0x94, 0x8c, 0x59, 0xce, 0x2f, 0xae, 0x14, 0xec, 0x49, 0x28, 0xa9, 0x2e, 0x10, 0xae, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23,
    0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xaa, 0x80, 0xd4, 0x9f, 0xdc, 0x0e, 0x8c, 0x7f, 0x81, 0xe2, 0xff, 0x07, 0x56, 0x2e, 0xb1,
    0xc3, 0xac, 0xf8, 0x6e, 0xf9, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30,
    0x44, 0x02, 0x20, 0x10, 0x9d, 0x42, 0x4e, 0xe0, 0xbb, 0x19, 0xc4, 0x60, 0x1f, 0x9f, 0x67, 0x80, 0xc1, 0x91, 0x46, 0xfa, 0x61,
    0x8b, 0x0b, 0x74, 0x5c, 0x4b, 0x50, 0x44, 0x88, 0xaf, 0x70, 0x45, 0x8f, 0x06, 0x4d, 0x02, 0x20, 0x07, 0x45, 0x48, 0x41, 0x84,
    0x98, 0x03, 0x1c, 0xbe, 0xb3, 0x73, 0xbf, 0xeb, 0xea, 0x2e, 0x21, 0xd3, 0xdb, 0x1f, 0x21, 0xab, 0x0c, 0xea, 0x6b, 0xb5, 0x13,
    0xc8, 0x5e, 0x19, 0xd3, 0x5e, 0x33,
};

extern const uint32_t sTestCert_Node02_04_DER_Len = sizeof(sTestCert_Node02_04_DER);

extern const uint8_t sTestCert_Node02_04_PublicKey[] = {
    0x04, 0x21, 0x4c, 0x90, 0xeb, 0xd7, 0x43, 0x5a, 0xe4, 0xb6, 0xad, 0x18, 0xe8, 0xb8, 0x27, 0x1e, 0xa9,
    0xa3, 0xdc, 0xf5, 0x4c, 0xe4, 0xfe, 0xef, 0x2e, 0xa9, 0xe2, 0xa7, 0x17, 0x5f, 0x62, 0xce, 0x63, 0x42,
    0xa9, 0xbd, 0xac, 0x1e, 0x69, 0x9e, 0xf9, 0xa4, 0x9a, 0x98, 0xe2, 0xe2, 0xce, 0x83, 0x40, 0x9d, 0x1f,
    0x55, 0xf2, 0xea, 0x35, 0x28, 0x0b, 0x1f, 0xa5, 0xc6, 0xef, 0x8e, 0x59, 0xa5, 0x52,
};

extern const uint8_t sTestCert_Node02_04_PublicKey_Len = sizeof(sTestCert_Node02_04_PublicKey);

extern const uint8_t sTestCert_Node02_04_PrivateKey[] = {
    0xd3, 0xba, 0x2c, 0xc2, 0xac, 0x4a, 0xc3, 0x63, 0xff, 0xe1, 0x70, 0xeb, 0xda, 0xa1, 0x4b, 0x97,
    0x56, 0x11, 0x63, 0x94, 0x48, 0x13, 0xb4, 0x9f, 0xfe, 0x04, 0xeb, 0xcd, 0xd4, 0x2a, 0x67, 0x3b,
};

extern const uint8_t sTestCert_Node02_04_PrivateKey_Len = sizeof(sTestCert_Node02_04_PrivateKey);

extern const uint8_t sTestCert_Node02_04_SubjectKeyId[] = {
    0x64, 0x0A, 0x26, 0x16, 0x95, 0xB3, 0x94, 0x8C, 0x59, 0xCE, 0x2F, 0xAE, 0x14, 0xEC, 0x49, 0x28, 0xA9, 0x2E, 0x10, 0xAE,
};

extern const uint8_t sTestCert_Node02_04_SubjectKeyId_Len = sizeof(sTestCert_Node02_04_SubjectKeyId);

/**************  Test Node02_05 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 3323234319109340496 (0x2e1e800187e63d50)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.6 = A001B001, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D, 1.3.6.1.4.1.37244.1.7 =
A001B002, 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020005 Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256
bit) pub: 04:4f:98:e3:61:f1:aa:56:09:ae:f6:bd:be:26:e8: 3a:2c:8f:b2:c5:4d:ba:35:cd:13:83:44:c8:23:c0:
                    51:d8:6e:f8:eb:f7:c8:d5:e1:43:7c:b6:70:b5:65:
                    58:56:2e:a6:6e:36:c4:0e:9b:c8:e4:ca:bc:61:9e:
                    99:13:9e:a9:06
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                CE:B3:19:92:8F:2E:6E:D8:94:83:E2:A2:06:4E:7D:F3:07:99:FD:7B
            X509v3 Authority Key Identifier:
                keyid:AA:80:D4:9F:DC:0E:8C:7F:81:E2:FF:07:56:2E:B1:C3:AC:F8:6E:F9

            X509v3 Subject Alternative Name:
                email:test@chip.org
    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:61:bb:bd:a0:d9:94:4e:1a:8e:8e:07:9c:3a:90:
         ed:58:cf:e6:8c:22:b3:b9:15:7c:74:b8:e0:b3:ba:28:86:11:
         02:21:00:e4:90:fd:c9:56:c6:ab:9e:d6:76:dc:35:ad:30:63:
         d3:ac:1c:b2:e3:18:9f:d3:af:03:a7:c0:fc:d4:79:ee:96

-----BEGIN CERTIFICATE-----
MIICUDCCAfagAwIBAgIILh6AAYfmPVAwCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MloweDEYMBYG
CisGAQQBgqJ8AQYMCEEwMDFCMDAxMSAwHgYKKwYBBAGConwBBQwQRkFCMDAwMDAw
MDAwMDAxRDEYMBYGCisGAQQBgqJ8AQcMCEEwMDFCMDAyMSAwHgYKKwYBBAGConwB
AQwQREVERURFREUwMDAyMDAwNTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABE+Y
42HxqlYJrva9viboOiyPssVNujXNE4NEyCPAUdhu+Ov3yNXhQ3y2cLVlWFYupm42
xA6byOTKvGGemROeqQajgZ0wgZowDAYDVR0TAQH/BAIwADAOBgNVHQ8BAf8EBAMC
BaAwIAYDVR0lAQH/BBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMB0GA1UdDgQWBBTO
sxmSjy5u2JSD4qIGTn3zB5n9ezAfBgNVHSMEGDAWgBSqgNSf3A6Mf4Hi/wdWLrHD
rPhu+TAYBgNVHREEETAPgQ10ZXN0QGNoaXAub3JnMAoGCCqGSM49BAMCA0gAMEUC
IGG7vaDZlE4ajo4HnDqQ7VjP5owis7kVfHS44LO6KIYRAiEA5JD9yVbGq57Wdtw1
rTBj06wcsuMYn9OvA6fA/NR57pY=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIHg6wCKiE1nrr64cUKCY9JlQxs6CAJqWUWu7HPRJRWlHoAoGCCqGSM49
AwEHoUQDQgAET5jjYfGqVgmu9r2+Jug6LI+yxU26Nc0Tg0TII8BR2G746/fI1eFD
fLZwtWVYVi6mbjbEDpvI5Mq8YZ6ZE56pBg==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_05_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x2e, 0x1e, 0x80, 0x01, 0x87, 0xe6, 0x3d, 0x50, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x26, 0x16, 0x01, 0xb0, 0x01,
    0xa0, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x26, 0x17, 0x02, 0xb0, 0x01, 0xa0, 0x27, 0x11, 0x05, 0x00,
    0x02, 0x00, 0xde, 0xde, 0xde, 0xde, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x4f, 0x98, 0xe3, 0x61,
    0xf1, 0xaa, 0x56, 0x09, 0xae, 0xf6, 0xbd, 0xbe, 0x26, 0xe8, 0x3a, 0x2c, 0x8f, 0xb2, 0xc5, 0x4d, 0xba, 0x35, 0xcd, 0x13, 0x83,
    0x44, 0xc8, 0x23, 0xc0, 0x51, 0xd8, 0x6e, 0xf8, 0xeb, 0xf7, 0xc8, 0xd5, 0xe1, 0x43, 0x7c, 0xb6, 0x70, 0xb5, 0x65, 0x58, 0x56,
    0x2e, 0xa6, 0x6e, 0x36, 0xc4, 0x0e, 0x9b, 0xc8, 0xe4, 0xca, 0xbc, 0x61, 0x9e, 0x99, 0x13, 0x9e, 0xa9, 0x06, 0x37, 0x0a, 0x35,
    0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04, 0x01, 0x18, 0x30, 0x04, 0x14, 0xce, 0xb3, 0x19, 0x92,
    0x8f, 0x2e, 0x6e, 0xd8, 0x94, 0x83, 0xe2, 0xa2, 0x06, 0x4e, 0x7d, 0xf3, 0x07, 0x99, 0xfd, 0x7b, 0x30, 0x05, 0x14, 0xaa, 0x80,
    0xd4, 0x9f, 0xdc, 0x0e, 0x8c, 0x7f, 0x81, 0xe2, 0xff, 0x07, 0x56, 0x2e, 0xb1, 0xc3, 0xac, 0xf8, 0x6e, 0xf9, 0x30, 0x06, 0x1a,
    0x30, 0x18, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x11, 0x30, 0x0f, 0x81, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x40, 0x63, 0x68, 0x69,
    0x70, 0x2e, 0x6f, 0x72, 0x67, 0x18, 0x30, 0x0b, 0x40, 0x61, 0xbb, 0xbd, 0xa0, 0xd9, 0x94, 0x4e, 0x1a, 0x8e, 0x8e, 0x07, 0x9c,
    0x3a, 0x90, 0xed, 0x58, 0xcf, 0xe6, 0x8c, 0x22, 0xb3, 0xb9, 0x15, 0x7c, 0x74, 0xb8, 0xe0, 0xb3, 0xba, 0x28, 0x86, 0x11, 0xe4,
    0x90, 0xfd, 0xc9, 0x56, 0xc6, 0xab, 0x9e, 0xd6, 0x76, 0xdc, 0x35, 0xad, 0x30, 0x63, 0xd3, 0xac, 0x1c, 0xb2, 0xe3, 0x18, 0x9f,
    0xd3, 0xaf, 0x03, 0xa7, 0xc0, 0xfc, 0xd4, 0x79, 0xee, 0x96, 0x18,
};

extern const uint32_t sTestCert_Node02_05_Chip_Len = sizeof(sTestCert_Node02_05_Chip);

extern const uint8_t sTestCert_Node02_05_DER[] = {
    0x30, 0x82, 0x02, 0x50, 0x30, 0x82, 0x01, 0xf6, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x2e, 0x1e, 0x80, 0x01, 0x87, 0xe6,
    0x3d, 0x50, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x78, 0x31, 0x18, 0x30, 0x16, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x06, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42, 0x30, 0x30, 0x31, 0x31, 0x20, 0x30,
    0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x31, 0x18, 0x30, 0x16, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01,
    0x82, 0xa2, 0x7c, 0x01, 0x07, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a,
    0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30,
    0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x35, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06,
    0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x4f, 0x98, 0xe3, 0x61, 0xf1, 0xaa, 0x56, 0x09,
    0xae, 0xf6, 0xbd, 0xbe, 0x26, 0xe8, 0x3a, 0x2c, 0x8f, 0xb2, 0xc5, 0x4d, 0xba, 0x35, 0xcd, 0x13, 0x83, 0x44, 0xc8, 0x23, 0xc0,
    0x51, 0xd8, 0x6e, 0xf8, 0xeb, 0xf7, 0xc8, 0xd5, 0xe1, 0x43, 0x7c, 0xb6, 0x70, 0xb5, 0x65, 0x58, 0x56, 0x2e, 0xa6, 0x6e, 0x36,
    0xc4, 0x0e, 0x9b, 0xc8, 0xe4, 0xca, 0xbc, 0x61, 0x9e, 0x99, 0x13, 0x9e, 0xa9, 0x06, 0xa3, 0x81, 0x9d, 0x30, 0x81, 0x9a, 0x30,
    0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01,
    0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30,
    0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01,
    0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xce, 0xb3, 0x19, 0x92, 0x8f, 0x2e, 0x6e, 0xd8, 0x94, 0x83,
    0xe2, 0xa2, 0x06, 0x4e, 0x7d, 0xf3, 0x07, 0x99, 0xfd, 0x7b, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16,
    0x80, 0x14, 0xaa, 0x80, 0xd4, 0x9f, 0xdc, 0x0e, 0x8c, 0x7f, 0x81, 0xe2, 0xff, 0x07, 0x56, 0x2e, 0xb1, 0xc3, 0xac, 0xf8, 0x6e,
    0xf9, 0x30, 0x18, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x11, 0x30, 0x0f, 0x81, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x40, 0x63, 0x68,
    0x69, 0x70, 0x2e, 0x6f, 0x72, 0x67, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00,
    0x30, 0x45, 0x02, 0x20, 0x61, 0xbb, 0xbd, 0xa0, 0xd9, 0x94, 0x4e, 0x1a, 0x8e, 0x8e, 0x07, 0x9c, 0x3a, 0x90, 0xed, 0x58, 0xcf,
    0xe6, 0x8c, 0x22, 0xb3, 0xb9, 0x15, 0x7c, 0x74, 0xb8, 0xe0, 0xb3, 0xba, 0x28, 0x86, 0x11, 0x02, 0x21, 0x00, 0xe4, 0x90, 0xfd,
    0xc9, 0x56, 0xc6, 0xab, 0x9e, 0xd6, 0x76, 0xdc, 0x35, 0xad, 0x30, 0x63, 0xd3, 0xac, 0x1c, 0xb2, 0xe3, 0x18, 0x9f, 0xd3, 0xaf,
    0x03, 0xa7, 0xc0, 0xfc, 0xd4, 0x79, 0xee, 0x96,
};

extern const uint32_t sTestCert_Node02_05_DER_Len = sizeof(sTestCert_Node02_05_DER);

extern const uint8_t sTestCert_Node02_05_PublicKey[] = {
    0x04, 0x4f, 0x98, 0xe3, 0x61, 0xf1, 0xaa, 0x56, 0x09, 0xae, 0xf6, 0xbd, 0xbe, 0x26, 0xe8, 0x3a, 0x2c,
    0x8f, 0xb2, 0xc5, 0x4d, 0xba, 0x35, 0xcd, 0x13, 0x83, 0x44, 0xc8, 0x23, 0xc0, 0x51, 0xd8, 0x6e, 0xf8,
    0xeb, 0xf7, 0xc8, 0xd5, 0xe1, 0x43, 0x7c, 0xb6, 0x70, 0xb5, 0x65, 0x58, 0x56, 0x2e, 0xa6, 0x6e, 0x36,
    0xc4, 0x0e, 0x9b, 0xc8, 0xe4, 0xca, 0xbc, 0x61, 0x9e, 0x99, 0x13, 0x9e, 0xa9, 0x06,
};

extern const uint8_t sTestCert_Node02_05_PublicKey_Len = sizeof(sTestCert_Node02_05_PublicKey);

extern const uint8_t sTestCert_Node02_05_PrivateKey[] = {
    0x78, 0x3a, 0xc0, 0x22, 0xa2, 0x13, 0x59, 0xeb, 0xaf, 0xae, 0x1c, 0x50, 0xa0, 0x98, 0xf4, 0x99,
    0x50, 0xc6, 0xce, 0x82, 0x00, 0x9a, 0x96, 0x51, 0x6b, 0xbb, 0x1c, 0xf4, 0x49, 0x45, 0x69, 0x47,
};

extern const uint8_t sTestCert_Node02_05_PrivateKey_Len = sizeof(sTestCert_Node02_05_PrivateKey);

extern const uint8_t sTestCert_Node02_05_SubjectKeyId[] = {
    0xCE, 0xB3, 0x19, 0x92, 0x8F, 0x2E, 0x6E, 0xD8, 0x94, 0x83, 0xE2, 0xA2, 0x06, 0x4E, 0x7D, 0xF3, 0x07, 0x99, 0xFD, 0x7B,
};

extern const uint8_t sTestCert_Node02_05_SubjectKeyId_Len = sizeof(sTestCert_Node02_05_SubjectKeyId);

/**************  Test Node02_06 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 4390281400859570631 (0x3ced69ac623d31c7)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020006, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:ff:d5:4e:a4:cc:cb:11:9a:c5:20:ad:ea:40:79:
                    09:d8:e3:b3:e1:b3:93:07:a6:87:72:46:99:a3:7c:
                    bd:9d:3f:0d:1c:d5:51:91:ec:b1:4e:fc:49:9d:e5:
                    94:e2:53:93:32:33:9c:6a:07:86:e4:02:11:62:46:
                    d4:c0:8c:35:53
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                79:0D:C0:E0:EC:DF:27:B9:4E:88:AF:73:B8:09:4B:45:B1:D3:6A:91
            X509v3 Authority Key Identifier:
                keyid:AA:80:D4:9F:DC:0E:8C:7F:81:E2:FF:07:56:2E:B1:C3:AC:F8:6E:F9

            X509v3 Subject Alternative Name:
                email:test@chip.org
            Authority Information Access:
                OCSP - URI:test

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:6b:0e:67:c5:d4:e9:8e:4d:33:e7:d8:6c:0b:cd:
         45:d0:da:d4:4a:37:0c:55:39:dc:44:ce:b8:50:48:62:0d:a0:
         02:20:03:21:0e:81:78:c5:8b:07:66:fb:c7:f6:29:70:3e:dd:
         f6:e7:e9:8c:6c:44:b2:a5:a3:c7:b6:ca:df:e9:01:f1

-----BEGIN CERTIFICATE-----
MIICPTCCAeSgAwIBAgIIPO1prGI9MccwCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQEMEERFREVERURFMDAwMjAwMDYxIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE/9VOpMzL
EZrFIK3qQHkJ2OOz4bOTB6aHckaZo3y9nT8NHNVRkeyxTvxJneWU4lOTMjOcageG
5AIRYkbUwIw1U6OBvzCBvDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIFoDAg
BgNVHSUBAf8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFHkNwODs
3ye5Toivc7gJS0Wx02qRMB8GA1UdIwQYMBaAFKqA1J/cDox/geL/B1YuscOs+G75
MBgGA1UdEQQRMA+BDXRlc3RAY2hpcC5vcmcwIAYIKwYBBQUHAQEEFDASMBAGCCsG
AQUFBzABhgR0ZXN0MAoGCCqGSM49BAMCA0cAMEQCIGsOZ8XU6Y5NM+fYbAvNRdDa
1Eo3DFU53ETOuFBIYg2gAiADIQ6BeMWLB2b7x/YpcD7d9ufpjGxEsqWjx7bK3+kB
8Q==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIItbfilw1NM3QA+RxNTfDPQyYk8NUUZB/tE0521tW2+ooAoGCCqGSM49
AwEHoUQDQgAE/9VOpMzLEZrFIK3qQHkJ2OOz4bOTB6aHckaZo3y9nT8NHNVRkeyx
TvxJneWU4lOTMjOcageG5AIRYkbUwIw1Uw==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_06_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x3c, 0xed, 0x69, 0xac, 0x62, 0x3d, 0x31, 0xc7, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x11, 0x06, 0x00, 0x02,
    0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08,
    0x01, 0x30, 0x09, 0x41, 0x04, 0xff, 0xd5, 0x4e, 0xa4, 0xcc, 0xcb, 0x11, 0x9a, 0xc5, 0x20, 0xad, 0xea, 0x40, 0x79, 0x09, 0xd8,
    0xe3, 0xb3, 0xe1, 0xb3, 0x93, 0x07, 0xa6, 0x87, 0x72, 0x46, 0x99, 0xa3, 0x7c, 0xbd, 0x9d, 0x3f, 0x0d, 0x1c, 0xd5, 0x51, 0x91,
    0xec, 0xb1, 0x4e, 0xfc, 0x49, 0x9d, 0xe5, 0x94, 0xe2, 0x53, 0x93, 0x32, 0x33, 0x9c, 0x6a, 0x07, 0x86, 0xe4, 0x02, 0x11, 0x62,
    0x46, 0xd4, 0xc0, 0x8c, 0x35, 0x53, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04,
    0x01, 0x18, 0x30, 0x04, 0x14, 0x79, 0x0d, 0xc0, 0xe0, 0xec, 0xdf, 0x27, 0xb9, 0x4e, 0x88, 0xaf, 0x73, 0xb8, 0x09, 0x4b, 0x45,
    0xb1, 0xd3, 0x6a, 0x91, 0x30, 0x05, 0x14, 0xaa, 0x80, 0xd4, 0x9f, 0xdc, 0x0e, 0x8c, 0x7f, 0x81, 0xe2, 0xff, 0x07, 0x56, 0x2e,
    0xb1, 0xc3, 0xac, 0xf8, 0x6e, 0xf9, 0x30, 0x06, 0x1a, 0x30, 0x18, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x11, 0x30, 0x0f, 0x81,
    0x0d, 0x74, 0x65, 0x73, 0x74, 0x40, 0x63, 0x68, 0x69, 0x70, 0x2e, 0x6f, 0x72, 0x67, 0x30, 0x06, 0x22, 0x30, 0x20, 0x06, 0x08,
    0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x14, 0x30, 0x12, 0x30, 0x10, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05,
    0x07, 0x30, 0x01, 0x86, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x30, 0x0b, 0x40, 0x6b, 0x0e, 0x67, 0xc5, 0xd4, 0xe9, 0x8e, 0x4d,
    0x33, 0xe7, 0xd8, 0x6c, 0x0b, 0xcd, 0x45, 0xd0, 0xda, 0xd4, 0x4a, 0x37, 0x0c, 0x55, 0x39, 0xdc, 0x44, 0xce, 0xb8, 0x50, 0x48,
    0x62, 0x0d, 0xa0, 0x03, 0x21, 0x0e, 0x81, 0x78, 0xc5, 0x8b, 0x07, 0x66, 0xfb, 0xc7, 0xf6, 0x29, 0x70, 0x3e, 0xdd, 0xf6, 0xe7,
    0xe9, 0x8c, 0x6c, 0x44, 0xb2, 0xa5, 0xa3, 0xc7, 0xb6, 0xca, 0xdf, 0xe9, 0x01, 0xf1, 0x18,
};

extern const uint32_t sTestCert_Node02_06_Chip_Len = sizeof(sTestCert_Node02_06_Chip);

extern const uint8_t sTestCert_Node02_06_DER[] = {
    0x30, 0x82, 0x02, 0x3d, 0x30, 0x82, 0x01, 0xe4, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x3c, 0xed, 0x69, 0xac, 0x62, 0x3d,
    0x31, 0xc7, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30,
    0x32, 0x30, 0x30, 0x30, 0x36, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0xff, 0xd5, 0x4e, 0xa4, 0xcc, 0xcb, 0x11, 0x9a, 0xc5, 0x20, 0xad, 0xea, 0x40, 0x79, 0x09, 0xd8, 0xe3, 0xb3,
    0xe1, 0xb3, 0x93, 0x07, 0xa6, 0x87, 0x72, 0x46, 0x99, 0xa3, 0x7c, 0xbd, 0x9d, 0x3f, 0x0d, 0x1c, 0xd5, 0x51, 0x91, 0xec, 0xb1,
    0x4e, 0xfc, 0x49, 0x9d, 0xe5, 0x94, 0xe2, 0x53, 0x93, 0x32, 0x33, 0x9c, 0x6a, 0x07, 0x86, 0xe4, 0x02, 0x11, 0x62, 0x46, 0xd4,
    0xc0, 0x8c, 0x35, 0x53, 0xa3, 0x81, 0xbf, 0x30, 0x81, 0xbc, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04,
    0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20,
    0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03,
    0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04,
    0x14, 0x79, 0x0d, 0xc0, 0xe0, 0xec, 0xdf, 0x27, 0xb9, 0x4e, 0x88, 0xaf, 0x73, 0xb8, 0x09, 0x4b, 0x45, 0xb1, 0xd3, 0x6a, 0x91,
    0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xaa, 0x80, 0xd4, 0x9f, 0xdc, 0x0e, 0x8c, 0x7f,
    0x81, 0xe2, 0xff, 0x07, 0x56, 0x2e, 0xb1, 0xc3, 0xac, 0xf8, 0x6e, 0xf9, 0x30, 0x18, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x11,
    0x30, 0x0f, 0x81, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x40, 0x63, 0x68, 0x69, 0x70, 0x2e, 0x6f, 0x72, 0x67, 0x30, 0x20, 0x06, 0x08,
    0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x14, 0x30, 0x12, 0x30, 0x10, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05,
    0x07, 0x30, 0x01, 0x86, 0x04, 0x74, 0x65, 0x73, 0x74, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02,
    0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x6b, 0x0e, 0x67, 0xc5, 0xd4, 0xe9, 0x8e, 0x4d, 0x33, 0xe7, 0xd8, 0x6c, 0x0b, 0xcd,
    0x45, 0xd0, 0xda, 0xd4, 0x4a, 0x37, 0x0c, 0x55, 0x39, 0xdc, 0x44, 0xce, 0xb8, 0x50, 0x48, 0x62, 0x0d, 0xa0, 0x02, 0x20, 0x03,
    0x21, 0x0e, 0x81, 0x78, 0xc5, 0x8b, 0x07, 0x66, 0xfb, 0xc7, 0xf6, 0x29, 0x70, 0x3e, 0xdd, 0xf6, 0xe7, 0xe9, 0x8c, 0x6c, 0x44,
    0xb2, 0xa5, 0xa3, 0xc7, 0xb6, 0xca, 0xdf, 0xe9, 0x01, 0xf1,
};

extern const uint32_t sTestCert_Node02_06_DER_Len = sizeof(sTestCert_Node02_06_DER);

extern const uint8_t sTestCert_Node02_06_PublicKey[] = {
    0x04, 0xff, 0xd5, 0x4e, 0xa4, 0xcc, 0xcb, 0x11, 0x9a, 0xc5, 0x20, 0xad, 0xea, 0x40, 0x79, 0x09, 0xd8,
    0xe3, 0xb3, 0xe1, 0xb3, 0x93, 0x07, 0xa6, 0x87, 0x72, 0x46, 0x99, 0xa3, 0x7c, 0xbd, 0x9d, 0x3f, 0x0d,
    0x1c, 0xd5, 0x51, 0x91, 0xec, 0xb1, 0x4e, 0xfc, 0x49, 0x9d, 0xe5, 0x94, 0xe2, 0x53, 0x93, 0x32, 0x33,
    0x9c, 0x6a, 0x07, 0x86, 0xe4, 0x02, 0x11, 0x62, 0x46, 0xd4, 0xc0, 0x8c, 0x35, 0x53,
};

extern const uint8_t sTestCert_Node02_06_PublicKey_Len = sizeof(sTestCert_Node02_06_PublicKey);

extern const uint8_t sTestCert_Node02_06_PrivateKey[] = {
    0x8b, 0x5b, 0x7e, 0x29, 0x70, 0xd4, 0xd3, 0x37, 0x40, 0x0f, 0x91, 0xc4, 0xd4, 0xdf, 0x0c, 0xf4,
    0x32, 0x62, 0x4f, 0x0d, 0x51, 0x46, 0x41, 0xfe, 0xd1, 0x34, 0xe7, 0x6d, 0x6d, 0x5b, 0x6f, 0xa8,
};

extern const uint8_t sTestCert_Node02_06_PrivateKey_Len = sizeof(sTestCert_Node02_06_PrivateKey);

extern const uint8_t sTestCert_Node02_06_SubjectKeyId[] = {
    0x79, 0x0D, 0xC0, 0xE0, 0xEC, 0xDF, 0x27, 0xB9, 0x4E, 0x88, 0xAF, 0x73, 0xB8, 0x09, 0x4B, 0x45, 0xB1, 0xD3, 0x6A, 0x91,
};

extern const uint8_t sTestCert_Node02_06_SubjectKeyId_Len = sizeof(sTestCert_Node02_06_SubjectKeyId);

/**************  Test Node02_07 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 3540261946142048406 (0x3121897b9fa14096)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020007, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:78:fa:31:6f:90:9f:88:f7:40:1e:9b:59:c7:e6:
                    05:2a:90:55:72:9f:4d:18:a1:52:ce:f1:23:31:c7:
                    78:9f:81:94:ee:54:48:89:ee:a3:6e:a5:c7:fb:ab:
                    8b:f7:aa:e0:85:52:50:a5:76:77:01:41:bf:3b:a8:
                    23:2c:a3:e2:58
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                CA:10:79:B3:26:AC:09:8A:4B:1F:B2:0B:DD:49:C2:08:F8:7F:DE:A8
            X509v3 Authority Key Identifier:
                keyid:AA:80:D4:9F:DC:0E:8C:7F:81:E2:FF:07:56:2E:B1:C3:AC:F8:6E:F9

            X509v3 Subject Alternative Name: critical
                email:test@chip.org
            Authority Information Access:
                OCSP - URI:test

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:21:00:ce:8f:e3:52:3d:40:5e:46:05:6c:3b:37:12:
         56:ca:b5:b9:be:6d:f4:d4:1d:87:d1:83:bc:a8:df:4f:f7:5a:
         d4:02:20:08:3f:5e:0e:5e:c6:70:93:2f:40:7d:e6:5d:9c:a0:
         7e:3e:35:1f:93:e5:9e:80:a7:fa:b6:15:48:53:73:3d:60

-----BEGIN CERTIFICATE-----
MIICQTCCAeegAwIBAgIIMSGJe5+hQJYwCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQEMEERFREVERURFMDAwMjAwMDcxIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEePoxb5Cf
iPdAHptZx+YFKpBVcp9NGKFSzvEjMcd4n4GU7lRIie6jbqXH+6uL96rghVJQpXZ3
AUG/O6gjLKPiWKOBwjCBvzAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIFoDAg
BgNVHSUBAf8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFMoQebMm
rAmKSx+yC91Jwgj4f96oMB8GA1UdIwQYMBaAFKqA1J/cDox/geL/B1YuscOs+G75
MBsGA1UdEQEB/wQRMA+BDXRlc3RAY2hpcC5vcmcwIAYIKwYBBQUHAQEEFDASMBAG
CCsGAQUFBzABhgR0ZXN0MAoGCCqGSM49BAMCA0gAMEUCIQDOj+NSPUBeRgVsOzcS
Vsq1ub5t9NQdh9GDvKjfT/da1AIgCD9eDl7GcJMvQH3mXZygfj41H5PlnoCn+rYV
SFNzPWA=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEINiyXnNSvpxp8ntya31PqFOxbY/gpY9Q1Nox2JnoN7DaoAoGCCqGSM49
AwEHoUQDQgAEePoxb5CfiPdAHptZx+YFKpBVcp9NGKFSzvEjMcd4n4GU7lRIie6j
bqXH+6uL96rghVJQpXZ3AUG/O6gjLKPiWA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_07_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x31, 0x21, 0x89, 0x7b, 0x9f, 0xa1, 0x40, 0x96, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x11, 0x07, 0x00, 0x02,
    0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08,
    0x01, 0x30, 0x09, 0x41, 0x04, 0x78, 0xfa, 0x31, 0x6f, 0x90, 0x9f, 0x88, 0xf7, 0x40, 0x1e, 0x9b, 0x59, 0xc7, 0xe6, 0x05, 0x2a,
    0x90, 0x55, 0x72, 0x9f, 0x4d, 0x18, 0xa1, 0x52, 0xce, 0xf1, 0x23, 0x31, 0xc7, 0x78, 0x9f, 0x81, 0x94, 0xee, 0x54, 0x48, 0x89,
    0xee, 0xa3, 0x6e, 0xa5, 0xc7, 0xfb, 0xab, 0x8b, 0xf7, 0xaa, 0xe0, 0x85, 0x52, 0x50, 0xa5, 0x76, 0x77, 0x01, 0x41, 0xbf, 0x3b,
    0xa8, 0x23, 0x2c, 0xa3, 0xe2, 0x58, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04,
    0x01, 0x18, 0x30, 0x04, 0x14, 0xca, 0x10, 0x79, 0xb3, 0x26, 0xac, 0x09, 0x8a, 0x4b, 0x1f, 0xb2, 0x0b, 0xdd, 0x49, 0xc2, 0x08,
    0xf8, 0x7f, 0xde, 0xa8, 0x30, 0x05, 0x14, 0xaa, 0x80, 0xd4, 0x9f, 0xdc, 0x0e, 0x8c, 0x7f, 0x81, 0xe2, 0xff, 0x07, 0x56, 0x2e,
    0xb1, 0xc3, 0xac, 0xf8, 0x6e, 0xf9, 0x30, 0x06, 0x1d, 0x30, 0x1b, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x01, 0x01, 0xff, 0x04, 0x11,
    0x30, 0x0f, 0x81, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x40, 0x63, 0x68, 0x69, 0x70, 0x2e, 0x6f, 0x72, 0x67, 0x30, 0x06, 0x22, 0x30,
    0x20, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x14, 0x30, 0x12, 0x30, 0x10, 0x06, 0x08, 0x2b, 0x06,
    0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x86, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x30, 0x0b, 0x40, 0xce, 0x8f, 0xe3, 0x52, 0x3d,
    0x40, 0x5e, 0x46, 0x05, 0x6c, 0x3b, 0x37, 0x12, 0x56, 0xca, 0xb5, 0xb9, 0xbe, 0x6d, 0xf4, 0xd4, 0x1d, 0x87, 0xd1, 0x83, 0xbc,
    0xa8, 0xdf, 0x4f, 0xf7, 0x5a, 0xd4, 0x08, 0x3f, 0x5e, 0x0e, 0x5e, 0xc6, 0x70, 0x93, 0x2f, 0x40, 0x7d, 0xe6, 0x5d, 0x9c, 0xa0,
    0x7e, 0x3e, 0x35, 0x1f, 0x93, 0xe5, 0x9e, 0x80, 0xa7, 0xfa, 0xb6, 0x15, 0x48, 0x53, 0x73, 0x3d, 0x60, 0x18,
};

extern const uint32_t sTestCert_Node02_07_Chip_Len = sizeof(sTestCert_Node02_07_Chip);

extern const uint8_t sTestCert_Node02_07_DER[] = {
    0x30, 0x82, 0x02, 0x41, 0x30, 0x82, 0x01, 0xe7, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x31, 0x21, 0x89, 0x7b, 0x9f, 0xa1,
    0x40, 0x96, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30,
    0x32, 0x30, 0x30, 0x30, 0x37, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0x78, 0xfa, 0x31, 0x6f, 0x90, 0x9f, 0x88, 0xf7, 0x40, 0x1e, 0x9b, 0x59, 0xc7, 0xe6, 0x05, 0x2a, 0x90, 0x55,
    0x72, 0x9f, 0x4d, 0x18, 0xa1, 0x52, 0xce, 0xf1, 0x23, 0x31, 0xc7, 0x78, 0x9f, 0x81, 0x94, 0xee, 0x54, 0x48, 0x89, 0xee, 0xa3,
    0x6e, 0xa5, 0xc7, 0xfb, 0xab, 0x8b, 0xf7, 0xaa, 0xe0, 0x85, 0x52, 0x50, 0xa5, 0x76, 0x77, 0x01, 0x41, 0xbf, 0x3b, 0xa8, 0x23,
    0x2c, 0xa3, 0xe2, 0x58, 0xa3, 0x81, 0xc2, 0x30, 0x81, 0xbf, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04,
    0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20,
    0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03,
    0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04,
    0x14, 0xca, 0x10, 0x79, 0xb3, 0x26, 0xac, 0x09, 0x8a, 0x4b, 0x1f, 0xb2, 0x0b, 0xdd, 0x49, 0xc2, 0x08, 0xf8, 0x7f, 0xde, 0xa8,
    0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xaa, 0x80, 0xd4, 0x9f, 0xdc, 0x0e, 0x8c, 0x7f,
    0x81, 0xe2, 0xff, 0x07, 0x56, 0x2e, 0xb1, 0xc3, 0xac, 0xf8, 0x6e, 0xf9, 0x30, 0x1b, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x01, 0x01,
    0xff, 0x04, 0x11, 0x30, 0x0f, 0x81, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x40, 0x63, 0x68, 0x69, 0x70, 0x2e, 0x6f, 0x72, 0x67, 0x30,
    0x20, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x14, 0x30, 0x12, 0x30, 0x10, 0x06, 0x08, 0x2b, 0x06,
    0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x86, 0x04, 0x74, 0x65, 0x73, 0x74, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,
    0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xce, 0x8f, 0xe3, 0x52, 0x3d, 0x40, 0x5e, 0x46, 0x05, 0x6c,
    0x3b, 0x37, 0x12, 0x56, 0xca, 0xb5, 0xb9, 0xbe, 0x6d, 0xf4, 0xd4, 0x1d, 0x87, 0xd1, 0x83, 0xbc, 0xa8, 0xdf, 0x4f, 0xf7, 0x5a,
    0xd4, 0x02, 0x20, 0x08, 0x3f, 0x5e, 0x0e, 0x5e, 0xc6, 0x70, 0x93, 0x2f, 0x40, 0x7d, 0xe6, 0x5d, 0x9c, 0xa0, 0x7e, 0x3e, 0x35,
    0x1f, 0x93, 0xe5, 0x9e, 0x80, 0xa7, 0xfa, 0xb6, 0x15, 0x48, 0x53, 0x73, 0x3d, 0x60,
};

extern const uint32_t sTestCert_Node02_07_DER_Len = sizeof(sTestCert_Node02_07_DER);

extern const uint8_t sTestCert_Node02_07_PublicKey[] = {
    0x04, 0x78, 0xfa, 0x31, 0x6f, 0x90, 0x9f, 0x88, 0xf7, 0x40, 0x1e, 0x9b, 0x59, 0xc7, 0xe6, 0x05, 0x2a,
    0x90, 0x55, 0x72, 0x9f, 0x4d, 0x18, 0xa1, 0x52, 0xce, 0xf1, 0x23, 0x31, 0xc7, 0x78, 0x9f, 0x81, 0x94,
    0xee, 0x54, 0x48, 0x89, 0xee, 0xa3, 0x6e, 0xa5, 0xc7, 0xfb, 0xab, 0x8b, 0xf7, 0xaa, 0xe0, 0x85, 0x52,
    0x50, 0xa5, 0x76, 0x77, 0x01, 0x41, 0xbf, 0x3b, 0xa8, 0x23, 0x2c, 0xa3, 0xe2, 0x58,
};

extern const uint8_t sTestCert_Node02_07_PublicKey_Len = sizeof(sTestCert_Node02_07_PublicKey);

extern const uint8_t sTestCert_Node02_07_PrivateKey[] = {
    0xd8, 0xb2, 0x5e, 0x73, 0x52, 0xbe, 0x9c, 0x69, 0xf2, 0x7b, 0x72, 0x6b, 0x7d, 0x4f, 0xa8, 0x53,
    0xb1, 0x6d, 0x8f, 0xe0, 0xa5, 0x8f, 0x50, 0xd4, 0xda, 0x31, 0xd8, 0x99, 0xe8, 0x37, 0xb0, 0xda,
};

extern const uint8_t sTestCert_Node02_07_PrivateKey_Len = sizeof(sTestCert_Node02_07_PrivateKey);

extern const uint8_t sTestCert_Node02_07_SubjectKeyId[] = {
    0xCA, 0x10, 0x79, 0xB3, 0x26, 0xAC, 0x09, 0x8A, 0x4B, 0x1F, 0xB2, 0x0B, 0xDD, 0x49, 0xC2, 0x08, 0xF8, 0x7F, 0xDE, 0xA8,
};

extern const uint8_t sTestCert_Node02_07_SubjectKeyId_Len = sizeof(sTestCert_Node02_07_SubjectKeyId);

} // namespace TestCerts
} // namespace chip
