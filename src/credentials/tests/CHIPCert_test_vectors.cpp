/*
 *
 *    Copyright (c) 2020-2021 Project CHIP Authors
 *    Copyright (c) 2019 Google LLC.
 *    Copyright (c) 2016-2017 Nest Labs, Inc.
 *    All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *    @file
 *      This file contains definitions of test certificates used by various unit tests.
 *
 */

#include <credentials/CHIPCert.h>

#include "CHIPCert_test_vectors.h"

namespace chip {
namespace TestCerts {

using namespace chip::Credentials;
using namespace chip::ASN1;

// clang-format off
extern const uint8_t gTestCerts[] = {
    TestCert::kRoot01,
    TestCert::kRoot02,
    TestCert::kICA01,
    TestCert::kICA02,
    TestCert::kICA01_1,
    TestCert::kFWSign01,
    TestCert::kNode01_01,
    TestCert::kNode01_02,
    TestCert::kNode02_01,
    TestCert::kNode02_02,
    TestCert::kNode02_03,
    TestCert::kNode02_04,
};
// clang-format on

extern const size_t gNumTestCerts = sizeof(gTestCerts) / sizeof(gTestCerts[0]);

CHIP_ERROR GetTestCert(uint8_t certType, BitFlags<TestCertLoadFlags> certLoadFlags, const uint8_t *& certData,
                       uint32_t & certDataLen)
{
    CHIP_ERROR err;
    bool derForm = certLoadFlags.Has(TestCertLoadFlags::kDERForm);

#define SELECT_CERT(NAME)                                                                                                          \
    do                                                                                                                             \
    {                                                                                                                              \
        if (certType == TestCert::k##NAME)                                                                                         \
        {                                                                                                                          \
            if (derForm)                                                                                                           \
            {                                                                                                                      \
                certData    = sTestCert_##NAME##_DER;                                                                              \
                certDataLen = sTestCert_##NAME##_DER_Len;                                                                          \
            }                                                                                                                      \
            else                                                                                                                   \
            {                                                                                                                      \
                certData    = sTestCert_##NAME##_Chip;                                                                             \
                certDataLen = sTestCert_##NAME##_Chip_Len;                                                                         \
            }                                                                                                                      \
            ExitNow(err = CHIP_NO_ERROR);                                                                                          \
        }                                                                                                                          \
    } while (0)

    SELECT_CERT(Root01);
    SELECT_CERT(Root02);
    SELECT_CERT(ICA01);
    SELECT_CERT(ICA02);
    SELECT_CERT(ICA01_1);
    SELECT_CERT(FWSign01);
    SELECT_CERT(Node01_01);
    SELECT_CERT(Node01_02);
    SELECT_CERT(Node02_01);
    SELECT_CERT(Node02_02);
    SELECT_CERT(Node02_03);
    SELECT_CERT(Node02_04);

    err = CHIP_ERROR_CA_CERT_NOT_FOUND;

exit:
    return err;
}

const char * GetTestCertName(uint8_t certType)
{
#define NAME_CERT(NAME)                                                                                                            \
    do                                                                                                                             \
    {                                                                                                                              \
        if (certType == TestCert::k##NAME)                                                                                         \
        {                                                                                                                          \
            return #NAME;                                                                                                          \
        }                                                                                                                          \
    } while (0)

    NAME_CERT(Root01);
    NAME_CERT(Root02);
    NAME_CERT(ICA01);
    NAME_CERT(ICA02);
    NAME_CERT(ICA01_1);
    NAME_CERT(FWSign01);
    NAME_CERT(Node01_01);
    NAME_CERT(Node01_02);
    NAME_CERT(Node02_01);
    NAME_CERT(Node02_02);
    NAME_CERT(Node02_03);
    NAME_CERT(Node02_04);

    return nullptr;
}

CHIP_ERROR LoadTestCert(ChipCertificateSet & certSet, uint8_t certType, BitFlags<TestCertLoadFlags> certLoadFlags,
                        BitFlags<CertDecodeFlags> decodeFlags)
{
    CHIP_ERROR err;
    ChipCertificateData * cert;
    const uint8_t * certData;
    uint32_t certDataLen;

    // Get the requested certificate data.
    err = GetTestCert(certType, certLoadFlags, certData, certDataLen);
    SuccessOrExit(err);

    // Load it into the certificate set.
    err = certSet.LoadCert(certData, certDataLen, decodeFlags);
    SuccessOrExit(err);

    // Get loaded certificate data.
    cert = const_cast<ChipCertificateData *>(certSet.GetLastCert());
    VerifyOrExit(cert != nullptr, err = CHIP_ERROR_INVALID_ARGUMENT);

    // Apply load flags.
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressIsCA))
    {
        cert->mCertFlags.Clear(CertFlags::kIsCA);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressKeyUsage))
    {
        cert->mCertFlags.Clear(CertFlags::kExtPresent_KeyUsage);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressKeyCertSign))
    {
        cert->mKeyUsageFlags.Clear(KeyUsageFlags::kKeyCertSign);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSetPathLenConstZero))
    {
        cert->mCertFlags.Set(CertFlags::kPathLenConstraintPresent);
        cert->mPathLenConstraint = 0;
    }

exit:
    return err;
}

// ------------------------------ TEST CERTIFICATES ----------------------------------------

/**************  Test Root01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 6646552921724735847 (0x5c3d4caad83cd167)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:8d:f3:72:da:71:65:54:71:f1:d4:79:51:a0:8a:
                    cf:b9:f2:3a:64:6d:64:7c:50:bb:cc:6f:1b:a8:13:
                    b9:be:c4:34:84:ab:67:66:79:23:e2:93:99:40:bf:
                    d7:24:c5:39:08:c9:48:b1:39:cf:34:fe:36:22:2c:
                    5f:e6:ab:75:32
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                B6:15:CD:DB:6D:4C:BB:35:CC:F9:2D:D9:A0:43:D1:A9:58:13:8F:11
            X509v3 Authority Key Identifier:
                keyid:B6:15:CD:DB:6D:4C:BB:35:CC:F9:2D:D9:A0:43:D1:A9:58:13:8F:11

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:75:fd:f7:a4:ea:83:56:22:aa:84:ae:0b:ca:0a:
         c1:f4:88:42:56:e4:6c:50:de:38:eb:57:3f:11:0c:2f:e0:e1:
         02:20:1b:6d:96:91:fc:cf:b4:27:f1:b0:1f:a2:41:52:06:14:
         0c:9f:0b:cc:dc:a9:1a:46:b5:91:d5:29:22:63:eb:5d

-----BEGIN CERTIFICATE-----
MIIBnDCCAUOgAwIBAgIIXD1Mqtg80WcwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBBAwQQ0FDQUNBQ0EwMDAwMDAwMTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABI3zctpxZVRx8dR5UaCKz7nyOmRtZHxQu8xv
G6gTub7ENISrZ2Z5I+KTmUC/1yTFOQjJSLE5zzT+NiIsX+ardTKjYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBS2Fc3bbUy7Ncz5
LdmgQ9GpWBOPETAfBgNVHSMEGDAWgBS2Fc3bbUy7Ncz5LdmgQ9GpWBOPETAKBggq
hkjOPQQDAgNHADBEAiB1/fek6oNWIqqErgvKCsH0iEJW5GxQ3jjrVz8RDC/g4QIg
G22WkfzPtCfxsB+iQVIGFAyfC8zcqRpGtZHVKSJj610=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEINXa2GujJmJjWYhKQ0vHTKPJyKGnAVEZn8X2DLdiRgZuoAoGCCqGSM49
AwEHoUQDQgAEjfNy2nFlVHHx1HlRoIrPufI6ZG1kfFC7zG8bqBO5vsQ0hKtnZnkj
4pOZQL/XJMU5CMlIsTnPNP42Iixf5qt1Mg==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Root01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x5c, 0x3d, 0x4c, 0xaa, 0xd8, 0x3c, 0xd1, 0x67, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05,
    0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24, 0x07, 0x01, 0x24,
    0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x8d, 0xf3, 0x72, 0xda, 0x71, 0x65, 0x54, 0x71, 0xf1, 0xd4, 0x79, 0x51, 0xa0, 0x8a, 0xcf,
    0xb9, 0xf2, 0x3a, 0x64, 0x6d, 0x64, 0x7c, 0x50, 0xbb, 0xcc, 0x6f, 0x1b, 0xa8, 0x13, 0xb9, 0xbe, 0xc4, 0x34, 0x84, 0xab, 0x67,
    0x66, 0x79, 0x23, 0xe2, 0x93, 0x99, 0x40, 0xbf, 0xd7, 0x24, 0xc5, 0x39, 0x08, 0xc9, 0x48, 0xb1, 0x39, 0xcf, 0x34, 0xfe, 0x36,
    0x22, 0x2c, 0x5f, 0xe6, 0xab, 0x75, 0x32, 0x37, 0x0a, 0x35, 0x01, 0x29, 0x01, 0x18, 0x24, 0x02, 0x60, 0x30, 0x04, 0x14, 0xb6,
    0x15, 0xcd, 0xdb, 0x6d, 0x4c, 0xbb, 0x35, 0xcc, 0xf9, 0x2d, 0xd9, 0xa0, 0x43, 0xd1, 0xa9, 0x58, 0x13, 0x8f, 0x11, 0x30, 0x05,
    0x14, 0xb6, 0x15, 0xcd, 0xdb, 0x6d, 0x4c, 0xbb, 0x35, 0xcc, 0xf9, 0x2d, 0xd9, 0xa0, 0x43, 0xd1, 0xa9, 0x58, 0x13, 0x8f, 0x11,
    0x18, 0x35, 0x0b, 0x30, 0x01, 0x20, 0x75, 0xfd, 0xf7, 0xa4, 0xea, 0x83, 0x56, 0x22, 0xaa, 0x84, 0xae, 0x0b, 0xca, 0x0a, 0xc1,
    0xf4, 0x88, 0x42, 0x56, 0xe4, 0x6c, 0x50, 0xde, 0x38, 0xeb, 0x57, 0x3f, 0x11, 0x0c, 0x2f, 0xe0, 0xe1, 0x30, 0x02, 0x20, 0x1b,
    0x6d, 0x96, 0x91, 0xfc, 0xcf, 0xb4, 0x27, 0xf1, 0xb0, 0x1f, 0xa2, 0x41, 0x52, 0x06, 0x14, 0x0c, 0x9f, 0x0b, 0xcc, 0xdc, 0xa9,
    0x1a, 0x46, 0xb5, 0x91, 0xd5, 0x29, 0x22, 0x63, 0xeb, 0x5d, 0x18, 0x18,
};

extern const uint32_t sTestCert_Root01_Chip_Len = sizeof(sTestCert_Root01_Chip);

extern const uint8_t sTestCert_Root01_DER[] = {
    0x30, 0x82, 0x01, 0x9c, 0x30, 0x82, 0x01, 0x43, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x5c, 0x3d, 0x4c, 0xaa, 0xd8, 0x3c,
    0xd1, 0x67, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x8d, 0xf3,
    0x72, 0xda, 0x71, 0x65, 0x54, 0x71, 0xf1, 0xd4, 0x79, 0x51, 0xa0, 0x8a, 0xcf, 0xb9, 0xf2, 0x3a, 0x64, 0x6d, 0x64, 0x7c, 0x50,
    0xbb, 0xcc, 0x6f, 0x1b, 0xa8, 0x13, 0xb9, 0xbe, 0xc4, 0x34, 0x84, 0xab, 0x67, 0x66, 0x79, 0x23, 0xe2, 0x93, 0x99, 0x40, 0xbf,
    0xd7, 0x24, 0xc5, 0x39, 0x08, 0xc9, 0x48, 0xb1, 0x39, 0xcf, 0x34, 0xfe, 0x36, 0x22, 0x2c, 0x5f, 0xe6, 0xab, 0x75, 0x32, 0xa3,
    0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x16, 0x04, 0x14, 0xb6, 0x15, 0xcd, 0xdb, 0x6d, 0x4c, 0xbb, 0x35, 0xcc, 0xf9, 0x2d, 0xd9, 0xa0, 0x43, 0xd1, 0xa9,
    0x58, 0x13, 0x8f, 0x11, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xb6, 0x15, 0xcd, 0xdb,
    0x6d, 0x4c, 0xbb, 0x35, 0xcc, 0xf9, 0x2d, 0xd9, 0xa0, 0x43, 0xd1, 0xa9, 0x58, 0x13, 0x8f, 0x11, 0x30, 0x0a, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x75, 0xfd, 0xf7, 0xa4, 0xea, 0x83, 0x56,
    0x22, 0xaa, 0x84, 0xae, 0x0b, 0xca, 0x0a, 0xc1, 0xf4, 0x88, 0x42, 0x56, 0xe4, 0x6c, 0x50, 0xde, 0x38, 0xeb, 0x57, 0x3f, 0x11,
    0x0c, 0x2f, 0xe0, 0xe1, 0x02, 0x20, 0x1b, 0x6d, 0x96, 0x91, 0xfc, 0xcf, 0xb4, 0x27, 0xf1, 0xb0, 0x1f, 0xa2, 0x41, 0x52, 0x06,
    0x14, 0x0c, 0x9f, 0x0b, 0xcc, 0xdc, 0xa9, 0x1a, 0x46, 0xb5, 0x91, 0xd5, 0x29, 0x22, 0x63, 0xeb, 0x5d,
};

extern const uint32_t sTestCert_Root01_DER_Len = sizeof(sTestCert_Root01_DER);

extern const uint8_t sTestCert_Root01_PublicKey[] = {
    0x04, 0x8d, 0xf3, 0x72, 0xda, 0x71, 0x65, 0x54, 0x71, 0xf1, 0xd4, 0x79, 0x51, 0xa0, 0x8a, 0xcf, 0xb9,
    0xf2, 0x3a, 0x64, 0x6d, 0x64, 0x7c, 0x50, 0xbb, 0xcc, 0x6f, 0x1b, 0xa8, 0x13, 0xb9, 0xbe, 0xc4, 0x34,
    0x84, 0xab, 0x67, 0x66, 0x79, 0x23, 0xe2, 0x93, 0x99, 0x40, 0xbf, 0xd7, 0x24, 0xc5, 0x39, 0x08, 0xc9,
    0x48, 0xb1, 0x39, 0xcf, 0x34, 0xfe, 0x36, 0x22, 0x2c, 0x5f, 0xe6, 0xab, 0x75, 0x32,
};

extern const uint8_t sTestCert_Root01_PublicKey_Len = sizeof(sTestCert_Root01_PublicKey);

extern const uint8_t sTestCert_Root01_PrivateKey[] = {
    0xd5, 0xda, 0xd8, 0x6b, 0xa3, 0x26, 0x62, 0x63, 0x59, 0x88, 0x4a, 0x43, 0x4b, 0xc7, 0x4c, 0xa3,
    0xc9, 0xc8, 0xa1, 0xa7, 0x01, 0x51, 0x19, 0x9f, 0xc5, 0xf6, 0x0c, 0xb7, 0x62, 0x46, 0x06, 0x6e,
};

extern const uint8_t sTestCert_Root01_PrivateKey_Len = sizeof(sTestCert_Root01_PrivateKey);

extern const uint8_t sTestCert_Root01_SubjectKeyId[] = {
    0xB6, 0x15, 0xCD, 0xDB, 0x6D, 0x4C, 0xBB, 0x35, 0xCC, 0xF9, 0x2D, 0xD9, 0xA0, 0x43, 0xD1, 0xA9, 0x58, 0x13, 0x8F, 0x11,
};

extern const uint8_t sTestCert_Root01_SubjectKeyId_Len = sizeof(sTestCert_Root01_SubjectKeyId);

/**************  Test Root02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 5900382682015650094 (0x51e25ec9a868d12e)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.4 = CACACACA00000002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:31:e4:79:71:72:62:95:d0:33:72:80:9b:39:fa:
                    45:50:ad:03:d7:11:76:5f:30:e2:fb:54:22:7a:44:
                    43:b8:74:88:2d:21:66:a1:42:00:28:65:79:58:03:
                    2c:72:79:8f:a8:68:46:e9:68:f9:7d:be:77:8b:f3:
                    ec:1d:04:3a:7a
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                7C:DE:9A:62:12:A8:68:FD:B9:9C:5C:8F:36:11:8C:20:F8:F4:9F:D3
            X509v3 Authority Key Identifier:
                keyid:7C:DE:9A:62:12:A8:68:FD:B9:9C:5C:8F:36:11:8C:20:F8:F4:9F:D3

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:69:95:28:6b:f7:3a:f2:cb:1c:47:58:69:b6:e0:
         59:0f:25:91:e3:a3:1f:ad:72:94:c3:34:77:f1:7c:ab:3c:4c:
         02:21:00:9b:18:db:ca:21:da:82:b5:6d:d0:02:ff:23:fc:dd:
         9a:6d:b8:f8:3a:bd:29:2a:d1:65:73:71:94:87:1d:93:50

-----BEGIN CERTIFICATE-----
MIIB4TCCAYegAwIBAgIIUeJeyaho0S4wCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDIxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDIxIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEMeR5cXJi
ldAzcoCbOfpFUK0D1xF2XzDi+1QiekRDuHSILSFmoUIAKGV5WAMscnmPqGhG6Wj5
fb53i/PsHQQ6eqNjMGEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw
HQYDVR0OBBYEFHzemmISqGj9uZxcjzYRjCD49J/TMB8GA1UdIwQYMBaAFHzemmIS
qGj9uZxcjzYRjCD49J/TMAoGCCqGSM49BAMCA0gAMEUCIGmVKGv3OvLLHEdYabbg
WQ8lkeOjH61ylMM0d/F8qzxMAiEAmxjbyiHagrVt0AL/I/zdmm24+Dq9KSrRZXNx
lIcdk1A=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIH6nXffZ0uRpX+DeV+5pEG4CeFkIIv138+acb/CwrAYPoAoGCCqGSM49
AwEHoUQDQgAEMeR5cXJildAzcoCbOfpFUK0D1xF2XzDi+1QiekRDuHSILSFmoUIA
KGV5WAMscnmPqGhG6Wj5fb53i/PsHQQ6eg==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Root02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x51, 0xe2, 0x5e, 0xc9, 0xa8, 0x68, 0xd1, 0x2e, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x14, 0x02, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x14, 0x02, 0x00, 0x00,
    0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08,
    0x01, 0x30, 0x09, 0x41, 0x04, 0x31, 0xe4, 0x79, 0x71, 0x72, 0x62, 0x95, 0xd0, 0x33, 0x72, 0x80, 0x9b, 0x39, 0xfa, 0x45, 0x50,
    0xad, 0x03, 0xd7, 0x11, 0x76, 0x5f, 0x30, 0xe2, 0xfb, 0x54, 0x22, 0x7a, 0x44, 0x43, 0xb8, 0x74, 0x88, 0x2d, 0x21, 0x66, 0xa1,
    0x42, 0x00, 0x28, 0x65, 0x79, 0x58, 0x03, 0x2c, 0x72, 0x79, 0x8f, 0xa8, 0x68, 0x46, 0xe9, 0x68, 0xf9, 0x7d, 0xbe, 0x77, 0x8b,
    0xf3, 0xec, 0x1d, 0x04, 0x3a, 0x7a, 0x37, 0x0a, 0x35, 0x01, 0x29, 0x01, 0x18, 0x24, 0x02, 0x60, 0x30, 0x04, 0x14, 0x7c, 0xde,
    0x9a, 0x62, 0x12, 0xa8, 0x68, 0xfd, 0xb9, 0x9c, 0x5c, 0x8f, 0x36, 0x11, 0x8c, 0x20, 0xf8, 0xf4, 0x9f, 0xd3, 0x30, 0x05, 0x14,
    0x7c, 0xde, 0x9a, 0x62, 0x12, 0xa8, 0x68, 0xfd, 0xb9, 0x9c, 0x5c, 0x8f, 0x36, 0x11, 0x8c, 0x20, 0xf8, 0xf4, 0x9f, 0xd3, 0x18,
    0x35, 0x0b, 0x30, 0x01, 0x20, 0x69, 0x95, 0x28, 0x6b, 0xf7, 0x3a, 0xf2, 0xcb, 0x1c, 0x47, 0x58, 0x69, 0xb6, 0xe0, 0x59, 0x0f,
    0x25, 0x91, 0xe3, 0xa3, 0x1f, 0xad, 0x72, 0x94, 0xc3, 0x34, 0x77, 0xf1, 0x7c, 0xab, 0x3c, 0x4c, 0x30, 0x02, 0x21, 0x00, 0x9b,
    0x18, 0xdb, 0xca, 0x21, 0xda, 0x82, 0xb5, 0x6d, 0xd0, 0x02, 0xff, 0x23, 0xfc, 0xdd, 0x9a, 0x6d, 0xb8, 0xf8, 0x3a, 0xbd, 0x29,
    0x2a, 0xd1, 0x65, 0x73, 0x71, 0x94, 0x87, 0x1d, 0x93, 0x50, 0x18, 0x18,
};

extern const uint32_t sTestCert_Root02_Chip_Len = sizeof(sTestCert_Root02_Chip);

extern const uint8_t sTestCert_Root02_DER[] = {
    0x30, 0x82, 0x01, 0xe1, 0x30, 0x82, 0x01, 0x87, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x51, 0xe2, 0x5e, 0xc9, 0xa8, 0x68,
    0xd1, 0x2e, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0x31, 0xe4, 0x79, 0x71, 0x72, 0x62, 0x95, 0xd0, 0x33, 0x72, 0x80, 0x9b, 0x39, 0xfa, 0x45, 0x50, 0xad, 0x03,
    0xd7, 0x11, 0x76, 0x5f, 0x30, 0xe2, 0xfb, 0x54, 0x22, 0x7a, 0x44, 0x43, 0xb8, 0x74, 0x88, 0x2d, 0x21, 0x66, 0xa1, 0x42, 0x00,
    0x28, 0x65, 0x79, 0x58, 0x03, 0x2c, 0x72, 0x79, 0x8f, 0xa8, 0x68, 0x46, 0xe9, 0x68, 0xf9, 0x7d, 0xbe, 0x77, 0x8b, 0xf3, 0xec,
    0x1d, 0x04, 0x3a, 0x7a, 0xa3, 0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30,
    0x03, 0x01, 0x01, 0xff, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x7c, 0xde, 0x9a, 0x62, 0x12, 0xa8, 0x68, 0xfd, 0xb9, 0x9c, 0x5c,
    0x8f, 0x36, 0x11, 0x8c, 0x20, 0xf8, 0xf4, 0x9f, 0xd3, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0x7c, 0xde, 0x9a, 0x62, 0x12, 0xa8, 0x68, 0xfd, 0xb9, 0x9c, 0x5c, 0x8f, 0x36, 0x11, 0x8c, 0x20, 0xf8, 0xf4, 0x9f, 0xd3,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x69, 0x95,
    0x28, 0x6b, 0xf7, 0x3a, 0xf2, 0xcb, 0x1c, 0x47, 0x58, 0x69, 0xb6, 0xe0, 0x59, 0x0f, 0x25, 0x91, 0xe3, 0xa3, 0x1f, 0xad, 0x72,
    0x94, 0xc3, 0x34, 0x77, 0xf1, 0x7c, 0xab, 0x3c, 0x4c, 0x02, 0x21, 0x00, 0x9b, 0x18, 0xdb, 0xca, 0x21, 0xda, 0x82, 0xb5, 0x6d,
    0xd0, 0x02, 0xff, 0x23, 0xfc, 0xdd, 0x9a, 0x6d, 0xb8, 0xf8, 0x3a, 0xbd, 0x29, 0x2a, 0xd1, 0x65, 0x73, 0x71, 0x94, 0x87, 0x1d,
    0x93, 0x50,
};

extern const uint32_t sTestCert_Root02_DER_Len = sizeof(sTestCert_Root02_DER);

extern const uint8_t sTestCert_Root02_PublicKey[] = {
    0x04, 0x31, 0xe4, 0x79, 0x71, 0x72, 0x62, 0x95, 0xd0, 0x33, 0x72, 0x80, 0x9b, 0x39, 0xfa, 0x45, 0x50,
    0xad, 0x03, 0xd7, 0x11, 0x76, 0x5f, 0x30, 0xe2, 0xfb, 0x54, 0x22, 0x7a, 0x44, 0x43, 0xb8, 0x74, 0x88,
    0x2d, 0x21, 0x66, 0xa1, 0x42, 0x00, 0x28, 0x65, 0x79, 0x58, 0x03, 0x2c, 0x72, 0x79, 0x8f, 0xa8, 0x68,
    0x46, 0xe9, 0x68, 0xf9, 0x7d, 0xbe, 0x77, 0x8b, 0xf3, 0xec, 0x1d, 0x04, 0x3a, 0x7a,
};

extern const uint8_t sTestCert_Root02_PublicKey_Len = sizeof(sTestCert_Root02_PublicKey);

extern const uint8_t sTestCert_Root02_PrivateKey[] = {
    0x7e, 0xa7, 0x5d, 0xf7, 0xd9, 0xd2, 0xe4, 0x69, 0x5f, 0xe0, 0xde, 0x57, 0xee, 0x69, 0x10, 0x6e,
    0x02, 0x78, 0x59, 0x08, 0x22, 0xfd, 0x77, 0xf3, 0xe6, 0x9c, 0x6f, 0xf0, 0xb0, 0xac, 0x06, 0x0f,
};

extern const uint8_t sTestCert_Root02_PrivateKey_Len = sizeof(sTestCert_Root02_PrivateKey);

extern const uint8_t sTestCert_Root02_SubjectKeyId[] = {
    0x7C, 0xDE, 0x9A, 0x62, 0x12, 0xA8, 0x68, 0xFD, 0xB9, 0x9C, 0x5C, 0x8F, 0x36, 0x11, 0x8C, 0x20, 0xF8, 0xF4, 0x9F, 0xD3,
};

extern const uint8_t sTestCert_Root02_SubjectKeyId_Len = sizeof(sTestCert_Root02_SubjectKeyId);

/**************  Test ICA01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 6493420123798794374 (0x5a1d4332f0667086)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.3 = CACACACA00000003
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:07:bf:bc:66:8b:b6:4a:7e:28:f2:71:e8:44:29:
                    ea:aa:1f:b1:9a:7b:80:cf:b2:08:2a:34:e3:ba:8a:
                    f6:bb:7f:d6:ae:42:69:c5:fe:db:01:1c:99:70:8b:
                    ae:b8:ba:66:80:2b:f6:c3:03:93:3f:7b:92:10:1e:
                    01:a3:80:71:98
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                64:40:33:58:85:4C:D2:8B:CD:E1:D4:AA:23:06:1F:7B:2C:6D:2D:98
            X509v3 Authority Key Identifier:
                keyid:B6:15:CD:DB:6D:4C:BB:35:CC:F9:2D:D9:A0:43:D1:A9:58:13:8F:11

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:67:b4:36:95:36:cb:06:b6:f6:52:db:66:5c:04:
         46:32:7e:e7:a5:75:35:49:c4:2d:94:69:2b:3a:25:fb:45:64:
         02:20:16:7b:f0:c3:d8:fe:fd:47:c8:26:81:9e:d4:34:14:58:
         61:04:7f:96:e2:09:86:bb:12:63:2e:cc:d0:bb:5f:1c

-----BEGIN CERTIFICATE-----
MIIBnDCCAUOgAwIBAgIIWh1DMvBmcIYwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBAwwQQ0FDQUNBQ0EwMDAwMDAwMzBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABAe/vGaLtkp+KPJx6EQp6qofsZp7gM+yCCo0
47qK9rt/1q5CacX+2wEcmXCLrri6ZoAr9sMDkz97khAeAaOAcZijYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBRkQDNYhUzSi83h
1KojBh97LG0tmDAfBgNVHSMEGDAWgBS2Fc3bbUy7Ncz5LdmgQ9GpWBOPETAKBggq
hkjOPQQDAgNHADBEAiBntDaVNssGtvZS22ZcBEYyfueldTVJxC2UaSs6JftFZAIg
Fnvww9j+/UfIJoGe1DQUWGEEf5biCYa7EmMuzNC7Xxw=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIPW3HBKDwk4LPuRBsJQvK9YssUEaW4j3UPK2TzVtrmJnoAoGCCqGSM49
AwEHoUQDQgAEB7+8Zou2Sn4o8nHoRCnqqh+xmnuAz7IIKjTjuor2u3/WrkJpxf7b
ARyZcIuuuLpmgCv2wwOTP3uSEB4Bo4BxmA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_ICA01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x5a, 0x1d, 0x43, 0x32, 0xf0, 0x66, 0x70, 0x86, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05,
    0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x13, 0x03, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24, 0x07, 0x01, 0x24,
    0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x07, 0xbf, 0xbc, 0x66, 0x8b, 0xb6, 0x4a, 0x7e, 0x28, 0xf2, 0x71, 0xe8, 0x44, 0x29, 0xea,
    0xaa, 0x1f, 0xb1, 0x9a, 0x7b, 0x80, 0xcf, 0xb2, 0x08, 0x2a, 0x34, 0xe3, 0xba, 0x8a, 0xf6, 0xbb, 0x7f, 0xd6, 0xae, 0x42, 0x69,
    0xc5, 0xfe, 0xdb, 0x01, 0x1c, 0x99, 0x70, 0x8b, 0xae, 0xb8, 0xba, 0x66, 0x80, 0x2b, 0xf6, 0xc3, 0x03, 0x93, 0x3f, 0x7b, 0x92,
    0x10, 0x1e, 0x01, 0xa3, 0x80, 0x71, 0x98, 0x37, 0x0a, 0x35, 0x01, 0x29, 0x01, 0x18, 0x24, 0x02, 0x60, 0x30, 0x04, 0x14, 0x64,
    0x40, 0x33, 0x58, 0x85, 0x4c, 0xd2, 0x8b, 0xcd, 0xe1, 0xd4, 0xaa, 0x23, 0x06, 0x1f, 0x7b, 0x2c, 0x6d, 0x2d, 0x98, 0x30, 0x05,
    0x14, 0xb6, 0x15, 0xcd, 0xdb, 0x6d, 0x4c, 0xbb, 0x35, 0xcc, 0xf9, 0x2d, 0xd9, 0xa0, 0x43, 0xd1, 0xa9, 0x58, 0x13, 0x8f, 0x11,
    0x18, 0x35, 0x0b, 0x30, 0x01, 0x20, 0x67, 0xb4, 0x36, 0x95, 0x36, 0xcb, 0x06, 0xb6, 0xf6, 0x52, 0xdb, 0x66, 0x5c, 0x04, 0x46,
    0x32, 0x7e, 0xe7, 0xa5, 0x75, 0x35, 0x49, 0xc4, 0x2d, 0x94, 0x69, 0x2b, 0x3a, 0x25, 0xfb, 0x45, 0x64, 0x30, 0x02, 0x20, 0x16,
    0x7b, 0xf0, 0xc3, 0xd8, 0xfe, 0xfd, 0x47, 0xc8, 0x26, 0x81, 0x9e, 0xd4, 0x34, 0x14, 0x58, 0x61, 0x04, 0x7f, 0x96, 0xe2, 0x09,
    0x86, 0xbb, 0x12, 0x63, 0x2e, 0xcc, 0xd0, 0xbb, 0x5f, 0x1c, 0x18, 0x18,
};

extern const uint32_t sTestCert_ICA01_Chip_Len = sizeof(sTestCert_ICA01_Chip);

extern const uint8_t sTestCert_ICA01_DER[] = {
    0x30, 0x82, 0x01, 0x9c, 0x30, 0x82, 0x01, 0x43, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x5a, 0x1d, 0x43, 0x32, 0xf0, 0x66,
    0x70, 0x86, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x07, 0xbf,
    0xbc, 0x66, 0x8b, 0xb6, 0x4a, 0x7e, 0x28, 0xf2, 0x71, 0xe8, 0x44, 0x29, 0xea, 0xaa, 0x1f, 0xb1, 0x9a, 0x7b, 0x80, 0xcf, 0xb2,
    0x08, 0x2a, 0x34, 0xe3, 0xba, 0x8a, 0xf6, 0xbb, 0x7f, 0xd6, 0xae, 0x42, 0x69, 0xc5, 0xfe, 0xdb, 0x01, 0x1c, 0x99, 0x70, 0x8b,
    0xae, 0xb8, 0xba, 0x66, 0x80, 0x2b, 0xf6, 0xc3, 0x03, 0x93, 0x3f, 0x7b, 0x92, 0x10, 0x1e, 0x01, 0xa3, 0x80, 0x71, 0x98, 0xa3,
    0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x16, 0x04, 0x14, 0x64, 0x40, 0x33, 0x58, 0x85, 0x4c, 0xd2, 0x8b, 0xcd, 0xe1, 0xd4, 0xaa, 0x23, 0x06, 0x1f, 0x7b,
    0x2c, 0x6d, 0x2d, 0x98, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xb6, 0x15, 0xcd, 0xdb,
    0x6d, 0x4c, 0xbb, 0x35, 0xcc, 0xf9, 0x2d, 0xd9, 0xa0, 0x43, 0xd1, 0xa9, 0x58, 0x13, 0x8f, 0x11, 0x30, 0x0a, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x67, 0xb4, 0x36, 0x95, 0x36, 0xcb, 0x06,
    0xb6, 0xf6, 0x52, 0xdb, 0x66, 0x5c, 0x04, 0x46, 0x32, 0x7e, 0xe7, 0xa5, 0x75, 0x35, 0x49, 0xc4, 0x2d, 0x94, 0x69, 0x2b, 0x3a,
    0x25, 0xfb, 0x45, 0x64, 0x02, 0x20, 0x16, 0x7b, 0xf0, 0xc3, 0xd8, 0xfe, 0xfd, 0x47, 0xc8, 0x26, 0x81, 0x9e, 0xd4, 0x34, 0x14,
    0x58, 0x61, 0x04, 0x7f, 0x96, 0xe2, 0x09, 0x86, 0xbb, 0x12, 0x63, 0x2e, 0xcc, 0xd0, 0xbb, 0x5f, 0x1c,
};

extern const uint32_t sTestCert_ICA01_DER_Len = sizeof(sTestCert_ICA01_DER);

extern const uint8_t sTestCert_ICA01_PublicKey[] = {
    0x04, 0x07, 0xbf, 0xbc, 0x66, 0x8b, 0xb6, 0x4a, 0x7e, 0x28, 0xf2, 0x71, 0xe8, 0x44, 0x29, 0xea, 0xaa,
    0x1f, 0xb1, 0x9a, 0x7b, 0x80, 0xcf, 0xb2, 0x08, 0x2a, 0x34, 0xe3, 0xba, 0x8a, 0xf6, 0xbb, 0x7f, 0xd6,
    0xae, 0x42, 0x69, 0xc5, 0xfe, 0xdb, 0x01, 0x1c, 0x99, 0x70, 0x8b, 0xae, 0xb8, 0xba, 0x66, 0x80, 0x2b,
    0xf6, 0xc3, 0x03, 0x93, 0x3f, 0x7b, 0x92, 0x10, 0x1e, 0x01, 0xa3, 0x80, 0x71, 0x98,
};

extern const uint8_t sTestCert_ICA01_PublicKey_Len = sizeof(sTestCert_ICA01_PublicKey);

extern const uint8_t sTestCert_ICA01_PrivateKey[] = {
    0xf5, 0xb7, 0x1c, 0x12, 0x83, 0xc2, 0x4e, 0x0b, 0x3e, 0xe4, 0x41, 0xb0, 0x94, 0x2f, 0x2b, 0xd6,
    0x2c, 0xb1, 0x41, 0x1a, 0x5b, 0x88, 0xf7, 0x50, 0xf2, 0xb6, 0x4f, 0x35, 0x6d, 0xae, 0x62, 0x67,
};

extern const uint8_t sTestCert_ICA01_PrivateKey_Len = sizeof(sTestCert_ICA01_PrivateKey);

extern const uint8_t sTestCert_ICA01_SubjectKeyId[] = {
    0x64, 0x40, 0x33, 0x58, 0x85, 0x4C, 0xD2, 0x8B, 0xCD, 0xE1, 0xD4, 0xAA, 0x23, 0x06, 0x1F, 0x7B, 0x2C, 0x6D, 0x2D, 0x98,
};

extern const uint8_t sTestCert_ICA01_SubjectKeyId_Len = sizeof(sTestCert_ICA01_SubjectKeyId);

/**************  Test ICA02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 443141802421314696 (0x6265b1f1672e488)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:d1:92:18:e3:df:13:83:e0:c1:04:20:c9:f4:d5:
                    fc:a1:d3:42:2a:0a:48:a5:89:56:78:55:ea:71:75:
                    c0:3a:e7:10:4b:75:71:ff:48:6c:6a:a9:0d:19:7b:
                    4d:3c:63:02:18:79:8e:4e:d3:ea:48:7d:10:12:9f:
                    4d:17:ba:72:91
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                73:65:AD:0D:22:26:D5:62:C2:1A:0B:F9:D1:7F:ED:6D:93:43:62:BA
            X509v3 Authority Key Identifier:
                keyid:7C:DE:9A:62:12:A8:68:FD:B9:9C:5C:8F:36:11:8C:20:F8:F4:9F:D3

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:25:04:53:3e:e1:c3:d6:a2:92:1d:0c:83:68:e4:
         80:50:16:e6:16:9f:b9:fe:a2:23:30:22:1d:07:12:11:1c:21:
         02:20:53:b5:0a:31:87:1d:fd:fa:ac:d0:a4:89:26:de:6e:d8:
         a6:ad:7f:87:e6:58:30:b7:5c:fd:87:47:8a:e2:3c:d0

-----BEGIN CERTIFICATE-----
MIIB4DCCAYegAwIBAgIIBiZbHxZy5IgwCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDIxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE0ZIY498T
g+DBBCDJ9NX8odNCKgpIpYlWeFXqcXXAOucQS3Vx/0hsaqkNGXtNPGMCGHmOTtPq
SH0QEp9NF7pykaNjMGEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw
HQYDVR0OBBYEFHNlrQ0iJtViwhoL+dF/7W2TQ2K6MB8GA1UdIwQYMBaAFHzemmIS
qGj9uZxcjzYRjCD49J/TMAoGCCqGSM49BAMCA0cAMEQCICUEUz7hw9aikh0Mg2jk
gFAW5hafuf6iIzAiHQcSERwhAiBTtQoxhx39+qzQpIkm3m7Ypq1/h+ZYMLdc/YdH
iuI80A==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIDQX+1gejwT819CJIkeaktiJ3+Dl073TwNbufbm4jxZmoAoGCCqGSM49
AwEHoUQDQgAE0ZIY498Tg+DBBCDJ9NX8odNCKgpIpYlWeFXqcXXAOucQS3Vx/0hs
aqkNGXtNPGMCGHmOTtPqSH0QEp9NF7pykQ==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_ICA02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x06, 0x26, 0x5b, 0x1f, 0x16, 0x72, 0xe4, 0x88, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x14, 0x02, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x13, 0x04, 0x00, 0x00,
    0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08,
    0x01, 0x30, 0x09, 0x41, 0x04, 0xd1, 0x92, 0x18, 0xe3, 0xdf, 0x13, 0x83, 0xe0, 0xc1, 0x04, 0x20, 0xc9, 0xf4, 0xd5, 0xfc, 0xa1,
    0xd3, 0x42, 0x2a, 0x0a, 0x48, 0xa5, 0x89, 0x56, 0x78, 0x55, 0xea, 0x71, 0x75, 0xc0, 0x3a, 0xe7, 0x10, 0x4b, 0x75, 0x71, 0xff,
    0x48, 0x6c, 0x6a, 0xa9, 0x0d, 0x19, 0x7b, 0x4d, 0x3c, 0x63, 0x02, 0x18, 0x79, 0x8e, 0x4e, 0xd3, 0xea, 0x48, 0x7d, 0x10, 0x12,
    0x9f, 0x4d, 0x17, 0xba, 0x72, 0x91, 0x37, 0x0a, 0x35, 0x01, 0x29, 0x01, 0x18, 0x24, 0x02, 0x60, 0x30, 0x04, 0x14, 0x73, 0x65,
    0xad, 0x0d, 0x22, 0x26, 0xd5, 0x62, 0xc2, 0x1a, 0x0b, 0xf9, 0xd1, 0x7f, 0xed, 0x6d, 0x93, 0x43, 0x62, 0xba, 0x30, 0x05, 0x14,
    0x7c, 0xde, 0x9a, 0x62, 0x12, 0xa8, 0x68, 0xfd, 0xb9, 0x9c, 0x5c, 0x8f, 0x36, 0x11, 0x8c, 0x20, 0xf8, 0xf4, 0x9f, 0xd3, 0x18,
    0x35, 0x0b, 0x30, 0x01, 0x20, 0x25, 0x04, 0x53, 0x3e, 0xe1, 0xc3, 0xd6, 0xa2, 0x92, 0x1d, 0x0c, 0x83, 0x68, 0xe4, 0x80, 0x50,
    0x16, 0xe6, 0x16, 0x9f, 0xb9, 0xfe, 0xa2, 0x23, 0x30, 0x22, 0x1d, 0x07, 0x12, 0x11, 0x1c, 0x21, 0x30, 0x02, 0x20, 0x53, 0xb5,
    0x0a, 0x31, 0x87, 0x1d, 0xfd, 0xfa, 0xac, 0xd0, 0xa4, 0x89, 0x26, 0xde, 0x6e, 0xd8, 0xa6, 0xad, 0x7f, 0x87, 0xe6, 0x58, 0x30,
    0xb7, 0x5c, 0xfd, 0x87, 0x47, 0x8a, 0xe2, 0x3c, 0xd0, 0x18, 0x18,
};

extern const uint32_t sTestCert_ICA02_Chip_Len = sizeof(sTestCert_ICA02_Chip);

extern const uint8_t sTestCert_ICA02_DER[] = {
    0x30, 0x82, 0x01, 0xe0, 0x30, 0x82, 0x01, 0x87, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x06, 0x26, 0x5b, 0x1f, 0x16, 0x72,
    0xe4, 0x88, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0xd1, 0x92, 0x18, 0xe3, 0xdf, 0x13, 0x83, 0xe0, 0xc1, 0x04, 0x20, 0xc9, 0xf4, 0xd5, 0xfc, 0xa1, 0xd3, 0x42,
    0x2a, 0x0a, 0x48, 0xa5, 0x89, 0x56, 0x78, 0x55, 0xea, 0x71, 0x75, 0xc0, 0x3a, 0xe7, 0x10, 0x4b, 0x75, 0x71, 0xff, 0x48, 0x6c,
    0x6a, 0xa9, 0x0d, 0x19, 0x7b, 0x4d, 0x3c, 0x63, 0x02, 0x18, 0x79, 0x8e, 0x4e, 0xd3, 0xea, 0x48, 0x7d, 0x10, 0x12, 0x9f, 0x4d,
    0x17, 0xba, 0x72, 0x91, 0xa3, 0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30,
    0x03, 0x01, 0x01, 0xff, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x73, 0x65, 0xad, 0x0d, 0x22, 0x26, 0xd5, 0x62, 0xc2, 0x1a, 0x0b,
    0xf9, 0xd1, 0x7f, 0xed, 0x6d, 0x93, 0x43, 0x62, 0xba, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0x7c, 0xde, 0x9a, 0x62, 0x12, 0xa8, 0x68, 0xfd, 0xb9, 0x9c, 0x5c, 0x8f, 0x36, 0x11, 0x8c, 0x20, 0xf8, 0xf4, 0x9f, 0xd3,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x25, 0x04,
    0x53, 0x3e, 0xe1, 0xc3, 0xd6, 0xa2, 0x92, 0x1d, 0x0c, 0x83, 0x68, 0xe4, 0x80, 0x50, 0x16, 0xe6, 0x16, 0x9f, 0xb9, 0xfe, 0xa2,
    0x23, 0x30, 0x22, 0x1d, 0x07, 0x12, 0x11, 0x1c, 0x21, 0x02, 0x20, 0x53, 0xb5, 0x0a, 0x31, 0x87, 0x1d, 0xfd, 0xfa, 0xac, 0xd0,
    0xa4, 0x89, 0x26, 0xde, 0x6e, 0xd8, 0xa6, 0xad, 0x7f, 0x87, 0xe6, 0x58, 0x30, 0xb7, 0x5c, 0xfd, 0x87, 0x47, 0x8a, 0xe2, 0x3c,
    0xd0,
};

extern const uint32_t sTestCert_ICA02_DER_Len = sizeof(sTestCert_ICA02_DER);

extern const uint8_t sTestCert_ICA02_PublicKey[] = {
    0x04, 0xd1, 0x92, 0x18, 0xe3, 0xdf, 0x13, 0x83, 0xe0, 0xc1, 0x04, 0x20, 0xc9, 0xf4, 0xd5, 0xfc, 0xa1,
    0xd3, 0x42, 0x2a, 0x0a, 0x48, 0xa5, 0x89, 0x56, 0x78, 0x55, 0xea, 0x71, 0x75, 0xc0, 0x3a, 0xe7, 0x10,
    0x4b, 0x75, 0x71, 0xff, 0x48, 0x6c, 0x6a, 0xa9, 0x0d, 0x19, 0x7b, 0x4d, 0x3c, 0x63, 0x02, 0x18, 0x79,
    0x8e, 0x4e, 0xd3, 0xea, 0x48, 0x7d, 0x10, 0x12, 0x9f, 0x4d, 0x17, 0xba, 0x72, 0x91,
};

extern const uint8_t sTestCert_ICA02_PublicKey_Len = sizeof(sTestCert_ICA02_PublicKey);

extern const uint8_t sTestCert_ICA02_PrivateKey[] = {
    0x34, 0x17, 0xfb, 0x58, 0x1e, 0x8f, 0x04, 0xfc, 0xd7, 0xd0, 0x89, 0x22, 0x47, 0x9a, 0x92, 0xd8,
    0x89, 0xdf, 0xe0, 0xe5, 0xd3, 0xbd, 0xd3, 0xc0, 0xd6, 0xee, 0x7d, 0xb9, 0xb8, 0x8f, 0x16, 0x66,
};

extern const uint8_t sTestCert_ICA02_PrivateKey_Len = sizeof(sTestCert_ICA02_PrivateKey);

extern const uint8_t sTestCert_ICA02_SubjectKeyId[] = {
    0x73, 0x65, 0xAD, 0x0D, 0x22, 0x26, 0xD5, 0x62, 0xC2, 0x1A, 0x0B, 0xF9, 0xD1, 0x7F, 0xED, 0x6D, 0x93, 0x43, 0x62, 0xBA,
};

extern const uint8_t sTestCert_ICA02_SubjectKeyId_Len = sizeof(sTestCert_ICA02_SubjectKeyId);

/**************  Test ICA01_1 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 6547733510195013359 (0x5ade38efa71866ef)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.3 = CACACACA00000005
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:84:d4:ee:05:2d:e3:e2:bd:70:07:84:ce:ee:f8:
                    27:30:de:61:22:85:3b:8f:48:2a:0e:69:c3:f6:be:
                    c2:c9:1c:84:41:69:db:44:78:17:5a:60:28:21:48:
                    ac:0d:a3:18:6e:a4:53:a5:07:75:ea:1b:0e:9b:94:
                    35:a5:19:6a:da
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                19:AD:25:FE:E9:B2:EA:B9:EC:58:3C:B7:FD:79:D2:F4:0D:32:21:A2
            X509v3 Authority Key Identifier:
                keyid:B6:15:CD:DB:6D:4C:BB:35:CC:F9:2D:D9:A0:43:D1:A9:58:13:8F:11

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:39:85:fd:86:3f:35:93:7d:21:df:ce:33:97:90:
         5a:3e:b3:0b:ac:ca:6d:e8:8b:8f:97:77:0b:bc:a3:7a:da:32:
         02:21:00:98:8f:73:09:d2:14:31:1b:a8:8d:53:e7:92:0d:c0:
         5d:45:b5:1e:24:e3:2e:4c:f2:cc:5a:64:4b:04:62:bc:26

-----BEGIN CERTIFICATE-----
MIIBnTCCAUOgAwIBAgIIWt4476cYZu8wCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBAwwQQ0FDQUNBQ0EwMDAwMDAwNTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABITU7gUt4+K9cAeEzu74JzDeYSKFO49IKg5p
w/a+wskchEFp20R4F1pgKCFIrA2jGG6kU6UHdeobDpuUNaUZatqjYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBQZrSX+6bLquexY
PLf9edL0DTIhojAfBgNVHSMEGDAWgBS2Fc3bbUy7Ncz5LdmgQ9GpWBOPETAKBggq
hkjOPQQDAgNIADBFAiA5hf2GPzWTfSHfzjOXkFo+swusym3oi4+Xdwu8o3raMgIh
AJiPcwnSFDEbqI1T55INwF1FtR4k4y5M8sxaZEsEYrwm
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIDCyNTcGhDQUAYfGRHehWm9sJc2oe2kIUoT397AaQg9coAoGCCqGSM49
AwEHoUQDQgAEhNTuBS3j4r1wB4TO7vgnMN5hIoU7j0gqDmnD9r7CyRyEQWnbRHgX
WmAoIUisDaMYbqRTpQd16hsOm5Q1pRlq2g==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_ICA01_1_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x5a, 0xde, 0x38, 0xef, 0xa7, 0x18, 0x66, 0xef, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05,
    0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x13, 0x05, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24, 0x07, 0x01, 0x24,
    0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x84, 0xd4, 0xee, 0x05, 0x2d, 0xe3, 0xe2, 0xbd, 0x70, 0x07, 0x84, 0xce, 0xee, 0xf8, 0x27,
    0x30, 0xde, 0x61, 0x22, 0x85, 0x3b, 0x8f, 0x48, 0x2a, 0x0e, 0x69, 0xc3, 0xf6, 0xbe, 0xc2, 0xc9, 0x1c, 0x84, 0x41, 0x69, 0xdb,
    0x44, 0x78, 0x17, 0x5a, 0x60, 0x28, 0x21, 0x48, 0xac, 0x0d, 0xa3, 0x18, 0x6e, 0xa4, 0x53, 0xa5, 0x07, 0x75, 0xea, 0x1b, 0x0e,
    0x9b, 0x94, 0x35, 0xa5, 0x19, 0x6a, 0xda, 0x37, 0x0a, 0x35, 0x01, 0x29, 0x01, 0x18, 0x24, 0x02, 0x60, 0x30, 0x04, 0x14, 0x19,
    0xad, 0x25, 0xfe, 0xe9, 0xb2, 0xea, 0xb9, 0xec, 0x58, 0x3c, 0xb7, 0xfd, 0x79, 0xd2, 0xf4, 0x0d, 0x32, 0x21, 0xa2, 0x30, 0x05,
    0x14, 0xb6, 0x15, 0xcd, 0xdb, 0x6d, 0x4c, 0xbb, 0x35, 0xcc, 0xf9, 0x2d, 0xd9, 0xa0, 0x43, 0xd1, 0xa9, 0x58, 0x13, 0x8f, 0x11,
    0x18, 0x35, 0x0b, 0x30, 0x01, 0x20, 0x39, 0x85, 0xfd, 0x86, 0x3f, 0x35, 0x93, 0x7d, 0x21, 0xdf, 0xce, 0x33, 0x97, 0x90, 0x5a,
    0x3e, 0xb3, 0x0b, 0xac, 0xca, 0x6d, 0xe8, 0x8b, 0x8f, 0x97, 0x77, 0x0b, 0xbc, 0xa3, 0x7a, 0xda, 0x32, 0x30, 0x02, 0x21, 0x00,
    0x98, 0x8f, 0x73, 0x09, 0xd2, 0x14, 0x31, 0x1b, 0xa8, 0x8d, 0x53, 0xe7, 0x92, 0x0d, 0xc0, 0x5d, 0x45, 0xb5, 0x1e, 0x24, 0xe3,
    0x2e, 0x4c, 0xf2, 0xcc, 0x5a, 0x64, 0x4b, 0x04, 0x62, 0xbc, 0x26, 0x18, 0x18,
};

extern const uint32_t sTestCert_ICA01_1_Chip_Len = sizeof(sTestCert_ICA01_1_Chip);

extern const uint8_t sTestCert_ICA01_1_DER[] = {
    0x30, 0x82, 0x01, 0x9d, 0x30, 0x82, 0x01, 0x43, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x5a, 0xde, 0x38, 0xef, 0xa7, 0x18,
    0x66, 0xef, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x84, 0xd4,
    0xee, 0x05, 0x2d, 0xe3, 0xe2, 0xbd, 0x70, 0x07, 0x84, 0xce, 0xee, 0xf8, 0x27, 0x30, 0xde, 0x61, 0x22, 0x85, 0x3b, 0x8f, 0x48,
    0x2a, 0x0e, 0x69, 0xc3, 0xf6, 0xbe, 0xc2, 0xc9, 0x1c, 0x84, 0x41, 0x69, 0xdb, 0x44, 0x78, 0x17, 0x5a, 0x60, 0x28, 0x21, 0x48,
    0xac, 0x0d, 0xa3, 0x18, 0x6e, 0xa4, 0x53, 0xa5, 0x07, 0x75, 0xea, 0x1b, 0x0e, 0x9b, 0x94, 0x35, 0xa5, 0x19, 0x6a, 0xda, 0xa3,
    0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x16, 0x04, 0x14, 0x19, 0xad, 0x25, 0xfe, 0xe9, 0xb2, 0xea, 0xb9, 0xec, 0x58, 0x3c, 0xb7, 0xfd, 0x79, 0xd2, 0xf4,
    0x0d, 0x32, 0x21, 0xa2, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xb6, 0x15, 0xcd, 0xdb,
    0x6d, 0x4c, 0xbb, 0x35, 0xcc, 0xf9, 0x2d, 0xd9, 0xa0, 0x43, 0xd1, 0xa9, 0x58, 0x13, 0x8f, 0x11, 0x30, 0x0a, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x39, 0x85, 0xfd, 0x86, 0x3f, 0x35, 0x93,
    0x7d, 0x21, 0xdf, 0xce, 0x33, 0x97, 0x90, 0x5a, 0x3e, 0xb3, 0x0b, 0xac, 0xca, 0x6d, 0xe8, 0x8b, 0x8f, 0x97, 0x77, 0x0b, 0xbc,
    0xa3, 0x7a, 0xda, 0x32, 0x02, 0x21, 0x00, 0x98, 0x8f, 0x73, 0x09, 0xd2, 0x14, 0x31, 0x1b, 0xa8, 0x8d, 0x53, 0xe7, 0x92, 0x0d,
    0xc0, 0x5d, 0x45, 0xb5, 0x1e, 0x24, 0xe3, 0x2e, 0x4c, 0xf2, 0xcc, 0x5a, 0x64, 0x4b, 0x04, 0x62, 0xbc, 0x26,
};

extern const uint32_t sTestCert_ICA01_1_DER_Len = sizeof(sTestCert_ICA01_1_DER);

extern const uint8_t sTestCert_ICA01_1_PublicKey[] = {
    0x04, 0x84, 0xd4, 0xee, 0x05, 0x2d, 0xe3, 0xe2, 0xbd, 0x70, 0x07, 0x84, 0xce, 0xee, 0xf8, 0x27, 0x30,
    0xde, 0x61, 0x22, 0x85, 0x3b, 0x8f, 0x48, 0x2a, 0x0e, 0x69, 0xc3, 0xf6, 0xbe, 0xc2, 0xc9, 0x1c, 0x84,
    0x41, 0x69, 0xdb, 0x44, 0x78, 0x17, 0x5a, 0x60, 0x28, 0x21, 0x48, 0xac, 0x0d, 0xa3, 0x18, 0x6e, 0xa4,
    0x53, 0xa5, 0x07, 0x75, 0xea, 0x1b, 0x0e, 0x9b, 0x94, 0x35, 0xa5, 0x19, 0x6a, 0xda,
};

extern const uint8_t sTestCert_ICA01_1_PublicKey_Len = sizeof(sTestCert_ICA01_1_PublicKey);

extern const uint8_t sTestCert_ICA01_1_PrivateKey[] = {
    0x30, 0xb2, 0x35, 0x37, 0x06, 0x84, 0x34, 0x14, 0x01, 0x87, 0xc6, 0x44, 0x77, 0xa1, 0x5a, 0x6f,
    0x6c, 0x25, 0xcd, 0xa8, 0x7b, 0x69, 0x08, 0x52, 0x84, 0xf7, 0xf7, 0xb0, 0x1a, 0x42, 0x0f, 0x5c,
};

extern const uint8_t sTestCert_ICA01_1_PrivateKey_Len = sizeof(sTestCert_ICA01_1_PrivateKey);

extern const uint8_t sTestCert_ICA01_1_SubjectKeyId[] = {
    0x19, 0xAD, 0x25, 0xFE, 0xE9, 0xB2, 0xEA, 0xB9, 0xEC, 0x58, 0x3C, 0xB7, 0xFD, 0x79, 0xD2, 0xF4, 0x0D, 0x32, 0x21, 0xA2,
};

extern const uint8_t sTestCert_ICA01_1_SubjectKeyId_Len = sizeof(sTestCert_ICA01_1_SubjectKeyId);

/**************  Test FWSign01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 4565792141002496301 (0x3f5cf3c2fab9592d)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000005
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.2 = FFFFFFFF00000001, CN = FW SIGN CERT 01
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:8f:ff:49:24:f6:af:56:66:cb:1a:ca:c9:ae:09:
                    79:9d:18:da:33:6c:bf:2c:cb:d9:e3:25:27:1c:03:
                    be:8c:d0:3d:76:38:75:dc:7d:bf:0d:ad:86:fa:61:
                    1e:da:0e:c3:be:d1:8a:f0:40:cf:cd:a1:c7:1e:ea:
                    5c:08:56:38:d1
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature
            X509v3 Extended Key Usage: critical
                Code Signing
            X509v3 Subject Key Identifier:
                00:A4:AC:70:9E:AA:D7:60:09:CE:76:30:38:B0:3F:E9:7D:67:23:6F
            X509v3 Authority Key Identifier:
                keyid:19:AD:25:FE:E9:B2:EA:B9:EC:58:3C:B7:FD:79:D2:F4:0D:32:21:A2

    Signature Algorithm: ecdsa-with-SHA256
         30:46:02:21:00:9c:b4:46:09:ba:c9:6e:1e:72:7b:a7:22:d8:
         c5:b6:0a:2f:d8:d9:8a:e3:56:a6:7f:63:8d:87:2a:e8:d5:4e:
         c2:02:21:00:f0:a7:6f:d9:76:bd:51:90:6d:6b:cf:7d:c6:02:
         49:12:39:5d:e3:d6:3b:f8:c7:86:e2:79:3c:6b:71:24:15:3e

-----BEGIN CERTIFICATE-----
MIIBzTCCAXKgAwIBAgIIP1zzwvq5WS0wCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDUwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjA8MSAwHgYKKwYBBAGConwBAgwQRkZGRkZGRkYwMDAwMDAwMTEYMBYG
A1UEAwwPRlcgU0lHTiBDRVJUIDAxMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE
j/9JJPavVmbLGsrJrgl5nRjaM2y/LMvZ4yUnHAO+jNA9djh13H2/Da2G+mEe2g7D
vtGK8EDPzaHHHupcCFY40aN4MHYwDAYDVR0TAQH/BAIwADAOBgNVHQ8BAf8EBAMC
B4AwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwMwHQYDVR0OBBYEFACkrHCeqtdgCc52
MDiwP+l9ZyNvMB8GA1UdIwQYMBaAFBmtJf7psuq57Fg8t/150vQNMiGiMAoGCCqG
SM49BAMCA0kAMEYCIQCctEYJusluHnJ7pyLYxbYKL9jZiuNWpn9jjYcq6NVOwgIh
APCnb9l2vVGQbWvPfcYCSRI5XePWO/jHhuJ5PGtxJBU+
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIJQwvGPeuhA2urQvWfkobhFNhR0f0FSi9sdQfgOUNkNEoAoGCCqGSM49
AwEHoUQDQgAEj/9JJPavVmbLGsrJrgl5nRjaM2y/LMvZ4yUnHAO+jNA9djh13H2/
Da2G+mEe2g7DvtGK8EDPzaHHHupcCFY40Q==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_FWSign01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x3f, 0x5c, 0xf3, 0xc2, 0xfa, 0xb9, 0x59, 0x2d, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x05, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05,
    0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x12, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x2c, 0x01, 0x0f, 0x46, 0x57,
    0x20, 0x53, 0x49, 0x47, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x30, 0x31, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30,
    0x09, 0x41, 0x04, 0x8f, 0xff, 0x49, 0x24, 0xf6, 0xaf, 0x56, 0x66, 0xcb, 0x1a, 0xca, 0xc9, 0xae, 0x09, 0x79, 0x9d, 0x18, 0xda,
    0x33, 0x6c, 0xbf, 0x2c, 0xcb, 0xd9, 0xe3, 0x25, 0x27, 0x1c, 0x03, 0xbe, 0x8c, 0xd0, 0x3d, 0x76, 0x38, 0x75, 0xdc, 0x7d, 0xbf,
    0x0d, 0xad, 0x86, 0xfa, 0x61, 0x1e, 0xda, 0x0e, 0xc3, 0xbe, 0xd1, 0x8a, 0xf0, 0x40, 0xcf, 0xcd, 0xa1, 0xc7, 0x1e, 0xea, 0x5c,
    0x08, 0x56, 0x38, 0xd1, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x01, 0x36, 0x03, 0x04, 0x03, 0x18, 0x30, 0x04,
    0x14, 0x00, 0xa4, 0xac, 0x70, 0x9e, 0xaa, 0xd7, 0x60, 0x09, 0xce, 0x76, 0x30, 0x38, 0xb0, 0x3f, 0xe9, 0x7d, 0x67, 0x23, 0x6f,
    0x30, 0x05, 0x14, 0x19, 0xad, 0x25, 0xfe, 0xe9, 0xb2, 0xea, 0xb9, 0xec, 0x58, 0x3c, 0xb7, 0xfd, 0x79, 0xd2, 0xf4, 0x0d, 0x32,
    0x21, 0xa2, 0x18, 0x35, 0x0b, 0x30, 0x01, 0x21, 0x00, 0x9c, 0xb4, 0x46, 0x09, 0xba, 0xc9, 0x6e, 0x1e, 0x72, 0x7b, 0xa7, 0x22,
    0xd8, 0xc5, 0xb6, 0x0a, 0x2f, 0xd8, 0xd9, 0x8a, 0xe3, 0x56, 0xa6, 0x7f, 0x63, 0x8d, 0x87, 0x2a, 0xe8, 0xd5, 0x4e, 0xc2, 0x30,
    0x02, 0x21, 0x00, 0xf0, 0xa7, 0x6f, 0xd9, 0x76, 0xbd, 0x51, 0x90, 0x6d, 0x6b, 0xcf, 0x7d, 0xc6, 0x02, 0x49, 0x12, 0x39, 0x5d,
    0xe3, 0xd6, 0x3b, 0xf8, 0xc7, 0x86, 0xe2, 0x79, 0x3c, 0x6b, 0x71, 0x24, 0x15, 0x3e, 0x18, 0x18,
};

extern const uint32_t sTestCert_FWSign01_Chip_Len = sizeof(sTestCert_FWSign01_Chip);

extern const uint8_t sTestCert_FWSign01_DER[] = {
    0x30, 0x82, 0x01, 0xcd, 0x30, 0x82, 0x01, 0x72, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x3f, 0x5c, 0xf3, 0xc2, 0xfa, 0xb9,
    0x59, 0x2d, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x3c,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x46, 0x46, 0x46,
    0x46, 0x46, 0x46, 0x46, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04,
    0x03, 0x0c, 0x0f, 0x46, 0x57, 0x20, 0x53, 0x49, 0x47, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x30, 0x31, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0x8f, 0xff, 0x49, 0x24, 0xf6, 0xaf, 0x56, 0x66, 0xcb, 0x1a, 0xca, 0xc9, 0xae, 0x09, 0x79, 0x9d, 0x18, 0xda,
    0x33, 0x6c, 0xbf, 0x2c, 0xcb, 0xd9, 0xe3, 0x25, 0x27, 0x1c, 0x03, 0xbe, 0x8c, 0xd0, 0x3d, 0x76, 0x38, 0x75, 0xdc, 0x7d, 0xbf,
    0x0d, 0xad, 0x86, 0xfa, 0x61, 0x1e, 0xda, 0x0e, 0xc3, 0xbe, 0xd1, 0x8a, 0xf0, 0x40, 0xcf, 0xcd, 0xa1, 0xc7, 0x1e, 0xea, 0x5c,
    0x08, 0x56, 0x38, 0xd1, 0xa3, 0x78, 0x30, 0x76, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30,
    0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x16, 0x06, 0x03,
    0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x03, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x00, 0xa4, 0xac, 0x70, 0x9e, 0xaa, 0xd7, 0x60, 0x09, 0xce, 0x76,
    0x30, 0x38, 0xb0, 0x3f, 0xe9, 0x7d, 0x67, 0x23, 0x6f, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0x19, 0xad, 0x25, 0xfe, 0xe9, 0xb2, 0xea, 0xb9, 0xec, 0x58, 0x3c, 0xb7, 0xfd, 0x79, 0xd2, 0xf4, 0x0d, 0x32, 0x21, 0xa2,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0x9c,
    0xb4, 0x46, 0x09, 0xba, 0xc9, 0x6e, 0x1e, 0x72, 0x7b, 0xa7, 0x22, 0xd8, 0xc5, 0xb6, 0x0a, 0x2f, 0xd8, 0xd9, 0x8a, 0xe3, 0x56,
    0xa6, 0x7f, 0x63, 0x8d, 0x87, 0x2a, 0xe8, 0xd5, 0x4e, 0xc2, 0x02, 0x21, 0x00, 0xf0, 0xa7, 0x6f, 0xd9, 0x76, 0xbd, 0x51, 0x90,
    0x6d, 0x6b, 0xcf, 0x7d, 0xc6, 0x02, 0x49, 0x12, 0x39, 0x5d, 0xe3, 0xd6, 0x3b, 0xf8, 0xc7, 0x86, 0xe2, 0x79, 0x3c, 0x6b, 0x71,
    0x24, 0x15, 0x3e,
};

extern const uint32_t sTestCert_FWSign01_DER_Len = sizeof(sTestCert_FWSign01_DER);

extern const uint8_t sTestCert_FWSign01_PublicKey[] = {
    0x04, 0x8f, 0xff, 0x49, 0x24, 0xf6, 0xaf, 0x56, 0x66, 0xcb, 0x1a, 0xca, 0xc9, 0xae, 0x09, 0x79, 0x9d,
    0x18, 0xda, 0x33, 0x6c, 0xbf, 0x2c, 0xcb, 0xd9, 0xe3, 0x25, 0x27, 0x1c, 0x03, 0xbe, 0x8c, 0xd0, 0x3d,
    0x76, 0x38, 0x75, 0xdc, 0x7d, 0xbf, 0x0d, 0xad, 0x86, 0xfa, 0x61, 0x1e, 0xda, 0x0e, 0xc3, 0xbe, 0xd1,
    0x8a, 0xf0, 0x40, 0xcf, 0xcd, 0xa1, 0xc7, 0x1e, 0xea, 0x5c, 0x08, 0x56, 0x38, 0xd1,
};

extern const uint8_t sTestCert_FWSign01_PublicKey_Len = sizeof(sTestCert_FWSign01_PublicKey);

extern const uint8_t sTestCert_FWSign01_PrivateKey[] = {
    0x94, 0x30, 0xbc, 0x63, 0xde, 0xba, 0x10, 0x36, 0xba, 0xb4, 0x2f, 0x59, 0xf9, 0x28, 0x6e, 0x11,
    0x4d, 0x85, 0x1d, 0x1f, 0xd0, 0x54, 0xa2, 0xf6, 0xc7, 0x50, 0x7e, 0x03, 0x94, 0x36, 0x43, 0x44,
};

extern const uint8_t sTestCert_FWSign01_PrivateKey_Len = sizeof(sTestCert_FWSign01_PrivateKey);

extern const uint8_t sTestCert_FWSign01_SubjectKeyId[] = {
    0x00, 0xA4, 0xAC, 0x70, 0x9E, 0xAA, 0xD7, 0x60, 0x09, 0xCE, 0x76, 0x30, 0x38, 0xB0, 0x3F, 0xE9, 0x7D, 0x67, 0x23, 0x6F,
};

extern const uint8_t sTestCert_FWSign01_SubjectKeyId_Len = sizeof(sTestCert_FWSign01_SubjectKeyId);

/**************  Test Node01_01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 8884951982843795355 (0x7b4db0c0ffce979b)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000003
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00010001, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:80:1d:aa:ca:9b:38:28:9a:de:bb:9f:d6:d7:9a:
                    e9:de:ec:f5:27:2a:ad:3d:bb:66:fb:6e:0c:6d:5f:
                    11:db:b0:74:9b:ce:94:5c:2c:fe:4f:b4:f8:42:22:
                    ac:57:a5:fa:c4:d6:e7:1f:e4:c8:e6:04:46:b0:e0:
                    5a:75:53:db:95
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                B8:AE:1D:8E:0D:61:A7:89:69:E7:59:6C:E8:27:BF:AE:FD:A4:53:A3
            X509v3 Authority Key Identifier:
                keyid:64:40:33:58:85:4C:D2:8B:CD:E1:D4:AA:23:06:1F:7B:2C:6D:2D:98

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:21:00:d3:71:56:56:76:ec:f2:c5:9f:83:75:5c:5a:
         18:32:86:0e:9c:0a:38:0e:3c:6e:96:09:0f:22:dd:64:21:5e:
         51:02:20:78:53:af:13:89:7c:d0:48:1f:4b:71:60:94:2a:c2:
         4d:29:71:4f:37:7a:cc:cd:2f:c0:7a:ff:82:1a:76:eb:c8

-----BEGIN CERTIFICATE-----
MIIB4DCCAYagAwIBAgIIe02wwP/Ol5swCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDMwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjBEMSAwHgYKKwYBBAGConwBAQwQREVERURFREUwMDAxMDAwMTEgMB4G
CisGAQQBgqJ8AQUMEEZBQjAwMDAwMDAwMDAwMUQwWTATBgcqhkjOPQIBBggqhkjO
PQMBBwNCAASAHarKmzgomt67n9bXmune7PUnKq09u2b7bgxtXxHbsHSbzpRcLP5P
tPhCIqxXpfrE1ucf5MjmBEaw4Fp1U9uVo4GDMIGAMAwGA1UdEwEB/wQCMAAwDgYD
VR0PAQH/BAQDAgWgMCAGA1UdJQEB/wQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAd
BgNVHQ4EFgQUuK4djg1hp4lp51ls6Ce/rv2kU6MwHwYDVR0jBBgwFoAUZEAzWIVM
0ovN4dSqIwYfeyxtLZgwCgYIKoZIzj0EAwIDSAAwRQIhANNxVlZ27PLFn4N1XFoY
MoYOnAo4DjxulgkPIt1kIV5RAiB4U68TiXzQSB9LcWCUKsJNKXFPN3rMzS/Aev+C
GnbryA==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIIHfKOL6g7BTL+CKR72+ayljfkQVV+s/U7qwnxZHEwgFoAoGCCqGSM49
AwEHoUQDQgAEgB2qyps4KJreu5/W15rp3uz1JyqtPbtm+24MbV8R27B0m86UXCz+
T7T4QiKsV6X6xNbnH+TI5gRGsOBadVPblQ==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node01_01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x7b, 0x4d, 0xb0, 0xc0, 0xff, 0xce, 0x97, 0x9b, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x03, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05,
    0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x11, 0x01, 0x00, 0x01, 0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x80, 0x1d, 0xaa, 0xca, 0x9b,
    0x38, 0x28, 0x9a, 0xde, 0xbb, 0x9f, 0xd6, 0xd7, 0x9a, 0xe9, 0xde, 0xec, 0xf5, 0x27, 0x2a, 0xad, 0x3d, 0xbb, 0x66, 0xfb, 0x6e,
    0x0c, 0x6d, 0x5f, 0x11, 0xdb, 0xb0, 0x74, 0x9b, 0xce, 0x94, 0x5c, 0x2c, 0xfe, 0x4f, 0xb4, 0xf8, 0x42, 0x22, 0xac, 0x57, 0xa5,
    0xfa, 0xc4, 0xd6, 0xe7, 0x1f, 0xe4, 0xc8, 0xe6, 0x04, 0x46, 0xb0, 0xe0, 0x5a, 0x75, 0x53, 0xdb, 0x95, 0x37, 0x0a, 0x35, 0x01,
    0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04, 0x01, 0x18, 0x30, 0x04, 0x14, 0xb8, 0xae, 0x1d, 0x8e, 0x0d,
    0x61, 0xa7, 0x89, 0x69, 0xe7, 0x59, 0x6c, 0xe8, 0x27, 0xbf, 0xae, 0xfd, 0xa4, 0x53, 0xa3, 0x30, 0x05, 0x14, 0x64, 0x40, 0x33,
    0x58, 0x85, 0x4c, 0xd2, 0x8b, 0xcd, 0xe1, 0xd4, 0xaa, 0x23, 0x06, 0x1f, 0x7b, 0x2c, 0x6d, 0x2d, 0x98, 0x18, 0x35, 0x0b, 0x30,
    0x01, 0x21, 0x00, 0xd3, 0x71, 0x56, 0x56, 0x76, 0xec, 0xf2, 0xc5, 0x9f, 0x83, 0x75, 0x5c, 0x5a, 0x18, 0x32, 0x86, 0x0e, 0x9c,
    0x0a, 0x38, 0x0e, 0x3c, 0x6e, 0x96, 0x09, 0x0f, 0x22, 0xdd, 0x64, 0x21, 0x5e, 0x51, 0x30, 0x02, 0x20, 0x78, 0x53, 0xaf, 0x13,
    0x89, 0x7c, 0xd0, 0x48, 0x1f, 0x4b, 0x71, 0x60, 0x94, 0x2a, 0xc2, 0x4d, 0x29, 0x71, 0x4f, 0x37, 0x7a, 0xcc, 0xcd, 0x2f, 0xc0,
    0x7a, 0xff, 0x82, 0x1a, 0x76, 0xeb, 0xc8, 0x18, 0x18,
};

extern const uint32_t sTestCert_Node01_01_Chip_Len = sizeof(sTestCert_Node01_01_Chip);

extern const uint8_t sTestCert_Node01_01_DER[] = {
    0x30, 0x82, 0x01, 0xe0, 0x30, 0x82, 0x01, 0x86, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x7b, 0x4d, 0xb0, 0xc0, 0xff, 0xce,
    0x97, 0x9b, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44,
    0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x80, 0x1d, 0xaa, 0xca, 0x9b, 0x38, 0x28, 0x9a, 0xde, 0xbb,
    0x9f, 0xd6, 0xd7, 0x9a, 0xe9, 0xde, 0xec, 0xf5, 0x27, 0x2a, 0xad, 0x3d, 0xbb, 0x66, 0xfb, 0x6e, 0x0c, 0x6d, 0x5f, 0x11, 0xdb,
    0xb0, 0x74, 0x9b, 0xce, 0x94, 0x5c, 0x2c, 0xfe, 0x4f, 0xb4, 0xf8, 0x42, 0x22, 0xac, 0x57, 0xa5, 0xfa, 0xc4, 0xd6, 0xe7, 0x1f,
    0xe4, 0xc8, 0xe6, 0x04, 0x46, 0xb0, 0xe0, 0x5a, 0x75, 0x53, 0xdb, 0x95, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06,
    0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff,
    0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06,
    0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d,
    0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xb8, 0xae, 0x1d, 0x8e, 0x0d, 0x61, 0xa7, 0x89, 0x69, 0xe7, 0x59, 0x6c,
    0xe8, 0x27, 0xbf, 0xae, 0xfd, 0xa4, 0x53, 0xa3, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
    0x64, 0x40, 0x33, 0x58, 0x85, 0x4c, 0xd2, 0x8b, 0xcd, 0xe1, 0xd4, 0xaa, 0x23, 0x06, 0x1f, 0x7b, 0x2c, 0x6d, 0x2d, 0x98, 0x30,
    0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xd3, 0x71,
    0x56, 0x56, 0x76, 0xec, 0xf2, 0xc5, 0x9f, 0x83, 0x75, 0x5c, 0x5a, 0x18, 0x32, 0x86, 0x0e, 0x9c, 0x0a, 0x38, 0x0e, 0x3c, 0x6e,
    0x96, 0x09, 0x0f, 0x22, 0xdd, 0x64, 0x21, 0x5e, 0x51, 0x02, 0x20, 0x78, 0x53, 0xaf, 0x13, 0x89, 0x7c, 0xd0, 0x48, 0x1f, 0x4b,
    0x71, 0x60, 0x94, 0x2a, 0xc2, 0x4d, 0x29, 0x71, 0x4f, 0x37, 0x7a, 0xcc, 0xcd, 0x2f, 0xc0, 0x7a, 0xff, 0x82, 0x1a, 0x76, 0xeb,
    0xc8,
};

extern const uint32_t sTestCert_Node01_01_DER_Len = sizeof(sTestCert_Node01_01_DER);

extern const uint8_t sTestCert_Node01_01_PublicKey[] = {
    0x04, 0x80, 0x1d, 0xaa, 0xca, 0x9b, 0x38, 0x28, 0x9a, 0xde, 0xbb, 0x9f, 0xd6, 0xd7, 0x9a, 0xe9, 0xde,
    0xec, 0xf5, 0x27, 0x2a, 0xad, 0x3d, 0xbb, 0x66, 0xfb, 0x6e, 0x0c, 0x6d, 0x5f, 0x11, 0xdb, 0xb0, 0x74,
    0x9b, 0xce, 0x94, 0x5c, 0x2c, 0xfe, 0x4f, 0xb4, 0xf8, 0x42, 0x22, 0xac, 0x57, 0xa5, 0xfa, 0xc4, 0xd6,
    0xe7, 0x1f, 0xe4, 0xc8, 0xe6, 0x04, 0x46, 0xb0, 0xe0, 0x5a, 0x75, 0x53, 0xdb, 0x95,
};

extern const uint8_t sTestCert_Node01_01_PublicKey_Len = sizeof(sTestCert_Node01_01_PublicKey);

extern const uint8_t sTestCert_Node01_01_PrivateKey[] = {
    0x81, 0xdf, 0x28, 0xe2, 0xfa, 0x83, 0xb0, 0x53, 0x2f, 0xe0, 0x8a, 0x47, 0xbd, 0xbe, 0x6b, 0x29,
    0x63, 0x7e, 0x44, 0x15, 0x57, 0xeb, 0x3f, 0x53, 0xba, 0xb0, 0x9f, 0x16, 0x47, 0x13, 0x08, 0x05,
};

extern const uint8_t sTestCert_Node01_01_PrivateKey_Len = sizeof(sTestCert_Node01_01_PrivateKey);

extern const uint8_t sTestCert_Node01_01_SubjectKeyId[] = {
    0xB8, 0xAE, 0x1D, 0x8E, 0x0D, 0x61, 0xA7, 0x89, 0x69, 0xE7, 0x59, 0x6C, 0xE8, 0x27, 0xBF, 0xAE, 0xFD, 0xA4, 0x53, 0xA3,
};

extern const uint8_t sTestCert_Node01_01_SubjectKeyId_Len = sizeof(sTestCert_Node01_01_SubjectKeyId);

/**************  Test Node01_02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 7035778132375050047 (0x61a41aef2aad173f)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00010002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:18:15:d9:30:c5:49:0b:b2:d7:af:1e:83:fd:d7:
                    cf:42:5c:09:e7:c6:41:5a:bc:25:21:c2:d5:d0:7e:
                    9b:72:00:41:41:ca:89:71:2f:37:49:0d:a2:71:0b:
                    d5:ef:43:3e:3d:ce:fb:6a:ea:0a:df:c7:5e:89:34:
                    74:40:8c:5f:a5
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                18:66:92:31:EF:E4:6F:30:1E:BA:36:A9:EF:F5:B2:A2:C3:A1:6F:00
            X509v3 Authority Key Identifier:
                keyid:B6:15:CD:DB:6D:4C:BB:35:CC:F9:2D:D9:A0:43:D1:A9:58:13:8F:11

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:46:a1:f8:3a:e3:28:24:d0:6a:4b:11:d3:0d:c8:
         1f:dd:9f:b5:02:81:f9:df:0d:84:96:fc:17:f2:a1:b7:06:ae:
         02:21:00:c9:bf:01:04:09:87:ee:ac:bd:61:ed:75:d7:44:77:
         a5:d8:b7:48:84:41:0c:60:58:3b:ac:c8:53:dc:65:7e:3e

-----BEGIN CERTIFICATE-----
MIIB4DCCAYagAwIBAgIIYaQa7yqtFz8wCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjBEMSAwHgYKKwYBBAGConwBAQwQREVERURFREUwMDAxMDAwMjEgMB4G
CisGAQQBgqJ8AQUMEEZBQjAwMDAwMDAwMDAwMUQwWTATBgcqhkjOPQIBBggqhkjO
PQMBBwNCAAQYFdkwxUkLstevHoP9189CXAnnxkFavCUhwtXQfptyAEFByolxLzdJ
DaJxC9XvQz49zvtq6grfx16JNHRAjF+lo4GDMIGAMAwGA1UdEwEB/wQCMAAwDgYD
VR0PAQH/BAQDAgWgMCAGA1UdJQEB/wQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAd
BgNVHQ4EFgQUGGaSMe/kbzAeujap7/WyosOhbwAwHwYDVR0jBBgwFoAUthXN221M
uzXM+S3ZoEPRqVgTjxEwCgYIKoZIzj0EAwIDSAAwRQIgRqH4OuMoJNBqSxHTDcgf
3Z+1AoH53w2ElvwX8qG3Bq4CIQDJvwEECYfurL1h7XXXRHel2LdIhEEMYFg7rMhT
3GV+Pg==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIPhcH9oqcGNLbUnLKOLrGpDWSO/Kzdg+N/CEzgVtJhJioAoGCCqGSM49
AwEHoUQDQgAEGBXZMMVJC7LXrx6D/dfPQlwJ58ZBWrwlIcLV0H6bcgBBQcqJcS83
SQ2icQvV70M+Pc77auoK38deiTR0QIxfpQ==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node01_02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x61, 0xa4, 0x1a, 0xef, 0x2a, 0xad, 0x17, 0x3f, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05,
    0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x11, 0x02, 0x00, 0x01, 0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x18, 0x15, 0xd9, 0x30, 0xc5,
    0x49, 0x0b, 0xb2, 0xd7, 0xaf, 0x1e, 0x83, 0xfd, 0xd7, 0xcf, 0x42, 0x5c, 0x09, 0xe7, 0xc6, 0x41, 0x5a, 0xbc, 0x25, 0x21, 0xc2,
    0xd5, 0xd0, 0x7e, 0x9b, 0x72, 0x00, 0x41, 0x41, 0xca, 0x89, 0x71, 0x2f, 0x37, 0x49, 0x0d, 0xa2, 0x71, 0x0b, 0xd5, 0xef, 0x43,
    0x3e, 0x3d, 0xce, 0xfb, 0x6a, 0xea, 0x0a, 0xdf, 0xc7, 0x5e, 0x89, 0x34, 0x74, 0x40, 0x8c, 0x5f, 0xa5, 0x37, 0x0a, 0x35, 0x01,
    0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04, 0x01, 0x18, 0x30, 0x04, 0x14, 0x18, 0x66, 0x92, 0x31, 0xef,
    0xe4, 0x6f, 0x30, 0x1e, 0xba, 0x36, 0xa9, 0xef, 0xf5, 0xb2, 0xa2, 0xc3, 0xa1, 0x6f, 0x00, 0x30, 0x05, 0x14, 0xb6, 0x15, 0xcd,
    0xdb, 0x6d, 0x4c, 0xbb, 0x35, 0xcc, 0xf9, 0x2d, 0xd9, 0xa0, 0x43, 0xd1, 0xa9, 0x58, 0x13, 0x8f, 0x11, 0x18, 0x35, 0x0b, 0x30,
    0x01, 0x20, 0x46, 0xa1, 0xf8, 0x3a, 0xe3, 0x28, 0x24, 0xd0, 0x6a, 0x4b, 0x11, 0xd3, 0x0d, 0xc8, 0x1f, 0xdd, 0x9f, 0xb5, 0x02,
    0x81, 0xf9, 0xdf, 0x0d, 0x84, 0x96, 0xfc, 0x17, 0xf2, 0xa1, 0xb7, 0x06, 0xae, 0x30, 0x02, 0x21, 0x00, 0xc9, 0xbf, 0x01, 0x04,
    0x09, 0x87, 0xee, 0xac, 0xbd, 0x61, 0xed, 0x75, 0xd7, 0x44, 0x77, 0xa5, 0xd8, 0xb7, 0x48, 0x84, 0x41, 0x0c, 0x60, 0x58, 0x3b,
    0xac, 0xc8, 0x53, 0xdc, 0x65, 0x7e, 0x3e, 0x18, 0x18,
};

extern const uint32_t sTestCert_Node01_02_Chip_Len = sizeof(sTestCert_Node01_02_Chip);

extern const uint8_t sTestCert_Node01_02_DER[] = {
    0x30, 0x82, 0x01, 0xe0, 0x30, 0x82, 0x01, 0x86, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x61, 0xa4, 0x1a, 0xef, 0x2a, 0xad,
    0x17, 0x3f, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44,
    0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x18, 0x15, 0xd9, 0x30, 0xc5, 0x49, 0x0b, 0xb2, 0xd7, 0xaf,
    0x1e, 0x83, 0xfd, 0xd7, 0xcf, 0x42, 0x5c, 0x09, 0xe7, 0xc6, 0x41, 0x5a, 0xbc, 0x25, 0x21, 0xc2, 0xd5, 0xd0, 0x7e, 0x9b, 0x72,
    0x00, 0x41, 0x41, 0xca, 0x89, 0x71, 0x2f, 0x37, 0x49, 0x0d, 0xa2, 0x71, 0x0b, 0xd5, 0xef, 0x43, 0x3e, 0x3d, 0xce, 0xfb, 0x6a,
    0xea, 0x0a, 0xdf, 0xc7, 0x5e, 0x89, 0x34, 0x74, 0x40, 0x8c, 0x5f, 0xa5, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06,
    0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff,
    0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06,
    0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d,
    0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x18, 0x66, 0x92, 0x31, 0xef, 0xe4, 0x6f, 0x30, 0x1e, 0xba, 0x36, 0xa9,
    0xef, 0xf5, 0xb2, 0xa2, 0xc3, 0xa1, 0x6f, 0x00, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
    0xb6, 0x15, 0xcd, 0xdb, 0x6d, 0x4c, 0xbb, 0x35, 0xcc, 0xf9, 0x2d, 0xd9, 0xa0, 0x43, 0xd1, 0xa9, 0x58, 0x13, 0x8f, 0x11, 0x30,
    0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x46, 0xa1, 0xf8,
    0x3a, 0xe3, 0x28, 0x24, 0xd0, 0x6a, 0x4b, 0x11, 0xd3, 0x0d, 0xc8, 0x1f, 0xdd, 0x9f, 0xb5, 0x02, 0x81, 0xf9, 0xdf, 0x0d, 0x84,
    0x96, 0xfc, 0x17, 0xf2, 0xa1, 0xb7, 0x06, 0xae, 0x02, 0x21, 0x00, 0xc9, 0xbf, 0x01, 0x04, 0x09, 0x87, 0xee, 0xac, 0xbd, 0x61,
    0xed, 0x75, 0xd7, 0x44, 0x77, 0xa5, 0xd8, 0xb7, 0x48, 0x84, 0x41, 0x0c, 0x60, 0x58, 0x3b, 0xac, 0xc8, 0x53, 0xdc, 0x65, 0x7e,
    0x3e,
};

extern const uint32_t sTestCert_Node01_02_DER_Len = sizeof(sTestCert_Node01_02_DER);

extern const uint8_t sTestCert_Node01_02_PublicKey[] = {
    0x04, 0x18, 0x15, 0xd9, 0x30, 0xc5, 0x49, 0x0b, 0xb2, 0xd7, 0xaf, 0x1e, 0x83, 0xfd, 0xd7, 0xcf, 0x42,
    0x5c, 0x09, 0xe7, 0xc6, 0x41, 0x5a, 0xbc, 0x25, 0x21, 0xc2, 0xd5, 0xd0, 0x7e, 0x9b, 0x72, 0x00, 0x41,
    0x41, 0xca, 0x89, 0x71, 0x2f, 0x37, 0x49, 0x0d, 0xa2, 0x71, 0x0b, 0xd5, 0xef, 0x43, 0x3e, 0x3d, 0xce,
    0xfb, 0x6a, 0xea, 0x0a, 0xdf, 0xc7, 0x5e, 0x89, 0x34, 0x74, 0x40, 0x8c, 0x5f, 0xa5,
};

extern const uint8_t sTestCert_Node01_02_PublicKey_Len = sizeof(sTestCert_Node01_02_PublicKey);

extern const uint8_t sTestCert_Node01_02_PrivateKey[] = {
    0xf8, 0x5c, 0x1f, 0xda, 0x2a, 0x70, 0x63, 0x4b, 0x6d, 0x49, 0xcb, 0x28, 0xe2, 0xeb, 0x1a, 0x90,
    0xd6, 0x48, 0xef, 0xca, 0xcd, 0xd8, 0x3e, 0x37, 0xf0, 0x84, 0xce, 0x05, 0x6d, 0x26, 0x12, 0x62,
};

extern const uint8_t sTestCert_Node01_02_PrivateKey_Len = sizeof(sTestCert_Node01_02_PrivateKey);

extern const uint8_t sTestCert_Node01_02_SubjectKeyId[] = {
    0x18, 0x66, 0x92, 0x31, 0xEF, 0xE4, 0x6F, 0x30, 0x1E, 0xBA, 0x36, 0xA9, 0xEF, 0xF5, 0xB2, 0xA2, 0xC3, 0xA1, 0x6F, 0x00,
};

extern const uint8_t sTestCert_Node01_02_SubjectKeyId_Len = sizeof(sTestCert_Node01_02_SubjectKeyId);

/**************  Test Node02_01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1822057595605671495 (0x19493fbac260de47)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020001, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:1a:35:0f:3f:54:52:3d:9c:3a:86:88:c7:23:29:
                    1c:3f:49:96:88:2d:94:f5:50:df:bc:f4:d4:a3:dc:
                    a5:ba:89:31:01:c4:42:00:7e:f5:16:34:56:bd:51:
                    17:28:7c:70:b8:6c:5e:d6:42:e8:f0:e4:a9:da:9a:
                    7d:5e:e7:14:aa
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                21:A1:B4:6C:8E:08:75:5E:76:C9:F2:6D:2D:0F:E7:70:67:7D:15:C0
            X509v3 Authority Key Identifier:
                keyid:73:65:AD:0D:22:26:D5:62:C2:1A:0B:F9:D1:7F:ED:6D:93:43:62:BA

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:21:00:89:f2:7e:01:f1:51:51:89:aa:ea:02:56:9d:
         6b:b9:3c:df:7b:9b:e2:ce:60:ff:8e:27:90:1b:23:71:e2:c3:
         82:02:20:06:0d:3a:b1:0e:79:21:2d:2f:46:c6:11:3c:62:67:
         bf:12:b5:4d:09:c8:e4:b2:97:8e:ec:ea:11:4b:a4:1e:3d

-----BEGIN CERTIFICATE-----
MIICAjCCAaigAwIBAgIIGUk/usJg3kcwCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQEMEERFREVERURFMDAwMjAwMDExIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEGjUPP1RS
PZw6hojHIykcP0mWiC2U9VDfvPTUo9yluokxAcRCAH71FjRWvVEXKHxwuGxe1kLo
8OSp2pp9XucUqqOBgzCBgDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIFoDAg
BgNVHSUBAf8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFCGhtGyO
CHVedsnybS0P53BnfRXAMB8GA1UdIwQYMBaAFHNlrQ0iJtViwhoL+dF/7W2TQ2K6
MAoGCCqGSM49BAMCA0gAMEUCIQCJ8n4B8VFRiarqAlada7k833ub4s5g/44nkBsj
ceLDggIgBg06sQ55IS0vRsYRPGJnvxK1TQnI5LKXjuzqEUukHj0=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIGWYWc1oGicUYISagUE3XLaLk85FKPzbb26e3mfHQXqjoAoGCCqGSM49
AwEHoUQDQgAEGjUPP1RSPZw6hojHIykcP0mWiC2U9VDfvPTUo9yluokxAcRCAH71
FjRWvVEXKHxwuGxe1kLo8OSp2pp9XucUqg==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x19, 0x49, 0x3f, 0xba, 0xc2, 0x60, 0xde, 0x47, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x11, 0x01, 0x00, 0x02,
    0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08,
    0x01, 0x30, 0x09, 0x41, 0x04, 0x1a, 0x35, 0x0f, 0x3f, 0x54, 0x52, 0x3d, 0x9c, 0x3a, 0x86, 0x88, 0xc7, 0x23, 0x29, 0x1c, 0x3f,
    0x49, 0x96, 0x88, 0x2d, 0x94, 0xf5, 0x50, 0xdf, 0xbc, 0xf4, 0xd4, 0xa3, 0xdc, 0xa5, 0xba, 0x89, 0x31, 0x01, 0xc4, 0x42, 0x00,
    0x7e, 0xf5, 0x16, 0x34, 0x56, 0xbd, 0x51, 0x17, 0x28, 0x7c, 0x70, 0xb8, 0x6c, 0x5e, 0xd6, 0x42, 0xe8, 0xf0, 0xe4, 0xa9, 0xda,
    0x9a, 0x7d, 0x5e, 0xe7, 0x14, 0xaa, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04,
    0x01, 0x18, 0x30, 0x04, 0x14, 0x21, 0xa1, 0xb4, 0x6c, 0x8e, 0x08, 0x75, 0x5e, 0x76, 0xc9, 0xf2, 0x6d, 0x2d, 0x0f, 0xe7, 0x70,
    0x67, 0x7d, 0x15, 0xc0, 0x30, 0x05, 0x14, 0x73, 0x65, 0xad, 0x0d, 0x22, 0x26, 0xd5, 0x62, 0xc2, 0x1a, 0x0b, 0xf9, 0xd1, 0x7f,
    0xed, 0x6d, 0x93, 0x43, 0x62, 0xba, 0x18, 0x35, 0x0b, 0x30, 0x01, 0x21, 0x00, 0x89, 0xf2, 0x7e, 0x01, 0xf1, 0x51, 0x51, 0x89,
    0xaa, 0xea, 0x02, 0x56, 0x9d, 0x6b, 0xb9, 0x3c, 0xdf, 0x7b, 0x9b, 0xe2, 0xce, 0x60, 0xff, 0x8e, 0x27, 0x90, 0x1b, 0x23, 0x71,
    0xe2, 0xc3, 0x82, 0x30, 0x02, 0x20, 0x06, 0x0d, 0x3a, 0xb1, 0x0e, 0x79, 0x21, 0x2d, 0x2f, 0x46, 0xc6, 0x11, 0x3c, 0x62, 0x67,
    0xbf, 0x12, 0xb5, 0x4d, 0x09, 0xc8, 0xe4, 0xb2, 0x97, 0x8e, 0xec, 0xea, 0x11, 0x4b, 0xa4, 0x1e, 0x3d, 0x18, 0x18,
};

extern const uint32_t sTestCert_Node02_01_Chip_Len = sizeof(sTestCert_Node02_01_Chip);

extern const uint8_t sTestCert_Node02_01_DER[] = {
    0x30, 0x82, 0x02, 0x02, 0x30, 0x82, 0x01, 0xa8, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x19, 0x49, 0x3f, 0xba, 0xc2, 0x60,
    0xde, 0x47, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30,
    0x32, 0x30, 0x30, 0x30, 0x31, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0x1a, 0x35, 0x0f, 0x3f, 0x54, 0x52, 0x3d, 0x9c, 0x3a, 0x86, 0x88, 0xc7, 0x23, 0x29, 0x1c, 0x3f, 0x49, 0x96,
    0x88, 0x2d, 0x94, 0xf5, 0x50, 0xdf, 0xbc, 0xf4, 0xd4, 0xa3, 0xdc, 0xa5, 0xba, 0x89, 0x31, 0x01, 0xc4, 0x42, 0x00, 0x7e, 0xf5,
    0x16, 0x34, 0x56, 0xbd, 0x51, 0x17, 0x28, 0x7c, 0x70, 0xb8, 0x6c, 0x5e, 0xd6, 0x42, 0xe8, 0xf0, 0xe4, 0xa9, 0xda, 0x9a, 0x7d,
    0x5e, 0xe7, 0x14, 0xaa, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04,
    0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20,
    0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03,
    0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04,
    0x14, 0x21, 0xa1, 0xb4, 0x6c, 0x8e, 0x08, 0x75, 0x5e, 0x76, 0xc9, 0xf2, 0x6d, 0x2d, 0x0f, 0xe7, 0x70, 0x67, 0x7d, 0x15, 0xc0,
    0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x73, 0x65, 0xad, 0x0d, 0x22, 0x26, 0xd5, 0x62,
    0xc2, 0x1a, 0x0b, 0xf9, 0xd1, 0x7f, 0xed, 0x6d, 0x93, 0x43, 0x62, 0xba, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,
    0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0x89, 0xf2, 0x7e, 0x01, 0xf1, 0x51, 0x51, 0x89, 0xaa, 0xea,
    0x02, 0x56, 0x9d, 0x6b, 0xb9, 0x3c, 0xdf, 0x7b, 0x9b, 0xe2, 0xce, 0x60, 0xff, 0x8e, 0x27, 0x90, 0x1b, 0x23, 0x71, 0xe2, 0xc3,
    0x82, 0x02, 0x20, 0x06, 0x0d, 0x3a, 0xb1, 0x0e, 0x79, 0x21, 0x2d, 0x2f, 0x46, 0xc6, 0x11, 0x3c, 0x62, 0x67, 0xbf, 0x12, 0xb5,
    0x4d, 0x09, 0xc8, 0xe4, 0xb2, 0x97, 0x8e, 0xec, 0xea, 0x11, 0x4b, 0xa4, 0x1e, 0x3d,
};

extern const uint32_t sTestCert_Node02_01_DER_Len = sizeof(sTestCert_Node02_01_DER);

extern const uint8_t sTestCert_Node02_01_PublicKey[] = {
    0x04, 0x1a, 0x35, 0x0f, 0x3f, 0x54, 0x52, 0x3d, 0x9c, 0x3a, 0x86, 0x88, 0xc7, 0x23, 0x29, 0x1c, 0x3f,
    0x49, 0x96, 0x88, 0x2d, 0x94, 0xf5, 0x50, 0xdf, 0xbc, 0xf4, 0xd4, 0xa3, 0xdc, 0xa5, 0xba, 0x89, 0x31,
    0x01, 0xc4, 0x42, 0x00, 0x7e, 0xf5, 0x16, 0x34, 0x56, 0xbd, 0x51, 0x17, 0x28, 0x7c, 0x70, 0xb8, 0x6c,
    0x5e, 0xd6, 0x42, 0xe8, 0xf0, 0xe4, 0xa9, 0xda, 0x9a, 0x7d, 0x5e, 0xe7, 0x14, 0xaa,
};

extern const uint8_t sTestCert_Node02_01_PublicKey_Len = sizeof(sTestCert_Node02_01_PublicKey);

extern const uint8_t sTestCert_Node02_01_PrivateKey[] = {
    0x65, 0x98, 0x59, 0xcd, 0x68, 0x1a, 0x27, 0x14, 0x60, 0x84, 0x9a, 0x81, 0x41, 0x37, 0x5c, 0xb6,
    0x8b, 0x93, 0xce, 0x45, 0x28, 0xfc, 0xdb, 0x6f, 0x6e, 0x9e, 0xde, 0x67, 0xc7, 0x41, 0x7a, 0xa3,
};

extern const uint8_t sTestCert_Node02_01_PrivateKey_Len = sizeof(sTestCert_Node02_01_PrivateKey);

extern const uint8_t sTestCert_Node02_01_SubjectKeyId[] = {
    0x21, 0xA1, 0xB4, 0x6C, 0x8E, 0x08, 0x75, 0x5E, 0x76, 0xC9, 0xF2, 0x6D, 0x2D, 0x0F, 0xE7, 0x70, 0x67, 0x7D, 0x15, 0xC0,
};

extern const uint8_t sTestCert_Node02_01_SubjectKeyId_Len = sizeof(sTestCert_Node02_01_SubjectKeyId);

/**************  Test Node02_02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 920911298043185114 (0xcc7bbf2458207da)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D, CN = TEST CERT COMMON NAME Attr
for Node02_02 Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub:
                    04:55:8d:74:11:9b:95:c0:6f:0f:2e:7c:3d:49:10:
                    91:f3:4c:6d:72:f5:8b:34:d4:02:a3:1e:3d:3a:7c:
                    e1:73:70:57:fe:7c:05:a8:ab:26:74:35:08:e7:93:
                    01:75:96:66:d6:da:1c:6a:0d:89:0c:c3:63:ed:6d:
                    4d:27:dc:dc:66
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                ED:5D:CD:90:38:43:21:7D:7F:94:0B:54:AA:86:38:1B:06:C8:EB:C2
            X509v3 Authority Key Identifier:
                keyid:73:65:AD:0D:22:26:D5:62:C2:1A:0B:F9:D1:7F:ED:6D:93:43:62:BA

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:7a:32:3e:a8:95:e4:79:b1:99:90:5a:72:4a:f4:
         3f:e4:5c:46:85:d1:0c:ee:18:b0:d5:fd:89:fa:3f:97:db:0a:
         02:20:05:dc:c0:bc:e3:d5:aa:51:f2:ac:b8:26:55:ed:35:fc:
         6e:e4:b9:9a:f1:c5:45:e3:3a:72:cb:0f:7f:57:a1:48

-----BEGIN CERTIFICATE-----
MIICNDCCAdugAwIBAgIIDMe78kWCB9owCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowdzEgMB4G
CisGAQQBgqJ8AQEMEERFREVERURFMDAwMjAwMDIxIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMTEwLwYDVQQDDChURVNUIENFUlQgQ09NTU9OIE5BTUUg
QXR0ciBmb3IgTm9kZTAyXzAyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEVY10
EZuVwG8PLnw9SRCR80xtcvWLNNQCox49Onzhc3BX/nwFqKsmdDUI55MBdZZm1toc
ag2JDMNj7W1NJ9zcZqOBgzCBgDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIF
oDAgBgNVHSUBAf8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFO1d
zZA4QyF9f5QLVKqGOBsGyOvCMB8GA1UdIwQYMBaAFHNlrQ0iJtViwhoL+dF/7W2T
Q2K6MAoGCCqGSM49BAMCA0cAMEQCIHoyPqiV5HmxmZBackr0P+RcRoXRDO4YsNX9
ifo/l9sKAiAF3MC849WqUfKsuCZV7TX8buS5mvHFReM6cssPf1ehSA==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIFS89HAFIU4RYpUCis6jAEniIIjKXsrjdymsM5cIPIqUoAoGCCqGSM49
AwEHoUQDQgAEVY10EZuVwG8PLnw9SRCR80xtcvWLNNQCox49Onzhc3BX/nwFqKsm
dDUI55MBdZZm1tocag2JDMNj7W1NJ9zcZg==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x0c, 0xc7, 0xbb, 0xf2, 0x45, 0x82, 0x07, 0xda, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x11, 0x02, 0x00, 0x02,
    0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x2c, 0x01, 0x28, 0x54, 0x45, 0x53,
    0x54, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x20, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x41, 0x74,
    0x74, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4e, 0x6f, 0x64, 0x65, 0x30, 0x32, 0x5f, 0x30, 0x32, 0x18, 0x24, 0x07, 0x01, 0x24,
    0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x55, 0x8d, 0x74, 0x11, 0x9b, 0x95, 0xc0, 0x6f, 0x0f, 0x2e, 0x7c, 0x3d, 0x49, 0x10, 0x91,
    0xf3, 0x4c, 0x6d, 0x72, 0xf5, 0x8b, 0x34, 0xd4, 0x02, 0xa3, 0x1e, 0x3d, 0x3a, 0x7c, 0xe1, 0x73, 0x70, 0x57, 0xfe, 0x7c, 0x05,
    0xa8, 0xab, 0x26, 0x74, 0x35, 0x08, 0xe7, 0x93, 0x01, 0x75, 0x96, 0x66, 0xd6, 0xda, 0x1c, 0x6a, 0x0d, 0x89, 0x0c, 0xc3, 0x63,
    0xed, 0x6d, 0x4d, 0x27, 0xdc, 0xdc, 0x66, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02,
    0x04, 0x01, 0x18, 0x30, 0x04, 0x14, 0xed, 0x5d, 0xcd, 0x90, 0x38, 0x43, 0x21, 0x7d, 0x7f, 0x94, 0x0b, 0x54, 0xaa, 0x86, 0x38,
    0x1b, 0x06, 0xc8, 0xeb, 0xc2, 0x30, 0x05, 0x14, 0x73, 0x65, 0xad, 0x0d, 0x22, 0x26, 0xd5, 0x62, 0xc2, 0x1a, 0x0b, 0xf9, 0xd1,
    0x7f, 0xed, 0x6d, 0x93, 0x43, 0x62, 0xba, 0x18, 0x35, 0x0b, 0x30, 0x01, 0x20, 0x7a, 0x32, 0x3e, 0xa8, 0x95, 0xe4, 0x79, 0xb1,
    0x99, 0x90, 0x5a, 0x72, 0x4a, 0xf4, 0x3f, 0xe4, 0x5c, 0x46, 0x85, 0xd1, 0x0c, 0xee, 0x18, 0xb0, 0xd5, 0xfd, 0x89, 0xfa, 0x3f,
    0x97, 0xdb, 0x0a, 0x30, 0x02, 0x20, 0x05, 0xdc, 0xc0, 0xbc, 0xe3, 0xd5, 0xaa, 0x51, 0xf2, 0xac, 0xb8, 0x26, 0x55, 0xed, 0x35,
    0xfc, 0x6e, 0xe4, 0xb9, 0x9a, 0xf1, 0xc5, 0x45, 0xe3, 0x3a, 0x72, 0xcb, 0x0f, 0x7f, 0x57, 0xa1, 0x48, 0x18, 0x18,
};

extern const uint32_t sTestCert_Node02_02_Chip_Len = sizeof(sTestCert_Node02_02_Chip);

extern const uint8_t sTestCert_Node02_02_DER[] = {
    0x30, 0x82, 0x02, 0x34, 0x30, 0x82, 0x01, 0xdb, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x0c, 0xc7, 0xbb, 0xf2, 0x45, 0x82,
    0x07, 0xda, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x77, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30,
    0x32, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x31, 0x31, 0x30,
    0x2f, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x28, 0x54, 0x45, 0x53, 0x54, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x43, 0x4f, 0x4d,
    0x4d, 0x4f, 0x4e, 0x20, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x41, 0x74, 0x74, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4e, 0x6f, 0x64,
    0x65, 0x30, 0x32, 0x5f, 0x30, 0x32, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08,
    0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x55, 0x8d, 0x74, 0x11, 0x9b, 0x95, 0xc0, 0x6f, 0x0f,
    0x2e, 0x7c, 0x3d, 0x49, 0x10, 0x91, 0xf3, 0x4c, 0x6d, 0x72, 0xf5, 0x8b, 0x34, 0xd4, 0x02, 0xa3, 0x1e, 0x3d, 0x3a, 0x7c, 0xe1,
    0x73, 0x70, 0x57, 0xfe, 0x7c, 0x05, 0xa8, 0xab, 0x26, 0x74, 0x35, 0x08, 0xe7, 0x93, 0x01, 0x75, 0x96, 0x66, 0xd6, 0xda, 0x1c,
    0x6a, 0x0d, 0x89, 0x0c, 0xc3, 0x63, 0xed, 0x6d, 0x4d, 0x27, 0xdc, 0xdc, 0x66, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c,
    0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01,
    0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14,
    0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xed, 0x5d, 0xcd, 0x90, 0x38, 0x43, 0x21, 0x7d, 0x7f, 0x94, 0x0b,
    0x54, 0xaa, 0x86, 0x38, 0x1b, 0x06, 0xc8, 0xeb, 0xc2, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0x73, 0x65, 0xad, 0x0d, 0x22, 0x26, 0xd5, 0x62, 0xc2, 0x1a, 0x0b, 0xf9, 0xd1, 0x7f, 0xed, 0x6d, 0x93, 0x43, 0x62, 0xba,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x7a, 0x32,
    0x3e, 0xa8, 0x95, 0xe4, 0x79, 0xb1, 0x99, 0x90, 0x5a, 0x72, 0x4a, 0xf4, 0x3f, 0xe4, 0x5c, 0x46, 0x85, 0xd1, 0x0c, 0xee, 0x18,
    0xb0, 0xd5, 0xfd, 0x89, 0xfa, 0x3f, 0x97, 0xdb, 0x0a, 0x02, 0x20, 0x05, 0xdc, 0xc0, 0xbc, 0xe3, 0xd5, 0xaa, 0x51, 0xf2, 0xac,
    0xb8, 0x26, 0x55, 0xed, 0x35, 0xfc, 0x6e, 0xe4, 0xb9, 0x9a, 0xf1, 0xc5, 0x45, 0xe3, 0x3a, 0x72, 0xcb, 0x0f, 0x7f, 0x57, 0xa1,
    0x48,
};

extern const uint32_t sTestCert_Node02_02_DER_Len = sizeof(sTestCert_Node02_02_DER);

extern const uint8_t sTestCert_Node02_02_PublicKey[] = {
    0x04, 0x55, 0x8d, 0x74, 0x11, 0x9b, 0x95, 0xc0, 0x6f, 0x0f, 0x2e, 0x7c, 0x3d, 0x49, 0x10, 0x91, 0xf3,
    0x4c, 0x6d, 0x72, 0xf5, 0x8b, 0x34, 0xd4, 0x02, 0xa3, 0x1e, 0x3d, 0x3a, 0x7c, 0xe1, 0x73, 0x70, 0x57,
    0xfe, 0x7c, 0x05, 0xa8, 0xab, 0x26, 0x74, 0x35, 0x08, 0xe7, 0x93, 0x01, 0x75, 0x96, 0x66, 0xd6, 0xda,
    0x1c, 0x6a, 0x0d, 0x89, 0x0c, 0xc3, 0x63, 0xed, 0x6d, 0x4d, 0x27, 0xdc, 0xdc, 0x66,
};

extern const uint8_t sTestCert_Node02_02_PublicKey_Len = sizeof(sTestCert_Node02_02_PublicKey);

extern const uint8_t sTestCert_Node02_02_PrivateKey[] = {
    0x54, 0xbc, 0xf4, 0x70, 0x05, 0x21, 0x4e, 0x11, 0x62, 0x95, 0x02, 0x8a, 0xce, 0xa3, 0x00, 0x49,
    0xe2, 0x20, 0x88, 0xca, 0x5e, 0xca, 0xe3, 0x77, 0x29, 0xac, 0x33, 0x97, 0x08, 0x3c, 0x8a, 0x94,
};

extern const uint8_t sTestCert_Node02_02_PrivateKey_Len = sizeof(sTestCert_Node02_02_PrivateKey);

extern const uint8_t sTestCert_Node02_02_SubjectKeyId[] = {
    0xED, 0x5D, 0xCD, 0x90, 0x38, 0x43, 0x21, 0x7D, 0x7F, 0x94, 0x0B, 0x54, 0xAA, 0x86, 0x38, 0x1B, 0x06, 0xC8, 0xEB, 0xC2,
};

extern const uint8_t sTestCert_Node02_02_SubjectKeyId_Len = sizeof(sTestCert_Node02_02_SubjectKeyId);

/**************  Test Node02_03 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 2673982372617451358 (0x251be4ccef84f75e)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020003, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D, CN = Node02_03 Test
Certificate, 1.3.6.1.4.1.37244.1.6 = A001B001, 1.3.6.1.4.1.37244.1.7 = A001B002 Subject Public Key Info: Public Key Algorithm:
id-ecPublicKey Public-Key: (256 bit) pub: 04:05:99:ec:3e:c3:24:1f:e0:57:b1:40:4f:95:76:
                    b7:8d:15:c4:55:58:b1:50:48:04:6d:13:41:27:21:
                    b2:60:ed:c9:cc:ed:04:03:a5:ec:f4:00:ab:76:71:
                    f8:32:32:20:22:63:03:0a:df:ea:0c:79:37:d7:8b:
                    da:ea:c3:17:69
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                74:E3:4C:E6:06:9F:AE:1F:7F:8B:3F:6E:04:30:05:08:53:19:5F:37
            X509v3 Authority Key Identifier:
                keyid:73:65:AD:0D:22:26:D5:62:C2:1A:0B:F9:D1:7F:ED:6D:93:43:62:BA

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:21:00:d3:c8:5a:c9:60:b7:9f:c6:b5:f2:c6:33:1d:
         7c:61:36:37:d9:2f:8a:0c:79:3c:fb:27:67:99:8c:5a:3d:c0:
         1a:02:20:11:a5:0f:7e:78:48:8a:05:00:b7:01:91:f3:2b:91:
         0c:f5:46:0a:33:e9:9a:a6:6a:0c:7a:ec:45:f7:b2:40:66

-----BEGIN CERTIFICATE-----
MIICXDCCAgKgAwIBAgIIJRvkzO+E914wCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowgZ0xIDAe
BgorBgEEAYKifAEBDBBERURFREVERTAwMDIwMDAzMSAwHgYKKwYBBAGConwBBQwQ
RkFCMDAwMDAwMDAwMDAxRDEjMCEGA1UEAwwaTm9kZTAyXzAzIFRlc3QgQ2VydGlm
aWNhdGUxGDAWBgorBgEEAYKifAEGDAhBMDAxQjAwMTEYMBYGCisGAQQBgqJ8AQcM
CEEwMDFCMDAyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEBZnsPsMkH+BXsUBP
lXa3jRXEVVixUEgEbRNBJyGyYO3JzO0EA6Xs9ACrdnH4MjIgImMDCt/qDHk314va
6sMXaaOBgzCBgDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIFoDAgBgNVHSUB
Af8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFHTjTOYGn64ff4s/
bgQwBQhTGV83MB8GA1UdIwQYMBaAFHNlrQ0iJtViwhoL+dF/7W2TQ2K6MAoGCCqG
SM49BAMCA0gAMEUCIQDTyFrJYLefxrXyxjMdfGE2N9kvigx5PPsnZ5mMWj3AGgIg
EaUPfnhIigUAtwGR8yuRDPVGCjPpmqZqDHrsRfeyQGY=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIFBxKxfWRSv+17HVbCWkg9U/KUeu8RKgppIG7teB+RvdoAoGCCqGSM49
AwEHoUQDQgAEBZnsPsMkH+BXsUBPlXa3jRXEVVixUEgEbRNBJyGyYO3JzO0EA6Xs
9ACrdnH4MjIgImMDCt/qDHk314va6sMXaQ==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_03_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x25, 0x1b, 0xe4, 0xcc, 0xef, 0x84, 0xf7, 0x5e, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x11, 0x03, 0x00, 0x02,
    0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x2c, 0x01, 0x1a, 0x4e, 0x6f, 0x64,
    0x65, 0x30, 0x32, 0x5f, 0x30, 0x33, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
    0x74, 0x65, 0x26, 0x16, 0x01, 0xb0, 0x01, 0xa0, 0x26, 0x17, 0x02, 0xb0, 0x01, 0xa0, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01,
    0x30, 0x09, 0x41, 0x04, 0x05, 0x99, 0xec, 0x3e, 0xc3, 0x24, 0x1f, 0xe0, 0x57, 0xb1, 0x40, 0x4f, 0x95, 0x76, 0xb7, 0x8d, 0x15,
    0xc4, 0x55, 0x58, 0xb1, 0x50, 0x48, 0x04, 0x6d, 0x13, 0x41, 0x27, 0x21, 0xb2, 0x60, 0xed, 0xc9, 0xcc, 0xed, 0x04, 0x03, 0xa5,
    0xec, 0xf4, 0x00, 0xab, 0x76, 0x71, 0xf8, 0x32, 0x32, 0x20, 0x22, 0x63, 0x03, 0x0a, 0xdf, 0xea, 0x0c, 0x79, 0x37, 0xd7, 0x8b,
    0xda, 0xea, 0xc3, 0x17, 0x69, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04, 0x01,
    0x18, 0x30, 0x04, 0x14, 0x74, 0xe3, 0x4c, 0xe6, 0x06, 0x9f, 0xae, 0x1f, 0x7f, 0x8b, 0x3f, 0x6e, 0x04, 0x30, 0x05, 0x08, 0x53,
    0x19, 0x5f, 0x37, 0x30, 0x05, 0x14, 0x73, 0x65, 0xad, 0x0d, 0x22, 0x26, 0xd5, 0x62, 0xc2, 0x1a, 0x0b, 0xf9, 0xd1, 0x7f, 0xed,
    0x6d, 0x93, 0x43, 0x62, 0xba, 0x18, 0x35, 0x0b, 0x30, 0x01, 0x21, 0x00, 0xd3, 0xc8, 0x5a, 0xc9, 0x60, 0xb7, 0x9f, 0xc6, 0xb5,
    0xf2, 0xc6, 0x33, 0x1d, 0x7c, 0x61, 0x36, 0x37, 0xd9, 0x2f, 0x8a, 0x0c, 0x79, 0x3c, 0xfb, 0x27, 0x67, 0x99, 0x8c, 0x5a, 0x3d,
    0xc0, 0x1a, 0x30, 0x02, 0x20, 0x11, 0xa5, 0x0f, 0x7e, 0x78, 0x48, 0x8a, 0x05, 0x00, 0xb7, 0x01, 0x91, 0xf3, 0x2b, 0x91, 0x0c,
    0xf5, 0x46, 0x0a, 0x33, 0xe9, 0x9a, 0xa6, 0x6a, 0x0c, 0x7a, 0xec, 0x45, 0xf7, 0xb2, 0x40, 0x66, 0x18, 0x18,
};

extern const uint32_t sTestCert_Node02_03_Chip_Len = sizeof(sTestCert_Node02_03_Chip);

extern const uint8_t sTestCert_Node02_03_DER[] = {
    0x30, 0x82, 0x02, 0x5c, 0x30, 0x82, 0x02, 0x02, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x25, 0x1b, 0xe4, 0xcc, 0xef, 0x84,
    0xf7, 0x5e, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x81, 0x9d, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b,
    0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30,
    0x30, 0x32, 0x30, 0x30, 0x30, 0x33, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01,
    0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x31, 0x23,
    0x30, 0x21, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1a, 0x4e, 0x6f, 0x64, 0x65, 0x30, 0x32, 0x5f, 0x30, 0x33, 0x20, 0x54, 0x65,
    0x73, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x31, 0x18, 0x30, 0x16, 0x06, 0x0a, 0x2b,
    0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x06, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42, 0x30, 0x30, 0x31, 0x31, 0x18,
    0x30, 0x16, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x07, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42,
    0x30, 0x30, 0x32, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48,
    0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x05, 0x99, 0xec, 0x3e, 0xc3, 0x24, 0x1f, 0xe0, 0x57, 0xb1, 0x40, 0x4f,
    0x95, 0x76, 0xb7, 0x8d, 0x15, 0xc4, 0x55, 0x58, 0xb1, 0x50, 0x48, 0x04, 0x6d, 0x13, 0x41, 0x27, 0x21, 0xb2, 0x60, 0xed, 0xc9,
    0xcc, 0xed, 0x04, 0x03, 0xa5, 0xec, 0xf4, 0x00, 0xab, 0x76, 0x71, 0xf8, 0x32, 0x32, 0x20, 0x22, 0x63, 0x03, 0x0a, 0xdf, 0xea,
    0x0c, 0x79, 0x37, 0xd7, 0x8b, 0xda, 0xea, 0xc3, 0x17, 0x69, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06, 0x03, 0x55,
    0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04,
    0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b,
    0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03,
    0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x74, 0xe3, 0x4c, 0xe6, 0x06, 0x9f, 0xae, 0x1f, 0x7f, 0x8b, 0x3f, 0x6e, 0x04, 0x30,
    0x05, 0x08, 0x53, 0x19, 0x5f, 0x37, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x73, 0x65,
    0xad, 0x0d, 0x22, 0x26, 0xd5, 0x62, 0xc2, 0x1a, 0x0b, 0xf9, 0xd1, 0x7f, 0xed, 0x6d, 0x93, 0x43, 0x62, 0xba, 0x30, 0x0a, 0x06,
    0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xd3, 0xc8, 0x5a, 0xc9,
    0x60, 0xb7, 0x9f, 0xc6, 0xb5, 0xf2, 0xc6, 0x33, 0x1d, 0x7c, 0x61, 0x36, 0x37, 0xd9, 0x2f, 0x8a, 0x0c, 0x79, 0x3c, 0xfb, 0x27,
    0x67, 0x99, 0x8c, 0x5a, 0x3d, 0xc0, 0x1a, 0x02, 0x20, 0x11, 0xa5, 0x0f, 0x7e, 0x78, 0x48, 0x8a, 0x05, 0x00, 0xb7, 0x01, 0x91,
    0xf3, 0x2b, 0x91, 0x0c, 0xf5, 0x46, 0x0a, 0x33, 0xe9, 0x9a, 0xa6, 0x6a, 0x0c, 0x7a, 0xec, 0x45, 0xf7, 0xb2, 0x40, 0x66,
};

extern const uint32_t sTestCert_Node02_03_DER_Len = sizeof(sTestCert_Node02_03_DER);

extern const uint8_t sTestCert_Node02_03_PublicKey[] = {
    0x04, 0x05, 0x99, 0xec, 0x3e, 0xc3, 0x24, 0x1f, 0xe0, 0x57, 0xb1, 0x40, 0x4f, 0x95, 0x76, 0xb7, 0x8d,
    0x15, 0xc4, 0x55, 0x58, 0xb1, 0x50, 0x48, 0x04, 0x6d, 0x13, 0x41, 0x27, 0x21, 0xb2, 0x60, 0xed, 0xc9,
    0xcc, 0xed, 0x04, 0x03, 0xa5, 0xec, 0xf4, 0x00, 0xab, 0x76, 0x71, 0xf8, 0x32, 0x32, 0x20, 0x22, 0x63,
    0x03, 0x0a, 0xdf, 0xea, 0x0c, 0x79, 0x37, 0xd7, 0x8b, 0xda, 0xea, 0xc3, 0x17, 0x69,
};

extern const uint8_t sTestCert_Node02_03_PublicKey_Len = sizeof(sTestCert_Node02_03_PublicKey);

extern const uint8_t sTestCert_Node02_03_PrivateKey[] = {
    0x50, 0x71, 0x2b, 0x17, 0xd6, 0x45, 0x2b, 0xfe, 0xd7, 0xb1, 0xd5, 0x6c, 0x25, 0xa4, 0x83, 0xd5,
    0x3f, 0x29, 0x47, 0xae, 0xf1, 0x12, 0xa0, 0xa6, 0x92, 0x06, 0xee, 0xd7, 0x81, 0xf9, 0x1b, 0xdd,
};

extern const uint8_t sTestCert_Node02_03_PrivateKey_Len = sizeof(sTestCert_Node02_03_PrivateKey);

extern const uint8_t sTestCert_Node02_03_SubjectKeyId[] = {
    0x74, 0xE3, 0x4C, 0xE6, 0x06, 0x9F, 0xAE, 0x1F, 0x7F, 0x8B, 0x3F, 0x6E, 0x04, 0x30, 0x05, 0x08, 0x53, 0x19, 0x5F, 0x37,
};

extern const uint8_t sTestCert_Node02_03_SubjectKeyId_Len = sizeof(sTestCert_Node02_03_SubjectKeyId);

/**************  Test Node02_04 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 3301227010683325815 (0x2dd05079beb44d77)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.6 = A001B001, CN = Node02_04 Test Certificate, 1.3.6.1.4.1.37244.1.5 =
FAB000000000001D, 1.3.6.1.4.1.37244.1.7 = A001B002, 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020004 Subject Public Key Info: Public Key
Algorithm: id-ecPublicKey Public-Key: (256 bit) pub: 04:6e:75:56:d5:0d:ac:ec:a4:13:84:80:7b:16:d5:
                    53:5e:ee:a7:af:f8:88:f8:f4:cf:d3:60:75:ae:43:
                    ce:cd:82:ba:48:d4:f4:1c:04:29:68:6a:03:03:63:
                    b3:fc:1e:14:87:c8:bc:86:7c:95:01:48:ae:48:73:
                    9a:22:d9:20:e6
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                B2:0D:CC:7E:A4:A6:A8:81:6E:B7:C3:C3:84:57:F7:D4:87:70:42:F1
            X509v3 Authority Key Identifier:
                keyid:73:65:AD:0D:22:26:D5:62:C2:1A:0B:F9:D1:7F:ED:6D:93:43:62:BA

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:2b:5f:02:88:f1:13:24:76:52:e2:07:f9:a6:cc:
         5b:e6:aa:19:eb:30:18:95:16:1e:fa:60:04:53:fe:64:9b:19:
         02:21:00:d8:51:9f:57:c3:8a:6a:0a:3b:34:cc:a6:91:95:9d:
         b7:b8:6c:db:bc:1c:08:57:24:28:72:ce:33:99:af:b2:a7

-----BEGIN CERTIFICATE-----
MIICXDCCAgKgAwIBAgIILdBQeb60TXcwCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowgZ0xGDAW
BgorBgEEAYKifAEGDAhBMDAxQjAwMTEjMCEGA1UEAwwaTm9kZTAyXzA0IFRlc3Qg
Q2VydGlmaWNhdGUxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAwMDAwMDAwMDFEMRgw
FgYKKwYBBAGConwBBwwIQTAwMUIwMDIxIDAeBgorBgEEAYKifAEBDBBERURFREVE
RTAwMDIwMDA0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEbnVW1Q2s7KQThIB7
FtVTXu6nr/iI+PTP02B1rkPOzYK6SNT0HAQpaGoDA2Oz/B4Uh8i8hnyVAUiuSHOa
Itkg5qOBgzCBgDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIFoDAgBgNVHSUB
Af8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFLINzH6kpqiBbrfD
w4RX99SHcELxMB8GA1UdIwQYMBaAFHNlrQ0iJtViwhoL+dF/7W2TQ2K6MAoGCCqG
SM49BAMCA0gAMEUCICtfAojxEyR2UuIH+abMW+aqGeswGJUWHvpgBFP+ZJsZAiEA
2FGfV8OKago7NMymkZWdt7hs27wcCFckKHLOM5mvsqc=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIHNgV5aHET9FNZVX9Qy2iwPZ2G3Xx9vj8xsZBazjoiiboAoGCCqGSM49
AwEHoUQDQgAEbnVW1Q2s7KQThIB7FtVTXu6nr/iI+PTP02B1rkPOzYK6SNT0HAQp
aGoDA2Oz/B4Uh8i8hnyVAUiuSHOaItkg5g==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_04_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x2d, 0xd0, 0x50, 0x79, 0xbe, 0xb4, 0x4d, 0x77, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x26, 0x16, 0x01, 0xb0, 0x01,
    0xa0, 0x2c, 0x01, 0x1a, 0x4e, 0x6f, 0x64, 0x65, 0x30, 0x32, 0x5f, 0x30, 0x34, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x65,
    0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x26, 0x17,
    0x02, 0xb0, 0x01, 0xa0, 0x27, 0x11, 0x04, 0x00, 0x02, 0x00, 0xde, 0xde, 0xde, 0xde, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01,
    0x30, 0x09, 0x41, 0x04, 0x6e, 0x75, 0x56, 0xd5, 0x0d, 0xac, 0xec, 0xa4, 0x13, 0x84, 0x80, 0x7b, 0x16, 0xd5, 0x53, 0x5e, 0xee,
    0xa7, 0xaf, 0xf8, 0x88, 0xf8, 0xf4, 0xcf, 0xd3, 0x60, 0x75, 0xae, 0x43, 0xce, 0xcd, 0x82, 0xba, 0x48, 0xd4, 0xf4, 0x1c, 0x04,
    0x29, 0x68, 0x6a, 0x03, 0x03, 0x63, 0xb3, 0xfc, 0x1e, 0x14, 0x87, 0xc8, 0xbc, 0x86, 0x7c, 0x95, 0x01, 0x48, 0xae, 0x48, 0x73,
    0x9a, 0x22, 0xd9, 0x20, 0xe6, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04, 0x01,
    0x18, 0x30, 0x04, 0x14, 0xb2, 0x0d, 0xcc, 0x7e, 0xa4, 0xa6, 0xa8, 0x81, 0x6e, 0xb7, 0xc3, 0xc3, 0x84, 0x57, 0xf7, 0xd4, 0x87,
    0x70, 0x42, 0xf1, 0x30, 0x05, 0x14, 0x73, 0x65, 0xad, 0x0d, 0x22, 0x26, 0xd5, 0x62, 0xc2, 0x1a, 0x0b, 0xf9, 0xd1, 0x7f, 0xed,
    0x6d, 0x93, 0x43, 0x62, 0xba, 0x18, 0x35, 0x0b, 0x30, 0x01, 0x20, 0x2b, 0x5f, 0x02, 0x88, 0xf1, 0x13, 0x24, 0x76, 0x52, 0xe2,
    0x07, 0xf9, 0xa6, 0xcc, 0x5b, 0xe6, 0xaa, 0x19, 0xeb, 0x30, 0x18, 0x95, 0x16, 0x1e, 0xfa, 0x60, 0x04, 0x53, 0xfe, 0x64, 0x9b,
    0x19, 0x30, 0x02, 0x21, 0x00, 0xd8, 0x51, 0x9f, 0x57, 0xc3, 0x8a, 0x6a, 0x0a, 0x3b, 0x34, 0xcc, 0xa6, 0x91, 0x95, 0x9d, 0xb7,
    0xb8, 0x6c, 0xdb, 0xbc, 0x1c, 0x08, 0x57, 0x24, 0x28, 0x72, 0xce, 0x33, 0x99, 0xaf, 0xb2, 0xa7, 0x18, 0x18,
};

extern const uint32_t sTestCert_Node02_04_Chip_Len = sizeof(sTestCert_Node02_04_Chip);

extern const uint8_t sTestCert_Node02_04_DER[] = {
    0x30, 0x82, 0x02, 0x5c, 0x30, 0x82, 0x02, 0x02, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x2d, 0xd0, 0x50, 0x79, 0xbe, 0xb4,
    0x4d, 0x77, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x81, 0x9d, 0x31, 0x18, 0x30, 0x16, 0x06, 0x0a, 0x2b,
    0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x06, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42, 0x30, 0x30, 0x31, 0x31, 0x23,
    0x30, 0x21, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1a, 0x4e, 0x6f, 0x64, 0x65, 0x30, 0x32, 0x5f, 0x30, 0x34, 0x20, 0x54, 0x65,
    0x73, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b,
    0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x31, 0x18, 0x30, 0x16, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01,
    0x07, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04,
    0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30, 0x32, 0x30,
    0x30, 0x30, 0x34, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48,
    0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x6e, 0x75, 0x56, 0xd5, 0x0d, 0xac, 0xec, 0xa4, 0x13, 0x84, 0x80, 0x7b,
    0x16, 0xd5, 0x53, 0x5e, 0xee, 0xa7, 0xaf, 0xf8, 0x88, 0xf8, 0xf4, 0xcf, 0xd3, 0x60, 0x75, 0xae, 0x43, 0xce, 0xcd, 0x82, 0xba,
    0x48, 0xd4, 0xf4, 0x1c, 0x04, 0x29, 0x68, 0x6a, 0x03, 0x03, 0x63, 0xb3, 0xfc, 0x1e, 0x14, 0x87, 0xc8, 0xbc, 0x86, 0x7c, 0x95,
    0x01, 0x48, 0xae, 0x48, 0x73, 0x9a, 0x22, 0xd9, 0x20, 0xe6, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06, 0x03, 0x55,
    0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04,
    0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b,
    0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03,
    0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xb2, 0x0d, 0xcc, 0x7e, 0xa4, 0xa6, 0xa8, 0x81, 0x6e, 0xb7, 0xc3, 0xc3, 0x84, 0x57,
    0xf7, 0xd4, 0x87, 0x70, 0x42, 0xf1, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x73, 0x65,
    0xad, 0x0d, 0x22, 0x26, 0xd5, 0x62, 0xc2, 0x1a, 0x0b, 0xf9, 0xd1, 0x7f, 0xed, 0x6d, 0x93, 0x43, 0x62, 0xba, 0x30, 0x0a, 0x06,
    0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x2b, 0x5f, 0x02, 0x88, 0xf1,
    0x13, 0x24, 0x76, 0x52, 0xe2, 0x07, 0xf9, 0xa6, 0xcc, 0x5b, 0xe6, 0xaa, 0x19, 0xeb, 0x30, 0x18, 0x95, 0x16, 0x1e, 0xfa, 0x60,
    0x04, 0x53, 0xfe, 0x64, 0x9b, 0x19, 0x02, 0x21, 0x00, 0xd8, 0x51, 0x9f, 0x57, 0xc3, 0x8a, 0x6a, 0x0a, 0x3b, 0x34, 0xcc, 0xa6,
    0x91, 0x95, 0x9d, 0xb7, 0xb8, 0x6c, 0xdb, 0xbc, 0x1c, 0x08, 0x57, 0x24, 0x28, 0x72, 0xce, 0x33, 0x99, 0xaf, 0xb2, 0xa7,
};

extern const uint32_t sTestCert_Node02_04_DER_Len = sizeof(sTestCert_Node02_04_DER);

extern const uint8_t sTestCert_Node02_04_PublicKey[] = {
    0x04, 0x6e, 0x75, 0x56, 0xd5, 0x0d, 0xac, 0xec, 0xa4, 0x13, 0x84, 0x80, 0x7b, 0x16, 0xd5, 0x53, 0x5e,
    0xee, 0xa7, 0xaf, 0xf8, 0x88, 0xf8, 0xf4, 0xcf, 0xd3, 0x60, 0x75, 0xae, 0x43, 0xce, 0xcd, 0x82, 0xba,
    0x48, 0xd4, 0xf4, 0x1c, 0x04, 0x29, 0x68, 0x6a, 0x03, 0x03, 0x63, 0xb3, 0xfc, 0x1e, 0x14, 0x87, 0xc8,
    0xbc, 0x86, 0x7c, 0x95, 0x01, 0x48, 0xae, 0x48, 0x73, 0x9a, 0x22, 0xd9, 0x20, 0xe6,
};

extern const uint8_t sTestCert_Node02_04_PublicKey_Len = sizeof(sTestCert_Node02_04_PublicKey);

extern const uint8_t sTestCert_Node02_04_PrivateKey[] = {
    0x73, 0x60, 0x57, 0x96, 0x87, 0x11, 0x3f, 0x45, 0x35, 0x95, 0x57, 0xf5, 0x0c, 0xb6, 0x8b, 0x03,
    0xd9, 0xd8, 0x6d, 0xd7, 0xc7, 0xdb, 0xe3, 0xf3, 0x1b, 0x19, 0x05, 0xac, 0xe3, 0xa2, 0x28, 0x9b,
};

extern const uint8_t sTestCert_Node02_04_PrivateKey_Len = sizeof(sTestCert_Node02_04_PrivateKey);

extern const uint8_t sTestCert_Node02_04_SubjectKeyId[] = {
    0xB2, 0x0D, 0xCC, 0x7E, 0xA4, 0xA6, 0xA8, 0x81, 0x6E, 0xB7, 0xC3, 0xC3, 0x84, 0x57, 0xF7, 0xD4, 0x87, 0x70, 0x42, 0xF1,
};

extern const uint8_t sTestCert_Node02_04_SubjectKeyId_Len = sizeof(sTestCert_Node02_04_SubjectKeyId);

} // namespace TestCerts
} // namespace chip
