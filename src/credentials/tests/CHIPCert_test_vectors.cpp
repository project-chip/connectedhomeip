/*
 *
 *    Copyright (c) 2020-2021 Project CHIP Authors
 *    Copyright (c) 2019 Google LLC.
 *    Copyright (c) 2016-2017 Nest Labs, Inc.
 *    All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *    @file
 *      This file contains definitions of test certificates used by various unit tests.
 *
 */

#include <credentials/CHIPCert.h>

#include "CHIPCert_test_vectors.h"

namespace chip {
namespace TestCerts {

using namespace chip::Credentials;
using namespace chip::ASN1;

// clang-format off
extern const uint8_t gTestCerts[] = {
    TestCert::kRoot01,
    TestCert::kRoot02,
    TestCert::kICA01,
    TestCert::kICA02,
    TestCert::kICA01_1,
    TestCert::kFWSign01,
    TestCert::kNode01_01,
    TestCert::kNode01_02,
    TestCert::kNode02_01,
    TestCert::kNode02_02,
    TestCert::kNode02_03,
    TestCert::kNode02_04,
    TestCert::kNode02_05,
    TestCert::kNode02_06,
    TestCert::kNode02_07,
};
// clang-format on

extern const size_t gNumTestCerts = sizeof(gTestCerts) / sizeof(gTestCerts[0]);

CHIP_ERROR GetTestCert(uint8_t certType, BitFlags<TestCertLoadFlags> certLoadFlags, const uint8_t *& certData,
                       uint32_t & certDataLen)
{
    CHIP_ERROR err;
    bool derForm = certLoadFlags.Has(TestCertLoadFlags::kDERForm);

#define SELECT_CERT(NAME)                                                                                                          \
    do                                                                                                                             \
    {                                                                                                                              \
        if (certType == TestCert::k##NAME)                                                                                         \
        {                                                                                                                          \
            if (derForm)                                                                                                           \
            {                                                                                                                      \
                certData    = sTestCert_##NAME##_DER;                                                                              \
                certDataLen = sTestCert_##NAME##_DER_Len;                                                                          \
            }                                                                                                                      \
            else                                                                                                                   \
            {                                                                                                                      \
                certData    = sTestCert_##NAME##_Chip;                                                                             \
                certDataLen = sTestCert_##NAME##_Chip_Len;                                                                         \
            }                                                                                                                      \
            ExitNow(err = CHIP_NO_ERROR);                                                                                          \
        }                                                                                                                          \
    } while (0)

    SELECT_CERT(Root01);
    SELECT_CERT(Root02);
    SELECT_CERT(ICA01);
    SELECT_CERT(ICA02);
    SELECT_CERT(ICA01_1);
    SELECT_CERT(FWSign01);
    SELECT_CERT(Node01_01);
    SELECT_CERT(Node01_02);
    SELECT_CERT(Node02_01);
    SELECT_CERT(Node02_02);
    SELECT_CERT(Node02_03);
    SELECT_CERT(Node02_04);
    SELECT_CERT(Node02_05);
    SELECT_CERT(Node02_06);
    SELECT_CERT(Node02_07);
#undef SELECT_CERT

    err = CHIP_ERROR_CA_CERT_NOT_FOUND;

exit:
    return err;
}

const char * GetTestCertName(uint8_t certType)
{
#define NAME_CERT(NAME)                                                                                                            \
    do                                                                                                                             \
    {                                                                                                                              \
        if (certType == TestCert::k##NAME)                                                                                         \
        {                                                                                                                          \
            return #NAME;                                                                                                          \
        }                                                                                                                          \
    } while (0)

    NAME_CERT(Root01);
    NAME_CERT(Root02);
    NAME_CERT(ICA01);
    NAME_CERT(ICA02);
    NAME_CERT(ICA01_1);
    NAME_CERT(FWSign01);
    NAME_CERT(Node01_01);
    NAME_CERT(Node01_02);
    NAME_CERT(Node02_01);
    NAME_CERT(Node02_02);
    NAME_CERT(Node02_03);
    NAME_CERT(Node02_04);
    NAME_CERT(Node02_05);
    NAME_CERT(Node02_06);
    NAME_CERT(Node02_07);

    return nullptr;
}

CHIP_ERROR GetTestCertPubkey(uint8_t certType, const uint8_t *& certPubkey, uint32_t & certPubkeyLen)
{
    CHIP_ERROR err;

#define SELECT_CERT(NAME)                                                                                                          \
    do                                                                                                                             \
    {                                                                                                                              \
        if (certType == TestCert::k##NAME)                                                                                         \
        {                                                                                                                          \
            certPubkey    = sTestCert_##NAME##_PublicKey;                                                                          \
            certPubkeyLen = sTestCert_##NAME##_PublicKey_Len;                                                                      \
            ExitNow(err = CHIP_NO_ERROR);                                                                                          \
        }                                                                                                                          \
    } while (0)

    SELECT_CERT(Root01);
    SELECT_CERT(Root02);
    SELECT_CERT(ICA01);
    SELECT_CERT(ICA02);
    SELECT_CERT(ICA01_1);
    SELECT_CERT(FWSign01);
    SELECT_CERT(Node01_01);
    SELECT_CERT(Node01_02);
    SELECT_CERT(Node02_01);
    SELECT_CERT(Node02_02);
    SELECT_CERT(Node02_03);
    SELECT_CERT(Node02_04);
    SELECT_CERT(Node02_05);
    SELECT_CERT(Node02_06);
    SELECT_CERT(Node02_07);
#undef SELECT_CERT

    err = CHIP_ERROR_CA_CERT_NOT_FOUND;

exit:
    return err;
}

CHIP_ERROR LoadTestCert(ChipCertificateSet & certSet, uint8_t certType, BitFlags<TestCertLoadFlags> certLoadFlags,
                        BitFlags<CertDecodeFlags> decodeFlags)
{
    CHIP_ERROR err;
    ChipCertificateData * cert;
    const uint8_t * certData;
    uint32_t certDataLen;

    // Get the requested certificate data.
    err = GetTestCert(certType, certLoadFlags, certData, certDataLen);
    SuccessOrExit(err);

    // Load it into the certificate set.
    err = certSet.LoadCert(certData, certDataLen, decodeFlags);
    SuccessOrExit(err);

    // Get loaded certificate data.
    cert = const_cast<ChipCertificateData *>(certSet.GetLastCert());
    VerifyOrExit(cert != nullptr, err = CHIP_ERROR_INVALID_ARGUMENT);

    // Apply load flags.
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressIsCA))
    {
        cert->mCertFlags.Clear(CertFlags::kIsCA);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressKeyUsage))
    {
        cert->mCertFlags.Clear(CertFlags::kExtPresent_KeyUsage);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressKeyCertSign))
    {
        cert->mKeyUsageFlags.Clear(KeyUsageFlags::kKeyCertSign);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSetPathLenConstZero))
    {
        cert->mCertFlags.Set(CertFlags::kPathLenConstraintPresent);
        cert->mPathLenConstraint = 0;
    }

exit:
    return err;
}

// ------------------------------ TEST CERTIFICATES ----------------------------------------

/**************  Test Root01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 5881948673840633601 (0x51a0e127ab59d701)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:6c:5b:7c:34:1a:d1:95:d2:46:fa:0c:7d:d6:25:
                    43:81:94:28:5a:aa:8f:13:47:3f:7d:61:8f:c9:bd:
                    44:f2:dd:5e:ec:d5:71:fa:f0:9c:1c:73:68:04:d0:
                    85:32:16:14:74:94:4e:6a:84:2a:11:da:71:93:6f:
                    18:e4:49:38:7c
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                D1:02:DB:CF:02:53:F2:5B:10:CC:17:D9:7C:65:F4:C3:43:50:22:0D
            X509v3 Authority Key Identifier:
                keyid:D1:02:DB:CF:02:53:F2:5B:10:CC:17:D9:7C:65:F4:C3:43:50:22:0D

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:0c:9a:21:58:43:b6:04:36:d9:60:b1:f1:8c:07:
         5b:ae:3b:9a:1f:c0:81:4c:b7:a9:8d:f6:d5:91:70:9f:27:e6:
         02:20:2f:78:37:79:65:09:e4:8b:28:5b:80:af:43:38:9f:97:
         00:11:4c:69:65:19:13:78:35:1b:2f:90:6e:0f:c1:3b

-----BEGIN CERTIFICATE-----
MIIBnDCCAUOgAwIBAgIIUaDhJ6tZ1wEwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBBAwQQ0FDQUNBQ0EwMDAwMDAwMTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABGxbfDQa0ZXSRvoMfdYlQ4GUKFqqjxNHP31h
j8m9RPLdXuzVcfrwnBxzaATQhTIWFHSUTmqEKhHacZNvGORJOHyjYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBTRAtvPAlPyWxDM
F9l8ZfTDQ1AiDTAfBgNVHSMEGDAWgBTRAtvPAlPyWxDMF9l8ZfTDQ1AiDTAKBggq
hkjOPQQDAgNHADBEAiAMmiFYQ7YENtlgsfGMB1uuO5ofwIFMt6mN9tWRcJ8n5gIg
L3g3eWUJ5IsoW4CvQziflwARTGllGRN4NRsvkG4PwTs=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIKv6wRRikKAI3Syug+qd+MnRDPKPAxAil5Zmtn2QwEQqoAoGCCqGSM49
AwEHoUQDQgAEbFt8NBrRldJG+gx91iVDgZQoWqqPE0c/fWGPyb1E8t1e7NVx+vCc
HHNoBNCFMhYUdJROaoQqEdpxk28Y5Ek4fA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Root01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x51, 0xa0, 0xe1, 0x27, 0xab, 0x59, 0xd7, 0x01, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27,
    0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24,
    0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x6c, 0x5b, 0x7c, 0x34, 0x1a, 0xd1, 0x95, 0xd2, 0x46, 0xfa, 0x0c,
    0x7d, 0xd6, 0x25, 0x43, 0x81, 0x94, 0x28, 0x5a, 0xaa, 0x8f, 0x13, 0x47, 0x3f, 0x7d, 0x61, 0x8f, 0xc9, 0xbd, 0x44, 0xf2,
    0xdd, 0x5e, 0xec, 0xd5, 0x71, 0xfa, 0xf0, 0x9c, 0x1c, 0x73, 0x68, 0x04, 0xd0, 0x85, 0x32, 0x16, 0x14, 0x74, 0x94, 0x4e,
    0x6a, 0x84, 0x2a, 0x11, 0xda, 0x71, 0x93, 0x6f, 0x18, 0xe4, 0x49, 0x38, 0x7c, 0x37, 0x0a, 0x35, 0x01, 0x29, 0x01, 0x18,
    0x24, 0x02, 0x60, 0x30, 0x04, 0x14, 0xd1, 0x02, 0xdb, 0xcf, 0x02, 0x53, 0xf2, 0x5b, 0x10, 0xcc, 0x17, 0xd9, 0x7c, 0x65,
    0xf4, 0xc3, 0x43, 0x50, 0x22, 0x0d, 0x30, 0x05, 0x14, 0xd1, 0x02, 0xdb, 0xcf, 0x02, 0x53, 0xf2, 0x5b, 0x10, 0xcc, 0x17,
    0xd9, 0x7c, 0x65, 0xf4, 0xc3, 0x43, 0x50, 0x22, 0x0d, 0x18, 0x30, 0x0b, 0x40, 0x0c, 0x9a, 0x21, 0x58, 0x43, 0xb6, 0x04,
    0x36, 0xd9, 0x60, 0xb1, 0xf1, 0x8c, 0x07, 0x5b, 0xae, 0x3b, 0x9a, 0x1f, 0xc0, 0x81, 0x4c, 0xb7, 0xa9, 0x8d, 0xf6, 0xd5,
    0x91, 0x70, 0x9f, 0x27, 0xe6, 0x2f, 0x78, 0x37, 0x79, 0x65, 0x09, 0xe4, 0x8b, 0x28, 0x5b, 0x80, 0xaf, 0x43, 0x38, 0x9f,
    0x97, 0x00, 0x11, 0x4c, 0x69, 0x65, 0x19, 0x13, 0x78, 0x35, 0x1b, 0x2f, 0x90, 0x6e, 0x0f, 0xc1, 0x3b, 0x18,
};

extern const uint32_t sTestCert_Root01_Chip_Len = sizeof(sTestCert_Root01_Chip);

extern const uint8_t sTestCert_Root01_DER[] = {
    0x30, 0x82, 0x01, 0x9c, 0x30, 0x82, 0x01, 0x43, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x51, 0xa0, 0xe1, 0x27, 0xab, 0x59,
    0xd7, 0x01, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x6c, 0x5b,
    0x7c, 0x34, 0x1a, 0xd1, 0x95, 0xd2, 0x46, 0xfa, 0x0c, 0x7d, 0xd6, 0x25, 0x43, 0x81, 0x94, 0x28, 0x5a, 0xaa, 0x8f, 0x13, 0x47,
    0x3f, 0x7d, 0x61, 0x8f, 0xc9, 0xbd, 0x44, 0xf2, 0xdd, 0x5e, 0xec, 0xd5, 0x71, 0xfa, 0xf0, 0x9c, 0x1c, 0x73, 0x68, 0x04, 0xd0,
    0x85, 0x32, 0x16, 0x14, 0x74, 0x94, 0x4e, 0x6a, 0x84, 0x2a, 0x11, 0xda, 0x71, 0x93, 0x6f, 0x18, 0xe4, 0x49, 0x38, 0x7c, 0xa3,
    0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x16, 0x04, 0x14, 0xd1, 0x02, 0xdb, 0xcf, 0x02, 0x53, 0xf2, 0x5b, 0x10, 0xcc, 0x17, 0xd9, 0x7c, 0x65, 0xf4, 0xc3,
    0x43, 0x50, 0x22, 0x0d, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xd1, 0x02, 0xdb, 0xcf,
    0x02, 0x53, 0xf2, 0x5b, 0x10, 0xcc, 0x17, 0xd9, 0x7c, 0x65, 0xf4, 0xc3, 0x43, 0x50, 0x22, 0x0d, 0x30, 0x0a, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x0c, 0x9a, 0x21, 0x58, 0x43, 0xb6, 0x04,
    0x36, 0xd9, 0x60, 0xb1, 0xf1, 0x8c, 0x07, 0x5b, 0xae, 0x3b, 0x9a, 0x1f, 0xc0, 0x81, 0x4c, 0xb7, 0xa9, 0x8d, 0xf6, 0xd5, 0x91,
    0x70, 0x9f, 0x27, 0xe6, 0x02, 0x20, 0x2f, 0x78, 0x37, 0x79, 0x65, 0x09, 0xe4, 0x8b, 0x28, 0x5b, 0x80, 0xaf, 0x43, 0x38, 0x9f,
    0x97, 0x00, 0x11, 0x4c, 0x69, 0x65, 0x19, 0x13, 0x78, 0x35, 0x1b, 0x2f, 0x90, 0x6e, 0x0f, 0xc1, 0x3b,
};

extern const uint32_t sTestCert_Root01_DER_Len = sizeof(sTestCert_Root01_DER);

extern const uint8_t sTestCert_Root01_PublicKey[] = {
    0x04, 0x6c, 0x5b, 0x7c, 0x34, 0x1a, 0xd1, 0x95, 0xd2, 0x46, 0xfa, 0x0c, 0x7d, 0xd6, 0x25, 0x43, 0x81,
    0x94, 0x28, 0x5a, 0xaa, 0x8f, 0x13, 0x47, 0x3f, 0x7d, 0x61, 0x8f, 0xc9, 0xbd, 0x44, 0xf2, 0xdd, 0x5e,
    0xec, 0xd5, 0x71, 0xfa, 0xf0, 0x9c, 0x1c, 0x73, 0x68, 0x04, 0xd0, 0x85, 0x32, 0x16, 0x14, 0x74, 0x94,
    0x4e, 0x6a, 0x84, 0x2a, 0x11, 0xda, 0x71, 0x93, 0x6f, 0x18, 0xe4, 0x49, 0x38, 0x7c,
};

extern const uint8_t sTestCert_Root01_PublicKey_Len = sizeof(sTestCert_Root01_PublicKey);

extern const uint8_t sTestCert_Root01_PrivateKey[] = {
    0xab, 0xfa, 0xc1, 0x14, 0x62, 0x90, 0xa0, 0x08, 0xdd, 0x2c, 0xae, 0x83, 0xea, 0x9d, 0xf8, 0xc9,
    0xd1, 0x0c, 0xf2, 0x8f, 0x03, 0x10, 0x22, 0x97, 0x96, 0x66, 0xb6, 0x7d, 0x90, 0xc0, 0x44, 0x2a,
};

extern const uint8_t sTestCert_Root01_PrivateKey_Len = sizeof(sTestCert_Root01_PrivateKey);

extern const uint8_t sTestCert_Root01_SubjectKeyId[] = {
    0xD1, 0x02, 0xDB, 0xCF, 0x02, 0x53, 0xF2, 0x5B, 0x10, 0xCC, 0x17, 0xD9, 0x7C, 0x65, 0xF4, 0xC3, 0x43, 0x50, 0x22, 0x0D,
};

extern const uint8_t sTestCert_Root01_SubjectKeyId_Len = sizeof(sTestCert_Root01_SubjectKeyId);

/**************  Test Root02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 4424102067318167067 (0x3d659163ec92161b)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.4 = CACACACA00000002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:be:dc:28:48:4d:86:14:df:a4:c8:71:86:81:3b:
                    4b:61:a8:cd:bf:a6:67:99:2f:c5:03:e6:bc:eb:bc:
                    85:17:9a:3e:05:1b:50:0b:b1:cf:01:ab:61:fe:90:
                    02:8f:67:1f:17:8a:19:71:31:bd:0d:eb:40:87:48:
                    2f:71:2a:dd:0d
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                0B:C5:FE:D2:AA:B0:4F:20:2C:B3:36:A3:D2:CF:66:5A:20:1E:FF:BA
            X509v3 Authority Key Identifier:
                keyid:0B:C5:FE:D2:AA:B0:4F:20:2C:B3:36:A3:D2:CF:66:5A:20:1E:FF:BA

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:37:64:21:f0:62:bf:16:40:db:1b:d7:1c:06:9a:
         c8:a9:cf:ce:f7:f2:af:d0:78:6f:0c:9d:5d:9d:6d:c2:6d:d8:
         02:20:78:78:aa:a4:ed:1e:b8:45:03:a3:8f:a4:43:ce:22:9e:
         47:48:0d:36:18:d1:69:a4:a3:af:72:9e:9f:25:4b:fd

-----BEGIN CERTIFICATE-----
MIIB4DCCAYegAwIBAgIIPWWRY+ySFhswCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDIxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDIxIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEvtwoSE2G
FN+kyHGGgTtLYajNv6ZnmS/FA+a867yFF5o+BRtQC7HPAath/pACj2cfF4oZcTG9
DetAh0gvcSrdDaNjMGEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw
HQYDVR0OBBYEFAvF/tKqsE8gLLM2o9LPZlogHv+6MB8GA1UdIwQYMBaAFAvF/tKq
sE8gLLM2o9LPZlogHv+6MAoGCCqGSM49BAMCA0cAMEQCIDdkIfBivxZA2xvXHAaa
yKnPzvfyr9B4bwydXZ1twm3YAiB4eKqk7R64RQOjj6RDziKeR0gNNhjRaaSjr3Ke
nyVL/Q==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIIcmYvor8FTL6//k4Z4GmphStuj50RBsS539iaHqyTk8oAoGCCqGSM49
AwEHoUQDQgAEvtwoSE2GFN+kyHGGgTtLYajNv6ZnmS/FA+a867yFF5o+BRtQC7HP
Aath/pACj2cfF4oZcTG9DetAh0gvcSrdDQ==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Root02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x3d, 0x65, 0x91, 0x63, 0xec, 0x92, 0x16, 0x1b, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x14, 0x02, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xb0, 0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x14,
    0x02, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24,
    0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0xbe, 0xdc, 0x28, 0x48, 0x4d, 0x86, 0x14, 0xdf, 0xa4, 0xc8, 0x71,
    0x86, 0x81, 0x3b, 0x4b, 0x61, 0xa8, 0xcd, 0xbf, 0xa6, 0x67, 0x99, 0x2f, 0xc5, 0x03, 0xe6, 0xbc, 0xeb, 0xbc, 0x85, 0x17,
    0x9a, 0x3e, 0x05, 0x1b, 0x50, 0x0b, 0xb1, 0xcf, 0x01, 0xab, 0x61, 0xfe, 0x90, 0x02, 0x8f, 0x67, 0x1f, 0x17, 0x8a, 0x19,
    0x71, 0x31, 0xbd, 0x0d, 0xeb, 0x40, 0x87, 0x48, 0x2f, 0x71, 0x2a, 0xdd, 0x0d, 0x37, 0x0a, 0x35, 0x01, 0x29, 0x01, 0x18,
    0x24, 0x02, 0x60, 0x30, 0x04, 0x14, 0x0b, 0xc5, 0xfe, 0xd2, 0xaa, 0xb0, 0x4f, 0x20, 0x2c, 0xb3, 0x36, 0xa3, 0xd2, 0xcf,
    0x66, 0x5a, 0x20, 0x1e, 0xff, 0xba, 0x30, 0x05, 0x14, 0x0b, 0xc5, 0xfe, 0xd2, 0xaa, 0xb0, 0x4f, 0x20, 0x2c, 0xb3, 0x36,
    0xa3, 0xd2, 0xcf, 0x66, 0x5a, 0x20, 0x1e, 0xff, 0xba, 0x18, 0x30, 0x0b, 0x40, 0x37, 0x64, 0x21, 0xf0, 0x62, 0xbf, 0x16,
    0x40, 0xdb, 0x1b, 0xd7, 0x1c, 0x06, 0x9a, 0xc8, 0xa9, 0xcf, 0xce, 0xf7, 0xf2, 0xaf, 0xd0, 0x78, 0x6f, 0x0c, 0x9d, 0x5d,
    0x9d, 0x6d, 0xc2, 0x6d, 0xd8, 0x78, 0x78, 0xaa, 0xa4, 0xed, 0x1e, 0xb8, 0x45, 0x03, 0xa3, 0x8f, 0xa4, 0x43, 0xce, 0x22,
    0x9e, 0x47, 0x48, 0x0d, 0x36, 0x18, 0xd1, 0x69, 0xa4, 0xa3, 0xaf, 0x72, 0x9e, 0x9f, 0x25, 0x4b, 0xfd, 0x18,
};

extern const uint32_t sTestCert_Root02_Chip_Len = sizeof(sTestCert_Root02_Chip);

extern const uint8_t sTestCert_Root02_DER[] = {
    0x30, 0x82, 0x01, 0xe0, 0x30, 0x82, 0x01, 0x87, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x3d, 0x65, 0x91, 0x63, 0xec, 0x92,
    0x16, 0x1b, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0xbe, 0xdc, 0x28, 0x48, 0x4d, 0x86, 0x14, 0xdf, 0xa4, 0xc8, 0x71, 0x86, 0x81, 0x3b, 0x4b, 0x61, 0xa8, 0xcd,
    0xbf, 0xa6, 0x67, 0x99, 0x2f, 0xc5, 0x03, 0xe6, 0xbc, 0xeb, 0xbc, 0x85, 0x17, 0x9a, 0x3e, 0x05, 0x1b, 0x50, 0x0b, 0xb1, 0xcf,
    0x01, 0xab, 0x61, 0xfe, 0x90, 0x02, 0x8f, 0x67, 0x1f, 0x17, 0x8a, 0x19, 0x71, 0x31, 0xbd, 0x0d, 0xeb, 0x40, 0x87, 0x48, 0x2f,
    0x71, 0x2a, 0xdd, 0x0d, 0xa3, 0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30,
    0x03, 0x01, 0x01, 0xff, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x0b, 0xc5, 0xfe, 0xd2, 0xaa, 0xb0, 0x4f, 0x20, 0x2c, 0xb3, 0x36,
    0xa3, 0xd2, 0xcf, 0x66, 0x5a, 0x20, 0x1e, 0xff, 0xba, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0x0b, 0xc5, 0xfe, 0xd2, 0xaa, 0xb0, 0x4f, 0x20, 0x2c, 0xb3, 0x36, 0xa3, 0xd2, 0xcf, 0x66, 0x5a, 0x20, 0x1e, 0xff, 0xba,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x37, 0x64,
    0x21, 0xf0, 0x62, 0xbf, 0x16, 0x40, 0xdb, 0x1b, 0xd7, 0x1c, 0x06, 0x9a, 0xc8, 0xa9, 0xcf, 0xce, 0xf7, 0xf2, 0xaf, 0xd0, 0x78,
    0x6f, 0x0c, 0x9d, 0x5d, 0x9d, 0x6d, 0xc2, 0x6d, 0xd8, 0x02, 0x20, 0x78, 0x78, 0xaa, 0xa4, 0xed, 0x1e, 0xb8, 0x45, 0x03, 0xa3,
    0x8f, 0xa4, 0x43, 0xce, 0x22, 0x9e, 0x47, 0x48, 0x0d, 0x36, 0x18, 0xd1, 0x69, 0xa4, 0xa3, 0xaf, 0x72, 0x9e, 0x9f, 0x25, 0x4b,
    0xfd,
};

extern const uint32_t sTestCert_Root02_DER_Len = sizeof(sTestCert_Root02_DER);

extern const uint8_t sTestCert_Root02_PublicKey[] = {
    0x04, 0xbe, 0xdc, 0x28, 0x48, 0x4d, 0x86, 0x14, 0xdf, 0xa4, 0xc8, 0x71, 0x86, 0x81, 0x3b, 0x4b, 0x61,
    0xa8, 0xcd, 0xbf, 0xa6, 0x67, 0x99, 0x2f, 0xc5, 0x03, 0xe6, 0xbc, 0xeb, 0xbc, 0x85, 0x17, 0x9a, 0x3e,
    0x05, 0x1b, 0x50, 0x0b, 0xb1, 0xcf, 0x01, 0xab, 0x61, 0xfe, 0x90, 0x02, 0x8f, 0x67, 0x1f, 0x17, 0x8a,
    0x19, 0x71, 0x31, 0xbd, 0x0d, 0xeb, 0x40, 0x87, 0x48, 0x2f, 0x71, 0x2a, 0xdd, 0x0d,
};

extern const uint8_t sTestCert_Root02_PublicKey_Len = sizeof(sTestCert_Root02_PublicKey);

extern const uint8_t sTestCert_Root02_PrivateKey[] = {
    0x87, 0x26, 0x62, 0xfa, 0x2b, 0xf0, 0x54, 0xcb, 0xeb, 0xff, 0xe4, 0xe1, 0x9e, 0x06, 0x9a, 0x98,
    0x52, 0xb6, 0xe8, 0xf9, 0xd1, 0x10, 0x6c, 0x4b, 0x9d, 0xfd, 0x89, 0xa1, 0xea, 0xc9, 0x39, 0x3c,
};

extern const uint8_t sTestCert_Root02_PrivateKey_Len = sizeof(sTestCert_Root02_PrivateKey);

extern const uint8_t sTestCert_Root02_SubjectKeyId[] = {
    0x0B, 0xC5, 0xFE, 0xD2, 0xAA, 0xB0, 0x4F, 0x20, 0x2C, 0xB3, 0x36, 0xA3, 0xD2, 0xCF, 0x66, 0x5A, 0x20, 0x1E, 0xFF, 0xBA,
};

extern const uint8_t sTestCert_Root02_SubjectKeyId_Len = sizeof(sTestCert_Root02_SubjectKeyId);

/**************  Test ICA01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 9015242816933719817 (0x7d1c9393c339ef09)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.3 = CACACACA00000003
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:4a:31:72:17:59:96:ee:14:7b:73:8a:47:1c:51:
                    24:10:e8:9a:7e:b9:42:7f:bc:05:fc:d6:99:bf:a7:
                    4e:a6:e7:16:34:60:db:ea:f9:81:21:be:37:11:33:
                    fc:eb:c0:bb:f4:6f:b4:71:45:58:00:99:16:1b:e9:
                    ac:72:72:f5:3f
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                74:2B:A9:9C:AF:17:C7:90:2B:71:3D:8B:24:59:15:63:35:3C:3B:A4
            X509v3 Authority Key Identifier:
                keyid:D1:02:DB:CF:02:53:F2:5B:10:CC:17:D9:7C:65:F4:C3:43:50:22:0D

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:21:00:a8:99:d6:d4:98:10:19:51:eb:86:e2:56:b3:
         8e:35:fe:69:0b:a6:4f:b2:03:23:9a:76:6d:96:47:a3:ba:0a:
         e9:02:20:56:62:cb:fe:9e:41:41:b3:8d:c4:58:b5:95:84:8d:
         21:72:fa:57:75:1e:90:b6:6d:dc:b1:9d:f9:c0:e1:1d:7e

-----BEGIN CERTIFICATE-----
MIIBnTCCAUOgAwIBAgIIfRyTk8M57wkwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBAwwQQ0FDQUNBQ0EwMDAwMDAwMzBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABEoxchdZlu4Ue3OKRxxRJBDomn65Qn+8BfzW
mb+nTqbnFjRg2+r5gSG+NxEz/OvAu/RvtHFFWACZFhvprHJy9T+jYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBR0K6mcrxfHkCtx
PYskWRVjNTw7pDAfBgNVHSMEGDAWgBTRAtvPAlPyWxDMF9l8ZfTDQ1AiDTAKBggq
hkjOPQQDAgNIADBFAiEAqJnW1JgQGVHrhuJWs441/mkLpk+yAyOadm2WR6O6CukC
IFZiy/6eQUGzjcRYtZWEjSFy+ld1HpC2bdyxnfnA4R1+
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIBXMH794SuDmU43v4DunjiXO+QTU4Kg+IDoC6LdnJ2YhoAoGCCqGSM49
AwEHoUQDQgAESjFyF1mW7hR7c4pHHFEkEOiafrlCf7wF/NaZv6dOpucWNGDb6vmB
Ib43ETP868C79G+0cUVYAJkWG+mscnL1Pw==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_ICA01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x7d, 0x1c, 0x93, 0x93, 0xc3, 0x39, 0xef, 0x09, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27,
    0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x13, 0x03, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24,
    0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x4a, 0x31, 0x72, 0x17, 0x59, 0x96, 0xee, 0x14, 0x7b, 0x73, 0x8a,
    0x47, 0x1c, 0x51, 0x24, 0x10, 0xe8, 0x9a, 0x7e, 0xb9, 0x42, 0x7f, 0xbc, 0x05, 0xfc, 0xd6, 0x99, 0xbf, 0xa7, 0x4e, 0xa6,
    0xe7, 0x16, 0x34, 0x60, 0xdb, 0xea, 0xf9, 0x81, 0x21, 0xbe, 0x37, 0x11, 0x33, 0xfc, 0xeb, 0xc0, 0xbb, 0xf4, 0x6f, 0xb4,
    0x71, 0x45, 0x58, 0x00, 0x99, 0x16, 0x1b, 0xe9, 0xac, 0x72, 0x72, 0xf5, 0x3f, 0x37, 0x0a, 0x35, 0x01, 0x29, 0x01, 0x18,
    0x24, 0x02, 0x60, 0x30, 0x04, 0x14, 0x74, 0x2b, 0xa9, 0x9c, 0xaf, 0x17, 0xc7, 0x90, 0x2b, 0x71, 0x3d, 0x8b, 0x24, 0x59,
    0x15, 0x63, 0x35, 0x3c, 0x3b, 0xa4, 0x30, 0x05, 0x14, 0xd1, 0x02, 0xdb, 0xcf, 0x02, 0x53, 0xf2, 0x5b, 0x10, 0xcc, 0x17,
    0xd9, 0x7c, 0x65, 0xf4, 0xc3, 0x43, 0x50, 0x22, 0x0d, 0x18, 0x30, 0x0b, 0x40, 0xa8, 0x99, 0xd6, 0xd4, 0x98, 0x10, 0x19,
    0x51, 0xeb, 0x86, 0xe2, 0x56, 0xb3, 0x8e, 0x35, 0xfe, 0x69, 0x0b, 0xa6, 0x4f, 0xb2, 0x03, 0x23, 0x9a, 0x76, 0x6d, 0x96,
    0x47, 0xa3, 0xba, 0x0a, 0xe9, 0x56, 0x62, 0xcb, 0xfe, 0x9e, 0x41, 0x41, 0xb3, 0x8d, 0xc4, 0x58, 0xb5, 0x95, 0x84, 0x8d,
    0x21, 0x72, 0xfa, 0x57, 0x75, 0x1e, 0x90, 0xb6, 0x6d, 0xdc, 0xb1, 0x9d, 0xf9, 0xc0, 0xe1, 0x1d, 0x7e, 0x18,
};

extern const uint32_t sTestCert_ICA01_Chip_Len = sizeof(sTestCert_ICA01_Chip);

extern const uint8_t sTestCert_ICA01_DER[] = {
    0x30, 0x82, 0x01, 0x9d, 0x30, 0x82, 0x01, 0x43, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x7d, 0x1c, 0x93, 0x93, 0xc3, 0x39,
    0xef, 0x09, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x4a, 0x31,
    0x72, 0x17, 0x59, 0x96, 0xee, 0x14, 0x7b, 0x73, 0x8a, 0x47, 0x1c, 0x51, 0x24, 0x10, 0xe8, 0x9a, 0x7e, 0xb9, 0x42, 0x7f, 0xbc,
    0x05, 0xfc, 0xd6, 0x99, 0xbf, 0xa7, 0x4e, 0xa6, 0xe7, 0x16, 0x34, 0x60, 0xdb, 0xea, 0xf9, 0x81, 0x21, 0xbe, 0x37, 0x11, 0x33,
    0xfc, 0xeb, 0xc0, 0xbb, 0xf4, 0x6f, 0xb4, 0x71, 0x45, 0x58, 0x00, 0x99, 0x16, 0x1b, 0xe9, 0xac, 0x72, 0x72, 0xf5, 0x3f, 0xa3,
    0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x16, 0x04, 0x14, 0x74, 0x2b, 0xa9, 0x9c, 0xaf, 0x17, 0xc7, 0x90, 0x2b, 0x71, 0x3d, 0x8b, 0x24, 0x59, 0x15, 0x63,
    0x35, 0x3c, 0x3b, 0xa4, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xd1, 0x02, 0xdb, 0xcf,
    0x02, 0x53, 0xf2, 0x5b, 0x10, 0xcc, 0x17, 0xd9, 0x7c, 0x65, 0xf4, 0xc3, 0x43, 0x50, 0x22, 0x0d, 0x30, 0x0a, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xa8, 0x99, 0xd6, 0xd4, 0x98, 0x10,
    0x19, 0x51, 0xeb, 0x86, 0xe2, 0x56, 0xb3, 0x8e, 0x35, 0xfe, 0x69, 0x0b, 0xa6, 0x4f, 0xb2, 0x03, 0x23, 0x9a, 0x76, 0x6d, 0x96,
    0x47, 0xa3, 0xba, 0x0a, 0xe9, 0x02, 0x20, 0x56, 0x62, 0xcb, 0xfe, 0x9e, 0x41, 0x41, 0xb3, 0x8d, 0xc4, 0x58, 0xb5, 0x95, 0x84,
    0x8d, 0x21, 0x72, 0xfa, 0x57, 0x75, 0x1e, 0x90, 0xb6, 0x6d, 0xdc, 0xb1, 0x9d, 0xf9, 0xc0, 0xe1, 0x1d, 0x7e,
};

extern const uint32_t sTestCert_ICA01_DER_Len = sizeof(sTestCert_ICA01_DER);

extern const uint8_t sTestCert_ICA01_PublicKey[] = {
    0x04, 0x4a, 0x31, 0x72, 0x17, 0x59, 0x96, 0xee, 0x14, 0x7b, 0x73, 0x8a, 0x47, 0x1c, 0x51, 0x24, 0x10,
    0xe8, 0x9a, 0x7e, 0xb9, 0x42, 0x7f, 0xbc, 0x05, 0xfc, 0xd6, 0x99, 0xbf, 0xa7, 0x4e, 0xa6, 0xe7, 0x16,
    0x34, 0x60, 0xdb, 0xea, 0xf9, 0x81, 0x21, 0xbe, 0x37, 0x11, 0x33, 0xfc, 0xeb, 0xc0, 0xbb, 0xf4, 0x6f,
    0xb4, 0x71, 0x45, 0x58, 0x00, 0x99, 0x16, 0x1b, 0xe9, 0xac, 0x72, 0x72, 0xf5, 0x3f,
};

extern const uint8_t sTestCert_ICA01_PublicKey_Len = sizeof(sTestCert_ICA01_PublicKey);

extern const uint8_t sTestCert_ICA01_PrivateKey[] = {
    0x15, 0xcc, 0x1f, 0xbf, 0x78, 0x4a, 0xe0, 0xe6, 0x53, 0x8d, 0xef, 0xe0, 0x3b, 0xa7, 0x8e, 0x25,
    0xce, 0xf9, 0x04, 0xd4, 0xe0, 0xa8, 0x3e, 0x20, 0x3a, 0x02, 0xe8, 0xb7, 0x67, 0x27, 0x66, 0x21,
};

extern const uint8_t sTestCert_ICA01_PrivateKey_Len = sizeof(sTestCert_ICA01_PrivateKey);

extern const uint8_t sTestCert_ICA01_SubjectKeyId[] = {
    0x74, 0x2B, 0xA9, 0x9C, 0xAF, 0x17, 0xC7, 0x90, 0x2B, 0x71, 0x3D, 0x8B, 0x24, 0x59, 0x15, 0x63, 0x35, 0x3C, 0x3B, 0xA4,
};

extern const uint8_t sTestCert_ICA01_SubjectKeyId_Len = sizeof(sTestCert_ICA01_SubjectKeyId);

/**************  Test ICA02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 6218192573028361207 (0x564b75332453e3f7)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:43:0b:77:1a:3c:fd:2f:8b:28:2e:c8:8e:32:80:
                    bb:c6:66:50:bf:b6:d7:44:6f:5a:3c:7f:16:b0:ac:
                    a6:19:89:16:42:e0:18:a1:25:94:1a:30:fa:54:06:
                    1a:b7:6e:d9:13:8c:fd:bc:e2:f4:e7:71:e5:9f:fe:
                    de:bc:9a:2b:35
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                F0:51:63:FF:96:1D:B7:7D:A0:63:88:29:02:D4:E3:6D:C4:FC:F5:75
            X509v3 Authority Key Identifier:
                keyid:0B:C5:FE:D2:AA:B0:4F:20:2C:B3:36:A3:D2:CF:66:5A:20:1E:FF:BA

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:19:ef:b1:78:31:5f:88:e8:f0:3f:90:ba:74:cb:
         18:f0:1a:47:27:b3:60:ea:7d:2b:eb:1d:70:a8:1f:b5:65:09:
         02:20:6a:94:07:47:f5:2c:c7:62:a4:d6:12:45:a7:bd:aa:49:
         70:df:10:0b:4c:c3:9f:6b:1a:45:9e:e5:fd:94:4a:37

-----BEGIN CERTIFICATE-----
MIIB4DCCAYegAwIBAgIIVkt1MyRT4/cwCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDIxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEQwt3Gjz9
L4soLsiOMoC7xmZQv7bXRG9aPH8WsKymGYkWQuAYoSWUGjD6VAYat27ZE4z9vOL0
53Hln/7evJorNaNjMGEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw
HQYDVR0OBBYEFPBRY/+WHbd9oGOIKQLU423E/PV1MB8GA1UdIwQYMBaAFAvF/tKq
sE8gLLM2o9LPZlogHv+6MAoGCCqGSM49BAMCA0cAMEQCIBnvsXgxX4jo8D+QunTL
GPAaRyezYOp9K+sdcKgftWUJAiBqlAdH9SzHYqTWEkWnvapJcN8QC0zDn2saRZ7l
/ZRKNw==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIG/omwKBQWGi2Yy19mWpYtC9m7kZvNDJJ7mvUXMxUW4OoAoGCCqGSM49
AwEHoUQDQgAEQwt3Gjz9L4soLsiOMoC7xmZQv7bXRG9aPH8WsKymGYkWQuAYoSWU
GjD6VAYat27ZE4z9vOL053Hln/7evJorNQ==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_ICA02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x56, 0x4b, 0x75, 0x33, 0x24, 0x53, 0xe3, 0xf7, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x14, 0x02, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xb0, 0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x13,
    0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24,
    0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x43, 0x0b, 0x77, 0x1a, 0x3c, 0xfd, 0x2f, 0x8b, 0x28, 0x2e, 0xc8,
    0x8e, 0x32, 0x80, 0xbb, 0xc6, 0x66, 0x50, 0xbf, 0xb6, 0xd7, 0x44, 0x6f, 0x5a, 0x3c, 0x7f, 0x16, 0xb0, 0xac, 0xa6, 0x19,
    0x89, 0x16, 0x42, 0xe0, 0x18, 0xa1, 0x25, 0x94, 0x1a, 0x30, 0xfa, 0x54, 0x06, 0x1a, 0xb7, 0x6e, 0xd9, 0x13, 0x8c, 0xfd,
    0xbc, 0xe2, 0xf4, 0xe7, 0x71, 0xe5, 0x9f, 0xfe, 0xde, 0xbc, 0x9a, 0x2b, 0x35, 0x37, 0x0a, 0x35, 0x01, 0x29, 0x01, 0x18,
    0x24, 0x02, 0x60, 0x30, 0x04, 0x14, 0xf0, 0x51, 0x63, 0xff, 0x96, 0x1d, 0xb7, 0x7d, 0xa0, 0x63, 0x88, 0x29, 0x02, 0xd4,
    0xe3, 0x6d, 0xc4, 0xfc, 0xf5, 0x75, 0x30, 0x05, 0x14, 0x0b, 0xc5, 0xfe, 0xd2, 0xaa, 0xb0, 0x4f, 0x20, 0x2c, 0xb3, 0x36,
    0xa3, 0xd2, 0xcf, 0x66, 0x5a, 0x20, 0x1e, 0xff, 0xba, 0x18, 0x30, 0x0b, 0x40, 0x19, 0xef, 0xb1, 0x78, 0x31, 0x5f, 0x88,
    0xe8, 0xf0, 0x3f, 0x90, 0xba, 0x74, 0xcb, 0x18, 0xf0, 0x1a, 0x47, 0x27, 0xb3, 0x60, 0xea, 0x7d, 0x2b, 0xeb, 0x1d, 0x70,
    0xa8, 0x1f, 0xb5, 0x65, 0x09, 0x6a, 0x94, 0x07, 0x47, 0xf5, 0x2c, 0xc7, 0x62, 0xa4, 0xd6, 0x12, 0x45, 0xa7, 0xbd, 0xaa,
    0x49, 0x70, 0xdf, 0x10, 0x0b, 0x4c, 0xc3, 0x9f, 0x6b, 0x1a, 0x45, 0x9e, 0xe5, 0xfd, 0x94, 0x4a, 0x37, 0x18,
};

extern const uint32_t sTestCert_ICA02_Chip_Len = sizeof(sTestCert_ICA02_Chip);

extern const uint8_t sTestCert_ICA02_DER[] = {
    0x30, 0x82, 0x01, 0xe0, 0x30, 0x82, 0x01, 0x87, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x56, 0x4b, 0x75, 0x33, 0x24, 0x53,
    0xe3, 0xf7, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0x43, 0x0b, 0x77, 0x1a, 0x3c, 0xfd, 0x2f, 0x8b, 0x28, 0x2e, 0xc8, 0x8e, 0x32, 0x80, 0xbb, 0xc6, 0x66, 0x50,
    0xbf, 0xb6, 0xd7, 0x44, 0x6f, 0x5a, 0x3c, 0x7f, 0x16, 0xb0, 0xac, 0xa6, 0x19, 0x89, 0x16, 0x42, 0xe0, 0x18, 0xa1, 0x25, 0x94,
    0x1a, 0x30, 0xfa, 0x54, 0x06, 0x1a, 0xb7, 0x6e, 0xd9, 0x13, 0x8c, 0xfd, 0xbc, 0xe2, 0xf4, 0xe7, 0x71, 0xe5, 0x9f, 0xfe, 0xde,
    0xbc, 0x9a, 0x2b, 0x35, 0xa3, 0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30,
    0x03, 0x01, 0x01, 0xff, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xf0, 0x51, 0x63, 0xff, 0x96, 0x1d, 0xb7, 0x7d, 0xa0, 0x63, 0x88,
    0x29, 0x02, 0xd4, 0xe3, 0x6d, 0xc4, 0xfc, 0xf5, 0x75, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0x0b, 0xc5, 0xfe, 0xd2, 0xaa, 0xb0, 0x4f, 0x20, 0x2c, 0xb3, 0x36, 0xa3, 0xd2, 0xcf, 0x66, 0x5a, 0x20, 0x1e, 0xff, 0xba,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x19, 0xef,
    0xb1, 0x78, 0x31, 0x5f, 0x88, 0xe8, 0xf0, 0x3f, 0x90, 0xba, 0x74, 0xcb, 0x18, 0xf0, 0x1a, 0x47, 0x27, 0xb3, 0x60, 0xea, 0x7d,
    0x2b, 0xeb, 0x1d, 0x70, 0xa8, 0x1f, 0xb5, 0x65, 0x09, 0x02, 0x20, 0x6a, 0x94, 0x07, 0x47, 0xf5, 0x2c, 0xc7, 0x62, 0xa4, 0xd6,
    0x12, 0x45, 0xa7, 0xbd, 0xaa, 0x49, 0x70, 0xdf, 0x10, 0x0b, 0x4c, 0xc3, 0x9f, 0x6b, 0x1a, 0x45, 0x9e, 0xe5, 0xfd, 0x94, 0x4a,
    0x37,
};

extern const uint32_t sTestCert_ICA02_DER_Len = sizeof(sTestCert_ICA02_DER);

extern const uint8_t sTestCert_ICA02_PublicKey[] = {
    0x04, 0x43, 0x0b, 0x77, 0x1a, 0x3c, 0xfd, 0x2f, 0x8b, 0x28, 0x2e, 0xc8, 0x8e, 0x32, 0x80, 0xbb, 0xc6,
    0x66, 0x50, 0xbf, 0xb6, 0xd7, 0x44, 0x6f, 0x5a, 0x3c, 0x7f, 0x16, 0xb0, 0xac, 0xa6, 0x19, 0x89, 0x16,
    0x42, 0xe0, 0x18, 0xa1, 0x25, 0x94, 0x1a, 0x30, 0xfa, 0x54, 0x06, 0x1a, 0xb7, 0x6e, 0xd9, 0x13, 0x8c,
    0xfd, 0xbc, 0xe2, 0xf4, 0xe7, 0x71, 0xe5, 0x9f, 0xfe, 0xde, 0xbc, 0x9a, 0x2b, 0x35,
};

extern const uint8_t sTestCert_ICA02_PublicKey_Len = sizeof(sTestCert_ICA02_PublicKey);

extern const uint8_t sTestCert_ICA02_PrivateKey[] = {
    0x6f, 0xe8, 0x9b, 0x02, 0x81, 0x41, 0x61, 0xa2, 0xd9, 0x8c, 0xb5, 0xf6, 0x65, 0xa9, 0x62, 0xd0,
    0xbd, 0x9b, 0xb9, 0x19, 0xbc, 0xd0, 0xc9, 0x27, 0xb9, 0xaf, 0x51, 0x73, 0x31, 0x51, 0x6e, 0x0e,
};

extern const uint8_t sTestCert_ICA02_PrivateKey_Len = sizeof(sTestCert_ICA02_PrivateKey);

extern const uint8_t sTestCert_ICA02_SubjectKeyId[] = {
    0xF0, 0x51, 0x63, 0xFF, 0x96, 0x1D, 0xB7, 0x7D, 0xA0, 0x63, 0x88, 0x29, 0x02, 0xD4, 0xE3, 0x6D, 0xC4, 0xFC, 0xF5, 0x75,
};

extern const uint8_t sTestCert_ICA02_SubjectKeyId_Len = sizeof(sTestCert_ICA02_SubjectKeyId);

/**************  Test ICA01_1 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 543611822547438006 (0x78b4c128aa489b6)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.3 = CACACACA00000005
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:94:e7:80:c1:83:ef:61:ca:e6:3b:80:35:f4:85:
                    62:6a:07:ea:0e:32:f2:67:2a:c4:56:b6:3a:f2:a3:
                    d1:80:6d:cf:32:1d:01:40:48:38:87:e8:c0:fe:df:
                    df:f2:29:0b:17:b8:b1:e0:94:8c:fb:ad:b4:ca:05:
                    a4:46:02:50:6b
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                13:8B:B2:32:94:4D:DF:8C:CD:24:30:1F:EB:70:5D:72:B3:24:F0:68
            X509v3 Authority Key Identifier:
                keyid:D1:02:DB:CF:02:53:F2:5B:10:CC:17:D9:7C:65:F4:C3:43:50:22:0D

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:21:00:ab:66:fc:d6:9f:78:1e:03:fb:5b:54:48:39:
         26:68:1e:df:da:61:30:dd:c0:87:c9:f8:16:76:ad:7b:74:fc:
         c5:02:20:3b:f5:5f:67:59:37:c4:68:34:a5:75:62:c3:c1:ac:
         f0:80:1e:fd:c4:2c:6e:d3:bc:5d:82:c3:b3:35:1e:da:47

-----BEGIN CERTIFICATE-----
MIIBnTCCAUOgAwIBAgIIB4tMEoqkibYwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBAwwQQ0FDQUNBQ0EwMDAwMDAwNTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABJTngMGD72HK5juANfSFYmoH6g4y8mcqxFa2
OvKj0YBtzzIdAUBIOIfowP7f3/IpCxe4seCUjPuttMoFpEYCUGujYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBQTi7IylE3fjM0k
MB/rcF1ysyTwaDAfBgNVHSMEGDAWgBTRAtvPAlPyWxDMF9l8ZfTDQ1AiDTAKBggq
hkjOPQQDAgNIADBFAiEAq2b81p94HgP7W1RIOSZoHt/aYTDdwIfJ+BZ2rXt0/MUC
IDv1X2dZN8RoNKV1YsPBrPCAHv3ELG7TvF2Cw7M1HtpH
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEICcN+WYysyxf8aW87QJnz+Q+eXP2IsT8bA+wNH1k1v0moAoGCCqGSM49
AwEHoUQDQgAElOeAwYPvYcrmO4A19IViagfqDjLyZyrEVrY68qPRgG3PMh0BQEg4
h+jA/t/f8ikLF7ix4JSM+620ygWkRgJQaw==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_ICA01_1_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x07, 0x8b, 0x4c, 0x12, 0x8a, 0xa4, 0x89, 0xb6, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27,
    0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x13, 0x05, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24,
    0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x94, 0xe7, 0x80, 0xc1, 0x83, 0xef, 0x61, 0xca, 0xe6, 0x3b, 0x80,
    0x35, 0xf4, 0x85, 0x62, 0x6a, 0x07, 0xea, 0x0e, 0x32, 0xf2, 0x67, 0x2a, 0xc4, 0x56, 0xb6, 0x3a, 0xf2, 0xa3, 0xd1, 0x80,
    0x6d, 0xcf, 0x32, 0x1d, 0x01, 0x40, 0x48, 0x38, 0x87, 0xe8, 0xc0, 0xfe, 0xdf, 0xdf, 0xf2, 0x29, 0x0b, 0x17, 0xb8, 0xb1,
    0xe0, 0x94, 0x8c, 0xfb, 0xad, 0xb4, 0xca, 0x05, 0xa4, 0x46, 0x02, 0x50, 0x6b, 0x37, 0x0a, 0x35, 0x01, 0x29, 0x01, 0x18,
    0x24, 0x02, 0x60, 0x30, 0x04, 0x14, 0x13, 0x8b, 0xb2, 0x32, 0x94, 0x4d, 0xdf, 0x8c, 0xcd, 0x24, 0x30, 0x1f, 0xeb, 0x70,
    0x5d, 0x72, 0xb3, 0x24, 0xf0, 0x68, 0x30, 0x05, 0x14, 0xd1, 0x02, 0xdb, 0xcf, 0x02, 0x53, 0xf2, 0x5b, 0x10, 0xcc, 0x17,
    0xd9, 0x7c, 0x65, 0xf4, 0xc3, 0x43, 0x50, 0x22, 0x0d, 0x18, 0x30, 0x0b, 0x40, 0xab, 0x66, 0xfc, 0xd6, 0x9f, 0x78, 0x1e,
    0x03, 0xfb, 0x5b, 0x54, 0x48, 0x39, 0x26, 0x68, 0x1e, 0xdf, 0xda, 0x61, 0x30, 0xdd, 0xc0, 0x87, 0xc9, 0xf8, 0x16, 0x76,
    0xad, 0x7b, 0x74, 0xfc, 0xc5, 0x3b, 0xf5, 0x5f, 0x67, 0x59, 0x37, 0xc4, 0x68, 0x34, 0xa5, 0x75, 0x62, 0xc3, 0xc1, 0xac,
    0xf0, 0x80, 0x1e, 0xfd, 0xc4, 0x2c, 0x6e, 0xd3, 0xbc, 0x5d, 0x82, 0xc3, 0xb3, 0x35, 0x1e, 0xda, 0x47, 0x18,
};

extern const uint32_t sTestCert_ICA01_1_Chip_Len = sizeof(sTestCert_ICA01_1_Chip);

extern const uint8_t sTestCert_ICA01_1_DER[] = {
    0x30, 0x82, 0x01, 0x9d, 0x30, 0x82, 0x01, 0x43, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x07, 0x8b, 0x4c, 0x12, 0x8a, 0xa4,
    0x89, 0xb6, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x94, 0xe7,
    0x80, 0xc1, 0x83, 0xef, 0x61, 0xca, 0xe6, 0x3b, 0x80, 0x35, 0xf4, 0x85, 0x62, 0x6a, 0x07, 0xea, 0x0e, 0x32, 0xf2, 0x67, 0x2a,
    0xc4, 0x56, 0xb6, 0x3a, 0xf2, 0xa3, 0xd1, 0x80, 0x6d, 0xcf, 0x32, 0x1d, 0x01, 0x40, 0x48, 0x38, 0x87, 0xe8, 0xc0, 0xfe, 0xdf,
    0xdf, 0xf2, 0x29, 0x0b, 0x17, 0xb8, 0xb1, 0xe0, 0x94, 0x8c, 0xfb, 0xad, 0xb4, 0xca, 0x05, 0xa4, 0x46, 0x02, 0x50, 0x6b, 0xa3,
    0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x16, 0x04, 0x14, 0x13, 0x8b, 0xb2, 0x32, 0x94, 0x4d, 0xdf, 0x8c, 0xcd, 0x24, 0x30, 0x1f, 0xeb, 0x70, 0x5d, 0x72,
    0xb3, 0x24, 0xf0, 0x68, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xd1, 0x02, 0xdb, 0xcf,
    0x02, 0x53, 0xf2, 0x5b, 0x10, 0xcc, 0x17, 0xd9, 0x7c, 0x65, 0xf4, 0xc3, 0x43, 0x50, 0x22, 0x0d, 0x30, 0x0a, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xab, 0x66, 0xfc, 0xd6, 0x9f, 0x78,
    0x1e, 0x03, 0xfb, 0x5b, 0x54, 0x48, 0x39, 0x26, 0x68, 0x1e, 0xdf, 0xda, 0x61, 0x30, 0xdd, 0xc0, 0x87, 0xc9, 0xf8, 0x16, 0x76,
    0xad, 0x7b, 0x74, 0xfc, 0xc5, 0x02, 0x20, 0x3b, 0xf5, 0x5f, 0x67, 0x59, 0x37, 0xc4, 0x68, 0x34, 0xa5, 0x75, 0x62, 0xc3, 0xc1,
    0xac, 0xf0, 0x80, 0x1e, 0xfd, 0xc4, 0x2c, 0x6e, 0xd3, 0xbc, 0x5d, 0x82, 0xc3, 0xb3, 0x35, 0x1e, 0xda, 0x47,
};

extern const uint32_t sTestCert_ICA01_1_DER_Len = sizeof(sTestCert_ICA01_1_DER);

extern const uint8_t sTestCert_ICA01_1_PublicKey[] = {
    0x04, 0x94, 0xe7, 0x80, 0xc1, 0x83, 0xef, 0x61, 0xca, 0xe6, 0x3b, 0x80, 0x35, 0xf4, 0x85, 0x62, 0x6a,
    0x07, 0xea, 0x0e, 0x32, 0xf2, 0x67, 0x2a, 0xc4, 0x56, 0xb6, 0x3a, 0xf2, 0xa3, 0xd1, 0x80, 0x6d, 0xcf,
    0x32, 0x1d, 0x01, 0x40, 0x48, 0x38, 0x87, 0xe8, 0xc0, 0xfe, 0xdf, 0xdf, 0xf2, 0x29, 0x0b, 0x17, 0xb8,
    0xb1, 0xe0, 0x94, 0x8c, 0xfb, 0xad, 0xb4, 0xca, 0x05, 0xa4, 0x46, 0x02, 0x50, 0x6b,
};

extern const uint8_t sTestCert_ICA01_1_PublicKey_Len = sizeof(sTestCert_ICA01_1_PublicKey);

extern const uint8_t sTestCert_ICA01_1_PrivateKey[] = {
    0x27, 0x0d, 0xf9, 0x66, 0x32, 0xb3, 0x2c, 0x5f, 0xf1, 0xa5, 0xbc, 0xed, 0x02, 0x67, 0xcf, 0xe4,
    0x3e, 0x79, 0x73, 0xf6, 0x22, 0xc4, 0xfc, 0x6c, 0x0f, 0xb0, 0x34, 0x7d, 0x64, 0xd6, 0xfd, 0x26,
};

extern const uint8_t sTestCert_ICA01_1_PrivateKey_Len = sizeof(sTestCert_ICA01_1_PrivateKey);

extern const uint8_t sTestCert_ICA01_1_SubjectKeyId[] = {
    0x13, 0x8B, 0xB2, 0x32, 0x94, 0x4D, 0xDF, 0x8C, 0xCD, 0x24, 0x30, 0x1F, 0xEB, 0x70, 0x5D, 0x72, 0xB3, 0x24, 0xF0, 0x68,
};

extern const uint8_t sTestCert_ICA01_1_SubjectKeyId_Len = sizeof(sTestCert_ICA01_1_SubjectKeyId);

/**************  Test FWSign01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 7331506268401822923 (0x65bebe1b6ca3eccb)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000005
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.2 = FFFFFFFF00000001, CN = FW SIGN CERT 01
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:f4:3c:b7:da:a0:39:f3:7b:ea:bd:3e:8e:fe:3e:
                    f0:0a:6d:37:97:c6:1c:8d:1f:b4:5c:32:79:48:cc:
                    7a:5c:64:49:47:e0:bc:ee:c4:81:38:41:e5:8c:8e:
                    ec:52:7b:14:2f:29:fa:6c:45:ed:c6:a4:2d:31:61:
                    03:ae:e4:44:0d
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature
            X509v3 Extended Key Usage: critical
                Code Signing
            X509v3 Subject Key Identifier:
                AF:BA:77:6D:13:D0:5D:3C:2D:AE:CB:76:E9:CD:BB:1A:40:03:3E:F1
            X509v3 Authority Key Identifier:
                keyid:13:8B:B2:32:94:4D:DF:8C:CD:24:30:1F:EB:70:5D:72:B3:24:F0:68

    Signature Algorithm: ecdsa-with-SHA256
         30:46:02:21:00:96:2c:9f:fa:b5:cb:b3:d7:07:6e:df:bd:b2:
         12:a1:e9:0f:49:4e:20:60:72:f7:b3:d4:97:e4:af:e3:07:b7:
         fe:02:21:00:f0:99:78:6f:cb:d9:f4:6e:82:66:1e:b0:30:2d:
         95:64:b2:cf:5f:c4:69:58:e5:f2:cb:07:01:90:a7:9a:ae:4f

-----BEGIN CERTIFICATE-----
MIIBzTCCAXKgAwIBAgIIZb6+G2yj7MswCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDUwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjA8MSAwHgYKKwYBBAGConwBAgwQRkZGRkZGRkYwMDAwMDAwMTEYMBYG
A1UEAwwPRlcgU0lHTiBDRVJUIDAxMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE
9Dy32qA583vqvT6O/j7wCm03l8YcjR+0XDJ5SMx6XGRJR+C87sSBOEHljI7sUnsU
Lyn6bEXtxqQtMWEDruREDaN4MHYwDAYDVR0TAQH/BAIwADAOBgNVHQ8BAf8EBAMC
B4AwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwMwHQYDVR0OBBYEFK+6d20T0F08La7L
dunNuxpAAz7xMB8GA1UdIwQYMBaAFBOLsjKUTd+MzSQwH+twXXKzJPBoMAoGCCqG
SM49BAMCA0kAMEYCIQCWLJ/6tcuz1wdu372yEqHpD0lOIGBy97PUl+Sv4we3/gIh
APCZeG/L2fRugmYesDAtlWSyz1/EaVjl8ssHAZCnmq5P
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEICjZR6z54fhyk2KmRhZEaZmraTZipvqrzudxiwewKfDBoAoGCCqGSM49
AwEHoUQDQgAE9Dy32qA583vqvT6O/j7wCm03l8YcjR+0XDJ5SMx6XGRJR+C87sSB
OEHljI7sUnsULyn6bEXtxqQtMWEDruREDQ==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_FWSign01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x65, 0xbe, 0xbe, 0x1b, 0x6c, 0xa3, 0xec, 0xcb, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x05, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05,
    0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x12, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x2c, 0x01, 0x0f, 0x46, 0x57,
    0x20, 0x53, 0x49, 0x47, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x30, 0x31, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30,
    0x09, 0x41, 0x04, 0xf4, 0x3c, 0xb7, 0xda, 0xa0, 0x39, 0xf3, 0x7b, 0xea, 0xbd, 0x3e, 0x8e, 0xfe, 0x3e, 0xf0, 0x0a, 0x6d, 0x37,
    0x97, 0xc6, 0x1c, 0x8d, 0x1f, 0xb4, 0x5c, 0x32, 0x79, 0x48, 0xcc, 0x7a, 0x5c, 0x64, 0x49, 0x47, 0xe0, 0xbc, 0xee, 0xc4, 0x81,
    0x38, 0x41, 0xe5, 0x8c, 0x8e, 0xec, 0x52, 0x7b, 0x14, 0x2f, 0x29, 0xfa, 0x6c, 0x45, 0xed, 0xc6, 0xa4, 0x2d, 0x31, 0x61, 0x03,
    0xae, 0xe4, 0x44, 0x0d, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x01, 0x36, 0x03, 0x04, 0x03, 0x18, 0x30, 0x04,
    0x14, 0xaf, 0xba, 0x77, 0x6d, 0x13, 0xd0, 0x5d, 0x3c, 0x2d, 0xae, 0xcb, 0x76, 0xe9, 0xcd, 0xbb, 0x1a, 0x40, 0x03, 0x3e, 0xf1,
    0x30, 0x05, 0x14, 0x13, 0x8b, 0xb2, 0x32, 0x94, 0x4d, 0xdf, 0x8c, 0xcd, 0x24, 0x30, 0x1f, 0xeb, 0x70, 0x5d, 0x72, 0xb3, 0x24,
    0xf0, 0x68, 0x18, 0x30, 0x0b, 0x40, 0x96, 0x2c, 0x9f, 0xfa, 0xb5, 0xcb, 0xb3, 0xd7, 0x07, 0x6e, 0xdf, 0xbd, 0xb2, 0x12, 0xa1,
    0xe9, 0x0f, 0x49, 0x4e, 0x20, 0x60, 0x72, 0xf7, 0xb3, 0xd4, 0x97, 0xe4, 0xaf, 0xe3, 0x07, 0xb7, 0xfe, 0xf0, 0x99, 0x78, 0x6f,
    0xcb, 0xd9, 0xf4, 0x6e, 0x82, 0x66, 0x1e, 0xb0, 0x30, 0x2d, 0x95, 0x64, 0xb2, 0xcf, 0x5f, 0xc4, 0x69, 0x58, 0xe5, 0xf2, 0xcb,
    0x07, 0x01, 0x90, 0xa7, 0x9a, 0xae, 0x4f, 0x18,
};

extern const uint32_t sTestCert_FWSign01_Chip_Len = sizeof(sTestCert_FWSign01_Chip);

extern const uint8_t sTestCert_FWSign01_DER[] = {
    0x30, 0x82, 0x01, 0xcd, 0x30, 0x82, 0x01, 0x72, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x65, 0xbe, 0xbe, 0x1b, 0x6c, 0xa3,
    0xec, 0xcb, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x3c,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x46, 0x46, 0x46,
    0x46, 0x46, 0x46, 0x46, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04,
    0x03, 0x0c, 0x0f, 0x46, 0x57, 0x20, 0x53, 0x49, 0x47, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x30, 0x31, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0xf4, 0x3c, 0xb7, 0xda, 0xa0, 0x39, 0xf3, 0x7b, 0xea, 0xbd, 0x3e, 0x8e, 0xfe, 0x3e, 0xf0, 0x0a, 0x6d, 0x37,
    0x97, 0xc6, 0x1c, 0x8d, 0x1f, 0xb4, 0x5c, 0x32, 0x79, 0x48, 0xcc, 0x7a, 0x5c, 0x64, 0x49, 0x47, 0xe0, 0xbc, 0xee, 0xc4, 0x81,
    0x38, 0x41, 0xe5, 0x8c, 0x8e, 0xec, 0x52, 0x7b, 0x14, 0x2f, 0x29, 0xfa, 0x6c, 0x45, 0xed, 0xc6, 0xa4, 0x2d, 0x31, 0x61, 0x03,
    0xae, 0xe4, 0x44, 0x0d, 0xa3, 0x78, 0x30, 0x76, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30,
    0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x16, 0x06, 0x03,
    0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x03, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xaf, 0xba, 0x77, 0x6d, 0x13, 0xd0, 0x5d, 0x3c, 0x2d, 0xae, 0xcb,
    0x76, 0xe9, 0xcd, 0xbb, 0x1a, 0x40, 0x03, 0x3e, 0xf1, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0x13, 0x8b, 0xb2, 0x32, 0x94, 0x4d, 0xdf, 0x8c, 0xcd, 0x24, 0x30, 0x1f, 0xeb, 0x70, 0x5d, 0x72, 0xb3, 0x24, 0xf0, 0x68,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0x96,
    0x2c, 0x9f, 0xfa, 0xb5, 0xcb, 0xb3, 0xd7, 0x07, 0x6e, 0xdf, 0xbd, 0xb2, 0x12, 0xa1, 0xe9, 0x0f, 0x49, 0x4e, 0x20, 0x60, 0x72,
    0xf7, 0xb3, 0xd4, 0x97, 0xe4, 0xaf, 0xe3, 0x07, 0xb7, 0xfe, 0x02, 0x21, 0x00, 0xf0, 0x99, 0x78, 0x6f, 0xcb, 0xd9, 0xf4, 0x6e,
    0x82, 0x66, 0x1e, 0xb0, 0x30, 0x2d, 0x95, 0x64, 0xb2, 0xcf, 0x5f, 0xc4, 0x69, 0x58, 0xe5, 0xf2, 0xcb, 0x07, 0x01, 0x90, 0xa7,
    0x9a, 0xae, 0x4f,
};

extern const uint32_t sTestCert_FWSign01_DER_Len = sizeof(sTestCert_FWSign01_DER);

extern const uint8_t sTestCert_FWSign01_PublicKey[] = {
    0x04, 0xf4, 0x3c, 0xb7, 0xda, 0xa0, 0x39, 0xf3, 0x7b, 0xea, 0xbd, 0x3e, 0x8e, 0xfe, 0x3e, 0xf0, 0x0a,
    0x6d, 0x37, 0x97, 0xc6, 0x1c, 0x8d, 0x1f, 0xb4, 0x5c, 0x32, 0x79, 0x48, 0xcc, 0x7a, 0x5c, 0x64, 0x49,
    0x47, 0xe0, 0xbc, 0xee, 0xc4, 0x81, 0x38, 0x41, 0xe5, 0x8c, 0x8e, 0xec, 0x52, 0x7b, 0x14, 0x2f, 0x29,
    0xfa, 0x6c, 0x45, 0xed, 0xc6, 0xa4, 0x2d, 0x31, 0x61, 0x03, 0xae, 0xe4, 0x44, 0x0d,
};

extern const uint8_t sTestCert_FWSign01_PublicKey_Len = sizeof(sTestCert_FWSign01_PublicKey);

extern const uint8_t sTestCert_FWSign01_PrivateKey[] = {
    0x28, 0xd9, 0x47, 0xac, 0xf9, 0xe1, 0xf8, 0x72, 0x93, 0x62, 0xa6, 0x46, 0x16, 0x44, 0x69, 0x99,
    0xab, 0x69, 0x36, 0x62, 0xa6, 0xfa, 0xab, 0xce, 0xe7, 0x71, 0x8b, 0x07, 0xb0, 0x29, 0xf0, 0xc1,
};

extern const uint8_t sTestCert_FWSign01_PrivateKey_Len = sizeof(sTestCert_FWSign01_PrivateKey);

extern const uint8_t sTestCert_FWSign01_SubjectKeyId[] = {
    0xAF, 0xBA, 0x77, 0x6D, 0x13, 0xD0, 0x5D, 0x3C, 0x2D, 0xAE, 0xCB, 0x76, 0xE9, 0xCD, 0xBB, 0x1A, 0x40, 0x03, 0x3E, 0xF1,
};

extern const uint8_t sTestCert_FWSign01_SubjectKeyId_Len = sizeof(sTestCert_FWSign01_SubjectKeyId);

/**************  Test Node01_01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 51870585498371410 (0xb84805ceec0552)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000003
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00010001, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:1c:f6:a6:fb:ba:3c:49:0f:40:cd:59:d7:f2:bb:
                    40:fd:ac:30:bd:51:2f:8a:fe:0d:ed:ca:12:78:9c:
                    8f:71:b4:7e:83:bf:d0:a7:86:2d:86:c6:63:ee:98:
                    79:55:5c:13:73:c4:22:92:51:94:be:8b:ad:12:27:
                    5f:e2:36:e9:90
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                B2:75:2C:21:8E:A9:3E:5E:87:A5:BD:5E:C7:39:BC:AA:1E:BE:56:4C
            X509v3 Authority Key Identifier:
                keyid:74:2B:A9:9C:AF:17:C7:90:2B:71:3D:8B:24:59:15:63:35:3C:3B:A4

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:61:82:8c:17:f9:70:61:32:6d:46:23:81:31:a6:
         30:5c:06:82:27:24:e4:f8:95:cf:80:83:69:82:11:9e:c1:16:
         02:21:00:fc:fc:c6:52:d0:7f:5a:99:74:13:01:c5:98:ed:6f:
         4f:7d:36:bc:c5:cd:4c:5b:34:80:e8:cb:d5:3c:87:f8:d3

-----BEGIN CERTIFICATE-----
MIIB4DCCAYagAwIBAgIIALhIBc7sBVIwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDMwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjBEMSAwHgYKKwYBBAGConwBAQwQREVERURFREUwMDAxMDAwMTEgMB4G
CisGAQQBgqJ8AQUMEEZBQjAwMDAwMDAwMDAwMUQwWTATBgcqhkjOPQIBBggqhkjO
PQMBBwNCAAQc9qb7ujxJD0DNWdfyu0D9rDC9US+K/g3tyhJ4nI9xtH6Dv9Cnhi2G
xmPumHlVXBNzxCKSUZS+i60SJ1/iNumQo4GDMIGAMAwGA1UdEwEB/wQCMAAwDgYD
VR0PAQH/BAQDAgWgMCAGA1UdJQEB/wQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAd
BgNVHQ4EFgQUsnUsIY6pPl6Hpb1exzm8qh6+VkwwHwYDVR0jBBgwFoAUdCupnK8X
x5ArcT2LJFkVYzU8O6QwCgYIKoZIzj0EAwIDSAAwRQIgYYKMF/lwYTJtRiOBMaYw
XAaCJyTk+JXPgINpghGewRYCIQD8/MZS0H9amXQTAcWY7W9PfTa8xc1MWzSA6MvV
PIf40w==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIJ/G6c0MTRjm02ofpv74Zh4v8hYW2TxOFVpZy6iN2fGaoAoGCCqGSM49
AwEHoUQDQgAEHPam+7o8SQ9AzVnX8rtA/awwvVEviv4N7coSeJyPcbR+g7/Qp4Yt
hsZj7ph5VVwTc8QiklGUvoutEidf4jbpkA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node01_01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x00, 0xb8, 0x48, 0x05, 0xce, 0xec, 0x05, 0x52, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x13, 0x03, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27,
    0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x11, 0x01, 0x00, 0x01, 0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15,
    0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x1c,
    0xf6, 0xa6, 0xfb, 0xba, 0x3c, 0x49, 0x0f, 0x40, 0xcd, 0x59, 0xd7, 0xf2, 0xbb, 0x40, 0xfd, 0xac, 0x30, 0xbd, 0x51, 0x2f,
    0x8a, 0xfe, 0x0d, 0xed, 0xca, 0x12, 0x78, 0x9c, 0x8f, 0x71, 0xb4, 0x7e, 0x83, 0xbf, 0xd0, 0xa7, 0x86, 0x2d, 0x86, 0xc6,
    0x63, 0xee, 0x98, 0x79, 0x55, 0x5c, 0x13, 0x73, 0xc4, 0x22, 0x92, 0x51, 0x94, 0xbe, 0x8b, 0xad, 0x12, 0x27, 0x5f, 0xe2,
    0x36, 0xe9, 0x90, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04, 0x01, 0x18,
    0x30, 0x04, 0x14, 0xb2, 0x75, 0x2c, 0x21, 0x8e, 0xa9, 0x3e, 0x5e, 0x87, 0xa5, 0xbd, 0x5e, 0xc7, 0x39, 0xbc, 0xaa, 0x1e,
    0xbe, 0x56, 0x4c, 0x30, 0x05, 0x14, 0x74, 0x2b, 0xa9, 0x9c, 0xaf, 0x17, 0xc7, 0x90, 0x2b, 0x71, 0x3d, 0x8b, 0x24, 0x59,
    0x15, 0x63, 0x35, 0x3c, 0x3b, 0xa4, 0x18, 0x30, 0x0b, 0x40, 0x61, 0x82, 0x8c, 0x17, 0xf9, 0x70, 0x61, 0x32, 0x6d, 0x46,
    0x23, 0x81, 0x31, 0xa6, 0x30, 0x5c, 0x06, 0x82, 0x27, 0x24, 0xe4, 0xf8, 0x95, 0xcf, 0x80, 0x83, 0x69, 0x82, 0x11, 0x9e,
    0xc1, 0x16, 0xfc, 0xfc, 0xc6, 0x52, 0xd0, 0x7f, 0x5a, 0x99, 0x74, 0x13, 0x01, 0xc5, 0x98, 0xed, 0x6f, 0x4f, 0x7d, 0x36,
    0xbc, 0xc5, 0xcd, 0x4c, 0x5b, 0x34, 0x80, 0xe8, 0xcb, 0xd5, 0x3c, 0x87, 0xf8, 0xd3, 0x18,
};

extern const uint32_t sTestCert_Node01_01_Chip_Len = sizeof(sTestCert_Node01_01_Chip);

extern const uint8_t sTestCert_Node01_01_DER[] = {
    0x30, 0x82, 0x01, 0xe0, 0x30, 0x82, 0x01, 0x86, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x00, 0xb8, 0x48, 0x05, 0xce, 0xec,
    0x05, 0x52, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44,
    0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x1c, 0xf6, 0xa6, 0xfb, 0xba, 0x3c, 0x49, 0x0f, 0x40, 0xcd,
    0x59, 0xd7, 0xf2, 0xbb, 0x40, 0xfd, 0xac, 0x30, 0xbd, 0x51, 0x2f, 0x8a, 0xfe, 0x0d, 0xed, 0xca, 0x12, 0x78, 0x9c, 0x8f, 0x71,
    0xb4, 0x7e, 0x83, 0xbf, 0xd0, 0xa7, 0x86, 0x2d, 0x86, 0xc6, 0x63, 0xee, 0x98, 0x79, 0x55, 0x5c, 0x13, 0x73, 0xc4, 0x22, 0x92,
    0x51, 0x94, 0xbe, 0x8b, 0xad, 0x12, 0x27, 0x5f, 0xe2, 0x36, 0xe9, 0x90, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06,
    0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff,
    0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06,
    0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d,
    0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xb2, 0x75, 0x2c, 0x21, 0x8e, 0xa9, 0x3e, 0x5e, 0x87, 0xa5, 0xbd, 0x5e,
    0xc7, 0x39, 0xbc, 0xaa, 0x1e, 0xbe, 0x56, 0x4c, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
    0x74, 0x2b, 0xa9, 0x9c, 0xaf, 0x17, 0xc7, 0x90, 0x2b, 0x71, 0x3d, 0x8b, 0x24, 0x59, 0x15, 0x63, 0x35, 0x3c, 0x3b, 0xa4, 0x30,
    0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x61, 0x82, 0x8c,
    0x17, 0xf9, 0x70, 0x61, 0x32, 0x6d, 0x46, 0x23, 0x81, 0x31, 0xa6, 0x30, 0x5c, 0x06, 0x82, 0x27, 0x24, 0xe4, 0xf8, 0x95, 0xcf,
    0x80, 0x83, 0x69, 0x82, 0x11, 0x9e, 0xc1, 0x16, 0x02, 0x21, 0x00, 0xfc, 0xfc, 0xc6, 0x52, 0xd0, 0x7f, 0x5a, 0x99, 0x74, 0x13,
    0x01, 0xc5, 0x98, 0xed, 0x6f, 0x4f, 0x7d, 0x36, 0xbc, 0xc5, 0xcd, 0x4c, 0x5b, 0x34, 0x80, 0xe8, 0xcb, 0xd5, 0x3c, 0x87, 0xf8,
    0xd3,
};

extern const uint32_t sTestCert_Node01_01_DER_Len = sizeof(sTestCert_Node01_01_DER);

extern const uint8_t sTestCert_Node01_01_PublicKey[] = {
    0x04, 0x1c, 0xf6, 0xa6, 0xfb, 0xba, 0x3c, 0x49, 0x0f, 0x40, 0xcd, 0x59, 0xd7, 0xf2, 0xbb, 0x40, 0xfd,
    0xac, 0x30, 0xbd, 0x51, 0x2f, 0x8a, 0xfe, 0x0d, 0xed, 0xca, 0x12, 0x78, 0x9c, 0x8f, 0x71, 0xb4, 0x7e,
    0x83, 0xbf, 0xd0, 0xa7, 0x86, 0x2d, 0x86, 0xc6, 0x63, 0xee, 0x98, 0x79, 0x55, 0x5c, 0x13, 0x73, 0xc4,
    0x22, 0x92, 0x51, 0x94, 0xbe, 0x8b, 0xad, 0x12, 0x27, 0x5f, 0xe2, 0x36, 0xe9, 0x90,
};

extern const uint8_t sTestCert_Node01_01_PublicKey_Len = sizeof(sTestCert_Node01_01_PublicKey);

extern const uint8_t sTestCert_Node01_01_PrivateKey[] = {
    0x9f, 0xc6, 0xe9, 0xcd, 0x0c, 0x4d, 0x18, 0xe6, 0xd3, 0x6a, 0x1f, 0xa6, 0xfe, 0xf8, 0x66, 0x1e,
    0x2f, 0xf2, 0x16, 0x16, 0xd9, 0x3c, 0x4e, 0x15, 0x5a, 0x59, 0xcb, 0xa8, 0x8d, 0xd9, 0xf1, 0x9a,
};

extern const uint8_t sTestCert_Node01_01_PrivateKey_Len = sizeof(sTestCert_Node01_01_PrivateKey);

extern const uint8_t sTestCert_Node01_01_SubjectKeyId[] = {
    0xB2, 0x75, 0x2C, 0x21, 0x8E, 0xA9, 0x3E, 0x5E, 0x87, 0xA5, 0xBD, 0x5E, 0xC7, 0x39, 0xBC, 0xAA, 0x1E, 0xBE, 0x56, 0x4C,
};

extern const uint8_t sTestCert_Node01_01_SubjectKeyId_Len = sizeof(sTestCert_Node01_01_SubjectKeyId);

/**************  Test Node01_02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 4459045502315054796 (0x3de1b64262cac6cc)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00010002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:91:30:22:51:ab:e1:e6:b0:ea:26:6e:e7:ce:00:
                    5e:89:aa:4e:4d:28:c3:01:15:b8:ec:f3:6f:1d:33:
                    9c:02:16:f3:e9:0d:dd:d9:4a:80:55:a5:96:64:06:
                    cf:62:3d:58:3f:40:c0:4a:63:28:3d:11:df:13:b1:
                    7d:28:cb:dc:44
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                AC:71:2A:AF:5E:A8:73:DD:14:E5:B3:D6:C2:9A:75:E0:E8:51:8C:0A
            X509v3 Authority Key Identifier:
                keyid:D1:02:DB:CF:02:53:F2:5B:10:CC:17:D9:7C:65:F4:C3:43:50:22:0D

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:21:00:d1:ae:60:66:7b:bb:e8:5d:25:ac:80:27:d6:
         c6:b9:66:12:7e:85:5f:34:49:0f:f5:bd:ea:2e:11:07:61:8b:
         c8:02:20:32:a5:61:cd:38:37:f9:69:ac:70:a7:0b:40:d4:b6:
         5f:49:c9:38:81:3d:30:c9:43:53:49:49:cd:57:ce:42:e6

-----BEGIN CERTIFICATE-----
MIIB4DCCAYagAwIBAgIIPeG2QmLKxswwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjBEMSAwHgYKKwYBBAGConwBAQwQREVERURFREUwMDAxMDAwMjEgMB4G
CisGAQQBgqJ8AQUMEEZBQjAwMDAwMDAwMDAwMUQwWTATBgcqhkjOPQIBBggqhkjO
PQMBBwNCAASRMCJRq+HmsOombufOAF6Jqk5NKMMBFbjs828dM5wCFvPpDd3ZSoBV
pZZkBs9iPVg/QMBKYyg9Ed8TsX0oy9xEo4GDMIGAMAwGA1UdEwEB/wQCMAAwDgYD
VR0PAQH/BAQDAgWgMCAGA1UdJQEB/wQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAd
BgNVHQ4EFgQUrHEqr16oc90U5bPWwpp14OhRjAowHwYDVR0jBBgwFoAU0QLbzwJT
8lsQzBfZfGX0w0NQIg0wCgYIKoZIzj0EAwIDSAAwRQIhANGuYGZ7u+hdJayAJ9bG
uWYSfoVfNEkP9b3qLhEHYYvIAiAypWHNODf5aaxwpwtA1LZfSck4gT0wyUNTSUnN
V85C5g==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIKqsXp9XnQmvnmzp8EDbm0MRvSzfS8r9VvnPfuW0w+kHoAoGCCqGSM49
AwEHoUQDQgAEkTAiUavh5rDqJm7nzgBeiapOTSjDARW47PNvHTOcAhbz6Q3d2UqA
VaWWZAbPYj1YP0DASmMoPRHfE7F9KMvcRA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node01_02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x3d, 0xe1, 0xb6, 0x42, 0x62, 0xca, 0xc6, 0xcc, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27,
    0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x11, 0x02, 0x00, 0x01, 0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15,
    0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x91,
    0x30, 0x22, 0x51, 0xab, 0xe1, 0xe6, 0xb0, 0xea, 0x26, 0x6e, 0xe7, 0xce, 0x00, 0x5e, 0x89, 0xaa, 0x4e, 0x4d, 0x28, 0xc3,
    0x01, 0x15, 0xb8, 0xec, 0xf3, 0x6f, 0x1d, 0x33, 0x9c, 0x02, 0x16, 0xf3, 0xe9, 0x0d, 0xdd, 0xd9, 0x4a, 0x80, 0x55, 0xa5,
    0x96, 0x64, 0x06, 0xcf, 0x62, 0x3d, 0x58, 0x3f, 0x40, 0xc0, 0x4a, 0x63, 0x28, 0x3d, 0x11, 0xdf, 0x13, 0xb1, 0x7d, 0x28,
    0xcb, 0xdc, 0x44, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04, 0x01, 0x18,
    0x30, 0x04, 0x14, 0xac, 0x71, 0x2a, 0xaf, 0x5e, 0xa8, 0x73, 0xdd, 0x14, 0xe5, 0xb3, 0xd6, 0xc2, 0x9a, 0x75, 0xe0, 0xe8,
    0x51, 0x8c, 0x0a, 0x30, 0x05, 0x14, 0xd1, 0x02, 0xdb, 0xcf, 0x02, 0x53, 0xf2, 0x5b, 0x10, 0xcc, 0x17, 0xd9, 0x7c, 0x65,
    0xf4, 0xc3, 0x43, 0x50, 0x22, 0x0d, 0x18, 0x30, 0x0b, 0x40, 0xd1, 0xae, 0x60, 0x66, 0x7b, 0xbb, 0xe8, 0x5d, 0x25, 0xac,
    0x80, 0x27, 0xd6, 0xc6, 0xb9, 0x66, 0x12, 0x7e, 0x85, 0x5f, 0x34, 0x49, 0x0f, 0xf5, 0xbd, 0xea, 0x2e, 0x11, 0x07, 0x61,
    0x8b, 0xc8, 0x32, 0xa5, 0x61, 0xcd, 0x38, 0x37, 0xf9, 0x69, 0xac, 0x70, 0xa7, 0x0b, 0x40, 0xd4, 0xb6, 0x5f, 0x49, 0xc9,
    0x38, 0x81, 0x3d, 0x30, 0xc9, 0x43, 0x53, 0x49, 0x49, 0xcd, 0x57, 0xce, 0x42, 0xe6, 0x18,
};

extern const uint32_t sTestCert_Node01_02_Chip_Len = sizeof(sTestCert_Node01_02_Chip);

extern const uint8_t sTestCert_Node01_02_DER[] = {
    0x30, 0x82, 0x01, 0xe0, 0x30, 0x82, 0x01, 0x86, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x3d, 0xe1, 0xb6, 0x42, 0x62, 0xca,
    0xc6, 0xcc, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44,
    0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x91, 0x30, 0x22, 0x51, 0xab, 0xe1, 0xe6, 0xb0, 0xea, 0x26,
    0x6e, 0xe7, 0xce, 0x00, 0x5e, 0x89, 0xaa, 0x4e, 0x4d, 0x28, 0xc3, 0x01, 0x15, 0xb8, 0xec, 0xf3, 0x6f, 0x1d, 0x33, 0x9c, 0x02,
    0x16, 0xf3, 0xe9, 0x0d, 0xdd, 0xd9, 0x4a, 0x80, 0x55, 0xa5, 0x96, 0x64, 0x06, 0xcf, 0x62, 0x3d, 0x58, 0x3f, 0x40, 0xc0, 0x4a,
    0x63, 0x28, 0x3d, 0x11, 0xdf, 0x13, 0xb1, 0x7d, 0x28, 0xcb, 0xdc, 0x44, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06,
    0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff,
    0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06,
    0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d,
    0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xac, 0x71, 0x2a, 0xaf, 0x5e, 0xa8, 0x73, 0xdd, 0x14, 0xe5, 0xb3, 0xd6,
    0xc2, 0x9a, 0x75, 0xe0, 0xe8, 0x51, 0x8c, 0x0a, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
    0xd1, 0x02, 0xdb, 0xcf, 0x02, 0x53, 0xf2, 0x5b, 0x10, 0xcc, 0x17, 0xd9, 0x7c, 0x65, 0xf4, 0xc3, 0x43, 0x50, 0x22, 0x0d, 0x30,
    0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xd1, 0xae,
    0x60, 0x66, 0x7b, 0xbb, 0xe8, 0x5d, 0x25, 0xac, 0x80, 0x27, 0xd6, 0xc6, 0xb9, 0x66, 0x12, 0x7e, 0x85, 0x5f, 0x34, 0x49, 0x0f,
    0xf5, 0xbd, 0xea, 0x2e, 0x11, 0x07, 0x61, 0x8b, 0xc8, 0x02, 0x20, 0x32, 0xa5, 0x61, 0xcd, 0x38, 0x37, 0xf9, 0x69, 0xac, 0x70,
    0xa7, 0x0b, 0x40, 0xd4, 0xb6, 0x5f, 0x49, 0xc9, 0x38, 0x81, 0x3d, 0x30, 0xc9, 0x43, 0x53, 0x49, 0x49, 0xcd, 0x57, 0xce, 0x42,
    0xe6,
};

extern const uint32_t sTestCert_Node01_02_DER_Len = sizeof(sTestCert_Node01_02_DER);

extern const uint8_t sTestCert_Node01_02_PublicKey[] = {
    0x04, 0x91, 0x30, 0x22, 0x51, 0xab, 0xe1, 0xe6, 0xb0, 0xea, 0x26, 0x6e, 0xe7, 0xce, 0x00, 0x5e, 0x89,
    0xaa, 0x4e, 0x4d, 0x28, 0xc3, 0x01, 0x15, 0xb8, 0xec, 0xf3, 0x6f, 0x1d, 0x33, 0x9c, 0x02, 0x16, 0xf3,
    0xe9, 0x0d, 0xdd, 0xd9, 0x4a, 0x80, 0x55, 0xa5, 0x96, 0x64, 0x06, 0xcf, 0x62, 0x3d, 0x58, 0x3f, 0x40,
    0xc0, 0x4a, 0x63, 0x28, 0x3d, 0x11, 0xdf, 0x13, 0xb1, 0x7d, 0x28, 0xcb, 0xdc, 0x44,
};

extern const uint8_t sTestCert_Node01_02_PublicKey_Len = sizeof(sTestCert_Node01_02_PublicKey);

extern const uint8_t sTestCert_Node01_02_PrivateKey[] = {
    0xaa, 0xac, 0x5e, 0x9f, 0x57, 0x9d, 0x09, 0xaf, 0x9e, 0x6c, 0xe9, 0xf0, 0x40, 0xdb, 0x9b, 0x43,
    0x11, 0xbd, 0x2c, 0xdf, 0x4b, 0xca, 0xfd, 0x56, 0xf9, 0xcf, 0x7e, 0xe5, 0xb4, 0xc3, 0xe9, 0x07,
};

extern const uint8_t sTestCert_Node01_02_PrivateKey_Len = sizeof(sTestCert_Node01_02_PrivateKey);

extern const uint8_t sTestCert_Node01_02_SubjectKeyId[] = {
    0xAC, 0x71, 0x2A, 0xAF, 0x5E, 0xA8, 0x73, 0xDD, 0x14, 0xE5, 0xB3, 0xD6, 0xC2, 0x9A, 0x75, 0xE0, 0xE8, 0x51, 0x8C, 0x0A,
};

extern const uint8_t sTestCert_Node01_02_SubjectKeyId_Len = sizeof(sTestCert_Node01_02_SubjectKeyId);

/**************  Test Node02_01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 8338065839803414338 (0x73b6c2b44f4d3742)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020001, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:bf:1b:f6:da:74:a1:82:8a:90:78:26:12:98:04:
                    ac:ec:f6:aa:07:d2:ed:22:31:58:f6:5b:8c:3f:f1:
                    2b:1b:9b:8f:14:a9:42:5a:2b:ab:01:67:bb:30:34:
                    90:0a:d3:cf:da:52:34:53:24:ec:7a:a2:e5:44:79:
                    8b:99:9e:56:dd
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                D2:18:FC:1C:FB:FC:1D:8B:F5:F1:8D:91:F8:B3:EF:5C:03:63:60:83
            X509v3 Authority Key Identifier:
                keyid:F0:51:63:FF:96:1D:B7:7D:A0:63:88:29:02:D4:E3:6D:C4:FC:F5:75

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:6d:4e:82:97:04:37:6a:15:7b:54:19:09:a9:e4:
         37:0a:9d:a2:ac:c2:60:dc:6d:23:a7:be:e1:18:db:75:5a:66:
         02:20:5e:88:66:9f:8f:ae:49:8b:d2:8d:75:f6:b5:8f:85:ce:
         0c:cb:1b:07:49:4b:53:4f:92:92:ef:3b:3a:0b:be:4f

-----BEGIN CERTIFICATE-----
MIICATCCAaigAwIBAgIIc7bCtE9NN0IwCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQEMEERFREVERURFMDAwMjAwMDExIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEvxv22nSh
goqQeCYSmASs7PaqB9LtIjFY9luMP/ErG5uPFKlCWiurAWe7MDSQCtPP2lI0UyTs
eqLlRHmLmZ5W3aOBgzCBgDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIFoDAg
BgNVHSUBAf8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFNIY/Bz7
/B2L9fGNkfiz71wDY2CDMB8GA1UdIwQYMBaAFPBRY/+WHbd9oGOIKQLU423E/PV1
MAoGCCqGSM49BAMCA0cAMEQCIG1OgpcEN2oVe1QZCankNwqdoqzCYNxtI6e+4Rjb
dVpmAiBeiGafj65Ji9KNdfa1j4XODMsbB0lLU0+Sku87Ogu+Tw==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIJhWxd0jwyw1O/WD+vnSnlU1yw7eaH8LgF5ATgxSEOdVoAoGCCqGSM49
AwEHoUQDQgAEvxv22nShgoqQeCYSmASs7PaqB9LtIjFY9luMP/ErG5uPFKlCWiur
AWe7MDSQCtPP2lI0UyTseqLlRHmLmZ5W3Q==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x73, 0xb6, 0xc2, 0xb4, 0x4f, 0x4d, 0x37, 0x42, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x11, 0x01, 0x00, 0x02,
    0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08,
    0x01, 0x30, 0x09, 0x41, 0x04, 0xbf, 0x1b, 0xf6, 0xda, 0x74, 0xa1, 0x82, 0x8a, 0x90, 0x78, 0x26, 0x12, 0x98, 0x04, 0xac, 0xec,
    0xf6, 0xaa, 0x07, 0xd2, 0xed, 0x22, 0x31, 0x58, 0xf6, 0x5b, 0x8c, 0x3f, 0xf1, 0x2b, 0x1b, 0x9b, 0x8f, 0x14, 0xa9, 0x42, 0x5a,
    0x2b, 0xab, 0x01, 0x67, 0xbb, 0x30, 0x34, 0x90, 0x0a, 0xd3, 0xcf, 0xda, 0x52, 0x34, 0x53, 0x24, 0xec, 0x7a, 0xa2, 0xe5, 0x44,
    0x79, 0x8b, 0x99, 0x9e, 0x56, 0xdd, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04,
    0x01, 0x18, 0x30, 0x04, 0x14, 0xd2, 0x18, 0xfc, 0x1c, 0xfb, 0xfc, 0x1d, 0x8b, 0xf5, 0xf1, 0x8d, 0x91, 0xf8, 0xb3, 0xef, 0x5c,
    0x03, 0x63, 0x60, 0x83, 0x30, 0x05, 0x14, 0xf0, 0x51, 0x63, 0xff, 0x96, 0x1d, 0xb7, 0x7d, 0xa0, 0x63, 0x88, 0x29, 0x02, 0xd4,
    0xe3, 0x6d, 0xc4, 0xfc, 0xf5, 0x75, 0x18, 0x30, 0x0b, 0x40, 0x6d, 0x4e, 0x82, 0x97, 0x04, 0x37, 0x6a, 0x15, 0x7b, 0x54, 0x19,
    0x09, 0xa9, 0xe4, 0x37, 0x0a, 0x9d, 0xa2, 0xac, 0xc2, 0x60, 0xdc, 0x6d, 0x23, 0xa7, 0xbe, 0xe1, 0x18, 0xdb, 0x75, 0x5a, 0x66,
    0x5e, 0x88, 0x66, 0x9f, 0x8f, 0xae, 0x49, 0x8b, 0xd2, 0x8d, 0x75, 0xf6, 0xb5, 0x8f, 0x85, 0xce, 0x0c, 0xcb, 0x1b, 0x07, 0x49,
    0x4b, 0x53, 0x4f, 0x92, 0x92, 0xef, 0x3b, 0x3a, 0x0b, 0xbe, 0x4f, 0x18,
};

extern const uint32_t sTestCert_Node02_01_Chip_Len = sizeof(sTestCert_Node02_01_Chip);

extern const uint8_t sTestCert_Node02_01_DER[] = {
    0x30, 0x82, 0x02, 0x01, 0x30, 0x82, 0x01, 0xa8, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x73, 0xb6, 0xc2, 0xb4, 0x4f, 0x4d,
    0x37, 0x42, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30,
    0x32, 0x30, 0x30, 0x30, 0x31, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0xbf, 0x1b, 0xf6, 0xda, 0x74, 0xa1, 0x82, 0x8a, 0x90, 0x78, 0x26, 0x12, 0x98, 0x04, 0xac, 0xec, 0xf6, 0xaa,
    0x07, 0xd2, 0xed, 0x22, 0x31, 0x58, 0xf6, 0x5b, 0x8c, 0x3f, 0xf1, 0x2b, 0x1b, 0x9b, 0x8f, 0x14, 0xa9, 0x42, 0x5a, 0x2b, 0xab,
    0x01, 0x67, 0xbb, 0x30, 0x34, 0x90, 0x0a, 0xd3, 0xcf, 0xda, 0x52, 0x34, 0x53, 0x24, 0xec, 0x7a, 0xa2, 0xe5, 0x44, 0x79, 0x8b,
    0x99, 0x9e, 0x56, 0xdd, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04,
    0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20,
    0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03,
    0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04,
    0x14, 0xd2, 0x18, 0xfc, 0x1c, 0xfb, 0xfc, 0x1d, 0x8b, 0xf5, 0xf1, 0x8d, 0x91, 0xf8, 0xb3, 0xef, 0x5c, 0x03, 0x63, 0x60, 0x83,
    0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xf0, 0x51, 0x63, 0xff, 0x96, 0x1d, 0xb7, 0x7d,
    0xa0, 0x63, 0x88, 0x29, 0x02, 0xd4, 0xe3, 0x6d, 0xc4, 0xfc, 0xf5, 0x75, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,
    0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x6d, 0x4e, 0x82, 0x97, 0x04, 0x37, 0x6a, 0x15, 0x7b, 0x54, 0x19,
    0x09, 0xa9, 0xe4, 0x37, 0x0a, 0x9d, 0xa2, 0xac, 0xc2, 0x60, 0xdc, 0x6d, 0x23, 0xa7, 0xbe, 0xe1, 0x18, 0xdb, 0x75, 0x5a, 0x66,
    0x02, 0x20, 0x5e, 0x88, 0x66, 0x9f, 0x8f, 0xae, 0x49, 0x8b, 0xd2, 0x8d, 0x75, 0xf6, 0xb5, 0x8f, 0x85, 0xce, 0x0c, 0xcb, 0x1b,
    0x07, 0x49, 0x4b, 0x53, 0x4f, 0x92, 0x92, 0xef, 0x3b, 0x3a, 0x0b, 0xbe, 0x4f,
};

extern const uint32_t sTestCert_Node02_01_DER_Len = sizeof(sTestCert_Node02_01_DER);

extern const uint8_t sTestCert_Node02_01_PublicKey[] = {
    0x04, 0xbf, 0x1b, 0xf6, 0xda, 0x74, 0xa1, 0x82, 0x8a, 0x90, 0x78, 0x26, 0x12, 0x98, 0x04, 0xac, 0xec,
    0xf6, 0xaa, 0x07, 0xd2, 0xed, 0x22, 0x31, 0x58, 0xf6, 0x5b, 0x8c, 0x3f, 0xf1, 0x2b, 0x1b, 0x9b, 0x8f,
    0x14, 0xa9, 0x42, 0x5a, 0x2b, 0xab, 0x01, 0x67, 0xbb, 0x30, 0x34, 0x90, 0x0a, 0xd3, 0xcf, 0xda, 0x52,
    0x34, 0x53, 0x24, 0xec, 0x7a, 0xa2, 0xe5, 0x44, 0x79, 0x8b, 0x99, 0x9e, 0x56, 0xdd,
};

extern const uint8_t sTestCert_Node02_01_PublicKey_Len = sizeof(sTestCert_Node02_01_PublicKey);

extern const uint8_t sTestCert_Node02_01_PrivateKey[] = {
    0x98, 0x56, 0xc5, 0xdd, 0x23, 0xc3, 0x2c, 0x35, 0x3b, 0xf5, 0x83, 0xfa, 0xf9, 0xd2, 0x9e, 0x55,
    0x35, 0xcb, 0x0e, 0xde, 0x68, 0x7f, 0x0b, 0x80, 0x5e, 0x40, 0x4e, 0x0c, 0x52, 0x10, 0xe7, 0x55,
};

extern const uint8_t sTestCert_Node02_01_PrivateKey_Len = sizeof(sTestCert_Node02_01_PrivateKey);

extern const uint8_t sTestCert_Node02_01_SubjectKeyId[] = {
    0xD2, 0x18, 0xFC, 0x1C, 0xFB, 0xFC, 0x1D, 0x8B, 0xF5, 0xF1, 0x8D, 0x91, 0xF8, 0xB3, 0xEF, 0x5C, 0x03, 0x63, 0x60, 0x83,
};

extern const uint8_t sTestCert_Node02_01_SubjectKeyId_Len = sizeof(sTestCert_Node02_01_SubjectKeyId);

/**************  Test Node02_02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 3213964271419148532 (0x2c9a4b79febc48f4)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D, CN = TEST CERT COMMON NAME Attr
for Node02_02 Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub:
                    04:76:3c:00:a8:cf:be:bd:b7:94:93:15:23:7a:15:
                    c7:ff:cc:76:d7:68:bb:91:a3:82:50:35:71:63:ae:
                    9c:f0:a2:72:75:91:6d:2d:ab:d7:96:7b:1c:08:de:
                    d9:dc:a7:e0:ad:35:6e:b2:fe:aa:be:ed:ab:29:fa:
                    79:d8:18:04:62
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                C5:D7:07:AD:40:62:88:B6:CE:7C:69:A8:97:78:00:F5:91:3C:7F:A8
            X509v3 Authority Key Identifier:
                keyid:F0:51:63:FF:96:1D:B7:7D:A0:63:88:29:02:D4:E3:6D:C4:FC:F5:75

    Signature Algorithm: ecdsa-with-SHA256
         30:46:02:21:00:83:31:aa:ac:34:98:d0:21:a4:43:4d:17:b2:
         ce:22:e1:f6:a5:4c:7c:f5:30:a3:b4:4a:ed:fa:0b:d3:78:67:
         8d:02:21:00:99:13:e1:16:b8:07:65:9a:50:e0:e9:9a:66:48:
         d2:8c:4e:bd:ae:af:0d:f2:34:3b:43:ad:81:db:60:41:c4:00

-----BEGIN CERTIFICATE-----
MIICNjCCAdugAwIBAgIILJpLef68SPQwCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowdzEgMB4G
CisGAQQBgqJ8AQEMEERFREVERURFMDAwMjAwMDIxIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMTEwLwYDVQQDDChURVNUIENFUlQgQ09NTU9OIE5BTUUg
QXR0ciBmb3IgTm9kZTAyXzAyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEdjwA
qM++vbeUkxUjehXH/8x212i7kaOCUDVxY66c8KJydZFtLavXlnscCN7Z3KfgrTVu
sv6qvu2rKfp52BgEYqOBgzCBgDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIF
oDAgBgNVHSUBAf8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFMXX
B61AYoi2znxpqJd4APWRPH+oMB8GA1UdIwQYMBaAFPBRY/+WHbd9oGOIKQLU423E
/PV1MAoGCCqGSM49BAMCA0kAMEYCIQCDMaqsNJjQIaRDTReyziLh9qVMfPUwo7RK
7foL03hnjQIhAJkT4Ra4B2WaUODpmmZI0oxOva6vDfI0O0OtgdtgQcQA
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIAH1T8s3R8DKY/V2/Cr0c4no5C0W39tY0aUvOKQmDXijoAoGCCqGSM49
AwEHoUQDQgAEdjwAqM++vbeUkxUjehXH/8x212i7kaOCUDVxY66c8KJydZFtLavX
lnscCN7Z3KfgrTVusv6qvu2rKfp52BgEYg==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x2c, 0x9a, 0x4b, 0x79, 0xfe, 0xbc, 0x48, 0xf4, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x11, 0x02, 0x00, 0x02,
    0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x2c, 0x01, 0x28, 0x54, 0x45, 0x53,
    0x54, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x20, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x41, 0x74,
    0x74, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4e, 0x6f, 0x64, 0x65, 0x30, 0x32, 0x5f, 0x30, 0x32, 0x18, 0x24, 0x07, 0x01, 0x24,
    0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x76, 0x3c, 0x00, 0xa8, 0xcf, 0xbe, 0xbd, 0xb7, 0x94, 0x93, 0x15, 0x23, 0x7a, 0x15, 0xc7,
    0xff, 0xcc, 0x76, 0xd7, 0x68, 0xbb, 0x91, 0xa3, 0x82, 0x50, 0x35, 0x71, 0x63, 0xae, 0x9c, 0xf0, 0xa2, 0x72, 0x75, 0x91, 0x6d,
    0x2d, 0xab, 0xd7, 0x96, 0x7b, 0x1c, 0x08, 0xde, 0xd9, 0xdc, 0xa7, 0xe0, 0xad, 0x35, 0x6e, 0xb2, 0xfe, 0xaa, 0xbe, 0xed, 0xab,
    0x29, 0xfa, 0x79, 0xd8, 0x18, 0x04, 0x62, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02,
    0x04, 0x01, 0x18, 0x30, 0x04, 0x14, 0xc5, 0xd7, 0x07, 0xad, 0x40, 0x62, 0x88, 0xb6, 0xce, 0x7c, 0x69, 0xa8, 0x97, 0x78, 0x00,
    0xf5, 0x91, 0x3c, 0x7f, 0xa8, 0x30, 0x05, 0x14, 0xf0, 0x51, 0x63, 0xff, 0x96, 0x1d, 0xb7, 0x7d, 0xa0, 0x63, 0x88, 0x29, 0x02,
    0xd4, 0xe3, 0x6d, 0xc4, 0xfc, 0xf5, 0x75, 0x18, 0x30, 0x0b, 0x40, 0x83, 0x31, 0xaa, 0xac, 0x34, 0x98, 0xd0, 0x21, 0xa4, 0x43,
    0x4d, 0x17, 0xb2, 0xce, 0x22, 0xe1, 0xf6, 0xa5, 0x4c, 0x7c, 0xf5, 0x30, 0xa3, 0xb4, 0x4a, 0xed, 0xfa, 0x0b, 0xd3, 0x78, 0x67,
    0x8d, 0x99, 0x13, 0xe1, 0x16, 0xb8, 0x07, 0x65, 0x9a, 0x50, 0xe0, 0xe9, 0x9a, 0x66, 0x48, 0xd2, 0x8c, 0x4e, 0xbd, 0xae, 0xaf,
    0x0d, 0xf2, 0x34, 0x3b, 0x43, 0xad, 0x81, 0xdb, 0x60, 0x41, 0xc4, 0x00, 0x18,
};

extern const uint32_t sTestCert_Node02_02_Chip_Len = sizeof(sTestCert_Node02_02_Chip);

extern const uint8_t sTestCert_Node02_02_DER[] = {
    0x30, 0x82, 0x02, 0x36, 0x30, 0x82, 0x01, 0xdb, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x2c, 0x9a, 0x4b, 0x79, 0xfe, 0xbc,
    0x48, 0xf4, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x77, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30,
    0x32, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x31, 0x31, 0x30,
    0x2f, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x28, 0x54, 0x45, 0x53, 0x54, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x43, 0x4f, 0x4d,
    0x4d, 0x4f, 0x4e, 0x20, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x41, 0x74, 0x74, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4e, 0x6f, 0x64,
    0x65, 0x30, 0x32, 0x5f, 0x30, 0x32, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08,
    0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x76, 0x3c, 0x00, 0xa8, 0xcf, 0xbe, 0xbd, 0xb7, 0x94,
    0x93, 0x15, 0x23, 0x7a, 0x15, 0xc7, 0xff, 0xcc, 0x76, 0xd7, 0x68, 0xbb, 0x91, 0xa3, 0x82, 0x50, 0x35, 0x71, 0x63, 0xae, 0x9c,
    0xf0, 0xa2, 0x72, 0x75, 0x91, 0x6d, 0x2d, 0xab, 0xd7, 0x96, 0x7b, 0x1c, 0x08, 0xde, 0xd9, 0xdc, 0xa7, 0xe0, 0xad, 0x35, 0x6e,
    0xb2, 0xfe, 0xaa, 0xbe, 0xed, 0xab, 0x29, 0xfa, 0x79, 0xd8, 0x18, 0x04, 0x62, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c,
    0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01,
    0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14,
    0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xc5, 0xd7, 0x07, 0xad, 0x40, 0x62, 0x88, 0xb6, 0xce, 0x7c, 0x69,
    0xa8, 0x97, 0x78, 0x00, 0xf5, 0x91, 0x3c, 0x7f, 0xa8, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0xf0, 0x51, 0x63, 0xff, 0x96, 0x1d, 0xb7, 0x7d, 0xa0, 0x63, 0x88, 0x29, 0x02, 0xd4, 0xe3, 0x6d, 0xc4, 0xfc, 0xf5, 0x75,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0x83,
    0x31, 0xaa, 0xac, 0x34, 0x98, 0xd0, 0x21, 0xa4, 0x43, 0x4d, 0x17, 0xb2, 0xce, 0x22, 0xe1, 0xf6, 0xa5, 0x4c, 0x7c, 0xf5, 0x30,
    0xa3, 0xb4, 0x4a, 0xed, 0xfa, 0x0b, 0xd3, 0x78, 0x67, 0x8d, 0x02, 0x21, 0x00, 0x99, 0x13, 0xe1, 0x16, 0xb8, 0x07, 0x65, 0x9a,
    0x50, 0xe0, 0xe9, 0x9a, 0x66, 0x48, 0xd2, 0x8c, 0x4e, 0xbd, 0xae, 0xaf, 0x0d, 0xf2, 0x34, 0x3b, 0x43, 0xad, 0x81, 0xdb, 0x60,
    0x41, 0xc4, 0x00,
};

extern const uint32_t sTestCert_Node02_02_DER_Len = sizeof(sTestCert_Node02_02_DER);

extern const uint8_t sTestCert_Node02_02_PublicKey[] = {
    0x04, 0x76, 0x3c, 0x00, 0xa8, 0xcf, 0xbe, 0xbd, 0xb7, 0x94, 0x93, 0x15, 0x23, 0x7a, 0x15, 0xc7, 0xff,
    0xcc, 0x76, 0xd7, 0x68, 0xbb, 0x91, 0xa3, 0x82, 0x50, 0x35, 0x71, 0x63, 0xae, 0x9c, 0xf0, 0xa2, 0x72,
    0x75, 0x91, 0x6d, 0x2d, 0xab, 0xd7, 0x96, 0x7b, 0x1c, 0x08, 0xde, 0xd9, 0xdc, 0xa7, 0xe0, 0xad, 0x35,
    0x6e, 0xb2, 0xfe, 0xaa, 0xbe, 0xed, 0xab, 0x29, 0xfa, 0x79, 0xd8, 0x18, 0x04, 0x62,
};

extern const uint8_t sTestCert_Node02_02_PublicKey_Len = sizeof(sTestCert_Node02_02_PublicKey);

extern const uint8_t sTestCert_Node02_02_PrivateKey[] = {
    0x01, 0xf5, 0x4f, 0xcb, 0x37, 0x47, 0xc0, 0xca, 0x63, 0xf5, 0x76, 0xfc, 0x2a, 0xf4, 0x73, 0x89,
    0xe8, 0xe4, 0x2d, 0x16, 0xdf, 0xdb, 0x58, 0xd1, 0xa5, 0x2f, 0x38, 0xa4, 0x26, 0x0d, 0x78, 0xa3,
};

extern const uint8_t sTestCert_Node02_02_PrivateKey_Len = sizeof(sTestCert_Node02_02_PrivateKey);

extern const uint8_t sTestCert_Node02_02_SubjectKeyId[] = {
    0xC5, 0xD7, 0x07, 0xAD, 0x40, 0x62, 0x88, 0xB6, 0xCE, 0x7C, 0x69, 0xA8, 0x97, 0x78, 0x00, 0xF5, 0x91, 0x3C, 0x7F, 0xA8,
};

extern const uint8_t sTestCert_Node02_02_SubjectKeyId_Len = sizeof(sTestCert_Node02_02_SubjectKeyId);

/**************  Test Node02_03 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 5656516894095452797 (0x4e7ffc254a8e2a7d)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020003, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D, CN = Node02_03 Test
Certificate, 1.3.6.1.4.1.37244.1.6 = A001B001, 1.3.6.1.4.1.37244.1.7 = A001B002 Subject Public Key Info: Public Key Algorithm:
id-ecPublicKey Public-Key: (256 bit) pub: 04:cf:1f:ff:7e:a9:19:e7:a0:91:0c:ef:65:01:57:
                    8a:4d:fd:f9:d3:f6:48:d0:28:8a:3b:ac:09:ac:cf:
                    3f:d2:17:1c:2c:ac:76:2d:cc:70:91:76:94:d9:dc:
                    7a:7b:7c:50:a3:03:04:dc:fb:e1:91:db:63:e3:85:
                    8b:6d:d4:b1:e3
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                8D:5E:1A:AC:04:06:8A:B5:1C:19:D9:13:13:33:46:AE:76:0C:AA:F1
            X509v3 Authority Key Identifier:
                keyid:F0:51:63:FF:96:1D:B7:7D:A0:63:88:29:02:D4:E3:6D:C4:FC:F5:75

    Signature Algorithm: ecdsa-with-SHA256
         30:46:02:21:00:f1:06:9e:d6:63:27:13:7f:11:ab:97:4d:67:
         c0:2c:c5:a1:91:41:03:4d:fb:b2:ec:97:c3:27:f0:83:c3:ef:
         21:02:21:00:9f:40:5f:64:52:58:37:aa:43:6c:23:05:34:12:
         d2:48:fd:ed:4a:ac:dd:97:1b:ae:37:82:b1:88:46:32:24:93

-----BEGIN CERTIFICATE-----
MIICXTCCAgKgAwIBAgIITn/8JUqOKn0wCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowgZ0xIDAe
BgorBgEEAYKifAEBDBBERURFREVERTAwMDIwMDAzMSAwHgYKKwYBBAGConwBBQwQ
RkFCMDAwMDAwMDAwMDAxRDEjMCEGA1UEAwwaTm9kZTAyXzAzIFRlc3QgQ2VydGlm
aWNhdGUxGDAWBgorBgEEAYKifAEGDAhBMDAxQjAwMTEYMBYGCisGAQQBgqJ8AQcM
CEEwMDFCMDAyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEzx//fqkZ56CRDO9l
AVeKTf350/ZI0CiKO6wJrM8/0hccLKx2LcxwkXaU2dx6e3xQowME3Pvhkdtj44WL
bdSx46OBgzCBgDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIFoDAgBgNVHSUB
Af8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFI1eGqwEBoq1HBnZ
ExMzRq52DKrxMB8GA1UdIwQYMBaAFPBRY/+WHbd9oGOIKQLU423E/PV1MAoGCCqG
SM49BAMCA0kAMEYCIQDxBp7WYycTfxGrl01nwCzFoZFBA037suyXwyfwg8PvIQIh
AJ9AX2RSWDeqQ2wjBTQS0kj97Uqs3ZcbrjeCsYhGMiST
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIFAX5p/tZB62qz8IV98pG7ZjvpY/WaOC9sSRcj0q+l31oAoGCCqGSM49
AwEHoUQDQgAEzx//fqkZ56CRDO9lAVeKTf350/ZI0CiKO6wJrM8/0hccLKx2Lcxw
kXaU2dx6e3xQowME3Pvhkdtj44WLbdSx4w==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_03_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x4e, 0x7f, 0xfc, 0x25, 0x4a, 0x8e, 0x2a, 0x7d, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x11, 0x03, 0x00, 0x02,
    0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x2c, 0x01, 0x1a, 0x4e, 0x6f, 0x64,
    0x65, 0x30, 0x32, 0x5f, 0x30, 0x33, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
    0x74, 0x65, 0x26, 0x16, 0x01, 0xb0, 0x01, 0xa0, 0x26, 0x17, 0x02, 0xb0, 0x01, 0xa0, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01,
    0x30, 0x09, 0x41, 0x04, 0xcf, 0x1f, 0xff, 0x7e, 0xa9, 0x19, 0xe7, 0xa0, 0x91, 0x0c, 0xef, 0x65, 0x01, 0x57, 0x8a, 0x4d, 0xfd,
    0xf9, 0xd3, 0xf6, 0x48, 0xd0, 0x28, 0x8a, 0x3b, 0xac, 0x09, 0xac, 0xcf, 0x3f, 0xd2, 0x17, 0x1c, 0x2c, 0xac, 0x76, 0x2d, 0xcc,
    0x70, 0x91, 0x76, 0x94, 0xd9, 0xdc, 0x7a, 0x7b, 0x7c, 0x50, 0xa3, 0x03, 0x04, 0xdc, 0xfb, 0xe1, 0x91, 0xdb, 0x63, 0xe3, 0x85,
    0x8b, 0x6d, 0xd4, 0xb1, 0xe3, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04, 0x01,
    0x18, 0x30, 0x04, 0x14, 0x8d, 0x5e, 0x1a, 0xac, 0x04, 0x06, 0x8a, 0xb5, 0x1c, 0x19, 0xd9, 0x13, 0x13, 0x33, 0x46, 0xae, 0x76,
    0x0c, 0xaa, 0xf1, 0x30, 0x05, 0x14, 0xf0, 0x51, 0x63, 0xff, 0x96, 0x1d, 0xb7, 0x7d, 0xa0, 0x63, 0x88, 0x29, 0x02, 0xd4, 0xe3,
    0x6d, 0xc4, 0xfc, 0xf5, 0x75, 0x18, 0x30, 0x0b, 0x40, 0xf1, 0x06, 0x9e, 0xd6, 0x63, 0x27, 0x13, 0x7f, 0x11, 0xab, 0x97, 0x4d,
    0x67, 0xc0, 0x2c, 0xc5, 0xa1, 0x91, 0x41, 0x03, 0x4d, 0xfb, 0xb2, 0xec, 0x97, 0xc3, 0x27, 0xf0, 0x83, 0xc3, 0xef, 0x21, 0x9f,
    0x40, 0x5f, 0x64, 0x52, 0x58, 0x37, 0xaa, 0x43, 0x6c, 0x23, 0x05, 0x34, 0x12, 0xd2, 0x48, 0xfd, 0xed, 0x4a, 0xac, 0xdd, 0x97,
    0x1b, 0xae, 0x37, 0x82, 0xb1, 0x88, 0x46, 0x32, 0x24, 0x93, 0x18,
};

extern const uint32_t sTestCert_Node02_03_Chip_Len = sizeof(sTestCert_Node02_03_Chip);

extern const uint8_t sTestCert_Node02_03_DER[] = {
    0x30, 0x82, 0x02, 0x5d, 0x30, 0x82, 0x02, 0x02, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x4e, 0x7f, 0xfc, 0x25, 0x4a, 0x8e,
    0x2a, 0x7d, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x81, 0x9d, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b,
    0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30,
    0x30, 0x32, 0x30, 0x30, 0x30, 0x33, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01,
    0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x31, 0x23,
    0x30, 0x21, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1a, 0x4e, 0x6f, 0x64, 0x65, 0x30, 0x32, 0x5f, 0x30, 0x33, 0x20, 0x54, 0x65,
    0x73, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x31, 0x18, 0x30, 0x16, 0x06, 0x0a, 0x2b,
    0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x06, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42, 0x30, 0x30, 0x31, 0x31, 0x18,
    0x30, 0x16, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x07, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42,
    0x30, 0x30, 0x32, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48,
    0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xcf, 0x1f, 0xff, 0x7e, 0xa9, 0x19, 0xe7, 0xa0, 0x91, 0x0c, 0xef, 0x65,
    0x01, 0x57, 0x8a, 0x4d, 0xfd, 0xf9, 0xd3, 0xf6, 0x48, 0xd0, 0x28, 0x8a, 0x3b, 0xac, 0x09, 0xac, 0xcf, 0x3f, 0xd2, 0x17, 0x1c,
    0x2c, 0xac, 0x76, 0x2d, 0xcc, 0x70, 0x91, 0x76, 0x94, 0xd9, 0xdc, 0x7a, 0x7b, 0x7c, 0x50, 0xa3, 0x03, 0x04, 0xdc, 0xfb, 0xe1,
    0x91, 0xdb, 0x63, 0xe3, 0x85, 0x8b, 0x6d, 0xd4, 0xb1, 0xe3, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06, 0x03, 0x55,
    0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04,
    0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b,
    0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03,
    0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x8d, 0x5e, 0x1a, 0xac, 0x04, 0x06, 0x8a, 0xb5, 0x1c, 0x19, 0xd9, 0x13, 0x13, 0x33,
    0x46, 0xae, 0x76, 0x0c, 0xaa, 0xf1, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xf0, 0x51,
    0x63, 0xff, 0x96, 0x1d, 0xb7, 0x7d, 0xa0, 0x63, 0x88, 0x29, 0x02, 0xd4, 0xe3, 0x6d, 0xc4, 0xfc, 0xf5, 0x75, 0x30, 0x0a, 0x06,
    0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0xf1, 0x06, 0x9e, 0xd6,
    0x63, 0x27, 0x13, 0x7f, 0x11, 0xab, 0x97, 0x4d, 0x67, 0xc0, 0x2c, 0xc5, 0xa1, 0x91, 0x41, 0x03, 0x4d, 0xfb, 0xb2, 0xec, 0x97,
    0xc3, 0x27, 0xf0, 0x83, 0xc3, 0xef, 0x21, 0x02, 0x21, 0x00, 0x9f, 0x40, 0x5f, 0x64, 0x52, 0x58, 0x37, 0xaa, 0x43, 0x6c, 0x23,
    0x05, 0x34, 0x12, 0xd2, 0x48, 0xfd, 0xed, 0x4a, 0xac, 0xdd, 0x97, 0x1b, 0xae, 0x37, 0x82, 0xb1, 0x88, 0x46, 0x32, 0x24, 0x93,
};

extern const uint32_t sTestCert_Node02_03_DER_Len = sizeof(sTestCert_Node02_03_DER);

extern const uint8_t sTestCert_Node02_03_PublicKey[] = {
    0x04, 0xcf, 0x1f, 0xff, 0x7e, 0xa9, 0x19, 0xe7, 0xa0, 0x91, 0x0c, 0xef, 0x65, 0x01, 0x57, 0x8a, 0x4d,
    0xfd, 0xf9, 0xd3, 0xf6, 0x48, 0xd0, 0x28, 0x8a, 0x3b, 0xac, 0x09, 0xac, 0xcf, 0x3f, 0xd2, 0x17, 0x1c,
    0x2c, 0xac, 0x76, 0x2d, 0xcc, 0x70, 0x91, 0x76, 0x94, 0xd9, 0xdc, 0x7a, 0x7b, 0x7c, 0x50, 0xa3, 0x03,
    0x04, 0xdc, 0xfb, 0xe1, 0x91, 0xdb, 0x63, 0xe3, 0x85, 0x8b, 0x6d, 0xd4, 0xb1, 0xe3,
};

extern const uint8_t sTestCert_Node02_03_PublicKey_Len = sizeof(sTestCert_Node02_03_PublicKey);

extern const uint8_t sTestCert_Node02_03_PrivateKey[] = {
    0x50, 0x17, 0xe6, 0x9f, 0xed, 0x64, 0x1e, 0xb6, 0xab, 0x3f, 0x08, 0x57, 0xdf, 0x29, 0x1b, 0xb6,
    0x63, 0xbe, 0x96, 0x3f, 0x59, 0xa3, 0x82, 0xf6, 0xc4, 0x91, 0x72, 0x3d, 0x2a, 0xfa, 0x5d, 0xf5,
};

extern const uint8_t sTestCert_Node02_03_PrivateKey_Len = sizeof(sTestCert_Node02_03_PrivateKey);

extern const uint8_t sTestCert_Node02_03_SubjectKeyId[] = {
    0x8D, 0x5E, 0x1A, 0xAC, 0x04, 0x06, 0x8A, 0xB5, 0x1C, 0x19, 0xD9, 0x13, 0x13, 0x33, 0x46, 0xAE, 0x76, 0x0C, 0xAA, 0xF1,
};

extern const uint8_t sTestCert_Node02_03_SubjectKeyId_Len = sizeof(sTestCert_Node02_03_SubjectKeyId);

/**************  Test Node02_04 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1924666713453257647 (0x1ab5ca2db66663af)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.6 = A001B001, CN = Node02_04 Test Certificate, 1.3.6.1.4.1.37244.1.5 =
FAB000000000001D, 1.3.6.1.4.1.37244.1.7 = A001B002, 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020004 Subject Public Key Info: Public Key
Algorithm: id-ecPublicKey Public-Key: (256 bit) pub: 04:cd:b9:7d:65:a0:5d:6b:40:c1:3d:36:e8:5d:01:
                    4f:81:1c:b0:ef:6c:27:2e:56:98:8e:1b:d1:96:8d:
                    61:b9:59:60:0c:94:6e:28:15:15:ea:fe:81:99:d2:
                    8f:ad:10:7a:02:b9:ad:98:c1:47:19:8f:b8:fa:60:
                    ca:1a:df:d1:cc
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                F5:17:E0:5E:CB:E6:13:78:5D:06:4F:34:19:43:8D:AC:D1:10:62:74
            X509v3 Authority Key Identifier:
                keyid:F0:51:63:FF:96:1D:B7:7D:A0:63:88:29:02:D4:E3:6D:C4:FC:F5:75

    Signature Algorithm: ecdsa-with-SHA256
         30:46:02:21:00:d9:09:5c:7c:df:29:01:3c:3d:07:9c:cd:8c:
         3c:99:45:a7:be:5d:c2:cd:67:3a:00:a5:9a:e4:97:e7:cd:fc:
         a7:02:21:00:d5:b4:db:41:2e:09:15:8f:0f:c6:9b:5d:47:a8:
         b9:b4:83:24:f6:a6:78:b7:00:50:5c:cf:6f:86:82:08:6f:9a

-----BEGIN CERTIFICATE-----
MIICXTCCAgKgAwIBAgIIGrXKLbZmY68wCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowgZ0xGDAW
BgorBgEEAYKifAEGDAhBMDAxQjAwMTEjMCEGA1UEAwwaTm9kZTAyXzA0IFRlc3Qg
Q2VydGlmaWNhdGUxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAwMDAwMDAwMDFEMRgw
FgYKKwYBBAGConwBBwwIQTAwMUIwMDIxIDAeBgorBgEEAYKifAEBDBBERURFREVE
RTAwMDIwMDA0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEzbl9ZaBda0DBPTbo
XQFPgRyw72wnLlaYjhvRlo1huVlgDJRuKBUV6v6BmdKPrRB6ArmtmMFHGY+4+mDK
Gt/RzKOBgzCBgDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIFoDAgBgNVHSUB
Af8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFPUX4F7L5hN4XQZP
NBlDjazREGJ0MB8GA1UdIwQYMBaAFPBRY/+WHbd9oGOIKQLU423E/PV1MAoGCCqG
SM49BAMCA0kAMEYCIQDZCVx83ykBPD0HnM2MPJlFp75dws1nOgClmuSX5838pwIh
ANW020EuCRWPD8abXUeoubSDJPameLcAUFzPb4aCCG+a
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIJiDgR3TsYWqqi4j5Pow29M8+9GqLv56yde+98vHgn3roAoGCCqGSM49
AwEHoUQDQgAEzbl9ZaBda0DBPTboXQFPgRyw72wnLlaYjhvRlo1huVlgDJRuKBUV
6v6BmdKPrRB6ArmtmMFHGY+4+mDKGt/RzA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_04_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x1a, 0xb5, 0xca, 0x2d, 0xb6, 0x66, 0x63, 0xaf, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x26, 0x16, 0x01, 0xb0, 0x01,
    0xa0, 0x2c, 0x01, 0x1a, 0x4e, 0x6f, 0x64, 0x65, 0x30, 0x32, 0x5f, 0x30, 0x34, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x65,
    0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x26, 0x17,
    0x02, 0xb0, 0x01, 0xa0, 0x27, 0x11, 0x04, 0x00, 0x02, 0x00, 0xde, 0xde, 0xde, 0xde, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01,
    0x30, 0x09, 0x41, 0x04, 0xcd, 0xb9, 0x7d, 0x65, 0xa0, 0x5d, 0x6b, 0x40, 0xc1, 0x3d, 0x36, 0xe8, 0x5d, 0x01, 0x4f, 0x81, 0x1c,
    0xb0, 0xef, 0x6c, 0x27, 0x2e, 0x56, 0x98, 0x8e, 0x1b, 0xd1, 0x96, 0x8d, 0x61, 0xb9, 0x59, 0x60, 0x0c, 0x94, 0x6e, 0x28, 0x15,
    0x15, 0xea, 0xfe, 0x81, 0x99, 0xd2, 0x8f, 0xad, 0x10, 0x7a, 0x02, 0xb9, 0xad, 0x98, 0xc1, 0x47, 0x19, 0x8f, 0xb8, 0xfa, 0x60,
    0xca, 0x1a, 0xdf, 0xd1, 0xcc, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04, 0x01,
    0x18, 0x30, 0x04, 0x14, 0xf5, 0x17, 0xe0, 0x5e, 0xcb, 0xe6, 0x13, 0x78, 0x5d, 0x06, 0x4f, 0x34, 0x19, 0x43, 0x8d, 0xac, 0xd1,
    0x10, 0x62, 0x74, 0x30, 0x05, 0x14, 0xf0, 0x51, 0x63, 0xff, 0x96, 0x1d, 0xb7, 0x7d, 0xa0, 0x63, 0x88, 0x29, 0x02, 0xd4, 0xe3,
    0x6d, 0xc4, 0xfc, 0xf5, 0x75, 0x18, 0x30, 0x0b, 0x40, 0xd9, 0x09, 0x5c, 0x7c, 0xdf, 0x29, 0x01, 0x3c, 0x3d, 0x07, 0x9c, 0xcd,
    0x8c, 0x3c, 0x99, 0x45, 0xa7, 0xbe, 0x5d, 0xc2, 0xcd, 0x67, 0x3a, 0x00, 0xa5, 0x9a, 0xe4, 0x97, 0xe7, 0xcd, 0xfc, 0xa7, 0xd5,
    0xb4, 0xdb, 0x41, 0x2e, 0x09, 0x15, 0x8f, 0x0f, 0xc6, 0x9b, 0x5d, 0x47, 0xa8, 0xb9, 0xb4, 0x83, 0x24, 0xf6, 0xa6, 0x78, 0xb7,
    0x00, 0x50, 0x5c, 0xcf, 0x6f, 0x86, 0x82, 0x08, 0x6f, 0x9a, 0x18,
};

extern const uint32_t sTestCert_Node02_04_Chip_Len = sizeof(sTestCert_Node02_04_Chip);

extern const uint8_t sTestCert_Node02_04_DER[] = {
    0x30, 0x82, 0x02, 0x5d, 0x30, 0x82, 0x02, 0x02, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x1a, 0xb5, 0xca, 0x2d, 0xb6, 0x66,
    0x63, 0xaf, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x81, 0x9d, 0x31, 0x18, 0x30, 0x16, 0x06, 0x0a, 0x2b,
    0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x06, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42, 0x30, 0x30, 0x31, 0x31, 0x23,
    0x30, 0x21, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1a, 0x4e, 0x6f, 0x64, 0x65, 0x30, 0x32, 0x5f, 0x30, 0x34, 0x20, 0x54, 0x65,
    0x73, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b,
    0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x31, 0x18, 0x30, 0x16, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01,
    0x07, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04,
    0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30, 0x32, 0x30,
    0x30, 0x30, 0x34, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48,
    0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xcd, 0xb9, 0x7d, 0x65, 0xa0, 0x5d, 0x6b, 0x40, 0xc1, 0x3d, 0x36, 0xe8,
    0x5d, 0x01, 0x4f, 0x81, 0x1c, 0xb0, 0xef, 0x6c, 0x27, 0x2e, 0x56, 0x98, 0x8e, 0x1b, 0xd1, 0x96, 0x8d, 0x61, 0xb9, 0x59, 0x60,
    0x0c, 0x94, 0x6e, 0x28, 0x15, 0x15, 0xea, 0xfe, 0x81, 0x99, 0xd2, 0x8f, 0xad, 0x10, 0x7a, 0x02, 0xb9, 0xad, 0x98, 0xc1, 0x47,
    0x19, 0x8f, 0xb8, 0xfa, 0x60, 0xca, 0x1a, 0xdf, 0xd1, 0xcc, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06, 0x03, 0x55,
    0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04,
    0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b,
    0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03,
    0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xf5, 0x17, 0xe0, 0x5e, 0xcb, 0xe6, 0x13, 0x78, 0x5d, 0x06, 0x4f, 0x34, 0x19, 0x43,
    0x8d, 0xac, 0xd1, 0x10, 0x62, 0x74, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xf0, 0x51,
    0x63, 0xff, 0x96, 0x1d, 0xb7, 0x7d, 0xa0, 0x63, 0x88, 0x29, 0x02, 0xd4, 0xe3, 0x6d, 0xc4, 0xfc, 0xf5, 0x75, 0x30, 0x0a, 0x06,
    0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0xd9, 0x09, 0x5c, 0x7c,
    0xdf, 0x29, 0x01, 0x3c, 0x3d, 0x07, 0x9c, 0xcd, 0x8c, 0x3c, 0x99, 0x45, 0xa7, 0xbe, 0x5d, 0xc2, 0xcd, 0x67, 0x3a, 0x00, 0xa5,
    0x9a, 0xe4, 0x97, 0xe7, 0xcd, 0xfc, 0xa7, 0x02, 0x21, 0x00, 0xd5, 0xb4, 0xdb, 0x41, 0x2e, 0x09, 0x15, 0x8f, 0x0f, 0xc6, 0x9b,
    0x5d, 0x47, 0xa8, 0xb9, 0xb4, 0x83, 0x24, 0xf6, 0xa6, 0x78, 0xb7, 0x00, 0x50, 0x5c, 0xcf, 0x6f, 0x86, 0x82, 0x08, 0x6f, 0x9a,
};

extern const uint32_t sTestCert_Node02_04_DER_Len = sizeof(sTestCert_Node02_04_DER);

extern const uint8_t sTestCert_Node02_04_PublicKey[] = {
    0x04, 0xcd, 0xb9, 0x7d, 0x65, 0xa0, 0x5d, 0x6b, 0x40, 0xc1, 0x3d, 0x36, 0xe8, 0x5d, 0x01, 0x4f, 0x81,
    0x1c, 0xb0, 0xef, 0x6c, 0x27, 0x2e, 0x56, 0x98, 0x8e, 0x1b, 0xd1, 0x96, 0x8d, 0x61, 0xb9, 0x59, 0x60,
    0x0c, 0x94, 0x6e, 0x28, 0x15, 0x15, 0xea, 0xfe, 0x81, 0x99, 0xd2, 0x8f, 0xad, 0x10, 0x7a, 0x02, 0xb9,
    0xad, 0x98, 0xc1, 0x47, 0x19, 0x8f, 0xb8, 0xfa, 0x60, 0xca, 0x1a, 0xdf, 0xd1, 0xcc,
};

extern const uint8_t sTestCert_Node02_04_PublicKey_Len = sizeof(sTestCert_Node02_04_PublicKey);

extern const uint8_t sTestCert_Node02_04_PrivateKey[] = {
    0x98, 0x83, 0x81, 0x1d, 0xd3, 0xb1, 0x85, 0xaa, 0xaa, 0x2e, 0x23, 0xe4, 0xfa, 0x30, 0xdb, 0xd3,
    0x3c, 0xfb, 0xd1, 0xaa, 0x2e, 0xfe, 0x7a, 0xc9, 0xd7, 0xbe, 0xf7, 0xcb, 0xc7, 0x82, 0x7d, 0xeb,
};

extern const uint8_t sTestCert_Node02_04_PrivateKey_Len = sizeof(sTestCert_Node02_04_PrivateKey);

extern const uint8_t sTestCert_Node02_04_SubjectKeyId[] = {
    0xF5, 0x17, 0xE0, 0x5E, 0xCB, 0xE6, 0x13, 0x78, 0x5D, 0x06, 0x4F, 0x34, 0x19, 0x43, 0x8D, 0xAC, 0xD1, 0x10, 0x62, 0x74,
};

extern const uint8_t sTestCert_Node02_04_SubjectKeyId_Len = sizeof(sTestCert_Node02_04_SubjectKeyId);

/**************  Test Node02_05 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 4558361000579790734 (0x3f428d2dc58d778e)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.6 = A001B001, CN = Node02_04 Test Certificate, 1.3.6.1.4.1.37244.1.5 =
FAB000000000001D, 1.3.6.1.4.1.37244.1.7 = A001B002, 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020005 Subject Public Key Info: Public Key
Algorithm: id-ecPublicKey Public-Key: (256 bit) pub: 04:08:7b:06:61:01:89:91:49:98:3f:7d:29:a5:70:
                    9a:f5:d3:e9:90:52:a4:3d:69:54:0d:07:db:e0:a2:
                    ad:9d:5c:a8:b7:e7:c8:aa:8c:d4:09:07:38:56:23:
                    fb:e2:e2:e5:4b:85:e2:db:34:02:94:6f:a4:22:86:
                    63:20:07:9d:cd
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                C5:6C:DE:42:32:3F:75:4D:BE:5A:17:4A:3C:F8:8E:93:49:CD:53:6A
            X509v3 Authority Key Identifier:
                keyid:F0:51:63:FF:96:1D:B7:7D:A0:63:88:29:02:D4:E3:6D:C4:FC:F5:75

            X509v3 Subject Alternative Name:
                email:test@chip.org
    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:4a:87:16:8a:67:bd:b2:b2:3f:27:8b:8f:43:1f:
         b3:2d:b7:09:1a:20:a3:79:7d:c6:94:73:ec:cf:b6:a4:29:a9:
         02:20:18:07:96:6b:2c:2d:96:af:72:5c:9d:43:68:09:64:a1:
         dc:93:d2:a4:d1:2d:5a:d4:18:39:8d:c8:81:b2:7e:c7

-----BEGIN CERTIFICATE-----
MIICdTCCAhygAwIBAgIIP0KNLcWNd44wCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowgZ0xGDAW
BgorBgEEAYKifAEGDAhBMDAxQjAwMTEjMCEGA1UEAwwaTm9kZTAyXzA0IFRlc3Qg
Q2VydGlmaWNhdGUxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAwMDAwMDAwMDFEMRgw
FgYKKwYBBAGConwBBwwIQTAwMUIwMDIxIDAeBgorBgEEAYKifAEBDBBERURFREVE
RTAwMDIwMDA1MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAECHsGYQGJkUmYP30p
pXCa9dPpkFKkPWlUDQfb4KKtnVyot+fIqozUCQc4ViP74uLlS4Xi2zQClG+kIoZj
IAedzaOBnTCBmjAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIFoDAgBgNVHSUB
Af8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFMVs3kIyP3VNvloX
Sjz4jpNJzVNqMB8GA1UdIwQYMBaAFPBRY/+WHbd9oGOIKQLU423E/PV1MBgGA1Ud
EQQRMA+BDXRlc3RAY2hpcC5vcmcwCgYIKoZIzj0EAwIDRwAwRAIgSocWime9srI/
J4uPQx+zLbcJGiCjeX3GlHPsz7akKakCIBgHlmssLZavclydQ2gJZKHck9Kk0S1a
1Bg5jciBsn7H
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIKoHeN3dxDeNYX7tPzCIC88D1YHU+MNWMtdaoXoC1mCPoAoGCCqGSM49
AwEHoUQDQgAECHsGYQGJkUmYP30ppXCa9dPpkFKkPWlUDQfb4KKtnVyot+fIqozU
CQc4ViP74uLlS4Xi2zQClG+kIoZjIAedzQ==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_05_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x3f, 0x42, 0x8d, 0x2d, 0xc5, 0x8d, 0x77, 0x8e, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x26, 0x16, 0x01, 0xb0, 0x01,
    0xa0, 0x2c, 0x01, 0x1a, 0x4e, 0x6f, 0x64, 0x65, 0x30, 0x32, 0x5f, 0x30, 0x34, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x65,
    0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x26, 0x17,
    0x02, 0xb0, 0x01, 0xa0, 0x27, 0x11, 0x05, 0x00, 0x02, 0x00, 0xde, 0xde, 0xde, 0xde, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01,
    0x30, 0x09, 0x41, 0x04, 0x08, 0x7b, 0x06, 0x61, 0x01, 0x89, 0x91, 0x49, 0x98, 0x3f, 0x7d, 0x29, 0xa5, 0x70, 0x9a, 0xf5, 0xd3,
    0xe9, 0x90, 0x52, 0xa4, 0x3d, 0x69, 0x54, 0x0d, 0x07, 0xdb, 0xe0, 0xa2, 0xad, 0x9d, 0x5c, 0xa8, 0xb7, 0xe7, 0xc8, 0xaa, 0x8c,
    0xd4, 0x09, 0x07, 0x38, 0x56, 0x23, 0xfb, 0xe2, 0xe2, 0xe5, 0x4b, 0x85, 0xe2, 0xdb, 0x34, 0x02, 0x94, 0x6f, 0xa4, 0x22, 0x86,
    0x63, 0x20, 0x07, 0x9d, 0xcd, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04, 0x01,
    0x18, 0x30, 0x04, 0x14, 0xc5, 0x6c, 0xde, 0x42, 0x32, 0x3f, 0x75, 0x4d, 0xbe, 0x5a, 0x17, 0x4a, 0x3c, 0xf8, 0x8e, 0x93, 0x49,
    0xcd, 0x53, 0x6a, 0x30, 0x05, 0x14, 0xf0, 0x51, 0x63, 0xff, 0x96, 0x1d, 0xb7, 0x7d, 0xa0, 0x63, 0x88, 0x29, 0x02, 0xd4, 0xe3,
    0x6d, 0xc4, 0xfc, 0xf5, 0x75, 0x30, 0x06, 0x1a, 0x30, 0x18, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x11, 0x30, 0x0f, 0x81, 0x0d,
    0x74, 0x65, 0x73, 0x74, 0x40, 0x63, 0x68, 0x69, 0x70, 0x2e, 0x6f, 0x72, 0x67, 0x18, 0x30, 0x0b, 0x40, 0x4a, 0x87, 0x16, 0x8a,
    0x67, 0xbd, 0xb2, 0xb2, 0x3f, 0x27, 0x8b, 0x8f, 0x43, 0x1f, 0xb3, 0x2d, 0xb7, 0x09, 0x1a, 0x20, 0xa3, 0x79, 0x7d, 0xc6, 0x94,
    0x73, 0xec, 0xcf, 0xb6, 0xa4, 0x29, 0xa9, 0x18, 0x07, 0x96, 0x6b, 0x2c, 0x2d, 0x96, 0xaf, 0x72, 0x5c, 0x9d, 0x43, 0x68, 0x09,
    0x64, 0xa1, 0xdc, 0x93, 0xd2, 0xa4, 0xd1, 0x2d, 0x5a, 0xd4, 0x18, 0x39, 0x8d, 0xc8, 0x81, 0xb2, 0x7e, 0xc7, 0x18,
};

extern const uint32_t sTestCert_Node02_05_Chip_Len = sizeof(sTestCert_Node02_05_Chip);

extern const uint8_t sTestCert_Node02_05_DER[] = {
    0x30, 0x82, 0x02, 0x75, 0x30, 0x82, 0x02, 0x1c, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x3f, 0x42, 0x8d, 0x2d, 0xc5, 0x8d,
    0x77, 0x8e, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x81, 0x9d, 0x31, 0x18, 0x30, 0x16, 0x06, 0x0a, 0x2b,
    0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x06, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42, 0x30, 0x30, 0x31, 0x31, 0x23,
    0x30, 0x21, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1a, 0x4e, 0x6f, 0x64, 0x65, 0x30, 0x32, 0x5f, 0x30, 0x34, 0x20, 0x54, 0x65,
    0x73, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b,
    0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x31, 0x18, 0x30, 0x16, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01,
    0x07, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04,
    0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30, 0x32, 0x30,
    0x30, 0x30, 0x35, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48,
    0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x08, 0x7b, 0x06, 0x61, 0x01, 0x89, 0x91, 0x49, 0x98, 0x3f, 0x7d, 0x29,
    0xa5, 0x70, 0x9a, 0xf5, 0xd3, 0xe9, 0x90, 0x52, 0xa4, 0x3d, 0x69, 0x54, 0x0d, 0x07, 0xdb, 0xe0, 0xa2, 0xad, 0x9d, 0x5c, 0xa8,
    0xb7, 0xe7, 0xc8, 0xaa, 0x8c, 0xd4, 0x09, 0x07, 0x38, 0x56, 0x23, 0xfb, 0xe2, 0xe2, 0xe5, 0x4b, 0x85, 0xe2, 0xdb, 0x34, 0x02,
    0x94, 0x6f, 0xa4, 0x22, 0x86, 0x63, 0x20, 0x07, 0x9d, 0xcd, 0xa3, 0x81, 0x9d, 0x30, 0x81, 0x9a, 0x30, 0x0c, 0x06, 0x03, 0x55,
    0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04,
    0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b,
    0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03,
    0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xc5, 0x6c, 0xde, 0x42, 0x32, 0x3f, 0x75, 0x4d, 0xbe, 0x5a, 0x17, 0x4a, 0x3c, 0xf8,
    0x8e, 0x93, 0x49, 0xcd, 0x53, 0x6a, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xf0, 0x51,
    0x63, 0xff, 0x96, 0x1d, 0xb7, 0x7d, 0xa0, 0x63, 0x88, 0x29, 0x02, 0xd4, 0xe3, 0x6d, 0xc4, 0xfc, 0xf5, 0x75, 0x30, 0x18, 0x06,
    0x03, 0x55, 0x1d, 0x11, 0x04, 0x11, 0x30, 0x0f, 0x81, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x40, 0x63, 0x68, 0x69, 0x70, 0x2e, 0x6f,
    0x72, 0x67, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20,
    0x4a, 0x87, 0x16, 0x8a, 0x67, 0xbd, 0xb2, 0xb2, 0x3f, 0x27, 0x8b, 0x8f, 0x43, 0x1f, 0xb3, 0x2d, 0xb7, 0x09, 0x1a, 0x20, 0xa3,
    0x79, 0x7d, 0xc6, 0x94, 0x73, 0xec, 0xcf, 0xb6, 0xa4, 0x29, 0xa9, 0x02, 0x20, 0x18, 0x07, 0x96, 0x6b, 0x2c, 0x2d, 0x96, 0xaf,
    0x72, 0x5c, 0x9d, 0x43, 0x68, 0x09, 0x64, 0xa1, 0xdc, 0x93, 0xd2, 0xa4, 0xd1, 0x2d, 0x5a, 0xd4, 0x18, 0x39, 0x8d, 0xc8, 0x81,
    0xb2, 0x7e, 0xc7,
};

extern const uint32_t sTestCert_Node02_05_DER_Len = sizeof(sTestCert_Node02_05_DER);

extern const uint8_t sTestCert_Node02_05_PublicKey[] = {
    0x04, 0x08, 0x7b, 0x06, 0x61, 0x01, 0x89, 0x91, 0x49, 0x98, 0x3f, 0x7d, 0x29, 0xa5, 0x70, 0x9a, 0xf5,
    0xd3, 0xe9, 0x90, 0x52, 0xa4, 0x3d, 0x69, 0x54, 0x0d, 0x07, 0xdb, 0xe0, 0xa2, 0xad, 0x9d, 0x5c, 0xa8,
    0xb7, 0xe7, 0xc8, 0xaa, 0x8c, 0xd4, 0x09, 0x07, 0x38, 0x56, 0x23, 0xfb, 0xe2, 0xe2, 0xe5, 0x4b, 0x85,
    0xe2, 0xdb, 0x34, 0x02, 0x94, 0x6f, 0xa4, 0x22, 0x86, 0x63, 0x20, 0x07, 0x9d, 0xcd,
};

extern const uint8_t sTestCert_Node02_05_PublicKey_Len = sizeof(sTestCert_Node02_05_PublicKey);

extern const uint8_t sTestCert_Node02_05_PrivateKey[] = {
    0xaa, 0x07, 0x78, 0xdd, 0xdd, 0xc4, 0x37, 0x8d, 0x61, 0x7e, 0xed, 0x3f, 0x30, 0x88, 0x0b, 0xcf,
    0x03, 0xd5, 0x81, 0xd4, 0xf8, 0xc3, 0x56, 0x32, 0xd7, 0x5a, 0xa1, 0x7a, 0x02, 0xd6, 0x60, 0x8f,
};

extern const uint8_t sTestCert_Node02_05_PrivateKey_Len = sizeof(sTestCert_Node02_05_PrivateKey);

extern const uint8_t sTestCert_Node02_05_SubjectKeyId[] = {
    0xC5, 0x6C, 0xDE, 0x42, 0x32, 0x3F, 0x75, 0x4D, 0xBE, 0x5A, 0x17, 0x4A, 0x3C, 0xF8, 0x8E, 0x93, 0x49, 0xCD, 0x53, 0x6A,
};

extern const uint8_t sTestCert_Node02_05_SubjectKeyId_Len = sizeof(sTestCert_Node02_05_SubjectKeyId);

/**************  Test Node02_06 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 3431468261048686172 (0x2f9f0633e5d5965c)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020006, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:9f:74:66:3c:72:0f:d2:e7:73:b9:9e:1a:fa:9e:
                    6b:15:0c:a3:2b:bc:ff:90:1b:2f:a7:b7:0d:a8:3a:
                    81:3f:85:71:62:00:4c:1d:de:48:cb:70:38:02:3c:
                    61:e0:f7:9e:aa:40:5d:15:b1:5c:d5:ec:41:3b:7b:
                    c3:1d:dd:3f:41
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                41:3E:5A:D0:62:EE:82:E7:1B:E9:81:AF:2C:AB:35:65:01:2F:4D:74
            X509v3 Authority Key Identifier:
                keyid:F0:51:63:FF:96:1D:B7:7D:A0:63:88:29:02:D4:E3:6D:C4:FC:F5:75

            X509v3 Subject Alternative Name:
                email:test@chip.org
            Authority Information Access:
                OCSP - URI:test

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:78:3c:ca:b4:e5:e0:fd:d8:9e:f3:5c:11:fd:da:
         66:27:1e:53:12:ad:50:3f:61:ef:8c:f4:79:42:ae:8c:f0:de:
         02:21:00:c1:60:4e:f2:fb:35:1c:26:92:73:76:4c:3f:38:bf:
         3a:50:47:5e:64:b0:37:42:fd:47:c0:17:e7:8b:00:2c:93

-----BEGIN CERTIFICATE-----
MIICPjCCAeSgAwIBAgIIL58GM+XVllwwCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQEMEERFREVERURFMDAwMjAwMDYxIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEn3RmPHIP
0udzuZ4a+p5rFQyjK7z/kBsvp7cNqDqBP4VxYgBMHd5Iy3A4Ajxh4PeeqkBdFbFc
1exBO3vDHd0/QaOBvzCBvDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIFoDAg
BgNVHSUBAf8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFEE+WtBi
7oLnG+mBryyrNWUBL010MB8GA1UdIwQYMBaAFPBRY/+WHbd9oGOIKQLU423E/PV1
MBgGA1UdEQQRMA+BDXRlc3RAY2hpcC5vcmcwIAYIKwYBBQUHAQEEFDASMBAGCCsG
AQUFBzABhgR0ZXN0MAoGCCqGSM49BAMCA0gAMEUCIHg8yrTl4P3YnvNcEf3aZice
UxKtUD9h74z0eUKujPDeAiEAwWBO8vs1HCaSc3ZMPzi/OlBHXmSwN0L9R8AX54sA
LJM=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIAw8IsI3ndQJ11XV5Jkm38d9lHrS9de0ul7v5pvU6+cLoAoGCCqGSM49
AwEHoUQDQgAEn3RmPHIP0udzuZ4a+p5rFQyjK7z/kBsvp7cNqDqBP4VxYgBMHd5I
y3A4Ajxh4PeeqkBdFbFc1exBO3vDHd0/QQ==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_06_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x2f, 0x9f, 0x06, 0x33, 0xe5, 0xd5, 0x96, 0x5c, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x11, 0x06, 0x00, 0x02,
    0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08,
    0x01, 0x30, 0x09, 0x41, 0x04, 0x9f, 0x74, 0x66, 0x3c, 0x72, 0x0f, 0xd2, 0xe7, 0x73, 0xb9, 0x9e, 0x1a, 0xfa, 0x9e, 0x6b, 0x15,
    0x0c, 0xa3, 0x2b, 0xbc, 0xff, 0x90, 0x1b, 0x2f, 0xa7, 0xb7, 0x0d, 0xa8, 0x3a, 0x81, 0x3f, 0x85, 0x71, 0x62, 0x00, 0x4c, 0x1d,
    0xde, 0x48, 0xcb, 0x70, 0x38, 0x02, 0x3c, 0x61, 0xe0, 0xf7, 0x9e, 0xaa, 0x40, 0x5d, 0x15, 0xb1, 0x5c, 0xd5, 0xec, 0x41, 0x3b,
    0x7b, 0xc3, 0x1d, 0xdd, 0x3f, 0x41, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04,
    0x01, 0x18, 0x30, 0x04, 0x14, 0x41, 0x3e, 0x5a, 0xd0, 0x62, 0xee, 0x82, 0xe7, 0x1b, 0xe9, 0x81, 0xaf, 0x2c, 0xab, 0x35, 0x65,
    0x01, 0x2f, 0x4d, 0x74, 0x30, 0x05, 0x14, 0xf0, 0x51, 0x63, 0xff, 0x96, 0x1d, 0xb7, 0x7d, 0xa0, 0x63, 0x88, 0x29, 0x02, 0xd4,
    0xe3, 0x6d, 0xc4, 0xfc, 0xf5, 0x75, 0x30, 0x06, 0x1a, 0x30, 0x18, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x11, 0x30, 0x0f, 0x81,
    0x0d, 0x74, 0x65, 0x73, 0x74, 0x40, 0x63, 0x68, 0x69, 0x70, 0x2e, 0x6f, 0x72, 0x67, 0x30, 0x06, 0x22, 0x30, 0x20, 0x06, 0x08,
    0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x14, 0x30, 0x12, 0x30, 0x10, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05,
    0x07, 0x30, 0x01, 0x86, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x30, 0x0b, 0x40, 0x78, 0x3c, 0xca, 0xb4, 0xe5, 0xe0, 0xfd, 0xd8,
    0x9e, 0xf3, 0x5c, 0x11, 0xfd, 0xda, 0x66, 0x27, 0x1e, 0x53, 0x12, 0xad, 0x50, 0x3f, 0x61, 0xef, 0x8c, 0xf4, 0x79, 0x42, 0xae,
    0x8c, 0xf0, 0xde, 0xc1, 0x60, 0x4e, 0xf2, 0xfb, 0x35, 0x1c, 0x26, 0x92, 0x73, 0x76, 0x4c, 0x3f, 0x38, 0xbf, 0x3a, 0x50, 0x47,
    0x5e, 0x64, 0xb0, 0x37, 0x42, 0xfd, 0x47, 0xc0, 0x17, 0xe7, 0x8b, 0x00, 0x2c, 0x93, 0x18,
};

extern const uint32_t sTestCert_Node02_06_Chip_Len = sizeof(sTestCert_Node02_06_Chip);

extern const uint8_t sTestCert_Node02_06_DER[] = {
    0x30, 0x82, 0x02, 0x3e, 0x30, 0x82, 0x01, 0xe4, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x2f, 0x9f, 0x06, 0x33, 0xe5, 0xd5,
    0x96, 0x5c, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30,
    0x32, 0x30, 0x30, 0x30, 0x36, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0x9f, 0x74, 0x66, 0x3c, 0x72, 0x0f, 0xd2, 0xe7, 0x73, 0xb9, 0x9e, 0x1a, 0xfa, 0x9e, 0x6b, 0x15, 0x0c, 0xa3,
    0x2b, 0xbc, 0xff, 0x90, 0x1b, 0x2f, 0xa7, 0xb7, 0x0d, 0xa8, 0x3a, 0x81, 0x3f, 0x85, 0x71, 0x62, 0x00, 0x4c, 0x1d, 0xde, 0x48,
    0xcb, 0x70, 0x38, 0x02, 0x3c, 0x61, 0xe0, 0xf7, 0x9e, 0xaa, 0x40, 0x5d, 0x15, 0xb1, 0x5c, 0xd5, 0xec, 0x41, 0x3b, 0x7b, 0xc3,
    0x1d, 0xdd, 0x3f, 0x41, 0xa3, 0x81, 0xbf, 0x30, 0x81, 0xbc, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04,
    0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20,
    0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03,
    0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04,
    0x14, 0x41, 0x3e, 0x5a, 0xd0, 0x62, 0xee, 0x82, 0xe7, 0x1b, 0xe9, 0x81, 0xaf, 0x2c, 0xab, 0x35, 0x65, 0x01, 0x2f, 0x4d, 0x74,
    0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xf0, 0x51, 0x63, 0xff, 0x96, 0x1d, 0xb7, 0x7d,
    0xa0, 0x63, 0x88, 0x29, 0x02, 0xd4, 0xe3, 0x6d, 0xc4, 0xfc, 0xf5, 0x75, 0x30, 0x18, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x11,
    0x30, 0x0f, 0x81, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x40, 0x63, 0x68, 0x69, 0x70, 0x2e, 0x6f, 0x72, 0x67, 0x30, 0x20, 0x06, 0x08,
    0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x14, 0x30, 0x12, 0x30, 0x10, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05,
    0x07, 0x30, 0x01, 0x86, 0x04, 0x74, 0x65, 0x73, 0x74, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02,
    0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x78, 0x3c, 0xca, 0xb4, 0xe5, 0xe0, 0xfd, 0xd8, 0x9e, 0xf3, 0x5c, 0x11, 0xfd, 0xda,
    0x66, 0x27, 0x1e, 0x53, 0x12, 0xad, 0x50, 0x3f, 0x61, 0xef, 0x8c, 0xf4, 0x79, 0x42, 0xae, 0x8c, 0xf0, 0xde, 0x02, 0x21, 0x00,
    0xc1, 0x60, 0x4e, 0xf2, 0xfb, 0x35, 0x1c, 0x26, 0x92, 0x73, 0x76, 0x4c, 0x3f, 0x38, 0xbf, 0x3a, 0x50, 0x47, 0x5e, 0x64, 0xb0,
    0x37, 0x42, 0xfd, 0x47, 0xc0, 0x17, 0xe7, 0x8b, 0x00, 0x2c, 0x93,
};

extern const uint32_t sTestCert_Node02_06_DER_Len = sizeof(sTestCert_Node02_06_DER);

extern const uint8_t sTestCert_Node02_06_PublicKey[] = {
    0x04, 0x9f, 0x74, 0x66, 0x3c, 0x72, 0x0f, 0xd2, 0xe7, 0x73, 0xb9, 0x9e, 0x1a, 0xfa, 0x9e, 0x6b, 0x15,
    0x0c, 0xa3, 0x2b, 0xbc, 0xff, 0x90, 0x1b, 0x2f, 0xa7, 0xb7, 0x0d, 0xa8, 0x3a, 0x81, 0x3f, 0x85, 0x71,
    0x62, 0x00, 0x4c, 0x1d, 0xde, 0x48, 0xcb, 0x70, 0x38, 0x02, 0x3c, 0x61, 0xe0, 0xf7, 0x9e, 0xaa, 0x40,
    0x5d, 0x15, 0xb1, 0x5c, 0xd5, 0xec, 0x41, 0x3b, 0x7b, 0xc3, 0x1d, 0xdd, 0x3f, 0x41,
};

extern const uint8_t sTestCert_Node02_06_PublicKey_Len = sizeof(sTestCert_Node02_06_PublicKey);

extern const uint8_t sTestCert_Node02_06_PrivateKey[] = {
    0x0c, 0x3c, 0x22, 0xc2, 0x37, 0x9d, 0xd4, 0x09, 0xd7, 0x55, 0xd5, 0xe4, 0x99, 0x26, 0xdf, 0xc7,
    0x7d, 0x94, 0x7a, 0xd2, 0xf5, 0xd7, 0xb4, 0xba, 0x5e, 0xef, 0xe6, 0x9b, 0xd4, 0xeb, 0xe7, 0x0b,
};

extern const uint8_t sTestCert_Node02_06_PrivateKey_Len = sizeof(sTestCert_Node02_06_PrivateKey);

extern const uint8_t sTestCert_Node02_06_SubjectKeyId[] = {
    0x41, 0x3E, 0x5A, 0xD0, 0x62, 0xEE, 0x82, 0xE7, 0x1B, 0xE9, 0x81, 0xAF, 0x2C, 0xAB, 0x35, 0x65, 0x01, 0x2F, 0x4D, 0x74,
};

extern const uint8_t sTestCert_Node02_06_SubjectKeyId_Len = sizeof(sTestCert_Node02_06_SubjectKeyId);

/**************  Test Node02_07 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 5355223386597474142 (0x4a51934c0301bf5e)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020007, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:16:42:10:44:cd:b1:9a:21:21:86:c6:f8:cd:2c:
                    c4:d2:7a:2d:8f:0b:c4:b2:10:6d:0a:7f:71:17:5a:
                    9d:ed:e8:d2:e5:5d:d9:75:e3:d3:12:06:b4:c5:0e:
                    8e:60:e5:c8:ec:8a:7a:65:e5:c6:fb:bc:a3:e9:3e:
                    85:8e:3d:5e:ab
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                E8:28:EC:03:81:B5:DC:67:84:43:56:1F:32:C6:CE:20:48:2E:8B:5A
            X509v3 Authority Key Identifier:
                keyid:F0:51:63:FF:96:1D:B7:7D:A0:63:88:29:02:D4:E3:6D:C4:FC:F5:75

            X509v3 Subject Alternative Name: critical
                email:test@chip.org
            Authority Information Access:
                OCSP - URI:test

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:36:93:1e:d8:b4:bc:26:74:4a:4f:e3:d2:91:02:
         80:c2:36:bc:0d:3d:dd:b4:8a:6c:78:64:d6:2a:59:71:19:96:
         02:21:00:dd:81:85:73:82:0e:c6:91:ea:7c:34:d7:c5:c7:c3:
         83:5f:96:09:4b:c8:3a:c5:2c:c1:af:ad:55:5e:5f:63:ef

-----BEGIN CERTIFICATE-----
MIICQTCCAeegAwIBAgIISlGTTAMBv14wCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQEMEERFREVERURFMDAwMjAwMDcxIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEFkIQRM2x
miEhhsb4zSzE0notjwvEshBtCn9xF1qd7ejS5V3ZdePTEga0xQ6OYOXI7Ip6ZeXG
+7yj6T6Fjj1eq6OBwjCBvzAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIFoDAg
BgNVHSUBAf8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFOgo7AOB
tdxnhENWHzLGziBILotaMB8GA1UdIwQYMBaAFPBRY/+WHbd9oGOIKQLU423E/PV1
MBsGA1UdEQEB/wQRMA+BDXRlc3RAY2hpcC5vcmcwIAYIKwYBBQUHAQEEFDASMBAG
CCsGAQUFBzABhgR0ZXN0MAoGCCqGSM49BAMCA0gAMEUCIDaTHti0vCZ0Sk/j0pEC
gMI2vA093bSKbHhk1ipZcRmWAiEA3YGFc4IOxpHqfDTXxcfDg1+WCUvIOsUswa+t
VV5fY+8=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIPUmb8iSt2avag+3o6RptKtV1BZfCEtjV3uGOIKnUthLoAoGCCqGSM49
AwEHoUQDQgAEFkIQRM2xmiEhhsb4zSzE0notjwvEshBtCn9xF1qd7ejS5V3ZdePT
Ega0xQ6OYOXI7Ip6ZeXG+7yj6T6Fjj1eqw==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_07_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x4a, 0x51, 0x93, 0x4c, 0x03, 0x01, 0xbf, 0x5e, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0xef, 0x17, 0x1b, 0x27, 0x26, 0x05, 0x6e, 0xb5, 0xb9, 0x4c, 0x37, 0x06, 0x27, 0x11, 0x07, 0x00, 0x02,
    0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08,
    0x01, 0x30, 0x09, 0x41, 0x04, 0x16, 0x42, 0x10, 0x44, 0xcd, 0xb1, 0x9a, 0x21, 0x21, 0x86, 0xc6, 0xf8, 0xcd, 0x2c, 0xc4, 0xd2,
    0x7a, 0x2d, 0x8f, 0x0b, 0xc4, 0xb2, 0x10, 0x6d, 0x0a, 0x7f, 0x71, 0x17, 0x5a, 0x9d, 0xed, 0xe8, 0xd2, 0xe5, 0x5d, 0xd9, 0x75,
    0xe3, 0xd3, 0x12, 0x06, 0xb4, 0xc5, 0x0e, 0x8e, 0x60, 0xe5, 0xc8, 0xec, 0x8a, 0x7a, 0x65, 0xe5, 0xc6, 0xfb, 0xbc, 0xa3, 0xe9,
    0x3e, 0x85, 0x8e, 0x3d, 0x5e, 0xab, 0x37, 0x0a, 0x35, 0x01, 0x28, 0x01, 0x18, 0x24, 0x02, 0x05, 0x36, 0x03, 0x04, 0x02, 0x04,
    0x01, 0x18, 0x30, 0x04, 0x14, 0xe8, 0x28, 0xec, 0x03, 0x81, 0xb5, 0xdc, 0x67, 0x84, 0x43, 0x56, 0x1f, 0x32, 0xc6, 0xce, 0x20,
    0x48, 0x2e, 0x8b, 0x5a, 0x30, 0x05, 0x14, 0xf0, 0x51, 0x63, 0xff, 0x96, 0x1d, 0xb7, 0x7d, 0xa0, 0x63, 0x88, 0x29, 0x02, 0xd4,
    0xe3, 0x6d, 0xc4, 0xfc, 0xf5, 0x75, 0x30, 0x06, 0x1d, 0x30, 0x1b, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x01, 0x01, 0xff, 0x04, 0x11,
    0x30, 0x0f, 0x81, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x40, 0x63, 0x68, 0x69, 0x70, 0x2e, 0x6f, 0x72, 0x67, 0x30, 0x06, 0x22, 0x30,
    0x20, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x14, 0x30, 0x12, 0x30, 0x10, 0x06, 0x08, 0x2b, 0x06,
    0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x86, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x30, 0x0b, 0x40, 0x36, 0x93, 0x1e, 0xd8, 0xb4,
    0xbc, 0x26, 0x74, 0x4a, 0x4f, 0xe3, 0xd2, 0x91, 0x02, 0x80, 0xc2, 0x36, 0xbc, 0x0d, 0x3d, 0xdd, 0xb4, 0x8a, 0x6c, 0x78, 0x64,
    0xd6, 0x2a, 0x59, 0x71, 0x19, 0x96, 0xdd, 0x81, 0x85, 0x73, 0x82, 0x0e, 0xc6, 0x91, 0xea, 0x7c, 0x34, 0xd7, 0xc5, 0xc7, 0xc3,
    0x83, 0x5f, 0x96, 0x09, 0x4b, 0xc8, 0x3a, 0xc5, 0x2c, 0xc1, 0xaf, 0xad, 0x55, 0x5e, 0x5f, 0x63, 0xef, 0x18,
};

extern const uint32_t sTestCert_Node02_07_Chip_Len = sizeof(sTestCert_Node02_07_Chip);

extern const uint8_t sTestCert_Node02_07_DER[] = {
    0x30, 0x82, 0x02, 0x41, 0x30, 0x82, 0x01, 0xe7, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x4a, 0x51, 0x93, 0x4c, 0x03, 0x01,
    0xbf, 0x5e, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30,
    0x32, 0x30, 0x30, 0x30, 0x37, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0x16, 0x42, 0x10, 0x44, 0xcd, 0xb1, 0x9a, 0x21, 0x21, 0x86, 0xc6, 0xf8, 0xcd, 0x2c, 0xc4, 0xd2, 0x7a, 0x2d,
    0x8f, 0x0b, 0xc4, 0xb2, 0x10, 0x6d, 0x0a, 0x7f, 0x71, 0x17, 0x5a, 0x9d, 0xed, 0xe8, 0xd2, 0xe5, 0x5d, 0xd9, 0x75, 0xe3, 0xd3,
    0x12, 0x06, 0xb4, 0xc5, 0x0e, 0x8e, 0x60, 0xe5, 0xc8, 0xec, 0x8a, 0x7a, 0x65, 0xe5, 0xc6, 0xfb, 0xbc, 0xa3, 0xe9, 0x3e, 0x85,
    0x8e, 0x3d, 0x5e, 0xab, 0xa3, 0x81, 0xc2, 0x30, 0x81, 0xbf, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04,
    0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20,
    0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03,
    0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04,
    0x14, 0xe8, 0x28, 0xec, 0x03, 0x81, 0xb5, 0xdc, 0x67, 0x84, 0x43, 0x56, 0x1f, 0x32, 0xc6, 0xce, 0x20, 0x48, 0x2e, 0x8b, 0x5a,
    0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xf0, 0x51, 0x63, 0xff, 0x96, 0x1d, 0xb7, 0x7d,
    0xa0, 0x63, 0x88, 0x29, 0x02, 0xd4, 0xe3, 0x6d, 0xc4, 0xfc, 0xf5, 0x75, 0x30, 0x1b, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x01, 0x01,
    0xff, 0x04, 0x11, 0x30, 0x0f, 0x81, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x40, 0x63, 0x68, 0x69, 0x70, 0x2e, 0x6f, 0x72, 0x67, 0x30,
    0x20, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x14, 0x30, 0x12, 0x30, 0x10, 0x06, 0x08, 0x2b, 0x06,
    0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x86, 0x04, 0x74, 0x65, 0x73, 0x74, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,
    0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x36, 0x93, 0x1e, 0xd8, 0xb4, 0xbc, 0x26, 0x74, 0x4a, 0x4f, 0xe3,
    0xd2, 0x91, 0x02, 0x80, 0xc2, 0x36, 0xbc, 0x0d, 0x3d, 0xdd, 0xb4, 0x8a, 0x6c, 0x78, 0x64, 0xd6, 0x2a, 0x59, 0x71, 0x19, 0x96,
    0x02, 0x21, 0x00, 0xdd, 0x81, 0x85, 0x73, 0x82, 0x0e, 0xc6, 0x91, 0xea, 0x7c, 0x34, 0xd7, 0xc5, 0xc7, 0xc3, 0x83, 0x5f, 0x96,
    0x09, 0x4b, 0xc8, 0x3a, 0xc5, 0x2c, 0xc1, 0xaf, 0xad, 0x55, 0x5e, 0x5f, 0x63, 0xef,
};

extern const uint32_t sTestCert_Node02_07_DER_Len = sizeof(sTestCert_Node02_07_DER);

extern const uint8_t sTestCert_Node02_07_PublicKey[] = {
    0x04, 0x16, 0x42, 0x10, 0x44, 0xcd, 0xb1, 0x9a, 0x21, 0x21, 0x86, 0xc6, 0xf8, 0xcd, 0x2c, 0xc4, 0xd2,
    0x7a, 0x2d, 0x8f, 0x0b, 0xc4, 0xb2, 0x10, 0x6d, 0x0a, 0x7f, 0x71, 0x17, 0x5a, 0x9d, 0xed, 0xe8, 0xd2,
    0xe5, 0x5d, 0xd9, 0x75, 0xe3, 0xd3, 0x12, 0x06, 0xb4, 0xc5, 0x0e, 0x8e, 0x60, 0xe5, 0xc8, 0xec, 0x8a,
    0x7a, 0x65, 0xe5, 0xc6, 0xfb, 0xbc, 0xa3, 0xe9, 0x3e, 0x85, 0x8e, 0x3d, 0x5e, 0xab,
};

extern const uint8_t sTestCert_Node02_07_PublicKey_Len = sizeof(sTestCert_Node02_07_PublicKey);

extern const uint8_t sTestCert_Node02_07_PrivateKey[] = {
    0xf5, 0x26, 0x6f, 0xc8, 0x92, 0xb7, 0x66, 0xaf, 0x6a, 0x0f, 0xb7, 0xa3, 0xa4, 0x69, 0xb4, 0xab,
    0x55, 0xd4, 0x16, 0x5f, 0x08, 0x4b, 0x63, 0x57, 0x7b, 0x86, 0x38, 0x82, 0xa7, 0x52, 0xd8, 0x4b,
};

extern const uint8_t sTestCert_Node02_07_PrivateKey_Len = sizeof(sTestCert_Node02_07_PrivateKey);

extern const uint8_t sTestCert_Node02_07_SubjectKeyId[] = {
    0xE8, 0x28, 0xEC, 0x03, 0x81, 0xB5, 0xDC, 0x67, 0x84, 0x43, 0x56, 0x1F, 0x32, 0xC6, 0xCE, 0x20, 0x48, 0x2E, 0x8B, 0x5A,
};

extern const uint8_t sTestCert_Node02_07_SubjectKeyId_Len = sizeof(sTestCert_Node02_07_SubjectKeyId);

} // namespace TestCerts
} // namespace chip
