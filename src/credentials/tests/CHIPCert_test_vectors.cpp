/*
 *
 *    Copyright (c) 2020-2021 Project CHIP Authors
 *    Copyright (c) 2019 Google LLC.
 *    Copyright (c) 2016-2017 Nest Labs, Inc.
 *    All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *    @file
 *      This file contains definitions of test certificates used by various unit tests.
 *
 */

#include <credentials/CHIPCert.h>

#include "CHIPCert_test_vectors.h"

namespace chip {
namespace TestCerts {

using namespace chip::Credentials;
using namespace chip::ASN1;

// clang-format off
extern const uint8_t gTestCerts[] = {
    TestCert::kRoot01,
    TestCert::kRoot02,
    TestCert::kICA01,
    TestCert::kICA02,
    TestCert::kICA01_1,
    TestCert::kFWSign01,
    TestCert::kNode01_01,
    TestCert::kNode01_02,
    TestCert::kNode02_01,
    TestCert::kNode02_02,
    TestCert::kNode02_03,
    TestCert::kNode02_04,
};
// clang-format on

extern const size_t gNumTestCerts = sizeof(gTestCerts) / sizeof(gTestCerts[0]);

CHIP_ERROR GetTestCert(uint8_t certType, BitFlags<TestCertLoadFlags> certLoadFlags, const uint8_t *& certData,
                       uint32_t & certDataLen)
{
    CHIP_ERROR err;
    bool derForm = certLoadFlags.Has(TestCertLoadFlags::kDERForm);

#define SELECT_CERT(NAME)                                                                                                          \
    do                                                                                                                             \
    {                                                                                                                              \
        if (certType == TestCert::k##NAME)                                                                                         \
        {                                                                                                                          \
            if (derForm)                                                                                                           \
            {                                                                                                                      \
                certData    = sTestCert_##NAME##_DER;                                                                              \
                certDataLen = sTestCert_##NAME##_DER_Len;                                                                          \
            }                                                                                                                      \
            else                                                                                                                   \
            {                                                                                                                      \
                certData    = sTestCert_##NAME##_Chip;                                                                             \
                certDataLen = sTestCert_##NAME##_Chip_Len;                                                                         \
            }                                                                                                                      \
            ExitNow(err = CHIP_NO_ERROR);                                                                                          \
        }                                                                                                                          \
    } while (0)

    SELECT_CERT(Root01);
    SELECT_CERT(Root02);
    SELECT_CERT(ICA01);
    SELECT_CERT(ICA02);
    SELECT_CERT(ICA01_1);
    SELECT_CERT(FWSign01);
    SELECT_CERT(Node01_01);
    SELECT_CERT(Node01_02);
    SELECT_CERT(Node02_01);
    SELECT_CERT(Node02_02);
    SELECT_CERT(Node02_03);
    SELECT_CERT(Node02_04);

    err = CHIP_ERROR_CA_CERT_NOT_FOUND;

exit:
    return err;
}

const char * GetTestCertName(uint8_t certType)
{
#define NAME_CERT(NAME)                                                                                                            \
    do                                                                                                                             \
    {                                                                                                                              \
        if (certType == TestCert::k##NAME)                                                                                         \
        {                                                                                                                          \
            return #NAME;                                                                                                          \
        }                                                                                                                          \
    } while (0)

    NAME_CERT(Root01);
    NAME_CERT(Root02);
    NAME_CERT(ICA01);
    NAME_CERT(ICA02);
    NAME_CERT(ICA01_1);
    NAME_CERT(FWSign01);
    NAME_CERT(Node01_01);
    NAME_CERT(Node01_02);
    NAME_CERT(Node02_01);
    NAME_CERT(Node02_02);
    NAME_CERT(Node02_03);
    NAME_CERT(Node02_04);

    return nullptr;
}

CHIP_ERROR LoadTestCert(ChipCertificateSet & certSet, uint8_t certType, BitFlags<TestCertLoadFlags> certLoadFlags,
                        BitFlags<CertDecodeFlags> decodeFlags)
{
    CHIP_ERROR err;
    ChipCertificateData * cert;
    const uint8_t * certData;
    uint32_t certDataLen;

    // Get the requested certificate data.
    err = GetTestCert(certType, certLoadFlags, certData, certDataLen);
    SuccessOrExit(err);

    // Load it into the certificate set.
    err = certSet.LoadCert(certData, certDataLen, decodeFlags);
    SuccessOrExit(err);

    // Get loaded certificate data.
    cert = const_cast<ChipCertificateData *>(certSet.GetLastCert());
    VerifyOrExit(cert != nullptr, err = CHIP_ERROR_INVALID_ARGUMENT);

    // Apply load flags.
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressIsCA))
    {
        cert->mCertFlags.Clear(CertFlags::kIsCA);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressKeyUsage))
    {
        cert->mCertFlags.Clear(CertFlags::kExtPresent_KeyUsage);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressKeyCertSign))
    {
        cert->mKeyUsageFlags.Clear(KeyUsageFlags::kKeyCertSign);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSetPathLenConstZero))
    {
        cert->mCertFlags.Set(CertFlags::kPathLenConstraintPresent);
        cert->mPathLenConstraint = 0;
    }

exit:
    return err;
}

// ------------------------------ TEST CERTIFICATES ----------------------------------------

/**************  Test Root01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 3093625351323779633 (0x2aeec3ddc5cc0231)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:c4:66:13:81:7f:d4:c6:d9:49:87:82:19:3f:0e:
                    2b:1a:6e:50:46:f2:da:85:ef:69:ef:a9:d0:a0:fc:
                    67:c5:79:0d:59:e9:73:12:5e:16:01:d3:9b:a8:5b:
                    1b:9a:f1:b8:37:30:f8:38:94:69:1d:29:7f:3f:f6:
                    b1:cb:70:bd:30
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                FF:29:80:84:48:57:2D:44:C7:3D:40:6B:88:FF:FE:39:12:89:36:95
            X509v3 Authority Key Identifier:
                keyid:FF:29:80:84:48:57:2D:44:C7:3D:40:6B:88:FF:FE:39:12:89:36:95

    Signature Algorithm: ecdsa-with-SHA256
         30:46:02:21:00:c7:35:16:c4:4a:32:fc:5d:61:a6:0b:33:8d:
         f9:7e:66:b7:09:f1:a4:ca:48:fd:6a:08:90:29:d9:c8:78:cd:
         95:02:21:00:e9:8a:3f:3e:2a:55:34:f4:7b:ed:dd:14:82:25:
         91:2e:60:52:7d:28:bf:21:e7:16:4a:38:3d:49:0f:e6:d3:db

-----BEGIN CERTIFICATE-----
MIIBnjCCAUOgAwIBAgIIKu7D3cXMAjEwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBBAwQQ0FDQUNBQ0EwMDAwMDAwMTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABMRmE4F/1MbZSYeCGT8OKxpuUEby2oXvae+p
0KD8Z8V5DVnpcxJeFgHTm6hbG5rxuDcw+DiUaR0pfz/2sctwvTCjYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBT/KYCESFctRMc9
QGuI//45Eok2lTAfBgNVHSMEGDAWgBT/KYCESFctRMc9QGuI//45Eok2lTAKBggq
hkjOPQQDAgNJADBGAiEAxzUWxEoy/F1hpgszjfl+ZrcJ8aTKSP1qCJAp2ch4zZUC
IQDpij8+KlU09Hvt3RSCJZEuYFJ9KL8h5xZKOD1JD+bT2w==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEILTOMieHEgNrOYMYowiaJjz4tcTMGP9lHB0z/h2JCPnPoAoGCCqGSM49
AwEHoUQDQgAExGYTgX/UxtlJh4IZPw4rGm5QRvLahe9p76nQoPxnxXkNWelzEl4W
AdObqFsbmvG4NzD4OJRpHSl/P/axy3C9MA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Root01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x2a, 0xee, 0xc3, 0xdd, 0xc5, 0xcc, 0x02, 0x31, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05,
    0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24, 0x07, 0x01, 0x24,
    0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0xc4, 0x66, 0x13, 0x81, 0x7f, 0xd4, 0xc6, 0xd9, 0x49, 0x87, 0x82, 0x19, 0x3f, 0x0e, 0x2b,
    0x1a, 0x6e, 0x50, 0x46, 0xf2, 0xda, 0x85, 0xef, 0x69, 0xef, 0xa9, 0xd0, 0xa0, 0xfc, 0x67, 0xc5, 0x79, 0x0d, 0x59, 0xe9, 0x73,
    0x12, 0x5e, 0x16, 0x01, 0xd3, 0x9b, 0xa8, 0x5b, 0x1b, 0x9a, 0xf1, 0xb8, 0x37, 0x30, 0xf8, 0x38, 0x94, 0x69, 0x1d, 0x29, 0x7f,
    0x3f, 0xf6, 0xb1, 0xcb, 0x70, 0xbd, 0x30, 0x35, 0x80, 0x29, 0x01, 0x18, 0x24, 0x81, 0x60, 0x30, 0x83, 0x14, 0xff, 0x29, 0x80,
    0x84, 0x48, 0x57, 0x2d, 0x44, 0xc7, 0x3d, 0x40, 0x6b, 0x88, 0xff, 0xfe, 0x39, 0x12, 0x89, 0x36, 0x95, 0x30, 0x84, 0x14, 0xff,
    0x29, 0x80, 0x84, 0x48, 0x57, 0x2d, 0x44, 0xc7, 0x3d, 0x40, 0x6b, 0x88, 0xff, 0xfe, 0x39, 0x12, 0x89, 0x36, 0x95, 0x35, 0x0a,
    0x30, 0x01, 0x21, 0x00, 0xc7, 0x35, 0x16, 0xc4, 0x4a, 0x32, 0xfc, 0x5d, 0x61, 0xa6, 0x0b, 0x33, 0x8d, 0xf9, 0x7e, 0x66, 0xb7,
    0x09, 0xf1, 0xa4, 0xca, 0x48, 0xfd, 0x6a, 0x08, 0x90, 0x29, 0xd9, 0xc8, 0x78, 0xcd, 0x95, 0x30, 0x02, 0x21, 0x00, 0xe9, 0x8a,
    0x3f, 0x3e, 0x2a, 0x55, 0x34, 0xf4, 0x7b, 0xed, 0xdd, 0x14, 0x82, 0x25, 0x91, 0x2e, 0x60, 0x52, 0x7d, 0x28, 0xbf, 0x21, 0xe7,
    0x16, 0x4a, 0x38, 0x3d, 0x49, 0x0f, 0xe6, 0xd3, 0xdb, 0x18, 0x18,
};

extern const uint32_t sTestCert_Root01_Chip_Len = sizeof(sTestCert_Root01_Chip);

extern const uint8_t sTestCert_Root01_DER[] = {
    0x30, 0x82, 0x01, 0x9e, 0x30, 0x82, 0x01, 0x43, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x2a, 0xee, 0xc3, 0xdd, 0xc5, 0xcc,
    0x02, 0x31, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xc4, 0x66,
    0x13, 0x81, 0x7f, 0xd4, 0xc6, 0xd9, 0x49, 0x87, 0x82, 0x19, 0x3f, 0x0e, 0x2b, 0x1a, 0x6e, 0x50, 0x46, 0xf2, 0xda, 0x85, 0xef,
    0x69, 0xef, 0xa9, 0xd0, 0xa0, 0xfc, 0x67, 0xc5, 0x79, 0x0d, 0x59, 0xe9, 0x73, 0x12, 0x5e, 0x16, 0x01, 0xd3, 0x9b, 0xa8, 0x5b,
    0x1b, 0x9a, 0xf1, 0xb8, 0x37, 0x30, 0xf8, 0x38, 0x94, 0x69, 0x1d, 0x29, 0x7f, 0x3f, 0xf6, 0xb1, 0xcb, 0x70, 0xbd, 0x30, 0xa3,
    0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x16, 0x04, 0x14, 0xff, 0x29, 0x80, 0x84, 0x48, 0x57, 0x2d, 0x44, 0xc7, 0x3d, 0x40, 0x6b, 0x88, 0xff, 0xfe, 0x39,
    0x12, 0x89, 0x36, 0x95, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xff, 0x29, 0x80, 0x84,
    0x48, 0x57, 0x2d, 0x44, 0xc7, 0x3d, 0x40, 0x6b, 0x88, 0xff, 0xfe, 0x39, 0x12, 0x89, 0x36, 0x95, 0x30, 0x0a, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0xc7, 0x35, 0x16, 0xc4, 0x4a, 0x32,
    0xfc, 0x5d, 0x61, 0xa6, 0x0b, 0x33, 0x8d, 0xf9, 0x7e, 0x66, 0xb7, 0x09, 0xf1, 0xa4, 0xca, 0x48, 0xfd, 0x6a, 0x08, 0x90, 0x29,
    0xd9, 0xc8, 0x78, 0xcd, 0x95, 0x02, 0x21, 0x00, 0xe9, 0x8a, 0x3f, 0x3e, 0x2a, 0x55, 0x34, 0xf4, 0x7b, 0xed, 0xdd, 0x14, 0x82,
    0x25, 0x91, 0x2e, 0x60, 0x52, 0x7d, 0x28, 0xbf, 0x21, 0xe7, 0x16, 0x4a, 0x38, 0x3d, 0x49, 0x0f, 0xe6, 0xd3, 0xdb,
};

extern const uint32_t sTestCert_Root01_DER_Len = sizeof(sTestCert_Root01_DER);

extern const uint8_t sTestCert_Root01_PublicKey[] = {
    0x04, 0xc4, 0x66, 0x13, 0x81, 0x7f, 0xd4, 0xc6, 0xd9, 0x49, 0x87, 0x82, 0x19, 0x3f, 0x0e, 0x2b, 0x1a,
    0x6e, 0x50, 0x46, 0xf2, 0xda, 0x85, 0xef, 0x69, 0xef, 0xa9, 0xd0, 0xa0, 0xfc, 0x67, 0xc5, 0x79, 0x0d,
    0x59, 0xe9, 0x73, 0x12, 0x5e, 0x16, 0x01, 0xd3, 0x9b, 0xa8, 0x5b, 0x1b, 0x9a, 0xf1, 0xb8, 0x37, 0x30,
    0xf8, 0x38, 0x94, 0x69, 0x1d, 0x29, 0x7f, 0x3f, 0xf6, 0xb1, 0xcb, 0x70, 0xbd, 0x30,
};

extern const uint8_t sTestCert_Root01_PublicKey_Len = sizeof(sTestCert_Root01_PublicKey);

extern const uint8_t sTestCert_Root01_PrivateKey[] = {
    0xb4, 0xce, 0x32, 0x27, 0x87, 0x12, 0x03, 0x6b, 0x39, 0x83, 0x18, 0xa3, 0x08, 0x9a, 0x26, 0x3c,
    0xf8, 0xb5, 0xc4, 0xcc, 0x18, 0xff, 0x65, 0x1c, 0x1d, 0x33, 0xfe, 0x1d, 0x89, 0x08, 0xf9, 0xcf,
};

extern const uint8_t sTestCert_Root01_PrivateKey_Len = sizeof(sTestCert_Root01_PrivateKey);

extern const uint8_t sTestCert_Root01_SubjectKeyId[] = {
    0xFF, 0x29, 0x80, 0x84, 0x48, 0x57, 0x2D, 0x44, 0xC7, 0x3D, 0x40, 0x6B, 0x88, 0xFF, 0xFE, 0x39, 0x12, 0x89, 0x36, 0x95,
};

extern const uint8_t sTestCert_Root01_SubjectKeyId_Len = sizeof(sTestCert_Root01_SubjectKeyId);

/**************  Test Root02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 7786784962027099567 (0x6c1037aab3fa95af)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.4 = CACACACA00000002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:cb:ae:32:69:ef:2b:f4:44:38:ce:22:34:d6:32:
                    a3:c6:1c:fc:98:a1:b5:c2:04:b3:9b:15:76:7e:51:
                    fd:45:b3:1e:0d:c4:85:07:e9:40:b6:ee:66:db:ce:
                    f6:86:80:ba:e3:76:40:2d:1f:1e:3e:b6:c0:19:fe:
                    92:8e:e7:1f:cf
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                CE:3C:99:08:15:E3:E8:78:7A:FA:33:DB:1B:15:96:DD:A8:FC:05:A7
            X509v3 Authority Key Identifier:
                keyid:CE:3C:99:08:15:E3:E8:78:7A:FA:33:DB:1B:15:96:DD:A8:FC:05:A7

    Signature Algorithm: ecdsa-with-SHA256
         30:46:02:21:00:9d:fe:c1:61:7f:09:b7:83:07:80:35:32:a3:
         d5:6c:5e:8d:b5:d2:ac:96:40:aa:1f:1e:42:e2:f3:a7:b0:df:
         ea:02:21:00:b4:50:e6:c7:da:a9:c1:8a:01:0a:81:1c:a6:f0:
         eb:1e:b1:50:20:d0:31:71:9a:13:55:39:a4:d5:6f:f7:a1:17

-----BEGIN CERTIFICATE-----
MIIB4jCCAYegAwIBAgIIbBA3qrP6la8wCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDIxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDIxIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEy64yae8r
9EQ4ziI01jKjxhz8mKG1wgSzmxV2flH9RbMeDcSFB+lAtu5m2872hoC643ZALR8e
PrbAGf6Sjucfz6NjMGEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw
HQYDVR0OBBYEFM48mQgV4+h4evoz2xsVlt2o/AWnMB8GA1UdIwQYMBaAFM48mQgV
4+h4evoz2xsVlt2o/AWnMAoGCCqGSM49BAMCA0kAMEYCIQCd/sFhfwm3gweANTKj
1WxejbXSrJZAqh8eQuLzp7Df6gIhALRQ5sfaqcGKAQqBHKbw6x6xUCDQMXGaE1U5
pNVv96EX
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIJzjAaCoEuDQvNAh3Ozp2cT5Xwmvh+ptpXc7D07tvUXYoAoGCCqGSM49
AwEHoUQDQgAEy64yae8r9EQ4ziI01jKjxhz8mKG1wgSzmxV2flH9RbMeDcSFB+lA
tu5m2872hoC643ZALR8ePrbAGf6Sjucfzw==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Root02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x6c, 0x10, 0x37, 0xaa, 0xb3, 0xfa, 0x95, 0xaf, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x14, 0x02, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x14, 0x02, 0x00, 0x00,
    0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08,
    0x01, 0x30, 0x09, 0x41, 0x04, 0xcb, 0xae, 0x32, 0x69, 0xef, 0x2b, 0xf4, 0x44, 0x38, 0xce, 0x22, 0x34, 0xd6, 0x32, 0xa3, 0xc6,
    0x1c, 0xfc, 0x98, 0xa1, 0xb5, 0xc2, 0x04, 0xb3, 0x9b, 0x15, 0x76, 0x7e, 0x51, 0xfd, 0x45, 0xb3, 0x1e, 0x0d, 0xc4, 0x85, 0x07,
    0xe9, 0x40, 0xb6, 0xee, 0x66, 0xdb, 0xce, 0xf6, 0x86, 0x80, 0xba, 0xe3, 0x76, 0x40, 0x2d, 0x1f, 0x1e, 0x3e, 0xb6, 0xc0, 0x19,
    0xfe, 0x92, 0x8e, 0xe7, 0x1f, 0xcf, 0x35, 0x80, 0x29, 0x01, 0x18, 0x24, 0x81, 0x60, 0x30, 0x83, 0x14, 0xce, 0x3c, 0x99, 0x08,
    0x15, 0xe3, 0xe8, 0x78, 0x7a, 0xfa, 0x33, 0xdb, 0x1b, 0x15, 0x96, 0xdd, 0xa8, 0xfc, 0x05, 0xa7, 0x30, 0x84, 0x14, 0xce, 0x3c,
    0x99, 0x08, 0x15, 0xe3, 0xe8, 0x78, 0x7a, 0xfa, 0x33, 0xdb, 0x1b, 0x15, 0x96, 0xdd, 0xa8, 0xfc, 0x05, 0xa7, 0x35, 0x0a, 0x30,
    0x01, 0x21, 0x00, 0x9d, 0xfe, 0xc1, 0x61, 0x7f, 0x09, 0xb7, 0x83, 0x07, 0x80, 0x35, 0x32, 0xa3, 0xd5, 0x6c, 0x5e, 0x8d, 0xb5,
    0xd2, 0xac, 0x96, 0x40, 0xaa, 0x1f, 0x1e, 0x42, 0xe2, 0xf3, 0xa7, 0xb0, 0xdf, 0xea, 0x30, 0x02, 0x21, 0x00, 0xb4, 0x50, 0xe6,
    0xc7, 0xda, 0xa9, 0xc1, 0x8a, 0x01, 0x0a, 0x81, 0x1c, 0xa6, 0xf0, 0xeb, 0x1e, 0xb1, 0x50, 0x20, 0xd0, 0x31, 0x71, 0x9a, 0x13,
    0x55, 0x39, 0xa4, 0xd5, 0x6f, 0xf7, 0xa1, 0x17, 0x18, 0x18,
};

extern const uint32_t sTestCert_Root02_Chip_Len = sizeof(sTestCert_Root02_Chip);

extern const uint8_t sTestCert_Root02_DER[] = {
    0x30, 0x82, 0x01, 0xe2, 0x30, 0x82, 0x01, 0x87, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x6c, 0x10, 0x37, 0xaa, 0xb3, 0xfa,
    0x95, 0xaf, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0xcb, 0xae, 0x32, 0x69, 0xef, 0x2b, 0xf4, 0x44, 0x38, 0xce, 0x22, 0x34, 0xd6, 0x32, 0xa3, 0xc6, 0x1c, 0xfc,
    0x98, 0xa1, 0xb5, 0xc2, 0x04, 0xb3, 0x9b, 0x15, 0x76, 0x7e, 0x51, 0xfd, 0x45, 0xb3, 0x1e, 0x0d, 0xc4, 0x85, 0x07, 0xe9, 0x40,
    0xb6, 0xee, 0x66, 0xdb, 0xce, 0xf6, 0x86, 0x80, 0xba, 0xe3, 0x76, 0x40, 0x2d, 0x1f, 0x1e, 0x3e, 0xb6, 0xc0, 0x19, 0xfe, 0x92,
    0x8e, 0xe7, 0x1f, 0xcf, 0xa3, 0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30,
    0x03, 0x01, 0x01, 0xff, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xce, 0x3c, 0x99, 0x08, 0x15, 0xe3, 0xe8, 0x78, 0x7a, 0xfa, 0x33,
    0xdb, 0x1b, 0x15, 0x96, 0xdd, 0xa8, 0xfc, 0x05, 0xa7, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0xce, 0x3c, 0x99, 0x08, 0x15, 0xe3, 0xe8, 0x78, 0x7a, 0xfa, 0x33, 0xdb, 0x1b, 0x15, 0x96, 0xdd, 0xa8, 0xfc, 0x05, 0xa7,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0x9d,
    0xfe, 0xc1, 0x61, 0x7f, 0x09, 0xb7, 0x83, 0x07, 0x80, 0x35, 0x32, 0xa3, 0xd5, 0x6c, 0x5e, 0x8d, 0xb5, 0xd2, 0xac, 0x96, 0x40,
    0xaa, 0x1f, 0x1e, 0x42, 0xe2, 0xf3, 0xa7, 0xb0, 0xdf, 0xea, 0x02, 0x21, 0x00, 0xb4, 0x50, 0xe6, 0xc7, 0xda, 0xa9, 0xc1, 0x8a,
    0x01, 0x0a, 0x81, 0x1c, 0xa6, 0xf0, 0xeb, 0x1e, 0xb1, 0x50, 0x20, 0xd0, 0x31, 0x71, 0x9a, 0x13, 0x55, 0x39, 0xa4, 0xd5, 0x6f,
    0xf7, 0xa1, 0x17,
};

extern const uint32_t sTestCert_Root02_DER_Len = sizeof(sTestCert_Root02_DER);

extern const uint8_t sTestCert_Root02_PublicKey[] = {
    0x04, 0xcb, 0xae, 0x32, 0x69, 0xef, 0x2b, 0xf4, 0x44, 0x38, 0xce, 0x22, 0x34, 0xd6, 0x32, 0xa3, 0xc6,
    0x1c, 0xfc, 0x98, 0xa1, 0xb5, 0xc2, 0x04, 0xb3, 0x9b, 0x15, 0x76, 0x7e, 0x51, 0xfd, 0x45, 0xb3, 0x1e,
    0x0d, 0xc4, 0x85, 0x07, 0xe9, 0x40, 0xb6, 0xee, 0x66, 0xdb, 0xce, 0xf6, 0x86, 0x80, 0xba, 0xe3, 0x76,
    0x40, 0x2d, 0x1f, 0x1e, 0x3e, 0xb6, 0xc0, 0x19, 0xfe, 0x92, 0x8e, 0xe7, 0x1f, 0xcf,
};

extern const uint8_t sTestCert_Root02_PublicKey_Len = sizeof(sTestCert_Root02_PublicKey);

extern const uint8_t sTestCert_Root02_PrivateKey[] = {
    0x9c, 0xe3, 0x01, 0xa0, 0xa8, 0x12, 0xe0, 0xd0, 0xbc, 0xd0, 0x21, 0xdc, 0xec, 0xe9, 0xd9, 0xc4,
    0xf9, 0x5f, 0x09, 0xaf, 0x87, 0xea, 0x6d, 0xa5, 0x77, 0x3b, 0x0f, 0x4e, 0xed, 0xbd, 0x45, 0xd8,
};

extern const uint8_t sTestCert_Root02_PrivateKey_Len = sizeof(sTestCert_Root02_PrivateKey);

extern const uint8_t sTestCert_Root02_SubjectKeyId[] = {
    0xCE, 0x3C, 0x99, 0x08, 0x15, 0xE3, 0xE8, 0x78, 0x7A, 0xFA, 0x33, 0xDB, 0x1B, 0x15, 0x96, 0xDD, 0xA8, 0xFC, 0x05, 0xA7,
};

extern const uint8_t sTestCert_Root02_SubjectKeyId_Len = sizeof(sTestCert_Root02_SubjectKeyId);

/**************  Test ICA01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 8523803931871763091 (0x764aa283d64b5a93)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.3 = CACACACA00000003
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:49:ce:1c:33:f7:56:3b:45:3d:5d:26:b7:08:a6:
                    fa:08:4c:a6:28:95:ac:63:8a:67:21:20:df:6b:5a:
                    d6:9c:58:f2:88:bd:5f:44:c9:78:fd:03:6d:56:ec:
                    ce:0b:79:88:1f:ac:36:36:78:92:16:76:bb:68:9f:
                    8f:29:01:73:c9
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                54:AB:46:33:35:79:3C:89:72:BA:90:9C:B2:3A:E6:61:95:70:F4:33
            X509v3 Authority Key Identifier:
                keyid:FF:29:80:84:48:57:2D:44:C7:3D:40:6B:88:FF:FE:39:12:89:36:95

    Signature Algorithm: ecdsa-with-SHA256
         30:46:02:21:00:d8:d6:b3:5d:b8:f3:d5:d1:6a:f0:6b:cd:af:
         e8:5e:b2:12:81:5e:b2:a0:d4:4d:29:06:9c:c5:e6:da:da:66:
         eb:02:21:00:c2:42:a4:10:6e:80:4d:0a:80:26:b4:98:00:89:
         83:10:4e:4a:a8:ef:81:b4:ce:6e:e9:af:2e:f6:7f:f1:19:fc

-----BEGIN CERTIFICATE-----
MIIBnjCCAUOgAwIBAgIIdkqig9ZLWpMwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBAwwQQ0FDQUNBQ0EwMDAwMDAwMzBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABEnOHDP3VjtFPV0mtwim+ghMpiiVrGOKZyEg
32ta1pxY8oi9X0TJeP0DbVbszgt5iB+sNjZ4khZ2u2ifjykBc8mjYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBRUq0YzNXk8iXK6
kJyyOuZhlXD0MzAfBgNVHSMEGDAWgBT/KYCESFctRMc9QGuI//45Eok2lTAKBggq
hkjOPQQDAgNJADBGAiEA2NazXbjz1dFq8GvNr+heshKBXrKg1E0pBpzF5traZusC
IQDCQqQQboBNCoAmtJgAiYMQTkqo74G0zm7pry72f/EZ/A==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEII448+hxjm4Aw4Vdf2uiqb4DLOCTyZZB6htKESvMNlpaoAoGCCqGSM49
AwEHoUQDQgAESc4cM/dWO0U9XSa3CKb6CEymKJWsY4pnISDfa1rWnFjyiL1fRMl4
/QNtVuzOC3mIH6w2NniSFna7aJ+PKQFzyQ==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_ICA01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x76, 0x4a, 0xa2, 0x83, 0xd6, 0x4b, 0x5a, 0x93, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05,
    0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x13, 0x03, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24, 0x07, 0x01, 0x24,
    0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x49, 0xce, 0x1c, 0x33, 0xf7, 0x56, 0x3b, 0x45, 0x3d, 0x5d, 0x26, 0xb7, 0x08, 0xa6, 0xfa,
    0x08, 0x4c, 0xa6, 0x28, 0x95, 0xac, 0x63, 0x8a, 0x67, 0x21, 0x20, 0xdf, 0x6b, 0x5a, 0xd6, 0x9c, 0x58, 0xf2, 0x88, 0xbd, 0x5f,
    0x44, 0xc9, 0x78, 0xfd, 0x03, 0x6d, 0x56, 0xec, 0xce, 0x0b, 0x79, 0x88, 0x1f, 0xac, 0x36, 0x36, 0x78, 0x92, 0x16, 0x76, 0xbb,
    0x68, 0x9f, 0x8f, 0x29, 0x01, 0x73, 0xc9, 0x35, 0x80, 0x29, 0x01, 0x18, 0x24, 0x81, 0x60, 0x30, 0x83, 0x14, 0x54, 0xab, 0x46,
    0x33, 0x35, 0x79, 0x3c, 0x89, 0x72, 0xba, 0x90, 0x9c, 0xb2, 0x3a, 0xe6, 0x61, 0x95, 0x70, 0xf4, 0x33, 0x30, 0x84, 0x14, 0xff,
    0x29, 0x80, 0x84, 0x48, 0x57, 0x2d, 0x44, 0xc7, 0x3d, 0x40, 0x6b, 0x88, 0xff, 0xfe, 0x39, 0x12, 0x89, 0x36, 0x95, 0x35, 0x0a,
    0x30, 0x01, 0x21, 0x00, 0xd8, 0xd6, 0xb3, 0x5d, 0xb8, 0xf3, 0xd5, 0xd1, 0x6a, 0xf0, 0x6b, 0xcd, 0xaf, 0xe8, 0x5e, 0xb2, 0x12,
    0x81, 0x5e, 0xb2, 0xa0, 0xd4, 0x4d, 0x29, 0x06, 0x9c, 0xc5, 0xe6, 0xda, 0xda, 0x66, 0xeb, 0x30, 0x02, 0x21, 0x00, 0xc2, 0x42,
    0xa4, 0x10, 0x6e, 0x80, 0x4d, 0x0a, 0x80, 0x26, 0xb4, 0x98, 0x00, 0x89, 0x83, 0x10, 0x4e, 0x4a, 0xa8, 0xef, 0x81, 0xb4, 0xce,
    0x6e, 0xe9, 0xaf, 0x2e, 0xf6, 0x7f, 0xf1, 0x19, 0xfc, 0x18, 0x18,
};

extern const uint32_t sTestCert_ICA01_Chip_Len = sizeof(sTestCert_ICA01_Chip);

extern const uint8_t sTestCert_ICA01_DER[] = {
    0x30, 0x82, 0x01, 0x9e, 0x30, 0x82, 0x01, 0x43, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x76, 0x4a, 0xa2, 0x83, 0xd6, 0x4b,
    0x5a, 0x93, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x49, 0xce,
    0x1c, 0x33, 0xf7, 0x56, 0x3b, 0x45, 0x3d, 0x5d, 0x26, 0xb7, 0x08, 0xa6, 0xfa, 0x08, 0x4c, 0xa6, 0x28, 0x95, 0xac, 0x63, 0x8a,
    0x67, 0x21, 0x20, 0xdf, 0x6b, 0x5a, 0xd6, 0x9c, 0x58, 0xf2, 0x88, 0xbd, 0x5f, 0x44, 0xc9, 0x78, 0xfd, 0x03, 0x6d, 0x56, 0xec,
    0xce, 0x0b, 0x79, 0x88, 0x1f, 0xac, 0x36, 0x36, 0x78, 0x92, 0x16, 0x76, 0xbb, 0x68, 0x9f, 0x8f, 0x29, 0x01, 0x73, 0xc9, 0xa3,
    0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x16, 0x04, 0x14, 0x54, 0xab, 0x46, 0x33, 0x35, 0x79, 0x3c, 0x89, 0x72, 0xba, 0x90, 0x9c, 0xb2, 0x3a, 0xe6, 0x61,
    0x95, 0x70, 0xf4, 0x33, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xff, 0x29, 0x80, 0x84,
    0x48, 0x57, 0x2d, 0x44, 0xc7, 0x3d, 0x40, 0x6b, 0x88, 0xff, 0xfe, 0x39, 0x12, 0x89, 0x36, 0x95, 0x30, 0x0a, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0xd8, 0xd6, 0xb3, 0x5d, 0xb8, 0xf3,
    0xd5, 0xd1, 0x6a, 0xf0, 0x6b, 0xcd, 0xaf, 0xe8, 0x5e, 0xb2, 0x12, 0x81, 0x5e, 0xb2, 0xa0, 0xd4, 0x4d, 0x29, 0x06, 0x9c, 0xc5,
    0xe6, 0xda, 0xda, 0x66, 0xeb, 0x02, 0x21, 0x00, 0xc2, 0x42, 0xa4, 0x10, 0x6e, 0x80, 0x4d, 0x0a, 0x80, 0x26, 0xb4, 0x98, 0x00,
    0x89, 0x83, 0x10, 0x4e, 0x4a, 0xa8, 0xef, 0x81, 0xb4, 0xce, 0x6e, 0xe9, 0xaf, 0x2e, 0xf6, 0x7f, 0xf1, 0x19, 0xfc,
};

extern const uint32_t sTestCert_ICA01_DER_Len = sizeof(sTestCert_ICA01_DER);

extern const uint8_t sTestCert_ICA01_PublicKey[] = {
    0x04, 0x49, 0xce, 0x1c, 0x33, 0xf7, 0x56, 0x3b, 0x45, 0x3d, 0x5d, 0x26, 0xb7, 0x08, 0xa6, 0xfa, 0x08,
    0x4c, 0xa6, 0x28, 0x95, 0xac, 0x63, 0x8a, 0x67, 0x21, 0x20, 0xdf, 0x6b, 0x5a, 0xd6, 0x9c, 0x58, 0xf2,
    0x88, 0xbd, 0x5f, 0x44, 0xc9, 0x78, 0xfd, 0x03, 0x6d, 0x56, 0xec, 0xce, 0x0b, 0x79, 0x88, 0x1f, 0xac,
    0x36, 0x36, 0x78, 0x92, 0x16, 0x76, 0xbb, 0x68, 0x9f, 0x8f, 0x29, 0x01, 0x73, 0xc9,
};

extern const uint8_t sTestCert_ICA01_PublicKey_Len = sizeof(sTestCert_ICA01_PublicKey);

extern const uint8_t sTestCert_ICA01_PrivateKey[] = {
    0x8e, 0x38, 0xf3, 0xe8, 0x71, 0x8e, 0x6e, 0x00, 0xc3, 0x85, 0x5d, 0x7f, 0x6b, 0xa2, 0xa9, 0xbe,
    0x03, 0x2c, 0xe0, 0x93, 0xc9, 0x96, 0x41, 0xea, 0x1b, 0x4a, 0x11, 0x2b, 0xcc, 0x36, 0x5a, 0x5a,
};

extern const uint8_t sTestCert_ICA01_PrivateKey_Len = sizeof(sTestCert_ICA01_PrivateKey);

extern const uint8_t sTestCert_ICA01_SubjectKeyId[] = {
    0x54, 0xAB, 0x46, 0x33, 0x35, 0x79, 0x3C, 0x89, 0x72, 0xBA, 0x90, 0x9C, 0xB2, 0x3A, 0xE6, 0x61, 0x95, 0x70, 0xF4, 0x33,
};

extern const uint8_t sTestCert_ICA01_SubjectKeyId_Len = sizeof(sTestCert_ICA01_SubjectKeyId);

/**************  Test ICA02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 889459135438374591 (0xc57fe5f0207c6bf)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:58:c7:b5:51:0f:85:74:e9:1f:0b:ab:a2:e6:2a:
                    fe:ee:49:c8:6d:f3:15:94:39:3b:20:b5:f0:2f:57:
                    c0:73:5c:d0:4c:ca:f1:5f:c9:3a:cb:7f:7f:17:6f:
                    3e:80:4b:7b:06:8b:bc:6f:66:c5:4a:b1:0f:1f:6e:
                    0b:26:70:d9:4c
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                E8:62:8F:AE:DC:25:7F:05:6B:44:8F:D6:A5:CA:28:CC:15:D1:30:D7
            X509v3 Authority Key Identifier:
                keyid:CE:3C:99:08:15:E3:E8:78:7A:FA:33:DB:1B:15:96:DD:A8:FC:05:A7

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:29:ad:b0:e6:de:ee:0c:33:a3:8e:3f:00:bf:9e:
         b4:13:68:0b:bc:1e:2c:10:3c:43:42:e1:f2:6d:ff:f4:57:fd:
         02:20:3b:cd:00:ab:cd:91:fc:a0:7f:b2:75:d6:7e:c7:fe:11:
         f9:4e:9f:75:f8:9a:2d:bf:22:7d:05:12:b8:a0:b6:a7

-----BEGIN CERTIFICATE-----
MIIB4DCCAYegAwIBAgIIDFf+XwIHxr8wCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDIxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWMe1UQ+F
dOkfC6ui5ir+7knIbfMVlDk7ILXwL1fAc1zQTMrxX8k6y39/F28+gEt7Bou8b2bF
SrEPH24LJnDZTKNjMGEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw
HQYDVR0OBBYEFOhij67cJX8Fa0SP1qXKKMwV0TDXMB8GA1UdIwQYMBaAFM48mQgV
4+h4evoz2xsVlt2o/AWnMAoGCCqGSM49BAMCA0cAMEQCICmtsObe7gwzo44/AL+e
tBNoC7weLBA8Q0Lh8m3/9Ff9AiA7zQCrzZH8oH+yddZ+x/4R+U6fdfiaLb8ifQUS
uKC2pw==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIOZBVNj28nHQgpFM+PjPPFBM/jVswCeKk+6Q1iUpLrlfoAoGCCqGSM49
AwEHoUQDQgAEWMe1UQ+FdOkfC6ui5ir+7knIbfMVlDk7ILXwL1fAc1zQTMrxX8k6
y39/F28+gEt7Bou8b2bFSrEPH24LJnDZTA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_ICA02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x0c, 0x57, 0xfe, 0x5f, 0x02, 0x07, 0xc6, 0xbf, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x14, 0x02, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x13, 0x04, 0x00, 0x00,
    0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08,
    0x01, 0x30, 0x09, 0x41, 0x04, 0x58, 0xc7, 0xb5, 0x51, 0x0f, 0x85, 0x74, 0xe9, 0x1f, 0x0b, 0xab, 0xa2, 0xe6, 0x2a, 0xfe, 0xee,
    0x49, 0xc8, 0x6d, 0xf3, 0x15, 0x94, 0x39, 0x3b, 0x20, 0xb5, 0xf0, 0x2f, 0x57, 0xc0, 0x73, 0x5c, 0xd0, 0x4c, 0xca, 0xf1, 0x5f,
    0xc9, 0x3a, 0xcb, 0x7f, 0x7f, 0x17, 0x6f, 0x3e, 0x80, 0x4b, 0x7b, 0x06, 0x8b, 0xbc, 0x6f, 0x66, 0xc5, 0x4a, 0xb1, 0x0f, 0x1f,
    0x6e, 0x0b, 0x26, 0x70, 0xd9, 0x4c, 0x35, 0x80, 0x29, 0x01, 0x18, 0x24, 0x81, 0x60, 0x30, 0x83, 0x14, 0xe8, 0x62, 0x8f, 0xae,
    0xdc, 0x25, 0x7f, 0x05, 0x6b, 0x44, 0x8f, 0xd6, 0xa5, 0xca, 0x28, 0xcc, 0x15, 0xd1, 0x30, 0xd7, 0x30, 0x84, 0x14, 0xce, 0x3c,
    0x99, 0x08, 0x15, 0xe3, 0xe8, 0x78, 0x7a, 0xfa, 0x33, 0xdb, 0x1b, 0x15, 0x96, 0xdd, 0xa8, 0xfc, 0x05, 0xa7, 0x35, 0x0a, 0x30,
    0x01, 0x20, 0x29, 0xad, 0xb0, 0xe6, 0xde, 0xee, 0x0c, 0x33, 0xa3, 0x8e, 0x3f, 0x00, 0xbf, 0x9e, 0xb4, 0x13, 0x68, 0x0b, 0xbc,
    0x1e, 0x2c, 0x10, 0x3c, 0x43, 0x42, 0xe1, 0xf2, 0x6d, 0xff, 0xf4, 0x57, 0xfd, 0x30, 0x02, 0x20, 0x3b, 0xcd, 0x00, 0xab, 0xcd,
    0x91, 0xfc, 0xa0, 0x7f, 0xb2, 0x75, 0xd6, 0x7e, 0xc7, 0xfe, 0x11, 0xf9, 0x4e, 0x9f, 0x75, 0xf8, 0x9a, 0x2d, 0xbf, 0x22, 0x7d,
    0x05, 0x12, 0xb8, 0xa0, 0xb6, 0xa7, 0x18, 0x18,
};

extern const uint32_t sTestCert_ICA02_Chip_Len = sizeof(sTestCert_ICA02_Chip);

extern const uint8_t sTestCert_ICA02_DER[] = {
    0x30, 0x82, 0x01, 0xe0, 0x30, 0x82, 0x01, 0x87, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x0c, 0x57, 0xfe, 0x5f, 0x02, 0x07,
    0xc6, 0xbf, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0x58, 0xc7, 0xb5, 0x51, 0x0f, 0x85, 0x74, 0xe9, 0x1f, 0x0b, 0xab, 0xa2, 0xe6, 0x2a, 0xfe, 0xee, 0x49, 0xc8,
    0x6d, 0xf3, 0x15, 0x94, 0x39, 0x3b, 0x20, 0xb5, 0xf0, 0x2f, 0x57, 0xc0, 0x73, 0x5c, 0xd0, 0x4c, 0xca, 0xf1, 0x5f, 0xc9, 0x3a,
    0xcb, 0x7f, 0x7f, 0x17, 0x6f, 0x3e, 0x80, 0x4b, 0x7b, 0x06, 0x8b, 0xbc, 0x6f, 0x66, 0xc5, 0x4a, 0xb1, 0x0f, 0x1f, 0x6e, 0x0b,
    0x26, 0x70, 0xd9, 0x4c, 0xa3, 0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30,
    0x03, 0x01, 0x01, 0xff, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xe8, 0x62, 0x8f, 0xae, 0xdc, 0x25, 0x7f, 0x05, 0x6b, 0x44, 0x8f,
    0xd6, 0xa5, 0xca, 0x28, 0xcc, 0x15, 0xd1, 0x30, 0xd7, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0xce, 0x3c, 0x99, 0x08, 0x15, 0xe3, 0xe8, 0x78, 0x7a, 0xfa, 0x33, 0xdb, 0x1b, 0x15, 0x96, 0xdd, 0xa8, 0xfc, 0x05, 0xa7,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x29, 0xad,
    0xb0, 0xe6, 0xde, 0xee, 0x0c, 0x33, 0xa3, 0x8e, 0x3f, 0x00, 0xbf, 0x9e, 0xb4, 0x13, 0x68, 0x0b, 0xbc, 0x1e, 0x2c, 0x10, 0x3c,
    0x43, 0x42, 0xe1, 0xf2, 0x6d, 0xff, 0xf4, 0x57, 0xfd, 0x02, 0x20, 0x3b, 0xcd, 0x00, 0xab, 0xcd, 0x91, 0xfc, 0xa0, 0x7f, 0xb2,
    0x75, 0xd6, 0x7e, 0xc7, 0xfe, 0x11, 0xf9, 0x4e, 0x9f, 0x75, 0xf8, 0x9a, 0x2d, 0xbf, 0x22, 0x7d, 0x05, 0x12, 0xb8, 0xa0, 0xb6,
    0xa7,
};

extern const uint32_t sTestCert_ICA02_DER_Len = sizeof(sTestCert_ICA02_DER);

extern const uint8_t sTestCert_ICA02_PublicKey[] = {
    0x04, 0x58, 0xc7, 0xb5, 0x51, 0x0f, 0x85, 0x74, 0xe9, 0x1f, 0x0b, 0xab, 0xa2, 0xe6, 0x2a, 0xfe, 0xee,
    0x49, 0xc8, 0x6d, 0xf3, 0x15, 0x94, 0x39, 0x3b, 0x20, 0xb5, 0xf0, 0x2f, 0x57, 0xc0, 0x73, 0x5c, 0xd0,
    0x4c, 0xca, 0xf1, 0x5f, 0xc9, 0x3a, 0xcb, 0x7f, 0x7f, 0x17, 0x6f, 0x3e, 0x80, 0x4b, 0x7b, 0x06, 0x8b,
    0xbc, 0x6f, 0x66, 0xc5, 0x4a, 0xb1, 0x0f, 0x1f, 0x6e, 0x0b, 0x26, 0x70, 0xd9, 0x4c,
};

extern const uint8_t sTestCert_ICA02_PublicKey_Len = sizeof(sTestCert_ICA02_PublicKey);

extern const uint8_t sTestCert_ICA02_PrivateKey[] = {
    0xe6, 0x41, 0x54, 0xd8, 0xf6, 0xf2, 0x71, 0xd0, 0x82, 0x91, 0x4c, 0xf8, 0xf8, 0xcf, 0x3c, 0x50,
    0x4c, 0xfe, 0x35, 0x6c, 0xc0, 0x27, 0x8a, 0x93, 0xee, 0x90, 0xd6, 0x25, 0x29, 0x2e, 0xb9, 0x5f,
};

extern const uint8_t sTestCert_ICA02_PrivateKey_Len = sizeof(sTestCert_ICA02_PrivateKey);

extern const uint8_t sTestCert_ICA02_SubjectKeyId[] = {
    0xE8, 0x62, 0x8F, 0xAE, 0xDC, 0x25, 0x7F, 0x05, 0x6B, 0x44, 0x8F, 0xD6, 0xA5, 0xCA, 0x28, 0xCC, 0x15, 0xD1, 0x30, 0xD7,
};

extern const uint8_t sTestCert_ICA02_SubjectKeyId_Len = sizeof(sTestCert_ICA02_SubjectKeyId);

/**************  Test ICA01_1 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1632091073805469187 (0x16a65a2f3742c603)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.3 = CACACACA00000005
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:ed:26:5a:b3:21:cb:b1:ec:5b:ef:8f:ad:4d:7a:
                    37:64:c0:3f:82:ff:6a:b1:32:0f:4e:2b:01:52:c5:
                    08:f9:0a:18:26:b4:6f:7f:a0:9e:b3:24:ce:de:ec:
                    5b:67:17:ec:da:ba:5e:f1:6a:ed:43:7f:38:8c:5e:
                    f9:c7:39:7c:7d
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                91:B7:AA:FF:C9:E5:F1:B5:9D:20:1A:00:AF:1F:33:67:4E:B5:BD:A8
            X509v3 Authority Key Identifier:
                keyid:FF:29:80:84:48:57:2D:44:C7:3D:40:6B:88:FF:FE:39:12:89:36:95

    Signature Algorithm: ecdsa-with-SHA256
         30:46:02:21:00:e5:32:b0:2c:d3:9c:f7:40:a0:ec:c5:08:6e:
         bb:e7:33:41:1e:11:db:c8:38:4c:1d:ae:35:86:08:5c:0d:cf:
         35:02:21:00:86:bd:85:62:c2:7f:be:8c:e9:64:94:82:b9:38:
         88:00:65:46:c4:b4:81:c2:60:d6:ec:f6:b8:6d:cb:3a:fd:09

-----BEGIN CERTIFICATE-----
MIIBnjCCAUOgAwIBAgIIFqZaLzdCxgMwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBAwwQQ0FDQUNBQ0EwMDAwMDAwNTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABO0mWrMhy7HsW++PrU16N2TAP4L/arEyD04r
AVLFCPkKGCa0b3+gnrMkzt7sW2cX7Nq6XvFq7UN/OIxe+cc5fH2jYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBSRt6r/yeXxtZ0g
GgCvHzNnTrW9qDAfBgNVHSMEGDAWgBT/KYCESFctRMc9QGuI//45Eok2lTAKBggq
hkjOPQQDAgNJADBGAiEA5TKwLNOc90Cg7MUIbrvnM0EeEdvIOEwdrjWGCFwNzzUC
IQCGvYViwn++jOlklIK5OIgAZUbEtIHCYNbs9rhtyzr9CQ==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIKAaGnA2ch+v1gD297xVAM5CUfd+/3Fa7c+KLYayC9zgoAoGCCqGSM49
AwEHoUQDQgAE7SZasyHLsexb74+tTXo3ZMA/gv9qsTIPTisBUsUI+QoYJrRvf6Ce
syTO3uxbZxfs2rpe8WrtQ384jF75xzl8fQ==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_ICA01_1_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x16, 0xa6, 0x5a, 0x2f, 0x37, 0x42, 0xc6, 0x03, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05,
    0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x13, 0x05, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24, 0x07, 0x01, 0x24,
    0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0xed, 0x26, 0x5a, 0xb3, 0x21, 0xcb, 0xb1, 0xec, 0x5b, 0xef, 0x8f, 0xad, 0x4d, 0x7a, 0x37,
    0x64, 0xc0, 0x3f, 0x82, 0xff, 0x6a, 0xb1, 0x32, 0x0f, 0x4e, 0x2b, 0x01, 0x52, 0xc5, 0x08, 0xf9, 0x0a, 0x18, 0x26, 0xb4, 0x6f,
    0x7f, 0xa0, 0x9e, 0xb3, 0x24, 0xce, 0xde, 0xec, 0x5b, 0x67, 0x17, 0xec, 0xda, 0xba, 0x5e, 0xf1, 0x6a, 0xed, 0x43, 0x7f, 0x38,
    0x8c, 0x5e, 0xf9, 0xc7, 0x39, 0x7c, 0x7d, 0x35, 0x80, 0x29, 0x01, 0x18, 0x24, 0x81, 0x60, 0x30, 0x83, 0x14, 0x91, 0xb7, 0xaa,
    0xff, 0xc9, 0xe5, 0xf1, 0xb5, 0x9d, 0x20, 0x1a, 0x00, 0xaf, 0x1f, 0x33, 0x67, 0x4e, 0xb5, 0xbd, 0xa8, 0x30, 0x84, 0x14, 0xff,
    0x29, 0x80, 0x84, 0x48, 0x57, 0x2d, 0x44, 0xc7, 0x3d, 0x40, 0x6b, 0x88, 0xff, 0xfe, 0x39, 0x12, 0x89, 0x36, 0x95, 0x35, 0x0a,
    0x30, 0x01, 0x21, 0x00, 0xe5, 0x32, 0xb0, 0x2c, 0xd3, 0x9c, 0xf7, 0x40, 0xa0, 0xec, 0xc5, 0x08, 0x6e, 0xbb, 0xe7, 0x33, 0x41,
    0x1e, 0x11, 0xdb, 0xc8, 0x38, 0x4c, 0x1d, 0xae, 0x35, 0x86, 0x08, 0x5c, 0x0d, 0xcf, 0x35, 0x30, 0x02, 0x21, 0x00, 0x86, 0xbd,
    0x85, 0x62, 0xc2, 0x7f, 0xbe, 0x8c, 0xe9, 0x64, 0x94, 0x82, 0xb9, 0x38, 0x88, 0x00, 0x65, 0x46, 0xc4, 0xb4, 0x81, 0xc2, 0x60,
    0xd6, 0xec, 0xf6, 0xb8, 0x6d, 0xcb, 0x3a, 0xfd, 0x09, 0x18, 0x18,
};

extern const uint32_t sTestCert_ICA01_1_Chip_Len = sizeof(sTestCert_ICA01_1_Chip);

extern const uint8_t sTestCert_ICA01_1_DER[] = {
    0x30, 0x82, 0x01, 0x9e, 0x30, 0x82, 0x01, 0x43, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x16, 0xa6, 0x5a, 0x2f, 0x37, 0x42,
    0xc6, 0x03, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xed, 0x26,
    0x5a, 0xb3, 0x21, 0xcb, 0xb1, 0xec, 0x5b, 0xef, 0x8f, 0xad, 0x4d, 0x7a, 0x37, 0x64, 0xc0, 0x3f, 0x82, 0xff, 0x6a, 0xb1, 0x32,
    0x0f, 0x4e, 0x2b, 0x01, 0x52, 0xc5, 0x08, 0xf9, 0x0a, 0x18, 0x26, 0xb4, 0x6f, 0x7f, 0xa0, 0x9e, 0xb3, 0x24, 0xce, 0xde, 0xec,
    0x5b, 0x67, 0x17, 0xec, 0xda, 0xba, 0x5e, 0xf1, 0x6a, 0xed, 0x43, 0x7f, 0x38, 0x8c, 0x5e, 0xf9, 0xc7, 0x39, 0x7c, 0x7d, 0xa3,
    0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x16, 0x04, 0x14, 0x91, 0xb7, 0xaa, 0xff, 0xc9, 0xe5, 0xf1, 0xb5, 0x9d, 0x20, 0x1a, 0x00, 0xaf, 0x1f, 0x33, 0x67,
    0x4e, 0xb5, 0xbd, 0xa8, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xff, 0x29, 0x80, 0x84,
    0x48, 0x57, 0x2d, 0x44, 0xc7, 0x3d, 0x40, 0x6b, 0x88, 0xff, 0xfe, 0x39, 0x12, 0x89, 0x36, 0x95, 0x30, 0x0a, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0xe5, 0x32, 0xb0, 0x2c, 0xd3, 0x9c,
    0xf7, 0x40, 0xa0, 0xec, 0xc5, 0x08, 0x6e, 0xbb, 0xe7, 0x33, 0x41, 0x1e, 0x11, 0xdb, 0xc8, 0x38, 0x4c, 0x1d, 0xae, 0x35, 0x86,
    0x08, 0x5c, 0x0d, 0xcf, 0x35, 0x02, 0x21, 0x00, 0x86, 0xbd, 0x85, 0x62, 0xc2, 0x7f, 0xbe, 0x8c, 0xe9, 0x64, 0x94, 0x82, 0xb9,
    0x38, 0x88, 0x00, 0x65, 0x46, 0xc4, 0xb4, 0x81, 0xc2, 0x60, 0xd6, 0xec, 0xf6, 0xb8, 0x6d, 0xcb, 0x3a, 0xfd, 0x09,
};

extern const uint32_t sTestCert_ICA01_1_DER_Len = sizeof(sTestCert_ICA01_1_DER);

extern const uint8_t sTestCert_ICA01_1_PublicKey[] = {
    0x04, 0xed, 0x26, 0x5a, 0xb3, 0x21, 0xcb, 0xb1, 0xec, 0x5b, 0xef, 0x8f, 0xad, 0x4d, 0x7a, 0x37, 0x64,
    0xc0, 0x3f, 0x82, 0xff, 0x6a, 0xb1, 0x32, 0x0f, 0x4e, 0x2b, 0x01, 0x52, 0xc5, 0x08, 0xf9, 0x0a, 0x18,
    0x26, 0xb4, 0x6f, 0x7f, 0xa0, 0x9e, 0xb3, 0x24, 0xce, 0xde, 0xec, 0x5b, 0x67, 0x17, 0xec, 0xda, 0xba,
    0x5e, 0xf1, 0x6a, 0xed, 0x43, 0x7f, 0x38, 0x8c, 0x5e, 0xf9, 0xc7, 0x39, 0x7c, 0x7d,
};

extern const uint8_t sTestCert_ICA01_1_PublicKey_Len = sizeof(sTestCert_ICA01_1_PublicKey);

extern const uint8_t sTestCert_ICA01_1_PrivateKey[] = {
    0xa0, 0x1a, 0x1a, 0x70, 0x36, 0x72, 0x1f, 0xaf, 0xd6, 0x00, 0xf6, 0xf7, 0xbc, 0x55, 0x00, 0xce,
    0x42, 0x51, 0xf7, 0x7e, 0xff, 0x71, 0x5a, 0xed, 0xcf, 0x8a, 0x2d, 0x86, 0xb2, 0x0b, 0xdc, 0xe0,
};

extern const uint8_t sTestCert_ICA01_1_PrivateKey_Len = sizeof(sTestCert_ICA01_1_PrivateKey);

extern const uint8_t sTestCert_ICA01_1_SubjectKeyId[] = {
    0x91, 0xB7, 0xAA, 0xFF, 0xC9, 0xE5, 0xF1, 0xB5, 0x9D, 0x20, 0x1A, 0x00, 0xAF, 0x1F, 0x33, 0x67, 0x4E, 0xB5, 0xBD, 0xA8,
};

extern const uint8_t sTestCert_ICA01_1_SubjectKeyId_Len = sizeof(sTestCert_ICA01_1_SubjectKeyId);

/**************  Test FWSign01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 6834381852291131863 (0x5ed89a15a53069d7)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000005
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.2 = FFFFFFFF00000001, CN = FW SIGN CERT 01
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:31:3c:d6:67:3d:3e:db:3c:d7:46:ab:80:4e:9a:
                    e9:71:03:ac:ef:07:56:1d:aa:c5:a1:e5:7d:8b:7f:
                    f0:38:98:6c:46:6d:0d:dc:6b:7b:75:54:e8:78:a4:
                    b5:b0:94:cf:27:93:7c:86:74:36:0b:49:d8:a6:c4:
                    6c:a3:3d:0e:41
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature
            X509v3 Extended Key Usage: critical
                Code Signing
            X509v3 Subject Key Identifier:
                1A:C8:ED:6C:35:0F:DD:41:4A:31:F1:C8:A3:FC:1E:65:C1:52:6E:41
            X509v3 Authority Key Identifier:
                keyid:91:B7:AA:FF:C9:E5:F1:B5:9D:20:1A:00:AF:1F:33:67:4E:B5:BD:A8

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:21:00:9a:8e:51:37:4e:65:5a:7e:21:03:7e:b6:c3:
         b8:e9:54:c3:7a:11:59:04:00:c7:0d:30:e4:57:26:ac:0d:8c:
         df:02:20:13:73:e6:c2:e8:3c:ad:db:35:43:1e:b7:b7:9f:36:
         b1:b9:41:3c:8f:69:18:a9:10:83:a9:f7:1d:77:5c:29:e1

-----BEGIN CERTIFICATE-----
MIIBzDCCAXKgAwIBAgIIXtiaFaUwadcwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDUwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjA8MSAwHgYKKwYBBAGConwBAgwQRkZGRkZGRkYwMDAwMDAwMTEYMBYG
A1UEAwwPRlcgU0lHTiBDRVJUIDAxMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE
MTzWZz0+2zzXRquATprpcQOs7wdWHarFoeV9i3/wOJhsRm0N3Gt7dVToeKS1sJTP
J5N8hnQ2C0nYpsRsoz0OQaN4MHYwDAYDVR0TAQH/BAIwADAOBgNVHQ8BAf8EBAMC
B4AwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwMwHQYDVR0OBBYEFBrI7Ww1D91BSjHx
yKP8HmXBUm5BMB8GA1UdIwQYMBaAFJG3qv/J5fG1nSAaAK8fM2dOtb2oMAoGCCqG
SM49BAMCA0gAMEUCIQCajlE3TmVafiEDfrbDuOlUw3oRWQQAxw0w5FcmrA2M3wIg
E3Pmwug8rds1Qx63t582sblBPI9pGKkQg6n3HXdcKeE=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEICuPK/2O2LHzTVE0NTzuk5mRsq73KaDvY8df/wNOtBDOoAoGCCqGSM49
AwEHoUQDQgAEMTzWZz0+2zzXRquATprpcQOs7wdWHarFoeV9i3/wOJhsRm0N3Gt7
dVToeKS1sJTPJ5N8hnQ2C0nYpsRsoz0OQQ==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_FWSign01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x5e, 0xd8, 0x9a, 0x15, 0xa5, 0x30, 0x69, 0xd7, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x05, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05,
    0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x12, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x2c, 0x01, 0x0f, 0x46, 0x57,
    0x20, 0x53, 0x49, 0x47, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x30, 0x31, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30,
    0x09, 0x41, 0x04, 0x31, 0x3c, 0xd6, 0x67, 0x3d, 0x3e, 0xdb, 0x3c, 0xd7, 0x46, 0xab, 0x80, 0x4e, 0x9a, 0xe9, 0x71, 0x03, 0xac,
    0xef, 0x07, 0x56, 0x1d, 0xaa, 0xc5, 0xa1, 0xe5, 0x7d, 0x8b, 0x7f, 0xf0, 0x38, 0x98, 0x6c, 0x46, 0x6d, 0x0d, 0xdc, 0x6b, 0x7b,
    0x75, 0x54, 0xe8, 0x78, 0xa4, 0xb5, 0xb0, 0x94, 0xcf, 0x27, 0x93, 0x7c, 0x86, 0x74, 0x36, 0x0b, 0x49, 0xd8, 0xa6, 0xc4, 0x6c,
    0xa3, 0x3d, 0x0e, 0x41, 0x35, 0x80, 0x28, 0x01, 0x18, 0x24, 0x81, 0x01, 0x36, 0x82, 0x04, 0x03, 0x18, 0x30, 0x83, 0x14, 0x1a,
    0xc8, 0xed, 0x6c, 0x35, 0x0f, 0xdd, 0x41, 0x4a, 0x31, 0xf1, 0xc8, 0xa3, 0xfc, 0x1e, 0x65, 0xc1, 0x52, 0x6e, 0x41, 0x30, 0x84,
    0x14, 0x91, 0xb7, 0xaa, 0xff, 0xc9, 0xe5, 0xf1, 0xb5, 0x9d, 0x20, 0x1a, 0x00, 0xaf, 0x1f, 0x33, 0x67, 0x4e, 0xb5, 0xbd, 0xa8,
    0x35, 0x0a, 0x30, 0x01, 0x21, 0x00, 0x9a, 0x8e, 0x51, 0x37, 0x4e, 0x65, 0x5a, 0x7e, 0x21, 0x03, 0x7e, 0xb6, 0xc3, 0xb8, 0xe9,
    0x54, 0xc3, 0x7a, 0x11, 0x59, 0x04, 0x00, 0xc7, 0x0d, 0x30, 0xe4, 0x57, 0x26, 0xac, 0x0d, 0x8c, 0xdf, 0x30, 0x02, 0x20, 0x13,
    0x73, 0xe6, 0xc2, 0xe8, 0x3c, 0xad, 0xdb, 0x35, 0x43, 0x1e, 0xb7, 0xb7, 0x9f, 0x36, 0xb1, 0xb9, 0x41, 0x3c, 0x8f, 0x69, 0x18,
    0xa9, 0x10, 0x83, 0xa9, 0xf7, 0x1d, 0x77, 0x5c, 0x29, 0xe1, 0x18, 0x18,
};

extern const uint32_t sTestCert_FWSign01_Chip_Len = sizeof(sTestCert_FWSign01_Chip);

extern const uint8_t sTestCert_FWSign01_DER[] = {
    0x30, 0x82, 0x01, 0xcc, 0x30, 0x82, 0x01, 0x72, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x5e, 0xd8, 0x9a, 0x15, 0xa5, 0x30,
    0x69, 0xd7, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x3c,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x46, 0x46, 0x46,
    0x46, 0x46, 0x46, 0x46, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04,
    0x03, 0x0c, 0x0f, 0x46, 0x57, 0x20, 0x53, 0x49, 0x47, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x30, 0x31, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0x31, 0x3c, 0xd6, 0x67, 0x3d, 0x3e, 0xdb, 0x3c, 0xd7, 0x46, 0xab, 0x80, 0x4e, 0x9a, 0xe9, 0x71, 0x03, 0xac,
    0xef, 0x07, 0x56, 0x1d, 0xaa, 0xc5, 0xa1, 0xe5, 0x7d, 0x8b, 0x7f, 0xf0, 0x38, 0x98, 0x6c, 0x46, 0x6d, 0x0d, 0xdc, 0x6b, 0x7b,
    0x75, 0x54, 0xe8, 0x78, 0xa4, 0xb5, 0xb0, 0x94, 0xcf, 0x27, 0x93, 0x7c, 0x86, 0x74, 0x36, 0x0b, 0x49, 0xd8, 0xa6, 0xc4, 0x6c,
    0xa3, 0x3d, 0x0e, 0x41, 0xa3, 0x78, 0x30, 0x76, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30,
    0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x16, 0x06, 0x03,
    0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x03, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x1a, 0xc8, 0xed, 0x6c, 0x35, 0x0f, 0xdd, 0x41, 0x4a, 0x31, 0xf1,
    0xc8, 0xa3, 0xfc, 0x1e, 0x65, 0xc1, 0x52, 0x6e, 0x41, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0x91, 0xb7, 0xaa, 0xff, 0xc9, 0xe5, 0xf1, 0xb5, 0x9d, 0x20, 0x1a, 0x00, 0xaf, 0x1f, 0x33, 0x67, 0x4e, 0xb5, 0xbd, 0xa8,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0x9a,
    0x8e, 0x51, 0x37, 0x4e, 0x65, 0x5a, 0x7e, 0x21, 0x03, 0x7e, 0xb6, 0xc3, 0xb8, 0xe9, 0x54, 0xc3, 0x7a, 0x11, 0x59, 0x04, 0x00,
    0xc7, 0x0d, 0x30, 0xe4, 0x57, 0x26, 0xac, 0x0d, 0x8c, 0xdf, 0x02, 0x20, 0x13, 0x73, 0xe6, 0xc2, 0xe8, 0x3c, 0xad, 0xdb, 0x35,
    0x43, 0x1e, 0xb7, 0xb7, 0x9f, 0x36, 0xb1, 0xb9, 0x41, 0x3c, 0x8f, 0x69, 0x18, 0xa9, 0x10, 0x83, 0xa9, 0xf7, 0x1d, 0x77, 0x5c,
    0x29, 0xe1,
};

extern const uint32_t sTestCert_FWSign01_DER_Len = sizeof(sTestCert_FWSign01_DER);

extern const uint8_t sTestCert_FWSign01_PublicKey[] = {
    0x04, 0x31, 0x3c, 0xd6, 0x67, 0x3d, 0x3e, 0xdb, 0x3c, 0xd7, 0x46, 0xab, 0x80, 0x4e, 0x9a, 0xe9, 0x71,
    0x03, 0xac, 0xef, 0x07, 0x56, 0x1d, 0xaa, 0xc5, 0xa1, 0xe5, 0x7d, 0x8b, 0x7f, 0xf0, 0x38, 0x98, 0x6c,
    0x46, 0x6d, 0x0d, 0xdc, 0x6b, 0x7b, 0x75, 0x54, 0xe8, 0x78, 0xa4, 0xb5, 0xb0, 0x94, 0xcf, 0x27, 0x93,
    0x7c, 0x86, 0x74, 0x36, 0x0b, 0x49, 0xd8, 0xa6, 0xc4, 0x6c, 0xa3, 0x3d, 0x0e, 0x41,
};

extern const uint8_t sTestCert_FWSign01_PublicKey_Len = sizeof(sTestCert_FWSign01_PublicKey);

extern const uint8_t sTestCert_FWSign01_PrivateKey[] = {
    0x2b, 0x8f, 0x2b, 0xfd, 0x8e, 0xd8, 0xb1, 0xf3, 0x4d, 0x51, 0x34, 0x35, 0x3c, 0xee, 0x93, 0x99,
    0x91, 0xb2, 0xae, 0xf7, 0x29, 0xa0, 0xef, 0x63, 0xc7, 0x5f, 0xff, 0x03, 0x4e, 0xb4, 0x10, 0xce,
};

extern const uint8_t sTestCert_FWSign01_PrivateKey_Len = sizeof(sTestCert_FWSign01_PrivateKey);

extern const uint8_t sTestCert_FWSign01_SubjectKeyId[] = {
    0x1A, 0xC8, 0xED, 0x6C, 0x35, 0x0F, 0xDD, 0x41, 0x4A, 0x31, 0xF1, 0xC8, 0xA3, 0xFC, 0x1E, 0x65, 0xC1, 0x52, 0x6E, 0x41,
};

extern const uint8_t sTestCert_FWSign01_SubjectKeyId_Len = sizeof(sTestCert_FWSign01_SubjectKeyId);

/**************  Test Node01_01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 2478323091667675002 (0x2264c5b89d7fe77a)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000003
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00010001, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:6e:0a:7c:0c:3a:da:07:7d:2b:28:09:81:22:8a:
                    20:b2:8b:bf:bc:b1:d1:b8:f9:4c:88:d4:c8:fc:96:
                    35:96:27:bd:07:5c:9b:f3:ec:f1:a5:9a:4f:eb:a7:
                    d7:e1:72:df:1e:8f:fc:e6:f0:4b:89:c8:f2:eb:ed:
                    89:a4:64:e3:92
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                BB:27:E6:C1:C1:00:6C:AC:00:16:F2:14:FB:52:D8:6D:35:5C:FA:67
            X509v3 Authority Key Identifier:
                keyid:54:AB:46:33:35:79:3C:89:72:BA:90:9C:B2:3A:E6:61:95:70:F4:33

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:1b:cf:3c:f3:15:c9:85:21:48:bc:0c:17:b7:5d:
         9b:13:a0:bb:15:34:5b:44:2f:eb:e8:90:6b:50:3e:b2:66:3b:
         02:20:32:e5:cc:f3:7b:c2:91:35:80:33:b7:15:c4:d3:d7:8b:
         f6:50:db:83:46:f0:44:0f:fc:46:7f:75:0d:57:fb:79

-----BEGIN CERTIFICATE-----
MIIB3zCCAYagAwIBAgIIImTFuJ1/53owCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDMwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjBEMSAwHgYKKwYBBAGConwBAQwQREVERURFREUwMDAxMDAwMTEgMB4G
CisGAQQBgqJ8AQUMEEZBQjAwMDAwMDAwMDAwMUQwWTATBgcqhkjOPQIBBggqhkjO
PQMBBwNCAARuCnwMOtoHfSsoCYEiiiCyi7+8sdG4+UyI1Mj8ljWWJ70HXJvz7PGl
mk/rp9fhct8ej/zm8EuJyPLr7YmkZOOSo4GDMIGAMAwGA1UdEwEB/wQCMAAwDgYD
VR0PAQH/BAQDAgWgMCAGA1UdJQEB/wQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAd
BgNVHQ4EFgQUuyfmwcEAbKwAFvIU+1LYbTVc+mcwHwYDVR0jBBgwFoAUVKtGMzV5
PIlyupCcsjrmYZVw9DMwCgYIKoZIzj0EAwIDRwAwRAIgG8888xXJhSFIvAwXt12b
E6C7FTRbRC/r6JBrUD6yZjsCIDLlzPN7wpE1gDO3FcTT14v2UNuDRvBED/xGf3UN
V/t5
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIA0rbFRq8PJc8z370c7Z9N5O1QOxqiIk2gty+3leSjMRoAoGCCqGSM49
AwEHoUQDQgAEbgp8DDraB30rKAmBIoogsou/vLHRuPlMiNTI/JY1lie9B1yb8+zx
pZpP66fX4XLfHo/85vBLicjy6+2JpGTjkg==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node01_01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x22, 0x64, 0xc5, 0xb8, 0x9d, 0x7f, 0xe7, 0x7a, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x13, 0x03, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01,
    0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x11, 0x01, 0x00, 0x01, 0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15,
    0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x6e,
    0x0a, 0x7c, 0x0c, 0x3a, 0xda, 0x07, 0x7d, 0x2b, 0x28, 0x09, 0x81, 0x22, 0x8a, 0x20, 0xb2, 0x8b, 0xbf, 0xbc, 0xb1, 0xd1,
    0xb8, 0xf9, 0x4c, 0x88, 0xd4, 0xc8, 0xfc, 0x96, 0x35, 0x96, 0x27, 0xbd, 0x07, 0x5c, 0x9b, 0xf3, 0xec, 0xf1, 0xa5, 0x9a,
    0x4f, 0xeb, 0xa7, 0xd7, 0xe1, 0x72, 0xdf, 0x1e, 0x8f, 0xfc, 0xe6, 0xf0, 0x4b, 0x89, 0xc8, 0xf2, 0xeb, 0xed, 0x89, 0xa4,
    0x64, 0xe3, 0x92, 0x35, 0x80, 0x28, 0x01, 0x18, 0x24, 0x81, 0x05, 0x36, 0x82, 0x04, 0x02, 0x04, 0x01, 0x18, 0x30, 0x83,
    0x14, 0xbb, 0x27, 0xe6, 0xc1, 0xc1, 0x00, 0x6c, 0xac, 0x00, 0x16, 0xf2, 0x14, 0xfb, 0x52, 0xd8, 0x6d, 0x35, 0x5c, 0xfa,
    0x67, 0x30, 0x84, 0x14, 0x54, 0xab, 0x46, 0x33, 0x35, 0x79, 0x3c, 0x89, 0x72, 0xba, 0x90, 0x9c, 0xb2, 0x3a, 0xe6, 0x61,
    0x95, 0x70, 0xf4, 0x33, 0x35, 0x0a, 0x30, 0x01, 0x20, 0x1b, 0xcf, 0x3c, 0xf3, 0x15, 0xc9, 0x85, 0x21, 0x48, 0xbc, 0x0c,
    0x17, 0xb7, 0x5d, 0x9b, 0x13, 0xa0, 0xbb, 0x15, 0x34, 0x5b, 0x44, 0x2f, 0xeb, 0xe8, 0x90, 0x6b, 0x50, 0x3e, 0xb2, 0x66,
    0x3b, 0x30, 0x02, 0x20, 0x32, 0xe5, 0xcc, 0xf3, 0x7b, 0xc2, 0x91, 0x35, 0x80, 0x33, 0xb7, 0x15, 0xc4, 0xd3, 0xd7, 0x8b,
    0xf6, 0x50, 0xdb, 0x83, 0x46, 0xf0, 0x44, 0x0f, 0xfc, 0x46, 0x7f, 0x75, 0x0d, 0x57, 0xfb, 0x79, 0x18, 0x18,
};

extern const uint32_t sTestCert_Node01_01_Chip_Len = sizeof(sTestCert_Node01_01_Chip);

extern const uint8_t sTestCert_Node01_01_DER[] = {
    0x30, 0x82, 0x01, 0xdf, 0x30, 0x82, 0x01, 0x86, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x22, 0x64, 0xc5, 0xb8, 0x9d, 0x7f,
    0xe7, 0x7a, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44,
    0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x6e, 0x0a, 0x7c, 0x0c, 0x3a, 0xda, 0x07, 0x7d, 0x2b, 0x28,
    0x09, 0x81, 0x22, 0x8a, 0x20, 0xb2, 0x8b, 0xbf, 0xbc, 0xb1, 0xd1, 0xb8, 0xf9, 0x4c, 0x88, 0xd4, 0xc8, 0xfc, 0x96, 0x35, 0x96,
    0x27, 0xbd, 0x07, 0x5c, 0x9b, 0xf3, 0xec, 0xf1, 0xa5, 0x9a, 0x4f, 0xeb, 0xa7, 0xd7, 0xe1, 0x72, 0xdf, 0x1e, 0x8f, 0xfc, 0xe6,
    0xf0, 0x4b, 0x89, 0xc8, 0xf2, 0xeb, 0xed, 0x89, 0xa4, 0x64, 0xe3, 0x92, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06,
    0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff,
    0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06,
    0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d,
    0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xbb, 0x27, 0xe6, 0xc1, 0xc1, 0x00, 0x6c, 0xac, 0x00, 0x16, 0xf2, 0x14,
    0xfb, 0x52, 0xd8, 0x6d, 0x35, 0x5c, 0xfa, 0x67, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
    0x54, 0xab, 0x46, 0x33, 0x35, 0x79, 0x3c, 0x89, 0x72, 0xba, 0x90, 0x9c, 0xb2, 0x3a, 0xe6, 0x61, 0x95, 0x70, 0xf4, 0x33, 0x30,
    0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x1b, 0xcf, 0x3c,
    0xf3, 0x15, 0xc9, 0x85, 0x21, 0x48, 0xbc, 0x0c, 0x17, 0xb7, 0x5d, 0x9b, 0x13, 0xa0, 0xbb, 0x15, 0x34, 0x5b, 0x44, 0x2f, 0xeb,
    0xe8, 0x90, 0x6b, 0x50, 0x3e, 0xb2, 0x66, 0x3b, 0x02, 0x20, 0x32, 0xe5, 0xcc, 0xf3, 0x7b, 0xc2, 0x91, 0x35, 0x80, 0x33, 0xb7,
    0x15, 0xc4, 0xd3, 0xd7, 0x8b, 0xf6, 0x50, 0xdb, 0x83, 0x46, 0xf0, 0x44, 0x0f, 0xfc, 0x46, 0x7f, 0x75, 0x0d, 0x57, 0xfb, 0x79,
};

extern const uint32_t sTestCert_Node01_01_DER_Len = sizeof(sTestCert_Node01_01_DER);

extern const uint8_t sTestCert_Node01_01_PublicKey[] = {
    0x04, 0x6e, 0x0a, 0x7c, 0x0c, 0x3a, 0xda, 0x07, 0x7d, 0x2b, 0x28, 0x09, 0x81, 0x22, 0x8a, 0x20, 0xb2,
    0x8b, 0xbf, 0xbc, 0xb1, 0xd1, 0xb8, 0xf9, 0x4c, 0x88, 0xd4, 0xc8, 0xfc, 0x96, 0x35, 0x96, 0x27, 0xbd,
    0x07, 0x5c, 0x9b, 0xf3, 0xec, 0xf1, 0xa5, 0x9a, 0x4f, 0xeb, 0xa7, 0xd7, 0xe1, 0x72, 0xdf, 0x1e, 0x8f,
    0xfc, 0xe6, 0xf0, 0x4b, 0x89, 0xc8, 0xf2, 0xeb, 0xed, 0x89, 0xa4, 0x64, 0xe3, 0x92,
};

extern const uint8_t sTestCert_Node01_01_PublicKey_Len = sizeof(sTestCert_Node01_01_PublicKey);

extern const uint8_t sTestCert_Node01_01_PrivateKey[] = {
    0x0d, 0x2b, 0x6c, 0x54, 0x6a, 0xf0, 0xf2, 0x5c, 0xf3, 0x3d, 0xfb, 0xd1, 0xce, 0xd9, 0xf4, 0xde,
    0x4e, 0xd5, 0x03, 0xb1, 0xaa, 0x22, 0x24, 0xda, 0x0b, 0x72, 0xfb, 0x79, 0x5e, 0x4a, 0x33, 0x11,
};

extern const uint8_t sTestCert_Node01_01_PrivateKey_Len = sizeof(sTestCert_Node01_01_PrivateKey);

extern const uint8_t sTestCert_Node01_01_SubjectKeyId[] = {
    0xBB, 0x27, 0xE6, 0xC1, 0xC1, 0x00, 0x6C, 0xAC, 0x00, 0x16, 0xF2, 0x14, 0xFB, 0x52, 0xD8, 0x6D, 0x35, 0x5C, 0xFA, 0x67,
};

extern const uint8_t sTestCert_Node01_01_SubjectKeyId_Len = sizeof(sTestCert_Node01_01_SubjectKeyId);

/**************  Test Node01_02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 8420264806541432176 (0x74daca3aa4a01570)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.4 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00010002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:ef:d1:0a:14:55:7a:93:e3:09:96:b4:04:f9:6d:
                    76:0e:7c:b1:3b:07:e6:74:f1:6e:35:20:19:f7:5e:
                    7a:a4:bf:6d:57:29:2b:69:17:53:e5:2b:2c:c0:e7:
                    3c:11:2f:fa:50:92:93:bf:02:f4:5f:19:93:65:00:
                    2d:4a:06:37:33
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                DE:04:F1:2E:BE:8B:C4:17:1F:9D:67:51:26:DD:AA:CA:E7:42:1E:40
            X509v3 Authority Key Identifier:
                keyid:FF:29:80:84:48:57:2D:44:C7:3D:40:6B:88:FF:FE:39:12:89:36:95

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:21:00:bc:3f:08:46:25:82:24:1b:01:01:8a:73:6b:
         3a:e4:4b:51:2a:ab:87:14:61:b9:13:99:66:3a:18:42:6f:30:
         a6:02:20:1b:54:63:de:ee:c5:30:f0:cf:8f:e1:42:eb:b0:73:
         32:a8:a6:ef:a1:68:f0:a2:8c:43:70:4f:08:b5:1b:c1:d9

-----BEGIN CERTIFICATE-----
MIIB4DCCAYagAwIBAgIIdNrKOqSgFXAwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQQMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjBEMSAwHgYKKwYBBAGConwBAQwQREVERURFREUwMDAxMDAwMjEgMB4G
CisGAQQBgqJ8AQUMEEZBQjAwMDAwMDAwMDAwMUQwWTATBgcqhkjOPQIBBggqhkjO
PQMBBwNCAATv0QoUVXqT4wmWtAT5bXYOfLE7B+Z08W41IBn3Xnqkv21XKStpF1Pl
KyzA5zwRL/pQkpO/AvRfGZNlAC1KBjczo4GDMIGAMAwGA1UdEwEB/wQCMAAwDgYD
VR0PAQH/BAQDAgWgMCAGA1UdJQEB/wQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAd
BgNVHQ4EFgQU3gTxLr6LxBcfnWdRJt2qyudCHkAwHwYDVR0jBBgwFoAU/ymAhEhX
LUTHPUBriP/+ORKJNpUwCgYIKoZIzj0EAwIDSAAwRQIhALw/CEYlgiQbAQGKc2s6
5EtRKquHFGG5E5lmOhhCbzCmAiAbVGPe7sUw8M+P4ULrsHMyqKbvoWjwooxDcE8I
tRvB2Q==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIBrlSFnf+mqUNiReyQRC4tY53vBSngeCAjRLh+8kA2tyoAoGCCqGSM49
AwEHoUQDQgAE79EKFFV6k+MJlrQE+W12DnyxOwfmdPFuNSAZ9156pL9tVykraRdT
5SsswOc8ES/6UJKTvwL0XxmTZQAtSgY3Mw==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node01_02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x74, 0xda, 0xca, 0x3a, 0xa4, 0xa0, 0x15, 0x70, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x14, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01,
    0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x11, 0x02, 0x00, 0x01, 0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15,
    0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0xef,
    0xd1, 0x0a, 0x14, 0x55, 0x7a, 0x93, 0xe3, 0x09, 0x96, 0xb4, 0x04, 0xf9, 0x6d, 0x76, 0x0e, 0x7c, 0xb1, 0x3b, 0x07, 0xe6,
    0x74, 0xf1, 0x6e, 0x35, 0x20, 0x19, 0xf7, 0x5e, 0x7a, 0xa4, 0xbf, 0x6d, 0x57, 0x29, 0x2b, 0x69, 0x17, 0x53, 0xe5, 0x2b,
    0x2c, 0xc0, 0xe7, 0x3c, 0x11, 0x2f, 0xfa, 0x50, 0x92, 0x93, 0xbf, 0x02, 0xf4, 0x5f, 0x19, 0x93, 0x65, 0x00, 0x2d, 0x4a,
    0x06, 0x37, 0x33, 0x35, 0x80, 0x28, 0x01, 0x18, 0x24, 0x81, 0x05, 0x36, 0x82, 0x04, 0x02, 0x04, 0x01, 0x18, 0x30, 0x83,
    0x14, 0xde, 0x04, 0xf1, 0x2e, 0xbe, 0x8b, 0xc4, 0x17, 0x1f, 0x9d, 0x67, 0x51, 0x26, 0xdd, 0xaa, 0xca, 0xe7, 0x42, 0x1e,
    0x40, 0x30, 0x84, 0x14, 0xff, 0x29, 0x80, 0x84, 0x48, 0x57, 0x2d, 0x44, 0xc7, 0x3d, 0x40, 0x6b, 0x88, 0xff, 0xfe, 0x39,
    0x12, 0x89, 0x36, 0x95, 0x35, 0x0a, 0x30, 0x01, 0x21, 0x00, 0xbc, 0x3f, 0x08, 0x46, 0x25, 0x82, 0x24, 0x1b, 0x01, 0x01,
    0x8a, 0x73, 0x6b, 0x3a, 0xe4, 0x4b, 0x51, 0x2a, 0xab, 0x87, 0x14, 0x61, 0xb9, 0x13, 0x99, 0x66, 0x3a, 0x18, 0x42, 0x6f,
    0x30, 0xa6, 0x30, 0x02, 0x20, 0x1b, 0x54, 0x63, 0xde, 0xee, 0xc5, 0x30, 0xf0, 0xcf, 0x8f, 0xe1, 0x42, 0xeb, 0xb0, 0x73,
    0x32, 0xa8, 0xa6, 0xef, 0xa1, 0x68, 0xf0, 0xa2, 0x8c, 0x43, 0x70, 0x4f, 0x08, 0xb5, 0x1b, 0xc1, 0xd9, 0x18, 0x18,
};

extern const uint32_t sTestCert_Node01_02_Chip_Len = sizeof(sTestCert_Node01_02_Chip);

extern const uint8_t sTestCert_Node01_02_DER[] = {
    0x30, 0x82, 0x01, 0xe0, 0x30, 0x82, 0x01, 0x86, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x74, 0xda, 0xca, 0x3a, 0xa4, 0xa0,
    0x15, 0x70, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44,
    0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xef, 0xd1, 0x0a, 0x14, 0x55, 0x7a, 0x93, 0xe3, 0x09, 0x96,
    0xb4, 0x04, 0xf9, 0x6d, 0x76, 0x0e, 0x7c, 0xb1, 0x3b, 0x07, 0xe6, 0x74, 0xf1, 0x6e, 0x35, 0x20, 0x19, 0xf7, 0x5e, 0x7a, 0xa4,
    0xbf, 0x6d, 0x57, 0x29, 0x2b, 0x69, 0x17, 0x53, 0xe5, 0x2b, 0x2c, 0xc0, 0xe7, 0x3c, 0x11, 0x2f, 0xfa, 0x50, 0x92, 0x93, 0xbf,
    0x02, 0xf4, 0x5f, 0x19, 0x93, 0x65, 0x00, 0x2d, 0x4a, 0x06, 0x37, 0x33, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06,
    0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff,
    0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06,
    0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d,
    0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xde, 0x04, 0xf1, 0x2e, 0xbe, 0x8b, 0xc4, 0x17, 0x1f, 0x9d, 0x67, 0x51,
    0x26, 0xdd, 0xaa, 0xca, 0xe7, 0x42, 0x1e, 0x40, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
    0xff, 0x29, 0x80, 0x84, 0x48, 0x57, 0x2d, 0x44, 0xc7, 0x3d, 0x40, 0x6b, 0x88, 0xff, 0xfe, 0x39, 0x12, 0x89, 0x36, 0x95, 0x30,
    0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xbc, 0x3f,
    0x08, 0x46, 0x25, 0x82, 0x24, 0x1b, 0x01, 0x01, 0x8a, 0x73, 0x6b, 0x3a, 0xe4, 0x4b, 0x51, 0x2a, 0xab, 0x87, 0x14, 0x61, 0xb9,
    0x13, 0x99, 0x66, 0x3a, 0x18, 0x42, 0x6f, 0x30, 0xa6, 0x02, 0x20, 0x1b, 0x54, 0x63, 0xde, 0xee, 0xc5, 0x30, 0xf0, 0xcf, 0x8f,
    0xe1, 0x42, 0xeb, 0xb0, 0x73, 0x32, 0xa8, 0xa6, 0xef, 0xa1, 0x68, 0xf0, 0xa2, 0x8c, 0x43, 0x70, 0x4f, 0x08, 0xb5, 0x1b, 0xc1,
    0xd9,
};

extern const uint32_t sTestCert_Node01_02_DER_Len = sizeof(sTestCert_Node01_02_DER);

extern const uint8_t sTestCert_Node01_02_PublicKey[] = {
    0x04, 0xef, 0xd1, 0x0a, 0x14, 0x55, 0x7a, 0x93, 0xe3, 0x09, 0x96, 0xb4, 0x04, 0xf9, 0x6d, 0x76, 0x0e,
    0x7c, 0xb1, 0x3b, 0x07, 0xe6, 0x74, 0xf1, 0x6e, 0x35, 0x20, 0x19, 0xf7, 0x5e, 0x7a, 0xa4, 0xbf, 0x6d,
    0x57, 0x29, 0x2b, 0x69, 0x17, 0x53, 0xe5, 0x2b, 0x2c, 0xc0, 0xe7, 0x3c, 0x11, 0x2f, 0xfa, 0x50, 0x92,
    0x93, 0xbf, 0x02, 0xf4, 0x5f, 0x19, 0x93, 0x65, 0x00, 0x2d, 0x4a, 0x06, 0x37, 0x33,
};

extern const uint8_t sTestCert_Node01_02_PublicKey_Len = sizeof(sTestCert_Node01_02_PublicKey);

extern const uint8_t sTestCert_Node01_02_PrivateKey[] = {
    0x1a, 0xe5, 0x48, 0x59, 0xdf, 0xfa, 0x6a, 0x94, 0x36, 0x24, 0x5e, 0xc9, 0x04, 0x42, 0xe2, 0xd6,
    0x39, 0xde, 0xf0, 0x52, 0x9e, 0x07, 0x82, 0x02, 0x34, 0x4b, 0x87, 0xef, 0x24, 0x03, 0x6b, 0x72,
};

extern const uint8_t sTestCert_Node01_02_PrivateKey_Len = sizeof(sTestCert_Node01_02_PrivateKey);

extern const uint8_t sTestCert_Node01_02_SubjectKeyId[] = {
    0xDE, 0x04, 0xF1, 0x2E, 0xBE, 0x8B, 0xC4, 0x17, 0x1F, 0x9D, 0x67, 0x51, 0x26, 0xDD, 0xAA, 0xCA, 0xE7, 0x42, 0x1E, 0x40,
};

extern const uint8_t sTestCert_Node01_02_SubjectKeyId_Len = sizeof(sTestCert_Node01_02_SubjectKeyId);

/**************  Test Node02_01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 4953882248280345741 (0x44bfb9a873dd0c8d)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020001, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:d4:c4:ec:92:83:58:59:48:95:0f:c2:e8:04:73:
                    dd:cf:3e:c3:3d:51:77:fd:18:26:15:2e:0b:bd:0d:
                    57:21:61:38:90:57:93:ef:7a:f9:37:c1:fa:10:6d:
                    19:bf:e4:f6:99:21:2c:b1:04:d7:15:87:e8:13:ec:
                    8c:7c:19:4e:67
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                3F:FA:13:CF:A1:13:98:8C:EE:98:D9:31:5B:32:F5:EA:04:D1:B8:2B
            X509v3 Authority Key Identifier:
                keyid:E8:62:8F:AE:DC:25:7F:05:6B:44:8F:D6:A5:CA:28:CC:15:D1:30:D7

    Signature Algorithm: ecdsa-with-SHA256
         30:46:02:21:00:c1:b4:7d:ea:ba:ed:9d:15:17:52:ec:00:88:
         74:68:5a:4d:a2:72:e1:ff:06:1c:e7:c7:df:3c:70:8d:e1:1f:
         b2:02:21:00:b9:71:20:e5:57:31:dd:4d:09:c4:4b:a3:99:5f:
         00:d0:d2:74:9b:32:68:8c:60:4a:39:48:cd:07:e6:a1:0f:09

-----BEGIN CERTIFICATE-----
MIICAzCCAaigAwIBAgIIRL+5qHPdDI0wCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQEMEERFREVERURFMDAwMjAwMDExIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE1MTskoNY
WUiVD8LoBHPdzz7DPVF3/RgmFS4LvQ1XIWE4kFeT73r5N8H6EG0Zv+T2mSEssQTX
FYfoE+yMfBlOZ6OBgzCBgDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIFoDAg
BgNVHSUBAf8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFD/6E8+h
E5iM7pjZMVsy9eoE0bgrMB8GA1UdIwQYMBaAFOhij67cJX8Fa0SP1qXKKMwV0TDX
MAoGCCqGSM49BAMCA0kAMEYCIQDBtH3quu2dFRdS7ACIdGhaTaJy4f8GHOfH3zxw
jeEfsgIhALlxIOVXMd1NCcRLo5lfANDSdJsyaIxgSjlIzQfmoQ8J
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIGwKcrzuTN+IrvTGbdeXLOYlnYzyaVePMbisW7yDUYRZoAoGCCqGSM49
AwEHoUQDQgAE1MTskoNYWUiVD8LoBHPdzz7DPVF3/RgmFS4LvQ1XIWE4kFeT73r5
N8H6EG0Zv+T2mSEssQTXFYfoE+yMfBlOZw==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x44, 0xbf, 0xb9, 0xa8, 0x73, 0xdd, 0x0c, 0x8d, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x11, 0x01, 0x00, 0x02,
    0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08,
    0x01, 0x30, 0x09, 0x41, 0x04, 0xd4, 0xc4, 0xec, 0x92, 0x83, 0x58, 0x59, 0x48, 0x95, 0x0f, 0xc2, 0xe8, 0x04, 0x73, 0xdd, 0xcf,
    0x3e, 0xc3, 0x3d, 0x51, 0x77, 0xfd, 0x18, 0x26, 0x15, 0x2e, 0x0b, 0xbd, 0x0d, 0x57, 0x21, 0x61, 0x38, 0x90, 0x57, 0x93, 0xef,
    0x7a, 0xf9, 0x37, 0xc1, 0xfa, 0x10, 0x6d, 0x19, 0xbf, 0xe4, 0xf6, 0x99, 0x21, 0x2c, 0xb1, 0x04, 0xd7, 0x15, 0x87, 0xe8, 0x13,
    0xec, 0x8c, 0x7c, 0x19, 0x4e, 0x67, 0x35, 0x80, 0x28, 0x01, 0x18, 0x24, 0x81, 0x05, 0x36, 0x82, 0x04, 0x02, 0x04, 0x01, 0x18,
    0x30, 0x83, 0x14, 0x3f, 0xfa, 0x13, 0xcf, 0xa1, 0x13, 0x98, 0x8c, 0xee, 0x98, 0xd9, 0x31, 0x5b, 0x32, 0xf5, 0xea, 0x04, 0xd1,
    0xb8, 0x2b, 0x30, 0x84, 0x14, 0xe8, 0x62, 0x8f, 0xae, 0xdc, 0x25, 0x7f, 0x05, 0x6b, 0x44, 0x8f, 0xd6, 0xa5, 0xca, 0x28, 0xcc,
    0x15, 0xd1, 0x30, 0xd7, 0x35, 0x0a, 0x30, 0x01, 0x21, 0x00, 0xc1, 0xb4, 0x7d, 0xea, 0xba, 0xed, 0x9d, 0x15, 0x17, 0x52, 0xec,
    0x00, 0x88, 0x74, 0x68, 0x5a, 0x4d, 0xa2, 0x72, 0xe1, 0xff, 0x06, 0x1c, 0xe7, 0xc7, 0xdf, 0x3c, 0x70, 0x8d, 0xe1, 0x1f, 0xb2,
    0x30, 0x02, 0x21, 0x00, 0xb9, 0x71, 0x20, 0xe5, 0x57, 0x31, 0xdd, 0x4d, 0x09, 0xc4, 0x4b, 0xa3, 0x99, 0x5f, 0x00, 0xd0, 0xd2,
    0x74, 0x9b, 0x32, 0x68, 0x8c, 0x60, 0x4a, 0x39, 0x48, 0xcd, 0x07, 0xe6, 0xa1, 0x0f, 0x09, 0x18, 0x18,
};

extern const uint32_t sTestCert_Node02_01_Chip_Len = sizeof(sTestCert_Node02_01_Chip);

extern const uint8_t sTestCert_Node02_01_DER[] = {
    0x30, 0x82, 0x02, 0x03, 0x30, 0x82, 0x01, 0xa8, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x44, 0xbf, 0xb9, 0xa8, 0x73, 0xdd,
    0x0c, 0x8d, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30,
    0x32, 0x30, 0x30, 0x30, 0x31, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0xd4, 0xc4, 0xec, 0x92, 0x83, 0x58, 0x59, 0x48, 0x95, 0x0f, 0xc2, 0xe8, 0x04, 0x73, 0xdd, 0xcf, 0x3e, 0xc3,
    0x3d, 0x51, 0x77, 0xfd, 0x18, 0x26, 0x15, 0x2e, 0x0b, 0xbd, 0x0d, 0x57, 0x21, 0x61, 0x38, 0x90, 0x57, 0x93, 0xef, 0x7a, 0xf9,
    0x37, 0xc1, 0xfa, 0x10, 0x6d, 0x19, 0xbf, 0xe4, 0xf6, 0x99, 0x21, 0x2c, 0xb1, 0x04, 0xd7, 0x15, 0x87, 0xe8, 0x13, 0xec, 0x8c,
    0x7c, 0x19, 0x4e, 0x67, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04,
    0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20,
    0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03,
    0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04,
    0x14, 0x3f, 0xfa, 0x13, 0xcf, 0xa1, 0x13, 0x98, 0x8c, 0xee, 0x98, 0xd9, 0x31, 0x5b, 0x32, 0xf5, 0xea, 0x04, 0xd1, 0xb8, 0x2b,
    0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xe8, 0x62, 0x8f, 0xae, 0xdc, 0x25, 0x7f, 0x05,
    0x6b, 0x44, 0x8f, 0xd6, 0xa5, 0xca, 0x28, 0xcc, 0x15, 0xd1, 0x30, 0xd7, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,
    0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0xc1, 0xb4, 0x7d, 0xea, 0xba, 0xed, 0x9d, 0x15, 0x17, 0x52,
    0xec, 0x00, 0x88, 0x74, 0x68, 0x5a, 0x4d, 0xa2, 0x72, 0xe1, 0xff, 0x06, 0x1c, 0xe7, 0xc7, 0xdf, 0x3c, 0x70, 0x8d, 0xe1, 0x1f,
    0xb2, 0x02, 0x21, 0x00, 0xb9, 0x71, 0x20, 0xe5, 0x57, 0x31, 0xdd, 0x4d, 0x09, 0xc4, 0x4b, 0xa3, 0x99, 0x5f, 0x00, 0xd0, 0xd2,
    0x74, 0x9b, 0x32, 0x68, 0x8c, 0x60, 0x4a, 0x39, 0x48, 0xcd, 0x07, 0xe6, 0xa1, 0x0f, 0x09,
};

extern const uint32_t sTestCert_Node02_01_DER_Len = sizeof(sTestCert_Node02_01_DER);

extern const uint8_t sTestCert_Node02_01_PublicKey[] = {
    0x04, 0xd4, 0xc4, 0xec, 0x92, 0x83, 0x58, 0x59, 0x48, 0x95, 0x0f, 0xc2, 0xe8, 0x04, 0x73, 0xdd, 0xcf,
    0x3e, 0xc3, 0x3d, 0x51, 0x77, 0xfd, 0x18, 0x26, 0x15, 0x2e, 0x0b, 0xbd, 0x0d, 0x57, 0x21, 0x61, 0x38,
    0x90, 0x57, 0x93, 0xef, 0x7a, 0xf9, 0x37, 0xc1, 0xfa, 0x10, 0x6d, 0x19, 0xbf, 0xe4, 0xf6, 0x99, 0x21,
    0x2c, 0xb1, 0x04, 0xd7, 0x15, 0x87, 0xe8, 0x13, 0xec, 0x8c, 0x7c, 0x19, 0x4e, 0x67,
};

extern const uint8_t sTestCert_Node02_01_PublicKey_Len = sizeof(sTestCert_Node02_01_PublicKey);

extern const uint8_t sTestCert_Node02_01_PrivateKey[] = {
    0x6c, 0x0a, 0x72, 0xbc, 0xee, 0x4c, 0xdf, 0x88, 0xae, 0xf4, 0xc6, 0x6d, 0xd7, 0x97, 0x2c, 0xe6,
    0x25, 0x9d, 0x8c, 0xf2, 0x69, 0x57, 0x8f, 0x31, 0xb8, 0xac, 0x5b, 0xbc, 0x83, 0x51, 0x84, 0x59,
};

extern const uint8_t sTestCert_Node02_01_PrivateKey_Len = sizeof(sTestCert_Node02_01_PrivateKey);

extern const uint8_t sTestCert_Node02_01_SubjectKeyId[] = {
    0x3F, 0xFA, 0x13, 0xCF, 0xA1, 0x13, 0x98, 0x8C, 0xEE, 0x98, 0xD9, 0x31, 0x5B, 0x32, 0xF5, 0xEA, 0x04, 0xD1, 0xB8, 0x2B,
};

extern const uint8_t sTestCert_Node02_01_SubjectKeyId_Len = sizeof(sTestCert_Node02_01_SubjectKeyId);

/**************  Test Node02_02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 7953813037613028283 (0x6e619ed10ccb93bb)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020002, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D, CN = TEST CERT COMMON NAME Attr
for Node02_02 Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub:
                    04:80:73:c3:32:fc:43:0e:03:30:7d:96:15:d6:6b:
                    d4:17:d3:0c:32:bb:4b:e7:71:98:93:9b:75:5e:08:
                    8d:c8:85:14:86:ae:b6:b4:4a:16:a2:c4:2a:c5:dc:
                    2b:fc:e6:b1:f4:82:69:97:df:1b:ed:a3:3f:0b:0f:
                    ea:bd:84:14:65
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                95:76:FA:3E:89:94:58:B5:51:33:00:DA:EB:70:25:AE:F9:E8:81:12
            X509v3 Authority Key Identifier:
                keyid:E8:62:8F:AE:DC:25:7F:05:6B:44:8F:D6:A5:CA:28:CC:15:D1:30:D7

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:21:00:92:51:05:c6:a6:81:29:e1:73:a3:76:cb:2f:
         f6:df:20:96:1a:28:5d:80:07:dc:c8:c9:4f:79:ca:b5:e0:d2:
         12:02:20:3b:9a:bb:77:14:75:a2:0b:1d:7b:93:e5:21:96:cd:
         54:3f:13:27:ce:26:18:51:49:ea:a7:4e:05:f7:ce:7d:d0

-----BEGIN CERTIFICATE-----
MIICNTCCAdugAwIBAgIIbmGe0QzLk7swCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowdzEgMB4G
CisGAQQBgqJ8AQEMEERFREVERURFMDAwMjAwMDIxIDAeBgorBgEEAYKifAEFDBBG
QUIwMDAwMDAwMDAwMDFEMTEwLwYDVQQDDChURVNUIENFUlQgQ09NTU9OIE5BTUUg
QXR0ciBmb3IgTm9kZTAyXzAyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEgHPD
MvxDDgMwfZYV1mvUF9MMMrtL53GYk5t1XgiNyIUUhq62tEoWosQqxdwr/Oax9IJp
l98b7aM/Cw/qvYQUZaOBgzCBgDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIF
oDAgBgNVHSUBAf8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFJV2
+j6JlFi1UTMA2utwJa756IESMB8GA1UdIwQYMBaAFOhij67cJX8Fa0SP1qXKKMwV
0TDXMAoGCCqGSM49BAMCA0gAMEUCIQCSUQXGpoEp4XOjdssv9t8glhooXYAH3MjJ
T3nKteDSEgIgO5q7dxR1ogsde5PlIZbNVD8TJ84mGFFJ6qdOBffOfdA=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIHxrv1djrbEDhG1pzl7RMmsZUeLnnql1gme4XT5RkezgoAoGCCqGSM49
AwEHoUQDQgAEgHPDMvxDDgMwfZYV1mvUF9MMMrtL53GYk5t1XgiNyIUUhq62tEoW
osQqxdwr/Oax9IJpl98b7aM/Cw/qvYQUZQ==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x6e, 0x61, 0x9e, 0xd1, 0x0c, 0xcb, 0x93, 0xbb, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x11, 0x02, 0x00, 0x02,
    0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x2c, 0x01, 0x28, 0x54, 0x45, 0x53,
    0x54, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x20, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x41, 0x74,
    0x74, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4e, 0x6f, 0x64, 0x65, 0x30, 0x32, 0x5f, 0x30, 0x32, 0x18, 0x24, 0x07, 0x01, 0x24,
    0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x80, 0x73, 0xc3, 0x32, 0xfc, 0x43, 0x0e, 0x03, 0x30, 0x7d, 0x96, 0x15, 0xd6, 0x6b, 0xd4,
    0x17, 0xd3, 0x0c, 0x32, 0xbb, 0x4b, 0xe7, 0x71, 0x98, 0x93, 0x9b, 0x75, 0x5e, 0x08, 0x8d, 0xc8, 0x85, 0x14, 0x86, 0xae, 0xb6,
    0xb4, 0x4a, 0x16, 0xa2, 0xc4, 0x2a, 0xc5, 0xdc, 0x2b, 0xfc, 0xe6, 0xb1, 0xf4, 0x82, 0x69, 0x97, 0xdf, 0x1b, 0xed, 0xa3, 0x3f,
    0x0b, 0x0f, 0xea, 0xbd, 0x84, 0x14, 0x65, 0x35, 0x80, 0x28, 0x01, 0x18, 0x24, 0x81, 0x05, 0x36, 0x82, 0x04, 0x02, 0x04, 0x01,
    0x18, 0x30, 0x83, 0x14, 0x95, 0x76, 0xfa, 0x3e, 0x89, 0x94, 0x58, 0xb5, 0x51, 0x33, 0x00, 0xda, 0xeb, 0x70, 0x25, 0xae, 0xf9,
    0xe8, 0x81, 0x12, 0x30, 0x84, 0x14, 0xe8, 0x62, 0x8f, 0xae, 0xdc, 0x25, 0x7f, 0x05, 0x6b, 0x44, 0x8f, 0xd6, 0xa5, 0xca, 0x28,
    0xcc, 0x15, 0xd1, 0x30, 0xd7, 0x35, 0x0a, 0x30, 0x01, 0x21, 0x00, 0x92, 0x51, 0x05, 0xc6, 0xa6, 0x81, 0x29, 0xe1, 0x73, 0xa3,
    0x76, 0xcb, 0x2f, 0xf6, 0xdf, 0x20, 0x96, 0x1a, 0x28, 0x5d, 0x80, 0x07, 0xdc, 0xc8, 0xc9, 0x4f, 0x79, 0xca, 0xb5, 0xe0, 0xd2,
    0x12, 0x30, 0x02, 0x20, 0x3b, 0x9a, 0xbb, 0x77, 0x14, 0x75, 0xa2, 0x0b, 0x1d, 0x7b, 0x93, 0xe5, 0x21, 0x96, 0xcd, 0x54, 0x3f,
    0x13, 0x27, 0xce, 0x26, 0x18, 0x51, 0x49, 0xea, 0xa7, 0x4e, 0x05, 0xf7, 0xce, 0x7d, 0xd0, 0x18, 0x18,
};

extern const uint32_t sTestCert_Node02_02_Chip_Len = sizeof(sTestCert_Node02_02_Chip);

extern const uint8_t sTestCert_Node02_02_DER[] = {
    0x30, 0x82, 0x02, 0x35, 0x30, 0x82, 0x01, 0xdb, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x6e, 0x61, 0x9e, 0xd1, 0x0c, 0xcb,
    0x93, 0xbb, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x77, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30,
    0x32, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x31, 0x31, 0x30,
    0x2f, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x28, 0x54, 0x45, 0x53, 0x54, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x43, 0x4f, 0x4d,
    0x4d, 0x4f, 0x4e, 0x20, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x41, 0x74, 0x74, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4e, 0x6f, 0x64,
    0x65, 0x30, 0x32, 0x5f, 0x30, 0x32, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08,
    0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x80, 0x73, 0xc3, 0x32, 0xfc, 0x43, 0x0e, 0x03, 0x30,
    0x7d, 0x96, 0x15, 0xd6, 0x6b, 0xd4, 0x17, 0xd3, 0x0c, 0x32, 0xbb, 0x4b, 0xe7, 0x71, 0x98, 0x93, 0x9b, 0x75, 0x5e, 0x08, 0x8d,
    0xc8, 0x85, 0x14, 0x86, 0xae, 0xb6, 0xb4, 0x4a, 0x16, 0xa2, 0xc4, 0x2a, 0xc5, 0xdc, 0x2b, 0xfc, 0xe6, 0xb1, 0xf4, 0x82, 0x69,
    0x97, 0xdf, 0x1b, 0xed, 0xa3, 0x3f, 0x0b, 0x0f, 0xea, 0xbd, 0x84, 0x14, 0x65, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c,
    0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01,
    0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14,
    0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x95, 0x76, 0xfa, 0x3e, 0x89, 0x94, 0x58, 0xb5, 0x51, 0x33, 0x00,
    0xda, 0xeb, 0x70, 0x25, 0xae, 0xf9, 0xe8, 0x81, 0x12, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0xe8, 0x62, 0x8f, 0xae, 0xdc, 0x25, 0x7f, 0x05, 0x6b, 0x44, 0x8f, 0xd6, 0xa5, 0xca, 0x28, 0xcc, 0x15, 0xd1, 0x30, 0xd7,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0x92,
    0x51, 0x05, 0xc6, 0xa6, 0x81, 0x29, 0xe1, 0x73, 0xa3, 0x76, 0xcb, 0x2f, 0xf6, 0xdf, 0x20, 0x96, 0x1a, 0x28, 0x5d, 0x80, 0x07,
    0xdc, 0xc8, 0xc9, 0x4f, 0x79, 0xca, 0xb5, 0xe0, 0xd2, 0x12, 0x02, 0x20, 0x3b, 0x9a, 0xbb, 0x77, 0x14, 0x75, 0xa2, 0x0b, 0x1d,
    0x7b, 0x93, 0xe5, 0x21, 0x96, 0xcd, 0x54, 0x3f, 0x13, 0x27, 0xce, 0x26, 0x18, 0x51, 0x49, 0xea, 0xa7, 0x4e, 0x05, 0xf7, 0xce,
    0x7d, 0xd0,
};

extern const uint32_t sTestCert_Node02_02_DER_Len = sizeof(sTestCert_Node02_02_DER);

extern const uint8_t sTestCert_Node02_02_PublicKey[] = {
    0x04, 0x80, 0x73, 0xc3, 0x32, 0xfc, 0x43, 0x0e, 0x03, 0x30, 0x7d, 0x96, 0x15, 0xd6, 0x6b, 0xd4, 0x17,
    0xd3, 0x0c, 0x32, 0xbb, 0x4b, 0xe7, 0x71, 0x98, 0x93, 0x9b, 0x75, 0x5e, 0x08, 0x8d, 0xc8, 0x85, 0x14,
    0x86, 0xae, 0xb6, 0xb4, 0x4a, 0x16, 0xa2, 0xc4, 0x2a, 0xc5, 0xdc, 0x2b, 0xfc, 0xe6, 0xb1, 0xf4, 0x82,
    0x69, 0x97, 0xdf, 0x1b, 0xed, 0xa3, 0x3f, 0x0b, 0x0f, 0xea, 0xbd, 0x84, 0x14, 0x65,
};

extern const uint8_t sTestCert_Node02_02_PublicKey_Len = sizeof(sTestCert_Node02_02_PublicKey);

extern const uint8_t sTestCert_Node02_02_PrivateKey[] = {
    0x7c, 0x6b, 0xbf, 0x57, 0x63, 0xad, 0xb1, 0x03, 0x84, 0x6d, 0x69, 0xce, 0x5e, 0xd1, 0x32, 0x6b,
    0x19, 0x51, 0xe2, 0xe7, 0x9e, 0xa9, 0x75, 0x82, 0x67, 0xb8, 0x5d, 0x3e, 0x51, 0x91, 0xec, 0xe0,
};

extern const uint8_t sTestCert_Node02_02_PrivateKey_Len = sizeof(sTestCert_Node02_02_PrivateKey);

extern const uint8_t sTestCert_Node02_02_SubjectKeyId[] = {
    0x95, 0x76, 0xFA, 0x3E, 0x89, 0x94, 0x58, 0xB5, 0x51, 0x33, 0x00, 0xDA, 0xEB, 0x70, 0x25, 0xAE, 0xF9, 0xE8, 0x81, 0x12,
};

extern const uint8_t sTestCert_Node02_02_SubjectKeyId_Len = sizeof(sTestCert_Node02_02_SubjectKeyId);

/**************  Test Node02_03 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 6117142293590843176 (0x54e474818a001f28)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020003, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D, CN = Node02_03 Test
Certificate, 1.3.6.1.4.1.37244.1.6 = A001B001, 1.3.6.1.4.1.37244.1.7 = A001B002 Subject Public Key Info: Public Key Algorithm:
id-ecPublicKey Public-Key: (256 bit) pub: 04:df:a1:6d:c2:2e:44:c7:b4:78:81:fe:61:5b:33:
                    2c:31:9a:bb:18:b6:1d:20:aa:d4:00:68:9e:4f:f9:
                    2b:a8:23:f0:6a:a6:37:ad:18:ac:5c:95:76:72:4a:
                    2f:cf:a1:98:89:80:e7:f6:fe:9c:7f:47:db:21:c4:
                    83:3f:fa:fd:4c
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                86:1E:84:E7:57:2D:17:EB:93:B4:04:E9:50:94:B5:D6:BD:81:34:07
            X509v3 Authority Key Identifier:
                keyid:E8:62:8F:AE:DC:25:7F:05:6B:44:8F:D6:A5:CA:28:CC:15:D1:30:D7

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:0e:4d:4d:8c:15:5f:56:ee:4a:3f:31:c4:85:44:
         7c:8d:60:19:2e:37:b2:61:64:01:6a:fa:14:21:3c:10:b7:8e:
         02:20:26:17:64:22:fd:24:cf:cb:1c:5e:12:56:7c:1d:4f:48:
         4c:46:16:b0:c6:15:8b:ac:0c:36:a9:08:59:28:72:6c

-----BEGIN CERTIFICATE-----
MIICWzCCAgKgAwIBAgIIVOR0gYoAHygwCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowgZ0xIDAe
BgorBgEEAYKifAEBDBBERURFREVERTAwMDIwMDAzMSAwHgYKKwYBBAGConwBBQwQ
RkFCMDAwMDAwMDAwMDAxRDEjMCEGA1UEAwwaTm9kZTAyXzAzIFRlc3QgQ2VydGlm
aWNhdGUxGDAWBgorBgEEAYKifAEGDAhBMDAxQjAwMTEYMBYGCisGAQQBgqJ8AQcM
CEEwMDFCMDAyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE36Ftwi5Ex7R4gf5h
WzMsMZq7GLYdIKrUAGieT/krqCPwaqY3rRisXJV2ckovz6GYiYDn9v6cf0fbIcSD
P/r9TKOBgzCBgDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIFoDAgBgNVHSUB
Af8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFIYehOdXLRfrk7QE
6VCUtda9gTQHMB8GA1UdIwQYMBaAFOhij67cJX8Fa0SP1qXKKMwV0TDXMAoGCCqG
SM49BAMCA0cAMEQCIA5NTYwVX1buSj8xxIVEfI1gGS43smFkAWr6FCE8ELeOAiAm
F2Qi/STPyxxeElZ8HU9ITEYWsMYVi6wMNqkIWShybA==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIIo/98GArhIxqX8Dl3FCJqWjXsAeQ6hityAPTY0JBtYtoAoGCCqGSM49
AwEHoUQDQgAE36Ftwi5Ex7R4gf5hWzMsMZq7GLYdIKrUAGieT/krqCPwaqY3rRis
XJV2ckovz6GYiYDn9v6cf0fbIcSDP/r9TA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_03_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x54, 0xe4, 0x74, 0x81, 0x8a, 0x00, 0x1f, 0x28, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x11, 0x03, 0x00, 0x02,
    0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x2c, 0x01, 0x1a, 0x4e, 0x6f, 0x64,
    0x65, 0x30, 0x32, 0x5f, 0x30, 0x33, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
    0x74, 0x65, 0x26, 0x16, 0x01, 0xb0, 0x01, 0xa0, 0x26, 0x17, 0x02, 0xb0, 0x01, 0xa0, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01,
    0x30, 0x09, 0x41, 0x04, 0xdf, 0xa1, 0x6d, 0xc2, 0x2e, 0x44, 0xc7, 0xb4, 0x78, 0x81, 0xfe, 0x61, 0x5b, 0x33, 0x2c, 0x31, 0x9a,
    0xbb, 0x18, 0xb6, 0x1d, 0x20, 0xaa, 0xd4, 0x00, 0x68, 0x9e, 0x4f, 0xf9, 0x2b, 0xa8, 0x23, 0xf0, 0x6a, 0xa6, 0x37, 0xad, 0x18,
    0xac, 0x5c, 0x95, 0x76, 0x72, 0x4a, 0x2f, 0xcf, 0xa1, 0x98, 0x89, 0x80, 0xe7, 0xf6, 0xfe, 0x9c, 0x7f, 0x47, 0xdb, 0x21, 0xc4,
    0x83, 0x3f, 0xfa, 0xfd, 0x4c, 0x35, 0x80, 0x28, 0x01, 0x18, 0x24, 0x81, 0x05, 0x36, 0x82, 0x04, 0x02, 0x04, 0x01, 0x18, 0x30,
    0x83, 0x14, 0x86, 0x1e, 0x84, 0xe7, 0x57, 0x2d, 0x17, 0xeb, 0x93, 0xb4, 0x04, 0xe9, 0x50, 0x94, 0xb5, 0xd6, 0xbd, 0x81, 0x34,
    0x07, 0x30, 0x84, 0x14, 0xe8, 0x62, 0x8f, 0xae, 0xdc, 0x25, 0x7f, 0x05, 0x6b, 0x44, 0x8f, 0xd6, 0xa5, 0xca, 0x28, 0xcc, 0x15,
    0xd1, 0x30, 0xd7, 0x35, 0x0a, 0x30, 0x01, 0x20, 0x0e, 0x4d, 0x4d, 0x8c, 0x15, 0x5f, 0x56, 0xee, 0x4a, 0x3f, 0x31, 0xc4, 0x85,
    0x44, 0x7c, 0x8d, 0x60, 0x19, 0x2e, 0x37, 0xb2, 0x61, 0x64, 0x01, 0x6a, 0xfa, 0x14, 0x21, 0x3c, 0x10, 0xb7, 0x8e, 0x30, 0x02,
    0x20, 0x26, 0x17, 0x64, 0x22, 0xfd, 0x24, 0xcf, 0xcb, 0x1c, 0x5e, 0x12, 0x56, 0x7c, 0x1d, 0x4f, 0x48, 0x4c, 0x46, 0x16, 0xb0,
    0xc6, 0x15, 0x8b, 0xac, 0x0c, 0x36, 0xa9, 0x08, 0x59, 0x28, 0x72, 0x6c, 0x18, 0x18,
};

extern const uint32_t sTestCert_Node02_03_Chip_Len = sizeof(sTestCert_Node02_03_Chip);

extern const uint8_t sTestCert_Node02_03_DER[] = {
    0x30, 0x82, 0x02, 0x5b, 0x30, 0x82, 0x02, 0x02, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x54, 0xe4, 0x74, 0x81, 0x8a, 0x00,
    0x1f, 0x28, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x81, 0x9d, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b,
    0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30,
    0x30, 0x32, 0x30, 0x30, 0x30, 0x33, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01,
    0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x31, 0x23,
    0x30, 0x21, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1a, 0x4e, 0x6f, 0x64, 0x65, 0x30, 0x32, 0x5f, 0x30, 0x33, 0x20, 0x54, 0x65,
    0x73, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x31, 0x18, 0x30, 0x16, 0x06, 0x0a, 0x2b,
    0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x06, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42, 0x30, 0x30, 0x31, 0x31, 0x18,
    0x30, 0x16, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x07, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42,
    0x30, 0x30, 0x32, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48,
    0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xdf, 0xa1, 0x6d, 0xc2, 0x2e, 0x44, 0xc7, 0xb4, 0x78, 0x81, 0xfe, 0x61,
    0x5b, 0x33, 0x2c, 0x31, 0x9a, 0xbb, 0x18, 0xb6, 0x1d, 0x20, 0xaa, 0xd4, 0x00, 0x68, 0x9e, 0x4f, 0xf9, 0x2b, 0xa8, 0x23, 0xf0,
    0x6a, 0xa6, 0x37, 0xad, 0x18, 0xac, 0x5c, 0x95, 0x76, 0x72, 0x4a, 0x2f, 0xcf, 0xa1, 0x98, 0x89, 0x80, 0xe7, 0xf6, 0xfe, 0x9c,
    0x7f, 0x47, 0xdb, 0x21, 0xc4, 0x83, 0x3f, 0xfa, 0xfd, 0x4c, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06, 0x03, 0x55,
    0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04,
    0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b,
    0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03,
    0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x86, 0x1e, 0x84, 0xe7, 0x57, 0x2d, 0x17, 0xeb, 0x93, 0xb4, 0x04, 0xe9, 0x50, 0x94,
    0xb5, 0xd6, 0xbd, 0x81, 0x34, 0x07, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xe8, 0x62,
    0x8f, 0xae, 0xdc, 0x25, 0x7f, 0x05, 0x6b, 0x44, 0x8f, 0xd6, 0xa5, 0xca, 0x28, 0xcc, 0x15, 0xd1, 0x30, 0xd7, 0x30, 0x0a, 0x06,
    0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x0e, 0x4d, 0x4d, 0x8c, 0x15,
    0x5f, 0x56, 0xee, 0x4a, 0x3f, 0x31, 0xc4, 0x85, 0x44, 0x7c, 0x8d, 0x60, 0x19, 0x2e, 0x37, 0xb2, 0x61, 0x64, 0x01, 0x6a, 0xfa,
    0x14, 0x21, 0x3c, 0x10, 0xb7, 0x8e, 0x02, 0x20, 0x26, 0x17, 0x64, 0x22, 0xfd, 0x24, 0xcf, 0xcb, 0x1c, 0x5e, 0x12, 0x56, 0x7c,
    0x1d, 0x4f, 0x48, 0x4c, 0x46, 0x16, 0xb0, 0xc6, 0x15, 0x8b, 0xac, 0x0c, 0x36, 0xa9, 0x08, 0x59, 0x28, 0x72, 0x6c,
};

extern const uint32_t sTestCert_Node02_03_DER_Len = sizeof(sTestCert_Node02_03_DER);

extern const uint8_t sTestCert_Node02_03_PublicKey[] = {
    0x04, 0xdf, 0xa1, 0x6d, 0xc2, 0x2e, 0x44, 0xc7, 0xb4, 0x78, 0x81, 0xfe, 0x61, 0x5b, 0x33, 0x2c, 0x31,
    0x9a, 0xbb, 0x18, 0xb6, 0x1d, 0x20, 0xaa, 0xd4, 0x00, 0x68, 0x9e, 0x4f, 0xf9, 0x2b, 0xa8, 0x23, 0xf0,
    0x6a, 0xa6, 0x37, 0xad, 0x18, 0xac, 0x5c, 0x95, 0x76, 0x72, 0x4a, 0x2f, 0xcf, 0xa1, 0x98, 0x89, 0x80,
    0xe7, 0xf6, 0xfe, 0x9c, 0x7f, 0x47, 0xdb, 0x21, 0xc4, 0x83, 0x3f, 0xfa, 0xfd, 0x4c,
};

extern const uint8_t sTestCert_Node02_03_PublicKey_Len = sizeof(sTestCert_Node02_03_PublicKey);

extern const uint8_t sTestCert_Node02_03_PrivateKey[] = {
    0x8a, 0x3f, 0xf7, 0xc1, 0x80, 0xae, 0x12, 0x31, 0xa9, 0x7f, 0x03, 0x97, 0x71, 0x42, 0x26, 0xa5,
    0xa3, 0x5e, 0xc0, 0x1e, 0x43, 0xa8, 0x62, 0xb7, 0x20, 0x0f, 0x4d, 0x8d, 0x09, 0x06, 0xd6, 0x2d,
};

extern const uint8_t sTestCert_Node02_03_PrivateKey_Len = sizeof(sTestCert_Node02_03_PrivateKey);

extern const uint8_t sTestCert_Node02_03_SubjectKeyId[] = {
    0x86, 0x1E, 0x84, 0xE7, 0x57, 0x2D, 0x17, 0xEB, 0x93, 0xB4, 0x04, 0xE9, 0x50, 0x94, 0xB5, 0xD6, 0xBD, 0x81, 0x34, 0x07,
};

extern const uint8_t sTestCert_Node02_03_SubjectKeyId_Len = sizeof(sTestCert_Node02_03_SubjectKeyId);

/**************  Test Node02_04 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 6065944987977545519 (0x542e90d3eb76772f)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.3 = CACACACA00000004, 1.3.6.1.4.1.37244.1.5 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.6 = A001B001, CN = Node02_04 Test Certificate, 1.3.6.1.4.1.37244.1.5 =
FAB000000000001D, 1.3.6.1.4.1.37244.1.7 = A001B002, 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020004 Subject Public Key Info: Public Key
Algorithm: id-ecPublicKey Public-Key: (256 bit) pub: 04:06:d7:51:ea:4e:5b:0b:a0:17:9b:8d:bc:23:25:
                    2d:a0:8d:04:f2:e7:29:dc:8a:e6:65:ed:cf:65:51:
                    4c:be:51:b5:19:a8:3f:d2:a3:66:17:6a:eb:03:fc:
                    0b:82:4e:15:1f:6e:d0:c1:19:0f:ba:ad:ca:31:5b:
                    cd:56:3a:20:1b
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                AE:96:28:40:2D:3D:D6:78:A9:48:10:A1:D3:95:16:11:A5:D0:22:8B
            X509v3 Authority Key Identifier:
                keyid:E8:62:8F:AE:DC:25:7F:05:6B:44:8F:D6:A5:CA:28:CC:15:D1:30:D7

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:05:70:81:63:c4:ee:07:f4:94:e3:59:a5:da:48:
         ec:98:58:29:f6:29:80:21:53:d5:6c:05:98:9a:70:e0:45:a1:
         02:20:61:79:47:a3:9c:6b:00:da:52:9f:85:ec:8a:7e:ab:bb:
         27:78:58:38:07:15:35:dc:59:22:ff:4c:8a:a5:b4:ee

-----BEGIN CERTIFICATE-----
MIICWzCCAgKgAwIBAgIIVC6Q0+t2dy8wCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQMMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowgZ0xGDAW
BgorBgEEAYKifAEGDAhBMDAxQjAwMTEjMCEGA1UEAwwaTm9kZTAyXzA0IFRlc3Qg
Q2VydGlmaWNhdGUxIDAeBgorBgEEAYKifAEFDBBGQUIwMDAwMDAwMDAwMDFEMRgw
FgYKKwYBBAGConwBBwwIQTAwMUIwMDIxIDAeBgorBgEEAYKifAEBDBBERURFREVE
RTAwMDIwMDA0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEBtdR6k5bC6AXm428
IyUtoI0E8ucp3IrmZe3PZVFMvlG1Gag/0qNmF2rrA/wLgk4VH27QwRkPuq3KMVvN
VjogG6OBgzCBgDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIFoDAgBgNVHSUB
Af8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFK6WKEAtPdZ4qUgQ
odOVFhGl0CKLMB8GA1UdIwQYMBaAFOhij67cJX8Fa0SP1qXKKMwV0TDXMAoGCCqG
SM49BAMCA0cAMEQCIAVwgWPE7gf0lONZpdpI7JhYKfYpgCFT1WwFmJpw4EWhAiBh
eUejnGsA2lKfheyKfqu7J3hYOAcVNdxZIv9MiqW07g==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEILELyFFhXUJ8wCjh1DsRo6rNRPC36/rpe7nY49CPYUPjoAoGCCqGSM49
AwEHoUQDQgAEBtdR6k5bC6AXm428IyUtoI0E8ucp3IrmZe3PZVFMvlG1Gag/0qNm
F2rrA/wLgk4VH27QwRkPuq3KMVvNVjogGw==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_04_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x54, 0x2e, 0x90, 0xd3, 0xeb, 0x76, 0x77, 0x2f, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x13, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x26, 0x16, 0x01, 0xb0, 0x01,
    0xa0, 0x2c, 0x01, 0x1a, 0x4e, 0x6f, 0x64, 0x65, 0x30, 0x32, 0x5f, 0x30, 0x34, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x65,
    0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x27, 0x15, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x26, 0x17,
    0x02, 0xb0, 0x01, 0xa0, 0x27, 0x11, 0x04, 0x00, 0x02, 0x00, 0xde, 0xde, 0xde, 0xde, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01,
    0x30, 0x09, 0x41, 0x04, 0x06, 0xd7, 0x51, 0xea, 0x4e, 0x5b, 0x0b, 0xa0, 0x17, 0x9b, 0x8d, 0xbc, 0x23, 0x25, 0x2d, 0xa0, 0x8d,
    0x04, 0xf2, 0xe7, 0x29, 0xdc, 0x8a, 0xe6, 0x65, 0xed, 0xcf, 0x65, 0x51, 0x4c, 0xbe, 0x51, 0xb5, 0x19, 0xa8, 0x3f, 0xd2, 0xa3,
    0x66, 0x17, 0x6a, 0xeb, 0x03, 0xfc, 0x0b, 0x82, 0x4e, 0x15, 0x1f, 0x6e, 0xd0, 0xc1, 0x19, 0x0f, 0xba, 0xad, 0xca, 0x31, 0x5b,
    0xcd, 0x56, 0x3a, 0x20, 0x1b, 0x35, 0x80, 0x28, 0x01, 0x18, 0x24, 0x81, 0x05, 0x36, 0x82, 0x04, 0x02, 0x04, 0x01, 0x18, 0x30,
    0x83, 0x14, 0xae, 0x96, 0x28, 0x40, 0x2d, 0x3d, 0xd6, 0x78, 0xa9, 0x48, 0x10, 0xa1, 0xd3, 0x95, 0x16, 0x11, 0xa5, 0xd0, 0x22,
    0x8b, 0x30, 0x84, 0x14, 0xe8, 0x62, 0x8f, 0xae, 0xdc, 0x25, 0x7f, 0x05, 0x6b, 0x44, 0x8f, 0xd6, 0xa5, 0xca, 0x28, 0xcc, 0x15,
    0xd1, 0x30, 0xd7, 0x35, 0x0a, 0x30, 0x01, 0x20, 0x05, 0x70, 0x81, 0x63, 0xc4, 0xee, 0x07, 0xf4, 0x94, 0xe3, 0x59, 0xa5, 0xda,
    0x48, 0xec, 0x98, 0x58, 0x29, 0xf6, 0x29, 0x80, 0x21, 0x53, 0xd5, 0x6c, 0x05, 0x98, 0x9a, 0x70, 0xe0, 0x45, 0xa1, 0x30, 0x02,
    0x20, 0x61, 0x79, 0x47, 0xa3, 0x9c, 0x6b, 0x00, 0xda, 0x52, 0x9f, 0x85, 0xec, 0x8a, 0x7e, 0xab, 0xbb, 0x27, 0x78, 0x58, 0x38,
    0x07, 0x15, 0x35, 0xdc, 0x59, 0x22, 0xff, 0x4c, 0x8a, 0xa5, 0xb4, 0xee, 0x18, 0x18,
};

extern const uint32_t sTestCert_Node02_04_Chip_Len = sizeof(sTestCert_Node02_04_Chip);

extern const uint8_t sTestCert_Node02_04_DER[] = {
    0x30, 0x82, 0x02, 0x5b, 0x30, 0x82, 0x02, 0x02, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x54, 0x2e, 0x90, 0xd3, 0xeb, 0x76,
    0x77, 0x2f, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x81, 0x9d, 0x31, 0x18, 0x30, 0x16, 0x06, 0x0a, 0x2b,
    0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x06, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42, 0x30, 0x30, 0x31, 0x31, 0x23,
    0x30, 0x21, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1a, 0x4e, 0x6f, 0x64, 0x65, 0x30, 0x32, 0x5f, 0x30, 0x34, 0x20, 0x54, 0x65,
    0x73, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b,
    0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x05, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x31, 0x18, 0x30, 0x16, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01,
    0x07, 0x0c, 0x08, 0x41, 0x30, 0x30, 0x31, 0x42, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04,
    0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30, 0x32, 0x30,
    0x30, 0x30, 0x34, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48,
    0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x06, 0xd7, 0x51, 0xea, 0x4e, 0x5b, 0x0b, 0xa0, 0x17, 0x9b, 0x8d, 0xbc,
    0x23, 0x25, 0x2d, 0xa0, 0x8d, 0x04, 0xf2, 0xe7, 0x29, 0xdc, 0x8a, 0xe6, 0x65, 0xed, 0xcf, 0x65, 0x51, 0x4c, 0xbe, 0x51, 0xb5,
    0x19, 0xa8, 0x3f, 0xd2, 0xa3, 0x66, 0x17, 0x6a, 0xeb, 0x03, 0xfc, 0x0b, 0x82, 0x4e, 0x15, 0x1f, 0x6e, 0xd0, 0xc1, 0x19, 0x0f,
    0xba, 0xad, 0xca, 0x31, 0x5b, 0xcd, 0x56, 0x3a, 0x20, 0x1b, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06, 0x03, 0x55,
    0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04,
    0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b,
    0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03,
    0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xae, 0x96, 0x28, 0x40, 0x2d, 0x3d, 0xd6, 0x78, 0xa9, 0x48, 0x10, 0xa1, 0xd3, 0x95,
    0x16, 0x11, 0xa5, 0xd0, 0x22, 0x8b, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xe8, 0x62,
    0x8f, 0xae, 0xdc, 0x25, 0x7f, 0x05, 0x6b, 0x44, 0x8f, 0xd6, 0xa5, 0xca, 0x28, 0xcc, 0x15, 0xd1, 0x30, 0xd7, 0x30, 0x0a, 0x06,
    0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x05, 0x70, 0x81, 0x63, 0xc4,
    0xee, 0x07, 0xf4, 0x94, 0xe3, 0x59, 0xa5, 0xda, 0x48, 0xec, 0x98, 0x58, 0x29, 0xf6, 0x29, 0x80, 0x21, 0x53, 0xd5, 0x6c, 0x05,
    0x98, 0x9a, 0x70, 0xe0, 0x45, 0xa1, 0x02, 0x20, 0x61, 0x79, 0x47, 0xa3, 0x9c, 0x6b, 0x00, 0xda, 0x52, 0x9f, 0x85, 0xec, 0x8a,
    0x7e, 0xab, 0xbb, 0x27, 0x78, 0x58, 0x38, 0x07, 0x15, 0x35, 0xdc, 0x59, 0x22, 0xff, 0x4c, 0x8a, 0xa5, 0xb4, 0xee,
};

extern const uint32_t sTestCert_Node02_04_DER_Len = sizeof(sTestCert_Node02_04_DER);

extern const uint8_t sTestCert_Node02_04_PublicKey[] = {
    0x04, 0x06, 0xd7, 0x51, 0xea, 0x4e, 0x5b, 0x0b, 0xa0, 0x17, 0x9b, 0x8d, 0xbc, 0x23, 0x25, 0x2d, 0xa0,
    0x8d, 0x04, 0xf2, 0xe7, 0x29, 0xdc, 0x8a, 0xe6, 0x65, 0xed, 0xcf, 0x65, 0x51, 0x4c, 0xbe, 0x51, 0xb5,
    0x19, 0xa8, 0x3f, 0xd2, 0xa3, 0x66, 0x17, 0x6a, 0xeb, 0x03, 0xfc, 0x0b, 0x82, 0x4e, 0x15, 0x1f, 0x6e,
    0xd0, 0xc1, 0x19, 0x0f, 0xba, 0xad, 0xca, 0x31, 0x5b, 0xcd, 0x56, 0x3a, 0x20, 0x1b,
};

extern const uint8_t sTestCert_Node02_04_PublicKey_Len = sizeof(sTestCert_Node02_04_PublicKey);

extern const uint8_t sTestCert_Node02_04_PrivateKey[] = {
    0xb1, 0x0b, 0xc8, 0x51, 0x61, 0x5d, 0x42, 0x7c, 0xc0, 0x28, 0xe1, 0xd4, 0x3b, 0x11, 0xa3, 0xaa,
    0xcd, 0x44, 0xf0, 0xb7, 0xeb, 0xfa, 0xe9, 0x7b, 0xb9, 0xd8, 0xe3, 0xd0, 0x8f, 0x61, 0x43, 0xe3,
};

extern const uint8_t sTestCert_Node02_04_PrivateKey_Len = sizeof(sTestCert_Node02_04_PrivateKey);

extern const uint8_t sTestCert_Node02_04_SubjectKeyId[] = {
    0xAE, 0x96, 0x28, 0x40, 0x2D, 0x3D, 0xD6, 0x78, 0xA9, 0x48, 0x10, 0xA1, 0xD3, 0x95, 0x16, 0x11, 0xA5, 0xD0, 0x22, 0x8B,
};

extern const uint8_t sTestCert_Node02_04_SubjectKeyId_Len = sizeof(sTestCert_Node02_04_SubjectKeyId);

} // namespace TestCerts
} // namespace chip
