/*
 *
 *    Copyright (c) 2020-2021 Project CHIP Authors
 *    Copyright (c) 2019 Google LLC.
 *    Copyright (c) 2016-2017 Nest Labs, Inc.
 *    All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *    @file
 *      This file contains definitions of test certificates used by various unit tests.
 *
 */

#include <credentials/CHIPCert.h>

#include "CHIPCert_test_vectors.h"

namespace chip {
namespace TestCerts {

using namespace chip::Credentials;
using namespace chip::ASN1;

// clang-format off
extern const uint8_t gTestCerts[] = {
    TestCertTypes::kRoot,
    TestCertTypes::kNodeCA,
    TestCertTypes::kNode01,
    TestCertTypes::kFirmwareSigningCA,
    TestCertTypes::kFirmwareSigning,
};
// clang-format on

extern const size_t gNumTestCerts = sizeof(gTestCerts) / sizeof(gTestCerts[0]);

CHIP_ERROR GetTestCert(uint8_t certType, BitFlags<uint8_t, TestCertLoadFlags> certLoadFlags, const uint8_t *& certData,
                       uint32_t & certDataLen)
{
    CHIP_ERROR err;
    bool derForm = certLoadFlags.Has(TestCertLoadFlags::kDERForm);

#define SELECT_CERT(NAME)                                                                                                          \
    do                                                                                                                             \
    {                                                                                                                              \
        if (certType == TestCertTypes::k##NAME)                                                                                    \
        {                                                                                                                          \
            if (derForm)                                                                                                           \
            {                                                                                                                      \
                certData    = sTestCert_##NAME##_DER;                                                                              \
                certDataLen = sTestCert_##NAME##_DER_Len;                                                                          \
            }                                                                                                                      \
            else                                                                                                                   \
            {                                                                                                                      \
                certData    = sTestCert_##NAME##_Chip;                                                                             \
                certDataLen = sTestCert_##NAME##_Chip_Len;                                                                         \
            }                                                                                                                      \
            ExitNow(err = CHIP_NO_ERROR);                                                                                          \
        }                                                                                                                          \
    } while (0)

    SELECT_CERT(Root);
    SELECT_CERT(NodeCA);
    SELECT_CERT(Node01);
    SELECT_CERT(FirmwareSigningCA);
    SELECT_CERT(FirmwareSigning);

    err = CHIP_ERROR_CA_CERT_NOT_FOUND;

exit:
    return err;
}

const char * GetTestCertName(uint8_t certType)
{
#define NAME_CERT(NAME)                                                                                                            \
    do                                                                                                                             \
    {                                                                                                                              \
        if (certType == TestCertTypes::k##NAME)                                                                                    \
        {                                                                                                                          \
            return #NAME;                                                                                                          \
        }                                                                                                                          \
    } while (0)

    NAME_CERT(Root);
    NAME_CERT(NodeCA);
    NAME_CERT(Node01);
    NAME_CERT(FirmwareSigningCA);
    NAME_CERT(FirmwareSigning);

    return nullptr;
}

CHIP_ERROR LoadTestCert(ChipCertificateSet & certSet, uint8_t certType, BitFlags<uint8_t, TestCertLoadFlags> certLoadFlags,
                        BitFlags<uint8_t, CertDecodeFlags> decodeFlags)
{
    CHIP_ERROR err;
    ChipCertificateData * cert;
    const uint8_t * certData;
    uint32_t certDataLen;

    // Special case for loading the root public key only.
    if (certType == TestCertTypes::kRootKey)
    {
        // Add the trusted root key to the certificate set.
        err = certSet.AddTrustedKey(sTestCert_Root_Id, kOID_EllipticCurve_prime256v1, sTestCert_Root_PublicKey,
                                    sTestCert_Root_PublicKey_Len, sTestCert_Root_SubjectKeyId, sTestCert_Root_SubjectKeyId_Len);
        ExitNow();
    }

    // Get the requested certificate data.
    err = GetTestCert(certType, certLoadFlags, certData, certDataLen);
    SuccessOrExit(err);

    // Load it into the certificate set.
    err = certSet.LoadCert(certData, certDataLen, decodeFlags);
    SuccessOrExit(err);

    // Get loaded certificate data.
    cert = const_cast<ChipCertificateData *>(certSet.GetLastCert());
    VerifyOrExit(cert != nullptr, err = CHIP_ERROR_INVALID_ARGUMENT);

    // Apply load flags.
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressIsCA))
    {
        cert->mCertFlags.Clear(CertFlags::kIsCA);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressKeyUsage))
    {
        cert->mCertFlags.Clear(CertFlags::kExtPresent_KeyUsage);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressKeyCertSign))
    {
        cert->mKeyUsageFlags.Clear(KeyUsageFlags::kKeyCertSign);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSetPathLenConstZero))
    {
        cert->mCertFlags.Set(CertFlags::kPathLenConstraintPresent);
        cert->mPathLenConstraint = 0;
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSetAppDefinedCertType))
    {
        cert->mCertType = kCertType_AppDefinedBase;
    }

exit:
    return err;
}

// ------------------------------ TEST CERTIFICATES ----------------------------------------

/**************  Test Root Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 5763064141628170117 (0x4ffa844d8389df85)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.2 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.2 = CACACACA00000001
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:9d:30:fe:21:2d:09:ea:f2:ec:c7:9c:56:24:df:
                    3c:22:6d:5b:9c:fa:3d:7f:74:ff:38:7c:20:c8:04:
                    27:cb:9b:03:ad:76:e9:30:c5:2e:b5:80:be:b9:fa:
                    e5:24:7c:03:5b:38:fe:9c:b8:49:91:70:fc:fc:1e:
                    c6:67:23:d8:df
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                4F:5A:CC:78:01:43:03:52
            X509v3 Authority Key Identifier:
                keyid:4F:5A:CC:78:01:43:03:52

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:0d:4c:2a:85:cd:91:ae:25:9b:09:bd:58:20:dc:
         c6:2c:62:38:b7:11:27:08:62:dc:f2:a5:08:c1:c0:aa:b9:2c:
         02:20:24:1e:39:d0:2d:5b:9a:b5:f2:23:8b:25:9b:f0:98:10:
         fe:29:e7:f2:89:1f:77:11:7f:d7:f0:9c:e5:f4:0b:31

-----BEGIN CERTIFICATE-----
MIIBhDCCASugAwIBAgIIT/qETYOJ34UwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQIMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBAgwQQ0FDQUNBQ0EwMDAwMDAwMTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABJ0w/iEtCery7MecViTfPCJtW5z6PX90/zh8
IMgEJ8ubA6126TDFLrWAvrn65SR8A1s4/py4SZFw/Pwexmcj2N+jSzBJMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMBEGA1UdDgQKBAhPWsx4AUMDUjAT
BgNVHSMEDDAKgAhPWsx4AUMDUjAKBggqhkjOPQQDAgNHADBEAiANTCqFzZGuJZsJ
vVgg3MYsYji3EScIYtzypQjBwKq5LAIgJB450C1bmrXyI4slm/CYEP4p5/KJH3cR
f9fwnOX0CzE=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIE6Daw+GnPVjVCdtXWDRlU7MgIUvySg6V82n/1tIpIDGoAoGCCqGSM49
AwEHoUQDQgAEnTD+IS0J6vLsx5xWJN88Im1bnPo9f3T/OHwgyAQny5sDrXbpMMUu
tYC+ufrlJHwDWzj+nLhJkXD8/B7GZyPY3w==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Root_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x4f, 0xfa, 0x84, 0x4d, 0x83, 0x89, 0xdf, 0x85, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x12, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0xef, 0x11, 0x83, 0x01, 0x26, 0x05,
    0xee, 0xa9, 0xd3, 0x27, 0x37, 0x06, 0x27, 0x12, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24, 0x07, 0x01, 0x24,
    0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x9d, 0x30, 0xfe, 0x21, 0x2d, 0x09, 0xea, 0xf2, 0xec, 0xc7, 0x9c, 0x56, 0x24, 0xdf, 0x3c,
    0x22, 0x6d, 0x5b, 0x9c, 0xfa, 0x3d, 0x7f, 0x74, 0xff, 0x38, 0x7c, 0x20, 0xc8, 0x04, 0x27, 0xcb, 0x9b, 0x03, 0xad, 0x76, 0xe9,
    0x30, 0xc5, 0x2e, 0xb5, 0x80, 0xbe, 0xb9, 0xfa, 0xe5, 0x24, 0x7c, 0x03, 0x5b, 0x38, 0xfe, 0x9c, 0xb8, 0x49, 0x91, 0x70, 0xfc,
    0xfc, 0x1e, 0xc6, 0x67, 0x23, 0xd8, 0xdf, 0x35, 0x80, 0x29, 0x01, 0x29, 0x02, 0x18, 0x35, 0x81, 0x29, 0x01, 0x24, 0x02, 0x60,
    0x18, 0x35, 0x83, 0x30, 0x02, 0x08, 0x4f, 0x5a, 0xcc, 0x78, 0x01, 0x43, 0x03, 0x52, 0x18, 0x35, 0x84, 0x30, 0x02, 0x08, 0x4f,
    0x5a, 0xcc, 0x78, 0x01, 0x43, 0x03, 0x52, 0x18, 0x35, 0x0a, 0x30, 0x01, 0x20, 0x0d, 0x4c, 0x2a, 0x85, 0xcd, 0x91, 0xae, 0x25,
    0x9b, 0x09, 0xbd, 0x58, 0x20, 0xdc, 0xc6, 0x2c, 0x62, 0x38, 0xb7, 0x11, 0x27, 0x08, 0x62, 0xdc, 0xf2, 0xa5, 0x08, 0xc1, 0xc0,
    0xaa, 0xb9, 0x2c, 0x30, 0x02, 0x20, 0x24, 0x1e, 0x39, 0xd0, 0x2d, 0x5b, 0x9a, 0xb5, 0xf2, 0x23, 0x8b, 0x25, 0x9b, 0xf0, 0x98,
    0x10, 0xfe, 0x29, 0xe7, 0xf2, 0x89, 0x1f, 0x77, 0x11, 0x7f, 0xd7, 0xf0, 0x9c, 0xe5, 0xf4, 0x0b, 0x31, 0x18, 0x18,
};

extern const uint32_t sTestCert_Root_Chip_Len = sizeof(sTestCert_Root_Chip);

extern const uint8_t sTestCert_Root_DER[] = {
    0x30, 0x82, 0x01, 0x84, 0x30, 0x82, 0x01, 0x2b, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x4f, 0xfa, 0x84, 0x4d, 0x83, 0x89,
    0xdf, 0x85, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x9d, 0x30,
    0xfe, 0x21, 0x2d, 0x09, 0xea, 0xf2, 0xec, 0xc7, 0x9c, 0x56, 0x24, 0xdf, 0x3c, 0x22, 0x6d, 0x5b, 0x9c, 0xfa, 0x3d, 0x7f, 0x74,
    0xff, 0x38, 0x7c, 0x20, 0xc8, 0x04, 0x27, 0xcb, 0x9b, 0x03, 0xad, 0x76, 0xe9, 0x30, 0xc5, 0x2e, 0xb5, 0x80, 0xbe, 0xb9, 0xfa,
    0xe5, 0x24, 0x7c, 0x03, 0x5b, 0x38, 0xfe, 0x9c, 0xb8, 0x49, 0x91, 0x70, 0xfc, 0xfc, 0x1e, 0xc6, 0x67, 0x23, 0xd8, 0xdf, 0xa3,
    0x4b, 0x30, 0x49, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x11, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x0a, 0x04, 0x08, 0x4f, 0x5a, 0xcc, 0x78, 0x01, 0x43, 0x03, 0x52, 0x30, 0x13, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04,
    0x0c, 0x30, 0x0a, 0x80, 0x08, 0x4f, 0x5a, 0xcc, 0x78, 0x01, 0x43, 0x03, 0x52, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,
    0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x0d, 0x4c, 0x2a, 0x85, 0xcd, 0x91, 0xae, 0x25, 0x9b, 0x09,
    0xbd, 0x58, 0x20, 0xdc, 0xc6, 0x2c, 0x62, 0x38, 0xb7, 0x11, 0x27, 0x08, 0x62, 0xdc, 0xf2, 0xa5, 0x08, 0xc1, 0xc0, 0xaa, 0xb9,
    0x2c, 0x02, 0x20, 0x24, 0x1e, 0x39, 0xd0, 0x2d, 0x5b, 0x9a, 0xb5, 0xf2, 0x23, 0x8b, 0x25, 0x9b, 0xf0, 0x98, 0x10, 0xfe, 0x29,
    0xe7, 0xf2, 0x89, 0x1f, 0x77, 0x11, 0x7f, 0xd7, 0xf0, 0x9c, 0xe5, 0xf4, 0x0b, 0x31,
};

extern const uint32_t sTestCert_Root_DER_Len = sizeof(sTestCert_Root_DER);

extern const uint8_t sTestCert_Root_PublicKey[] = {
    0x04, 0x9d, 0x30, 0xfe, 0x21, 0x2d, 0x09, 0xea, 0xf2, 0xec, 0xc7, 0x9c, 0x56, 0x24, 0xdf, 0x3c, 0x22,
    0x6d, 0x5b, 0x9c, 0xfa, 0x3d, 0x7f, 0x74, 0xff, 0x38, 0x7c, 0x20, 0xc8, 0x04, 0x27, 0xcb, 0x9b, 0x03,
    0xad, 0x76, 0xe9, 0x30, 0xc5, 0x2e, 0xb5, 0x80, 0xbe, 0xb9, 0xfa, 0xe5, 0x24, 0x7c, 0x03, 0x5b, 0x38,
    0xfe, 0x9c, 0xb8, 0x49, 0x91, 0x70, 0xfc, 0xfc, 0x1e, 0xc6, 0x67, 0x23, 0xd8, 0xdf,
};

extern const uint8_t sTestCert_Root_PublicKey_Len = sizeof(sTestCert_Root_PublicKey);

extern const uint8_t sTestCert_Root_PrivateKey[] = {
    0x4e, 0x83, 0x6b, 0x0f, 0x86, 0x9c, 0xf5, 0x63, 0x54, 0x27, 0x6d, 0x5d, 0x60, 0xd1, 0x95, 0x4e,
    0xcc, 0x80, 0x85, 0x2f, 0xc9, 0x28, 0x3a, 0x57, 0xcd, 0xa7, 0xff, 0x5b, 0x48, 0xa4, 0x80, 0xc6,
};

extern const uint8_t sTestCert_Root_PrivateKey_Len = sizeof(sTestCert_Root_PrivateKey);

extern const uint8_t sTestCert_Root_SubjectKeyId[] = {
    0x4F, 0x5A, 0xCC, 0x78, 0x01, 0x43, 0x03, 0x52,
};

extern const uint8_t sTestCert_Root_SubjectKeyId_Len = sizeof(sTestCert_Root_SubjectKeyId);

extern const uint64_t sTestCert_Root_Id = 0xCACACACA00000001ULL;

/**************  Test NodeCA Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 3348080933522780927 (0x2e76c5dec1e232ff)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.2 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.2 = CACACACA00000002
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:8a:34:94:8d:8c:9f:c4:2b:64:e7:df:9e:3c:7f:
                    a8:80:1a:93:56:e0:07:32:de:9a:89:27:59:d7:76:
                    79:91:98:21:1a:d6:bd:4f:f2:d2:27:31:59:81:a1:
                    35:05:f2:77:f3:e9:00:92:72:0d:92:fc:40:1d:a1:
                    ad:a5:5b:5b:6c
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                45:24:B6:E8:4A:64:EB:12
            X509v3 Authority Key Identifier:
                keyid:4F:5A:CC:78:01:43:03:52

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:1a:a0:23:d2:5c:0a:72:8c:10:41:d5:4e:f8:86:
         7d:b1:53:3b:f2:c5:97:3f:cf:1c:ff:96:45:26:b3:0e:57:9c:
         02:21:00:9c:c9:37:0e:a4:de:77:2a:f1:67:f9:2a:f3:a3:b4:
         16:f9:3a:9f:4d:5a:b8:f0:41:c4:97:b5:4a:c4:6f:76:c0

-----BEGIN CERTIFICATE-----
MIIBhTCCASugAwIBAgIILnbF3sHiMv8wCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQIMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBAgwQQ0FDQUNBQ0EwMDAwMDAwMjBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABIo0lI2Mn8QrZOffnjx/qIAak1bgBzLemokn
Wdd2eZGYIRrWvU/y0icxWYGhNQXyd/PpAJJyDZL8QB2hraVbW2yjSzBJMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMBEGA1UdDgQKBAhFJLboSmTrEjAT
BgNVHSMEDDAKgAhPWsx4AUMDUjAKBggqhkjOPQQDAgNIADBFAiAaoCPSXApyjBBB
1U74hn2xUzvyxZc/zxz/lkUmsw5XnAIhAJzJNw6k3ncq8Wf5KvOjtBb5Op9NWrjw
QcSXtUrEb3bA
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIO61TIc64TOKEDAIZaMXYqu/E7Rq61cDiEkXRW6bFI7ToAoGCCqGSM49
AwEHoUQDQgAEijSUjYyfxCtk59+ePH+ogBqTVuAHMt6aiSdZ13Z5kZghGta9T/LS
JzFZgaE1BfJ38+kAknINkvxAHaGtpVtbbA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_NodeCA_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x2e, 0x76, 0xc5, 0xde, 0xc1, 0xe2, 0x32, 0xff, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x12, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0xef, 0x11, 0x83, 0x01, 0x26, 0x05,
    0xee, 0xa9, 0xd3, 0x27, 0x37, 0x06, 0x27, 0x12, 0x02, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24, 0x07, 0x01, 0x24,
    0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x8a, 0x34, 0x94, 0x8d, 0x8c, 0x9f, 0xc4, 0x2b, 0x64, 0xe7, 0xdf, 0x9e, 0x3c, 0x7f, 0xa8,
    0x80, 0x1a, 0x93, 0x56, 0xe0, 0x07, 0x32, 0xde, 0x9a, 0x89, 0x27, 0x59, 0xd7, 0x76, 0x79, 0x91, 0x98, 0x21, 0x1a, 0xd6, 0xbd,
    0x4f, 0xf2, 0xd2, 0x27, 0x31, 0x59, 0x81, 0xa1, 0x35, 0x05, 0xf2, 0x77, 0xf3, 0xe9, 0x00, 0x92, 0x72, 0x0d, 0x92, 0xfc, 0x40,
    0x1d, 0xa1, 0xad, 0xa5, 0x5b, 0x5b, 0x6c, 0x35, 0x80, 0x29, 0x01, 0x29, 0x02, 0x18, 0x35, 0x81, 0x29, 0x01, 0x24, 0x02, 0x60,
    0x18, 0x35, 0x83, 0x30, 0x02, 0x08, 0x45, 0x24, 0xb6, 0xe8, 0x4a, 0x64, 0xeb, 0x12, 0x18, 0x35, 0x84, 0x30, 0x02, 0x08, 0x4f,
    0x5a, 0xcc, 0x78, 0x01, 0x43, 0x03, 0x52, 0x18, 0x35, 0x0a, 0x30, 0x01, 0x20, 0x1a, 0xa0, 0x23, 0xd2, 0x5c, 0x0a, 0x72, 0x8c,
    0x10, 0x41, 0xd5, 0x4e, 0xf8, 0x86, 0x7d, 0xb1, 0x53, 0x3b, 0xf2, 0xc5, 0x97, 0x3f, 0xcf, 0x1c, 0xff, 0x96, 0x45, 0x26, 0xb3,
    0x0e, 0x57, 0x9c, 0x30, 0x02, 0x21, 0x00, 0x9c, 0xc9, 0x37, 0x0e, 0xa4, 0xde, 0x77, 0x2a, 0xf1, 0x67, 0xf9, 0x2a, 0xf3, 0xa3,
    0xb4, 0x16, 0xf9, 0x3a, 0x9f, 0x4d, 0x5a, 0xb8, 0xf0, 0x41, 0xc4, 0x97, 0xb5, 0x4a, 0xc4, 0x6f, 0x76, 0xc0, 0x18, 0x18,
};

extern const uint32_t sTestCert_NodeCA_Chip_Len = sizeof(sTestCert_NodeCA_Chip);

extern const uint8_t sTestCert_NodeCA_DER[] = {
    0x30, 0x82, 0x01, 0x85, 0x30, 0x82, 0x01, 0x2b, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x2e, 0x76, 0xc5, 0xde, 0xc1, 0xe2,
    0x32, 0xff, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x8a, 0x34,
    0x94, 0x8d, 0x8c, 0x9f, 0xc4, 0x2b, 0x64, 0xe7, 0xdf, 0x9e, 0x3c, 0x7f, 0xa8, 0x80, 0x1a, 0x93, 0x56, 0xe0, 0x07, 0x32, 0xde,
    0x9a, 0x89, 0x27, 0x59, 0xd7, 0x76, 0x79, 0x91, 0x98, 0x21, 0x1a, 0xd6, 0xbd, 0x4f, 0xf2, 0xd2, 0x27, 0x31, 0x59, 0x81, 0xa1,
    0x35, 0x05, 0xf2, 0x77, 0xf3, 0xe9, 0x00, 0x92, 0x72, 0x0d, 0x92, 0xfc, 0x40, 0x1d, 0xa1, 0xad, 0xa5, 0x5b, 0x5b, 0x6c, 0xa3,
    0x4b, 0x30, 0x49, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x11, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x0a, 0x04, 0x08, 0x45, 0x24, 0xb6, 0xe8, 0x4a, 0x64, 0xeb, 0x12, 0x30, 0x13, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04,
    0x0c, 0x30, 0x0a, 0x80, 0x08, 0x4f, 0x5a, 0xcc, 0x78, 0x01, 0x43, 0x03, 0x52, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,
    0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x1a, 0xa0, 0x23, 0xd2, 0x5c, 0x0a, 0x72, 0x8c, 0x10, 0x41,
    0xd5, 0x4e, 0xf8, 0x86, 0x7d, 0xb1, 0x53, 0x3b, 0xf2, 0xc5, 0x97, 0x3f, 0xcf, 0x1c, 0xff, 0x96, 0x45, 0x26, 0xb3, 0x0e, 0x57,
    0x9c, 0x02, 0x21, 0x00, 0x9c, 0xc9, 0x37, 0x0e, 0xa4, 0xde, 0x77, 0x2a, 0xf1, 0x67, 0xf9, 0x2a, 0xf3, 0xa3, 0xb4, 0x16, 0xf9,
    0x3a, 0x9f, 0x4d, 0x5a, 0xb8, 0xf0, 0x41, 0xc4, 0x97, 0xb5, 0x4a, 0xc4, 0x6f, 0x76, 0xc0,
};

extern const uint32_t sTestCert_NodeCA_DER_Len = sizeof(sTestCert_NodeCA_DER);

extern const uint8_t sTestCert_NodeCA_PublicKey[] = {
    0x04, 0x8a, 0x34, 0x94, 0x8d, 0x8c, 0x9f, 0xc4, 0x2b, 0x64, 0xe7, 0xdf, 0x9e, 0x3c, 0x7f, 0xa8, 0x80,
    0x1a, 0x93, 0x56, 0xe0, 0x07, 0x32, 0xde, 0x9a, 0x89, 0x27, 0x59, 0xd7, 0x76, 0x79, 0x91, 0x98, 0x21,
    0x1a, 0xd6, 0xbd, 0x4f, 0xf2, 0xd2, 0x27, 0x31, 0x59, 0x81, 0xa1, 0x35, 0x05, 0xf2, 0x77, 0xf3, 0xe9,
    0x00, 0x92, 0x72, 0x0d, 0x92, 0xfc, 0x40, 0x1d, 0xa1, 0xad, 0xa5, 0x5b, 0x5b, 0x6c,
};

extern const uint8_t sTestCert_NodeCA_PublicKey_Len = sizeof(sTestCert_NodeCA_PublicKey);

extern const uint8_t sTestCert_NodeCA_PrivateKey[] = {
    0xee, 0xb5, 0x4c, 0x87, 0x3a, 0xe1, 0x33, 0x8a, 0x10, 0x30, 0x08, 0x65, 0xa3, 0x17, 0x62, 0xab,
    0xbf, 0x13, 0xb4, 0x6a, 0xeb, 0x57, 0x03, 0x88, 0x49, 0x17, 0x45, 0x6e, 0x9b, 0x14, 0x8e, 0xd3,
};

extern const uint8_t sTestCert_NodeCA_PrivateKey_Len = sizeof(sTestCert_NodeCA_PrivateKey);

extern const uint8_t sTestCert_NodeCA_SubjectKeyId[] = {
    0x45, 0x24, 0xB6, 0xE8, 0x4A, 0x64, 0xEB, 0x12,
};

extern const uint8_t sTestCert_NodeCA_SubjectKeyId_Len = sizeof(sTestCert_NodeCA_SubjectKeyId);

extern const uint64_t sTestCert_NodeCA_Id = 0xCACACACA00000002ULL;

/**************  Test Node01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 3589844900143231134 (0x31d1b0eab7c8f09e)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.2 = CACACACA00000002
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00000001
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:80:52:1c:92:47:f8:e5:e3:08:a7:ac:57:5b:7a:
                    d3:c1:5f:ea:be:48:62:1c:4a:d6:95:f1:14:23:4c:
                    76:99:52:38:09:73:28:ba:1b:91:10:12:22:fb:35:
                    91:dc:f1:87:34:06:c1:4c:e2:dd:2e:3f:b0:9d:6e:
                    04:10:09:f4:70
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                4F:81:F0:44:C8:5F:C3:D9
            X509v3 Authority Key Identifier:
                keyid:45:24:B6:E8:4A:64:EB:12

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:21:00:c8:5b:66:7d:9e:3a:2d:21:2f:df:6a:c6:6e:
         11:1e:83:03:0c:0a:34:93:48:88:30:eb:51:28:4b:ca:9a:3d:
         22:02:20:24:42:5c:3b:f6:05:8e:e8:8c:01:ca:35:8e:b7:d5:
         c8:c1:69:46:cf:bb:c6:76:c3:ea:2f:ed:8d:75:c4:fc:f5

-----BEGIN CERTIFICATE-----
MIIBpDCCAUqgAwIBAgIIMdGw6rfI8J4wCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQIMEENBQ0FDQUNBMDAwMDAwMDIwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBAQwQREVERURFREUwMDAwMDAwMTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABIBSHJJH+OXjCKesV1t608Ff6r5IYhxK1pXx
FCNMdplSOAlzKLobkRASIvs1kdzxhzQGwUzi3S4/sJ1uBBAJ9HCjajBoMAwGA1Ud
EwEB/wQCMAAwDgYDVR0PAQH/BAQDAgWgMCAGA1UdJQEB/wQWMBQGCCsGAQUFBwMC
BggrBgEFBQcDATARBgNVHQ4ECgQIT4HwRMhfw9kwEwYDVR0jBAwwCoAIRSS26Epk
6xIwCgYIKoZIzj0EAwIDSAAwRQIhAMhbZn2eOi0hL99qxm4RHoMDDAo0k0iIMOtR
KEvKmj0iAiAkQlw79gWO6IwByjWOt9XIwWlGz7vGdsPqL+2NdcT89Q==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIIn4fUhgu/czgPVN1vpYGPmZ5nZLDaeJyVCibIlZua8QoAoGCCqGSM49
AwEHoUQDQgAEgFIckkf45eMIp6xXW3rTwV/qvkhiHErWlfEUI0x2mVI4CXMouhuR
EBIi+zWR3PGHNAbBTOLdLj+wnW4EEAn0cA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x31, 0xd1, 0xb0, 0xea, 0xb7, 0xc8, 0xf0, 0x9e, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x12, 0x02, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0xef, 0x11, 0x83, 0x01, 0x26, 0x05,
    0xee, 0xa9, 0xd3, 0x27, 0x37, 0x06, 0x27, 0x11, 0x01, 0x00, 0x00, 0x00, 0xde, 0xde, 0xde, 0xde, 0x18, 0x24, 0x07, 0x01, 0x24,
    0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x80, 0x52, 0x1c, 0x92, 0x47, 0xf8, 0xe5, 0xe3, 0x08, 0xa7, 0xac, 0x57, 0x5b, 0x7a, 0xd3,
    0xc1, 0x5f, 0xea, 0xbe, 0x48, 0x62, 0x1c, 0x4a, 0xd6, 0x95, 0xf1, 0x14, 0x23, 0x4c, 0x76, 0x99, 0x52, 0x38, 0x09, 0x73, 0x28,
    0xba, 0x1b, 0x91, 0x10, 0x12, 0x22, 0xfb, 0x35, 0x91, 0xdc, 0xf1, 0x87, 0x34, 0x06, 0xc1, 0x4c, 0xe2, 0xdd, 0x2e, 0x3f, 0xb0,
    0x9d, 0x6e, 0x04, 0x10, 0x09, 0xf4, 0x70, 0x35, 0x80, 0x29, 0x01, 0x18, 0x35, 0x81, 0x29, 0x01, 0x24, 0x02, 0x05, 0x18, 0x35,
    0x82, 0x29, 0x01, 0x36, 0x02, 0x04, 0x02, 0x04, 0x01, 0x18, 0x18, 0x35, 0x83, 0x30, 0x02, 0x08, 0x4f, 0x81, 0xf0, 0x44, 0xc8,
    0x5f, 0xc3, 0xd9, 0x18, 0x35, 0x84, 0x30, 0x02, 0x08, 0x45, 0x24, 0xb6, 0xe8, 0x4a, 0x64, 0xeb, 0x12, 0x18, 0x35, 0x0a, 0x30,
    0x01, 0x21, 0x00, 0xc8, 0x5b, 0x66, 0x7d, 0x9e, 0x3a, 0x2d, 0x21, 0x2f, 0xdf, 0x6a, 0xc6, 0x6e, 0x11, 0x1e, 0x83, 0x03, 0x0c,
    0x0a, 0x34, 0x93, 0x48, 0x88, 0x30, 0xeb, 0x51, 0x28, 0x4b, 0xca, 0x9a, 0x3d, 0x22, 0x30, 0x02, 0x20, 0x24, 0x42, 0x5c, 0x3b,
    0xf6, 0x05, 0x8e, 0xe8, 0x8c, 0x01, 0xca, 0x35, 0x8e, 0xb7, 0xd5, 0xc8, 0xc1, 0x69, 0x46, 0xcf, 0xbb, 0xc6, 0x76, 0xc3, 0xea,
    0x2f, 0xed, 0x8d, 0x75, 0xc4, 0xfc, 0xf5, 0x18, 0x18,
};

extern const uint32_t sTestCert_Node01_Chip_Len = sizeof(sTestCert_Node01_Chip);

extern const uint8_t sTestCert_Node01_DER[] = {
    0x30, 0x82, 0x01, 0xa4, 0x30, 0x82, 0x01, 0x4a, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x31, 0xd1, 0xb0, 0xea, 0xb7, 0xc8,
    0xf0, 0x9e, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44,
    0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x80, 0x52,
    0x1c, 0x92, 0x47, 0xf8, 0xe5, 0xe3, 0x08, 0xa7, 0xac, 0x57, 0x5b, 0x7a, 0xd3, 0xc1, 0x5f, 0xea, 0xbe, 0x48, 0x62, 0x1c, 0x4a,
    0xd6, 0x95, 0xf1, 0x14, 0x23, 0x4c, 0x76, 0x99, 0x52, 0x38, 0x09, 0x73, 0x28, 0xba, 0x1b, 0x91, 0x10, 0x12, 0x22, 0xfb, 0x35,
    0x91, 0xdc, 0xf1, 0x87, 0x34, 0x06, 0xc1, 0x4c, 0xe2, 0xdd, 0x2e, 0x3f, 0xb0, 0x9d, 0x6e, 0x04, 0x10, 0x09, 0xf4, 0x70, 0xa3,
    0x6a, 0x30, 0x68, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03,
    0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01,
    0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05,
    0x05, 0x07, 0x03, 0x01, 0x30, 0x11, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x0a, 0x04, 0x08, 0x4f, 0x81, 0xf0, 0x44, 0xc8, 0x5f,
    0xc3, 0xd9, 0x30, 0x13, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x0c, 0x30, 0x0a, 0x80, 0x08, 0x45, 0x24, 0xb6, 0xe8, 0x4a, 0x64,
    0xeb, 0x12, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21,
    0x00, 0xc8, 0x5b, 0x66, 0x7d, 0x9e, 0x3a, 0x2d, 0x21, 0x2f, 0xdf, 0x6a, 0xc6, 0x6e, 0x11, 0x1e, 0x83, 0x03, 0x0c, 0x0a, 0x34,
    0x93, 0x48, 0x88, 0x30, 0xeb, 0x51, 0x28, 0x4b, 0xca, 0x9a, 0x3d, 0x22, 0x02, 0x20, 0x24, 0x42, 0x5c, 0x3b, 0xf6, 0x05, 0x8e,
    0xe8, 0x8c, 0x01, 0xca, 0x35, 0x8e, 0xb7, 0xd5, 0xc8, 0xc1, 0x69, 0x46, 0xcf, 0xbb, 0xc6, 0x76, 0xc3, 0xea, 0x2f, 0xed, 0x8d,
    0x75, 0xc4, 0xfc, 0xf5,
};

extern const uint32_t sTestCert_Node01_DER_Len = sizeof(sTestCert_Node01_DER);

extern const uint8_t sTestCert_Node01_PublicKey[] = {
    0x04, 0x80, 0x52, 0x1c, 0x92, 0x47, 0xf8, 0xe5, 0xe3, 0x08, 0xa7, 0xac, 0x57, 0x5b, 0x7a, 0xd3, 0xc1,
    0x5f, 0xea, 0xbe, 0x48, 0x62, 0x1c, 0x4a, 0xd6, 0x95, 0xf1, 0x14, 0x23, 0x4c, 0x76, 0x99, 0x52, 0x38,
    0x09, 0x73, 0x28, 0xba, 0x1b, 0x91, 0x10, 0x12, 0x22, 0xfb, 0x35, 0x91, 0xdc, 0xf1, 0x87, 0x34, 0x06,
    0xc1, 0x4c, 0xe2, 0xdd, 0x2e, 0x3f, 0xb0, 0x9d, 0x6e, 0x04, 0x10, 0x09, 0xf4, 0x70,
};

extern const uint8_t sTestCert_Node01_PublicKey_Len = sizeof(sTestCert_Node01_PublicKey);

extern const uint8_t sTestCert_Node01_PrivateKey[] = {
    0x89, 0xf8, 0x7d, 0x48, 0x60, 0xbb, 0xf7, 0x33, 0x80, 0xf5, 0x4d, 0xd6, 0xfa, 0x58, 0x18, 0xf9,
    0x99, 0xe6, 0x76, 0x4b, 0x0d, 0xa7, 0x89, 0xc9, 0x50, 0xa2, 0x6c, 0x89, 0x59, 0xb9, 0xaf, 0x10,
};

extern const uint8_t sTestCert_Node01_PrivateKey_Len = sizeof(sTestCert_Node01_PrivateKey);

extern const uint8_t sTestCert_Node01_SubjectKeyId[] = {
    0x4F, 0x81, 0xF0, 0x44, 0xC8, 0x5F, 0xC3, 0xD9,
};

extern const uint8_t sTestCert_Node01_SubjectKeyId_Len = sizeof(sTestCert_Node01_SubjectKeyId);

extern const uint64_t sTestCert_Node01_Id = 0xDEDEDEDE00000001ULL;

/**************  Test FirmwareSigningCA Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 4858935668214195254 (0x436e683f1a61e436)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.2 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.2 = CACACACA00000004
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:67:47:90:a4:cb:5a:98:8c:50:01:1d:c0:3b:11:
                    f5:d0:91:b2:25:90:c1:e7:e8:01:ca:b1:8d:79:9d:
                    4a:27:af:a4:e5:e2:9d:65:cb:97:98:d0:5e:6e:1b:
                    72:ab:41:57:cb:f0:cf:47:fe:a2:61:76:82:fc:6d:
                    e3:6e:43:34:d1
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                4D:CB:CD:82:9E:BF:5C:EB
            X509v3 Authority Key Identifier:
                keyid:4F:5A:CC:78:01:43:03:52

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:21:00:d5:cb:c1:61:61:34:6d:c7:07:7e:89:07:78:
         cd:1f:e0:79:c8:8f:24:bd:01:11:34:a9:3d:af:73:d7:02:f9:
         3b:02:20:5b:64:52:76:29:16:5e:73:a0:cc:f1:ff:f2:56:40:
         84:48:a4:3c:23:d1:32:ba:f0:02:21:55:9d:cb:2c:e8:0c

-----BEGIN CERTIFICATE-----
MIIBhTCCASugAwIBAgIIQ25oPxph5DYwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQIMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBAgwQQ0FDQUNBQ0EwMDAwMDAwNDBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABGdHkKTLWpiMUAEdwDsR9dCRsiWQwefoAcqx
jXmdSievpOXinWXLl5jQXm4bcqtBV8vwz0f+omF2gvxt425DNNGjSzBJMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMBEGA1UdDgQKBAhNy82Cnr9c6zAT
BgNVHSMEDDAKgAhPWsx4AUMDUjAKBggqhkjOPQQDAgNIADBFAiEA1cvBYWE0bccH
fokHeM0f4HnIjyS9ARE0qT2vc9cC+TsCIFtkUnYpFl5zoMzx//JWQIRIpDwj0TK6
8AIhVZ3LLOgM
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEILbvCa3t51vMpV/OCeDhzQ/ZhTOfj1O75pktTZh7d9kmoAoGCCqGSM49
AwEHoUQDQgAEZ0eQpMtamIxQAR3AOxH10JGyJZDB5+gByrGNeZ1KJ6+k5eKdZcuX
mNBebhtyq0FXy/DPR/6iYXaC/G3jbkM00Q==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_FirmwareSigningCA_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x43, 0x6e, 0x68, 0x3f, 0x1a, 0x61, 0xe4, 0x36, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x12, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0xef, 0x11, 0x83, 0x01, 0x26, 0x05,
    0xee, 0xa9, 0xd3, 0x27, 0x37, 0x06, 0x27, 0x12, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24, 0x07, 0x01, 0x24,
    0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x67, 0x47, 0x90, 0xa4, 0xcb, 0x5a, 0x98, 0x8c, 0x50, 0x01, 0x1d, 0xc0, 0x3b, 0x11, 0xf5,
    0xd0, 0x91, 0xb2, 0x25, 0x90, 0xc1, 0xe7, 0xe8, 0x01, 0xca, 0xb1, 0x8d, 0x79, 0x9d, 0x4a, 0x27, 0xaf, 0xa4, 0xe5, 0xe2, 0x9d,
    0x65, 0xcb, 0x97, 0x98, 0xd0, 0x5e, 0x6e, 0x1b, 0x72, 0xab, 0x41, 0x57, 0xcb, 0xf0, 0xcf, 0x47, 0xfe, 0xa2, 0x61, 0x76, 0x82,
    0xfc, 0x6d, 0xe3, 0x6e, 0x43, 0x34, 0xd1, 0x35, 0x80, 0x29, 0x01, 0x29, 0x02, 0x18, 0x35, 0x81, 0x29, 0x01, 0x24, 0x02, 0x60,
    0x18, 0x35, 0x83, 0x30, 0x02, 0x08, 0x4d, 0xcb, 0xcd, 0x82, 0x9e, 0xbf, 0x5c, 0xeb, 0x18, 0x35, 0x84, 0x30, 0x02, 0x08, 0x4f,
    0x5a, 0xcc, 0x78, 0x01, 0x43, 0x03, 0x52, 0x18, 0x35, 0x0a, 0x30, 0x01, 0x21, 0x00, 0xd5, 0xcb, 0xc1, 0x61, 0x61, 0x34, 0x6d,
    0xc7, 0x07, 0x7e, 0x89, 0x07, 0x78, 0xcd, 0x1f, 0xe0, 0x79, 0xc8, 0x8f, 0x24, 0xbd, 0x01, 0x11, 0x34, 0xa9, 0x3d, 0xaf, 0x73,
    0xd7, 0x02, 0xf9, 0x3b, 0x30, 0x02, 0x20, 0x5b, 0x64, 0x52, 0x76, 0x29, 0x16, 0x5e, 0x73, 0xa0, 0xcc, 0xf1, 0xff, 0xf2, 0x56,
    0x40, 0x84, 0x48, 0xa4, 0x3c, 0x23, 0xd1, 0x32, 0xba, 0xf0, 0x02, 0x21, 0x55, 0x9d, 0xcb, 0x2c, 0xe8, 0x0c, 0x18, 0x18,
};

extern const uint32_t sTestCert_FirmwareSigningCA_Chip_Len = sizeof(sTestCert_FirmwareSigningCA_Chip);

extern const uint8_t sTestCert_FirmwareSigningCA_DER[] = {
    0x30, 0x82, 0x01, 0x85, 0x30, 0x82, 0x01, 0x2b, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x43, 0x6e, 0x68, 0x3f, 0x1a, 0x61,
    0xe4, 0x36, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x67, 0x47,
    0x90, 0xa4, 0xcb, 0x5a, 0x98, 0x8c, 0x50, 0x01, 0x1d, 0xc0, 0x3b, 0x11, 0xf5, 0xd0, 0x91, 0xb2, 0x25, 0x90, 0xc1, 0xe7, 0xe8,
    0x01, 0xca, 0xb1, 0x8d, 0x79, 0x9d, 0x4a, 0x27, 0xaf, 0xa4, 0xe5, 0xe2, 0x9d, 0x65, 0xcb, 0x97, 0x98, 0xd0, 0x5e, 0x6e, 0x1b,
    0x72, 0xab, 0x41, 0x57, 0xcb, 0xf0, 0xcf, 0x47, 0xfe, 0xa2, 0x61, 0x76, 0x82, 0xfc, 0x6d, 0xe3, 0x6e, 0x43, 0x34, 0xd1, 0xa3,
    0x4b, 0x30, 0x49, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x11, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x0a, 0x04, 0x08, 0x4d, 0xcb, 0xcd, 0x82, 0x9e, 0xbf, 0x5c, 0xeb, 0x30, 0x13, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04,
    0x0c, 0x30, 0x0a, 0x80, 0x08, 0x4f, 0x5a, 0xcc, 0x78, 0x01, 0x43, 0x03, 0x52, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,
    0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xd5, 0xcb, 0xc1, 0x61, 0x61, 0x34, 0x6d, 0xc7, 0x07,
    0x7e, 0x89, 0x07, 0x78, 0xcd, 0x1f, 0xe0, 0x79, 0xc8, 0x8f, 0x24, 0xbd, 0x01, 0x11, 0x34, 0xa9, 0x3d, 0xaf, 0x73, 0xd7, 0x02,
    0xf9, 0x3b, 0x02, 0x20, 0x5b, 0x64, 0x52, 0x76, 0x29, 0x16, 0x5e, 0x73, 0xa0, 0xcc, 0xf1, 0xff, 0xf2, 0x56, 0x40, 0x84, 0x48,
    0xa4, 0x3c, 0x23, 0xd1, 0x32, 0xba, 0xf0, 0x02, 0x21, 0x55, 0x9d, 0xcb, 0x2c, 0xe8, 0x0c,
};

extern const uint32_t sTestCert_FirmwareSigningCA_DER_Len = sizeof(sTestCert_FirmwareSigningCA_DER);

extern const uint8_t sTestCert_FirmwareSigningCA_PublicKey[] = {
    0x04, 0x67, 0x47, 0x90, 0xa4, 0xcb, 0x5a, 0x98, 0x8c, 0x50, 0x01, 0x1d, 0xc0, 0x3b, 0x11, 0xf5, 0xd0,
    0x91, 0xb2, 0x25, 0x90, 0xc1, 0xe7, 0xe8, 0x01, 0xca, 0xb1, 0x8d, 0x79, 0x9d, 0x4a, 0x27, 0xaf, 0xa4,
    0xe5, 0xe2, 0x9d, 0x65, 0xcb, 0x97, 0x98, 0xd0, 0x5e, 0x6e, 0x1b, 0x72, 0xab, 0x41, 0x57, 0xcb, 0xf0,
    0xcf, 0x47, 0xfe, 0xa2, 0x61, 0x76, 0x82, 0xfc, 0x6d, 0xe3, 0x6e, 0x43, 0x34, 0xd1,
};

extern const uint8_t sTestCert_FirmwareSigningCA_PublicKey_Len = sizeof(sTestCert_FirmwareSigningCA_PublicKey);

extern const uint8_t sTestCert_FirmwareSigningCA_PrivateKey[] = {
    0xb6, 0xef, 0x09, 0xad, 0xed, 0xe7, 0x5b, 0xcc, 0xa5, 0x5f, 0xce, 0x09, 0xe0, 0xe1, 0xcd, 0x0f,
    0xd9, 0x85, 0x33, 0x9f, 0x8f, 0x53, 0xbb, 0xe6, 0x99, 0x2d, 0x4d, 0x98, 0x7b, 0x77, 0xd9, 0x26,
};

extern const uint8_t sTestCert_FirmwareSigningCA_PrivateKey_Len = sizeof(sTestCert_FirmwareSigningCA_PrivateKey);

extern const uint8_t sTestCert_FirmwareSigningCA_SubjectKeyId[] = {
    0x4D, 0xCB, 0xCD, 0x82, 0x9E, 0xBF, 0x5C, 0xEB,
};

extern const uint8_t sTestCert_FirmwareSigningCA_SubjectKeyId_Len = sizeof(sTestCert_FirmwareSigningCA_SubjectKeyId);

extern const uint64_t sTestCert_FirmwareSigningCA_Id = 0xCACACACA00000004ULL;

/**************  Test FirmwareSigning Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1126576049446033558 (0xfa266f2b7b19896)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.2 = CACACACA00000004
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.3 = FFFFFFFF00000001
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:df:fd:b3:fe:de:d3:1f:39:f4:04:9a:fd:90:58:
                    dd:6d:88:5a:26:52:83:a4:fe:b1:26:9a:66:dc:c1:
                    11:7d:0d:cc:ea:b7:33:ce:c3:84:bf:0d:7e:26:2c:
                    30:7a:83:50:02:94:ad:78:57:02:93:1c:31:fe:41:
                    a3:d8:ae:e4:ef
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature
            X509v3 Extended Key Usage: critical
                Code Signing
            X509v3 Subject Key Identifier:
                42:8E:80:02:A4:BF:23:1D
            X509v3 Authority Key Identifier:
                keyid:4D:CB:CD:82:9E:BF:5C:EB

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:21:00:9c:97:f5:9b:3a:fb:43:95:c1:7d:3e:4f:50:
         55:aa:29:b6:de:4d:53:41:00:32:c6:8f:54:ca:4b:46:76:46:
         d4:02:20:5d:b5:b3:b6:72:18:cb:b6:64:bd:02:fe:ab:63:e7:
         48:67:d6:7a:04:1b:1e:1d:2e:b7:4c:bd:71:d4:23:83:3e

-----BEGIN CERTIFICATE-----
MIIBmjCCAUCgAwIBAgIID6Jm8rexmJYwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQIMEENBQ0FDQUNBMDAwMDAwMDQwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBAwwQRkZGRkZGRkYwMDAwMDAwMTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABN/9s/7e0x859ASa/ZBY3W2IWiZSg6T+sSaa
ZtzBEX0NzOq3M87DhL8NfiYsMHqDUAKUrXhXApMcMf5Bo9iu5O+jYDBeMAwGA1Ud
EwEB/wQCMAAwDgYDVR0PAQH/BAQDAgeAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMD
MBEGA1UdDgQKBAhCjoACpL8jHTATBgNVHSMEDDAKgAhNy82Cnr9c6zAKBggqhkjO
PQQDAgNIADBFAiEAnJf1mzr7Q5XBfT5PUFWqKbbeTVNBADLGj1TKS0Z2RtQCIF21
s7ZyGMu2ZL0C/qtj50hn1noEGx4dLrdMvXHUI4M+
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIOyBqPX2jlDA3uiS+G+t0ENrPZ+3iJdPTpafK6yxjKr4oAoGCCqGSM49
AwEHoUQDQgAE3/2z/t7THzn0BJr9kFjdbYhaJlKDpP6xJppm3MERfQ3M6rczzsOE
vw1+JiwweoNQApSteFcCkxwx/kGj2K7k7w==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_FirmwareSigning_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x0f, 0xa2, 0x66, 0xf2, 0xb7, 0xb1, 0x98, 0x96, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x12, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0xef, 0x11, 0x83, 0x01,
    0x26, 0x05, 0xee, 0xa9, 0xd3, 0x27, 0x37, 0x06, 0x27, 0x13, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x18, 0x24,
    0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0xdf, 0xfd, 0xb3, 0xfe, 0xde, 0xd3, 0x1f, 0x39, 0xf4, 0x04, 0x9a,
    0xfd, 0x90, 0x58, 0xdd, 0x6d, 0x88, 0x5a, 0x26, 0x52, 0x83, 0xa4, 0xfe, 0xb1, 0x26, 0x9a, 0x66, 0xdc, 0xc1, 0x11, 0x7d,
    0x0d, 0xcc, 0xea, 0xb7, 0x33, 0xce, 0xc3, 0x84, 0xbf, 0x0d, 0x7e, 0x26, 0x2c, 0x30, 0x7a, 0x83, 0x50, 0x02, 0x94, 0xad,
    0x78, 0x57, 0x02, 0x93, 0x1c, 0x31, 0xfe, 0x41, 0xa3, 0xd8, 0xae, 0xe4, 0xef, 0x35, 0x80, 0x29, 0x01, 0x18, 0x35, 0x81,
    0x29, 0x01, 0x24, 0x02, 0x01, 0x18, 0x35, 0x82, 0x29, 0x01, 0x36, 0x02, 0x04, 0x03, 0x18, 0x18, 0x35, 0x83, 0x30, 0x02,
    0x08, 0x42, 0x8e, 0x80, 0x02, 0xa4, 0xbf, 0x23, 0x1d, 0x18, 0x35, 0x84, 0x30, 0x02, 0x08, 0x4d, 0xcb, 0xcd, 0x82, 0x9e,
    0xbf, 0x5c, 0xeb, 0x18, 0x35, 0x0a, 0x30, 0x01, 0x21, 0x00, 0x9c, 0x97, 0xf5, 0x9b, 0x3a, 0xfb, 0x43, 0x95, 0xc1, 0x7d,
    0x3e, 0x4f, 0x50, 0x55, 0xaa, 0x29, 0xb6, 0xde, 0x4d, 0x53, 0x41, 0x00, 0x32, 0xc6, 0x8f, 0x54, 0xca, 0x4b, 0x46, 0x76,
    0x46, 0xd4, 0x30, 0x02, 0x20, 0x5d, 0xb5, 0xb3, 0xb6, 0x72, 0x18, 0xcb, 0xb6, 0x64, 0xbd, 0x02, 0xfe, 0xab, 0x63, 0xe7,
    0x48, 0x67, 0xd6, 0x7a, 0x04, 0x1b, 0x1e, 0x1d, 0x2e, 0xb7, 0x4c, 0xbd, 0x71, 0xd4, 0x23, 0x83, 0x3e, 0x18, 0x18,
};

extern const uint32_t sTestCert_FirmwareSigning_Chip_Len = sizeof(sTestCert_FirmwareSigning_Chip);

extern const uint8_t sTestCert_FirmwareSigning_DER[] = {
    0x30, 0x82, 0x01, 0x9a, 0x30, 0x82, 0x01, 0x40, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x0f, 0xa2, 0x66, 0xf2, 0xb7, 0xb1,
    0x98, 0x96, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x46, 0x46, 0x46,
    0x46, 0x46, 0x46, 0x46, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xdf, 0xfd,
    0xb3, 0xfe, 0xde, 0xd3, 0x1f, 0x39, 0xf4, 0x04, 0x9a, 0xfd, 0x90, 0x58, 0xdd, 0x6d, 0x88, 0x5a, 0x26, 0x52, 0x83, 0xa4, 0xfe,
    0xb1, 0x26, 0x9a, 0x66, 0xdc, 0xc1, 0x11, 0x7d, 0x0d, 0xcc, 0xea, 0xb7, 0x33, 0xce, 0xc3, 0x84, 0xbf, 0x0d, 0x7e, 0x26, 0x2c,
    0x30, 0x7a, 0x83, 0x50, 0x02, 0x94, 0xad, 0x78, 0x57, 0x02, 0x93, 0x1c, 0x31, 0xfe, 0x41, 0xa3, 0xd8, 0xae, 0xe4, 0xef, 0xa3,
    0x60, 0x30, 0x5e, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03,
    0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x16, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01,
    0xff, 0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x03, 0x30, 0x11, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x0a, 0x04, 0x08, 0x42, 0x8e, 0x80, 0x02, 0xa4, 0xbf, 0x23, 0x1d, 0x30, 0x13, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04,
    0x0c, 0x30, 0x0a, 0x80, 0x08, 0x4d, 0xcb, 0xcd, 0x82, 0x9e, 0xbf, 0x5c, 0xeb, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,
    0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0x9c, 0x97, 0xf5, 0x9b, 0x3a, 0xfb, 0x43, 0x95, 0xc1,
    0x7d, 0x3e, 0x4f, 0x50, 0x55, 0xaa, 0x29, 0xb6, 0xde, 0x4d, 0x53, 0x41, 0x00, 0x32, 0xc6, 0x8f, 0x54, 0xca, 0x4b, 0x46, 0x76,
    0x46, 0xd4, 0x02, 0x20, 0x5d, 0xb5, 0xb3, 0xb6, 0x72, 0x18, 0xcb, 0xb6, 0x64, 0xbd, 0x02, 0xfe, 0xab, 0x63, 0xe7, 0x48, 0x67,
    0xd6, 0x7a, 0x04, 0x1b, 0x1e, 0x1d, 0x2e, 0xb7, 0x4c, 0xbd, 0x71, 0xd4, 0x23, 0x83, 0x3e,
};

extern const uint32_t sTestCert_FirmwareSigning_DER_Len = sizeof(sTestCert_FirmwareSigning_DER);

extern const uint8_t sTestCert_FirmwareSigning_PublicKey[] = {
    0x04, 0xdf, 0xfd, 0xb3, 0xfe, 0xde, 0xd3, 0x1f, 0x39, 0xf4, 0x04, 0x9a, 0xfd, 0x90, 0x58, 0xdd, 0x6d,
    0x88, 0x5a, 0x26, 0x52, 0x83, 0xa4, 0xfe, 0xb1, 0x26, 0x9a, 0x66, 0xdc, 0xc1, 0x11, 0x7d, 0x0d, 0xcc,
    0xea, 0xb7, 0x33, 0xce, 0xc3, 0x84, 0xbf, 0x0d, 0x7e, 0x26, 0x2c, 0x30, 0x7a, 0x83, 0x50, 0x02, 0x94,
    0xad, 0x78, 0x57, 0x02, 0x93, 0x1c, 0x31, 0xfe, 0x41, 0xa3, 0xd8, 0xae, 0xe4, 0xef,
};

extern const uint8_t sTestCert_FirmwareSigning_PublicKey_Len = sizeof(sTestCert_FirmwareSigning_PublicKey);

extern const uint8_t sTestCert_FirmwareSigning_PrivateKey[] = {
    0xec, 0x81, 0xa8, 0xf5, 0xf6, 0x8e, 0x50, 0xc0, 0xde, 0xe8, 0x92, 0xf8, 0x6f, 0xad, 0xd0, 0x43,
    0x6b, 0x3d, 0x9f, 0xb7, 0x88, 0x97, 0x4f, 0x4e, 0x96, 0x9f, 0x2b, 0xac, 0xb1, 0x8c, 0xaa, 0xf8,
};

extern const uint8_t sTestCert_FirmwareSigning_PrivateKey_Len = sizeof(sTestCert_FirmwareSigning_PrivateKey);

extern const uint8_t sTestCert_FirmwareSigning_SubjectKeyId[] = {
    0x42, 0x8E, 0x80, 0x02, 0xA4, 0xBF, 0x23, 0x1D,
};

extern const uint8_t sTestCert_FirmwareSigning_SubjectKeyId_Len = sizeof(sTestCert_FirmwareSigning_SubjectKeyId);

extern const uint64_t sTestCert_FirmwareSigning_Id = 0xFFFFFFFF00000001ULL;

} // namespace TestCerts
} // namespace chip
