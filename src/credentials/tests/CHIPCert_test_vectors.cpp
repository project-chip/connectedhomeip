/*
 *
 *    Copyright (c) 2020-2021 Project CHIP Authors
 *    Copyright (c) 2019 Google LLC.
 *    Copyright (c) 2016-2017 Nest Labs, Inc.
 *    All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *    @file
 *      This file contains definitions of test certificates used by various unit tests.
 *
 */

#include <credentials/CHIPCert.h>

#include "CHIPCert_test_vectors.h"

namespace chip {
namespace TestCerts {

using namespace chip::Credentials;
using namespace chip::ASN1;

// clang-format off
extern const uint8_t gTestCerts[] = {
    TestCert::kRoot01,
    TestCert::kRoot02,
    TestCert::kICA01,
    TestCert::kICA02,
    TestCert::kICA01_1,
    TestCert::kFWSign01,
    TestCert::kNode01_01,
    TestCert::kNode01_02,
    TestCert::kNode02_01,
    TestCert::kNode02_02,
};
// clang-format on

extern const size_t gNumTestCerts = sizeof(gTestCerts) / sizeof(gTestCerts[0]);

CHIP_ERROR GetTestCert(uint8_t certType, BitFlags<TestCertLoadFlags> certLoadFlags, const uint8_t *& certData,
                       uint32_t & certDataLen)
{
    CHIP_ERROR err;
    bool derForm = certLoadFlags.Has(TestCertLoadFlags::kDERForm);

#define SELECT_CERT(NAME)                                                                                                          \
    do                                                                                                                             \
    {                                                                                                                              \
        if (certType == TestCert::k##NAME)                                                                                         \
        {                                                                                                                          \
            if (derForm)                                                                                                           \
            {                                                                                                                      \
                certData    = sTestCert_##NAME##_DER;                                                                              \
                certDataLen = sTestCert_##NAME##_DER_Len;                                                                          \
            }                                                                                                                      \
            else                                                                                                                   \
            {                                                                                                                      \
                certData    = sTestCert_##NAME##_Chip;                                                                             \
                certDataLen = sTestCert_##NAME##_Chip_Len;                                                                         \
            }                                                                                                                      \
            ExitNow(err = CHIP_NO_ERROR);                                                                                          \
        }                                                                                                                          \
    } while (0)

    SELECT_CERT(Root01);
    SELECT_CERT(Root02);
    SELECT_CERT(ICA01);
    SELECT_CERT(ICA02);
    SELECT_CERT(ICA01_1);
    SELECT_CERT(FWSign01);
    SELECT_CERT(Node01_01);
    SELECT_CERT(Node01_02);
    SELECT_CERT(Node02_01);
    SELECT_CERT(Node02_02);

    err = CHIP_ERROR_CA_CERT_NOT_FOUND;

exit:
    return err;
}

const char * GetTestCertName(uint8_t certType)
{
#define NAME_CERT(NAME)                                                                                                            \
    do                                                                                                                             \
    {                                                                                                                              \
        if (certType == TestCert::k##NAME)                                                                                         \
        {                                                                                                                          \
            return #NAME;                                                                                                          \
        }                                                                                                                          \
    } while (0)

    NAME_CERT(Root01);
    NAME_CERT(Root02);
    NAME_CERT(ICA01);
    NAME_CERT(ICA02);
    NAME_CERT(ICA01_1);
    NAME_CERT(FWSign01);
    NAME_CERT(Node01_01);
    NAME_CERT(Node01_02);
    NAME_CERT(Node02_01);
    NAME_CERT(Node02_02);

    return nullptr;
}

CHIP_ERROR LoadTestCert(ChipCertificateSet & certSet, uint8_t certType, BitFlags<TestCertLoadFlags> certLoadFlags,
                        BitFlags<CertDecodeFlags> decodeFlags)
{
    CHIP_ERROR err;
    ChipCertificateData * cert;
    const uint8_t * certData;
    uint32_t certDataLen;

    // Get the requested certificate data.
    err = GetTestCert(certType, certLoadFlags, certData, certDataLen);
    SuccessOrExit(err);

    // Load it into the certificate set.
    err = certSet.LoadCert(certData, certDataLen, decodeFlags);
    SuccessOrExit(err);

    // Get loaded certificate data.
    cert = const_cast<ChipCertificateData *>(certSet.GetLastCert());
    VerifyOrExit(cert != nullptr, err = CHIP_ERROR_INVALID_ARGUMENT);

    // Apply load flags.
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressIsCA))
    {
        cert->mCertFlags.Clear(CertFlags::kIsCA);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressKeyUsage))
    {
        cert->mCertFlags.Clear(CertFlags::kExtPresent_KeyUsage);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSuppressKeyCertSign))
    {
        cert->mKeyUsageFlags.Clear(KeyUsageFlags::kKeyCertSign);
    }
    if (certLoadFlags.Has(TestCertLoadFlags::kSetPathLenConstZero))
    {
        cert->mCertFlags.Set(CertFlags::kPathLenConstraintPresent);
        cert->mPathLenConstraint = 0;
    }

exit:
    return err;
}

// ------------------------------ TEST CERTIFICATES ----------------------------------------

/**************  Test Root01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 2975174911246281958 (0x2949f1d1917d2ce6)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.2 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.2 = CACACACA00000001
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:4e:c9:67:95:58:bf:ee:41:68:48:cf:5f:f1:f2:
                    de:1e:d7:6c:e5:75:a0:78:99:96:82:bb:c8:1d:06:
                    58:19:4d:43:bb:7d:ae:52:fb:4a:cd:60:7c:07:ca:
                    14:e0:13:0e:19:b6:27:ae:27:98:09:13:fb:ba:c2:
                    4a:57:6d:76:ac
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                DD:4D:8F:3D:E8:AD:C0:97:9B:FC:C6:E9:B2:7E:BD:A2:C3:6B:EB:E5
            X509v3 Authority Key Identifier:
                keyid:DD:4D:8F:3D:E8:AD:C0:97:9B:FC:C6:E9:B2:7E:BD:A2:C3:6B:EB:E5

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:2b:c0:ce:fd:b8:b0:7d:b1:be:1c:f3:30:a4:05:
         43:46:e2:27:73:81:11:4f:6e:b2:85:05:22:46:d3:ae:fd:db:
         02:20:00:99:bb:9b:0c:f8:f2:e7:46:07:ca:4e:c9:02:30:4e:
         32:f1:45:77:5e:ad:f4:b0:2d:cb:e7:34:20:6f:c2:e6

-----BEGIN CERTIFICATE-----
MIIBnDCCAUOgAwIBAgIIKUnx0ZF9LOYwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQIMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBAgwQQ0FDQUNBQ0EwMDAwMDAwMTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABE7JZ5VYv+5BaEjPX/Hy3h7XbOV1oHiZloK7
yB0GWBlNQ7t9rlL7Ss1gfAfKFOATDhm2J64nmAkT+7rCSldtdqyjYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBTdTY896K3Al5v8
xumyfr2iw2vr5TAfBgNVHSMEGDAWgBTdTY896K3Al5v8xumyfr2iw2vr5TAKBggq
hkjOPQQDAgNHADBEAiArwM79uLB9sb4c8zCkBUNG4idzgRFPbrKFBSJG06792wIg
AJm7mwz48udGB8pOyQIwTjLxRXderfSwLcvnNCBvwuY=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEILVcjkT5hK35Sek54NKnGVp/SZZUc+VNGFk3NuGpupQroAoGCCqGSM49
AwEHoUQDQgAETslnlVi/7kFoSM9f8fLeHtds5XWgeJmWgrvIHQZYGU1Du32uUvtK
zWB8B8oU4BMOGbYnrieYCRP7usJKV212rA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Root01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x29, 0x49, 0xf1, 0xd1, 0x91, 0x7d, 0x2c, 0xe6, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x12, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05,
    0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x12, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24, 0x07, 0x01, 0x24,
    0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x4e, 0xc9, 0x67, 0x95, 0x58, 0xbf, 0xee, 0x41, 0x68, 0x48, 0xcf, 0x5f, 0xf1, 0xf2, 0xde,
    0x1e, 0xd7, 0x6c, 0xe5, 0x75, 0xa0, 0x78, 0x99, 0x96, 0x82, 0xbb, 0xc8, 0x1d, 0x06, 0x58, 0x19, 0x4d, 0x43, 0xbb, 0x7d, 0xae,
    0x52, 0xfb, 0x4a, 0xcd, 0x60, 0x7c, 0x07, 0xca, 0x14, 0xe0, 0x13, 0x0e, 0x19, 0xb6, 0x27, 0xae, 0x27, 0x98, 0x09, 0x13, 0xfb,
    0xba, 0xc2, 0x4a, 0x57, 0x6d, 0x76, 0xac, 0x35, 0x80, 0x29, 0x01, 0x18, 0x24, 0x81, 0x60, 0x30, 0x83, 0x14, 0xdd, 0x4d, 0x8f,
    0x3d, 0xe8, 0xad, 0xc0, 0x97, 0x9b, 0xfc, 0xc6, 0xe9, 0xb2, 0x7e, 0xbd, 0xa2, 0xc3, 0x6b, 0xeb, 0xe5, 0x30, 0x84, 0x14, 0xdd,
    0x4d, 0x8f, 0x3d, 0xe8, 0xad, 0xc0, 0x97, 0x9b, 0xfc, 0xc6, 0xe9, 0xb2, 0x7e, 0xbd, 0xa2, 0xc3, 0x6b, 0xeb, 0xe5, 0x35, 0x0a,
    0x30, 0x01, 0x20, 0x2b, 0xc0, 0xce, 0xfd, 0xb8, 0xb0, 0x7d, 0xb1, 0xbe, 0x1c, 0xf3, 0x30, 0xa4, 0x05, 0x43, 0x46, 0xe2, 0x27,
    0x73, 0x81, 0x11, 0x4f, 0x6e, 0xb2, 0x85, 0x05, 0x22, 0x46, 0xd3, 0xae, 0xfd, 0xdb, 0x30, 0x02, 0x20, 0x00, 0x99, 0xbb, 0x9b,
    0x0c, 0xf8, 0xf2, 0xe7, 0x46, 0x07, 0xca, 0x4e, 0xc9, 0x02, 0x30, 0x4e, 0x32, 0xf1, 0x45, 0x77, 0x5e, 0xad, 0xf4, 0xb0, 0x2d,
    0xcb, 0xe7, 0x34, 0x20, 0x6f, 0xc2, 0xe6, 0x18, 0x18,
};

extern const uint32_t sTestCert_Root01_Chip_Len = sizeof(sTestCert_Root01_Chip);

extern const uint8_t sTestCert_Root01_DER[] = {
    0x30, 0x82, 0x01, 0x9c, 0x30, 0x82, 0x01, 0x43, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x29, 0x49, 0xf1, 0xd1, 0x91, 0x7d,
    0x2c, 0xe6, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x4e, 0xc9,
    0x67, 0x95, 0x58, 0xbf, 0xee, 0x41, 0x68, 0x48, 0xcf, 0x5f, 0xf1, 0xf2, 0xde, 0x1e, 0xd7, 0x6c, 0xe5, 0x75, 0xa0, 0x78, 0x99,
    0x96, 0x82, 0xbb, 0xc8, 0x1d, 0x06, 0x58, 0x19, 0x4d, 0x43, 0xbb, 0x7d, 0xae, 0x52, 0xfb, 0x4a, 0xcd, 0x60, 0x7c, 0x07, 0xca,
    0x14, 0xe0, 0x13, 0x0e, 0x19, 0xb6, 0x27, 0xae, 0x27, 0x98, 0x09, 0x13, 0xfb, 0xba, 0xc2, 0x4a, 0x57, 0x6d, 0x76, 0xac, 0xa3,
    0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x16, 0x04, 0x14, 0xdd, 0x4d, 0x8f, 0x3d, 0xe8, 0xad, 0xc0, 0x97, 0x9b, 0xfc, 0xc6, 0xe9, 0xb2, 0x7e, 0xbd, 0xa2,
    0xc3, 0x6b, 0xeb, 0xe5, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xdd, 0x4d, 0x8f, 0x3d,
    0xe8, 0xad, 0xc0, 0x97, 0x9b, 0xfc, 0xc6, 0xe9, 0xb2, 0x7e, 0xbd, 0xa2, 0xc3, 0x6b, 0xeb, 0xe5, 0x30, 0x0a, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x2b, 0xc0, 0xce, 0xfd, 0xb8, 0xb0, 0x7d,
    0xb1, 0xbe, 0x1c, 0xf3, 0x30, 0xa4, 0x05, 0x43, 0x46, 0xe2, 0x27, 0x73, 0x81, 0x11, 0x4f, 0x6e, 0xb2, 0x85, 0x05, 0x22, 0x46,
    0xd3, 0xae, 0xfd, 0xdb, 0x02, 0x20, 0x00, 0x99, 0xbb, 0x9b, 0x0c, 0xf8, 0xf2, 0xe7, 0x46, 0x07, 0xca, 0x4e, 0xc9, 0x02, 0x30,
    0x4e, 0x32, 0xf1, 0x45, 0x77, 0x5e, 0xad, 0xf4, 0xb0, 0x2d, 0xcb, 0xe7, 0x34, 0x20, 0x6f, 0xc2, 0xe6,
};

extern const uint32_t sTestCert_Root01_DER_Len = sizeof(sTestCert_Root01_DER);

extern const uint8_t sTestCert_Root01_PublicKey[] = {
    0x04, 0x4e, 0xc9, 0x67, 0x95, 0x58, 0xbf, 0xee, 0x41, 0x68, 0x48, 0xcf, 0x5f, 0xf1, 0xf2, 0xde, 0x1e,
    0xd7, 0x6c, 0xe5, 0x75, 0xa0, 0x78, 0x99, 0x96, 0x82, 0xbb, 0xc8, 0x1d, 0x06, 0x58, 0x19, 0x4d, 0x43,
    0xbb, 0x7d, 0xae, 0x52, 0xfb, 0x4a, 0xcd, 0x60, 0x7c, 0x07, 0xca, 0x14, 0xe0, 0x13, 0x0e, 0x19, 0xb6,
    0x27, 0xae, 0x27, 0x98, 0x09, 0x13, 0xfb, 0xba, 0xc2, 0x4a, 0x57, 0x6d, 0x76, 0xac,
};

extern const uint8_t sTestCert_Root01_PublicKey_Len = sizeof(sTestCert_Root01_PublicKey);

extern const uint8_t sTestCert_Root01_PrivateKey[] = {
    0xb5, 0x5c, 0x8e, 0x44, 0xf9, 0x84, 0xad, 0xf9, 0x49, 0xe9, 0x39, 0xe0, 0xd2, 0xa7, 0x19, 0x5a,
    0x7f, 0x49, 0x96, 0x54, 0x73, 0xe5, 0x4d, 0x18, 0x59, 0x37, 0x36, 0xe1, 0xa9, 0xba, 0x94, 0x2b,
};

extern const uint8_t sTestCert_Root01_PrivateKey_Len = sizeof(sTestCert_Root01_PrivateKey);

extern const uint8_t sTestCert_Root01_SubjectKeyId[] = {
    0xDD, 0x4D, 0x8F, 0x3D, 0xE8, 0xAD, 0xC0, 0x97, 0x9B, 0xFC, 0xC6, 0xE9, 0xB2, 0x7E, 0xBD, 0xA2, 0xC3, 0x6B, 0xEB, 0xE5,
};

extern const uint8_t sTestCert_Root01_SubjectKeyId_Len = sizeof(sTestCert_Root01_SubjectKeyId);

/**************  Test Root02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 5888710060822225902 (0x51b8e699c093e3ee)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.2 = CACACACA00000002, 1.3.6.1.4.1.37244.1.4 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.2 = CACACACA00000002, 1.3.6.1.4.1.37244.1.4 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:df:7f:f0:ea:44:22:1a:7a:53:9d:b0:fb:e2:98:
                    67:47:be:95:ba:09:6b:cb:fc:28:54:13:23:3a:57:
                    b9:fe:9e:78:b7:0b:fe:8d:bc:6e:62:b1:55:09:63:
                    a0:86:79:8d:08:34:bc:8e:b5:54:15:a5:a9:ca:7d:
                    99:88:f2:d2:80
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                34:DE:B9:F4:CB:D0:C5:0C:E0:D3:DB:AB:E1:F2:0B:0A:90:55:A6:E8
            X509v3 Authority Key Identifier:
                keyid:34:DE:B9:F4:CB:D0:C5:0C:E0:D3:DB:AB:E1:F2:0B:0A:90:55:A6:E8

    Signature Algorithm: ecdsa-with-SHA256
         30:46:02:21:00:b0:55:36:c2:d6:60:bc:b5:e8:66:53:ac:93:
         69:21:67:8e:6d:d7:de:1d:02:29:13:0f:2f:87:b5:1f:11:5f:
         ca:02:21:00:87:da:5e:d8:54:56:d4:18:ea:92:ea:10:58:63:
         80:59:ce:84:f9:32:bd:4c:e2:e4:fa:f4:60:7c:5f:cf:81:bb

-----BEGIN CERTIFICATE-----
MIIB4jCCAYegAwIBAgIIUbjmmcCT4+4wCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQIMEENBQ0FDQUNBMDAwMDAwMDIxIDAeBgorBgEEAYKifAEEDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQIMEENBQ0FDQUNBMDAwMDAwMDIxIDAeBgorBgEEAYKifAEEDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE33/w6kQi
GnpTnbD74phnR76Vuglry/woVBMjOle5/p54twv+jbxuYrFVCWOghnmNCDS8jrVU
FaWpyn2ZiPLSgKNjMGEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw
HQYDVR0OBBYEFDTeufTL0MUM4NPbq+HyCwqQVaboMB8GA1UdIwQYMBaAFDTeufTL
0MUM4NPbq+HyCwqQVaboMAoGCCqGSM49BAMCA0kAMEYCIQCwVTbC1mC8tehmU6yT
aSFnjm3X3h0CKRMPL4e1HxFfygIhAIfaXthUVtQY6pLqEFhjgFnOhPkyvUzi5Pr0
YHxfz4G7
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIFP1YRbaQIWHldxQhfYxLINfCVU4wMhkBnmvvBp/LnrfoAoGCCqGSM49
AwEHoUQDQgAE33/w6kQiGnpTnbD74phnR76Vuglry/woVBMjOle5/p54twv+jbxu
YrFVCWOghnmNCDS8jrVUFaWpyn2ZiPLSgA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Root02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x51, 0xb8, 0xe6, 0x99, 0xc0, 0x93, 0xe3, 0xee, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x12, 0x02, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x14, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x12, 0x02, 0x00, 0x00,
    0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x14, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08,
    0x01, 0x30, 0x09, 0x41, 0x04, 0xdf, 0x7f, 0xf0, 0xea, 0x44, 0x22, 0x1a, 0x7a, 0x53, 0x9d, 0xb0, 0xfb, 0xe2, 0x98, 0x67, 0x47,
    0xbe, 0x95, 0xba, 0x09, 0x6b, 0xcb, 0xfc, 0x28, 0x54, 0x13, 0x23, 0x3a, 0x57, 0xb9, 0xfe, 0x9e, 0x78, 0xb7, 0x0b, 0xfe, 0x8d,
    0xbc, 0x6e, 0x62, 0xb1, 0x55, 0x09, 0x63, 0xa0, 0x86, 0x79, 0x8d, 0x08, 0x34, 0xbc, 0x8e, 0xb5, 0x54, 0x15, 0xa5, 0xa9, 0xca,
    0x7d, 0x99, 0x88, 0xf2, 0xd2, 0x80, 0x35, 0x80, 0x29, 0x01, 0x18, 0x24, 0x81, 0x60, 0x30, 0x83, 0x14, 0x34, 0xde, 0xb9, 0xf4,
    0xcb, 0xd0, 0xc5, 0x0c, 0xe0, 0xd3, 0xdb, 0xab, 0xe1, 0xf2, 0x0b, 0x0a, 0x90, 0x55, 0xa6, 0xe8, 0x30, 0x84, 0x14, 0x34, 0xde,
    0xb9, 0xf4, 0xcb, 0xd0, 0xc5, 0x0c, 0xe0, 0xd3, 0xdb, 0xab, 0xe1, 0xf2, 0x0b, 0x0a, 0x90, 0x55, 0xa6, 0xe8, 0x35, 0x0a, 0x30,
    0x01, 0x21, 0x00, 0xb0, 0x55, 0x36, 0xc2, 0xd6, 0x60, 0xbc, 0xb5, 0xe8, 0x66, 0x53, 0xac, 0x93, 0x69, 0x21, 0x67, 0x8e, 0x6d,
    0xd7, 0xde, 0x1d, 0x02, 0x29, 0x13, 0x0f, 0x2f, 0x87, 0xb5, 0x1f, 0x11, 0x5f, 0xca, 0x30, 0x02, 0x21, 0x00, 0x87, 0xda, 0x5e,
    0xd8, 0x54, 0x56, 0xd4, 0x18, 0xea, 0x92, 0xea, 0x10, 0x58, 0x63, 0x80, 0x59, 0xce, 0x84, 0xf9, 0x32, 0xbd, 0x4c, 0xe2, 0xe4,
    0xfa, 0xf4, 0x60, 0x7c, 0x5f, 0xcf, 0x81, 0xbb, 0x18, 0x18,
};

extern const uint32_t sTestCert_Root02_Chip_Len = sizeof(sTestCert_Root02_Chip);

extern const uint8_t sTestCert_Root02_DER[] = {
    0x30, 0x82, 0x01, 0xe2, 0x30, 0x82, 0x01, 0x87, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x51, 0xb8, 0xe6, 0x99, 0xc0, 0x93,
    0xe3, 0xee, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x04, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0xdf, 0x7f, 0xf0, 0xea, 0x44, 0x22, 0x1a, 0x7a, 0x53, 0x9d, 0xb0, 0xfb, 0xe2, 0x98, 0x67, 0x47, 0xbe, 0x95,
    0xba, 0x09, 0x6b, 0xcb, 0xfc, 0x28, 0x54, 0x13, 0x23, 0x3a, 0x57, 0xb9, 0xfe, 0x9e, 0x78, 0xb7, 0x0b, 0xfe, 0x8d, 0xbc, 0x6e,
    0x62, 0xb1, 0x55, 0x09, 0x63, 0xa0, 0x86, 0x79, 0x8d, 0x08, 0x34, 0xbc, 0x8e, 0xb5, 0x54, 0x15, 0xa5, 0xa9, 0xca, 0x7d, 0x99,
    0x88, 0xf2, 0xd2, 0x80, 0xa3, 0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30,
    0x03, 0x01, 0x01, 0xff, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x34, 0xde, 0xb9, 0xf4, 0xcb, 0xd0, 0xc5, 0x0c, 0xe0, 0xd3, 0xdb,
    0xab, 0xe1, 0xf2, 0x0b, 0x0a, 0x90, 0x55, 0xa6, 0xe8, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0x34, 0xde, 0xb9, 0xf4, 0xcb, 0xd0, 0xc5, 0x0c, 0xe0, 0xd3, 0xdb, 0xab, 0xe1, 0xf2, 0x0b, 0x0a, 0x90, 0x55, 0xa6, 0xe8,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0xb0,
    0x55, 0x36, 0xc2, 0xd6, 0x60, 0xbc, 0xb5, 0xe8, 0x66, 0x53, 0xac, 0x93, 0x69, 0x21, 0x67, 0x8e, 0x6d, 0xd7, 0xde, 0x1d, 0x02,
    0x29, 0x13, 0x0f, 0x2f, 0x87, 0xb5, 0x1f, 0x11, 0x5f, 0xca, 0x02, 0x21, 0x00, 0x87, 0xda, 0x5e, 0xd8, 0x54, 0x56, 0xd4, 0x18,
    0xea, 0x92, 0xea, 0x10, 0x58, 0x63, 0x80, 0x59, 0xce, 0x84, 0xf9, 0x32, 0xbd, 0x4c, 0xe2, 0xe4, 0xfa, 0xf4, 0x60, 0x7c, 0x5f,
    0xcf, 0x81, 0xbb,
};

extern const uint32_t sTestCert_Root02_DER_Len = sizeof(sTestCert_Root02_DER);

extern const uint8_t sTestCert_Root02_PublicKey[] = {
    0x04, 0xdf, 0x7f, 0xf0, 0xea, 0x44, 0x22, 0x1a, 0x7a, 0x53, 0x9d, 0xb0, 0xfb, 0xe2, 0x98, 0x67, 0x47,
    0xbe, 0x95, 0xba, 0x09, 0x6b, 0xcb, 0xfc, 0x28, 0x54, 0x13, 0x23, 0x3a, 0x57, 0xb9, 0xfe, 0x9e, 0x78,
    0xb7, 0x0b, 0xfe, 0x8d, 0xbc, 0x6e, 0x62, 0xb1, 0x55, 0x09, 0x63, 0xa0, 0x86, 0x79, 0x8d, 0x08, 0x34,
    0xbc, 0x8e, 0xb5, 0x54, 0x15, 0xa5, 0xa9, 0xca, 0x7d, 0x99, 0x88, 0xf2, 0xd2, 0x80,
};

extern const uint8_t sTestCert_Root02_PublicKey_Len = sizeof(sTestCert_Root02_PublicKey);

extern const uint8_t sTestCert_Root02_PrivateKey[] = {
    0x53, 0xf5, 0x61, 0x16, 0xda, 0x40, 0x85, 0x87, 0x95, 0xdc, 0x50, 0x85, 0xf6, 0x31, 0x2c, 0x83,
    0x5f, 0x09, 0x55, 0x38, 0xc0, 0xc8, 0x64, 0x06, 0x79, 0xaf, 0xbc, 0x1a, 0x7f, 0x2e, 0x7a, 0xdf,
};

extern const uint8_t sTestCert_Root02_PrivateKey_Len = sizeof(sTestCert_Root02_PrivateKey);

extern const uint8_t sTestCert_Root02_SubjectKeyId[] = {
    0x34, 0xDE, 0xB9, 0xF4, 0xCB, 0xD0, 0xC5, 0x0C, 0xE0, 0xD3, 0xDB, 0xAB, 0xE1, 0xF2, 0x0B, 0x0A, 0x90, 0x55, 0xA6, 0xE8,
};

extern const uint8_t sTestCert_Root02_SubjectKeyId_Len = sizeof(sTestCert_Root02_SubjectKeyId);

/**************  Test ICA01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 414357994946024837 (0x5c01866aa99d585)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.2 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.2 = CACACACA00000003
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:55:24:b1:9b:07:73:4c:3e:79:51:ef:6d:d6:6f:
                    1e:c1:3e:cb:42:b9:6d:5e:7b:1d:08:79:96:14:c2:
                    fd:a9:e2:5e:b8:b9:6e:05:b9:a2:e8:ec:4c:40:4d:
                    19:1c:14:b6:01:dd:5c:a9:98:ab:3b:14:99:81:3d:
                    09:ea:f3:eb:63
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                A3:B0:82:2E:6D:15:3B:3A:96:5C:A2:AE:D3:BF:2F:50:46:4F:05:E4
            X509v3 Authority Key Identifier:
                keyid:DD:4D:8F:3D:E8:AD:C0:97:9B:FC:C6:E9:B2:7E:BD:A2:C3:6B:EB:E5

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:21:5e:ba:a7:51:7e:46:5d:48:65:a2:10:2d:ba:
         65:12:21:d6:c5:4d:e9:fc:4c:7f:f6:6c:83:a1:0e:35:4b:87:
         02:21:00:f9:f9:5c:e1:b8:3d:d1:fb:98:36:14:b9:94:d6:a1:
         9a:08:68:c8:c6:7f:bf:ff:a9:c1:c8:2e:58:b4:09:36:8b

-----BEGIN CERTIFICATE-----
MIIBnTCCAUOgAwIBAgIIBcAYZqqZ1YUwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQIMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBAgwQQ0FDQUNBQ0EwMDAwMDAwMzBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABFUksZsHc0w+eVHvbdZvHsE+y0K5bV57HQh5
lhTC/aniXri5bgW5oujsTEBNGRwUtgHdXKmYqzsUmYE9Cerz62OjYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBSjsIIubRU7OpZc
oq7Tvy9QRk8F5DAfBgNVHSMEGDAWgBTdTY896K3Al5v8xumyfr2iw2vr5TAKBggq
hkjOPQQDAgNIADBFAiAhXrqnUX5GXUhlohAtumUSIdbFTen8TH/2bIOhDjVLhwIh
APn5XOG4PdH7mDYUuZTWoZoIaMjGf7//qcHILli0CTaL
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEILDZdXRGAWr1NzJ2qNBFSxvko2b4U5YAscPU29ND0e7ToAoGCCqGSM49
AwEHoUQDQgAEVSSxmwdzTD55Ue9t1m8ewT7LQrltXnsdCHmWFML9qeJeuLluBbmi
6OxMQE0ZHBS2Ad1cqZirOxSZgT0J6vPrYw==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_ICA01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x05, 0xc0, 0x18, 0x66, 0xaa, 0x99, 0xd5, 0x85, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x12, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05,
    0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x12, 0x03, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24, 0x07, 0x01, 0x24,
    0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x55, 0x24, 0xb1, 0x9b, 0x07, 0x73, 0x4c, 0x3e, 0x79, 0x51, 0xef, 0x6d, 0xd6, 0x6f, 0x1e,
    0xc1, 0x3e, 0xcb, 0x42, 0xb9, 0x6d, 0x5e, 0x7b, 0x1d, 0x08, 0x79, 0x96, 0x14, 0xc2, 0xfd, 0xa9, 0xe2, 0x5e, 0xb8, 0xb9, 0x6e,
    0x05, 0xb9, 0xa2, 0xe8, 0xec, 0x4c, 0x40, 0x4d, 0x19, 0x1c, 0x14, 0xb6, 0x01, 0xdd, 0x5c, 0xa9, 0x98, 0xab, 0x3b, 0x14, 0x99,
    0x81, 0x3d, 0x09, 0xea, 0xf3, 0xeb, 0x63, 0x35, 0x80, 0x29, 0x01, 0x18, 0x24, 0x81, 0x60, 0x30, 0x83, 0x14, 0xa3, 0xb0, 0x82,
    0x2e, 0x6d, 0x15, 0x3b, 0x3a, 0x96, 0x5c, 0xa2, 0xae, 0xd3, 0xbf, 0x2f, 0x50, 0x46, 0x4f, 0x05, 0xe4, 0x30, 0x84, 0x14, 0xdd,
    0x4d, 0x8f, 0x3d, 0xe8, 0xad, 0xc0, 0x97, 0x9b, 0xfc, 0xc6, 0xe9, 0xb2, 0x7e, 0xbd, 0xa2, 0xc3, 0x6b, 0xeb, 0xe5, 0x35, 0x0a,
    0x30, 0x01, 0x20, 0x21, 0x5e, 0xba, 0xa7, 0x51, 0x7e, 0x46, 0x5d, 0x48, 0x65, 0xa2, 0x10, 0x2d, 0xba, 0x65, 0x12, 0x21, 0xd6,
    0xc5, 0x4d, 0xe9, 0xfc, 0x4c, 0x7f, 0xf6, 0x6c, 0x83, 0xa1, 0x0e, 0x35, 0x4b, 0x87, 0x30, 0x02, 0x21, 0x00, 0xf9, 0xf9, 0x5c,
    0xe1, 0xb8, 0x3d, 0xd1, 0xfb, 0x98, 0x36, 0x14, 0xb9, 0x94, 0xd6, 0xa1, 0x9a, 0x08, 0x68, 0xc8, 0xc6, 0x7f, 0xbf, 0xff, 0xa9,
    0xc1, 0xc8, 0x2e, 0x58, 0xb4, 0x09, 0x36, 0x8b, 0x18, 0x18,
};

extern const uint32_t sTestCert_ICA01_Chip_Len = sizeof(sTestCert_ICA01_Chip);

extern const uint8_t sTestCert_ICA01_DER[] = {
    0x30, 0x82, 0x01, 0x9d, 0x30, 0x82, 0x01, 0x43, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x05, 0xc0, 0x18, 0x66, 0xaa, 0x99,
    0xd5, 0x85, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x55, 0x24,
    0xb1, 0x9b, 0x07, 0x73, 0x4c, 0x3e, 0x79, 0x51, 0xef, 0x6d, 0xd6, 0x6f, 0x1e, 0xc1, 0x3e, 0xcb, 0x42, 0xb9, 0x6d, 0x5e, 0x7b,
    0x1d, 0x08, 0x79, 0x96, 0x14, 0xc2, 0xfd, 0xa9, 0xe2, 0x5e, 0xb8, 0xb9, 0x6e, 0x05, 0xb9, 0xa2, 0xe8, 0xec, 0x4c, 0x40, 0x4d,
    0x19, 0x1c, 0x14, 0xb6, 0x01, 0xdd, 0x5c, 0xa9, 0x98, 0xab, 0x3b, 0x14, 0x99, 0x81, 0x3d, 0x09, 0xea, 0xf3, 0xeb, 0x63, 0xa3,
    0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x16, 0x04, 0x14, 0xa3, 0xb0, 0x82, 0x2e, 0x6d, 0x15, 0x3b, 0x3a, 0x96, 0x5c, 0xa2, 0xae, 0xd3, 0xbf, 0x2f, 0x50,
    0x46, 0x4f, 0x05, 0xe4, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xdd, 0x4d, 0x8f, 0x3d,
    0xe8, 0xad, 0xc0, 0x97, 0x9b, 0xfc, 0xc6, 0xe9, 0xb2, 0x7e, 0xbd, 0xa2, 0xc3, 0x6b, 0xeb, 0xe5, 0x30, 0x0a, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x21, 0x5e, 0xba, 0xa7, 0x51, 0x7e, 0x46,
    0x5d, 0x48, 0x65, 0xa2, 0x10, 0x2d, 0xba, 0x65, 0x12, 0x21, 0xd6, 0xc5, 0x4d, 0xe9, 0xfc, 0x4c, 0x7f, 0xf6, 0x6c, 0x83, 0xa1,
    0x0e, 0x35, 0x4b, 0x87, 0x02, 0x21, 0x00, 0xf9, 0xf9, 0x5c, 0xe1, 0xb8, 0x3d, 0xd1, 0xfb, 0x98, 0x36, 0x14, 0xb9, 0x94, 0xd6,
    0xa1, 0x9a, 0x08, 0x68, 0xc8, 0xc6, 0x7f, 0xbf, 0xff, 0xa9, 0xc1, 0xc8, 0x2e, 0x58, 0xb4, 0x09, 0x36, 0x8b,
};

extern const uint32_t sTestCert_ICA01_DER_Len = sizeof(sTestCert_ICA01_DER);

extern const uint8_t sTestCert_ICA01_PublicKey[] = {
    0x04, 0x55, 0x24, 0xb1, 0x9b, 0x07, 0x73, 0x4c, 0x3e, 0x79, 0x51, 0xef, 0x6d, 0xd6, 0x6f, 0x1e, 0xc1,
    0x3e, 0xcb, 0x42, 0xb9, 0x6d, 0x5e, 0x7b, 0x1d, 0x08, 0x79, 0x96, 0x14, 0xc2, 0xfd, 0xa9, 0xe2, 0x5e,
    0xb8, 0xb9, 0x6e, 0x05, 0xb9, 0xa2, 0xe8, 0xec, 0x4c, 0x40, 0x4d, 0x19, 0x1c, 0x14, 0xb6, 0x01, 0xdd,
    0x5c, 0xa9, 0x98, 0xab, 0x3b, 0x14, 0x99, 0x81, 0x3d, 0x09, 0xea, 0xf3, 0xeb, 0x63,
};

extern const uint8_t sTestCert_ICA01_PublicKey_Len = sizeof(sTestCert_ICA01_PublicKey);

extern const uint8_t sTestCert_ICA01_PrivateKey[] = {
    0xb0, 0xd9, 0x75, 0x74, 0x46, 0x01, 0x6a, 0xf5, 0x37, 0x32, 0x76, 0xa8, 0xd0, 0x45, 0x4b, 0x1b,
    0xe4, 0xa3, 0x66, 0xf8, 0x53, 0x96, 0x00, 0xb1, 0xc3, 0xd4, 0xdb, 0xd3, 0x43, 0xd1, 0xee, 0xd3,
};

extern const uint8_t sTestCert_ICA01_PrivateKey_Len = sizeof(sTestCert_ICA01_PrivateKey);

extern const uint8_t sTestCert_ICA01_SubjectKeyId[] = {
    0xA3, 0xB0, 0x82, 0x2E, 0x6D, 0x15, 0x3B, 0x3A, 0x96, 0x5C, 0xA2, 0xAE, 0xD3, 0xBF, 0x2F, 0x50, 0x46, 0x4F, 0x05, 0xE4,
};

extern const uint8_t sTestCert_ICA01_SubjectKeyId_Len = sizeof(sTestCert_ICA01_SubjectKeyId);

/**************  Test ICA02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 400889266666814893 (0x5903ea9fdf13dad)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.2 = CACACACA00000002, 1.3.6.1.4.1.37244.1.4 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.2 = CACACACA00000004, 1.3.6.1.4.1.37244.1.4 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:4e:dc:f0:72:c0:51:b3:5f:7a:54:2f:a6:1e:2c:
                    2d:1c:a5:6b:34:d7:5b:49:ec:0e:cb:27:73:d1:ae:
                    9c:99:5d:58:ba:bc:74:0e:42:a6:fb:13:b8:8d:9a:
                    ee:50:b6:d8:89:4c:a5:c7:0d:1f:23:bf:91:d6:8e:
                    2f:34:54:5e:a1
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                6E:DC:F5:99:C4:B5:B2:93:04:EC:3A:9E:69:EE:3C:98:66:50:F4:A3
            X509v3 Authority Key Identifier:
                keyid:34:DE:B9:F4:CB:D0:C5:0C:E0:D3:DB:AB:E1:F2:0B:0A:90:55:A6:E8

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:21:00:ae:df:5d:9c:fb:8d:43:6d:e1:2b:15:24:87:
         94:82:18:9d:80:7e:4b:15:86:cc:97:f0:54:0b:d2:7a:3b:dd:
         8b:02:20:0e:20:59:de:9a:b9:04:0b:ba:d1:8c:76:eb:57:60:
         91:ee:82:e5:b1:d1:5d:a7:85:12:34:43:d7:17:18:46:cc

-----BEGIN CERTIFICATE-----
MIIB4TCCAYegAwIBAgIIBZA+qf3xPa0wCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQIMEENBQ0FDQUNBMDAwMDAwMDIxIDAeBgorBgEEAYKifAEEDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQIMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEEDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAETtzwcsBR
s196VC+mHiwtHKVrNNdbSewOyydz0a6cmV1Yurx0DkKm+xO4jZruULbYiUylxw0f
I7+R1o4vNFReoaNjMGEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw
HQYDVR0OBBYEFG7c9ZnEtbKTBOw6nmnuPJhmUPSjMB8GA1UdIwQYMBaAFDTeufTL
0MUM4NPbq+HyCwqQVaboMAoGCCqGSM49BAMCA0gAMEUCIQCu312c+41DbeErFSSH
lIIYnYB+SxWGzJfwVAvSejvdiwIgDiBZ3pq5BAu60Yx261dgke6C5bHRXaeFEjRD
1xcYRsw=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIHF0fWfgd5c2df2PmwpA/mFZelNGheKgYyRNGT0tpkTqoAoGCCqGSM49
AwEHoUQDQgAETtzwcsBRs196VC+mHiwtHKVrNNdbSewOyydz0a6cmV1Yurx0DkKm
+xO4jZruULbYiUylxw0fI7+R1o4vNFReoQ==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_ICA02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x05, 0x90, 0x3e, 0xa9, 0xfd, 0xf1, 0x3d, 0xad, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x12, 0x02, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x14, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x12, 0x04, 0x00, 0x00,
    0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x14, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08,
    0x01, 0x30, 0x09, 0x41, 0x04, 0x4e, 0xdc, 0xf0, 0x72, 0xc0, 0x51, 0xb3, 0x5f, 0x7a, 0x54, 0x2f, 0xa6, 0x1e, 0x2c, 0x2d, 0x1c,
    0xa5, 0x6b, 0x34, 0xd7, 0x5b, 0x49, 0xec, 0x0e, 0xcb, 0x27, 0x73, 0xd1, 0xae, 0x9c, 0x99, 0x5d, 0x58, 0xba, 0xbc, 0x74, 0x0e,
    0x42, 0xa6, 0xfb, 0x13, 0xb8, 0x8d, 0x9a, 0xee, 0x50, 0xb6, 0xd8, 0x89, 0x4c, 0xa5, 0xc7, 0x0d, 0x1f, 0x23, 0xbf, 0x91, 0xd6,
    0x8e, 0x2f, 0x34, 0x54, 0x5e, 0xa1, 0x35, 0x80, 0x29, 0x01, 0x18, 0x24, 0x81, 0x60, 0x30, 0x83, 0x14, 0x6e, 0xdc, 0xf5, 0x99,
    0xc4, 0xb5, 0xb2, 0x93, 0x04, 0xec, 0x3a, 0x9e, 0x69, 0xee, 0x3c, 0x98, 0x66, 0x50, 0xf4, 0xa3, 0x30, 0x84, 0x14, 0x34, 0xde,
    0xb9, 0xf4, 0xcb, 0xd0, 0xc5, 0x0c, 0xe0, 0xd3, 0xdb, 0xab, 0xe1, 0xf2, 0x0b, 0x0a, 0x90, 0x55, 0xa6, 0xe8, 0x35, 0x0a, 0x30,
    0x01, 0x21, 0x00, 0xae, 0xdf, 0x5d, 0x9c, 0xfb, 0x8d, 0x43, 0x6d, 0xe1, 0x2b, 0x15, 0x24, 0x87, 0x94, 0x82, 0x18, 0x9d, 0x80,
    0x7e, 0x4b, 0x15, 0x86, 0xcc, 0x97, 0xf0, 0x54, 0x0b, 0xd2, 0x7a, 0x3b, 0xdd, 0x8b, 0x30, 0x02, 0x20, 0x0e, 0x20, 0x59, 0xde,
    0x9a, 0xb9, 0x04, 0x0b, 0xba, 0xd1, 0x8c, 0x76, 0xeb, 0x57, 0x60, 0x91, 0xee, 0x82, 0xe5, 0xb1, 0xd1, 0x5d, 0xa7, 0x85, 0x12,
    0x34, 0x43, 0xd7, 0x17, 0x18, 0x46, 0xcc, 0x18, 0x18,
};

extern const uint32_t sTestCert_ICA02_Chip_Len = sizeof(sTestCert_ICA02_Chip);

extern const uint8_t sTestCert_ICA02_DER[] = {
    0x30, 0x82, 0x01, 0xe1, 0x30, 0x82, 0x01, 0x87, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x05, 0x90, 0x3e, 0xa9, 0xfd, 0xf1,
    0x3d, 0xad, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x04, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0x4e, 0xdc, 0xf0, 0x72, 0xc0, 0x51, 0xb3, 0x5f, 0x7a, 0x54, 0x2f, 0xa6, 0x1e, 0x2c, 0x2d, 0x1c, 0xa5, 0x6b,
    0x34, 0xd7, 0x5b, 0x49, 0xec, 0x0e, 0xcb, 0x27, 0x73, 0xd1, 0xae, 0x9c, 0x99, 0x5d, 0x58, 0xba, 0xbc, 0x74, 0x0e, 0x42, 0xa6,
    0xfb, 0x13, 0xb8, 0x8d, 0x9a, 0xee, 0x50, 0xb6, 0xd8, 0x89, 0x4c, 0xa5, 0xc7, 0x0d, 0x1f, 0x23, 0xbf, 0x91, 0xd6, 0x8e, 0x2f,
    0x34, 0x54, 0x5e, 0xa1, 0xa3, 0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30,
    0x03, 0x01, 0x01, 0xff, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x6e, 0xdc, 0xf5, 0x99, 0xc4, 0xb5, 0xb2, 0x93, 0x04, 0xec, 0x3a,
    0x9e, 0x69, 0xee, 0x3c, 0x98, 0x66, 0x50, 0xf4, 0xa3, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0x34, 0xde, 0xb9, 0xf4, 0xcb, 0xd0, 0xc5, 0x0c, 0xe0, 0xd3, 0xdb, 0xab, 0xe1, 0xf2, 0x0b, 0x0a, 0x90, 0x55, 0xa6, 0xe8,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xae,
    0xdf, 0x5d, 0x9c, 0xfb, 0x8d, 0x43, 0x6d, 0xe1, 0x2b, 0x15, 0x24, 0x87, 0x94, 0x82, 0x18, 0x9d, 0x80, 0x7e, 0x4b, 0x15, 0x86,
    0xcc, 0x97, 0xf0, 0x54, 0x0b, 0xd2, 0x7a, 0x3b, 0xdd, 0x8b, 0x02, 0x20, 0x0e, 0x20, 0x59, 0xde, 0x9a, 0xb9, 0x04, 0x0b, 0xba,
    0xd1, 0x8c, 0x76, 0xeb, 0x57, 0x60, 0x91, 0xee, 0x82, 0xe5, 0xb1, 0xd1, 0x5d, 0xa7, 0x85, 0x12, 0x34, 0x43, 0xd7, 0x17, 0x18,
    0x46, 0xcc,
};

extern const uint32_t sTestCert_ICA02_DER_Len = sizeof(sTestCert_ICA02_DER);

extern const uint8_t sTestCert_ICA02_PublicKey[] = {
    0x04, 0x4e, 0xdc, 0xf0, 0x72, 0xc0, 0x51, 0xb3, 0x5f, 0x7a, 0x54, 0x2f, 0xa6, 0x1e, 0x2c, 0x2d, 0x1c,
    0xa5, 0x6b, 0x34, 0xd7, 0x5b, 0x49, 0xec, 0x0e, 0xcb, 0x27, 0x73, 0xd1, 0xae, 0x9c, 0x99, 0x5d, 0x58,
    0xba, 0xbc, 0x74, 0x0e, 0x42, 0xa6, 0xfb, 0x13, 0xb8, 0x8d, 0x9a, 0xee, 0x50, 0xb6, 0xd8, 0x89, 0x4c,
    0xa5, 0xc7, 0x0d, 0x1f, 0x23, 0xbf, 0x91, 0xd6, 0x8e, 0x2f, 0x34, 0x54, 0x5e, 0xa1,
};

extern const uint8_t sTestCert_ICA02_PublicKey_Len = sizeof(sTestCert_ICA02_PublicKey);

extern const uint8_t sTestCert_ICA02_PrivateKey[] = {
    0x71, 0x74, 0x7d, 0x67, 0xe0, 0x77, 0x97, 0x36, 0x75, 0xfd, 0x8f, 0x9b, 0x0a, 0x40, 0xfe, 0x61,
    0x59, 0x7a, 0x53, 0x46, 0x85, 0xe2, 0xa0, 0x63, 0x24, 0x4d, 0x19, 0x3d, 0x2d, 0xa6, 0x44, 0xea,
};

extern const uint8_t sTestCert_ICA02_PrivateKey_Len = sizeof(sTestCert_ICA02_PrivateKey);

extern const uint8_t sTestCert_ICA02_SubjectKeyId[] = {
    0x6E, 0xDC, 0xF5, 0x99, 0xC4, 0xB5, 0xB2, 0x93, 0x04, 0xEC, 0x3A, 0x9E, 0x69, 0xEE, 0x3C, 0x98, 0x66, 0x50, 0xF4, 0xA3,
};

extern const uint8_t sTestCert_ICA02_SubjectKeyId_Len = sizeof(sTestCert_ICA02_SubjectKeyId);

/**************  Test ICA01_1 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1776052839654124416 (0x18a5cea5d1e86b80)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.2 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.2 = CACACACA00000005
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:86:26:d7:43:ed:07:82:f1:96:ce:a1:d1:7b:48:
                    c5:2b:f3:64:97:61:5b:4f:23:d3:23:af:5a:8a:4d:
                    1a:31:78:04:15:eb:22:24:de:ae:30:f3:56:ce:35:
                    33:28:3d:e0:58:ac:9a:2f:e3:6d:ed:f1:ed:22:b2:
                    60:f3:87:42:0a
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier:
                C6:B1:6A:1B:7F:EB:52:CA:87:09:18:20:46:34:48:34:89:46:B3:1B
            X509v3 Authority Key Identifier:
                keyid:DD:4D:8F:3D:E8:AD:C0:97:9B:FC:C6:E9:B2:7E:BD:A2:C3:6B:EB:E5

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:57:dc:8b:d1:c8:89:e6:66:6a:96:43:a9:b9:46:
         49:71:82:22:a1:79:3e:69:f2:d6:b5:73:c7:c8:58:02:f4:3e:
         02:21:00:bb:f4:48:07:cc:83:b5:18:b4:a6:86:27:fe:48:a3:
         8f:73:30:bc:a9:05:6c:a3:12:b9:90:ee:55:f1:87:ea:bf

-----BEGIN CERTIFICATE-----
MIIBnTCCAUOgAwIBAgIIGKXOpdHoa4AwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQIMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjAiMSAwHgYKKwYBBAGConwBAgwQQ0FDQUNBQ0EwMDAwMDAwNTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABIYm10PtB4Lxls6h0XtIxSvzZJdhW08j0yOv
WopNGjF4BBXrIiTerjDzVs41Myg94Fismi/jbe3x7SKyYPOHQgqjYzBhMA8GA1Ud
EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBTGsWobf+tSyocJ
GCBGNEg0iUazGzAfBgNVHSMEGDAWgBTdTY896K3Al5v8xumyfr2iw2vr5TAKBggq
hkjOPQQDAgNIADBFAiBX3IvRyInmZmqWQ6m5RklxgiKheT5p8ta1c8fIWAL0PgIh
ALv0SAfMg7UYtKaGJ/5Io49zMLypBWyjErmQ7lXxh+q/
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIFSZDAc11qvjYyfF8sZd/dXQzvT1d6C4tS8hV8fXGI5coAoGCCqGSM49
AwEHoUQDQgAEhibXQ+0HgvGWzqHRe0jFK/Nkl2FbTyPTI69aik0aMXgEFesiJN6u
MPNWzjUzKD3gWKyaL+Nt7fHtIrJg84dCCg==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_ICA01_1_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x18, 0xa5, 0xce, 0xa5, 0xd1, 0xe8, 0x6b, 0x80, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x12, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05,
    0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x12, 0x05, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x24, 0x07, 0x01, 0x24,
    0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x86, 0x26, 0xd7, 0x43, 0xed, 0x07, 0x82, 0xf1, 0x96, 0xce, 0xa1, 0xd1, 0x7b, 0x48, 0xc5,
    0x2b, 0xf3, 0x64, 0x97, 0x61, 0x5b, 0x4f, 0x23, 0xd3, 0x23, 0xaf, 0x5a, 0x8a, 0x4d, 0x1a, 0x31, 0x78, 0x04, 0x15, 0xeb, 0x22,
    0x24, 0xde, 0xae, 0x30, 0xf3, 0x56, 0xce, 0x35, 0x33, 0x28, 0x3d, 0xe0, 0x58, 0xac, 0x9a, 0x2f, 0xe3, 0x6d, 0xed, 0xf1, 0xed,
    0x22, 0xb2, 0x60, 0xf3, 0x87, 0x42, 0x0a, 0x35, 0x80, 0x29, 0x01, 0x18, 0x24, 0x81, 0x60, 0x30, 0x83, 0x14, 0xc6, 0xb1, 0x6a,
    0x1b, 0x7f, 0xeb, 0x52, 0xca, 0x87, 0x09, 0x18, 0x20, 0x46, 0x34, 0x48, 0x34, 0x89, 0x46, 0xb3, 0x1b, 0x30, 0x84, 0x14, 0xdd,
    0x4d, 0x8f, 0x3d, 0xe8, 0xad, 0xc0, 0x97, 0x9b, 0xfc, 0xc6, 0xe9, 0xb2, 0x7e, 0xbd, 0xa2, 0xc3, 0x6b, 0xeb, 0xe5, 0x35, 0x0a,
    0x30, 0x01, 0x20, 0x57, 0xdc, 0x8b, 0xd1, 0xc8, 0x89, 0xe6, 0x66, 0x6a, 0x96, 0x43, 0xa9, 0xb9, 0x46, 0x49, 0x71, 0x82, 0x22,
    0xa1, 0x79, 0x3e, 0x69, 0xf2, 0xd6, 0xb5, 0x73, 0xc7, 0xc8, 0x58, 0x02, 0xf4, 0x3e, 0x30, 0x02, 0x21, 0x00, 0xbb, 0xf4, 0x48,
    0x07, 0xcc, 0x83, 0xb5, 0x18, 0xb4, 0xa6, 0x86, 0x27, 0xfe, 0x48, 0xa3, 0x8f, 0x73, 0x30, 0xbc, 0xa9, 0x05, 0x6c, 0xa3, 0x12,
    0xb9, 0x90, 0xee, 0x55, 0xf1, 0x87, 0xea, 0xbf, 0x18, 0x18,
};

extern const uint32_t sTestCert_ICA01_1_Chip_Len = sizeof(sTestCert_ICA01_1_Chip);

extern const uint8_t sTestCert_ICA01_1_DER[] = {
    0x30, 0x82, 0x01, 0x9d, 0x30, 0x82, 0x01, 0x43, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x18, 0xa5, 0xce, 0xa5, 0xd1, 0xe8,
    0x6b, 0x80, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x22,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43,
    0x41, 0x43, 0x41, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x86, 0x26,
    0xd7, 0x43, 0xed, 0x07, 0x82, 0xf1, 0x96, 0xce, 0xa1, 0xd1, 0x7b, 0x48, 0xc5, 0x2b, 0xf3, 0x64, 0x97, 0x61, 0x5b, 0x4f, 0x23,
    0xd3, 0x23, 0xaf, 0x5a, 0x8a, 0x4d, 0x1a, 0x31, 0x78, 0x04, 0x15, 0xeb, 0x22, 0x24, 0xde, 0xae, 0x30, 0xf3, 0x56, 0xce, 0x35,
    0x33, 0x28, 0x3d, 0xe0, 0x58, 0xac, 0x9a, 0x2f, 0xe3, 0x6d, 0xed, 0xf1, 0xed, 0x22, 0xb2, 0x60, 0xf3, 0x87, 0x42, 0x0a, 0xa3,
    0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
    0x0e, 0x04, 0x16, 0x04, 0x14, 0xc6, 0xb1, 0x6a, 0x1b, 0x7f, 0xeb, 0x52, 0xca, 0x87, 0x09, 0x18, 0x20, 0x46, 0x34, 0x48, 0x34,
    0x89, 0x46, 0xb3, 0x1b, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xdd, 0x4d, 0x8f, 0x3d,
    0xe8, 0xad, 0xc0, 0x97, 0x9b, 0xfc, 0xc6, 0xe9, 0xb2, 0x7e, 0xbd, 0xa2, 0xc3, 0x6b, 0xeb, 0xe5, 0x30, 0x0a, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x57, 0xdc, 0x8b, 0xd1, 0xc8, 0x89, 0xe6,
    0x66, 0x6a, 0x96, 0x43, 0xa9, 0xb9, 0x46, 0x49, 0x71, 0x82, 0x22, 0xa1, 0x79, 0x3e, 0x69, 0xf2, 0xd6, 0xb5, 0x73, 0xc7, 0xc8,
    0x58, 0x02, 0xf4, 0x3e, 0x02, 0x21, 0x00, 0xbb, 0xf4, 0x48, 0x07, 0xcc, 0x83, 0xb5, 0x18, 0xb4, 0xa6, 0x86, 0x27, 0xfe, 0x48,
    0xa3, 0x8f, 0x73, 0x30, 0xbc, 0xa9, 0x05, 0x6c, 0xa3, 0x12, 0xb9, 0x90, 0xee, 0x55, 0xf1, 0x87, 0xea, 0xbf,
};

extern const uint32_t sTestCert_ICA01_1_DER_Len = sizeof(sTestCert_ICA01_1_DER);

extern const uint8_t sTestCert_ICA01_1_PublicKey[] = {
    0x04, 0x86, 0x26, 0xd7, 0x43, 0xed, 0x07, 0x82, 0xf1, 0x96, 0xce, 0xa1, 0xd1, 0x7b, 0x48, 0xc5, 0x2b,
    0xf3, 0x64, 0x97, 0x61, 0x5b, 0x4f, 0x23, 0xd3, 0x23, 0xaf, 0x5a, 0x8a, 0x4d, 0x1a, 0x31, 0x78, 0x04,
    0x15, 0xeb, 0x22, 0x24, 0xde, 0xae, 0x30, 0xf3, 0x56, 0xce, 0x35, 0x33, 0x28, 0x3d, 0xe0, 0x58, 0xac,
    0x9a, 0x2f, 0xe3, 0x6d, 0xed, 0xf1, 0xed, 0x22, 0xb2, 0x60, 0xf3, 0x87, 0x42, 0x0a,
};

extern const uint8_t sTestCert_ICA01_1_PublicKey_Len = sizeof(sTestCert_ICA01_1_PublicKey);

extern const uint8_t sTestCert_ICA01_1_PrivateKey[] = {
    0x54, 0x99, 0x0c, 0x07, 0x35, 0xd6, 0xab, 0xe3, 0x63, 0x27, 0xc5, 0xf2, 0xc6, 0x5d, 0xfd, 0xd5,
    0xd0, 0xce, 0xf4, 0xf5, 0x77, 0xa0, 0xb8, 0xb5, 0x2f, 0x21, 0x57, 0xc7, 0xd7, 0x18, 0x8e, 0x5c,
};

extern const uint8_t sTestCert_ICA01_1_PrivateKey_Len = sizeof(sTestCert_ICA01_1_PrivateKey);

extern const uint8_t sTestCert_ICA01_1_SubjectKeyId[] = {
    0xC6, 0xB1, 0x6A, 0x1B, 0x7F, 0xEB, 0x52, 0xCA, 0x87, 0x09, 0x18, 0x20, 0x46, 0x34, 0x48, 0x34, 0x89, 0x46, 0xB3, 0x1B,
};

extern const uint8_t sTestCert_ICA01_1_SubjectKeyId_Len = sizeof(sTestCert_ICA01_1_SubjectKeyId);

/**************  Test FWSign01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 5451856077171711355 (0x4ba8e2378e5fdd7b)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.2 = CACACACA00000005
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.3 = FFFFFFFF00000001, CN = FW SIGN CERT 01
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:70:e6:25:f6:3b:50:f1:78:28:d3:e5:15:f3:ea:
                    b1:11:d8:07:0a:21:2b:19:72:ce:16:97:68:51:94:
                    71:64:78:c4:5e:aa:cb:b5:cb:bf:d2:bf:58:80:fb:
                    4e:22:25:35:b7:ed:69:3a:fc:32:dc:5e:5a:f7:8f:
                    5d:73:d4:53:98
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature
            X509v3 Extended Key Usage: critical
                Code Signing
            X509v3 Subject Key Identifier:
                0D:5A:3B:11:D0:9B:9D:16:11:B3:78:58:05:52:A6:08:48:0E:04:BC
            X509v3 Authority Key Identifier:
                keyid:C6:B1:6A:1B:7F:EB:52:CA:87:09:18:20:46:34:48:34:89:46:B3:1B

    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:72:07:bb:d2:8d:fb:30:cd:d2:b7:7e:9c:35:e2:
         2b:8e:b5:94:70:55:a9:81:05:73:62:ad:4b:83:0d:cb:6e:da:
         02:20:12:9b:d2:35:28:a0:82:de:99:da:8c:60:af:ca:73:0d:
         74:f0:bb:6e:94:75:3c:54:af:0a:b8:af:06:b5:99:f9

-----BEGIN CERTIFICATE-----
MIIByzCCAXKgAwIBAgIIS6jiN45f3XswCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQIMEENBQ0FDQUNBMDAwMDAwMDUwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjA8MSAwHgYKKwYBBAGConwBAwwQRkZGRkZGRkYwMDAwMDAwMTEYMBYG
A1UEAwwPRlcgU0lHTiBDRVJUIDAxMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE
cOYl9jtQ8Xgo0+UV8+qxEdgHCiErGXLOFpdoUZRxZHjEXqrLtcu/0r9YgPtOIiU1
t+1pOvwy3F5a949dc9RTmKN4MHYwDAYDVR0TAQH/BAIwADAOBgNVHQ8BAf8EBAMC
B4AwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwMwHQYDVR0OBBYEFA1aOxHQm50WEbN4
WAVSpghIDgS8MB8GA1UdIwQYMBaAFMaxaht/61LKhwkYIEY0SDSJRrMbMAoGCCqG
SM49BAMCA0cAMEQCIHIHu9KN+zDN0rd+nDXiK461lHBVqYEFc2KtS4MNy27aAiAS
m9I1KKCC3pnajGCvynMNdPC7bpR1PFSvCrivBrWZ+Q==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIOIqqhoH0brr52eEsMmTH0JsWAvAKcJDDlNxbGolC1ZYoAoGCCqGSM49
AwEHoUQDQgAEcOYl9jtQ8Xgo0+UV8+qxEdgHCiErGXLOFpdoUZRxZHjEXqrLtcu/
0r9YgPtOIiU1t+1pOvwy3F5a949dc9RTmA==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_FWSign01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x4b, 0xa8, 0xe2, 0x37, 0x8e, 0x5f, 0xdd, 0x7b, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x12, 0x05, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05,
    0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x13, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x2c, 0x01, 0x0f, 0x46, 0x57,
    0x20, 0x53, 0x49, 0x47, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x30, 0x31, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30,
    0x09, 0x41, 0x04, 0x70, 0xe6, 0x25, 0xf6, 0x3b, 0x50, 0xf1, 0x78, 0x28, 0xd3, 0xe5, 0x15, 0xf3, 0xea, 0xb1, 0x11, 0xd8, 0x07,
    0x0a, 0x21, 0x2b, 0x19, 0x72, 0xce, 0x16, 0x97, 0x68, 0x51, 0x94, 0x71, 0x64, 0x78, 0xc4, 0x5e, 0xaa, 0xcb, 0xb5, 0xcb, 0xbf,
    0xd2, 0xbf, 0x58, 0x80, 0xfb, 0x4e, 0x22, 0x25, 0x35, 0xb7, 0xed, 0x69, 0x3a, 0xfc, 0x32, 0xdc, 0x5e, 0x5a, 0xf7, 0x8f, 0x5d,
    0x73, 0xd4, 0x53, 0x98, 0x35, 0x80, 0x28, 0x01, 0x18, 0x24, 0x81, 0x01, 0x36, 0x82, 0x04, 0x03, 0x18, 0x30, 0x83, 0x14, 0x0d,
    0x5a, 0x3b, 0x11, 0xd0, 0x9b, 0x9d, 0x16, 0x11, 0xb3, 0x78, 0x58, 0x05, 0x52, 0xa6, 0x08, 0x48, 0x0e, 0x04, 0xbc, 0x30, 0x84,
    0x14, 0xc6, 0xb1, 0x6a, 0x1b, 0x7f, 0xeb, 0x52, 0xca, 0x87, 0x09, 0x18, 0x20, 0x46, 0x34, 0x48, 0x34, 0x89, 0x46, 0xb3, 0x1b,
    0x35, 0x0a, 0x30, 0x01, 0x20, 0x72, 0x07, 0xbb, 0xd2, 0x8d, 0xfb, 0x30, 0xcd, 0xd2, 0xb7, 0x7e, 0x9c, 0x35, 0xe2, 0x2b, 0x8e,
    0xb5, 0x94, 0x70, 0x55, 0xa9, 0x81, 0x05, 0x73, 0x62, 0xad, 0x4b, 0x83, 0x0d, 0xcb, 0x6e, 0xda, 0x30, 0x02, 0x20, 0x12, 0x9b,
    0xd2, 0x35, 0x28, 0xa0, 0x82, 0xde, 0x99, 0xda, 0x8c, 0x60, 0xaf, 0xca, 0x73, 0x0d, 0x74, 0xf0, 0xbb, 0x6e, 0x94, 0x75, 0x3c,
    0x54, 0xaf, 0x0a, 0xb8, 0xaf, 0x06, 0xb5, 0x99, 0xf9, 0x18, 0x18,
};

extern const uint32_t sTestCert_FWSign01_Chip_Len = sizeof(sTestCert_FWSign01_Chip);

extern const uint8_t sTestCert_FWSign01_DER[] = {
    0x30, 0x82, 0x01, 0xcb, 0x30, 0x82, 0x01, 0x72, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x4b, 0xa8, 0xe2, 0x37, 0x8e, 0x5f,
    0xdd, 0x7b, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x3c,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x03, 0x0c, 0x10, 0x46, 0x46, 0x46,
    0x46, 0x46, 0x46, 0x46, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04,
    0x03, 0x0c, 0x0f, 0x46, 0x57, 0x20, 0x53, 0x49, 0x47, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x30, 0x31, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0x70, 0xe6, 0x25, 0xf6, 0x3b, 0x50, 0xf1, 0x78, 0x28, 0xd3, 0xe5, 0x15, 0xf3, 0xea, 0xb1, 0x11, 0xd8, 0x07,
    0x0a, 0x21, 0x2b, 0x19, 0x72, 0xce, 0x16, 0x97, 0x68, 0x51, 0x94, 0x71, 0x64, 0x78, 0xc4, 0x5e, 0xaa, 0xcb, 0xb5, 0xcb, 0xbf,
    0xd2, 0xbf, 0x58, 0x80, 0xfb, 0x4e, 0x22, 0x25, 0x35, 0xb7, 0xed, 0x69, 0x3a, 0xfc, 0x32, 0xdc, 0x5e, 0x5a, 0xf7, 0x8f, 0x5d,
    0x73, 0xd4, 0x53, 0x98, 0xa3, 0x78, 0x30, 0x76, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30,
    0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x16, 0x06, 0x03,
    0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x03, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x0d, 0x5a, 0x3b, 0x11, 0xd0, 0x9b, 0x9d, 0x16, 0x11, 0xb3, 0x78,
    0x58, 0x05, 0x52, 0xa6, 0x08, 0x48, 0x0e, 0x04, 0xbc, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0xc6, 0xb1, 0x6a, 0x1b, 0x7f, 0xeb, 0x52, 0xca, 0x87, 0x09, 0x18, 0x20, 0x46, 0x34, 0x48, 0x34, 0x89, 0x46, 0xb3, 0x1b,
    0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x72, 0x07,
    0xbb, 0xd2, 0x8d, 0xfb, 0x30, 0xcd, 0xd2, 0xb7, 0x7e, 0x9c, 0x35, 0xe2, 0x2b, 0x8e, 0xb5, 0x94, 0x70, 0x55, 0xa9, 0x81, 0x05,
    0x73, 0x62, 0xad, 0x4b, 0x83, 0x0d, 0xcb, 0x6e, 0xda, 0x02, 0x20, 0x12, 0x9b, 0xd2, 0x35, 0x28, 0xa0, 0x82, 0xde, 0x99, 0xda,
    0x8c, 0x60, 0xaf, 0xca, 0x73, 0x0d, 0x74, 0xf0, 0xbb, 0x6e, 0x94, 0x75, 0x3c, 0x54, 0xaf, 0x0a, 0xb8, 0xaf, 0x06, 0xb5, 0x99,
    0xf9,
};

extern const uint32_t sTestCert_FWSign01_DER_Len = sizeof(sTestCert_FWSign01_DER);

extern const uint8_t sTestCert_FWSign01_PublicKey[] = {
    0x04, 0x70, 0xe6, 0x25, 0xf6, 0x3b, 0x50, 0xf1, 0x78, 0x28, 0xd3, 0xe5, 0x15, 0xf3, 0xea, 0xb1, 0x11,
    0xd8, 0x07, 0x0a, 0x21, 0x2b, 0x19, 0x72, 0xce, 0x16, 0x97, 0x68, 0x51, 0x94, 0x71, 0x64, 0x78, 0xc4,
    0x5e, 0xaa, 0xcb, 0xb5, 0xcb, 0xbf, 0xd2, 0xbf, 0x58, 0x80, 0xfb, 0x4e, 0x22, 0x25, 0x35, 0xb7, 0xed,
    0x69, 0x3a, 0xfc, 0x32, 0xdc, 0x5e, 0x5a, 0xf7, 0x8f, 0x5d, 0x73, 0xd4, 0x53, 0x98,
};

extern const uint8_t sTestCert_FWSign01_PublicKey_Len = sizeof(sTestCert_FWSign01_PublicKey);

extern const uint8_t sTestCert_FWSign01_PrivateKey[] = {
    0xe2, 0x2a, 0xaa, 0x1a, 0x07, 0xd1, 0xba, 0xeb, 0xe7, 0x67, 0x84, 0xb0, 0xc9, 0x93, 0x1f, 0x42,
    0x6c, 0x58, 0x0b, 0xc0, 0x29, 0xc2, 0x43, 0x0e, 0x53, 0x71, 0x6c, 0x6a, 0x25, 0x0b, 0x56, 0x58,
};

extern const uint8_t sTestCert_FWSign01_PrivateKey_Len = sizeof(sTestCert_FWSign01_PrivateKey);

extern const uint8_t sTestCert_FWSign01_SubjectKeyId[] = {
    0x0D, 0x5A, 0x3B, 0x11, 0xD0, 0x9B, 0x9D, 0x16, 0x11, 0xB3, 0x78, 0x58, 0x05, 0x52, 0xA6, 0x08, 0x48, 0x0E, 0x04, 0xBC,
};

extern const uint8_t sTestCert_FWSign01_SubjectKeyId_Len = sizeof(sTestCert_FWSign01_SubjectKeyId);

/**************  Test Node01_01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 2338752992814342552 (0x2074eb74aa14a198)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.2 = CACACACA00000003
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00010001, 1.3.6.1.4.1.37244.1.4 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:6d:d9:89:b5:c4:d0:66:8e:da:d3:b4:e6:3f:37:
                    ad:2e:af:6b:da:b0:f4:12:25:a8:26:ff:14:cb:94:
                    67:6a:7a:18:bc:4b:d6:ba:42:ba:a4:bb:af:01:00:
                    75:1f:cf:e4:bc:b5:10:15:42:47:8f:56:55:85:ff:
                    c1:99:2e:72:63
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                0A:56:99:21:B4:59:46:83:73:CA:9F:6E:C3:AB:29:EC:CC:03:E1:EB
            X509v3 Authority Key Identifier:
                keyid:A3:B0:82:2E:6D:15:3B:3A:96:5C:A2:AE:D3:BF:2F:50:46:4F:05:E4

    Signature Algorithm: ecdsa-with-SHA256
         30:46:02:21:00:e8:a4:e5:ee:ac:71:f4:97:4c:b7:33:34:ea:
         6a:c0:05:07:6e:d0:c4:c8:f6:22:9e:1f:68:5e:8a:fd:b6:cd:
         e0:02:21:00:a1:90:37:ec:10:e9:df:17:8a:8f:ed:20:d7:20:
         4e:23:a6:c5:6c:79:c2:6d:77:46:d9:c8:90:2b:9b:5c:cb:c0

-----BEGIN CERTIFICATE-----
MIIB4TCCAYagAwIBAgIIIHTrdKoUoZgwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQIMEENBQ0FDQUNBMDAwMDAwMDMwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjBEMSAwHgYKKwYBBAGConwBAQwQREVERURFREUwMDAxMDAwMTEgMB4G
CisGAQQBgqJ8AQQMEEZBQjAwMDAwMDAwMDAwMUQwWTATBgcqhkjOPQIBBggqhkjO
PQMBBwNCAARt2Ym1xNBmjtrTtOY/N60ur2vasPQSJagm/xTLlGdqehi8S9a6Qrqk
u68BAHUfz+S8tRAVQkePVlWF/8GZLnJjo4GDMIGAMAwGA1UdEwEB/wQCMAAwDgYD
VR0PAQH/BAQDAgWgMCAGA1UdJQEB/wQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAd
BgNVHQ4EFgQUClaZIbRZRoNzyp9uw6sp7MwD4eswHwYDVR0jBBgwFoAUo7CCLm0V
OzqWXKKu078vUEZPBeQwCgYIKoZIzj0EAwIDSQAwRgIhAOik5e6scfSXTLczNOpq
wAUHbtDEyPYinh9oXor9ts3gAiEAoZA37BDp3xeKj+0g1yBOI6bFbHnCbXdG2ciQ
K5tcy8A=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIE/j8vYzuNnqbwXYNo1jz/c5UgkXv/1m33dImKfMJd1+oAoGCCqGSM49
AwEHoUQDQgAEbdmJtcTQZo7a07TmPzetLq9r2rD0EiWoJv8Uy5RnanoYvEvWukK6
pLuvAQB1H8/kvLUQFUJHj1ZVhf/BmS5yYw==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node01_01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x20, 0x74, 0xeb, 0x74, 0xaa, 0x14, 0xa1, 0x98, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x12, 0x03, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01,
    0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x11, 0x01, 0x00, 0x01, 0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x14,
    0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x6d,
    0xd9, 0x89, 0xb5, 0xc4, 0xd0, 0x66, 0x8e, 0xda, 0xd3, 0xb4, 0xe6, 0x3f, 0x37, 0xad, 0x2e, 0xaf, 0x6b, 0xda, 0xb0, 0xf4,
    0x12, 0x25, 0xa8, 0x26, 0xff, 0x14, 0xcb, 0x94, 0x67, 0x6a, 0x7a, 0x18, 0xbc, 0x4b, 0xd6, 0xba, 0x42, 0xba, 0xa4, 0xbb,
    0xaf, 0x01, 0x00, 0x75, 0x1f, 0xcf, 0xe4, 0xbc, 0xb5, 0x10, 0x15, 0x42, 0x47, 0x8f, 0x56, 0x55, 0x85, 0xff, 0xc1, 0x99,
    0x2e, 0x72, 0x63, 0x35, 0x80, 0x28, 0x01, 0x18, 0x24, 0x81, 0x05, 0x36, 0x82, 0x04, 0x02, 0x04, 0x01, 0x18, 0x30, 0x83,
    0x14, 0x0a, 0x56, 0x99, 0x21, 0xb4, 0x59, 0x46, 0x83, 0x73, 0xca, 0x9f, 0x6e, 0xc3, 0xab, 0x29, 0xec, 0xcc, 0x03, 0xe1,
    0xeb, 0x30, 0x84, 0x14, 0xa3, 0xb0, 0x82, 0x2e, 0x6d, 0x15, 0x3b, 0x3a, 0x96, 0x5c, 0xa2, 0xae, 0xd3, 0xbf, 0x2f, 0x50,
    0x46, 0x4f, 0x05, 0xe4, 0x35, 0x0a, 0x30, 0x01, 0x21, 0x00, 0xe8, 0xa4, 0xe5, 0xee, 0xac, 0x71, 0xf4, 0x97, 0x4c, 0xb7,
    0x33, 0x34, 0xea, 0x6a, 0xc0, 0x05, 0x07, 0x6e, 0xd0, 0xc4, 0xc8, 0xf6, 0x22, 0x9e, 0x1f, 0x68, 0x5e, 0x8a, 0xfd, 0xb6,
    0xcd, 0xe0, 0x30, 0x02, 0x21, 0x00, 0xa1, 0x90, 0x37, 0xec, 0x10, 0xe9, 0xdf, 0x17, 0x8a, 0x8f, 0xed, 0x20, 0xd7, 0x20,
    0x4e, 0x23, 0xa6, 0xc5, 0x6c, 0x79, 0xc2, 0x6d, 0x77, 0x46, 0xd9, 0xc8, 0x90, 0x2b, 0x9b, 0x5c, 0xcb, 0xc0, 0x18, 0x18,
};

extern const uint32_t sTestCert_Node01_01_Chip_Len = sizeof(sTestCert_Node01_01_Chip);

extern const uint8_t sTestCert_Node01_01_DER[] = {
    0x30, 0x82, 0x01, 0xe1, 0x30, 0x82, 0x01, 0x86, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x20, 0x74, 0xeb, 0x74, 0xaa, 0x14,
    0xa1, 0x98, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44,
    0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x6d, 0xd9, 0x89, 0xb5, 0xc4, 0xd0, 0x66, 0x8e, 0xda, 0xd3,
    0xb4, 0xe6, 0x3f, 0x37, 0xad, 0x2e, 0xaf, 0x6b, 0xda, 0xb0, 0xf4, 0x12, 0x25, 0xa8, 0x26, 0xff, 0x14, 0xcb, 0x94, 0x67, 0x6a,
    0x7a, 0x18, 0xbc, 0x4b, 0xd6, 0xba, 0x42, 0xba, 0xa4, 0xbb, 0xaf, 0x01, 0x00, 0x75, 0x1f, 0xcf, 0xe4, 0xbc, 0xb5, 0x10, 0x15,
    0x42, 0x47, 0x8f, 0x56, 0x55, 0x85, 0xff, 0xc1, 0x99, 0x2e, 0x72, 0x63, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06,
    0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff,
    0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06,
    0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d,
    0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x0a, 0x56, 0x99, 0x21, 0xb4, 0x59, 0x46, 0x83, 0x73, 0xca, 0x9f, 0x6e,
    0xc3, 0xab, 0x29, 0xec, 0xcc, 0x03, 0xe1, 0xeb, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
    0xa3, 0xb0, 0x82, 0x2e, 0x6d, 0x15, 0x3b, 0x3a, 0x96, 0x5c, 0xa2, 0xae, 0xd3, 0xbf, 0x2f, 0x50, 0x46, 0x4f, 0x05, 0xe4, 0x30,
    0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0xe8, 0xa4,
    0xe5, 0xee, 0xac, 0x71, 0xf4, 0x97, 0x4c, 0xb7, 0x33, 0x34, 0xea, 0x6a, 0xc0, 0x05, 0x07, 0x6e, 0xd0, 0xc4, 0xc8, 0xf6, 0x22,
    0x9e, 0x1f, 0x68, 0x5e, 0x8a, 0xfd, 0xb6, 0xcd, 0xe0, 0x02, 0x21, 0x00, 0xa1, 0x90, 0x37, 0xec, 0x10, 0xe9, 0xdf, 0x17, 0x8a,
    0x8f, 0xed, 0x20, 0xd7, 0x20, 0x4e, 0x23, 0xa6, 0xc5, 0x6c, 0x79, 0xc2, 0x6d, 0x77, 0x46, 0xd9, 0xc8, 0x90, 0x2b, 0x9b, 0x5c,
    0xcb, 0xc0,
};

extern const uint32_t sTestCert_Node01_01_DER_Len = sizeof(sTestCert_Node01_01_DER);

extern const uint8_t sTestCert_Node01_01_PublicKey[] = {
    0x04, 0x6d, 0xd9, 0x89, 0xb5, 0xc4, 0xd0, 0x66, 0x8e, 0xda, 0xd3, 0xb4, 0xe6, 0x3f, 0x37, 0xad, 0x2e,
    0xaf, 0x6b, 0xda, 0xb0, 0xf4, 0x12, 0x25, 0xa8, 0x26, 0xff, 0x14, 0xcb, 0x94, 0x67, 0x6a, 0x7a, 0x18,
    0xbc, 0x4b, 0xd6, 0xba, 0x42, 0xba, 0xa4, 0xbb, 0xaf, 0x01, 0x00, 0x75, 0x1f, 0xcf, 0xe4, 0xbc, 0xb5,
    0x10, 0x15, 0x42, 0x47, 0x8f, 0x56, 0x55, 0x85, 0xff, 0xc1, 0x99, 0x2e, 0x72, 0x63,
};

extern const uint8_t sTestCert_Node01_01_PublicKey_Len = sizeof(sTestCert_Node01_01_PublicKey);

extern const uint8_t sTestCert_Node01_01_PrivateKey[] = {
    0x4f, 0xe3, 0xf2, 0xf6, 0x33, 0xb8, 0xd9, 0xea, 0x6f, 0x05, 0xd8, 0x36, 0x8d, 0x63, 0xcf, 0xf7,
    0x39, 0x52, 0x09, 0x17, 0xbf, 0xfd, 0x66, 0xdf, 0x77, 0x48, 0x98, 0xa7, 0xcc, 0x25, 0xdd, 0x7e,
};

extern const uint8_t sTestCert_Node01_01_PrivateKey_Len = sizeof(sTestCert_Node01_01_PrivateKey);

extern const uint8_t sTestCert_Node01_01_SubjectKeyId[] = {
    0x0A, 0x56, 0x99, 0x21, 0xB4, 0x59, 0x46, 0x83, 0x73, 0xCA, 0x9F, 0x6E, 0xC3, 0xAB, 0x29, 0xEC, 0xCC, 0x03, 0xE1, 0xEB,
};

extern const uint8_t sTestCert_Node01_01_SubjectKeyId_Len = sizeof(sTestCert_Node01_01_SubjectKeyId);

/**************  Test Node01_02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 6346698521723689392 (0x581400ade3d659b0)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.2 = CACACACA00000001
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00010002, 1.3.6.1.4.1.37244.1.4 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:13:8e:a1:05:3e:5e:99:2b:93:19:32:a7:90:05:
                    20:2b:6d:7a:8d:4e:5c:5e:98:2b:f9:db:a6:15:52:
                    ed:fd:2c:ea:69:d8:1a:f6:89:92:dc:c8:49:97:2f:
                    13:83:fe:c9:57:e5:12:53:91:7c:5b:8c:82:f9:e4:
                    6c:55:b2:65:0f
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                3F:DA:CA:9C:29:D9:7B:53:D0:34:7B:25:48:5E:56:50:28:7E:69:1D
            X509v3 Authority Key Identifier:
                keyid:DD:4D:8F:3D:E8:AD:C0:97:9B:FC:C6:E9:B2:7E:BD:A2:C3:6B:EB:E5

    Signature Algorithm: ecdsa-with-SHA256
         30:46:02:21:00:92:77:59:e0:01:cb:35:0e:f2:22:b6:fb:b0:
         a2:78:61:c0:a4:44:2c:76:22:92:cf:0e:d0:74:3f:29:45:cf:
         b4:02:21:00:83:67:72:03:dd:28:f3:11:79:9a:59:f0:9d:c7:
         97:e3:46:f9:58:bc:ba:ee:83:23:0d:cd:31:61:e3:f2:05:9b

-----BEGIN CERTIFICATE-----
MIIB4TCCAYagAwIBAgIIWBQArePWWbAwCgYIKoZIzj0EAwIwIjEgMB4GCisGAQQB
gqJ8AQIMEENBQ0FDQUNBMDAwMDAwMDEwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1
MTQyMzQyWjBEMSAwHgYKKwYBBAGConwBAQwQREVERURFREUwMDAxMDAwMjEgMB4G
CisGAQQBgqJ8AQQMEEZBQjAwMDAwMDAwMDAwMUQwWTATBgcqhkjOPQIBBggqhkjO
PQMBBwNCAAQTjqEFPl6ZK5MZMqeQBSArbXqNTlxemCv526YVUu39LOpp2Br2iZLc
yEmXLxOD/slX5RJTkXxbjIL55GxVsmUPo4GDMIGAMAwGA1UdEwEB/wQCMAAwDgYD
VR0PAQH/BAQDAgWgMCAGA1UdJQEB/wQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAd
BgNVHQ4EFgQUP9rKnCnZe1PQNHslSF5WUCh+aR0wHwYDVR0jBBgwFoAU3U2PPeit
wJeb/Mbpsn69osNr6+UwCgYIKoZIzj0EAwIDSQAwRgIhAJJ3WeAByzUO8iK2+7Ci
eGHApEQsdiKSzw7QdD8pRc+0AiEAg2dyA90o8xF5mlnwnceX40b5WLy67oMjDc0x
YePyBZs=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIHFCFxv1WmyPlKpHKIY8qubSWfaAQtoUum5Pzp528fqCoAoGCCqGSM49
AwEHoUQDQgAEE46hBT5emSuTGTKnkAUgK216jU5cXpgr+dumFVLt/Szqadga9omS
3MhJly8Tg/7JV+USU5F8W4yC+eRsVbJlDw==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node01_02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x58, 0x14, 0x00, 0xad, 0xe3, 0xd6, 0x59, 0xb0, 0x24, 0x02,
    0x01, 0x37, 0x03, 0x27, 0x12, 0x01, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01,
    0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x11, 0x02, 0x00, 0x01, 0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x14,
    0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08, 0x01, 0x30, 0x09, 0x41, 0x04, 0x13,
    0x8e, 0xa1, 0x05, 0x3e, 0x5e, 0x99, 0x2b, 0x93, 0x19, 0x32, 0xa7, 0x90, 0x05, 0x20, 0x2b, 0x6d, 0x7a, 0x8d, 0x4e, 0x5c,
    0x5e, 0x98, 0x2b, 0xf9, 0xdb, 0xa6, 0x15, 0x52, 0xed, 0xfd, 0x2c, 0xea, 0x69, 0xd8, 0x1a, 0xf6, 0x89, 0x92, 0xdc, 0xc8,
    0x49, 0x97, 0x2f, 0x13, 0x83, 0xfe, 0xc9, 0x57, 0xe5, 0x12, 0x53, 0x91, 0x7c, 0x5b, 0x8c, 0x82, 0xf9, 0xe4, 0x6c, 0x55,
    0xb2, 0x65, 0x0f, 0x35, 0x80, 0x28, 0x01, 0x18, 0x24, 0x81, 0x05, 0x36, 0x82, 0x04, 0x02, 0x04, 0x01, 0x18, 0x30, 0x83,
    0x14, 0x3f, 0xda, 0xca, 0x9c, 0x29, 0xd9, 0x7b, 0x53, 0xd0, 0x34, 0x7b, 0x25, 0x48, 0x5e, 0x56, 0x50, 0x28, 0x7e, 0x69,
    0x1d, 0x30, 0x84, 0x14, 0xdd, 0x4d, 0x8f, 0x3d, 0xe8, 0xad, 0xc0, 0x97, 0x9b, 0xfc, 0xc6, 0xe9, 0xb2, 0x7e, 0xbd, 0xa2,
    0xc3, 0x6b, 0xeb, 0xe5, 0x35, 0x0a, 0x30, 0x01, 0x21, 0x00, 0x92, 0x77, 0x59, 0xe0, 0x01, 0xcb, 0x35, 0x0e, 0xf2, 0x22,
    0xb6, 0xfb, 0xb0, 0xa2, 0x78, 0x61, 0xc0, 0xa4, 0x44, 0x2c, 0x76, 0x22, 0x92, 0xcf, 0x0e, 0xd0, 0x74, 0x3f, 0x29, 0x45,
    0xcf, 0xb4, 0x30, 0x02, 0x21, 0x00, 0x83, 0x67, 0x72, 0x03, 0xdd, 0x28, 0xf3, 0x11, 0x79, 0x9a, 0x59, 0xf0, 0x9d, 0xc7,
    0x97, 0xe3, 0x46, 0xf9, 0x58, 0xbc, 0xba, 0xee, 0x83, 0x23, 0x0d, 0xcd, 0x31, 0x61, 0xe3, 0xf2, 0x05, 0x9b, 0x18, 0x18,
};

extern const uint32_t sTestCert_Node01_02_Chip_Len = sizeof(sTestCert_Node01_02_Chip);

extern const uint8_t sTestCert_Node01_02_DER[] = {
    0x30, 0x82, 0x01, 0xe1, 0x30, 0x82, 0x01, 0x86, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x58, 0x14, 0x00, 0xad, 0xe3, 0xd6,
    0x59, 0xb0, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x22, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32,
    0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44,
    0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44,
    0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x13, 0x8e, 0xa1, 0x05, 0x3e, 0x5e, 0x99, 0x2b, 0x93, 0x19,
    0x32, 0xa7, 0x90, 0x05, 0x20, 0x2b, 0x6d, 0x7a, 0x8d, 0x4e, 0x5c, 0x5e, 0x98, 0x2b, 0xf9, 0xdb, 0xa6, 0x15, 0x52, 0xed, 0xfd,
    0x2c, 0xea, 0x69, 0xd8, 0x1a, 0xf6, 0x89, 0x92, 0xdc, 0xc8, 0x49, 0x97, 0x2f, 0x13, 0x83, 0xfe, 0xc9, 0x57, 0xe5, 0x12, 0x53,
    0x91, 0x7c, 0x5b, 0x8c, 0x82, 0xf9, 0xe4, 0x6c, 0x55, 0xb2, 0x65, 0x0f, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06,
    0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff,
    0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06,
    0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d,
    0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x3f, 0xda, 0xca, 0x9c, 0x29, 0xd9, 0x7b, 0x53, 0xd0, 0x34, 0x7b, 0x25,
    0x48, 0x5e, 0x56, 0x50, 0x28, 0x7e, 0x69, 0x1d, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
    0xdd, 0x4d, 0x8f, 0x3d, 0xe8, 0xad, 0xc0, 0x97, 0x9b, 0xfc, 0xc6, 0xe9, 0xb2, 0x7e, 0xbd, 0xa2, 0xc3, 0x6b, 0xeb, 0xe5, 0x30,
    0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0x92, 0x77,
    0x59, 0xe0, 0x01, 0xcb, 0x35, 0x0e, 0xf2, 0x22, 0xb6, 0xfb, 0xb0, 0xa2, 0x78, 0x61, 0xc0, 0xa4, 0x44, 0x2c, 0x76, 0x22, 0x92,
    0xcf, 0x0e, 0xd0, 0x74, 0x3f, 0x29, 0x45, 0xcf, 0xb4, 0x02, 0x21, 0x00, 0x83, 0x67, 0x72, 0x03, 0xdd, 0x28, 0xf3, 0x11, 0x79,
    0x9a, 0x59, 0xf0, 0x9d, 0xc7, 0x97, 0xe3, 0x46, 0xf9, 0x58, 0xbc, 0xba, 0xee, 0x83, 0x23, 0x0d, 0xcd, 0x31, 0x61, 0xe3, 0xf2,
    0x05, 0x9b,
};

extern const uint32_t sTestCert_Node01_02_DER_Len = sizeof(sTestCert_Node01_02_DER);

extern const uint8_t sTestCert_Node01_02_PublicKey[] = {
    0x04, 0x13, 0x8e, 0xa1, 0x05, 0x3e, 0x5e, 0x99, 0x2b, 0x93, 0x19, 0x32, 0xa7, 0x90, 0x05, 0x20, 0x2b,
    0x6d, 0x7a, 0x8d, 0x4e, 0x5c, 0x5e, 0x98, 0x2b, 0xf9, 0xdb, 0xa6, 0x15, 0x52, 0xed, 0xfd, 0x2c, 0xea,
    0x69, 0xd8, 0x1a, 0xf6, 0x89, 0x92, 0xdc, 0xc8, 0x49, 0x97, 0x2f, 0x13, 0x83, 0xfe, 0xc9, 0x57, 0xe5,
    0x12, 0x53, 0x91, 0x7c, 0x5b, 0x8c, 0x82, 0xf9, 0xe4, 0x6c, 0x55, 0xb2, 0x65, 0x0f,
};

extern const uint8_t sTestCert_Node01_02_PublicKey_Len = sizeof(sTestCert_Node01_02_PublicKey);

extern const uint8_t sTestCert_Node01_02_PrivateKey[] = {
    0x71, 0x42, 0x17, 0x1b, 0xf5, 0x5a, 0x6c, 0x8f, 0x94, 0xaa, 0x47, 0x28, 0x86, 0x3c, 0xaa, 0xe6,
    0xd2, 0x59, 0xf6, 0x80, 0x42, 0xda, 0x14, 0xba, 0x6e, 0x4f, 0xce, 0x9e, 0x76, 0xf1, 0xfa, 0x82,
};

extern const uint8_t sTestCert_Node01_02_PrivateKey_Len = sizeof(sTestCert_Node01_02_PrivateKey);

extern const uint8_t sTestCert_Node01_02_SubjectKeyId[] = {
    0x3F, 0xDA, 0xCA, 0x9C, 0x29, 0xD9, 0x7B, 0x53, 0xD0, 0x34, 0x7B, 0x25, 0x48, 0x5E, 0x56, 0x50, 0x28, 0x7E, 0x69, 0x1D,
};

extern const uint8_t sTestCert_Node01_02_SubjectKeyId_Len = sizeof(sTestCert_Node01_02_SubjectKeyId);

/**************  Test Node02_01 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 8719405938569976743 (0x79018d80f4e51ba7)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.2 = CACACACA00000004, 1.3.6.1.4.1.37244.1.4 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020001, 1.3.6.1.4.1.37244.1.4 = FAB000000000001D
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:0e:ce:fa:4e:ec:c4:54:23:7a:3b:ed:77:2a:84:
                    c1:f4:8a:ec:a1:81:8b:ec:4f:89:dc:f9:ae:74:c2:
                    e6:71:63:9f:ab:ba:b0:7a:38:46:c0:bd:3d:1a:b5:
                    eb:92:7b:ea:b3:19:89:bf:ce:2f:e6:a2:b9:6b:75:
                    f8:0e:49:c1:2d
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                EE:1C:C6:83:BC:ED:91:45:F8:D8:7E:1E:5D:6C:1C:CE:F0:BB:C8:C4
            X509v3 Authority Key Identifier:
                keyid:6E:DC:F5:99:C4:B5:B2:93:04:EC:3A:9E:69:EE:3C:98:66:50:F4:A3

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:21:00:ae:02:f5:f4:b1:35:b4:b4:24:e8:dc:21:28:
         d9:af:87:b7:6b:6f:49:47:fb:38:3d:e7:b2:66:9e:ef:fd:37:
         fc:02:20:20:e1:dd:59:58:61:84:b4:69:48:99:26:ab:e6:5d:
         b1:71:50:33:c5:a1:bd:b4:c1:21:4d:29:3e:db:1d:fd:66

-----BEGIN CERTIFICATE-----
MIICAjCCAaigAwIBAgIIeQGNgPTlG6cwCgYIKoZIzj0EAwIwRDEgMB4GCisGAQQB
gqJ8AQIMEENBQ0FDQUNBMDAwMDAwMDQxIDAeBgorBgEEAYKifAEEDBBGQUIwMDAw
MDAwMDAwMDFEMB4XDTIwMTAxNTE0MjM0M1oXDTQwMTAxNTE0MjM0MlowRDEgMB4G
CisGAQQBgqJ8AQEMEERFREVERURFMDAwMjAwMDExIDAeBgorBgEEAYKifAEEDBBG
QUIwMDAwMDAwMDAwMDFEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEDs76TuzE
VCN6O+13KoTB9IrsoYGL7E+J3PmudMLmcWOfq7qwejhGwL09GrXrknvqsxmJv84v
5qK5a3X4DknBLaOBgzCBgDAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIFoDAg
BgNVHSUBAf8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFO4cxoO8
7ZFF+Nh+Hl1sHM7wu8jEMB8GA1UdIwQYMBaAFG7c9ZnEtbKTBOw6nmnuPJhmUPSj
MAoGCCqGSM49BAMCA0gAMEUCIQCuAvX0sTW0tCTo3CEo2a+Ht2tvSUf7OD3nsmae
7/03/AIgIOHdWVhhhLRpSJkmq+ZdsXFQM8WhvbTBIU0pPtsd/WY=
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIGYeNyngfz7JGv9m+yuLoBTsnJedlnKTFdoLSxRh0T+VoAoGCCqGSM49
AwEHoUQDQgAEDs76TuzEVCN6O+13KoTB9IrsoYGL7E+J3PmudMLmcWOfq7qwejhG
wL09GrXrknvqsxmJv84v5qK5a3X4DknBLQ==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_01_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x08, 0x79, 0x01, 0x8d, 0x80, 0xf4, 0xe5, 0x1b, 0xa7, 0x24, 0x02, 0x01,
    0x37, 0x03, 0x27, 0x12, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x14, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
    0xfa, 0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x11, 0x01, 0x00, 0x02,
    0x00, 0xde, 0xde, 0xde, 0xde, 0x27, 0x14, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08,
    0x01, 0x30, 0x09, 0x41, 0x04, 0x0e, 0xce, 0xfa, 0x4e, 0xec, 0xc4, 0x54, 0x23, 0x7a, 0x3b, 0xed, 0x77, 0x2a, 0x84, 0xc1, 0xf4,
    0x8a, 0xec, 0xa1, 0x81, 0x8b, 0xec, 0x4f, 0x89, 0xdc, 0xf9, 0xae, 0x74, 0xc2, 0xe6, 0x71, 0x63, 0x9f, 0xab, 0xba, 0xb0, 0x7a,
    0x38, 0x46, 0xc0, 0xbd, 0x3d, 0x1a, 0xb5, 0xeb, 0x92, 0x7b, 0xea, 0xb3, 0x19, 0x89, 0xbf, 0xce, 0x2f, 0xe6, 0xa2, 0xb9, 0x6b,
    0x75, 0xf8, 0x0e, 0x49, 0xc1, 0x2d, 0x35, 0x80, 0x28, 0x01, 0x18, 0x24, 0x81, 0x05, 0x36, 0x82, 0x04, 0x02, 0x04, 0x01, 0x18,
    0x30, 0x83, 0x14, 0xee, 0x1c, 0xc6, 0x83, 0xbc, 0xed, 0x91, 0x45, 0xf8, 0xd8, 0x7e, 0x1e, 0x5d, 0x6c, 0x1c, 0xce, 0xf0, 0xbb,
    0xc8, 0xc4, 0x30, 0x84, 0x14, 0x6e, 0xdc, 0xf5, 0x99, 0xc4, 0xb5, 0xb2, 0x93, 0x04, 0xec, 0x3a, 0x9e, 0x69, 0xee, 0x3c, 0x98,
    0x66, 0x50, 0xf4, 0xa3, 0x35, 0x0a, 0x30, 0x01, 0x21, 0x00, 0xae, 0x02, 0xf5, 0xf4, 0xb1, 0x35, 0xb4, 0xb4, 0x24, 0xe8, 0xdc,
    0x21, 0x28, 0xd9, 0xaf, 0x87, 0xb7, 0x6b, 0x6f, 0x49, 0x47, 0xfb, 0x38, 0x3d, 0xe7, 0xb2, 0x66, 0x9e, 0xef, 0xfd, 0x37, 0xfc,
    0x30, 0x02, 0x20, 0x20, 0xe1, 0xdd, 0x59, 0x58, 0x61, 0x84, 0xb4, 0x69, 0x48, 0x99, 0x26, 0xab, 0xe6, 0x5d, 0xb1, 0x71, 0x50,
    0x33, 0xc5, 0xa1, 0xbd, 0xb4, 0xc1, 0x21, 0x4d, 0x29, 0x3e, 0xdb, 0x1d, 0xfd, 0x66, 0x18, 0x18,
};

extern const uint32_t sTestCert_Node02_01_Chip_Len = sizeof(sTestCert_Node02_01_Chip);

extern const uint8_t sTestCert_Node02_01_DER[] = {
    0x30, 0x82, 0x02, 0x02, 0x30, 0x82, 0x01, 0xa8, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x79, 0x01, 0x8d, 0x80, 0xf4, 0xe5,
    0x1b, 0xa7, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06,
    0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2,
    0x7c, 0x01, 0x04, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44,
    0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30,
    0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06,
    0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30,
    0x32, 0x30, 0x30, 0x30, 0x31, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04,
    0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30, 0x59, 0x30,
    0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0x0e, 0xce, 0xfa, 0x4e, 0xec, 0xc4, 0x54, 0x23, 0x7a, 0x3b, 0xed, 0x77, 0x2a, 0x84, 0xc1, 0xf4, 0x8a, 0xec,
    0xa1, 0x81, 0x8b, 0xec, 0x4f, 0x89, 0xdc, 0xf9, 0xae, 0x74, 0xc2, 0xe6, 0x71, 0x63, 0x9f, 0xab, 0xba, 0xb0, 0x7a, 0x38, 0x46,
    0xc0, 0xbd, 0x3d, 0x1a, 0xb5, 0xeb, 0x92, 0x7b, 0xea, 0xb3, 0x19, 0x89, 0xbf, 0xce, 0x2f, 0xe6, 0xa2, 0xb9, 0x6b, 0x75, 0xf8,
    0x0e, 0x49, 0xc1, 0x2d, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04,
    0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20,
    0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03,
    0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04,
    0x14, 0xee, 0x1c, 0xc6, 0x83, 0xbc, 0xed, 0x91, 0x45, 0xf8, 0xd8, 0x7e, 0x1e, 0x5d, 0x6c, 0x1c, 0xce, 0xf0, 0xbb, 0xc8, 0xc4,
    0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x6e, 0xdc, 0xf5, 0x99, 0xc4, 0xb5, 0xb2, 0x93,
    0x04, 0xec, 0x3a, 0x9e, 0x69, 0xee, 0x3c, 0x98, 0x66, 0x50, 0xf4, 0xa3, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,
    0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xae, 0x02, 0xf5, 0xf4, 0xb1, 0x35, 0xb4, 0xb4, 0x24, 0xe8,
    0xdc, 0x21, 0x28, 0xd9, 0xaf, 0x87, 0xb7, 0x6b, 0x6f, 0x49, 0x47, 0xfb, 0x38, 0x3d, 0xe7, 0xb2, 0x66, 0x9e, 0xef, 0xfd, 0x37,
    0xfc, 0x02, 0x20, 0x20, 0xe1, 0xdd, 0x59, 0x58, 0x61, 0x84, 0xb4, 0x69, 0x48, 0x99, 0x26, 0xab, 0xe6, 0x5d, 0xb1, 0x71, 0x50,
    0x33, 0xc5, 0xa1, 0xbd, 0xb4, 0xc1, 0x21, 0x4d, 0x29, 0x3e, 0xdb, 0x1d, 0xfd, 0x66,
};

extern const uint32_t sTestCert_Node02_01_DER_Len = sizeof(sTestCert_Node02_01_DER);

extern const uint8_t sTestCert_Node02_01_PublicKey[] = {
    0x04, 0x0e, 0xce, 0xfa, 0x4e, 0xec, 0xc4, 0x54, 0x23, 0x7a, 0x3b, 0xed, 0x77, 0x2a, 0x84, 0xc1, 0xf4,
    0x8a, 0xec, 0xa1, 0x81, 0x8b, 0xec, 0x4f, 0x89, 0xdc, 0xf9, 0xae, 0x74, 0xc2, 0xe6, 0x71, 0x63, 0x9f,
    0xab, 0xba, 0xb0, 0x7a, 0x38, 0x46, 0xc0, 0xbd, 0x3d, 0x1a, 0xb5, 0xeb, 0x92, 0x7b, 0xea, 0xb3, 0x19,
    0x89, 0xbf, 0xce, 0x2f, 0xe6, 0xa2, 0xb9, 0x6b, 0x75, 0xf8, 0x0e, 0x49, 0xc1, 0x2d,
};

extern const uint8_t sTestCert_Node02_01_PublicKey_Len = sizeof(sTestCert_Node02_01_PublicKey);

extern const uint8_t sTestCert_Node02_01_PrivateKey[] = {
    0x66, 0x1e, 0x37, 0x29, 0xe0, 0x7f, 0x3e, 0xc9, 0x1a, 0xff, 0x66, 0xfb, 0x2b, 0x8b, 0xa0, 0x14,
    0xec, 0x9c, 0x97, 0x9d, 0x96, 0x72, 0x93, 0x15, 0xda, 0x0b, 0x4b, 0x14, 0x61, 0xd1, 0x3f, 0x95,
};

extern const uint8_t sTestCert_Node02_01_PrivateKey_Len = sizeof(sTestCert_Node02_01_PrivateKey);

extern const uint8_t sTestCert_Node02_01_SubjectKeyId[] = {
    0xEE, 0x1C, 0xC6, 0x83, 0xBC, 0xED, 0x91, 0x45, 0xF8, 0xD8, 0x7E, 0x1E, 0x5D, 0x6C, 0x1C, 0xCE, 0xF0, 0xBB, 0xC8, 0xC4,
};

extern const uint8_t sTestCert_Node02_01_SubjectKeyId_Len = sizeof(sTestCert_Node02_01_SubjectKeyId);

/**************  Test Node02_02 Certificate  **************
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 22626794418768123 (0x5062f31bbc88fb)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: 1.3.6.1.4.1.37244.1.2 = CACACACA00000004, 1.3.6.1.4.1.37244.1.4 = FAB000000000001D
        Validity
            Not Before: Oct 15 14:23:43 2020 GMT
            Not After : Oct 15 14:23:42 2040 GMT
        Subject: 1.3.6.1.4.1.37244.1.1 = DEDEDEDE00020002, 1.3.6.1.4.1.37244.1.4 = FAB000000000001D, CN = TEST CERT COMMON NAME Attr
for Node02_02 Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub:
                    04:7b:48:f8:96:55:85:98:3b:32:a0:07:47:81:9c:
                    a8:af:35:1b:a8:6b:57:17:15:7f:82:5b:38:2d:2a:
                    08:8f:49:a3:49:58:01:d7:a8:98:50:eb:73:26:42:
                    22:83:10:ab:cd:0d:cb:2a:e6:f5:44:e2:c2:72:39:
                    88:ee:8d:89:ce
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                61:86:CD:9C:07:49:23:5C:96:79:3C:D3:F7:0C:E0:84:F5:85:08:49
            X509v3 Authority Key Identifier:
                keyid:6E:DC:F5:99:C4:B5:B2:93:04:EC:3A:9E:69:EE:3C:98:66:50:F4:A3

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:50:ad:84:e6:38:10:5b:06:f9:d8:e7:d9:9b:40:
         dc:d0:b5:b8:25:4a:f4:64:1c:61:c1:c5:05:2e:41:b7:39:cc:
         02:21:00:90:c4:df:61:c4:f4:eb:be:d2:43:2e:f2:6d:9c:84:
         72:11:73:19:f8:71:43:82:ab:dc:99:1a:64:49:73:f0:d8

-----BEGIN CERTIFICATE-----
MIICNDCCAdqgAwIBAgIHUGLzG7yI+zAKBggqhkjOPQQDAjBEMSAwHgYKKwYBBAGC
onwBAgwQQ0FDQUNBQ0EwMDAwMDAwNDEgMB4GCisGAQQBgqJ8AQQMEEZBQjAwMDAw
MDAwMDAwMUQwHhcNMjAxMDE1MTQyMzQzWhcNNDAxMDE1MTQyMzQyWjB3MSAwHgYK
KwYBBAGConwBAQwQREVERURFREUwMDAyMDAwMjEgMB4GCisGAQQBgqJ8AQQMEEZB
QjAwMDAwMDAwMDAwMUQxMTAvBgNVBAMMKFRFU1QgQ0VSVCBDT01NT04gTkFNRSBB
dHRyIGZvciBOb2RlMDJfMDIwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAR7SPiW
VYWYOzKgB0eBnKivNRuoa1cXFX+CWzgtKgiPSaNJWAHXqJhQ63MmQiKDEKvNDcsq
5vVE4sJyOYjujYnOo4GDMIGAMAwGA1UdEwEB/wQCMAAwDgYDVR0PAQH/BAQDAgWg
MCAGA1UdJQEB/wQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAdBgNVHQ4EFgQUYYbN
nAdJI1yWeTzT9wzghPWFCEkwHwYDVR0jBBgwFoAUbtz1mcS1spME7Dqeae48mGZQ
9KMwCgYIKoZIzj0EAwIDSAAwRQIgUK2E5jgQWwb52OfZm0Dc0LW4JUr0ZBxhwcUF
LkG3OcwCIQCQxN9hxPTrvtJDLvJtnIRyEXMZ+HFDgqvcmRpkSXPw2A==
-----END CERTIFICATE-----

-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIIq3xz5xxWHnN1SCjbLMQ3O/vuyxVeu9Yyp3Zc8gw5ZJoAoGCCqGSM49
AwEHoUQDQgAEe0j4llWFmDsyoAdHgZyorzUbqGtXFxV/gls4LSoIj0mjSVgB16iY
UOtzJkIigxCrzQ3LKub1ROLCcjmI7o2Jzg==
-----END EC PRIVATE KEY-----
*/

extern const uint8_t sTestCert_Node02_02_Chip[] = {
    0xd5, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x30, 0x01, 0x07, 0x50, 0x62, 0xf3, 0x1b, 0xbc, 0x88, 0xfb, 0x24, 0x02, 0x01, 0x37,
    0x03, 0x27, 0x12, 0x04, 0x00, 0x00, 0x00, 0xca, 0xca, 0xca, 0xca, 0x27, 0x14, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa,
    0x18, 0x26, 0x04, 0x6f, 0x7a, 0x7c, 0x01, 0x26, 0x05, 0xee, 0x17, 0x1b, 0x27, 0x37, 0x06, 0x27, 0x11, 0x02, 0x00, 0x02, 0x00,
    0xde, 0xde, 0xde, 0xde, 0x27, 0x14, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xfa, 0x2c, 0x01, 0x28, 0x54, 0x45, 0x53, 0x54,
    0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x20, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x41, 0x74, 0x74,
    0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4e, 0x6f, 0x64, 0x65, 0x30, 0x32, 0x5f, 0x30, 0x32, 0x18, 0x24, 0x07, 0x01, 0x24, 0x08,
    0x01, 0x30, 0x09, 0x41, 0x04, 0x7b, 0x48, 0xf8, 0x96, 0x55, 0x85, 0x98, 0x3b, 0x32, 0xa0, 0x07, 0x47, 0x81, 0x9c, 0xa8, 0xaf,
    0x35, 0x1b, 0xa8, 0x6b, 0x57, 0x17, 0x15, 0x7f, 0x82, 0x5b, 0x38, 0x2d, 0x2a, 0x08, 0x8f, 0x49, 0xa3, 0x49, 0x58, 0x01, 0xd7,
    0xa8, 0x98, 0x50, 0xeb, 0x73, 0x26, 0x42, 0x22, 0x83, 0x10, 0xab, 0xcd, 0x0d, 0xcb, 0x2a, 0xe6, 0xf5, 0x44, 0xe2, 0xc2, 0x72,
    0x39, 0x88, 0xee, 0x8d, 0x89, 0xce, 0x35, 0x80, 0x28, 0x01, 0x18, 0x24, 0x81, 0x05, 0x36, 0x82, 0x04, 0x02, 0x04, 0x01, 0x18,
    0x30, 0x83, 0x14, 0x61, 0x86, 0xcd, 0x9c, 0x07, 0x49, 0x23, 0x5c, 0x96, 0x79, 0x3c, 0xd3, 0xf7, 0x0c, 0xe0, 0x84, 0xf5, 0x85,
    0x08, 0x49, 0x30, 0x84, 0x14, 0x6e, 0xdc, 0xf5, 0x99, 0xc4, 0xb5, 0xb2, 0x93, 0x04, 0xec, 0x3a, 0x9e, 0x69, 0xee, 0x3c, 0x98,
    0x66, 0x50, 0xf4, 0xa3, 0x35, 0x0a, 0x30, 0x01, 0x20, 0x50, 0xad, 0x84, 0xe6, 0x38, 0x10, 0x5b, 0x06, 0xf9, 0xd8, 0xe7, 0xd9,
    0x9b, 0x40, 0xdc, 0xd0, 0xb5, 0xb8, 0x25, 0x4a, 0xf4, 0x64, 0x1c, 0x61, 0xc1, 0xc5, 0x05, 0x2e, 0x41, 0xb7, 0x39, 0xcc, 0x30,
    0x02, 0x21, 0x00, 0x90, 0xc4, 0xdf, 0x61, 0xc4, 0xf4, 0xeb, 0xbe, 0xd2, 0x43, 0x2e, 0xf2, 0x6d, 0x9c, 0x84, 0x72, 0x11, 0x73,
    0x19, 0xf8, 0x71, 0x43, 0x82, 0xab, 0xdc, 0x99, 0x1a, 0x64, 0x49, 0x73, 0xf0, 0xd8, 0x18, 0x18,
};

extern const uint32_t sTestCert_Node02_02_Chip_Len = sizeof(sTestCert_Node02_02_Chip);

extern const uint8_t sTestCert_Node02_02_DER[] = {
    0x30, 0x82, 0x02, 0x34, 0x30, 0x82, 0x01, 0xda, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x07, 0x50, 0x62, 0xf3, 0x1b, 0xbc, 0x88,
    0xfb, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x44, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a,
    0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x02, 0x0c, 0x10, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c,
    0x01, 0x04, 0x0c, 0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x30,
    0x1e, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x17, 0x0d, 0x34, 0x30, 0x31,
    0x30, 0x31, 0x35, 0x31, 0x34, 0x32, 0x33, 0x34, 0x32, 0x5a, 0x30, 0x77, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01,
    0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x01, 0x0c, 0x10, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x30, 0x30, 0x30, 0x32,
    0x30, 0x30, 0x30, 0x32, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x01, 0x04, 0x0c,
    0x10, 0x46, 0x41, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x44, 0x31, 0x31, 0x30, 0x2f,
    0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x28, 0x54, 0x45, 0x53, 0x54, 0x20, 0x43, 0x45, 0x52, 0x54, 0x20, 0x43, 0x4f, 0x4d, 0x4d,
    0x4f, 0x4e, 0x20, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x41, 0x74, 0x74, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4e, 0x6f, 0x64, 0x65,
    0x30, 0x32, 0x5f, 0x30, 0x32, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a,
    0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x7b, 0x48, 0xf8, 0x96, 0x55, 0x85, 0x98, 0x3b, 0x32, 0xa0,
    0x07, 0x47, 0x81, 0x9c, 0xa8, 0xaf, 0x35, 0x1b, 0xa8, 0x6b, 0x57, 0x17, 0x15, 0x7f, 0x82, 0x5b, 0x38, 0x2d, 0x2a, 0x08, 0x8f,
    0x49, 0xa3, 0x49, 0x58, 0x01, 0xd7, 0xa8, 0x98, 0x50, 0xeb, 0x73, 0x26, 0x42, 0x22, 0x83, 0x10, 0xab, 0xcd, 0x0d, 0xcb, 0x2a,
    0xe6, 0xf5, 0x44, 0xe2, 0xc2, 0x72, 0x39, 0x88, 0xee, 0x8d, 0x89, 0xce, 0xa3, 0x81, 0x83, 0x30, 0x81, 0x80, 0x30, 0x0c, 0x06,
    0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff,
    0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x16, 0x30, 0x14, 0x06,
    0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1d,
    0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x61, 0x86, 0xcd, 0x9c, 0x07, 0x49, 0x23, 0x5c, 0x96, 0x79, 0x3c, 0xd3,
    0xf7, 0x0c, 0xe0, 0x84, 0xf5, 0x85, 0x08, 0x49, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
    0x6e, 0xdc, 0xf5, 0x99, 0xc4, 0xb5, 0xb2, 0x93, 0x04, 0xec, 0x3a, 0x9e, 0x69, 0xee, 0x3c, 0x98, 0x66, 0x50, 0xf4, 0xa3, 0x30,
    0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x50, 0xad, 0x84,
    0xe6, 0x38, 0x10, 0x5b, 0x06, 0xf9, 0xd8, 0xe7, 0xd9, 0x9b, 0x40, 0xdc, 0xd0, 0xb5, 0xb8, 0x25, 0x4a, 0xf4, 0x64, 0x1c, 0x61,
    0xc1, 0xc5, 0x05, 0x2e, 0x41, 0xb7, 0x39, 0xcc, 0x02, 0x21, 0x00, 0x90, 0xc4, 0xdf, 0x61, 0xc4, 0xf4, 0xeb, 0xbe, 0xd2, 0x43,
    0x2e, 0xf2, 0x6d, 0x9c, 0x84, 0x72, 0x11, 0x73, 0x19, 0xf8, 0x71, 0x43, 0x82, 0xab, 0xdc, 0x99, 0x1a, 0x64, 0x49, 0x73, 0xf0,
    0xd8,
};

extern const uint32_t sTestCert_Node02_02_DER_Len = sizeof(sTestCert_Node02_02_DER);

extern const uint8_t sTestCert_Node02_02_PublicKey[] = {
    0x04, 0x7b, 0x48, 0xf8, 0x96, 0x55, 0x85, 0x98, 0x3b, 0x32, 0xa0, 0x07, 0x47, 0x81, 0x9c, 0xa8, 0xaf,
    0x35, 0x1b, 0xa8, 0x6b, 0x57, 0x17, 0x15, 0x7f, 0x82, 0x5b, 0x38, 0x2d, 0x2a, 0x08, 0x8f, 0x49, 0xa3,
    0x49, 0x58, 0x01, 0xd7, 0xa8, 0x98, 0x50, 0xeb, 0x73, 0x26, 0x42, 0x22, 0x83, 0x10, 0xab, 0xcd, 0x0d,
    0xcb, 0x2a, 0xe6, 0xf5, 0x44, 0xe2, 0xc2, 0x72, 0x39, 0x88, 0xee, 0x8d, 0x89, 0xce,
};

extern const uint8_t sTestCert_Node02_02_PublicKey_Len = sizeof(sTestCert_Node02_02_PublicKey);

extern const uint8_t sTestCert_Node02_02_PrivateKey[] = {
    0x8a, 0xb7, 0xc7, 0x3e, 0x71, 0xc5, 0x61, 0xe7, 0x37, 0x54, 0x82, 0x8d, 0xb2, 0xcc, 0x43, 0x73,
    0xbf, 0xbe, 0xec, 0xb1, 0x55, 0xeb, 0xbd, 0x63, 0x2a, 0x77, 0x65, 0xcf, 0x20, 0xc3, 0x96, 0x49,
};

extern const uint8_t sTestCert_Node02_02_PrivateKey_Len = sizeof(sTestCert_Node02_02_PrivateKey);

extern const uint8_t sTestCert_Node02_02_SubjectKeyId[] = {
    0x61, 0x86, 0xCD, 0x9C, 0x07, 0x49, 0x23, 0x5C, 0x96, 0x79, 0x3C, 0xD3, 0xF7, 0x0C, 0xE0, 0x84, 0xF5, 0x85, 0x08, 0x49,
};

extern const uint8_t sTestCert_Node02_02_SubjectKeyId_Len = sizeof(sTestCert_Node02_02_SubjectKeyId);

} // namespace TestCerts
} // namespace chip
