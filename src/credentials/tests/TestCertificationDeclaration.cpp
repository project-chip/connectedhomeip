/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *    All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *    @file
 *      This file implements a unit test suite for CHIP Certification
 *      declaration classes and APIs.
 */

#include <inttypes.h>
#include <stddef.h>

#include <credentials/CertificationDeclaration.h>
#include <lib/support/Span.h>
#include <lib/support/UnitTestRegistration.h>

#include <nlunit-test.h>

using namespace chip;
using namespace chip::ASN1;
using namespace chip::Crypto;
using namespace chip::Credentials;

static constexpr uint8_t sTestCMS_SignerCert[] = {
    0x30, 0x82, 0x01, 0xa7, 0x30, 0x82, 0x01, 0x4d, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x74, 0x1f, 0x94, 0x28, 0x05, 0x8f,
    0x11, 0xa6, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x26, 0x31, 0x24, 0x30, 0x22, 0x06,
    0x03, 0x55, 0x04, 0x03, 0x0c, 0x1b, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x44, 0x20,
    0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x20, 0x52, 0x6f, 0x6f, 0x74, 0x30, 0x20, 0x17, 0x0d, 0x32, 0x31, 0x30, 0x36, 0x32,
    0x38, 0x31, 0x34, 0x32, 0x33, 0x34, 0x33, 0x5a, 0x18, 0x0f, 0x39, 0x39, 0x39, 0x39, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x35,
    0x39, 0x35, 0x39, 0x5a, 0x30, 0x26, 0x31, 0x24, 0x30, 0x22, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1b, 0x4d, 0x61, 0x74, 0x74,
    0x65, 0x72, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x44, 0x20, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x20, 0x52, 0x6f,
    0x6f, 0x74, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,
    0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xd7, 0x35, 0x94, 0xc9, 0x7b, 0xb4, 0x7c, 0xb4, 0x35, 0x8b, 0xa5, 0x8e, 0xf9,
    0x6f, 0x80, 0x49, 0xcb, 0xc8, 0x14, 0xb5, 0xdb, 0xd3, 0x1a, 0xe4, 0x73, 0xd5, 0x57, 0x74, 0x77, 0x55, 0xed, 0xa1, 0xd7, 0x54,
    0x7a, 0xe6, 0x0f, 0xaa, 0xa3, 0xd3, 0xc7, 0x2d, 0xbe, 0x44, 0x73, 0xab, 0x3b, 0x72, 0x08, 0x6d, 0xe5, 0x12, 0x2b, 0x2a, 0x63,
    0x72, 0x4e, 0xfe, 0x9b, 0xdb, 0x84, 0xdb, 0x92, 0xe4, 0xa3, 0x63, 0x30, 0x61, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01,
    0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04,
    0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xfd, 0x03, 0xc3, 0x49, 0xfc, 0x32,
    0x9e, 0x6c, 0xef, 0xf0, 0x1b, 0xa7, 0x7f, 0x6b, 0x8a, 0x31, 0xfb, 0xc0, 0xe7, 0xd4, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23,
    0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xfd, 0x03, 0xc3, 0x49, 0xfc, 0x32, 0x9e, 0x6c, 0xef, 0xf0, 0x1b, 0xa7, 0x7f, 0x6b, 0x8a,
    0x31, 0xfb, 0xc0, 0xe7, 0xd4, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30,
    0x45, 0x02, 0x20, 0x19, 0x02, 0xe4, 0xce, 0x75, 0x91, 0x8b, 0x25, 0xff, 0xbb, 0xb5, 0x1c, 0x80, 0x13, 0x6f, 0xd8, 0x65, 0x71,
    0x10, 0x42, 0x23, 0x85, 0x5a, 0x6c, 0x8a, 0x95, 0x8f, 0xf5, 0x47, 0x17, 0x07, 0x11, 0x02, 0x21, 0x00, 0xc3, 0x2b, 0x9c, 0x0d,
    0x15, 0x5b, 0x4e, 0xf5, 0x0c, 0xa0, 0xf2, 0x25, 0x34, 0x13, 0xaa, 0x24, 0xcc, 0xc6, 0xbd, 0x97, 0xed, 0xea, 0x31, 0x75, 0x80,
    0x52, 0x2d, 0x26, 0xf1, 0xc1, 0x9b, 0x93
};

static constexpr uint8_t sTestCMS_SignedMessage[] = {
    0x30, 0x81, 0xDB, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 0x02, 0xA0, 0x81, 0xCD, 0x30, 0x81, 0xCA, 0x02,
    0x01, 0x03, 0x31, 0x0D, 0x30, 0x0B, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x30, 0x37, 0x06, 0x09,
    0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 0x01, 0xA0, 0x2A, 0x04, 0x28, 0x15, 0x25, 0x01, 0xF1, 0xFF, 0x36, 0x02, 0x05,
    0x00, 0x80, 0x05, 0x01, 0x80, 0x05, 0x02, 0x80, 0x18, 0x25, 0x03, 0xD2, 0x04, 0x25, 0x04, 0x2E, 0x16, 0x24, 0x05, 0xAA, 0x25,
    0x06, 0xDE, 0xC0, 0x25, 0x07, 0x94, 0x26, 0x24, 0x08, 0x00, 0x18, 0x31, 0x7D, 0x30, 0x7B, 0x02, 0x01, 0x03, 0x80, 0x14, 0xFD,
    0x03, 0xC3, 0x49, 0xFC, 0x32, 0x9E, 0x6C, 0xEF, 0xF0, 0x1B, 0xA7, 0x7F, 0x6B, 0x8A, 0x31, 0xFB, 0xC0, 0xE7, 0xD4, 0x30, 0x0B,
    0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x30, 0x0A, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04,
    0x03, 0x02, 0x04, 0x47, 0x30, 0x45, 0x02, 0x21, 0x00, 0x88, 0x16, 0xB6, 0x1E, 0x5B, 0x43, 0x90, 0x00, 0xA7, 0x42, 0x07, 0xB2,
    0x6A, 0xBB, 0x0A, 0xB6, 0x6C, 0xAA, 0xCB, 0xDD, 0x05, 0x08, 0xE8, 0xE3, 0xE2, 0xC6, 0xAB, 0x0F, 0x41, 0x29, 0x73, 0xCE, 0x02,
    0x20, 0x0C, 0x09, 0xED, 0x4F, 0x05, 0x43, 0x10, 0x17, 0xA9, 0xC4, 0xB5, 0x00, 0x5F, 0x23, 0x49, 0x25, 0x01, 0x2D, 0xAB, 0x56,
    0x34, 0x75, 0xE4, 0x7D, 0x0C, 0x82, 0x42, 0xF7, 0xAD, 0x21, 0xA1, 0xFF
};

static constexpr uint8_t sTestCMS_CDContent[] = { 0x15, 0x25, 0x01, 0xF1, 0xFF, 0x36, 0x02, 0x05, 0x00, 0x80,
                                                  0x05, 0x01, 0x80, 0x05, 0x02, 0x80, 0x18, 0x25, 0x03, 0xD2,
                                                  0x04, 0x25, 0x04, 0x2E, 0x16, 0x24, 0x05, 0xAA, 0x25, 0x06,
                                                  0xDE, 0xC0, 0x25, 0x07, 0x94, 0x26, 0x24, 0x08, 0x00, 0x18 };

static constexpr uint8_t sTestCMS_SignerKeyId[] = { 0xfd, 0x03, 0xc3, 0x49, 0xfc, 0x32, 0x9e, 0x6c, 0xef, 0xf0,
                                                    0x1b, 0xa7, 0x7f, 0x6b, 0x8a, 0x31, 0xfb, 0xc0, 0xe7, 0xd4 };

// The value of the private key is:
//    0xbb, 0xd0, 0xe5, 0xa9, 0x97, 0x99, 0x50, 0xa6, 0x1a, 0xe5, 0xfe, 0xa8, 0xcc, 0x5d, 0xbc, 0x2c,
//    0xb0, 0xa4, 0x3f, 0xed, 0xcf, 0xfa, 0x2b, 0x68, 0xe3, 0x09, 0x4a, 0xf1, 0x00, 0x1c, 0xee, 0x41
static constexpr uint8_t sTestCMS_SerializedKeypair[] = {
    0x04, 0xd7, 0x35, 0x94, 0xc9, 0x7b, 0xb4, 0x7c, 0xb4, 0x35, 0x8b, 0xa5, 0x8e, 0xf9, 0x6f, 0x80, 0x49, 0xcb, 0xc8, 0x14,
    0xb5, 0xdb, 0xd3, 0x1a, 0xe4, 0x73, 0xd5, 0x57, 0x74, 0x77, 0x55, 0xed, 0xa1, 0xd7, 0x54, 0x7a, 0xe6, 0x0f, 0xaa, 0xa3,
    0xd3, 0xc7, 0x2d, 0xbe, 0x44, 0x73, 0xab, 0x3b, 0x72, 0x08, 0x6d, 0xe5, 0x12, 0x2b, 0x2a, 0x63, 0x72, 0x4e, 0xfe, 0x9b,
    0xdb, 0x84, 0xdb, 0x92, 0xe4, 0xbb, 0xd0, 0xe5, 0xa9, 0x97, 0x99, 0x50, 0xa6, 0x1a, 0xe5, 0xfe, 0xa8, 0xcc, 0x5d, 0xbc,
    0x2c, 0xb0, 0xa4, 0x3f, 0xed, 0xcf, 0xfa, 0x2b, 0x68, 0xe3, 0x09, 0x4a, 0xf1, 0x00, 0x1c, 0xee, 0x41
};

static constexpr uint8_t sTestCMS_SignerPublicKey[] = { 0x04, 0xd7, 0x35, 0x94, 0xc9, 0x7b, 0xb4, 0x7c, 0xb4, 0x35, 0x8b,
                                                        0xa5, 0x8e, 0xf9, 0x6f, 0x80, 0x49, 0xcb, 0xc8, 0x14, 0xb5, 0xdb,
                                                        0xd3, 0x1a, 0xe4, 0x73, 0xd5, 0x57, 0x74, 0x77, 0x55, 0xed, 0xa1,
                                                        0xd7, 0x54, 0x7a, 0xe6, 0x0f, 0xaa, 0xa3, 0xd3, 0xc7, 0x2d, 0xbe,
                                                        0x44, 0x73, 0xab, 0x3b, 0x72, 0x08, 0x6d, 0xe5, 0x12, 0x2b, 0x2a,
                                                        0x63, 0x72, 0x4e, 0xfe, 0x9b, 0xdb, 0x84, 0xdb, 0x92, 0xe4 };

static void TestCertificationElements(nlTestSuite * inSuite, void * inContext)
{
    CertificationElements certElementsIn1 = {
        0x4567, { 0xFA23, 0x24, 0xFA25, 0x1234 }, 4, 0x1BC8, 0xFFAA, 0xFF, 0x01, 0xCC44, 0x01
    };
    CertificationElements certElementsOut;

    uint8_t encodedCertElemBuf[kCertificationElements_TLVEncodedMaxLength];
    MutableByteSpan encodedCertElem1Span(encodedCertElemBuf);

    NL_TEST_ASSERT(inSuite, EncodeCertificationElements(certElementsIn1, encodedCertElem1Span) == CHIP_NO_ERROR);
    NL_TEST_ASSERT(inSuite, DecodeCertificationElements(encodedCertElem1Span, certElementsOut) == CHIP_NO_ERROR);

    NL_TEST_ASSERT(inSuite, certElementsOut.VendorId == certElementsIn1.VendorId);
    NL_TEST_ASSERT(inSuite, certElementsOut.ProductIdsCount == certElementsIn1.ProductIdsCount);
    for (uint8_t i = 0; i < certElementsOut.ProductIdsCount; i++)
    {
        NL_TEST_ASSERT(inSuite, certElementsOut.ProductIds[i] == certElementsIn1.ProductIds[i]);
    }
    NL_TEST_ASSERT(inSuite, certElementsOut.ServerCategoryId == certElementsIn1.ServerCategoryId);
    NL_TEST_ASSERT(inSuite, certElementsOut.ClientCategoryId == certElementsIn1.ClientCategoryId);
    NL_TEST_ASSERT(inSuite, certElementsOut.SecurityLevel == certElementsIn1.SecurityLevel);
    NL_TEST_ASSERT(inSuite, certElementsOut.SecurityInformation == certElementsIn1.SecurityInformation);
    NL_TEST_ASSERT(inSuite, certElementsOut.VersionNumber == certElementsIn1.VersionNumber);
    NL_TEST_ASSERT(inSuite, certElementsOut.CertificationType == certElementsIn1.CertificationType);

    // Test precomputed TLV encoded structure with the following paramenters:
    CertificationElements certElementsIn2 = { 0xFFF1, { 0x8000, 0x8001, 0x8002 }, 3, 0x04D2, 0x162E, 0xAA, 0xC0DE, 0x2694, 0x00 };
    ByteSpan encodedCertElem2Span(sTestCMS_CDContent);

    NL_TEST_ASSERT(inSuite, DecodeCertificationElements(encodedCertElem2Span, certElementsOut) == CHIP_NO_ERROR);

    NL_TEST_ASSERT(inSuite, certElementsOut.VendorId == certElementsIn2.VendorId);
    NL_TEST_ASSERT(inSuite, certElementsOut.ProductIdsCount == certElementsIn2.ProductIdsCount);
    for (uint8_t i = 0; i < certElementsOut.ProductIdsCount; i++)
    {
        NL_TEST_ASSERT(inSuite, certElementsOut.ProductIds[i] == certElementsIn2.ProductIds[i]);
    }
    NL_TEST_ASSERT(inSuite, certElementsOut.ServerCategoryId == certElementsIn2.ServerCategoryId);
    NL_TEST_ASSERT(inSuite, certElementsOut.ClientCategoryId == certElementsIn2.ClientCategoryId);
    NL_TEST_ASSERT(inSuite, certElementsOut.SecurityLevel == certElementsIn2.SecurityLevel);
    NL_TEST_ASSERT(inSuite, certElementsOut.SecurityInformation == certElementsIn2.SecurityInformation);
    NL_TEST_ASSERT(inSuite, certElementsOut.VersionNumber == certElementsIn2.VersionNumber);
    NL_TEST_ASSERT(inSuite, certElementsOut.CertificationType == certElementsIn2.CertificationType);

    MutableByteSpan encodedCertElem3Span(encodedCertElemBuf);
    NL_TEST_ASSERT(inSuite, EncodeCertificationElements(certElementsOut, encodedCertElem3Span) == CHIP_NO_ERROR);
    NL_TEST_ASSERT(inSuite, encodedCertElem3Span.data_equal(encodedCertElem2Span));

    // Test Encode Error: CHIP_ERROR_BUFFER_TOO_SMALL
    encodedCertElem3Span.reduce_size(encodedCertElem3Span.size() - 4);
    NL_TEST_ASSERT(inSuite, EncodeCertificationElements(certElementsIn1, encodedCertElem3Span) == CHIP_ERROR_BUFFER_TOO_SMALL);

    // Test Decode Error: CHIP_ERROR_INVALID_TLV_ELEMENT
    // manually modified sTestCMS_CDContent[] with larger ServerCategoryId value (4-octet)
    uint8_t encodedCertElem4[] = { 0x15, 0x25, 0x01, 0xF1, 0xFF, 0x36, 0x02, 0x05, 0x00, 0x80, 0x05, 0x01, 0x80, 0x05,
                                   0x02, 0x80, 0x18, 0x26, 0x03, 0xD2, 0x04, 0x01, 0x00, 0x25, 0x04, 0x2E, 0x16, 0x24,
                                   0x05, 0xAA, 0x25, 0x06, 0xDE, 0xC0, 0x25, 0x07, 0x94, 0x26, 0x24, 0x08, 0x00, 0x18 };

    ByteSpan encodedCertElem4Span(encodedCertElem4);
    NL_TEST_ASSERT(inSuite, DecodeCertificationElements(encodedCertElem4Span, certElementsOut) == CHIP_ERROR_INVALID_TLV_ELEMENT);

    // Test Decode Error: CHIP_ERROR_UNEXPECTED_TLV_ELEMENT
    // manually modified sTestCMS_CDContent[] switched elements order ProductIds <--> ServerCategoryId
    uint8_t encodedCertElem5[] = { 0x15, 0x25, 0x01, 0xF1, 0xFF, 0x36, 0x25, 0x03, 0xD2, 0x04, 0x02, 0x05, 0x00, 0x80,
                                   0x05, 0x01, 0x80, 0x05, 0x02, 0x80, 0x18, 0x25, 0x04, 0x2E, 0x16, 0x24, 0x05, 0xAA,
                                   0x25, 0x06, 0xDE, 0xC0, 0x25, 0x07, 0x94, 0x26, 0x24, 0x08, 0x00, 0x18 };
    ByteSpan encodedCertElem5Span(encodedCertElem5);
    NL_TEST_ASSERT(inSuite,
                   DecodeCertificationElements(encodedCertElem5Span, certElementsOut) == CHIP_ERROR_UNEXPECTED_TLV_ELEMENT);
}

static void TestCMSSignVerify(nlTestSuite * inSuite, void * inContext)
{
    ByteSpan cdContent(sTestCMS_CDContent);
    ByteSpan cdContentOut;
    ByteSpan signerKeyId(sTestCMS_SignerKeyId);
    uint8_t signedMessageBuf[kMaxCMSSignedCDMessage];
    MutableByteSpan signedMessage(signedMessageBuf);

    // Test with random key
    P256Keypair keypair;
    NL_TEST_ASSERT(inSuite, keypair.Initialize() == CHIP_NO_ERROR);
    NL_TEST_ASSERT(inSuite, CMS_Sign(cdContent, signerKeyId, keypair, signedMessage) == CHIP_NO_ERROR);
    NL_TEST_ASSERT(inSuite, CMS_Verify(signedMessage, keypair.Pubkey(), cdContentOut) == CHIP_NO_ERROR);
    NL_TEST_ASSERT(inSuite, cdContent.data_equal(cdContentOut));

    // Test with known key
    P256Keypair keypair2;
    P256SerializedKeypair serializedKeypair;
    memcpy(serializedKeypair, sTestCMS_SerializedKeypair, sizeof(sTestCMS_SerializedKeypair));
    serializedKeypair.SetLength(sizeof(sTestCMS_SerializedKeypair));
    signedMessage = MutableByteSpan(signedMessageBuf);
    NL_TEST_ASSERT(inSuite, keypair2.Deserialize(serializedKeypair) == CHIP_NO_ERROR);
    NL_TEST_ASSERT(inSuite, CMS_Sign(cdContent, signerKeyId, keypair2, signedMessage) == CHIP_NO_ERROR);
    NL_TEST_ASSERT(inSuite, CMS_Verify(signedMessage, keypair2.Pubkey(), cdContentOut) == CHIP_NO_ERROR);
    NL_TEST_ASSERT(inSuite, cdContent.data_equal(cdContentOut));

    // Test known CMS test vector
    ByteSpan signedTestMessage(sTestCMS_SignedMessage);
    P256PublicKey signerPubkey(sTestCMS_SignerPublicKey);
    cdContentOut = ByteSpan();
    NL_TEST_ASSERT(inSuite, CMS_Verify(signedTestMessage, signerPubkey, cdContentOut) == CHIP_NO_ERROR);
    NL_TEST_ASSERT(inSuite, cdContent.data_equal(cdContentOut));

    // Test known CMS test vector with X509 Certificate.
    ByteSpan signerX509Cert(sTestCMS_SignerCert);
    cdContentOut = ByteSpan();
    NL_TEST_ASSERT(inSuite, CMS_Verify(signedTestMessage, signerX509Cert, cdContentOut) == CHIP_NO_ERROR);

    // TestCMS_ExtractCDContent()
    cdContentOut = ByteSpan();
    NL_TEST_ASSERT(inSuite, CMS_ExtractCDContent(signedTestMessage, cdContentOut) == CHIP_NO_ERROR);
    NL_TEST_ASSERT(inSuite, cdContent.data_equal(cdContentOut));

    // TestCMS_ExtractKeyId()
    ByteSpan signerKeyIdOut;
    NL_TEST_ASSERT(inSuite, CMS_ExtractKeyId(signedTestMessage, signerKeyIdOut) == CHIP_NO_ERROR);
    NL_TEST_ASSERT(inSuite, signerKeyId.data_equal(signerKeyIdOut));
}

#define NL_TEST_DEF_FN(fn) NL_TEST_DEF("Test " #fn, fn)
/**
 *   Test Suite. It lists all the test functions.
 */
static const nlTest sTests[] = { NL_TEST_DEF_FN(TestCertificationElements), NL_TEST_DEF_FN(TestCMSSignVerify), NL_TEST_SENTINEL() };

int TestCertificationDeclaration(void)
{
    nlTestSuite theSuite = { "CHIP Certification Declaration tests", &sTests[0], nullptr, nullptr };

    // Run test suit againt one context.
    nlTestRunner(&theSuite, nullptr);
    return nlTestRunnerStats(&theSuite);
}

CHIP_REGISTER_TEST_SUITE(TestCertificationDeclaration);
