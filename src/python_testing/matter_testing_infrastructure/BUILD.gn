# Copyright (c) 2024 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")
import("//build_overrides/pigweed.gni")
import("//src/python_testing/matter_testing_infrastructure/data_model_xmls.gni")
import("$dir_pw_build/python.gni")
import("$dir_pw_build/python_dist.gni")
import("$dir_pw_build/zip.gni")

pw_python_package("matter-testing-module") {
  generate_setup = {
    metadata = {
      name = "matter-testing-module"
      version = "1.4.0"
      description = "Testing support for Matter SDK"
      url = "https://github.com/project-chip/connectedhomeip"
      classifiers = [
        "Intended Audience :: Developers",
        "License :: OSI Approved :: Apache Software License",
        "Programming Language :: Python :: 3",
      ]
    }
  }

  inputs = [ "env_test.yaml" ]

  sources = [
    "matter/testing/__init__.py",
    "matter/testing/apps.py",
    "matter/testing/basic_composition.py",
    "matter/testing/choice_conformance.py",
    "matter/testing/commissioning.py",
    "matter/testing/conformance.py",
    "matter/testing/conversions.py",
    "matter/testing/decorators.py",
    "matter/testing/event_attribute_reporting.py",
    "matter/testing/global_attribute_ids.py",
    "matter/testing/global_stash.py",
    "matter/testing/matchers.py",
    "matter/testing/matter_asserts.py",
    "matter/testing/matter_stack_state.py",
    "matter/testing/matter_test_config.py",
    "matter/testing/matter_testing.py",
    "matter/testing/metadata.py",
    "matter/testing/pics.py",
    "matter/testing/problem_notices.py",
    "matter/testing/runner.py",
    "matter/testing/spec_parsing.py",
    "matter/testing/taglist_and_topology_test.py",
    "matter/testing/tasks.py",
    "matter/testing/timeoperations.py",
  ]
  tests = [
    "matter/testing/test_metadata.py",
    "matter/testing/test_tasks.py",
    "matter/testing/test_matter_asserts.py",
  ]
}

pw_zip("data_model_zip_1_2") {
  inputs = []
  foreach(file, data_model_XMLS_1_2) {
    zip_path = rebase_path(file, "${chip_root}/data_model/1.2/", "/")
    inputs += [ "${file} > /${zip_path}" ]
  }
  output = "${root_out_dir}/data_model/zip_1_2.zip"
}

pw_zip("data_model_zip_1_3") {
  inputs = []
  foreach(file, data_model_XMLS_1_3) {
    zip_path = rebase_path(file, "${chip_root}/data_model/1.3/", "/")
    inputs += [ "${file} > /${zip_path}" ]
  }
  output = "${root_out_dir}/data_model/zip_1_3.zip"
}

pw_zip("data_model_zip_1_4") {
  inputs = []
  foreach(file, data_model_XMLS_1_4) {
    zip_path = rebase_path(file, "${chip_root}/data_model/1.4/", "/")
    inputs += [ "${file} > /${zip_path}" ]
  }
  output = "${root_out_dir}/data_model/zip_1_4.zip"
}

pw_zip("data_model_zip_1_4_1") {
  inputs = []
  foreach(file, data_model_XMLS_1_4_1) {
    zip_path = rebase_path(file, "${chip_root}/data_model/1.4.1/", "/")
    inputs += [ "${file} > /${zip_path}" ]
  }
  output = "${root_out_dir}/data_model/zip_1_4_1.zip"
}

pw_zip("data_model_zip_1_4_2") {
  inputs = []
  foreach(file, data_model_XMLS_1_4_2) {
    zip_path = rebase_path(file, "${chip_root}/data_model/1.4.2/", "/")
    inputs += [ "${file} > /${zip_path}" ]
  }
  output = "${root_out_dir}/data_model/zip_1_4_2.zip"
}

pw_python_distribution("matter-testing") {
  packages = [ ":matter-testing-module" ]

  generate_setup_cfg = {
    name = "matter-testing"
    version = "1.4.2"
    include_default_pyproject_file = true
    include_extra_files_in_package_data = true
  }

  public_deps = [
    ":data_model_zip_1_2",
    ":data_model_zip_1_3",
    ":data_model_zip_1_4",
    ":data_model_zip_1_4_1",
    ":data_model_zip_1_4_2",
  ]

  extra_files = [
    "${root_out_dir}/data_model/zip_1_2.zip > matter/testing/data_model/1.2/allfiles.zip",
    "${root_out_dir}/data_model/zip_1_3.zip > matter/testing/data_model/1.3/allfiles.zip",
    "${root_out_dir}/data_model/zip_1_4.zip > matter/testing/data_model/1.4/allfiles.zip",
    "${root_out_dir}/data_model/zip_1_4_1.zip > matter/testing/data_model/1.4.1/allfiles.zip",
    "${root_out_dir}/data_model/zip_1_4_2.zip > matter/testing/data_model/1.4.2/allfiles.zip",
  ]
}
