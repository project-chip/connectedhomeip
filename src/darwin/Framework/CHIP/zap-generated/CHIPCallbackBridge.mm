/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#import "CHIPCallbackBridge_internal.h"

void CHIPDefaultSuccessCallbackBridge::OnSuccessFn(void * context) { DispatchSuccess(context, nil); };

void CHIPOctetStringAttributeCallbackBridge::OnSuccessFn(void * context, chip::ByteSpan value)
{
    DispatchSuccess(context, @ { @"value" : [NSData dataWithBytes:value.data() length:value.size()] });
};

void CHIPCharStringAttributeCallbackBridge::OnSuccessFn(void * context, chip::CharSpan value)
{
    DispatchSuccess(
        context, @ { @"value" : [[NSString alloc] initWithBytes:value.data() length:value.size() encoding:NSUTF8StringEncoding] });
};

void CHIPBooleanAttributeCallbackBridge::OnSuccessFn(void * context, bool value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithBool:value] });
};

void CHIPInt8uAttributeCallbackBridge::OnSuccessFn(void * context, uint8_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithUnsignedChar:value] });
};

void CHIPInt8sAttributeCallbackBridge::OnSuccessFn(void * context, int8_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithChar:value] });
};

void CHIPInt16uAttributeCallbackBridge::OnSuccessFn(void * context, uint16_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithUnsignedShort:value] });
};

void CHIPInt16sAttributeCallbackBridge::OnSuccessFn(void * context, int16_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithShort:value] });
};

void CHIPInt32uAttributeCallbackBridge::OnSuccessFn(void * context, uint32_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithUnsignedLong:value] });
};

void CHIPInt32sAttributeCallbackBridge::OnSuccessFn(void * context, int32_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithLong:value] });
};

void CHIPInt64uAttributeCallbackBridge::OnSuccessFn(void * context, uint64_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithUnsignedLongLong:value] });
};

void CHIPInt64sAttributeCallbackBridge::OnSuccessFn(void * context, int64_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithLongLong:value] });
};

void CHIPApplicationLauncherApplicationLauncherListListAttributeCallbackBridge::OnSuccessFn(
    void * context, uint16_t count, uint16_t * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = [NSNumber numberWithUnsignedShort:entries[i]];
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPAudioOutputAudioOutputListListAttributeCallbackBridge::OnSuccessFn(
    void * context, uint16_t count, _AudioOutputInfo * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = @ {
            @"index" : [NSNumber numberWithUnsignedChar:entries[i].index],
            @"outputType" : [NSNumber numberWithUnsignedChar:entries[i].outputType],
            @"name" : [NSData dataWithBytes:entries[i].name.data() length:entries[i].name.size()],
        };
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPContentLauncherAcceptsHeaderListListAttributeCallbackBridge::OnSuccessFn(
    void * context, uint16_t count, chip::ByteSpan * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = [NSData dataWithBytes:entries[i].data() length:entries[i].size()];
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPContentLauncherSupportedStreamingTypesListAttributeCallbackBridge::OnSuccessFn(
    void * context, uint16_t count, uint8_t * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = [NSNumber numberWithUnsignedChar:entries[i]];
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPDescriptorDeviceListListAttributeCallbackBridge::OnSuccessFn(void * context, uint16_t count, _DeviceType * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = @ {
            @"type" : [NSNumber numberWithUnsignedLong:entries[i].type],
            @"revision" : [NSNumber numberWithUnsignedShort:entries[i].revision],
        };
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPDescriptorServerListListAttributeCallbackBridge::OnSuccessFn(void * context, uint16_t count, chip::ClusterId * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = [NSNumber numberWithUnsignedLong:entries[i]];
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPDescriptorClientListListAttributeCallbackBridge::OnSuccessFn(void * context, uint16_t count, chip::ClusterId * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = [NSNumber numberWithUnsignedLong:entries[i]];
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPDescriptorPartsListListAttributeCallbackBridge::OnSuccessFn(void * context, uint16_t count, chip::EndpointId * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = [NSNumber numberWithUnsignedShort:entries[i]];
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPFixedLabelLabelListListAttributeCallbackBridge::OnSuccessFn(void * context, uint16_t count, _LabelStruct * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = @ {
            @"label" : [NSData dataWithBytes:entries[i].label.data() length:entries[i].label.size()],
            @"value" : [NSData dataWithBytes:entries[i].value.data() length:entries[i].value.size()],
        };
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPGeneralCommissioningBasicCommissioningInfoListListAttributeCallbackBridge::OnSuccessFn(
    void * context, uint16_t count, _BasicCommissioningInfoType * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = @ {
            @"FailSafeExpiryLengthMs" : [NSNumber numberWithUnsignedLong:entries[i].FailSafeExpiryLengthMs],
        };
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge::OnSuccessFn(
    void * context, uint16_t count, _NetworkInterfaceType * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = @ {
            @"Name" : [NSData dataWithBytes:entries[i].Name.data() length:entries[i].Name.size()],
            @"FabricConnected" : [NSNumber numberWithBool:entries[i].FabricConnected],
            @"OffPremiseServicesReachableIPv4" : [NSNumber numberWithBool:entries[i].OffPremiseServicesReachableIPv4],
            @"OffPremiseServicesReachableIPv6" : [NSNumber numberWithBool:entries[i].OffPremiseServicesReachableIPv6],
            @"HardwareAddress" : [NSData dataWithBytes:entries[i].HardwareAddress.data() length:entries[i].HardwareAddress.size()],
            @"Type" : [NSNumber numberWithUnsignedChar:entries[i].Type],
        };
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPGroupKeyManagementGroupsListAttributeCallbackBridge::OnSuccessFn(void * context, uint16_t count, _GroupState * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = @ {
            @"VendorId" : [NSNumber numberWithUnsignedShort:entries[i].VendorId],
            @"VendorGroupId" : [NSNumber numberWithUnsignedShort:entries[i].VendorGroupId],
            @"GroupKeySetIndex" : [NSNumber numberWithUnsignedShort:entries[i].GroupKeySetIndex],
        };
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPGroupKeyManagementGroupKeysListAttributeCallbackBridge::OnSuccessFn(void * context, uint16_t count, _GroupKey * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = @ {
            @"VendorId" : [NSNumber numberWithUnsignedShort:entries[i].VendorId],
            @"GroupKeyIndex" : [NSNumber numberWithUnsignedShort:entries[i].GroupKeyIndex],
            @"GroupKeyRoot" : [NSData dataWithBytes:entries[i].GroupKeyRoot.data() length:entries[i].GroupKeyRoot.size()],
            @"GroupKeyEpochStartTime" : [NSNumber numberWithUnsignedLongLong:entries[i].GroupKeyEpochStartTime],
            @"GroupKeySecurityPolicy" : [NSNumber numberWithUnsignedChar:entries[i].GroupKeySecurityPolicy],
        };
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPMediaInputMediaInputListListAttributeCallbackBridge::OnSuccessFn(void * context, uint16_t count, _MediaInputInfo * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = @ {
            @"index" : [NSNumber numberWithUnsignedChar:entries[i].index],
            @"inputType" : [NSNumber numberWithUnsignedChar:entries[i].inputType],
            @"name" : [NSData dataWithBytes:entries[i].name.data() length:entries[i].name.size()],
            @"description" : [NSData dataWithBytes:entries[i].description.data() length:entries[i].description.size()],
        };
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPOperationalCredentialsFabricsListListAttributeCallbackBridge::OnSuccessFn(
    void * context, uint16_t count, _FabricDescriptor * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = @ {
            @"FabricIndex" : [NSNumber numberWithUnsignedChar:entries[i].FabricIndex],
            @"RootPublicKey" : [NSData dataWithBytes:entries[i].RootPublicKey.data() length:entries[i].RootPublicKey.size()],
            @"VendorId" : [NSNumber numberWithUnsignedShort:entries[i].VendorId],
            @"FabricId" : [NSNumber numberWithUnsignedLongLong:entries[i].FabricId],
            @"NodeId" : [NSNumber numberWithUnsignedLongLong:entries[i].NodeId],
            @"Label" : [NSData dataWithBytes:entries[i].Label.data() length:entries[i].Label.size()],
        };
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPPowerSourceActiveBatteryFaultsListAttributeCallbackBridge::OnSuccessFn(void * context, uint16_t count, uint8_t * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = [NSNumber numberWithUnsignedChar:entries[i]];
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTvChannelTvChannelListListAttributeCallbackBridge::OnSuccessFn(void * context, uint16_t count, _TvChannelInfo * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = @ {
            @"majorNumber" : [NSNumber numberWithUnsignedShort:entries[i].majorNumber],
            @"minorNumber" : [NSNumber numberWithUnsignedShort:entries[i].minorNumber],
            @"name" : [NSData dataWithBytes:entries[i].name.data() length:entries[i].name.size()],
            @"callSign" : [NSData dataWithBytes:entries[i].callSign.data() length:entries[i].callSign.size()],
            @"affiliateCallSign" : [NSData dataWithBytes:entries[i].affiliateCallSign.data()
                                                  length:entries[i].affiliateCallSign.size()],
        };
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTargetNavigatorTargetNavigatorListListAttributeCallbackBridge::OnSuccessFn(
    void * context, uint16_t count, _NavigateTargetTargetInfo * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = @ {
            @"identifier" : [NSNumber numberWithUnsignedChar:entries[i].identifier],
            @"name" : [NSData dataWithBytes:entries[i].name.data() length:entries[i].name.size()],
        };
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTestClusterListInt8uListAttributeCallbackBridge::OnSuccessFn(void * context, uint16_t count, uint8_t * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = [NSNumber numberWithUnsignedChar:entries[i]];
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTestClusterListOctetStringListAttributeCallbackBridge::OnSuccessFn(
    void * context, uint16_t count, chip::ByteSpan * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = [NSData dataWithBytes:entries[i].data() length:entries[i].size()];
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTestClusterListStructOctetStringListAttributeCallbackBridge::OnSuccessFn(
    void * context, uint16_t count, _TestListStructOctet * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = @ {
            @"fabricIndex" : [NSNumber numberWithUnsignedLongLong:entries[i].fabricIndex],
            @"operationalCert" : [NSData dataWithBytes:entries[i].operationalCert.data() length:entries[i].operationalCert.size()],
        };
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsNeighborTableListListAttributeCallbackBridge::OnSuccessFn(
    void * context, uint16_t count, _NeighborTable * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = @ {
            @"ExtAddress" : [NSNumber numberWithUnsignedLongLong:entries[i].ExtAddress],
            @"Age" : [NSNumber numberWithUnsignedLong:entries[i].Age],
            @"Rloc16" : [NSNumber numberWithUnsignedShort:entries[i].Rloc16],
            @"LinkFrameCounter" : [NSNumber numberWithUnsignedLong:entries[i].LinkFrameCounter],
            @"MleFrameCounter" : [NSNumber numberWithUnsignedLong:entries[i].MleFrameCounter],
            @"LQI" : [NSNumber numberWithUnsignedChar:entries[i].LQI],
            @"AverageRssi" : [NSNumber numberWithChar:entries[i].AverageRssi],
            @"LastRssi" : [NSNumber numberWithChar:entries[i].LastRssi],
            @"FrameErrorRate" : [NSNumber numberWithUnsignedChar:entries[i].FrameErrorRate],
            @"MessageErrorRate" : [NSNumber numberWithUnsignedChar:entries[i].MessageErrorRate],
            @"RxOnWhenIdle" : [NSNumber numberWithBool:entries[i].RxOnWhenIdle],
            @"FullThreadDevice" : [NSNumber numberWithBool:entries[i].FullThreadDevice],
            @"FullNetworkData" : [NSNumber numberWithBool:entries[i].FullNetworkData],
            @"IsChild" : [NSNumber numberWithBool:entries[i].IsChild],
        };
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsRouteTableListListAttributeCallbackBridge::OnSuccessFn(
    void * context, uint16_t count, _RouteTable * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = @ {
            @"ExtAddress" : [NSNumber numberWithUnsignedLongLong:entries[i].ExtAddress],
            @"Rloc16" : [NSNumber numberWithUnsignedShort:entries[i].Rloc16],
            @"RouterId" : [NSNumber numberWithUnsignedChar:entries[i].RouterId],
            @"NextHop" : [NSNumber numberWithUnsignedChar:entries[i].NextHop],
            @"PathCost" : [NSNumber numberWithUnsignedChar:entries[i].PathCost],
            @"LQIIn" : [NSNumber numberWithUnsignedChar:entries[i].LQIIn],
            @"LQIOut" : [NSNumber numberWithUnsignedChar:entries[i].LQIOut],
            @"Age" : [NSNumber numberWithUnsignedChar:entries[i].Age],
            @"Allocated" : [NSNumber numberWithBool:entries[i].Allocated],
            @"LinkEstablished" : [NSNumber numberWithBool:entries[i].LinkEstablished],
        };
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsSecurityPolicyListAttributeCallbackBridge::OnSuccessFn(
    void * context, uint16_t count, _SecurityPolicy * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = @ {
            @"RotationTime" : [NSNumber numberWithUnsignedShort:entries[i].RotationTime],
            @"Flags" : [NSNumber numberWithUnsignedShort:entries[i].Flags],
        };
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsOperationalDatasetComponentsListAttributeCallbackBridge::OnSuccessFn(
    void * context, uint16_t count, _OperationalDatasetComponents * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = @ {
            @"ActiveTimestampPresent" : [NSNumber numberWithBool:entries[i].ActiveTimestampPresent],
            @"PendingTimestampPresent" : [NSNumber numberWithBool:entries[i].PendingTimestampPresent],
            @"MasterKeyPresent" : [NSNumber numberWithBool:entries[i].MasterKeyPresent],
            @"NetworkNamePresent" : [NSNumber numberWithBool:entries[i].NetworkNamePresent],
            @"ExtendedPanIdPresent" : [NSNumber numberWithBool:entries[i].ExtendedPanIdPresent],
            @"MeshLocalPrefixPresent" : [NSNumber numberWithBool:entries[i].MeshLocalPrefixPresent],
            @"DelayPresent" : [NSNumber numberWithBool:entries[i].DelayPresent],
            @"PanIdPresent" : [NSNumber numberWithBool:entries[i].PanIdPresent],
            @"ChannelPresent" : [NSNumber numberWithBool:entries[i].ChannelPresent],
            @"PskcPresent" : [NSNumber numberWithBool:entries[i].PskcPresent],
            @"SecurityPolicyPresent" : [NSNumber numberWithBool:entries[i].SecurityPolicyPresent],
            @"ChannelMaskPresent" : [NSNumber numberWithBool:entries[i].ChannelMaskPresent],
        };
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge::OnSuccessFn(
    void * context, uint16_t count, uint8_t * entries)
{
    id array = [NSMutableArray arrayWithCapacity:count];
    for (uint16_t i = 0; i < count; i++) {
        array[i] = [NSNumber numberWithUnsignedChar:entries[i]];
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPAccountLoginClusterGetSetupPINResponseCallbackBridge::OnSuccessFn(void * context, chip::CharSpan setupPIN)
{
    DispatchSuccess(context, @ {
        @"setupPIN" : [[NSString alloc] initWithBytes:setupPIN.data() length:setupPIN.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPApplicationLauncherClusterLaunchAppResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status, chip::CharSpan data)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"data" : [[NSString alloc] initWithBytes:data.data() length:data.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPContentLauncherClusterLaunchContentResponseCallbackBridge::OnSuccessFn(
    void * context, chip::CharSpan data, uint8_t contentLaunchStatus)
{
    DispatchSuccess(context, @ {
        @"data" : [[NSString alloc] initWithBytes:data.data() length:data.size() encoding:NSUTF8StringEncoding],
        @"contentLaunchStatus" : [NSNumber numberWithUnsignedChar:contentLaunchStatus],
    });
};

void CHIPContentLauncherClusterLaunchURLResponseCallbackBridge::OnSuccessFn(
    void * context, chip::CharSpan data, uint8_t contentLaunchStatus)
{
    DispatchSuccess(context, @ {
        @"data" : [[NSString alloc] initWithBytes:data.data() length:data.size() encoding:NSUTF8StringEncoding],
        @"contentLaunchStatus" : [NSNumber numberWithUnsignedChar:contentLaunchStatus],
    });
};

void CHIPDoorLockClusterClearAllPinsResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterClearAllRfidsResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterClearHolidayScheduleResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterClearPinResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterClearRfidResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterClearWeekdayScheduleResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterClearYeardayScheduleResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterGetHolidayScheduleResponseCallbackBridge::OnSuccessFn(void * context, uint8_t scheduleId, uint8_t status,
    uint32_t localStartTime, uint32_t localEndTime, uint8_t operatingModeDuringHoliday)
{
    DispatchSuccess(context, @ {
        @"scheduleId" : [NSNumber numberWithUnsignedChar:scheduleId],
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"localStartTime" : [NSNumber numberWithUnsignedLong:localStartTime],
        @"localEndTime" : [NSNumber numberWithUnsignedLong:localEndTime],
        @"operatingModeDuringHoliday" : [NSNumber numberWithUnsignedChar:operatingModeDuringHoliday],
    });
};

void CHIPDoorLockClusterGetLogRecordResponseCallbackBridge::OnSuccessFn(void * context, uint16_t logEntryId, uint32_t timestamp,
    uint8_t eventType, uint8_t source, uint8_t eventIdOrAlarmCode, uint16_t userId, chip::ByteSpan pin)
{
    DispatchSuccess(context, @ {
        @"logEntryId" : [NSNumber numberWithUnsignedShort:logEntryId],
        @"timestamp" : [NSNumber numberWithUnsignedLong:timestamp],
        @"eventType" : [NSNumber numberWithUnsignedChar:eventType],
        @"source" : [NSNumber numberWithUnsignedChar:source],
        @"eventIdOrAlarmCode" : [NSNumber numberWithUnsignedChar:eventIdOrAlarmCode],
        @"userId" : [NSNumber numberWithUnsignedShort:userId],
        @"pin" : [NSData dataWithBytes:pin.data() length:pin.size()],
    });
};

void CHIPDoorLockClusterGetPinResponseCallbackBridge::OnSuccessFn(
    void * context, uint16_t userId, uint8_t userStatus, uint8_t userType, chip::ByteSpan pin)
{
    DispatchSuccess(context, @ {
        @"userId" : [NSNumber numberWithUnsignedShort:userId],
        @"userStatus" : [NSNumber numberWithUnsignedChar:userStatus],
        @"userType" : [NSNumber numberWithUnsignedChar:userType],
        @"pin" : [NSData dataWithBytes:pin.data() length:pin.size()],
    });
};

void CHIPDoorLockClusterGetRfidResponseCallbackBridge::OnSuccessFn(
    void * context, uint16_t userId, uint8_t userStatus, uint8_t userType, chip::ByteSpan rfid)
{
    DispatchSuccess(context, @ {
        @"userId" : [NSNumber numberWithUnsignedShort:userId],
        @"userStatus" : [NSNumber numberWithUnsignedChar:userStatus],
        @"userType" : [NSNumber numberWithUnsignedChar:userType],
        @"rfid" : [NSData dataWithBytes:rfid.data() length:rfid.size()],
    });
};

void CHIPDoorLockClusterGetUserTypeResponseCallbackBridge::OnSuccessFn(void * context, uint16_t userId, uint8_t userType)
{
    DispatchSuccess(context, @ {
        @"userId" : [NSNumber numberWithUnsignedShort:userId],
        @"userType" : [NSNumber numberWithUnsignedChar:userType],
    });
};

void CHIPDoorLockClusterGetWeekdayScheduleResponseCallbackBridge::OnSuccessFn(void * context, uint8_t scheduleId, uint16_t userId,
    uint8_t status, uint8_t daysMask, uint8_t startHour, uint8_t startMinute, uint8_t endHour, uint8_t endMinute)
{
    DispatchSuccess(context, @ {
        @"scheduleId" : [NSNumber numberWithUnsignedChar:scheduleId],
        @"userId" : [NSNumber numberWithUnsignedShort:userId],
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"daysMask" : [NSNumber numberWithUnsignedChar:daysMask],
        @"startHour" : [NSNumber numberWithUnsignedChar:startHour],
        @"startMinute" : [NSNumber numberWithUnsignedChar:startMinute],
        @"endHour" : [NSNumber numberWithUnsignedChar:endHour],
        @"endMinute" : [NSNumber numberWithUnsignedChar:endMinute],
    });
};

void CHIPDoorLockClusterGetYeardayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t scheduleId, uint16_t userId, uint8_t status, uint32_t localStartTime, uint32_t localEndTime)
{
    DispatchSuccess(context, @ {
        @"scheduleId" : [NSNumber numberWithUnsignedChar:scheduleId],
        @"userId" : [NSNumber numberWithUnsignedShort:userId],
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"localStartTime" : [NSNumber numberWithUnsignedLong:localStartTime],
        @"localEndTime" : [NSNumber numberWithUnsignedLong:localEndTime],
    });
};

void CHIPDoorLockClusterLockDoorResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterSetHolidayScheduleResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterSetPinResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterSetRfidResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterSetUserTypeResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterSetWeekdayScheduleResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterSetYeardayScheduleResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterUnlockDoorResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterUnlockWithTimeoutResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPGeneralCommissioningClusterArmFailSafeResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPGeneralCommissioningClusterCommissioningCompleteResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPGeneralCommissioningClusterSetRegulatoryConfigResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPGroupsClusterAddGroupResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status, uint16_t groupId)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
    });
};

void CHIPGroupsClusterGetGroupMembershipResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t capacity, uint8_t groupCount, /* TYPE WARNING: array array defaults to */ uint8_t * groupList)
{
    DispatchSuccess(context, @ {
        @"capacity" : [NSNumber numberWithUnsignedChar:capacity],
        @"groupCount" : [NSNumber numberWithUnsignedChar:groupCount],
        // groupList : /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Objc is not properly implemented yet
    });
};

void CHIPGroupsClusterRemoveGroupResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status, uint16_t groupId)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
    });
};

void CHIPGroupsClusterViewGroupResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t status, uint16_t groupId, chip::CharSpan groupName)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
        @"groupName" : [[NSString alloc] initWithBytes:groupName.data() length:groupName.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPIdentifyClusterIdentifyQueryResponseCallbackBridge::OnSuccessFn(void * context, uint16_t timeout)
{
    DispatchSuccess(context, @ {
        @"timeout" : [NSNumber numberWithUnsignedShort:timeout],
    });
};

void CHIPKeypadInputClusterSendKeyResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPMediaPlaybackClusterMediaFastForwardResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaNextResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaPauseResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaPlayResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaPreviousResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaRewindResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaSeekResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaSkipBackwardResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaSkipForwardResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaStartOverResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaStopResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPNetworkCommissioningClusterAddThreadNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPNetworkCommissioningClusterAddWiFiNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPNetworkCommissioningClusterDisableNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPNetworkCommissioningClusterEnableNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPNetworkCommissioningClusterRemoveNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPNetworkCommissioningClusterScanNetworksResponseCallbackBridge::OnSuccessFn(void * context, uint8_t errorCode,
    chip::CharSpan debugText, /* TYPE WARNING: array array defaults to */ uint8_t * wifiScanResults,
    /* TYPE WARNING: array array defaults to */ uint8_t * threadScanResults)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
        // wifiScanResults : /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Objc is not properly implemented yet
        // threadScanResults : /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Objc is not properly implemented yet
    });
};

void CHIPNetworkCommissioningClusterUpdateThreadNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPNetworkCommissioningClusterUpdateWiFiNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPOtaSoftwareUpdateProviderClusterApplyUpdateRequestResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t action, uint32_t delayedActionTime)
{
    DispatchSuccess(context, @ {
        @"action" : [NSNumber numberWithUnsignedChar:action],
        @"delayedActionTime" : [NSNumber numberWithUnsignedLong:delayedActionTime],
    });
};

void CHIPOtaSoftwareUpdateProviderClusterQueryImageResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status,
    uint32_t delayedActionTime, chip::CharSpan imageURI, uint32_t softwareVersion, chip::CharSpan softwareVersionString,
    chip::ByteSpan updateToken, bool userConsentNeeded, chip::ByteSpan metadataForRequestor)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"delayedActionTime" : [NSNumber numberWithUnsignedLong:delayedActionTime],
        @"imageURI" : [[NSString alloc] initWithBytes:imageURI.data() length:imageURI.size() encoding:NSUTF8StringEncoding],
        @"softwareVersion" : [NSNumber numberWithUnsignedLong:softwareVersion],
        @"softwareVersionString" : [[NSString alloc] initWithBytes:softwareVersionString.data()
                                                            length:softwareVersionString.size()
                                                          encoding:NSUTF8StringEncoding],
        @"updateToken" : [NSData dataWithBytes:updateToken.data() length:updateToken.size()],
        @"userConsentNeeded" : [NSNumber numberWithBool:userConsentNeeded],
        @"metadataForRequestor" : [NSData dataWithBytes:metadataForRequestor.data() length:metadataForRequestor.size()],
    });
};

void CHIPOperationalCredentialsClusterAttestationResponseCallbackBridge::OnSuccessFn(
    void * context, chip::ByteSpan AttestationElements, chip::ByteSpan Signature)
{
    DispatchSuccess(context, @ {
        @"AttestationElements" : [NSData dataWithBytes:AttestationElements.data() length:AttestationElements.size()],
        @"Signature" : [NSData dataWithBytes:Signature.data() length:Signature.size()],
    });
};

void CHIPOperationalCredentialsClusterCertificateChainResponseCallbackBridge::OnSuccessFn(
    void * context, chip::ByteSpan Certificate)
{
    DispatchSuccess(context, @ {
        @"Certificate" : [NSData dataWithBytes:Certificate.data() length:Certificate.size()],
    });
};

void CHIPOperationalCredentialsClusterNOCResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t StatusCode, uint8_t FabricIndex, chip::ByteSpan DebugText)
{
    DispatchSuccess(context, @ {
        @"StatusCode" : [NSNumber numberWithUnsignedChar:StatusCode],
        @"FabricIndex" : [NSNumber numberWithUnsignedChar:FabricIndex],
        @"DebugText" : [NSData dataWithBytes:DebugText.data() length:DebugText.size()],
    });
};

void CHIPOperationalCredentialsClusterOpCSRResponseCallbackBridge::OnSuccessFn(
    void * context, chip::ByteSpan NOCSRElements, chip::ByteSpan AttestationSignature)
{
    DispatchSuccess(context, @ {
        @"NOCSRElements" : [NSData dataWithBytes:NOCSRElements.data() length:NOCSRElements.size()],
        @"AttestationSignature" : [NSData dataWithBytes:AttestationSignature.data() length:AttestationSignature.size()],
    });
};

void CHIPScenesClusterAddSceneResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status, uint16_t groupId, uint8_t sceneId)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
        @"sceneId" : [NSNumber numberWithUnsignedChar:sceneId],
    });
};

void CHIPScenesClusterGetSceneMembershipResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status, uint8_t capacity,
    uint16_t groupId, uint8_t sceneCount, /* TYPE WARNING: array array defaults to */ uint8_t * sceneList)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"capacity" : [NSNumber numberWithUnsignedChar:capacity],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
        @"sceneCount" : [NSNumber numberWithUnsignedChar:sceneCount],
        // sceneList : /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Objc is not properly implemented yet
    });
};

void CHIPScenesClusterRemoveAllScenesResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status, uint16_t groupId)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
    });
};

void CHIPScenesClusterRemoveSceneResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t status, uint16_t groupId, uint8_t sceneId)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
        @"sceneId" : [NSNumber numberWithUnsignedChar:sceneId],
    });
};

void CHIPScenesClusterStoreSceneResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t status, uint16_t groupId, uint8_t sceneId)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
        @"sceneId" : [NSNumber numberWithUnsignedChar:sceneId],
    });
};

void CHIPScenesClusterViewSceneResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status, uint16_t groupId,
    uint8_t sceneId, uint16_t transitionTime, chip::CharSpan sceneName,
    /* TYPE WARNING: array array defaults to */ uint8_t * extensionFieldSets)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
        @"sceneId" : [NSNumber numberWithUnsignedChar:sceneId],
        @"transitionTime" : [NSNumber numberWithUnsignedShort:transitionTime],
        @"sceneName" : [[NSString alloc] initWithBytes:sceneName.data() length:sceneName.size() encoding:NSUTF8StringEncoding],
        // extensionFieldSets : /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Objc is not properly implemented yet
    });
};

void CHIPTvChannelClusterChangeChannelResponseCallbackBridge::OnSuccessFn(
    void * context, /* TYPE WARNING: array array defaults to */ uint8_t * ChannelMatch, uint8_t ErrorType)
{
    DispatchSuccess(context, @ {
        // ChannelMatch : /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Objc is not properly implemented yet
        @"ErrorType" : [NSNumber numberWithUnsignedChar:ErrorType],
    });
};

void CHIPTargetNavigatorClusterNavigateTargetResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t status, chip::CharSpan data)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"data" : [[NSString alloc] initWithBytes:data.data() length:data.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPTestClusterClusterTestAddArgumentsResponseCallbackBridge::OnSuccessFn(void * context, uint8_t returnValue)
{
    DispatchSuccess(context, @ {
        @"returnValue" : [NSNumber numberWithUnsignedChar:returnValue],
    });
};

void CHIPTestClusterClusterTestListInt8UReverseResponseCallbackBridge::OnSuccessFn(
    void * context, /* TYPE WARNING: array array defaults to */ uint8_t * arg1)
{
    DispatchSuccess(context,
        @ {
            // arg1 : /* TYPE WARNING: array array defaults to */ uint8_t *
            // Conversion from this type to Objc is not properly implemented yet
        });
};

void CHIPTestClusterClusterTestSpecificResponseCallbackBridge::OnSuccessFn(void * context, uint8_t returnValue)
{
    DispatchSuccess(context, @ {
        @"returnValue" : [NSNumber numberWithUnsignedChar:returnValue],
    });
};
