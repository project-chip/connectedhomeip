/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#import "CHIPCallbackBridge_internal.h"

void CHIPDefaultSuccessCallbackBridge::OnSuccessFn(void * context) { DispatchSuccess(context, nil); };

void CHIPOctetStringAttributeCallbackBridge::OnSuccessFn(void * context, chip::ByteSpan value)
{
    DispatchSuccess(context, @ { @"value" : [NSData dataWithBytes:value.data() length:value.size()] });
};

void CHIPCharStringAttributeCallbackBridge::OnSuccessFn(void * context, chip::CharSpan value)
{
    DispatchSuccess(
        context, @ { @"value" : [[NSString alloc] initWithBytes:value.data() length:value.size() encoding:NSUTF8StringEncoding] });
};

void CHIPBooleanAttributeCallbackBridge::OnSuccessFn(void * context, bool value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithBool:value] });
};

void CHIPInt8uAttributeCallbackBridge::OnSuccessFn(void * context, uint8_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithUnsignedChar:value] });
};

void CHIPInt8sAttributeCallbackBridge::OnSuccessFn(void * context, int8_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithChar:value] });
};

void CHIPInt16uAttributeCallbackBridge::OnSuccessFn(void * context, uint16_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithUnsignedShort:value] });
};

void CHIPInt16sAttributeCallbackBridge::OnSuccessFn(void * context, int16_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithShort:value] });
};

void CHIPInt32uAttributeCallbackBridge::OnSuccessFn(void * context, uint32_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithUnsignedLong:value] });
};

void CHIPInt32sAttributeCallbackBridge::OnSuccessFn(void * context, int32_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithLong:value] });
};

void CHIPInt64uAttributeCallbackBridge::OnSuccessFn(void * context, uint64_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithUnsignedLongLong:value] });
};

void CHIPInt64sAttributeCallbackBridge::OnSuccessFn(void * context, int64_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithLongLong:value] });
};

void CHIPApplicationLauncherApplicationLauncherListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<uint16_t> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:[NSNumber numberWithUnsignedShort:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPAudioOutputAudioOutputListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::AudioOutput::Structs::AudioOutputInfo::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"index" : [NSNumber numberWithUnsignedChar:entry.index],
            @"outputType" : [NSNumber numberWithUnsignedChar:entry.outputType],
            @"name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPBridgedActionsActionListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::BridgedActions::Structs::ActionStruct::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"ActionID" : [NSNumber numberWithUnsignedShort:entry.actionID],
            @"Name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
            @"Type" : [NSNumber numberWithUnsignedChar:entry.type],
            @"EndpointListID" : [NSNumber numberWithUnsignedShort:entry.endpointListID],
            @"SupportedCommands" : [NSNumber numberWithUnsignedShort:entry.supportedCommands],
            @"Status" : [NSNumber numberWithUnsignedChar:entry.status],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPBridgedActionsEndpointListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::BridgedActions::Structs::EndpointListStruct::DecodableType> &
        list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"EndpointListID" : [NSNumber numberWithUnsignedShort:entry.endpointListID],
            @"Name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
            @"Type" : [NSNumber numberWithUnsignedChar:entry.type],
            @"Endpoints" : [NSData dataWithBytes:entry.endpoints.data() length:entry.endpoints.size()],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPContentLauncherAcceptsHeaderListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:[NSData dataWithBytes:entry.data() length:entry.size()]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPContentLauncherSupportedStreamingTypesListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::ContentLauncher::ContentLaunchStreamingType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:[NSNumber numberWithUnsignedChar:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPDescriptorDeviceListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::Descriptor::Structs::DeviceType::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"type" : [NSNumber numberWithUnsignedLong:entry.type],
            @"revision" : [NSNumber numberWithUnsignedShort:entry.revision],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPDescriptorServerListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ClusterId> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:[NSNumber numberWithUnsignedLong:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPDescriptorClientListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ClusterId> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:[NSNumber numberWithUnsignedLong:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPDescriptorPartsListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::EndpointId> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:[NSNumber numberWithUnsignedShort:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPFixedLabelLabelListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::FixedLabel::Structs::LabelStruct::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"label" : [[NSString alloc] initWithBytes:entry.label.data() length:entry.label.size() encoding:NSUTF8StringEncoding],
            @"value" : [[NSString alloc] initWithBytes:entry.value.data() length:entry.value.size() encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPGeneralCommissioningBasicCommissioningInfoListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::GeneralCommissioning::Structs::BasicCommissioningInfoType::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"FailSafeExpiryLengthMs" : [NSNumber numberWithUnsignedLong:entry.failSafeExpiryLengthMs],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::GeneralDiagnostics::Structs::NetworkInterfaceType::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"Name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
            @"FabricConnected" : [NSNumber numberWithBool:entry.fabricConnected],
            @"OffPremiseServicesReachableIPv4" : [NSNumber numberWithBool:entry.offPremiseServicesReachableIPv4],
            @"OffPremiseServicesReachableIPv6" : [NSNumber numberWithBool:entry.offPremiseServicesReachableIPv6],
            @"HardwareAddress" : [NSData dataWithBytes:entry.hardwareAddress.data() length:entry.hardwareAddress.size()],
            @"Type" : [NSNumber numberWithUnsignedChar:entry.type],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPGroupKeyManagementGroupsListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::GroupKeyManagement::Structs::GroupState::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"VendorId" : [NSNumber numberWithUnsignedShort:entry.vendorId],
            @"VendorGroupId" : [NSNumber numberWithUnsignedShort:entry.vendorGroupId],
            @"GroupKeySetIndex" : [NSNumber numberWithUnsignedShort:entry.groupKeySetIndex],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPGroupKeyManagementGroupKeysListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::GroupKeyManagement::Structs::GroupKey::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"VendorId" : [NSNumber numberWithUnsignedShort:entry.vendorId],
            @"GroupKeyIndex" : [NSNumber numberWithUnsignedShort:entry.groupKeyIndex],
            @"GroupKeyRoot" : [NSData dataWithBytes:entry.groupKeyRoot.data() length:entry.groupKeyRoot.size()],
            @"GroupKeyEpochStartTime" : [NSNumber numberWithUnsignedLongLong:entry.groupKeyEpochStartTime],
            @"GroupKeySecurityPolicy" : [NSNumber numberWithUnsignedChar:entry.groupKeySecurityPolicy],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPMediaInputMediaInputListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::MediaInput::Structs::MediaInputInfo::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"index" : [NSNumber numberWithUnsignedChar:entry.index],
            @"inputType" : [NSNumber numberWithUnsignedChar:entry.inputType],
            @"name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
            @"description" : [[NSString alloc] initWithBytes:entry.description.data()
                                                      length:entry.description.size()
                                                    encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPOperationalCredentialsFabricsListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::OperationalCredentials::Structs::FabricDescriptor::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"FabricIndex" : [NSNumber numberWithUnsignedChar:entry.fabricIndex],
            @"RootPublicKey" : [NSData dataWithBytes:entry.rootPublicKey.data() length:entry.rootPublicKey.size()],
            @"VendorId" : [NSNumber numberWithUnsignedShort:entry.vendorId],
            @"FabricId" : [NSNumber numberWithUnsignedLongLong:entry.fabricId],
            @"NodeId" : [NSNumber numberWithUnsignedLongLong:entry.nodeId],
            @"Label" : [[NSString alloc] initWithBytes:entry.label.data() length:entry.label.size() encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPOperationalCredentialsTrustedRootCertificatesListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:[NSData dataWithBytes:entry.data() length:entry.size()]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPPowerSourceActiveBatteryFaultsListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<uint8_t> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:[NSNumber numberWithUnsignedChar:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTvChannelTvChannelListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::TvChannel::Structs::TvChannelInfo::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"majorNumber" : [NSNumber numberWithUnsignedShort:entry.majorNumber],
            @"minorNumber" : [NSNumber numberWithUnsignedShort:entry.minorNumber],
            @"name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
            @"callSign" : [[NSString alloc] initWithBytes:entry.callSign.data()
                                                   length:entry.callSign.size()
                                                 encoding:NSUTF8StringEncoding],
            @"affiliateCallSign" : [[NSString alloc] initWithBytes:entry.affiliateCallSign.data()
                                                            length:entry.affiliateCallSign.size()
                                                          encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTargetNavigatorTargetNavigatorListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::TargetNavigator::Structs::NavigateTargetTargetInfo::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"identifier" : [NSNumber numberWithUnsignedChar:entry.identifier],
            @"name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTestClusterListInt8uListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<uint8_t> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:[NSNumber numberWithUnsignedChar:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTestClusterListOctetStringListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:[NSData dataWithBytes:entry.data() length:entry.size()]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTestClusterListStructOctetStringListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::TestCluster::Structs::TestListStructOctet::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"fabricIndex" : [NSNumber numberWithUnsignedLongLong:entry.fabricIndex],
            @"operationalCert" : [NSData dataWithBytes:entry.operationalCert.data() length:entry.operationalCert.size()],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsNeighborTableListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::ThreadNetworkDiagnostics::Structs::NeighborTable::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"ExtAddress" : [NSNumber numberWithUnsignedLongLong:entry.extAddress],
            @"Age" : [NSNumber numberWithUnsignedLong:entry.age],
            @"Rloc16" : [NSNumber numberWithUnsignedShort:entry.rloc16],
            @"LinkFrameCounter" : [NSNumber numberWithUnsignedLong:entry.linkFrameCounter],
            @"MleFrameCounter" : [NSNumber numberWithUnsignedLong:entry.mleFrameCounter],
            @"LQI" : [NSNumber numberWithUnsignedChar:entry.lqi],
            @"AverageRssi" : [NSNumber numberWithChar:entry.averageRssi],
            @"LastRssi" : [NSNumber numberWithChar:entry.lastRssi],
            @"FrameErrorRate" : [NSNumber numberWithUnsignedChar:entry.frameErrorRate],
            @"MessageErrorRate" : [NSNumber numberWithUnsignedChar:entry.messageErrorRate],
            @"RxOnWhenIdle" : [NSNumber numberWithBool:entry.rxOnWhenIdle],
            @"FullThreadDevice" : [NSNumber numberWithBool:entry.fullThreadDevice],
            @"FullNetworkData" : [NSNumber numberWithBool:entry.fullNetworkData],
            @"IsChild" : [NSNumber numberWithBool:entry.isChild],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsRouteTableListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::ThreadNetworkDiagnostics::Structs::RouteTable::DecodableType> &
        list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"ExtAddress" : [NSNumber numberWithUnsignedLongLong:entry.extAddress],
            @"Rloc16" : [NSNumber numberWithUnsignedShort:entry.rloc16],
            @"RouterId" : [NSNumber numberWithUnsignedChar:entry.routerId],
            @"NextHop" : [NSNumber numberWithUnsignedChar:entry.nextHop],
            @"PathCost" : [NSNumber numberWithUnsignedChar:entry.pathCost],
            @"LQIIn" : [NSNumber numberWithUnsignedChar:entry.LQIIn],
            @"LQIOut" : [NSNumber numberWithUnsignedChar:entry.LQIOut],
            @"Age" : [NSNumber numberWithUnsignedChar:entry.age],
            @"Allocated" : [NSNumber numberWithBool:entry.allocated],
            @"LinkEstablished" : [NSNumber numberWithBool:entry.linkEstablished],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsSecurityPolicyListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::ThreadNetworkDiagnostics::Structs::SecurityPolicy::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"RotationTime" : [NSNumber numberWithUnsignedShort:entry.rotationTime],
            @"Flags" : [NSNumber numberWithUnsignedShort:entry.flags],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsOperationalDatasetComponentsListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::ThreadNetworkDiagnostics::Structs::OperationalDatasetComponents::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:@ {
            @"ActiveTimestampPresent" : [NSNumber numberWithBool:entry.activeTimestampPresent],
            @"PendingTimestampPresent" : [NSNumber numberWithBool:entry.pendingTimestampPresent],
            @"MasterKeyPresent" : [NSNumber numberWithBool:entry.masterKeyPresent],
            @"NetworkNamePresent" : [NSNumber numberWithBool:entry.networkNamePresent],
            @"ExtendedPanIdPresent" : [NSNumber numberWithBool:entry.extendedPanIdPresent],
            @"MeshLocalPrefixPresent" : [NSNumber numberWithBool:entry.meshLocalPrefixPresent],
            @"DelayPresent" : [NSNumber numberWithBool:entry.delayPresent],
            @"PanIdPresent" : [NSNumber numberWithBool:entry.panIdPresent],
            @"ChannelPresent" : [NSNumber numberWithBool:entry.channelPresent],
            @"PskcPresent" : [NSNumber numberWithBool:entry.pskcPresent],
            @"SecurityPolicyPresent" : [NSNumber numberWithBool:entry.securityPolicyPresent],
            @"ChannelMaskPresent" : [NSNumber numberWithBool:entry.channelMaskPresent],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::app::Clusters::ThreadNetworkDiagnostics::NetworkFault> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        [array addObject:[NSNumber numberWithUnsignedChar:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPAccountLoginClusterGetSetupPINResponseCallbackBridge::OnSuccessFn(void * context, chip::CharSpan setupPIN)
{
    DispatchSuccess(context, @ {
        @"setupPIN" : [[NSString alloc] initWithBytes:setupPIN.data() length:setupPIN.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPApplicationLauncherClusterLaunchAppResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status, chip::CharSpan data)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"data" : [[NSString alloc] initWithBytes:data.data() length:data.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPContentLauncherClusterLaunchContentResponseCallbackBridge::OnSuccessFn(
    void * context, chip::CharSpan data, uint8_t contentLaunchStatus)
{
    DispatchSuccess(context, @ {
        @"data" : [[NSString alloc] initWithBytes:data.data() length:data.size() encoding:NSUTF8StringEncoding],
        @"contentLaunchStatus" : [NSNumber numberWithUnsignedChar:contentLaunchStatus],
    });
};

void CHIPContentLauncherClusterLaunchURLResponseCallbackBridge::OnSuccessFn(
    void * context, chip::CharSpan data, uint8_t contentLaunchStatus)
{
    DispatchSuccess(context, @ {
        @"data" : [[NSString alloc] initWithBytes:data.data() length:data.size() encoding:NSUTF8StringEncoding],
        @"contentLaunchStatus" : [NSNumber numberWithUnsignedChar:contentLaunchStatus],
    });
};

void CHIPDiagnosticLogsClusterRetrieveLogsResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t status, chip::ByteSpan content, uint32_t timeStamp, uint32_t timeSinceBoot)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"content" : [NSData dataWithBytes:content.data() length:content.size()],
        @"timeStamp" : [NSNumber numberWithUnsignedLong:timeStamp],
        @"timeSinceBoot" : [NSNumber numberWithUnsignedLong:timeSinceBoot],
    });
};

void CHIPDoorLockClusterClearAllPinsResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterClearAllRfidsResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterClearHolidayScheduleResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterClearPinResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterClearRfidResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterClearWeekdayScheduleResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterClearYeardayScheduleResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterGetHolidayScheduleResponseCallbackBridge::OnSuccessFn(void * context, uint8_t scheduleId, uint8_t status,
    uint32_t localStartTime, uint32_t localEndTime, uint8_t operatingModeDuringHoliday)
{
    DispatchSuccess(context, @ {
        @"scheduleId" : [NSNumber numberWithUnsignedChar:scheduleId],
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"localStartTime" : [NSNumber numberWithUnsignedLong:localStartTime],
        @"localEndTime" : [NSNumber numberWithUnsignedLong:localEndTime],
        @"operatingModeDuringHoliday" : [NSNumber numberWithUnsignedChar:operatingModeDuringHoliday],
    });
};

void CHIPDoorLockClusterGetLogRecordResponseCallbackBridge::OnSuccessFn(void * context, uint16_t logEntryId, uint32_t timestamp,
    uint8_t eventType, uint8_t source, uint8_t eventIdOrAlarmCode, uint16_t userId, chip::ByteSpan pin)
{
    DispatchSuccess(context, @ {
        @"logEntryId" : [NSNumber numberWithUnsignedShort:logEntryId],
        @"timestamp" : [NSNumber numberWithUnsignedLong:timestamp],
        @"eventType" : [NSNumber numberWithUnsignedChar:eventType],
        @"source" : [NSNumber numberWithUnsignedChar:source],
        @"eventIdOrAlarmCode" : [NSNumber numberWithUnsignedChar:eventIdOrAlarmCode],
        @"userId" : [NSNumber numberWithUnsignedShort:userId],
        @"pin" : [NSData dataWithBytes:pin.data() length:pin.size()],
    });
};

void CHIPDoorLockClusterGetPinResponseCallbackBridge::OnSuccessFn(
    void * context, uint16_t userId, uint8_t userStatus, uint8_t userType, chip::ByteSpan pin)
{
    DispatchSuccess(context, @ {
        @"userId" : [NSNumber numberWithUnsignedShort:userId],
        @"userStatus" : [NSNumber numberWithUnsignedChar:userStatus],
        @"userType" : [NSNumber numberWithUnsignedChar:userType],
        @"pin" : [NSData dataWithBytes:pin.data() length:pin.size()],
    });
};

void CHIPDoorLockClusterGetRfidResponseCallbackBridge::OnSuccessFn(
    void * context, uint16_t userId, uint8_t userStatus, uint8_t userType, chip::ByteSpan rfid)
{
    DispatchSuccess(context, @ {
        @"userId" : [NSNumber numberWithUnsignedShort:userId],
        @"userStatus" : [NSNumber numberWithUnsignedChar:userStatus],
        @"userType" : [NSNumber numberWithUnsignedChar:userType],
        @"rfid" : [NSData dataWithBytes:rfid.data() length:rfid.size()],
    });
};

void CHIPDoorLockClusterGetUserTypeResponseCallbackBridge::OnSuccessFn(void * context, uint16_t userId, uint8_t userType)
{
    DispatchSuccess(context, @ {
        @"userId" : [NSNumber numberWithUnsignedShort:userId],
        @"userType" : [NSNumber numberWithUnsignedChar:userType],
    });
};

void CHIPDoorLockClusterGetWeekdayScheduleResponseCallbackBridge::OnSuccessFn(void * context, uint8_t scheduleId, uint16_t userId,
    uint8_t status, uint8_t daysMask, uint8_t startHour, uint8_t startMinute, uint8_t endHour, uint8_t endMinute)
{
    DispatchSuccess(context, @ {
        @"scheduleId" : [NSNumber numberWithUnsignedChar:scheduleId],
        @"userId" : [NSNumber numberWithUnsignedShort:userId],
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"daysMask" : [NSNumber numberWithUnsignedChar:daysMask],
        @"startHour" : [NSNumber numberWithUnsignedChar:startHour],
        @"startMinute" : [NSNumber numberWithUnsignedChar:startMinute],
        @"endHour" : [NSNumber numberWithUnsignedChar:endHour],
        @"endMinute" : [NSNumber numberWithUnsignedChar:endMinute],
    });
};

void CHIPDoorLockClusterGetYeardayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t scheduleId, uint16_t userId, uint8_t status, uint32_t localStartTime, uint32_t localEndTime)
{
    DispatchSuccess(context, @ {
        @"scheduleId" : [NSNumber numberWithUnsignedChar:scheduleId],
        @"userId" : [NSNumber numberWithUnsignedShort:userId],
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"localStartTime" : [NSNumber numberWithUnsignedLong:localStartTime],
        @"localEndTime" : [NSNumber numberWithUnsignedLong:localEndTime],
    });
};

void CHIPDoorLockClusterLockDoorResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterSetHolidayScheduleResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterSetPinResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterSetRfidResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterSetUserTypeResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterSetWeekdayScheduleResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterSetYeardayScheduleResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterUnlockDoorResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPDoorLockClusterUnlockWithTimeoutResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPGeneralCommissioningClusterArmFailSafeResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPGeneralCommissioningClusterCommissioningCompleteResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPGeneralCommissioningClusterSetRegulatoryConfigResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPGroupsClusterAddGroupResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status, uint16_t groupId)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
    });
};

void CHIPGroupsClusterGetGroupMembershipResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t capacity, uint8_t groupCount, /* TYPE WARNING: array array defaults to */ uint8_t * groupList)
{
    DispatchSuccess(context, @ {
        @"capacity" : [NSNumber numberWithUnsignedChar:capacity],
        @"groupCount" : [NSNumber numberWithUnsignedChar:groupCount],
        // groupList : /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Objc is not properly implemented yet
    });
};

void CHIPGroupsClusterRemoveGroupResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status, uint16_t groupId)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
    });
};

void CHIPGroupsClusterViewGroupResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t status, uint16_t groupId, chip::CharSpan groupName)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
        @"groupName" : [[NSString alloc] initWithBytes:groupName.data() length:groupName.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPIdentifyClusterIdentifyQueryResponseCallbackBridge::OnSuccessFn(void * context, uint16_t timeout)
{
    DispatchSuccess(context, @ {
        @"timeout" : [NSNumber numberWithUnsignedShort:timeout],
    });
};

void CHIPKeypadInputClusterSendKeyResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
    });
};

void CHIPMediaPlaybackClusterMediaFastForwardResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaNextResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaPauseResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaPlayResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaPreviousResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaRewindResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaSeekResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaSkipBackwardResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaSkipForwardResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaStartOverResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPMediaPlaybackClusterMediaStopResponseCallbackBridge::OnSuccessFn(void * context, uint8_t mediaPlaybackStatus)
{
    DispatchSuccess(context, @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:mediaPlaybackStatus],
    });
};

void CHIPNetworkCommissioningClusterAddThreadNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPNetworkCommissioningClusterAddWiFiNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPNetworkCommissioningClusterDisableNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPNetworkCommissioningClusterEnableNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPNetworkCommissioningClusterRemoveNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPNetworkCommissioningClusterScanNetworksResponseCallbackBridge::OnSuccessFn(void * context, uint8_t errorCode,
    chip::CharSpan debugText, /* TYPE WARNING: array array defaults to */ uint8_t * wifiScanResults,
    /* TYPE WARNING: array array defaults to */ uint8_t * threadScanResults)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
        // wifiScanResults : /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Objc is not properly implemented yet
        // threadScanResults : /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Objc is not properly implemented yet
    });
};

void CHIPNetworkCommissioningClusterUpdateThreadNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPNetworkCommissioningClusterUpdateWiFiNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t errorCode, chip::CharSpan debugText)
{
    DispatchSuccess(context, @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:debugText.data() length:debugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPOtaSoftwareUpdateProviderClusterApplyUpdateRequestResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t action, uint32_t delayedActionTime)
{
    DispatchSuccess(context, @ {
        @"action" : [NSNumber numberWithUnsignedChar:action],
        @"delayedActionTime" : [NSNumber numberWithUnsignedLong:delayedActionTime],
    });
};

void CHIPOtaSoftwareUpdateProviderClusterQueryImageResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status,
    uint32_t delayedActionTime, chip::CharSpan imageURI, uint32_t softwareVersion, chip::CharSpan softwareVersionString,
    chip::ByteSpan updateToken, bool userConsentNeeded, chip::ByteSpan metadataForRequestor)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"delayedActionTime" : [NSNumber numberWithUnsignedLong:delayedActionTime],
        @"imageURI" : [[NSString alloc] initWithBytes:imageURI.data() length:imageURI.size() encoding:NSUTF8StringEncoding],
        @"softwareVersion" : [NSNumber numberWithUnsignedLong:softwareVersion],
        @"softwareVersionString" : [[NSString alloc] initWithBytes:softwareVersionString.data()
                                                            length:softwareVersionString.size()
                                                          encoding:NSUTF8StringEncoding],
        @"updateToken" : [NSData dataWithBytes:updateToken.data() length:updateToken.size()],
        @"userConsentNeeded" : [NSNumber numberWithBool:userConsentNeeded],
        @"metadataForRequestor" : [NSData dataWithBytes:metadataForRequestor.data() length:metadataForRequestor.size()],
    });
};

void CHIPOperationalCredentialsClusterAttestationResponseCallbackBridge::OnSuccessFn(
    void * context, chip::ByteSpan AttestationElements, chip::ByteSpan Signature)
{
    DispatchSuccess(context, @ {
        @"AttestationElements" : [NSData dataWithBytes:AttestationElements.data() length:AttestationElements.size()],
        @"Signature" : [NSData dataWithBytes:Signature.data() length:Signature.size()],
    });
};

void CHIPOperationalCredentialsClusterCertificateChainResponseCallbackBridge::OnSuccessFn(
    void * context, chip::ByteSpan Certificate)
{
    DispatchSuccess(context, @ {
        @"Certificate" : [NSData dataWithBytes:Certificate.data() length:Certificate.size()],
    });
};

void CHIPOperationalCredentialsClusterNOCResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t StatusCode, uint8_t FabricIndex, chip::CharSpan DebugText)
{
    DispatchSuccess(context, @ {
        @"StatusCode" : [NSNumber numberWithUnsignedChar:StatusCode],
        @"FabricIndex" : [NSNumber numberWithUnsignedChar:FabricIndex],
        @"DebugText" : [[NSString alloc] initWithBytes:DebugText.data() length:DebugText.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPOperationalCredentialsClusterOpCSRResponseCallbackBridge::OnSuccessFn(
    void * context, chip::ByteSpan NOCSRElements, chip::ByteSpan AttestationSignature)
{
    DispatchSuccess(context, @ {
        @"NOCSRElements" : [NSData dataWithBytes:NOCSRElements.data() length:NOCSRElements.size()],
        @"AttestationSignature" : [NSData dataWithBytes:AttestationSignature.data() length:AttestationSignature.size()],
    });
};

void CHIPScenesClusterAddSceneResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status, uint16_t groupId, uint8_t sceneId)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
        @"sceneId" : [NSNumber numberWithUnsignedChar:sceneId],
    });
};

void CHIPScenesClusterGetSceneMembershipResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status, uint8_t capacity,
    uint16_t groupId, uint8_t sceneCount, /* TYPE WARNING: array array defaults to */ uint8_t * sceneList)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"capacity" : [NSNumber numberWithUnsignedChar:capacity],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
        @"sceneCount" : [NSNumber numberWithUnsignedChar:sceneCount],
        // sceneList : /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Objc is not properly implemented yet
    });
};

void CHIPScenesClusterRemoveAllScenesResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status, uint16_t groupId)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
    });
};

void CHIPScenesClusterRemoveSceneResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t status, uint16_t groupId, uint8_t sceneId)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
        @"sceneId" : [NSNumber numberWithUnsignedChar:sceneId],
    });
};

void CHIPScenesClusterStoreSceneResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t status, uint16_t groupId, uint8_t sceneId)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
        @"sceneId" : [NSNumber numberWithUnsignedChar:sceneId],
    });
};

void CHIPScenesClusterViewSceneResponseCallbackBridge::OnSuccessFn(void * context, uint8_t status, uint16_t groupId,
    uint8_t sceneId, uint16_t transitionTime, chip::CharSpan sceneName,
    /* TYPE WARNING: array array defaults to */ uint8_t * extensionFieldSets)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"groupId" : [NSNumber numberWithUnsignedShort:groupId],
        @"sceneId" : [NSNumber numberWithUnsignedChar:sceneId],
        @"transitionTime" : [NSNumber numberWithUnsignedShort:transitionTime],
        @"sceneName" : [[NSString alloc] initWithBytes:sceneName.data() length:sceneName.size() encoding:NSUTF8StringEncoding],
        // extensionFieldSets : /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Objc is not properly implemented yet
    });
};

void CHIPTvChannelClusterChangeChannelResponseCallbackBridge::OnSuccessFn(
    void * context, /* TYPE WARNING: array array defaults to */ uint8_t * ChannelMatch, uint8_t ErrorType)
{
    DispatchSuccess(context, @ {
        // ChannelMatch : /* TYPE WARNING: array array defaults to */ uint8_t *
        // Conversion from this type to Objc is not properly implemented yet
        @"ErrorType" : [NSNumber numberWithUnsignedChar:ErrorType],
    });
};

void CHIPTargetNavigatorClusterNavigateTargetResponseCallbackBridge::OnSuccessFn(
    void * context, uint8_t status, chip::CharSpan data)
{
    DispatchSuccess(context, @ {
        @"status" : [NSNumber numberWithUnsignedChar:status],
        @"data" : [[NSString alloc] initWithBytes:data.data() length:data.size() encoding:NSUTF8StringEncoding],
    });
};

void CHIPTestClusterClusterTestAddArgumentsResponseCallbackBridge::OnSuccessFn(void * context, uint8_t returnValue)
{
    DispatchSuccess(context, @ {
        @"returnValue" : [NSNumber numberWithUnsignedChar:returnValue],
    });
};

void CHIPTestClusterClusterTestEnumsResponseCallbackBridge::OnSuccessFn(void * context, chip::VendorId arg1, uint8_t arg2)
{
    DispatchSuccess(context, @ {
        @"arg1" : [NSNumber numberWithUnsignedShort:arg1],
        @"arg2" : [NSNumber numberWithUnsignedChar:arg2],
    });
};

void CHIPTestClusterClusterTestListInt8UReverseResponseCallbackBridge::OnSuccessFn(
    void * context, /* TYPE WARNING: array array defaults to */ uint8_t * arg1)
{
    DispatchSuccess(context,
        @ {
            // arg1 : /* TYPE WARNING: array array defaults to */ uint8_t *
            // Conversion from this type to Objc is not properly implemented yet
        });
};

void CHIPTestClusterClusterTestNullableOptionalResponseCallbackBridge::OnSuccessFn(
    void * context, bool wasPresent, bool wasNull, uint8_t value, uint8_t originalValue)
{
    DispatchSuccess(context, @ {
        @"wasPresent" : [NSNumber numberWithBool:wasPresent],
        @"wasNull" : [NSNumber numberWithBool:wasNull],
        @"value" : [NSNumber numberWithUnsignedChar:value],
        @"originalValue" : [NSNumber numberWithUnsignedChar:originalValue],
    });
};

void CHIPTestClusterClusterTestSpecificResponseCallbackBridge::OnSuccessFn(void * context, uint8_t returnValue)
{
    DispatchSuccess(context, @ {
        @"returnValue" : [NSNumber numberWithUnsignedChar:returnValue],
    });
};
