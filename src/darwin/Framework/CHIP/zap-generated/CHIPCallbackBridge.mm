/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#import "CHIPCallbackBridge_internal.h"
#import "CHIPCommandPayloadsObjc.h"
#import "CHIPStructsObjc.h"

#include <lib/support/TypeTraits.h>

void CHIPDefaultSuccessCallbackBridge::OnSuccessFn(void * context) { DispatchSuccess(context, nil); };

void CHIPCommandSuccessCallbackBridge::OnSuccessFn(void * context, const chip::app::DataModel::NullObjectType &)
{
    DispatchSuccess(context, nil);
};

void CHIPOctetStringAttributeCallbackBridge::OnSuccessFn(void * context, chip::ByteSpan value)
{
    NSData * _Nonnull objCValue;
    objCValue = [NSData dataWithBytes:value.data() length:value.size()];
    DispatchSuccess(context, objCValue);
};

void CHIPNullableOctetStringAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::Nullable<chip::ByteSpan> & value)
{
    NSData * _Nullable objCValue;
    if (value.IsNull()) {
        objCValue = nil;
    } else {
        objCValue = [NSData dataWithBytes:value.Value().data() length:value.Value().size()];
    }
    DispatchSuccess(context, objCValue);
};

void CHIPCharStringAttributeCallbackBridge::OnSuccessFn(void * context, chip::CharSpan value)
{
    NSString * _Nonnull objCValue;
    objCValue = [[NSString alloc] initWithBytes:value.data() length:value.size() encoding:NSUTF8StringEncoding];
    DispatchSuccess(context, objCValue);
};

void CHIPNullableCharStringAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::Nullable<chip::CharSpan> & value)
{
    NSString * _Nullable objCValue;
    if (value.IsNull()) {
        objCValue = nil;
    } else {
        objCValue = [[NSString alloc] initWithBytes:value.Value().data() length:value.Value().size() encoding:NSUTF8StringEncoding];
    }
    DispatchSuccess(context, objCValue);
};

void CHIPBooleanAttributeCallbackBridge::OnSuccessFn(void * context, bool value)
{
    NSNumber * _Nonnull objCValue;
    objCValue = [NSNumber numberWithBool:value];
    DispatchSuccess(context, objCValue);
};

void CHIPNullableBooleanAttributeCallbackBridge::OnSuccessFn(void * context, const chip::app::DataModel::Nullable<bool> & value)
{
    NSNumber * _Nullable objCValue;
    if (value.IsNull()) {
        objCValue = nil;
    } else {
        objCValue = [NSNumber numberWithBool:value.Value()];
    }
    DispatchSuccess(context, objCValue);
};

void CHIPInt8uAttributeCallbackBridge::OnSuccessFn(void * context, uint8_t value)
{
    NSNumber * _Nonnull objCValue;
    objCValue = [NSNumber numberWithUnsignedChar:value];
    DispatchSuccess(context, objCValue);
};

void CHIPNullableInt8uAttributeCallbackBridge::OnSuccessFn(void * context, const chip::app::DataModel::Nullable<uint8_t> & value)
{
    NSNumber * _Nullable objCValue;
    if (value.IsNull()) {
        objCValue = nil;
    } else {
        objCValue = [NSNumber numberWithUnsignedChar:value.Value()];
    }
    DispatchSuccess(context, objCValue);
};

void CHIPInt8sAttributeCallbackBridge::OnSuccessFn(void * context, int8_t value)
{
    NSNumber * _Nonnull objCValue;
    objCValue = [NSNumber numberWithChar:value];
    DispatchSuccess(context, objCValue);
};

void CHIPNullableInt8sAttributeCallbackBridge::OnSuccessFn(void * context, const chip::app::DataModel::Nullable<int8_t> & value)
{
    NSNumber * _Nullable objCValue;
    if (value.IsNull()) {
        objCValue = nil;
    } else {
        objCValue = [NSNumber numberWithChar:value.Value()];
    }
    DispatchSuccess(context, objCValue);
};

void CHIPInt16uAttributeCallbackBridge::OnSuccessFn(void * context, uint16_t value)
{
    NSNumber * _Nonnull objCValue;
    objCValue = [NSNumber numberWithUnsignedShort:value];
    DispatchSuccess(context, objCValue);
};

void CHIPNullableInt16uAttributeCallbackBridge::OnSuccessFn(void * context, const chip::app::DataModel::Nullable<uint16_t> & value)
{
    NSNumber * _Nullable objCValue;
    if (value.IsNull()) {
        objCValue = nil;
    } else {
        objCValue = [NSNumber numberWithUnsignedShort:value.Value()];
    }
    DispatchSuccess(context, objCValue);
};

void CHIPInt16sAttributeCallbackBridge::OnSuccessFn(void * context, int16_t value)
{
    NSNumber * _Nonnull objCValue;
    objCValue = [NSNumber numberWithShort:value];
    DispatchSuccess(context, objCValue);
};

void CHIPNullableInt16sAttributeCallbackBridge::OnSuccessFn(void * context, const chip::app::DataModel::Nullable<int16_t> & value)
{
    NSNumber * _Nullable objCValue;
    if (value.IsNull()) {
        objCValue = nil;
    } else {
        objCValue = [NSNumber numberWithShort:value.Value()];
    }
    DispatchSuccess(context, objCValue);
};

void CHIPInt32uAttributeCallbackBridge::OnSuccessFn(void * context, uint32_t value)
{
    NSNumber * _Nonnull objCValue;
    objCValue = [NSNumber numberWithUnsignedInt:value];
    DispatchSuccess(context, objCValue);
};

void CHIPNullableInt32uAttributeCallbackBridge::OnSuccessFn(void * context, const chip::app::DataModel::Nullable<uint32_t> & value)
{
    NSNumber * _Nullable objCValue;
    if (value.IsNull()) {
        objCValue = nil;
    } else {
        objCValue = [NSNumber numberWithUnsignedInt:value.Value()];
    }
    DispatchSuccess(context, objCValue);
};

void CHIPInt32sAttributeCallbackBridge::OnSuccessFn(void * context, int32_t value)
{
    NSNumber * _Nonnull objCValue;
    objCValue = [NSNumber numberWithInt:value];
    DispatchSuccess(context, objCValue);
};

void CHIPNullableInt32sAttributeCallbackBridge::OnSuccessFn(void * context, const chip::app::DataModel::Nullable<int32_t> & value)
{
    NSNumber * _Nullable objCValue;
    if (value.IsNull()) {
        objCValue = nil;
    } else {
        objCValue = [NSNumber numberWithInt:value.Value()];
    }
    DispatchSuccess(context, objCValue);
};

void CHIPInt64uAttributeCallbackBridge::OnSuccessFn(void * context, uint64_t value)
{
    NSNumber * _Nonnull objCValue;
    objCValue = [NSNumber numberWithUnsignedLongLong:value];
    DispatchSuccess(context, objCValue);
};

void CHIPNullableInt64uAttributeCallbackBridge::OnSuccessFn(void * context, const chip::app::DataModel::Nullable<uint64_t> & value)
{
    NSNumber * _Nullable objCValue;
    if (value.IsNull()) {
        objCValue = nil;
    } else {
        objCValue = [NSNumber numberWithUnsignedLongLong:value.Value()];
    }
    DispatchSuccess(context, objCValue);
};

void CHIPInt64sAttributeCallbackBridge::OnSuccessFn(void * context, int64_t value)
{
    NSNumber * _Nonnull objCValue;
    objCValue = [NSNumber numberWithLongLong:value];
    DispatchSuccess(context, objCValue);
};

void CHIPNullableInt64sAttributeCallbackBridge::OnSuccessFn(void * context, const chip::app::DataModel::Nullable<int64_t> & value)
{
    NSNumber * _Nullable objCValue;
    if (value.IsNull()) {
        objCValue = nil;
    } else {
        objCValue = [NSNumber numberWithLongLong:value.Value()];
    }
    DispatchSuccess(context, objCValue);
};

void CHIPFloatAttributeCallbackBridge::OnSuccessFn(void * context, float value)
{
    NSNumber * _Nonnull objCValue;
    objCValue = [NSNumber numberWithFloat:value];
    DispatchSuccess(context, objCValue);
};

void CHIPNullableFloatAttributeCallbackBridge::OnSuccessFn(void * context, const chip::app::DataModel::Nullable<float> & value)
{
    NSNumber * _Nullable objCValue;
    if (value.IsNull()) {
        objCValue = nil;
    } else {
        objCValue = [NSNumber numberWithFloat:value.Value()];
    }
    DispatchSuccess(context, objCValue);
};

void CHIPDoubleAttributeCallbackBridge::OnSuccessFn(void * context, double value)
{
    NSNumber * _Nonnull objCValue;
    objCValue = [NSNumber numberWithDouble:value];
    DispatchSuccess(context, objCValue);
};

void CHIPNullableDoubleAttributeCallbackBridge::OnSuccessFn(void * context, const chip::app::DataModel::Nullable<double> & value)
{
    NSNumber * _Nullable objCValue;
    if (value.IsNull()) {
        objCValue = nil;
    } else {
        objCValue = [NSNumber numberWithDouble:value.Value()];
    }
    DispatchSuccess(context, objCValue);
};

void CHIPVendorIdAttributeCallbackBridge::OnSuccessFn(void * context, chip::VendorId value)
{
    NSNumber * _Nonnull objCValue;
    objCValue = [NSNumber numberWithUnsignedShort:chip::to_underlying(value)];
    DispatchSuccess(context, objCValue);
};

void CHIPNullableVendorIdAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::Nullable<chip::VendorId> & value)
{
    NSNumber * _Nullable objCValue;
    if (value.IsNull()) {
        objCValue = nil;
    } else {
        objCValue = [NSNumber numberWithUnsignedShort:chip::to_underlying(value.Value())];
    }
    DispatchSuccess(context, objCValue);
};

void CHIPApplicationLauncherApplicationLauncherListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<uint16_t> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        NSNumber * newElement_0;
        newElement_0 = [NSNumber numberWithUnsignedShort:entry_0];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPAudioOutputAudioOutputListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::AudioOutput::Structs::AudioOutputInfo::DecodableType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPAudioOutputClusterAudioOutputInfo * newElement_0;
        newElement_0 = [CHIPAudioOutputClusterAudioOutputInfo new];
        newElement_0.index = [NSNumber numberWithUnsignedChar:entry_0.index];
        newElement_0.outputType = [NSNumber numberWithUnsignedChar:chip::to_underlying(entry_0.outputType)];
        newElement_0.name = [[NSString alloc] initWithBytes:entry_0.name.data()
                                                     length:entry_0.name.size()
                                                   encoding:NSUTF8StringEncoding];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPBridgedActionsActionListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::BridgedActions::Structs::ActionStruct::DecodableType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPBridgedActionsClusterActionStruct * newElement_0;
        newElement_0 = [CHIPBridgedActionsClusterActionStruct new];
        newElement_0.actionID = [NSNumber numberWithUnsignedShort:entry_0.actionID];
        newElement_0.name = [[NSString alloc] initWithBytes:entry_0.name.data()
                                                     length:entry_0.name.size()
                                                   encoding:NSUTF8StringEncoding];
        newElement_0.type = [NSNumber numberWithUnsignedChar:chip::to_underlying(entry_0.type)];
        newElement_0.endpointListID = [NSNumber numberWithUnsignedShort:entry_0.endpointListID];
        newElement_0.supportedCommands = [NSNumber numberWithUnsignedShort:entry_0.supportedCommands];
        newElement_0.status = [NSNumber numberWithUnsignedChar:chip::to_underlying(entry_0.status)];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPBridgedActionsEndpointListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::BridgedActions::Structs::EndpointListStruct::DecodableType> &
        value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPBridgedActionsClusterEndpointListStruct * newElement_0;
        newElement_0 = [CHIPBridgedActionsClusterEndpointListStruct new];
        newElement_0.endpointListID = [NSNumber numberWithUnsignedShort:entry_0.endpointListID];
        newElement_0.name = [[NSString alloc] initWithBytes:entry_0.name.data()
                                                     length:entry_0.name.size()
                                                   encoding:NSUTF8StringEncoding];
        newElement_0.type = [NSNumber numberWithUnsignedChar:chip::to_underlying(entry_0.type)];
        auto * array_NaN = [NSMutableArray new];
        auto iter_NaN = entry_0.endpoints.begin();
        while (iter_NaN.Next()) {
            auto & entry_NaN = iter_NaN.GetValue();
            NSNumber * newElement_NaN;
            newElement_NaN = [NSNumber numberWithUnsignedShort:entry_NaN];
            [array_NaN addObject:newElement_NaN];
        }
        if (iter_NaN.GetStatus() != CHIP_NO_ERROR) {
        }
        newElement_0.endpoints = array_NaN;
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPContentLauncherAcceptsHeaderListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        NSData * newElement_0;
        newElement_0 = [NSData dataWithBytes:entry_0.data() length:entry_0.size()];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPContentLauncherSupportedStreamingTypesListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::ContentLauncher::ContentLaunchStreamingType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        NSNumber * newElement_0;
        newElement_0 = [NSNumber numberWithUnsignedChar:chip::to_underlying(entry_0)];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPDescriptorDeviceListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::Descriptor::Structs::DeviceType::DecodableType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPDescriptorClusterDeviceType * newElement_0;
        newElement_0 = [CHIPDescriptorClusterDeviceType new];
        newElement_0.type = [NSNumber numberWithUnsignedInt:entry_0.type];
        newElement_0.revision = [NSNumber numberWithUnsignedShort:entry_0.revision];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPDescriptorServerListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ClusterId> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        NSNumber * newElement_0;
        newElement_0 = [NSNumber numberWithUnsignedInt:entry_0];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPDescriptorClientListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ClusterId> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        NSNumber * newElement_0;
        newElement_0 = [NSNumber numberWithUnsignedInt:entry_0];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPDescriptorPartsListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::EndpointId> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        NSNumber * newElement_0;
        newElement_0 = [NSNumber numberWithUnsignedShort:entry_0];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPFixedLabelLabelListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::FixedLabel::Structs::LabelStruct::DecodableType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPFixedLabelClusterLabelStruct * newElement_0;
        newElement_0 = [CHIPFixedLabelClusterLabelStruct new];
        newElement_0.label = [[NSString alloc] initWithBytes:entry_0.label.data()
                                                      length:entry_0.label.size()
                                                    encoding:NSUTF8StringEncoding];
        newElement_0.label = [[NSString alloc] initWithBytes:entry_0.label.data()
                                                      length:entry_0.label.size()
                                                    encoding:NSUTF8StringEncoding];
        newElement_0.value = [[NSString alloc] initWithBytes:entry_0.value.data()
                                                      length:entry_0.value.size()
                                                    encoding:NSUTF8StringEncoding];
        newElement_0.value = [[NSString alloc] initWithBytes:entry_0.value.data()
                                                      length:entry_0.value.size()
                                                    encoding:NSUTF8StringEncoding];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPGeneralCommissioningBasicCommissioningInfoListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::GeneralCommissioning::Structs::BasicCommissioningInfoType::DecodableType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPGeneralCommissioningClusterBasicCommissioningInfoType * newElement_0;
        newElement_0 = [CHIPGeneralCommissioningClusterBasicCommissioningInfoType new];
        newElement_0.failSafeExpiryLengthMs = [NSNumber numberWithUnsignedInt:entry_0.failSafeExpiryLengthMs];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::GeneralDiagnostics::Structs::NetworkInterfaceType::DecodableType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPGeneralDiagnosticsClusterNetworkInterfaceType * newElement_0;
        newElement_0 = [CHIPGeneralDiagnosticsClusterNetworkInterfaceType new];
        newElement_0.name = [[NSString alloc] initWithBytes:entry_0.name.data()
                                                     length:entry_0.name.size()
                                                   encoding:NSUTF8StringEncoding];
        newElement_0.fabricConnected = [NSNumber numberWithBool:entry_0.fabricConnected];
        newElement_0.offPremiseServicesReachableIPv4 = [NSNumber numberWithBool:entry_0.offPremiseServicesReachableIPv4];
        newElement_0.offPremiseServicesReachableIPv6 = [NSNumber numberWithBool:entry_0.offPremiseServicesReachableIPv6];
        newElement_0.hardwareAddress = [NSData dataWithBytes:entry_0.hardwareAddress.data() length:entry_0.hardwareAddress.size()];
        newElement_0.type = [NSNumber numberWithUnsignedChar:chip::to_underlying(entry_0.type)];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPGeneralDiagnosticsActiveHardwareFaultsListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<uint8_t> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        NSNumber * newElement_0;
        newElement_0 = [NSNumber numberWithUnsignedChar:entry_0];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPGeneralDiagnosticsActiveRadioFaultsListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<uint8_t> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        NSNumber * newElement_0;
        newElement_0 = [NSNumber numberWithUnsignedChar:entry_0];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPGeneralDiagnosticsActiveNetworkFaultsListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<uint8_t> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        NSNumber * newElement_0;
        newElement_0 = [NSNumber numberWithUnsignedChar:entry_0];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPGroupKeyManagementGroupsListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::GroupKeyManagement::Structs::GroupState::DecodableType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPGroupKeyManagementClusterGroupState * newElement_0;
        newElement_0 = [CHIPGroupKeyManagementClusterGroupState new];
        newElement_0.vendorId = [NSNumber numberWithUnsignedShort:entry_0.vendorId];
        newElement_0.vendorGroupId = [NSNumber numberWithUnsignedShort:entry_0.vendorGroupId];
        newElement_0.groupKeySetIndex = [NSNumber numberWithUnsignedShort:entry_0.groupKeySetIndex];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPGroupKeyManagementGroupKeysListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::GroupKeyManagement::Structs::GroupKey::DecodableType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPGroupKeyManagementClusterGroupKey * newElement_0;
        newElement_0 = [CHIPGroupKeyManagementClusterGroupKey new];
        newElement_0.vendorId = [NSNumber numberWithUnsignedShort:entry_0.vendorId];
        newElement_0.groupKeyIndex = [NSNumber numberWithUnsignedShort:entry_0.groupKeyIndex];
        newElement_0.groupKeyRoot = [NSData dataWithBytes:entry_0.groupKeyRoot.data() length:entry_0.groupKeyRoot.size()];
        newElement_0.groupKeyEpochStartTime = [NSNumber numberWithUnsignedLongLong:entry_0.groupKeyEpochStartTime];
        newElement_0.groupKeySecurityPolicy = [NSNumber numberWithUnsignedChar:chip::to_underlying(entry_0.groupKeySecurityPolicy)];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPMediaInputMediaInputListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::MediaInput::Structs::MediaInputInfo::DecodableType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPMediaInputClusterMediaInputInfo * newElement_0;
        newElement_0 = [CHIPMediaInputClusterMediaInputInfo new];
        newElement_0.index = [NSNumber numberWithUnsignedChar:entry_0.index];
        newElement_0.inputType = [NSNumber numberWithUnsignedChar:chip::to_underlying(entry_0.inputType)];
        newElement_0.name = [[NSString alloc] initWithBytes:entry_0.name.data()
                                                     length:entry_0.name.size()
                                                   encoding:NSUTF8StringEncoding];
        newElement_0.descriptionString = [[NSString alloc] initWithBytes:entry_0.description.data()
                                                                  length:entry_0.description.size()
                                                                encoding:NSUTF8StringEncoding];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPModeSelectSupportedModesListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::ModeSelect::Structs::ModeOptionStruct::DecodableType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPModeSelectClusterModeOptionStruct * newElement_0;
        newElement_0 = [CHIPModeSelectClusterModeOptionStruct new];
        newElement_0.label = [[NSString alloc] initWithBytes:entry_0.label.data()
                                                      length:entry_0.label.size()
                                                    encoding:NSUTF8StringEncoding];
        newElement_0.mode = [NSNumber numberWithUnsignedChar:entry_0.mode];
        newElement_0.semanticTag = [NSNumber numberWithUnsignedInt:entry_0.semanticTag];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPOperationalCredentialsFabricsListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::OperationalCredentials::Structs::FabricDescriptor::DecodableType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPOperationalCredentialsClusterFabricDescriptor * newElement_0;
        newElement_0 = [CHIPOperationalCredentialsClusterFabricDescriptor new];
        newElement_0.fabricIndex = [NSNumber numberWithUnsignedChar:entry_0.fabricIndex];
        newElement_0.rootPublicKey = [NSData dataWithBytes:entry_0.rootPublicKey.data() length:entry_0.rootPublicKey.size()];
        newElement_0.vendorId = [NSNumber numberWithUnsignedShort:entry_0.vendorId];
        newElement_0.fabricId = [NSNumber numberWithUnsignedLongLong:entry_0.fabricId];
        newElement_0.nodeId = [NSNumber numberWithUnsignedLongLong:entry_0.nodeId];
        newElement_0.label = [[NSString alloc] initWithBytes:entry_0.label.data()
                                                      length:entry_0.label.size()
                                                    encoding:NSUTF8StringEncoding];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPOperationalCredentialsTrustedRootCertificatesListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        NSData * newElement_0;
        newElement_0 = [NSData dataWithBytes:entry_0.data() length:entry_0.size()];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPPowerSourceActiveBatteryFaultsListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<uint8_t> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        NSNumber * newElement_0;
        newElement_0 = [NSNumber numberWithUnsignedChar:entry_0];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPSoftwareDiagnosticsThreadMetricsListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::SoftwareDiagnostics::Structs::ThreadMetrics::DecodableType> &
        value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPSoftwareDiagnosticsClusterThreadMetrics * newElement_0;
        newElement_0 = [CHIPSoftwareDiagnosticsClusterThreadMetrics new];
        newElement_0.id = [NSNumber numberWithUnsignedLongLong:entry_0.id];
        newElement_0.name = [[NSString alloc] initWithBytes:entry_0.name.data()
                                                     length:entry_0.name.size()
                                                   encoding:NSUTF8StringEncoding];
        newElement_0.stackFreeCurrent = [NSNumber numberWithUnsignedInt:entry_0.stackFreeCurrent];
        newElement_0.stackFreeMinimum = [NSNumber numberWithUnsignedInt:entry_0.stackFreeMinimum];
        newElement_0.stackSize = [NSNumber numberWithUnsignedInt:entry_0.stackSize];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPTvChannelTvChannelListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::TvChannel::Structs::TvChannelInfo::DecodableType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPTvChannelClusterTvChannelInfo * newElement_0;
        newElement_0 = [CHIPTvChannelClusterTvChannelInfo new];
        newElement_0.majorNumber = [NSNumber numberWithUnsignedShort:entry_0.majorNumber];
        newElement_0.minorNumber = [NSNumber numberWithUnsignedShort:entry_0.minorNumber];
        newElement_0.name = [[NSString alloc] initWithBytes:entry_0.name.data()
                                                     length:entry_0.name.size()
                                                   encoding:NSUTF8StringEncoding];
        newElement_0.callSign = [[NSString alloc] initWithBytes:entry_0.callSign.data()
                                                         length:entry_0.callSign.size()
                                                       encoding:NSUTF8StringEncoding];
        newElement_0.affiliateCallSign = [[NSString alloc] initWithBytes:entry_0.affiliateCallSign.data()
                                                                  length:entry_0.affiliateCallSign.size()
                                                                encoding:NSUTF8StringEncoding];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPTargetNavigatorTargetNavigatorListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::TargetNavigator::Structs::NavigateTargetTargetInfo::DecodableType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPTargetNavigatorClusterNavigateTargetTargetInfo * newElement_0;
        newElement_0 = [CHIPTargetNavigatorClusterNavigateTargetTargetInfo new];
        newElement_0.identifier = [NSNumber numberWithUnsignedChar:entry_0.identifier];
        newElement_0.name = [[NSString alloc] initWithBytes:entry_0.name.data()
                                                     length:entry_0.name.size()
                                                   encoding:NSUTF8StringEncoding];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPTestClusterListInt8uListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<uint8_t> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        NSNumber * newElement_0;
        newElement_0 = [NSNumber numberWithUnsignedChar:entry_0];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPTestClusterListOctetStringListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        NSData * newElement_0;
        newElement_0 = [NSData dataWithBytes:entry_0.data() length:entry_0.size()];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPTestClusterListStructOctetStringListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::TestCluster::Structs::TestListStructOctet::DecodableType> &
        value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPTestClusterClusterTestListStructOctet * newElement_0;
        newElement_0 = [CHIPTestClusterClusterTestListStructOctet new];
        newElement_0.fabricIndex = [NSNumber numberWithUnsignedLongLong:entry_0.fabricIndex];
        newElement_0.operationalCert = [NSData dataWithBytes:entry_0.operationalCert.data() length:entry_0.operationalCert.size()];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPTestClusterListNullablesAndOptionalsStructListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::TestCluster::Structs::NullablesAndOptionalsStruct::DecodableType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPTestClusterClusterNullablesAndOptionalsStruct * newElement_0;
        newElement_0 = [CHIPTestClusterClusterNullablesAndOptionalsStruct new];
        if (entry_0.nullableInt.IsNull()) {
            newElement_0.nullableInt = nil;
        } else {
            newElement_0.nullableInt = [NSNumber numberWithUnsignedShort:entry_0.nullableInt.Value()];
        }
        if (entry_0.optionalInt.HasValue()) {
            newElement_0.optionalInt = [NSNumber numberWithUnsignedShort:entry_0.optionalInt.Value()];
        } else {
            newElement_0.optionalInt = nil;
        }
        if (entry_0.nullableOptionalInt.HasValue()) {
            if (entry_0.nullableOptionalInt.Value().IsNull()) {
                newElement_0.nullableOptionalInt = nil;
            } else {
                newElement_0.nullableOptionalInt = [NSNumber numberWithUnsignedShort:entry_0.nullableOptionalInt.Value().Value()];
            }
        } else {
            newElement_0.nullableOptionalInt = nil;
        }
        if (entry_0.nullableString.IsNull()) {
            newElement_0.nullableString = nil;
        } else {
            newElement_0.nullableString = [[NSString alloc] initWithBytes:entry_0.nullableString.Value().data()
                                                                   length:entry_0.nullableString.Value().size()
                                                                 encoding:NSUTF8StringEncoding];
        }
        if (entry_0.optionalString.HasValue()) {
            newElement_0.optionalString = [[NSString alloc] initWithBytes:entry_0.optionalString.Value().data()
                                                                   length:entry_0.optionalString.Value().size()
                                                                 encoding:NSUTF8StringEncoding];
        } else {
            newElement_0.optionalString = nil;
        }
        if (entry_0.nullableOptionalString.HasValue()) {
            if (entry_0.nullableOptionalString.Value().IsNull()) {
                newElement_0.nullableOptionalString = nil;
            } else {
                newElement_0.nullableOptionalString =
                    [[NSString alloc] initWithBytes:entry_0.nullableOptionalString.Value().Value().data()
                                             length:entry_0.nullableOptionalString.Value().Value().size()
                                           encoding:NSUTF8StringEncoding];
            }
        } else {
            newElement_0.nullableOptionalString = nil;
        }
        if (entry_0.nullableStruct.IsNull()) {
            newElement_0.nullableStruct = nil;
        } else {
            newElement_0.nullableStruct = [CHIPTestClusterClusterSimpleStruct new];
            newElement_0.nullableStruct.a = [NSNumber numberWithUnsignedChar:entry_0.nullableStruct.Value().a];
            newElement_0.nullableStruct.b = [NSNumber numberWithBool:entry_0.nullableStruct.Value().b];
            newElement_0.nullableStruct.c = [NSNumber numberWithUnsignedChar:chip::to_underlying(entry_0.nullableStruct.Value().c)];
            newElement_0.nullableStruct.d = [NSData dataWithBytes:entry_0.nullableStruct.Value().d.data()
                                                           length:entry_0.nullableStruct.Value().d.size()];
            newElement_0.nullableStruct.e = [[NSString alloc] initWithBytes:entry_0.nullableStruct.Value().e.data()
                                                                     length:entry_0.nullableStruct.Value().e.size()
                                                                   encoding:NSUTF8StringEncoding];
            newElement_0.nullableStruct.f = [NSNumber numberWithUnsignedChar:entry_0.nullableStruct.Value().f.Raw()];
            newElement_0.nullableStruct.g = [NSNumber numberWithFloat:entry_0.nullableStruct.Value().g];
            newElement_0.nullableStruct.h = [NSNumber numberWithDouble:entry_0.nullableStruct.Value().h];
        }
        if (entry_0.optionalStruct.HasValue()) {
            newElement_0.optionalStruct = [CHIPTestClusterClusterSimpleStruct new];
            newElement_0.optionalStruct.a = [NSNumber numberWithUnsignedChar:entry_0.optionalStruct.Value().a];
            newElement_0.optionalStruct.b = [NSNumber numberWithBool:entry_0.optionalStruct.Value().b];
            newElement_0.optionalStruct.c = [NSNumber numberWithUnsignedChar:chip::to_underlying(entry_0.optionalStruct.Value().c)];
            newElement_0.optionalStruct.d = [NSData dataWithBytes:entry_0.optionalStruct.Value().d.data()
                                                           length:entry_0.optionalStruct.Value().d.size()];
            newElement_0.optionalStruct.e = [[NSString alloc] initWithBytes:entry_0.optionalStruct.Value().e.data()
                                                                     length:entry_0.optionalStruct.Value().e.size()
                                                                   encoding:NSUTF8StringEncoding];
            newElement_0.optionalStruct.f = [NSNumber numberWithUnsignedChar:entry_0.optionalStruct.Value().f.Raw()];
            newElement_0.optionalStruct.g = [NSNumber numberWithFloat:entry_0.optionalStruct.Value().g];
            newElement_0.optionalStruct.h = [NSNumber numberWithDouble:entry_0.optionalStruct.Value().h];
        } else {
            newElement_0.optionalStruct = nil;
        }
        if (entry_0.nullableOptionalStruct.HasValue()) {
            if (entry_0.nullableOptionalStruct.Value().IsNull()) {
                newElement_0.nullableOptionalStruct = nil;
            } else {
                newElement_0.nullableOptionalStruct = [CHIPTestClusterClusterSimpleStruct new];
                newElement_0.nullableOptionalStruct.a =
                    [NSNumber numberWithUnsignedChar:entry_0.nullableOptionalStruct.Value().Value().a];
                newElement_0.nullableOptionalStruct.b = [NSNumber numberWithBool:entry_0.nullableOptionalStruct.Value().Value().b];
                newElement_0.nullableOptionalStruct.c =
                    [NSNumber numberWithUnsignedChar:chip::to_underlying(entry_0.nullableOptionalStruct.Value().Value().c)];
                newElement_0.nullableOptionalStruct.d =
                    [NSData dataWithBytes:entry_0.nullableOptionalStruct.Value().Value().d.data()
                                   length:entry_0.nullableOptionalStruct.Value().Value().d.size()];
                newElement_0.nullableOptionalStruct.e =
                    [[NSString alloc] initWithBytes:entry_0.nullableOptionalStruct.Value().Value().e.data()
                                             length:entry_0.nullableOptionalStruct.Value().Value().e.size()
                                           encoding:NSUTF8StringEncoding];
                newElement_0.nullableOptionalStruct.f =
                    [NSNumber numberWithUnsignedChar:entry_0.nullableOptionalStruct.Value().Value().f.Raw()];
                newElement_0.nullableOptionalStruct.g = [NSNumber numberWithFloat:entry_0.nullableOptionalStruct.Value().Value().g];
                newElement_0.nullableOptionalStruct.h =
                    [NSNumber numberWithDouble:entry_0.nullableOptionalStruct.Value().Value().h];
            }
        } else {
            newElement_0.nullableOptionalStruct = nil;
        }
        if (entry_0.nullableList.IsNull()) {
            newElement_0.nullableList = nil;
        } else {
            auto * array_NaN = [NSMutableArray new];
            auto iter_NaN = entry_0.nullableList.Value().begin();
            while (iter_NaN.Next()) {
                auto & entry_NaN = iter_NaN.GetValue();
                NSNumber * newElement_NaN;
                newElement_NaN = [NSNumber numberWithUnsignedChar:chip::to_underlying(entry_NaN)];
                [array_NaN addObject:newElement_NaN];
            }
            if (iter_NaN.GetStatus() != CHIP_NO_ERROR) {
            }
            newElement_0.nullableList = array_NaN;
        }
        if (entry_0.optionalList.HasValue()) {
            auto * array_NaN = [NSMutableArray new];
            auto iter_NaN = entry_0.optionalList.Value().begin();
            while (iter_NaN.Next()) {
                auto & entry_NaN = iter_NaN.GetValue();
                NSNumber * newElement_NaN;
                newElement_NaN = [NSNumber numberWithUnsignedChar:chip::to_underlying(entry_NaN)];
                [array_NaN addObject:newElement_NaN];
            }
            if (iter_NaN.GetStatus() != CHIP_NO_ERROR) {
            }
            newElement_0.optionalList = array_NaN;
        } else {
            newElement_0.optionalList = nil;
        }
        if (entry_0.nullableOptionalList.HasValue()) {
            if (entry_0.nullableOptionalList.Value().IsNull()) {
                newElement_0.nullableOptionalList = nil;
            } else {
                auto * array_NaN = [NSMutableArray new];
                auto iter_NaN = entry_0.nullableOptionalList.Value().Value().begin();
                while (iter_NaN.Next()) {
                    auto & entry_NaN = iter_NaN.GetValue();
                    NSNumber * newElement_NaN;
                    newElement_NaN = [NSNumber numberWithUnsignedChar:chip::to_underlying(entry_NaN)];
                    [array_NaN addObject:newElement_NaN];
                }
                if (iter_NaN.GetStatus() != CHIP_NO_ERROR) {
                }
                newElement_0.nullableOptionalList = array_NaN;
            }
        } else {
            newElement_0.nullableOptionalList = nil;
        }
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPThreadNetworkDiagnosticsNeighborTableListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::ThreadNetworkDiagnostics::Structs::NeighborTable::DecodableType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPThreadNetworkDiagnosticsClusterNeighborTable * newElement_0;
        newElement_0 = [CHIPThreadNetworkDiagnosticsClusterNeighborTable new];
        newElement_0.extAddress = [NSNumber numberWithUnsignedLongLong:entry_0.extAddress];
        newElement_0.age = [NSNumber numberWithUnsignedInt:entry_0.age];
        newElement_0.rloc16 = [NSNumber numberWithUnsignedShort:entry_0.rloc16];
        newElement_0.linkFrameCounter = [NSNumber numberWithUnsignedInt:entry_0.linkFrameCounter];
        newElement_0.mleFrameCounter = [NSNumber numberWithUnsignedInt:entry_0.mleFrameCounter];
        newElement_0.lqi = [NSNumber numberWithUnsignedChar:entry_0.lqi];
        newElement_0.averageRssi = [NSNumber numberWithChar:entry_0.averageRssi];
        newElement_0.lastRssi = [NSNumber numberWithChar:entry_0.lastRssi];
        newElement_0.frameErrorRate = [NSNumber numberWithUnsignedChar:entry_0.frameErrorRate];
        newElement_0.messageErrorRate = [NSNumber numberWithUnsignedChar:entry_0.messageErrorRate];
        newElement_0.rxOnWhenIdle = [NSNumber numberWithBool:entry_0.rxOnWhenIdle];
        newElement_0.fullThreadDevice = [NSNumber numberWithBool:entry_0.fullThreadDevice];
        newElement_0.fullNetworkData = [NSNumber numberWithBool:entry_0.fullNetworkData];
        newElement_0.isChild = [NSNumber numberWithBool:entry_0.isChild];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPThreadNetworkDiagnosticsRouteTableListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::ThreadNetworkDiagnostics::Structs::RouteTable::DecodableType> &
        value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPThreadNetworkDiagnosticsClusterRouteTable * newElement_0;
        newElement_0 = [CHIPThreadNetworkDiagnosticsClusterRouteTable new];
        newElement_0.extAddress = [NSNumber numberWithUnsignedLongLong:entry_0.extAddress];
        newElement_0.rloc16 = [NSNumber numberWithUnsignedShort:entry_0.rloc16];
        newElement_0.routerId = [NSNumber numberWithUnsignedChar:entry_0.routerId];
        newElement_0.nextHop = [NSNumber numberWithUnsignedChar:entry_0.nextHop];
        newElement_0.pathCost = [NSNumber numberWithUnsignedChar:entry_0.pathCost];
        newElement_0.lqiIn = [NSNumber numberWithUnsignedChar:entry_0.LQIIn];
        newElement_0.lqiOut = [NSNumber numberWithUnsignedChar:entry_0.LQIOut];
        newElement_0.age = [NSNumber numberWithUnsignedChar:entry_0.age];
        newElement_0.allocated = [NSNumber numberWithBool:entry_0.allocated];
        newElement_0.linkEstablished = [NSNumber numberWithBool:entry_0.linkEstablished];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPThreadNetworkDiagnosticsSecurityPolicyListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::ThreadNetworkDiagnostics::Structs::SecurityPolicy::DecodableType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPThreadNetworkDiagnosticsClusterSecurityPolicy * newElement_0;
        newElement_0 = [CHIPThreadNetworkDiagnosticsClusterSecurityPolicy new];
        newElement_0.rotationTime = [NSNumber numberWithUnsignedShort:entry_0.rotationTime];
        newElement_0.flags = [NSNumber numberWithUnsignedShort:entry_0.flags];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPThreadNetworkDiagnosticsOperationalDatasetComponentsListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::ThreadNetworkDiagnostics::Structs::OperationalDatasetComponents::DecodableType> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        CHIPThreadNetworkDiagnosticsClusterOperationalDatasetComponents * newElement_0;
        newElement_0 = [CHIPThreadNetworkDiagnosticsClusterOperationalDatasetComponents new];
        newElement_0.activeTimestampPresent = [NSNumber numberWithBool:entry_0.activeTimestampPresent];
        newElement_0.pendingTimestampPresent = [NSNumber numberWithBool:entry_0.pendingTimestampPresent];
        newElement_0.masterKeyPresent = [NSNumber numberWithBool:entry_0.masterKeyPresent];
        newElement_0.networkNamePresent = [NSNumber numberWithBool:entry_0.networkNamePresent];
        newElement_0.extendedPanIdPresent = [NSNumber numberWithBool:entry_0.extendedPanIdPresent];
        newElement_0.meshLocalPrefixPresent = [NSNumber numberWithBool:entry_0.meshLocalPrefixPresent];
        newElement_0.delayPresent = [NSNumber numberWithBool:entry_0.delayPresent];
        newElement_0.panIdPresent = [NSNumber numberWithBool:entry_0.panIdPresent];
        newElement_0.channelPresent = [NSNumber numberWithBool:entry_0.channelPresent];
        newElement_0.pskcPresent = [NSNumber numberWithBool:entry_0.pskcPresent];
        newElement_0.securityPolicyPresent = [NSNumber numberWithBool:entry_0.securityPolicyPresent];
        newElement_0.channelMaskPresent = [NSNumber numberWithBool:entry_0.channelMaskPresent];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::app::Clusters::ThreadNetworkDiagnostics::NetworkFault> & value)
{
    NSArray * _Nonnull objCValue;
    auto * array_0 = [NSMutableArray new];
    auto iter_0 = value.begin();
    while (iter_0.Next()) {
        auto & entry_0 = iter_0.GetValue();
        NSNumber * newElement_0;
        newElement_0 = [NSNumber numberWithUnsignedChar:chip::to_underlying(entry_0)];
        [array_0 addObject:newElement_0];
    }
    if (iter_0.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }
    objCValue = array_0;
    DispatchSuccess(context, objCValue);
};

void CHIPAccountLoginClusterGetSetupPINResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::AccountLogin::Commands::GetSetupPINResponse::DecodableType & data)
{
    auto * response = [CHIPAccountLoginClusterGetSetupPINResponseParams new];
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.setupPIN.data() length:data.setupPIN.size() encoding:NSUTF8StringEncoding];
        response.setupPIN = value;
    }
    DispatchSuccess(context, response);
};

void CHIPApplicationLauncherClusterLaunchAppResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::ApplicationLauncher::Commands::LaunchAppResponse::DecodableType & data)
{
    auto * response = [CHIPApplicationLauncherClusterLaunchAppResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.status)];
        response.status = value;
    }
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.data.data() length:data.data.size() encoding:NSUTF8StringEncoding];
        response.data = value;
    }
    DispatchSuccess(context, response);
};

void CHIPContentLauncherClusterLaunchContentResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::ContentLauncher::Commands::LaunchContentResponse::DecodableType & data)
{
    auto * response = [CHIPContentLauncherClusterLaunchContentResponseParams new];
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.data.data() length:data.data.size() encoding:NSUTF8StringEncoding];
        response.data = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.contentLaunchStatus)];
        response.contentLaunchStatus = value;
    }
    DispatchSuccess(context, response);
};

void CHIPContentLauncherClusterLaunchURLResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::ContentLauncher::Commands::LaunchURLResponse::DecodableType & data)
{
    auto * response = [CHIPContentLauncherClusterLaunchURLResponseParams new];
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.data.data() length:data.data.size() encoding:NSUTF8StringEncoding];
        response.data = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.contentLaunchStatus)];
        response.contentLaunchStatus = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDiagnosticLogsClusterRetrieveLogsResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DiagnosticLogs::Commands::RetrieveLogsResponse::DecodableType & data)
{
    auto * response = [CHIPDiagnosticLogsClusterRetrieveLogsResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.status)];
        response.status = value;
    }
    {
        NSData * value;
        value = [NSData dataWithBytes:data.content.data() length:data.content.size()];
        response.content = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedInt:data.timeStamp];
        response.timeStamp = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedInt:data.timeSinceBoot];
        response.timeSinceBoot = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearAllPinsResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearAllPinsResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterClearAllPinsResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearAllRfidsResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearAllRfidsResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterClearAllRfidsResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearHolidayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearHolidayScheduleResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterClearHolidayScheduleResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearPinResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearPinResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterClearPinResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearRfidResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearRfidResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterClearRfidResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearWeekdayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearWeekdayScheduleResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterClearWeekdayScheduleResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearYeardayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearYeardayScheduleResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterClearYeardayScheduleResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetHolidayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetHolidayScheduleResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterGetHolidayScheduleResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.scheduleId];
        response.scheduleId = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedInt:data.localStartTime];
        response.localStartTime = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedInt:data.localEndTime];
        response.localEndTime = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.operatingModeDuringHoliday];
        response.operatingModeDuringHoliday = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetLogRecordResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetLogRecordResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterGetLogRecordResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.logEntryId];
        response.logEntryId = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedInt:data.timestamp];
        response.timestamp = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.eventType];
        response.eventType = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.source];
        response.source = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.eventIdOrAlarmCode];
        response.eventIdOrAlarmCode = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.userId];
        response.userId = value;
    }
    {
        NSData * value;
        value = [NSData dataWithBytes:data.pin.data() length:data.pin.size()];
        response.pin = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetPinResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetPinResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterGetPinResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.userId];
        response.userId = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.userStatus)];
        response.userStatus = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.userType)];
        response.userType = value;
    }
    {
        NSData * value;
        value = [NSData dataWithBytes:data.pin.data() length:data.pin.size()];
        response.pin = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetRfidResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetRfidResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterGetRfidResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.userId];
        response.userId = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.userStatus)];
        response.userStatus = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.userType)];
        response.userType = value;
    }
    {
        NSData * value;
        value = [NSData dataWithBytes:data.rfid.data() length:data.rfid.size()];
        response.rfid = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetUserTypeResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetUserTypeResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterGetUserTypeResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.userId];
        response.userId = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.userType)];
        response.userType = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetWeekdayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetWeekdayScheduleResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterGetWeekdayScheduleResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.scheduleId];
        response.scheduleId = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.userId];
        response.userId = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.daysMask];
        response.daysMask = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.startHour];
        response.startHour = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.startMinute];
        response.startMinute = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.endHour];
        response.endHour = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.endMinute];
        response.endMinute = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetYeardayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetYeardayScheduleResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterGetYeardayScheduleResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.scheduleId];
        response.scheduleId = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.userId];
        response.userId = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedInt:data.localStartTime];
        response.localStartTime = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedInt:data.localEndTime];
        response.localEndTime = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterLockDoorResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::LockDoorResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterLockDoorResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetHolidayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetHolidayScheduleResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterSetHolidayScheduleResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetPinResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetPinResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterSetPinResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.status)];
        response.status = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetRfidResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetRfidResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterSetRfidResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.status)];
        response.status = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetUserTypeResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetUserTypeResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterSetUserTypeResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetWeekdayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetWeekdayScheduleResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterSetWeekdayScheduleResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetYeardayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetYeardayScheduleResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterSetYeardayScheduleResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterUnlockDoorResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::UnlockDoorResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterUnlockDoorResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterUnlockWithTimeoutResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::UnlockWithTimeoutResponse::DecodableType & data)
{
    auto * response = [CHIPDoorLockClusterUnlockWithTimeoutResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    DispatchSuccess(context, response);
};

void CHIPGeneralCommissioningClusterArmFailSafeResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::GeneralCommissioning::Commands::ArmFailSafeResponse::DecodableType & data)
{
    auto * response = [CHIPGeneralCommissioningClusterArmFailSafeResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.errorCode)];
        response.errorCode = value;
    }
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response.debugText = value;
    }
    DispatchSuccess(context, response);
};

void CHIPGeneralCommissioningClusterCommissioningCompleteResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::GeneralCommissioning::Commands::CommissioningCompleteResponse::DecodableType & data)
{
    auto * response = [CHIPGeneralCommissioningClusterCommissioningCompleteResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.errorCode)];
        response.errorCode = value;
    }
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response.debugText = value;
    }
    DispatchSuccess(context, response);
};

void CHIPGeneralCommissioningClusterSetRegulatoryConfigResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::GeneralCommissioning::Commands::SetRegulatoryConfigResponse::DecodableType & data)
{
    auto * response = [CHIPGeneralCommissioningClusterSetRegulatoryConfigResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.errorCode)];
        response.errorCode = value;
    }
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response.debugText = value;
    }
    DispatchSuccess(context, response);
};

void CHIPGroupsClusterAddGroupResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Groups::Commands::AddGroupResponse::DecodableType & data)
{
    auto * response = [CHIPGroupsClusterAddGroupResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response.groupId = value;
    }
    DispatchSuccess(context, response);
};

void CHIPGroupsClusterGetGroupMembershipResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Groups::Commands::GetGroupMembershipResponse::DecodableType & data)
{
    auto * response = [CHIPGroupsClusterGetGroupMembershipResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.capacity];
        response.capacity = value;
    }
    {
        NSMutableArray * value;
        auto * array_0 = [NSMutableArray new];
        auto iter_0 = data.groupList.begin();
        while (iter_0.Next()) {
            auto & entry_0 = iter_0.GetValue();
            NSNumber * newElement_0;
            newElement_0 = [NSNumber numberWithUnsignedShort:entry_0];
            [array_0 addObject:newElement_0];
        }
        if (iter_0.GetStatus() != CHIP_NO_ERROR) {
            OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
            return;
        }
        value = array_0;
        response.groupList = value;
    }
    DispatchSuccess(context, response);
};

void CHIPGroupsClusterRemoveGroupResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Groups::Commands::RemoveGroupResponse::DecodableType & data)
{
    auto * response = [CHIPGroupsClusterRemoveGroupResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response.groupId = value;
    }
    DispatchSuccess(context, response);
};

void CHIPGroupsClusterViewGroupResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Groups::Commands::ViewGroupResponse::DecodableType & data)
{
    auto * response = [CHIPGroupsClusterViewGroupResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response.groupId = value;
    }
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.groupName.data() length:data.groupName.size() encoding:NSUTF8StringEncoding];
        response.groupName = value;
    }
    DispatchSuccess(context, response);
};

void CHIPIdentifyClusterIdentifyQueryResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Identify::Commands::IdentifyQueryResponse::DecodableType & data)
{
    auto * response = [CHIPIdentifyClusterIdentifyQueryResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.timeout];
        response.timeout = value;
    }
    DispatchSuccess(context, response);
};

void CHIPKeypadInputClusterSendKeyResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::KeypadInput::Commands::SendKeyResponse::DecodableType & data)
{
    auto * response = [CHIPKeypadInputClusterSendKeyResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.status)];
        response.status = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaFastForwardResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaFastForwardResponse::DecodableType & data)
{
    auto * response = [CHIPMediaPlaybackClusterMediaFastForwardResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.mediaPlaybackStatus)];
        response.mediaPlaybackStatus = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaNextResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaNextResponse::DecodableType & data)
{
    auto * response = [CHIPMediaPlaybackClusterMediaNextResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.mediaPlaybackStatus)];
        response.mediaPlaybackStatus = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaPauseResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaPauseResponse::DecodableType & data)
{
    auto * response = [CHIPMediaPlaybackClusterMediaPauseResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.mediaPlaybackStatus)];
        response.mediaPlaybackStatus = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaPlayResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaPlayResponse::DecodableType & data)
{
    auto * response = [CHIPMediaPlaybackClusterMediaPlayResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.mediaPlaybackStatus)];
        response.mediaPlaybackStatus = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaPreviousResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaPreviousResponse::DecodableType & data)
{
    auto * response = [CHIPMediaPlaybackClusterMediaPreviousResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.mediaPlaybackStatus)];
        response.mediaPlaybackStatus = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaRewindResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaRewindResponse::DecodableType & data)
{
    auto * response = [CHIPMediaPlaybackClusterMediaRewindResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.mediaPlaybackStatus)];
        response.mediaPlaybackStatus = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaSeekResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaSeekResponse::DecodableType & data)
{
    auto * response = [CHIPMediaPlaybackClusterMediaSeekResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.mediaPlaybackStatus)];
        response.mediaPlaybackStatus = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaSkipBackwardResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaSkipBackwardResponse::DecodableType & data)
{
    auto * response = [CHIPMediaPlaybackClusterMediaSkipBackwardResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.mediaPlaybackStatus)];
        response.mediaPlaybackStatus = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaSkipForwardResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaSkipForwardResponse::DecodableType & data)
{
    auto * response = [CHIPMediaPlaybackClusterMediaSkipForwardResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.mediaPlaybackStatus)];
        response.mediaPlaybackStatus = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaStartOverResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaStartOverResponse::DecodableType & data)
{
    auto * response = [CHIPMediaPlaybackClusterMediaStartOverResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.mediaPlaybackStatus)];
        response.mediaPlaybackStatus = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaStopResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaStopResponse::DecodableType & data)
{
    auto * response = [CHIPMediaPlaybackClusterMediaStopResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.mediaPlaybackStatus)];
        response.mediaPlaybackStatus = value;
    }
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterAddThreadNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::AddThreadNetworkResponse::DecodableType & data)
{
    auto * response = [CHIPNetworkCommissioningClusterAddThreadNetworkResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response.errorCode = value;
    }
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response.debugText = value;
    }
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterAddWiFiNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::AddWiFiNetworkResponse::DecodableType & data)
{
    auto * response = [CHIPNetworkCommissioningClusterAddWiFiNetworkResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response.errorCode = value;
    }
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response.debugText = value;
    }
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterDisableNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::DisableNetworkResponse::DecodableType & data)
{
    auto * response = [CHIPNetworkCommissioningClusterDisableNetworkResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response.errorCode = value;
    }
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response.debugText = value;
    }
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterEnableNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::EnableNetworkResponse::DecodableType & data)
{
    auto * response = [CHIPNetworkCommissioningClusterEnableNetworkResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response.errorCode = value;
    }
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response.debugText = value;
    }
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterRemoveNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::RemoveNetworkResponse::DecodableType & data)
{
    auto * response = [CHIPNetworkCommissioningClusterRemoveNetworkResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response.errorCode = value;
    }
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response.debugText = value;
    }
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterScanNetworksResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::ScanNetworksResponse::DecodableType & data)
{
    auto * response = [CHIPNetworkCommissioningClusterScanNetworksResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response.errorCode = value;
    }
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response.debugText = value;
    }
    {
        NSMutableArray * value;
        auto * array_0 = [NSMutableArray new];
        auto iter_0 = data.wifiScanResults.begin();
        while (iter_0.Next()) {
            auto & entry_0 = iter_0.GetValue();
            CHIPNetworkCommissioningClusterWiFiInterfaceScanResult * newElement_0;
            newElement_0 = [CHIPNetworkCommissioningClusterWiFiInterfaceScanResult new];
            newElement_0.security = [NSNumber numberWithUnsignedChar:entry_0.security];
            newElement_0.ssid = [NSData dataWithBytes:entry_0.ssid.data() length:entry_0.ssid.size()];
            newElement_0.bssid = [NSData dataWithBytes:entry_0.bssid.data() length:entry_0.bssid.size()];
            newElement_0.channel = [NSNumber numberWithUnsignedChar:entry_0.channel];
            newElement_0.frequencyBand = [NSNumber numberWithUnsignedInt:entry_0.frequencyBand];
            [array_0 addObject:newElement_0];
        }
        if (iter_0.GetStatus() != CHIP_NO_ERROR) {
            OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
            return;
        }
        value = array_0;
        response.wifiScanResults = value;
    }
    {
        NSMutableArray * value;
        auto * array_0 = [NSMutableArray new];
        auto iter_0 = data.threadScanResults.begin();
        while (iter_0.Next()) {
            auto & entry_0 = iter_0.GetValue();
            CHIPNetworkCommissioningClusterThreadInterfaceScanResult * newElement_0;
            newElement_0 = [CHIPNetworkCommissioningClusterThreadInterfaceScanResult new];
            newElement_0.discoveryResponse = [NSData dataWithBytes:entry_0.discoveryResponse.data()
                                                            length:entry_0.discoveryResponse.size()];
            [array_0 addObject:newElement_0];
        }
        if (iter_0.GetStatus() != CHIP_NO_ERROR) {
            OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
            return;
        }
        value = array_0;
        response.threadScanResults = value;
    }
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterUpdateThreadNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::UpdateThreadNetworkResponse::DecodableType & data)
{
    auto * response = [CHIPNetworkCommissioningClusterUpdateThreadNetworkResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response.errorCode = value;
    }
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response.debugText = value;
    }
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterUpdateWiFiNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::UpdateWiFiNetworkResponse::DecodableType & data)
{
    auto * response = [CHIPNetworkCommissioningClusterUpdateWiFiNetworkResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response.errorCode = value;
    }
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response.debugText = value;
    }
    DispatchSuccess(context, response);
};

void CHIPOtaSoftwareUpdateProviderClusterApplyUpdateResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::ApplyUpdateResponse::DecodableType & data)
{
    auto * response = [CHIPOtaSoftwareUpdateProviderClusterApplyUpdateResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.action)];
        response.action = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedInt:data.delayedActionTime];
        response.delayedActionTime = value;
    }
    DispatchSuccess(context, response);
};

void CHIPOtaSoftwareUpdateProviderClusterQueryImageResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::QueryImageResponse::DecodableType & data)
{
    auto * response = [CHIPOtaSoftwareUpdateProviderClusterQueryImageResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.status)];
        response.status = value;
    }
    {
        NSNumber * value;
        if (data.delayedActionTime.HasValue()) {
            value = [NSNumber numberWithUnsignedInt:data.delayedActionTime.Value()];
        } else {
            value = nil;
        }
        response.delayedActionTime = value;
    }
    {
        NSString * value;
        if (data.imageURI.HasValue()) {
            value = [[NSString alloc] initWithBytes:data.imageURI.Value().data()
                                             length:data.imageURI.Value().size()
                                           encoding:NSUTF8StringEncoding];
        } else {
            value = nil;
        }
        response.imageURI = value;
    }
    {
        NSNumber * value;
        if (data.softwareVersion.HasValue()) {
            value = [NSNumber numberWithUnsignedInt:data.softwareVersion.Value()];
        } else {
            value = nil;
        }
        response.softwareVersion = value;
    }
    {
        NSString * value;
        if (data.softwareVersionString.HasValue()) {
            value = [[NSString alloc] initWithBytes:data.softwareVersionString.Value().data()
                                             length:data.softwareVersionString.Value().size()
                                           encoding:NSUTF8StringEncoding];
        } else {
            value = nil;
        }
        response.softwareVersionString = value;
    }
    {
        NSData * value;
        if (data.updateToken.HasValue()) {
            value = [NSData dataWithBytes:data.updateToken.Value().data() length:data.updateToken.Value().size()];
        } else {
            value = nil;
        }
        response.updateToken = value;
    }
    {
        NSNumber * value;
        if (data.userConsentNeeded.HasValue()) {
            value = [NSNumber numberWithBool:data.userConsentNeeded.Value()];
        } else {
            value = nil;
        }
        response.userConsentNeeded = value;
    }
    {
        NSData * value;
        if (data.metadataForRequestor.HasValue()) {
            value = [NSData dataWithBytes:data.metadataForRequestor.Value().data() length:data.metadataForRequestor.Value().size()];
        } else {
            value = nil;
        }
        response.metadataForRequestor = value;
    }
    DispatchSuccess(context, response);
};

void CHIPOperationalCredentialsClusterAttestationResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::AttestationResponse::DecodableType & data)
{
    auto * response = [CHIPOperationalCredentialsClusterAttestationResponseParams new];
    {
        NSData * value;
        value = [NSData dataWithBytes:data.attestationElements.data() length:data.attestationElements.size()];
        response.attestationElements = value;
    }
    {
        NSData * value;
        value = [NSData dataWithBytes:data.signature.data() length:data.signature.size()];
        response.signature = value;
    }
    DispatchSuccess(context, response);
};

void CHIPOperationalCredentialsClusterCertificateChainResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::CertificateChainResponse::DecodableType & data)
{
    auto * response = [CHIPOperationalCredentialsClusterCertificateChainResponseParams new];
    {
        NSData * value;
        value = [NSData dataWithBytes:data.certificate.data() length:data.certificate.size()];
        response.certificate = value;
    }
    DispatchSuccess(context, response);
};

void CHIPOperationalCredentialsClusterNOCResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::NOCResponse::DecodableType & data)
{
    auto * response = [CHIPOperationalCredentialsClusterNOCResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.statusCode];
        response.statusCode = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.fabricIndex];
        response.fabricIndex = value;
    }
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response.debugText = value;
    }
    DispatchSuccess(context, response);
};

void CHIPOperationalCredentialsClusterOpCSRResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::OpCSRResponse::DecodableType & data)
{
    auto * response = [CHIPOperationalCredentialsClusterOpCSRResponseParams new];
    {
        NSData * value;
        value = [NSData dataWithBytes:data.NOCSRElements.data() length:data.NOCSRElements.size()];
        response.nocsrElements = value;
    }
    {
        NSData * value;
        value = [NSData dataWithBytes:data.attestationSignature.data() length:data.attestationSignature.size()];
        response.attestationSignature = value;
    }
    DispatchSuccess(context, response);
};

void CHIPScenesClusterAddSceneResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::AddSceneResponse::DecodableType & data)
{
    auto * response = [CHIPScenesClusterAddSceneResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response.groupId = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.sceneId];
        response.sceneId = value;
    }
    DispatchSuccess(context, response);
};

void CHIPScenesClusterGetSceneMembershipResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::GetSceneMembershipResponse::DecodableType & data)
{
    auto * response = [CHIPScenesClusterGetSceneMembershipResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.capacity];
        response.capacity = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response.groupId = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.sceneCount];
        response.sceneCount = value;
    }
    {
        NSMutableArray * value;
        auto * array_0 = [NSMutableArray new];
        auto iter_0 = data.sceneList.begin();
        while (iter_0.Next()) {
            auto & entry_0 = iter_0.GetValue();
            NSNumber * newElement_0;
            newElement_0 = [NSNumber numberWithUnsignedChar:entry_0];
            [array_0 addObject:newElement_0];
        }
        if (iter_0.GetStatus() != CHIP_NO_ERROR) {
            OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
            return;
        }
        value = array_0;
        response.sceneList = value;
    }
    DispatchSuccess(context, response);
};

void CHIPScenesClusterRemoveAllScenesResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::RemoveAllScenesResponse::DecodableType & data)
{
    auto * response = [CHIPScenesClusterRemoveAllScenesResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response.groupId = value;
    }
    DispatchSuccess(context, response);
};

void CHIPScenesClusterRemoveSceneResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::RemoveSceneResponse::DecodableType & data)
{
    auto * response = [CHIPScenesClusterRemoveSceneResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response.groupId = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.sceneId];
        response.sceneId = value;
    }
    DispatchSuccess(context, response);
};

void CHIPScenesClusterStoreSceneResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::StoreSceneResponse::DecodableType & data)
{
    auto * response = [CHIPScenesClusterStoreSceneResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response.groupId = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.sceneId];
        response.sceneId = value;
    }
    DispatchSuccess(context, response);
};

void CHIPScenesClusterViewSceneResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::ViewSceneResponse::DecodableType & data)
{
    auto * response = [CHIPScenesClusterViewSceneResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response.status = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response.groupId = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.sceneId];
        response.sceneId = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:data.transitionTime];
        response.transitionTime = value;
    }
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.sceneName.data() length:data.sceneName.size() encoding:NSUTF8StringEncoding];
        response.sceneName = value;
    }
    {
        NSMutableArray * value;
        auto * array_0 = [NSMutableArray new];
        auto iter_0 = data.extensionFieldSets.begin();
        while (iter_0.Next()) {
            auto & entry_0 = iter_0.GetValue();
            CHIPScenesClusterSceneExtensionFieldSet * newElement_0;
            newElement_0 = [CHIPScenesClusterSceneExtensionFieldSet new];
            newElement_0.clusterId = [NSNumber numberWithUnsignedInt:entry_0.clusterId];
            newElement_0.length = [NSNumber numberWithUnsignedChar:entry_0.length];
            newElement_0.value = [NSNumber numberWithUnsignedChar:entry_0.value];
            [array_0 addObject:newElement_0];
        }
        if (iter_0.GetStatus() != CHIP_NO_ERROR) {
            OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
            return;
        }
        value = array_0;
        response.extensionFieldSets = value;
    }
    DispatchSuccess(context, response);
};

void CHIPTvChannelClusterChangeChannelResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TvChannel::Commands::ChangeChannelResponse::DecodableType & data)
{
    auto * response = [CHIPTvChannelClusterChangeChannelResponseParams new];
    {
        NSMutableArray * value;
        auto * array_0 = [NSMutableArray new];
        auto iter_0 = data.channelMatch.begin();
        while (iter_0.Next()) {
            auto & entry_0 = iter_0.GetValue();
            CHIPTvChannelClusterTvChannelInfo * newElement_0;
            newElement_0 = [CHIPTvChannelClusterTvChannelInfo new];
            newElement_0.majorNumber = [NSNumber numberWithUnsignedShort:entry_0.majorNumber];
            newElement_0.minorNumber = [NSNumber numberWithUnsignedShort:entry_0.minorNumber];
            newElement_0.name = [[NSString alloc] initWithBytes:entry_0.name.data()
                                                         length:entry_0.name.size()
                                                       encoding:NSUTF8StringEncoding];
            newElement_0.callSign = [[NSString alloc] initWithBytes:entry_0.callSign.data()
                                                             length:entry_0.callSign.size()
                                                           encoding:NSUTF8StringEncoding];
            newElement_0.affiliateCallSign = [[NSString alloc] initWithBytes:entry_0.affiliateCallSign.data()
                                                                      length:entry_0.affiliateCallSign.size()
                                                                    encoding:NSUTF8StringEncoding];
            [array_0 addObject:newElement_0];
        }
        if (iter_0.GetStatus() != CHIP_NO_ERROR) {
            OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
            return;
        }
        value = array_0;
        response.channelMatch = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.errorType)];
        response.errorType = value;
    }
    DispatchSuccess(context, response);
};

void CHIPTargetNavigatorClusterNavigateTargetResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TargetNavigator::Commands::NavigateTargetResponse::DecodableType & data)
{
    auto * response = [CHIPTargetNavigatorClusterNavigateTargetResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.status)];
        response.status = value;
    }
    {
        NSString * value;
        value = [[NSString alloc] initWithBytes:data.data.data() length:data.data.size() encoding:NSUTF8StringEncoding];
        response.data = value;
    }
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterBooleanResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::BooleanResponse::DecodableType & data)
{
    auto * response = [CHIPTestClusterClusterBooleanResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithBool:data.value];
        response.value = value;
    }
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterSimpleStructResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::SimpleStructResponse::DecodableType & data)
{
    auto * response = [CHIPTestClusterClusterSimpleStructResponseParams new];
    {
        CHIPTestClusterClusterSimpleStruct * value;
        value = [CHIPTestClusterClusterSimpleStruct new];
        value.a = [NSNumber numberWithUnsignedChar:data.arg1.a];
        value.b = [NSNumber numberWithBool:data.arg1.b];
        value.c = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.arg1.c)];
        value.d = [NSData dataWithBytes:data.arg1.d.data() length:data.arg1.d.size()];
        value.e = [[NSString alloc] initWithBytes:data.arg1.e.data() length:data.arg1.e.size() encoding:NSUTF8StringEncoding];
        value.f = [NSNumber numberWithUnsignedChar:data.arg1.f.Raw()];
        value.g = [NSNumber numberWithFloat:data.arg1.g];
        value.h = [NSNumber numberWithDouble:data.arg1.h];
        response.arg1 = value;
    }
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterTestAddArgumentsResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::TestAddArgumentsResponse::DecodableType & data)
{
    auto * response = [CHIPTestClusterClusterTestAddArgumentsResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.returnValue];
        response.returnValue = value;
    }
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterTestEnumsResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::TestEnumsResponse::DecodableType & data)
{
    auto * response = [CHIPTestClusterClusterTestEnumsResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedShort:chip::to_underlying(data.arg1)];
        response.arg1 = value;
    }
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:chip::to_underlying(data.arg2)];
        response.arg2 = value;
    }
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterTestListInt8UReverseResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::TestListInt8UReverseResponse::DecodableType & data)
{
    auto * response = [CHIPTestClusterClusterTestListInt8UReverseResponseParams new];
    {
        NSMutableArray * value;
        auto * array_0 = [NSMutableArray new];
        auto iter_0 = data.arg1.begin();
        while (iter_0.Next()) {
            auto & entry_0 = iter_0.GetValue();
            NSNumber * newElement_0;
            newElement_0 = [NSNumber numberWithUnsignedChar:entry_0];
            [array_0 addObject:newElement_0];
        }
        if (iter_0.GetStatus() != CHIP_NO_ERROR) {
            OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
            return;
        }
        value = array_0;
        response.arg1 = value;
    }
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterTestNullableOptionalResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::TestNullableOptionalResponse::DecodableType & data)
{
    auto * response = [CHIPTestClusterClusterTestNullableOptionalResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithBool:data.wasPresent];
        response.wasPresent = value;
    }
    {
        NSNumber * value;
        if (data.wasNull.HasValue()) {
            value = [NSNumber numberWithBool:data.wasNull.Value()];
        } else {
            value = nil;
        }
        response.wasNull = value;
    }
    {
        NSNumber * value;
        if (data.value.HasValue()) {
            value = [NSNumber numberWithUnsignedChar:data.value.Value()];
        } else {
            value = nil;
        }
        response.value = value;
    }
    {
        NSNumber * value;
        if (data.originalValue.HasValue()) {
            if (data.originalValue.Value().IsNull()) {
                value = nil;
            } else {
                value = [NSNumber numberWithUnsignedChar:data.originalValue.Value().Value()];
            }
        } else {
            value = nil;
        }
        response.originalValue = value;
    }
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterTestSpecificResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::TestSpecificResponse::DecodableType & data)
{
    auto * response = [CHIPTestClusterClusterTestSpecificResponseParams new];
    {
        NSNumber * value;
        value = [NSNumber numberWithUnsignedChar:data.returnValue];
        response.returnValue = value;
    }
    DispatchSuccess(context, response);
};
