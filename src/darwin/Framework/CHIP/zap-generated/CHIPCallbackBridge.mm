/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#import "CHIPCallbackBridge_internal.h"

void CHIPDefaultSuccessCallbackBridge::OnSuccessFn(void * context) { DispatchSuccess(context, nil); };

void CHIPOctetStringAttributeCallbackBridge::OnSuccessFn(void * context, chip::ByteSpan value)
{
    DispatchSuccess(context, @ { @"value" : [NSData dataWithBytes:value.data() length:value.size()] });
};

void CHIPCharStringAttributeCallbackBridge::OnSuccessFn(void * context, chip::CharSpan value)
{
    DispatchSuccess(
        context, @ { @"value" : [[NSString alloc] initWithBytes:value.data() length:value.size() encoding:NSUTF8StringEncoding] });
};

void CHIPBooleanAttributeCallbackBridge::OnSuccessFn(void * context, bool value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithBool:value] });
};

void CHIPInt8uAttributeCallbackBridge::OnSuccessFn(void * context, uint8_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithUnsignedChar:value] });
};

void CHIPInt8sAttributeCallbackBridge::OnSuccessFn(void * context, int8_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithChar:value] });
};

void CHIPInt16uAttributeCallbackBridge::OnSuccessFn(void * context, uint16_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithUnsignedShort:value] });
};

void CHIPInt16sAttributeCallbackBridge::OnSuccessFn(void * context, int16_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithShort:value] });
};

void CHIPInt32uAttributeCallbackBridge::OnSuccessFn(void * context, uint32_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithUnsignedInt:value] });
};

void CHIPInt32sAttributeCallbackBridge::OnSuccessFn(void * context, int32_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithInt:value] });
};

void CHIPInt64uAttributeCallbackBridge::OnSuccessFn(void * context, uint64_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithUnsignedLongLong:value] });
};

void CHIPInt64sAttributeCallbackBridge::OnSuccessFn(void * context, int64_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithLongLong:value] });
};

void CHIPApplicationLauncherApplicationLauncherListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<uint16_t> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSNumber numberWithUnsignedShort:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPAudioOutputAudioOutputListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::AudioOutput::Structs::AudioOutputInfo::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"index" : [NSNumber numberWithUnsignedChar:entry.index],
            @"outputType" : [NSNumber numberWithUnsignedChar:entry.outputType],
            @"name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPBridgedActionsActionListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::BridgedActions::Structs::ActionStruct::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"ActionID" : [NSNumber numberWithUnsignedShort:entry.actionID],
            @"Name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
            @"Type" : [NSNumber numberWithUnsignedChar:entry.type],
            @"EndpointListID" : [NSNumber numberWithUnsignedShort:entry.endpointListID],
            @"SupportedCommands" : [NSNumber numberWithUnsignedShort:entry.supportedCommands],
            @"Status" : [NSNumber numberWithUnsignedChar:entry.status],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPBridgedActionsEndpointListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::BridgedActions::Structs::EndpointListStruct::DecodableType> &
        list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"EndpointListID" : [NSNumber numberWithUnsignedShort:entry.endpointListID],
            @"Name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
            @"Type" : [NSNumber numberWithUnsignedChar:entry.type],
            @"Endpoints" : [NSData dataWithBytes:entry.endpoints.data() length:entry.endpoints.size()],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPContentLauncherAcceptsHeaderListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSData dataWithBytes:entry.data() length:entry.size()]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPContentLauncherSupportedStreamingTypesListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::ContentLauncher::ContentLaunchStreamingType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSNumber numberWithUnsignedChar:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPDescriptorDeviceListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::Descriptor::Structs::DeviceType::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"type" : [NSNumber numberWithUnsignedInt:entry.type],
            @"revision" : [NSNumber numberWithUnsignedShort:entry.revision],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPDescriptorServerListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ClusterId> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSNumber numberWithUnsignedInt:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPDescriptorClientListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ClusterId> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSNumber numberWithUnsignedInt:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPDescriptorPartsListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::EndpointId> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSNumber numberWithUnsignedShort:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPFixedLabelLabelListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::FixedLabel::Structs::LabelStruct::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"label" : [[NSString alloc] initWithBytes:entry.label.data() length:entry.label.size() encoding:NSUTF8StringEncoding],
            @"value" : [[NSString alloc] initWithBytes:entry.value.data() length:entry.value.size() encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPGeneralCommissioningBasicCommissioningInfoListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::GeneralCommissioning::Structs::BasicCommissioningInfoType::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"FailSafeExpiryLengthMs" : [NSNumber numberWithUnsignedInt:entry.failSafeExpiryLengthMs],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::GeneralDiagnostics::Structs::NetworkInterfaceType::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"Name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
            @"FabricConnected" : [NSNumber numberWithBool:entry.fabricConnected],
            @"OffPremiseServicesReachableIPv4" : [NSNumber numberWithBool:entry.offPremiseServicesReachableIPv4],
            @"OffPremiseServicesReachableIPv6" : [NSNumber numberWithBool:entry.offPremiseServicesReachableIPv6],
            @"HardwareAddress" : [NSData dataWithBytes:entry.hardwareAddress.data() length:entry.hardwareAddress.size()],
            @"Type" : [NSNumber numberWithUnsignedChar:entry.type],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPGroupKeyManagementGroupsListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::GroupKeyManagement::Structs::GroupState::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"VendorId" : [NSNumber numberWithUnsignedShort:entry.vendorId],
            @"VendorGroupId" : [NSNumber numberWithUnsignedShort:entry.vendorGroupId],
            @"GroupKeySetIndex" : [NSNumber numberWithUnsignedShort:entry.groupKeySetIndex],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPGroupKeyManagementGroupKeysListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::GroupKeyManagement::Structs::GroupKey::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"VendorId" : [NSNumber numberWithUnsignedShort:entry.vendorId],
            @"GroupKeyIndex" : [NSNumber numberWithUnsignedShort:entry.groupKeyIndex],
            @"GroupKeyRoot" : [NSData dataWithBytes:entry.groupKeyRoot.data() length:entry.groupKeyRoot.size()],
            @"GroupKeyEpochStartTime" : [NSNumber numberWithUnsignedLongLong:entry.groupKeyEpochStartTime],
            @"GroupKeySecurityPolicy" : [NSNumber numberWithUnsignedChar:entry.groupKeySecurityPolicy],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPMediaInputMediaInputListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::MediaInput::Structs::MediaInputInfo::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"index" : [NSNumber numberWithUnsignedChar:entry.index],
            @"inputType" : [NSNumber numberWithUnsignedChar:entry.inputType],
            @"name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
            @"description" : [[NSString alloc] initWithBytes:entry.description.data()
                                                      length:entry.description.size()
                                                    encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPModeSelectSupportedModesListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::ModeSelect::Structs::ModeOptionStruct::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"Label" : [[NSString alloc] initWithBytes:entry.label.data() length:entry.label.size() encoding:NSUTF8StringEncoding],
            @"Mode" : [NSNumber numberWithUnsignedChar:entry.mode],
            @"SemanticTag" : [NSNumber numberWithUnsignedInt:entry.semanticTag],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPOperationalCredentialsFabricsListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::OperationalCredentials::Structs::FabricDescriptor::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"FabricIndex" : [NSNumber numberWithUnsignedChar:entry.fabricIndex],
            @"RootPublicKey" : [NSData dataWithBytes:entry.rootPublicKey.data() length:entry.rootPublicKey.size()],
            @"VendorId" : [NSNumber numberWithUnsignedShort:entry.vendorId],
            @"FabricId" : [NSNumber numberWithUnsignedLongLong:entry.fabricId],
            @"NodeId" : [NSNumber numberWithUnsignedLongLong:entry.nodeId],
            @"Label" : [[NSString alloc] initWithBytes:entry.label.data() length:entry.label.size() encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPOperationalCredentialsTrustedRootCertificatesListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSData dataWithBytes:entry.data() length:entry.size()]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPPowerSourceActiveBatteryFaultsListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<uint8_t> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSNumber numberWithUnsignedChar:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPSoftwareDiagnosticsThreadMetricsListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::SoftwareDiagnostics::Structs::ThreadMetrics::DecodableType> &
        list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"Id" : [NSNumber numberWithUnsignedLongLong:entry.id],
            @"Name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
            @"StackFreeCurrent" : [NSNumber numberWithUnsignedInt:entry.stackFreeCurrent],
            @"StackFreeMinimum" : [NSNumber numberWithUnsignedInt:entry.stackFreeMinimum],
            @"StackSize" : [NSNumber numberWithUnsignedInt:entry.stackSize],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTvChannelTvChannelListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::TvChannel::Structs::TvChannelInfo::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"majorNumber" : [NSNumber numberWithUnsignedShort:entry.majorNumber],
            @"minorNumber" : [NSNumber numberWithUnsignedShort:entry.minorNumber],
            @"name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
            @"callSign" : [[NSString alloc] initWithBytes:entry.callSign.data()
                                                   length:entry.callSign.size()
                                                 encoding:NSUTF8StringEncoding],
            @"affiliateCallSign" : [[NSString alloc] initWithBytes:entry.affiliateCallSign.data()
                                                            length:entry.affiliateCallSign.size()
                                                          encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTargetNavigatorTargetNavigatorListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::TargetNavigator::Structs::NavigateTargetTargetInfo::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"identifier" : [NSNumber numberWithUnsignedChar:entry.identifier],
            @"name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTestClusterListInt8uListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<uint8_t> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSNumber numberWithUnsignedChar:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTestClusterListOctetStringListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSData dataWithBytes:entry.data() length:entry.size()]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTestClusterListStructOctetStringListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::TestCluster::Structs::TestListStructOctet::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"fabricIndex" : [NSNumber numberWithUnsignedLongLong:entry.fabricIndex],
            @"operationalCert" : [NSData dataWithBytes:entry.operationalCert.data() length:entry.operationalCert.size()],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTestClusterListNullablesAndOptionalsStructListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::TestCluster::Structs::NullablesAndOptionalsStruct::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {}];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsNeighborTableListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::ThreadNetworkDiagnostics::Structs::NeighborTable::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"ExtAddress" : [NSNumber numberWithUnsignedLongLong:entry.extAddress],
            @"Age" : [NSNumber numberWithUnsignedInt:entry.age],
            @"Rloc16" : [NSNumber numberWithUnsignedShort:entry.rloc16],
            @"LinkFrameCounter" : [NSNumber numberWithUnsignedInt:entry.linkFrameCounter],
            @"MleFrameCounter" : [NSNumber numberWithUnsignedInt:entry.mleFrameCounter],
            @"LQI" : [NSNumber numberWithUnsignedChar:entry.lqi],
            @"AverageRssi" : [NSNumber numberWithChar:entry.averageRssi],
            @"LastRssi" : [NSNumber numberWithChar:entry.lastRssi],
            @"FrameErrorRate" : [NSNumber numberWithUnsignedChar:entry.frameErrorRate],
            @"MessageErrorRate" : [NSNumber numberWithUnsignedChar:entry.messageErrorRate],
            @"RxOnWhenIdle" : [NSNumber numberWithBool:entry.rxOnWhenIdle],
            @"FullThreadDevice" : [NSNumber numberWithBool:entry.fullThreadDevice],
            @"FullNetworkData" : [NSNumber numberWithBool:entry.fullNetworkData],
            @"IsChild" : [NSNumber numberWithBool:entry.isChild],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsRouteTableListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::ThreadNetworkDiagnostics::Structs::RouteTable::DecodableType> &
        list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"ExtAddress" : [NSNumber numberWithUnsignedLongLong:entry.extAddress],
            @"Rloc16" : [NSNumber numberWithUnsignedShort:entry.rloc16],
            @"RouterId" : [NSNumber numberWithUnsignedChar:entry.routerId],
            @"NextHop" : [NSNumber numberWithUnsignedChar:entry.nextHop],
            @"PathCost" : [NSNumber numberWithUnsignedChar:entry.pathCost],
            @"LQIIn" : [NSNumber numberWithUnsignedChar:entry.LQIIn],
            @"LQIOut" : [NSNumber numberWithUnsignedChar:entry.LQIOut],
            @"Age" : [NSNumber numberWithUnsignedChar:entry.age],
            @"Allocated" : [NSNumber numberWithBool:entry.allocated],
            @"LinkEstablished" : [NSNumber numberWithBool:entry.linkEstablished],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsSecurityPolicyListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::ThreadNetworkDiagnostics::Structs::SecurityPolicy::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"RotationTime" : [NSNumber numberWithUnsignedShort:entry.rotationTime],
            @"Flags" : [NSNumber numberWithUnsignedShort:entry.flags],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsOperationalDatasetComponentsListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::ThreadNetworkDiagnostics::Structs::OperationalDatasetComponents::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"ActiveTimestampPresent" : [NSNumber numberWithBool:entry.activeTimestampPresent],
            @"PendingTimestampPresent" : [NSNumber numberWithBool:entry.pendingTimestampPresent],
            @"MasterKeyPresent" : [NSNumber numberWithBool:entry.masterKeyPresent],
            @"NetworkNamePresent" : [NSNumber numberWithBool:entry.networkNamePresent],
            @"ExtendedPanIdPresent" : [NSNumber numberWithBool:entry.extendedPanIdPresent],
            @"MeshLocalPrefixPresent" : [NSNumber numberWithBool:entry.meshLocalPrefixPresent],
            @"DelayPresent" : [NSNumber numberWithBool:entry.delayPresent],
            @"PanIdPresent" : [NSNumber numberWithBool:entry.panIdPresent],
            @"ChannelPresent" : [NSNumber numberWithBool:entry.channelPresent],
            @"PskcPresent" : [NSNumber numberWithBool:entry.pskcPresent],
            @"SecurityPolicyPresent" : [NSNumber numberWithBool:entry.securityPolicyPresent],
            @"ChannelMaskPresent" : [NSNumber numberWithBool:entry.channelMaskPresent],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::app::Clusters::ThreadNetworkDiagnostics::NetworkFault> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSNumber numberWithUnsignedChar:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPAccountLoginClusterGetSetupPINResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::AccountLogin::Commands::GetSetupPINResponse::DecodableType & data)
{
    id response = @ {
        @"setupPIN" : [[NSString alloc] initWithBytes:data.setupPIN.data()
                                               length:data.setupPIN.size()
                                             encoding:NSUTF8StringEncoding],
    };
    DispatchSuccess(context, response);
};

void CHIPApplicationLauncherClusterLaunchAppResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::ApplicationLauncher::Commands::LaunchAppResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
        @"data" : [[NSString alloc] initWithBytes:data.data.data() length:data.data.size() encoding:NSUTF8StringEncoding],
    };
    DispatchSuccess(context, response);
};

void CHIPContentLauncherClusterLaunchContentResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::ContentLauncher::Commands::LaunchContentResponse::DecodableType & data)
{
    id response = @ {
        @"data" : [[NSString alloc] initWithBytes:data.data.data() length:data.data.size() encoding:NSUTF8StringEncoding],
        @"contentLaunchStatus" : [NSNumber numberWithUnsignedChar:data.contentLaunchStatus],
    };
    DispatchSuccess(context, response);
};

void CHIPContentLauncherClusterLaunchURLResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::ContentLauncher::Commands::LaunchURLResponse::DecodableType & data)
{
    id response = @ {
        @"data" : [[NSString alloc] initWithBytes:data.data.data() length:data.data.size() encoding:NSUTF8StringEncoding],
        @"contentLaunchStatus" : [NSNumber numberWithUnsignedChar:data.contentLaunchStatus],
    };
    DispatchSuccess(context, response);
};

void CHIPDiagnosticLogsClusterRetrieveLogsResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DiagnosticLogs::Commands::RetrieveLogsResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
        @"content" : [NSData dataWithBytes:data.content.data() length:data.content.size()],
        @"timeStamp" : [NSNumber numberWithUnsignedInt:data.timeStamp],
        @"timeSinceBoot" : [NSNumber numberWithUnsignedInt:data.timeSinceBoot],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearAllPinsResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearAllPinsResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearAllRfidsResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearAllRfidsResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearHolidayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearHolidayScheduleResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearPinResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearPinResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearRfidResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearRfidResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearWeekdayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearWeekdayScheduleResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearYeardayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearYeardayScheduleResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetHolidayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetHolidayScheduleResponse::DecodableType & data)
{
    id response = @ {
        @"scheduleId" : [NSNumber numberWithUnsignedChar:data.scheduleId],
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
        @"localStartTime" : [NSNumber numberWithUnsignedInt:data.localStartTime],
        @"localEndTime" : [NSNumber numberWithUnsignedInt:data.localEndTime],
        @"operatingModeDuringHoliday" : [NSNumber numberWithUnsignedChar:data.operatingModeDuringHoliday],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetLogRecordResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetLogRecordResponse::DecodableType & data)
{
    id response = @ {
        @"logEntryId" : [NSNumber numberWithUnsignedShort:data.logEntryId],
        @"timestamp" : [NSNumber numberWithUnsignedInt:data.timestamp],
        @"eventType" : [NSNumber numberWithUnsignedChar:data.eventType],
        @"source" : [NSNumber numberWithUnsignedChar:data.source],
        @"eventIdOrAlarmCode" : [NSNumber numberWithUnsignedChar:data.eventIdOrAlarmCode],
        @"userId" : [NSNumber numberWithUnsignedShort:data.userId],
        @"pin" : [NSData dataWithBytes:data.pin.data() length:data.pin.size()],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetPinResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetPinResponse::DecodableType & data)
{
    id response = @ {
        @"userId" : [NSNumber numberWithUnsignedShort:data.userId],
        @"userStatus" : [NSNumber numberWithUnsignedChar:data.userStatus],
        @"userType" : [NSNumber numberWithUnsignedChar:data.userType],
        @"pin" : [NSData dataWithBytes:data.pin.data() length:data.pin.size()],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetRfidResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetRfidResponse::DecodableType & data)
{
    id response = @ {
        @"userId" : [NSNumber numberWithUnsignedShort:data.userId],
        @"userStatus" : [NSNumber numberWithUnsignedChar:data.userStatus],
        @"userType" : [NSNumber numberWithUnsignedChar:data.userType],
        @"rfid" : [NSData dataWithBytes:data.rfid.data() length:data.rfid.size()],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetUserTypeResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetUserTypeResponse::DecodableType & data)
{
    id response = @ {
        @"userId" : [NSNumber numberWithUnsignedShort:data.userId],
        @"userType" : [NSNumber numberWithUnsignedChar:data.userType],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetWeekdayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetWeekdayScheduleResponse::DecodableType & data)
{
    id response = @ {
        @"scheduleId" : [NSNumber numberWithUnsignedChar:data.scheduleId],
        @"userId" : [NSNumber numberWithUnsignedShort:data.userId],
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
        @"daysMask" : [NSNumber numberWithUnsignedChar:data.daysMask],
        @"startHour" : [NSNumber numberWithUnsignedChar:data.startHour],
        @"startMinute" : [NSNumber numberWithUnsignedChar:data.startMinute],
        @"endHour" : [NSNumber numberWithUnsignedChar:data.endHour],
        @"endMinute" : [NSNumber numberWithUnsignedChar:data.endMinute],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetYeardayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetYeardayScheduleResponse::DecodableType & data)
{
    id response = @ {
        @"scheduleId" : [NSNumber numberWithUnsignedChar:data.scheduleId],
        @"userId" : [NSNumber numberWithUnsignedShort:data.userId],
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
        @"localStartTime" : [NSNumber numberWithUnsignedInt:data.localStartTime],
        @"localEndTime" : [NSNumber numberWithUnsignedInt:data.localEndTime],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterLockDoorResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::LockDoorResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetHolidayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetHolidayScheduleResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetPinResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetPinResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetRfidResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetRfidResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetUserTypeResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetUserTypeResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetWeekdayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetWeekdayScheduleResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetYeardayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetYeardayScheduleResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterUnlockDoorResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::UnlockDoorResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
    };
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterUnlockWithTimeoutResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::UnlockWithTimeoutResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
    };
    DispatchSuccess(context, response);
};

void CHIPGeneralCommissioningClusterArmFailSafeResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::GeneralCommissioning::Commands::ArmFailSafeResponse::DecodableType & data)
{
    id response = @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:data.errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:data.debugText.data()
                                                length:data.debugText.size()
                                              encoding:NSUTF8StringEncoding],
    };
    DispatchSuccess(context, response);
};

void CHIPGeneralCommissioningClusterCommissioningCompleteResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::GeneralCommissioning::Commands::CommissioningCompleteResponse::DecodableType & data)
{
    id response = @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:data.errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:data.debugText.data()
                                                length:data.debugText.size()
                                              encoding:NSUTF8StringEncoding],
    };
    DispatchSuccess(context, response);
};

void CHIPGeneralCommissioningClusterSetRegulatoryConfigResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::GeneralCommissioning::Commands::SetRegulatoryConfigResponse::DecodableType & data)
{
    id response = @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:data.errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:data.debugText.data()
                                                length:data.debugText.size()
                                              encoding:NSUTF8StringEncoding],
    };
    DispatchSuccess(context, response);
};

void CHIPGroupsClusterAddGroupResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Groups::Commands::AddGroupResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
        @"groupId" : [NSNumber numberWithUnsignedShort:data.groupId],
    };
    DispatchSuccess(context, response);
};

void CHIPGroupsClusterGetGroupMembershipResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Groups::Commands::GetGroupMembershipResponse::DecodableType & data)
{
    id response = @ {
        @"capacity" : [NSNumber numberWithUnsignedChar:data.capacity],
        @"groupCount" : [NSNumber numberWithUnsignedChar:data.groupCount],
        @"groupList" : [NSNull null], /* Array - Conversion from this type to Objc is not properly implemented yet */
    };
    DispatchSuccess(context, response);
};

void CHIPGroupsClusterRemoveGroupResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Groups::Commands::RemoveGroupResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
        @"groupId" : [NSNumber numberWithUnsignedShort:data.groupId],
    };
    DispatchSuccess(context, response);
};

void CHIPGroupsClusterViewGroupResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Groups::Commands::ViewGroupResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
        @"groupId" : [NSNumber numberWithUnsignedShort:data.groupId],
        @"groupName" : [[NSString alloc] initWithBytes:data.groupName.data()
                                                length:data.groupName.size()
                                              encoding:NSUTF8StringEncoding],
    };
    DispatchSuccess(context, response);
};

void CHIPIdentifyClusterIdentifyQueryResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Identify::Commands::IdentifyQueryResponse::DecodableType & data)
{
    id response = @ {
        @"timeout" : [NSNumber numberWithUnsignedShort:data.timeout],
    };
    DispatchSuccess(context, response);
};

void CHIPKeypadInputClusterSendKeyResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::KeypadInput::Commands::SendKeyResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
    };
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaFastForwardResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaFastForwardResponse::DecodableType & data)
{
    id response = @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus],
    };
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaNextResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaNextResponse::DecodableType & data)
{
    id response = @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus],
    };
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaPauseResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaPauseResponse::DecodableType & data)
{
    id response = @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus],
    };
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaPlayResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaPlayResponse::DecodableType & data)
{
    id response = @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus],
    };
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaPreviousResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaPreviousResponse::DecodableType & data)
{
    id response = @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus],
    };
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaRewindResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaRewindResponse::DecodableType & data)
{
    id response = @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus],
    };
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaSeekResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaSeekResponse::DecodableType & data)
{
    id response = @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus],
    };
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaSkipBackwardResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaSkipBackwardResponse::DecodableType & data)
{
    id response = @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus],
    };
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaSkipForwardResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaSkipForwardResponse::DecodableType & data)
{
    id response = @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus],
    };
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaStartOverResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaStartOverResponse::DecodableType & data)
{
    id response = @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus],
    };
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaStopResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaStopResponse::DecodableType & data)
{
    id response = @ {
        @"mediaPlaybackStatus" : [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus],
    };
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterAddThreadNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::AddThreadNetworkResponse::DecodableType & data)
{
    id response = @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:data.errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:data.debugText.data()
                                                length:data.debugText.size()
                                              encoding:NSUTF8StringEncoding],
    };
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterAddWiFiNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::AddWiFiNetworkResponse::DecodableType & data)
{
    id response = @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:data.errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:data.debugText.data()
                                                length:data.debugText.size()
                                              encoding:NSUTF8StringEncoding],
    };
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterDisableNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::DisableNetworkResponse::DecodableType & data)
{
    id response = @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:data.errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:data.debugText.data()
                                                length:data.debugText.size()
                                              encoding:NSUTF8StringEncoding],
    };
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterEnableNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::EnableNetworkResponse::DecodableType & data)
{
    id response = @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:data.errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:data.debugText.data()
                                                length:data.debugText.size()
                                              encoding:NSUTF8StringEncoding],
    };
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterRemoveNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::RemoveNetworkResponse::DecodableType & data)
{
    id response = @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:data.errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:data.debugText.data()
                                                length:data.debugText.size()
                                              encoding:NSUTF8StringEncoding],
    };
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterScanNetworksResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::ScanNetworksResponse::DecodableType & data)
{
    id response = @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:data.errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:data.debugText.data()
                                                length:data.debugText.size()
                                              encoding:NSUTF8StringEncoding],
        @"wifiScanResults" : [NSNull null], /* Array - Conversion from this type to Objc is not properly implemented yet */
        @"threadScanResults" : [NSNull null], /* Array - Conversion from this type to Objc is not properly implemented yet */
    };
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterUpdateThreadNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::UpdateThreadNetworkResponse::DecodableType & data)
{
    id response = @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:data.errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:data.debugText.data()
                                                length:data.debugText.size()
                                              encoding:NSUTF8StringEncoding],
    };
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterUpdateWiFiNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::UpdateWiFiNetworkResponse::DecodableType & data)
{
    id response = @ {
        @"errorCode" : [NSNumber numberWithUnsignedChar:data.errorCode],
        @"debugText" : [[NSString alloc] initWithBytes:data.debugText.data()
                                                length:data.debugText.size()
                                              encoding:NSUTF8StringEncoding],
    };
    DispatchSuccess(context, response);
};

void CHIPOtaSoftwareUpdateProviderClusterApplyUpdateResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::ApplyUpdateResponse::DecodableType & data)
{
    id response = @ {
        @"action" : [NSNumber numberWithUnsignedChar:data.action],
        @"delayedActionTime" : [NSNumber numberWithUnsignedInt:data.delayedActionTime],
    };
    DispatchSuccess(context, response);
};

void CHIPOtaSoftwareUpdateProviderClusterQueryImageResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::QueryImageResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
        @"delayedActionTime" : data.delayedActionTime.HasValue() == false
            ? [NSNull null]
            : [NSNumber numberWithUnsignedInt:data.delayedActionTime.Value()],
        @"imageURI" : data.imageURI.HasValue() == false ? [NSNull null]
                                                        : [[NSString alloc] initWithBytes:data.imageURI.Value().data()
                                                                                   length:data.imageURI.Value().size()
                                                                                 encoding:NSUTF8StringEncoding],
        @"softwareVersion" : data.softwareVersion.HasValue() == false
            ? [NSNull null]
            : [NSNumber numberWithUnsignedInt:data.softwareVersion.Value()],
        @"softwareVersionString" : data.softwareVersionString.HasValue() == false
            ? [NSNull null]
            : [[NSString alloc] initWithBytes:data.softwareVersionString.Value().data()
                                       length:data.softwareVersionString.Value().size()
                                     encoding:NSUTF8StringEncoding],
        @"updateToken" : data.updateToken.HasValue() == false ? [NSNull null]
                                                              : [NSData dataWithBytes:data.updateToken.Value().data()
                                                                               length:data.updateToken.Value().size()],
        @"userConsentNeeded" : data.userConsentNeeded.HasValue() == false
            ? [NSNull null]
            : [NSNumber numberWithBool:data.userConsentNeeded.Value()],
        @"metadataForRequestor" : data.metadataForRequestor.HasValue() == false
            ? [NSNull null]
            : [NSData dataWithBytes:data.metadataForRequestor.Value().data() length:data.metadataForRequestor.Value().size()],
    };
    DispatchSuccess(context, response);
};

void CHIPOperationalCredentialsClusterAttestationResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::AttestationResponse::DecodableType & data)
{
    id response = @ {
        @"AttestationElements" : [NSData dataWithBytes:data.attestationElements.data() length:data.attestationElements.size()],
        @"Signature" : [NSData dataWithBytes:data.signature.data() length:data.signature.size()],
    };
    DispatchSuccess(context, response);
};

void CHIPOperationalCredentialsClusterCertificateChainResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::CertificateChainResponse::DecodableType & data)
{
    id response = @ {
        @"Certificate" : [NSData dataWithBytes:data.certificate.data() length:data.certificate.size()],
    };
    DispatchSuccess(context, response);
};

void CHIPOperationalCredentialsClusterNOCResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::NOCResponse::DecodableType & data)
{
    id response = @ {
        @"StatusCode" : [NSNumber numberWithUnsignedChar:data.statusCode],
        @"FabricIndex" : [NSNumber numberWithUnsignedChar:data.fabricIndex],
        @"DebugText" : [[NSString alloc] initWithBytes:data.debugText.data()
                                                length:data.debugText.size()
                                              encoding:NSUTF8StringEncoding],
    };
    DispatchSuccess(context, response);
};

void CHIPOperationalCredentialsClusterOpCSRResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::OpCSRResponse::DecodableType & data)
{
    id response = @ {
        @"NOCSRElements" : [NSData dataWithBytes:data.NOCSRElements.data() length:data.NOCSRElements.size()],
        @"AttestationSignature" : [NSData dataWithBytes:data.attestationSignature.data() length:data.attestationSignature.size()],
    };
    DispatchSuccess(context, response);
};

void CHIPScenesClusterAddSceneResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::AddSceneResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
        @"groupId" : [NSNumber numberWithUnsignedShort:data.groupId],
        @"sceneId" : [NSNumber numberWithUnsignedChar:data.sceneId],
    };
    DispatchSuccess(context, response);
};

void CHIPScenesClusterGetSceneMembershipResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::GetSceneMembershipResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
        @"capacity" : [NSNumber numberWithUnsignedChar:data.capacity],
        @"groupId" : [NSNumber numberWithUnsignedShort:data.groupId],
        @"sceneCount" : [NSNumber numberWithUnsignedChar:data.sceneCount],
        @"sceneList" : [NSNull null], /* Array - Conversion from this type to Objc is not properly implemented yet */
    };
    DispatchSuccess(context, response);
};

void CHIPScenesClusterRemoveAllScenesResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::RemoveAllScenesResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
        @"groupId" : [NSNumber numberWithUnsignedShort:data.groupId],
    };
    DispatchSuccess(context, response);
};

void CHIPScenesClusterRemoveSceneResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::RemoveSceneResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
        @"groupId" : [NSNumber numberWithUnsignedShort:data.groupId],
        @"sceneId" : [NSNumber numberWithUnsignedChar:data.sceneId],
    };
    DispatchSuccess(context, response);
};

void CHIPScenesClusterStoreSceneResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::StoreSceneResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
        @"groupId" : [NSNumber numberWithUnsignedShort:data.groupId],
        @"sceneId" : [NSNumber numberWithUnsignedChar:data.sceneId],
    };
    DispatchSuccess(context, response);
};

void CHIPScenesClusterViewSceneResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::ViewSceneResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
        @"groupId" : [NSNumber numberWithUnsignedShort:data.groupId],
        @"sceneId" : [NSNumber numberWithUnsignedChar:data.sceneId],
        @"transitionTime" : [NSNumber numberWithUnsignedShort:data.transitionTime],
        @"sceneName" : [[NSString alloc] initWithBytes:data.sceneName.data()
                                                length:data.sceneName.size()
                                              encoding:NSUTF8StringEncoding],
        @"extensionFieldSets" : [NSNull null], /* Array - Conversion from this type to Objc is not properly implemented yet */
    };
    DispatchSuccess(context, response);
};

void CHIPTvChannelClusterChangeChannelResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TvChannel::Commands::ChangeChannelResponse::DecodableType & data)
{
    id response = @ {
        @"ChannelMatch" : [NSNull null], /* Array - Conversion from this type to Objc is not properly implemented yet */
        @"ErrorType" : [NSNumber numberWithUnsignedChar:data.errorType],
    };
    DispatchSuccess(context, response);
};

void CHIPTargetNavigatorClusterNavigateTargetResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TargetNavigator::Commands::NavigateTargetResponse::DecodableType & data)
{
    id response = @ {
        @"status" : [NSNumber numberWithUnsignedChar:data.status],
        @"data" : [[NSString alloc] initWithBytes:data.data.data() length:data.data.size() encoding:NSUTF8StringEncoding],
    };
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterBooleanResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::BooleanResponse::DecodableType & data)
{
    id response = @ {
        @"value" : [NSNumber numberWithBool:data.value],
    };
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterTestAddArgumentsResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::TestAddArgumentsResponse::DecodableType & data)
{
    id response = @ {
        @"returnValue" : [NSNumber numberWithUnsignedChar:data.returnValue],
    };
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterTestEnumsResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::TestEnumsResponse::DecodableType & data)
{
    id response = @ {
        @"arg1" : [NSNumber numberWithUnsignedShort:data.arg1],
        @"arg2" : [NSNumber numberWithUnsignedChar:data.arg2],
    };
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterTestListInt8UReverseResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::TestListInt8UReverseResponse::DecodableType & data)
{
    id response = @ {
        @"arg1" : [NSNull null], /* Array - Conversion from this type to Objc is not properly implemented yet */
    };
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterTestNullableOptionalResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::TestNullableOptionalResponse::DecodableType & data)
{
    id response = @ {
        @"wasPresent" : [NSNumber numberWithBool:data.wasPresent],
        @"wasNull" : data.wasNull.HasValue() == false ? [NSNull null] : [NSNumber numberWithBool:data.wasNull.Value()],
        @"value" : data.value.HasValue() == false ? [NSNull null] : [NSNumber numberWithUnsignedChar:data.value.Value()],
        @"originalValue" : data.originalValue.HasValue() == false
            ? [NSNull null]
            : data.originalValue.Value().IsNull() ? [NSNull null]
                                                  : [NSNumber numberWithUnsignedChar:data.originalValue.Value().Value()],
    };
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterTestSpecificResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::TestSpecificResponse::DecodableType & data)
{
    id response = @ {
        @"returnValue" : [NSNumber numberWithUnsignedChar:data.returnValue],
    };
    DispatchSuccess(context, response);
};
