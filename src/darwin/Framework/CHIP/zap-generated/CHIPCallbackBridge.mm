/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#import "CHIPCallbackBridge_internal.h"
#import "CHIPCommandPayloadsObjc.h"
#import "CHIPStructsObjc.h"

void CHIPDefaultSuccessCallbackBridge::OnSuccessFn(void * context) { DispatchSuccess(context, nil); };

void CHIPOctetStringAttributeCallbackBridge::OnSuccessFn(void * context, chip::ByteSpan value)
{
    DispatchSuccess(context, @ { @"value" : [NSData dataWithBytes:value.data() length:value.size()] });
};

void CHIPCharStringAttributeCallbackBridge::OnSuccessFn(void * context, chip::CharSpan value)
{
    DispatchSuccess(
        context, @ { @"value" : [[NSString alloc] initWithBytes:value.data() length:value.size() encoding:NSUTF8StringEncoding] });
};

void CHIPBooleanAttributeCallbackBridge::OnSuccessFn(void * context, bool value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithBool:value] });
};

void CHIPInt8uAttributeCallbackBridge::OnSuccessFn(void * context, uint8_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithUnsignedChar:value] });
};

void CHIPInt8sAttributeCallbackBridge::OnSuccessFn(void * context, int8_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithChar:value] });
};

void CHIPInt16uAttributeCallbackBridge::OnSuccessFn(void * context, uint16_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithUnsignedShort:value] });
};

void CHIPInt16sAttributeCallbackBridge::OnSuccessFn(void * context, int16_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithShort:value] });
};

void CHIPInt32uAttributeCallbackBridge::OnSuccessFn(void * context, uint32_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithUnsignedInt:value] });
};

void CHIPInt32sAttributeCallbackBridge::OnSuccessFn(void * context, int32_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithInt:value] });
};

void CHIPInt64uAttributeCallbackBridge::OnSuccessFn(void * context, uint64_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithUnsignedLongLong:value] });
};

void CHIPInt64sAttributeCallbackBridge::OnSuccessFn(void * context, int64_t value)
{
    DispatchSuccess(context, @ { @"value" : [NSNumber numberWithLongLong:value] });
};

void CHIPApplicationLauncherApplicationLauncherListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<uint16_t> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSNumber numberWithUnsignedShort:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPAudioOutputAudioOutputListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::AudioOutput::Structs::AudioOutputInfo::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"Index" : [NSNumber numberWithUnsignedChar:entry.index],
            @"OutputType" : [NSNumber numberWithUnsignedChar:entry.outputType],
            @"Name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPBridgedActionsActionListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::BridgedActions::Structs::ActionStruct::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"ActionID" : [NSNumber numberWithUnsignedShort:entry.actionID],
            @"Name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
            @"Type" : [NSNumber numberWithUnsignedChar:entry.type],
            @"EndpointListID" : [NSNumber numberWithUnsignedShort:entry.endpointListID],
            @"SupportedCommands" : [NSNumber numberWithUnsignedShort:entry.supportedCommands],
            @"Status" : [NSNumber numberWithUnsignedChar:entry.status],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPBridgedActionsEndpointListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::BridgedActions::Structs::EndpointListStruct::DecodableType> &
        list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"EndpointListID" : [NSNumber numberWithUnsignedShort:entry.endpointListID],
            @"Name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
            @"Type" : [NSNumber numberWithUnsignedChar:entry.type],
            @"Endpoints" : [NSData dataWithBytes:entry.endpoints.data() length:entry.endpoints.size()],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPContentLauncherAcceptsHeaderListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSData dataWithBytes:entry.data() length:entry.size()]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPContentLauncherSupportedStreamingTypesListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::ContentLauncher::ContentLaunchStreamingType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSNumber numberWithUnsignedChar:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPDescriptorDeviceListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::Descriptor::Structs::DeviceType::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"Type" : [NSNumber numberWithUnsignedInt:entry.type],
            @"Revision" : [NSNumber numberWithUnsignedShort:entry.revision],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPDescriptorServerListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ClusterId> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSNumber numberWithUnsignedInt:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPDescriptorClientListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ClusterId> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSNumber numberWithUnsignedInt:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPDescriptorPartsListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::EndpointId> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSNumber numberWithUnsignedShort:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPFixedLabelLabelListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::FixedLabel::Structs::LabelStruct::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"Label" : [[NSString alloc] initWithBytes:entry.label.data() length:entry.label.size() encoding:NSUTF8StringEncoding],
            @"Value" : [[NSString alloc] initWithBytes:entry.value.data() length:entry.value.size() encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPGeneralCommissioningBasicCommissioningInfoListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::GeneralCommissioning::Structs::BasicCommissioningInfoType::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"FailSafeExpiryLengthMs" : [NSNumber numberWithUnsignedInt:entry.failSafeExpiryLengthMs],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::GeneralDiagnostics::Structs::NetworkInterfaceType::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"Name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
            @"FabricConnected" : [NSNumber numberWithBool:entry.fabricConnected],
            @"OffPremiseServicesReachableIPv4" : [NSNumber numberWithBool:entry.offPremiseServicesReachableIPv4],
            @"OffPremiseServicesReachableIPv6" : [NSNumber numberWithBool:entry.offPremiseServicesReachableIPv6],
            @"HardwareAddress" : [NSData dataWithBytes:entry.hardwareAddress.data() length:entry.hardwareAddress.size()],
            @"Type" : [NSNumber numberWithUnsignedChar:entry.type],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPGroupKeyManagementGroupsListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::GroupKeyManagement::Structs::GroupState::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"VendorId" : [NSNumber numberWithUnsignedShort:entry.vendorId],
            @"VendorGroupId" : [NSNumber numberWithUnsignedShort:entry.vendorGroupId],
            @"GroupKeySetIndex" : [NSNumber numberWithUnsignedShort:entry.groupKeySetIndex],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPGroupKeyManagementGroupKeysListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::GroupKeyManagement::Structs::GroupKey::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"VendorId" : [NSNumber numberWithUnsignedShort:entry.vendorId],
            @"GroupKeyIndex" : [NSNumber numberWithUnsignedShort:entry.groupKeyIndex],
            @"GroupKeyRoot" : [NSData dataWithBytes:entry.groupKeyRoot.data() length:entry.groupKeyRoot.size()],
            @"GroupKeyEpochStartTime" : [NSNumber numberWithUnsignedLongLong:entry.groupKeyEpochStartTime],
            @"GroupKeySecurityPolicy" : [NSNumber numberWithUnsignedChar:entry.groupKeySecurityPolicy],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPMediaInputMediaInputListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::MediaInput::Structs::MediaInputInfo::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"Index" : [NSNumber numberWithUnsignedChar:entry.index],
            @"InputType" : [NSNumber numberWithUnsignedChar:entry.inputType],
            @"Name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
            @"Description" : [[NSString alloc] initWithBytes:entry.description.data()
                                                      length:entry.description.size()
                                                    encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPModeSelectSupportedModesListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::ModeSelect::Structs::ModeOptionStruct::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"Label" : [[NSString alloc] initWithBytes:entry.label.data() length:entry.label.size() encoding:NSUTF8StringEncoding],
            @"Mode" : [NSNumber numberWithUnsignedChar:entry.mode],
            @"SemanticTag" : [NSNumber numberWithUnsignedInt:entry.semanticTag],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPOperationalCredentialsFabricsListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::OperationalCredentials::Structs::FabricDescriptor::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"FabricIndex" : [NSNumber numberWithUnsignedChar:entry.fabricIndex],
            @"RootPublicKey" : [NSData dataWithBytes:entry.rootPublicKey.data() length:entry.rootPublicKey.size()],
            @"VendorId" : [NSNumber numberWithUnsignedShort:entry.vendorId],
            @"FabricId" : [NSNumber numberWithUnsignedLongLong:entry.fabricId],
            @"NodeId" : [NSNumber numberWithUnsignedLongLong:entry.nodeId],
            @"Label" : [[NSString alloc] initWithBytes:entry.label.data() length:entry.label.size() encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPOperationalCredentialsTrustedRootCertificatesListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSData dataWithBytes:entry.data() length:entry.size()]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPPowerSourceActiveBatteryFaultsListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<uint8_t> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSNumber numberWithUnsignedChar:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPSoftwareDiagnosticsThreadMetricsListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::SoftwareDiagnostics::Structs::ThreadMetrics::DecodableType> &
        list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"Id" : [NSNumber numberWithUnsignedLongLong:entry.id],
            @"Name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
            @"StackFreeCurrent" : [NSNumber numberWithUnsignedInt:entry.stackFreeCurrent],
            @"StackFreeMinimum" : [NSNumber numberWithUnsignedInt:entry.stackFreeMinimum],
            @"StackSize" : [NSNumber numberWithUnsignedInt:entry.stackSize],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTvChannelTvChannelListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::TvChannel::Structs::TvChannelInfo::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"MajorNumber" : [NSNumber numberWithUnsignedShort:entry.majorNumber],
            @"MinorNumber" : [NSNumber numberWithUnsignedShort:entry.minorNumber],
            @"Name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
            @"CallSign" : [[NSString alloc] initWithBytes:entry.callSign.data()
                                                   length:entry.callSign.size()
                                                 encoding:NSUTF8StringEncoding],
            @"AffiliateCallSign" : [[NSString alloc] initWithBytes:entry.affiliateCallSign.data()
                                                            length:entry.affiliateCallSign.size()
                                                          encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTargetNavigatorTargetNavigatorListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::TargetNavigator::Structs::NavigateTargetTargetInfo::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"Identifier" : [NSNumber numberWithUnsignedChar:entry.identifier],
            @"Name" : [[NSString alloc] initWithBytes:entry.name.data() length:entry.name.size() encoding:NSUTF8StringEncoding],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTestClusterListInt8uListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<uint8_t> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSNumber numberWithUnsignedChar:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTestClusterListOctetStringListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSData dataWithBytes:entry.data() length:entry.size()]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTestClusterListStructOctetStringListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::TestCluster::Structs::TestListStructOctet::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"FabricIndex" : [NSNumber numberWithUnsignedLongLong:entry.fabricIndex],
            @"OperationalCert" : [NSData dataWithBytes:entry.operationalCert.data() length:entry.operationalCert.size()],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPTestClusterListNullablesAndOptionalsStructListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::TestCluster::Structs::NullablesAndOptionalsStruct::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {}];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsNeighborTableListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::ThreadNetworkDiagnostics::Structs::NeighborTable::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"ExtAddress" : [NSNumber numberWithUnsignedLongLong:entry.extAddress],
            @"Age" : [NSNumber numberWithUnsignedInt:entry.age],
            @"Rloc16" : [NSNumber numberWithUnsignedShort:entry.rloc16],
            @"LinkFrameCounter" : [NSNumber numberWithUnsignedInt:entry.linkFrameCounter],
            @"MleFrameCounter" : [NSNumber numberWithUnsignedInt:entry.mleFrameCounter],
            @"Lqi" : [NSNumber numberWithUnsignedChar:entry.lqi],
            @"AverageRssi" : [NSNumber numberWithChar:entry.averageRssi],
            @"LastRssi" : [NSNumber numberWithChar:entry.lastRssi],
            @"FrameErrorRate" : [NSNumber numberWithUnsignedChar:entry.frameErrorRate],
            @"MessageErrorRate" : [NSNumber numberWithUnsignedChar:entry.messageErrorRate],
            @"RxOnWhenIdle" : [NSNumber numberWithBool:entry.rxOnWhenIdle],
            @"FullThreadDevice" : [NSNumber numberWithBool:entry.fullThreadDevice],
            @"FullNetworkData" : [NSNumber numberWithBool:entry.fullNetworkData],
            @"IsChild" : [NSNumber numberWithBool:entry.isChild],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsRouteTableListListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::ThreadNetworkDiagnostics::Structs::RouteTable::DecodableType> &
        list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"ExtAddress" : [NSNumber numberWithUnsignedLongLong:entry.extAddress],
            @"Rloc16" : [NSNumber numberWithUnsignedShort:entry.rloc16],
            @"RouterId" : [NSNumber numberWithUnsignedChar:entry.routerId],
            @"NextHop" : [NSNumber numberWithUnsignedChar:entry.nextHop],
            @"PathCost" : [NSNumber numberWithUnsignedChar:entry.pathCost],
            @"LQIIn" : [NSNumber numberWithUnsignedChar:entry.LQIIn],
            @"LQIOut" : [NSNumber numberWithUnsignedChar:entry.LQIOut],
            @"Age" : [NSNumber numberWithUnsignedChar:entry.age],
            @"Allocated" : [NSNumber numberWithBool:entry.allocated],
            @"LinkEstablished" : [NSNumber numberWithBool:entry.linkEstablished],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsSecurityPolicyListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::ThreadNetworkDiagnostics::Structs::SecurityPolicy::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"RotationTime" : [NSNumber numberWithUnsignedShort:entry.rotationTime],
            @"Flags" : [NSNumber numberWithUnsignedShort:entry.flags],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsOperationalDatasetComponentsListAttributeCallbackBridge::OnSuccessFn(void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::ThreadNetworkDiagnostics::Structs::OperationalDatasetComponents::DecodableType> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:@ {
            @"ActiveTimestampPresent" : [NSNumber numberWithBool:entry.activeTimestampPresent],
            @"PendingTimestampPresent" : [NSNumber numberWithBool:entry.pendingTimestampPresent],
            @"MasterKeyPresent" : [NSNumber numberWithBool:entry.masterKeyPresent],
            @"NetworkNamePresent" : [NSNumber numberWithBool:entry.networkNamePresent],
            @"ExtendedPanIdPresent" : [NSNumber numberWithBool:entry.extendedPanIdPresent],
            @"MeshLocalPrefixPresent" : [NSNumber numberWithBool:entry.meshLocalPrefixPresent],
            @"DelayPresent" : [NSNumber numberWithBool:entry.delayPresent],
            @"PanIdPresent" : [NSNumber numberWithBool:entry.panIdPresent],
            @"ChannelPresent" : [NSNumber numberWithBool:entry.channelPresent],
            @"PskcPresent" : [NSNumber numberWithBool:entry.pskcPresent],
            @"SecurityPolicyPresent" : [NSNumber numberWithBool:entry.securityPolicyPresent],
            @"ChannelMaskPresent" : [NSNumber numberWithBool:entry.channelMaskPresent],
        }];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge::OnSuccessFn(
    void * context, const chip::app::DataModel::DecodableList<chip::app::Clusters::ThreadNetworkDiagnostics::NetworkFault> & list)
{
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next()) {
        auto & entry = iter.GetValue();
        (void) entry; // All our types below might be unsupported
        [array addObject:[NSNumber numberWithUnsignedChar:entry]];
    }
    if (iter.GetStatus() != CHIP_NO_ERROR) {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @ { @"value" : array });
};

void CHIPAccountLoginClusterGetSetupPINResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::AccountLogin::Commands::GetSetupPINResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.setupPIN.data() length:data.setupPIN.size() encoding:NSUTF8StringEncoding];
        response[@"SetupPIN"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPApplicationLauncherClusterLaunchAppResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::ApplicationLauncher::Commands::LaunchAppResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.data.data() length:data.data.size() encoding:NSUTF8StringEncoding];
        response[@"Data"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPContentLauncherClusterLaunchContentResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::ContentLauncher::Commands::LaunchContentResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.data.data() length:data.data.size() encoding:NSUTF8StringEncoding];
        response[@"Data"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.contentLaunchStatus];
        response[@"ContentLaunchStatus"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPContentLauncherClusterLaunchURLResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::ContentLauncher::Commands::LaunchURLResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.data.data() length:data.data.size() encoding:NSUTF8StringEncoding];
        response[@"Data"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.contentLaunchStatus];
        response[@"ContentLaunchStatus"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDiagnosticLogsClusterRetrieveLogsResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DiagnosticLogs::Commands::RetrieveLogsResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    {
        id value;
        value = [NSData dataWithBytes:data.content.data() length:data.content.size()];
        response[@"Content"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedInt:data.timeStamp];
        response[@"TimeStamp"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedInt:data.timeSinceBoot];
        response[@"TimeSinceBoot"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearAllPinsResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearAllPinsResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearAllRfidsResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearAllRfidsResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearHolidayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearHolidayScheduleResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearPinResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearPinResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearRfidResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearRfidResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearWeekdayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearWeekdayScheduleResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterClearYeardayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearYeardayScheduleResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetHolidayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetHolidayScheduleResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.scheduleId];
        response[@"ScheduleId"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedInt:data.localStartTime];
        response[@"LocalStartTime"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedInt:data.localEndTime];
        response[@"LocalEndTime"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.operatingModeDuringHoliday];
        response[@"OperatingModeDuringHoliday"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetLogRecordResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetLogRecordResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.logEntryId];
        response[@"LogEntryId"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedInt:data.timestamp];
        response[@"Timestamp"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.eventType];
        response[@"EventType"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.source];
        response[@"Source"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.eventIdOrAlarmCode];
        response[@"EventIdOrAlarmCode"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.userId];
        response[@"UserId"] = value;
    }
    {
        id value;
        value = [NSData dataWithBytes:data.pin.data() length:data.pin.size()];
        response[@"Pin"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetPinResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetPinResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.userId];
        response[@"UserId"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.userStatus];
        response[@"UserStatus"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.userType];
        response[@"UserType"] = value;
    }
    {
        id value;
        value = [NSData dataWithBytes:data.pin.data() length:data.pin.size()];
        response[@"Pin"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetRfidResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetRfidResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.userId];
        response[@"UserId"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.userStatus];
        response[@"UserStatus"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.userType];
        response[@"UserType"] = value;
    }
    {
        id value;
        value = [NSData dataWithBytes:data.rfid.data() length:data.rfid.size()];
        response[@"Rfid"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetUserTypeResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetUserTypeResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.userId];
        response[@"UserId"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.userType];
        response[@"UserType"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetWeekdayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetWeekdayScheduleResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.scheduleId];
        response[@"ScheduleId"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.userId];
        response[@"UserId"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.daysMask];
        response[@"DaysMask"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.startHour];
        response[@"StartHour"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.startMinute];
        response[@"StartMinute"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.endHour];
        response[@"EndHour"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.endMinute];
        response[@"EndMinute"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterGetYeardayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetYeardayScheduleResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.scheduleId];
        response[@"ScheduleId"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.userId];
        response[@"UserId"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedInt:data.localStartTime];
        response[@"LocalStartTime"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedInt:data.localEndTime];
        response[@"LocalEndTime"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterLockDoorResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::LockDoorResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetHolidayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetHolidayScheduleResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetPinResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetPinResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetRfidResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetRfidResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetUserTypeResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetUserTypeResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetWeekdayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetWeekdayScheduleResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterSetYeardayScheduleResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetYeardayScheduleResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterUnlockDoorResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::UnlockDoorResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPDoorLockClusterUnlockWithTimeoutResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::UnlockWithTimeoutResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPGeneralCommissioningClusterArmFailSafeResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::GeneralCommissioning::Commands::ArmFailSafeResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response[@"ErrorCode"] = value;
    }
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response[@"DebugText"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPGeneralCommissioningClusterCommissioningCompleteResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::GeneralCommissioning::Commands::CommissioningCompleteResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response[@"ErrorCode"] = value;
    }
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response[@"DebugText"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPGeneralCommissioningClusterSetRegulatoryConfigResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::GeneralCommissioning::Commands::SetRegulatoryConfigResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response[@"ErrorCode"] = value;
    }
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response[@"DebugText"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPGroupsClusterAddGroupResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Groups::Commands::AddGroupResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response[@"GroupId"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPGroupsClusterGetGroupMembershipResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Groups::Commands::GetGroupMembershipResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.capacity];
        response[@"Capacity"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.groupCount];
        response[@"GroupCount"] = value;
    }
    {
        id value;
        value = [[NSMutableArray alloc] init];
        auto iter = data.groupList.begin();
        while (iter.Next()) {
            auto & entry = iter.GetValue();
            auto * newElement = [[NSNumber alloc] init];
            newElement = [NSNumber numberWithUnsignedShort:entry];
            [value addObject:newElement];
        }
        if (iter.GetStatus() != CHIP_NO_ERROR) {
            OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
            return;
        }
        response[@"GroupList"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPGroupsClusterRemoveGroupResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Groups::Commands::RemoveGroupResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response[@"GroupId"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPGroupsClusterViewGroupResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Groups::Commands::ViewGroupResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response[@"GroupId"] = value;
    }
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.groupName.data() length:data.groupName.size() encoding:NSUTF8StringEncoding];
        response[@"GroupName"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPIdentifyClusterIdentifyQueryResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Identify::Commands::IdentifyQueryResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.timeout];
        response[@"Timeout"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPKeypadInputClusterSendKeyResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::KeypadInput::Commands::SendKeyResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaFastForwardResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaFastForwardResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus];
        response[@"MediaPlaybackStatus"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaNextResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaNextResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus];
        response[@"MediaPlaybackStatus"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaPauseResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaPauseResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus];
        response[@"MediaPlaybackStatus"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaPlayResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaPlayResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus];
        response[@"MediaPlaybackStatus"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaPreviousResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaPreviousResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus];
        response[@"MediaPlaybackStatus"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaRewindResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaRewindResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus];
        response[@"MediaPlaybackStatus"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaSeekResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaSeekResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus];
        response[@"MediaPlaybackStatus"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaSkipBackwardResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaSkipBackwardResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus];
        response[@"MediaPlaybackStatus"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaSkipForwardResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaSkipForwardResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus];
        response[@"MediaPlaybackStatus"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaStartOverResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaStartOverResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus];
        response[@"MediaPlaybackStatus"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPMediaPlaybackClusterMediaStopResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::MediaStopResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.mediaPlaybackStatus];
        response[@"MediaPlaybackStatus"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterAddThreadNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::AddThreadNetworkResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response[@"ErrorCode"] = value;
    }
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response[@"DebugText"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterAddWiFiNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::AddWiFiNetworkResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response[@"ErrorCode"] = value;
    }
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response[@"DebugText"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterDisableNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::DisableNetworkResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response[@"ErrorCode"] = value;
    }
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response[@"DebugText"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterEnableNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::EnableNetworkResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response[@"ErrorCode"] = value;
    }
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response[@"DebugText"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterRemoveNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::RemoveNetworkResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response[@"ErrorCode"] = value;
    }
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response[@"DebugText"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterScanNetworksResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::ScanNetworksResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response[@"ErrorCode"] = value;
    }
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response[@"DebugText"] = value;
    }
    {
        id value;
        value = [[NSMutableArray alloc] init];
        auto iter = data.wifiScanResults.begin();
        while (iter.Next()) {
            auto & entry = iter.GetValue();
            auto * newElement = [[CHIPNetworkCommissioningClusterWiFiInterfaceScanResult alloc] init];
            newElement.Security = [NSNumber numberWithUnsignedChar:entry.security];
            newElement.Ssid = [NSData dataWithBytes:entry.ssid.data() length:entry.ssid.size()];
            newElement.Bssid = [NSData dataWithBytes:entry.bssid.data() length:entry.bssid.size()];
            newElement.Channel = [NSNumber numberWithUnsignedChar:entry.channel];
            newElement.FrequencyBand = [NSNumber numberWithUnsignedInt:entry.frequencyBand];
            [value addObject:newElement];
        }
        if (iter.GetStatus() != CHIP_NO_ERROR) {
            OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
            return;
        }
        response[@"WifiScanResults"] = value;
    }
    {
        id value;
        value = [[NSMutableArray alloc] init];
        auto iter = data.threadScanResults.begin();
        while (iter.Next()) {
            auto & entry = iter.GetValue();
            auto * newElement = [[CHIPNetworkCommissioningClusterThreadInterfaceScanResult alloc] init];
            newElement.DiscoveryResponse = [NSData dataWithBytes:entry.discoveryResponse.data()
                                                          length:entry.discoveryResponse.size()];
            [value addObject:newElement];
        }
        if (iter.GetStatus() != CHIP_NO_ERROR) {
            OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
            return;
        }
        response[@"ThreadScanResults"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterUpdateThreadNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::UpdateThreadNetworkResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response[@"ErrorCode"] = value;
    }
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response[@"DebugText"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPNetworkCommissioningClusterUpdateWiFiNetworkResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::UpdateWiFiNetworkResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.errorCode];
        response[@"ErrorCode"] = value;
    }
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response[@"DebugText"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPOtaSoftwareUpdateProviderClusterApplyUpdateResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::ApplyUpdateResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.action];
        response[@"Action"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedInt:data.delayedActionTime];
        response[@"DelayedActionTime"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPOtaSoftwareUpdateProviderClusterQueryImageResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::QueryImageResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    {
        id value;
        if (data.delayedActionTime.HasValue()) {
            value = [NSNumber numberWithUnsignedInt:data.delayedActionTime.Value()];
        } else {
            value = [NSNull null];
        }
        response[@"DelayedActionTime"] = value;
    }
    {
        id value;
        if (data.imageURI.HasValue()) {
            value = [[NSString alloc] initWithBytes:data.imageURI.Value().data()
                                             length:data.imageURI.Value().size()
                                           encoding:NSUTF8StringEncoding];
        } else {
            value = [NSNull null];
        }
        response[@"ImageURI"] = value;
    }
    {
        id value;
        if (data.softwareVersion.HasValue()) {
            value = [NSNumber numberWithUnsignedInt:data.softwareVersion.Value()];
        } else {
            value = [NSNull null];
        }
        response[@"SoftwareVersion"] = value;
    }
    {
        id value;
        if (data.softwareVersionString.HasValue()) {
            value = [[NSString alloc] initWithBytes:data.softwareVersionString.Value().data()
                                             length:data.softwareVersionString.Value().size()
                                           encoding:NSUTF8StringEncoding];
        } else {
            value = [NSNull null];
        }
        response[@"SoftwareVersionString"] = value;
    }
    {
        id value;
        if (data.updateToken.HasValue()) {
            value = [NSData dataWithBytes:data.updateToken.Value().data() length:data.updateToken.Value().size()];
        } else {
            value = [NSNull null];
        }
        response[@"UpdateToken"] = value;
    }
    {
        id value;
        if (data.userConsentNeeded.HasValue()) {
            value = [NSNumber numberWithBool:data.userConsentNeeded.Value()];
        } else {
            value = [NSNull null];
        }
        response[@"UserConsentNeeded"] = value;
    }
    {
        id value;
        if (data.metadataForRequestor.HasValue()) {
            value = [NSData dataWithBytes:data.metadataForRequestor.Value().data() length:data.metadataForRequestor.Value().size()];
        } else {
            value = [NSNull null];
        }
        response[@"MetadataForRequestor"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPOperationalCredentialsClusterAttestationResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::AttestationResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSData dataWithBytes:data.attestationElements.data() length:data.attestationElements.size()];
        response[@"AttestationElements"] = value;
    }
    {
        id value;
        value = [NSData dataWithBytes:data.signature.data() length:data.signature.size()];
        response[@"Signature"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPOperationalCredentialsClusterCertificateChainResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::CertificateChainResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSData dataWithBytes:data.certificate.data() length:data.certificate.size()];
        response[@"Certificate"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPOperationalCredentialsClusterNOCResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::NOCResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.statusCode];
        response[@"StatusCode"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.fabricIndex];
        response[@"FabricIndex"] = value;
    }
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.debugText.data() length:data.debugText.size() encoding:NSUTF8StringEncoding];
        response[@"DebugText"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPOperationalCredentialsClusterOpCSRResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::OpCSRResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSData dataWithBytes:data.NOCSRElements.data() length:data.NOCSRElements.size()];
        response[@"NOCSRElements"] = value;
    }
    {
        id value;
        value = [NSData dataWithBytes:data.attestationSignature.data() length:data.attestationSignature.size()];
        response[@"AttestationSignature"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPScenesClusterAddSceneResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::AddSceneResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response[@"GroupId"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.sceneId];
        response[@"SceneId"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPScenesClusterGetSceneMembershipResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::GetSceneMembershipResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.capacity];
        response[@"Capacity"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response[@"GroupId"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.sceneCount];
        response[@"SceneCount"] = value;
    }
    {
        id value;
        value = [[NSMutableArray alloc] init];
        auto iter = data.sceneList.begin();
        while (iter.Next()) {
            auto & entry = iter.GetValue();
            auto * newElement = [[NSNumber alloc] init];
            newElement = [NSNumber numberWithUnsignedChar:entry];
            [value addObject:newElement];
        }
        if (iter.GetStatus() != CHIP_NO_ERROR) {
            OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
            return;
        }
        response[@"SceneList"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPScenesClusterRemoveAllScenesResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::RemoveAllScenesResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response[@"GroupId"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPScenesClusterRemoveSceneResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::RemoveSceneResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response[@"GroupId"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.sceneId];
        response[@"SceneId"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPScenesClusterStoreSceneResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::StoreSceneResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response[@"GroupId"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.sceneId];
        response[@"SceneId"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPScenesClusterViewSceneResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::Scenes::Commands::ViewSceneResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.groupId];
        response[@"GroupId"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.sceneId];
        response[@"SceneId"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.transitionTime];
        response[@"TransitionTime"] = value;
    }
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.sceneName.data() length:data.sceneName.size() encoding:NSUTF8StringEncoding];
        response[@"SceneName"] = value;
    }
    {
        id value;
        value = [[NSMutableArray alloc] init];
        auto iter = data.extensionFieldSets.begin();
        while (iter.Next()) {
            auto & entry = iter.GetValue();
            auto * newElement = [[CHIPScenesClusterSceneExtensionFieldSet alloc] init];
            newElement.ClusterId = [NSNumber numberWithUnsignedInt:entry.clusterId];
            newElement.Length = [NSNumber numberWithUnsignedChar:entry.length];
            newElement.Value = [NSNumber numberWithUnsignedChar:entry.value];
            [value addObject:newElement];
        }
        if (iter.GetStatus() != CHIP_NO_ERROR) {
            OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
            return;
        }
        response[@"ExtensionFieldSets"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPTvChannelClusterChangeChannelResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TvChannel::Commands::ChangeChannelResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [[NSMutableArray alloc] init];
        auto iter = data.channelMatch.begin();
        while (iter.Next()) {
            auto & entry = iter.GetValue();
            auto * newElement = [[CHIPTvChannelClusterTvChannelInfo alloc] init];
            newElement.MajorNumber = [NSNumber numberWithUnsignedShort:entry.majorNumber];
            newElement.MinorNumber = [NSNumber numberWithUnsignedShort:entry.minorNumber];
            newElement.Name = [[NSString alloc] initWithBytes:entry.name.data()
                                                       length:entry.name.size()
                                                     encoding:NSUTF8StringEncoding];
            newElement.CallSign = [[NSString alloc] initWithBytes:entry.callSign.data()
                                                           length:entry.callSign.size()
                                                         encoding:NSUTF8StringEncoding];
            newElement.AffiliateCallSign = [[NSString alloc] initWithBytes:entry.affiliateCallSign.data()
                                                                    length:entry.affiliateCallSign.size()
                                                                  encoding:NSUTF8StringEncoding];
            [value addObject:newElement];
        }
        if (iter.GetStatus() != CHIP_NO_ERROR) {
            OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
            return;
        }
        response[@"ChannelMatch"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.errorType];
        response[@"ErrorType"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPTargetNavigatorClusterNavigateTargetResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TargetNavigator::Commands::NavigateTargetResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.status];
        response[@"Status"] = value;
    }
    {
        id value;
        value = [[NSString alloc] initWithBytes:data.data.data() length:data.data.size() encoding:NSUTF8StringEncoding];
        response[@"Data"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterBooleanResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::BooleanResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithBool:data.value];
        response[@"Value"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterTestAddArgumentsResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::TestAddArgumentsResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.returnValue];
        response[@"ReturnValue"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterTestEnumsResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::TestEnumsResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedShort:data.arg1];
        response[@"Arg1"] = value;
    }
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.arg2];
        response[@"Arg2"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterTestListInt8UReverseResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::TestListInt8UReverseResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [[NSMutableArray alloc] init];
        auto iter = data.arg1.begin();
        while (iter.Next()) {
            auto & entry = iter.GetValue();
            auto * newElement = [[NSNumber alloc] init];
            newElement = [NSNumber numberWithUnsignedChar:entry];
            [value addObject:newElement];
        }
        if (iter.GetStatus() != CHIP_NO_ERROR) {
            OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
            return;
        }
        response[@"Arg1"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterTestNullableOptionalResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::TestNullableOptionalResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithBool:data.wasPresent];
        response[@"WasPresent"] = value;
    }
    {
        id value;
        if (data.wasNull.HasValue()) {
            value = [NSNumber numberWithBool:data.wasNull.Value()];
        } else {
            value = [NSNull null];
        }
        response[@"WasNull"] = value;
    }
    {
        id value;
        if (data.value.HasValue()) {
            value = [NSNumber numberWithUnsignedChar:data.value.Value()];
        } else {
            value = [NSNull null];
        }
        response[@"Value"] = value;
    }
    {
        id value;
        if (data.originalValue.HasValue()) {
            if (data.originalValue.Value().IsNull()) {
                value = [NSNull null];
            } else {
                value = [NSNumber numberWithUnsignedChar:data.originalValue.Value().Value()];
            }
        } else {
            value = [NSNull null];
        }
        response[@"OriginalValue"] = value;
    }
    DispatchSuccess(context, response);
};

void CHIPTestClusterClusterTestSpecificResponseCallbackBridge::OnSuccessFn(
    void * context, const chip::app::Clusters::TestCluster::Commands::TestSpecificResponse::DecodableType & data)
{
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {
        id value;
        value = [NSNumber numberWithUnsignedChar:data.returnValue];
        response[@"ReturnValue"] = value;
    }
    DispatchSuccess(context, response);
};
